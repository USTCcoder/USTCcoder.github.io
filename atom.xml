<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://USTCcoder.github.io/"/>
  <updated>2020-05-09T13:26:31.684Z</updated>
  <id>https://USTCcoder.github.io/</id>
  
  <author>
    <name>USTCcoder</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Addition VS Concatenate</title>
    <link href="https://USTCcoder.github.io/2020/05/08/deep%20learning%20addition_vs_concatenate/"/>
    <id>https://USTCcoder.github.io/2020/05/08/deep learning addition_vs_concatenate/</id>
    <published>2020-05-08T13:25:59.000Z</published>
    <updated>2020-05-09T13:26:31.684Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">Addition VS Concatenate</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>Activation(&#x6FC0;&#x6D3B;&#x51FD;&#x6570;)</strong>:&#x5728;&#x591A;&#x5C42;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4E2D;&#xFF0C;&#x4E0A;&#x5C42;&#x8282;&#x70B9;&#x7684;&#x8F93;&#x51FA;&#x548C;&#x4E0B;&#x5C42;&#x8282;&#x70B9;&#x7684;&#x8F93;&#x5165;&#x4E4B;&#x95F4;&#x5177;&#x6709;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x5173;&#x7CFB;&#xFF0C;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x79F0;&#x4E3A;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x3002;&#x5982;&#x679C;&#x4E0D;&#x7528;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x6BCF;&#x4E00;&#x5C42;&#x8282;&#x70B9;&#x7684;&#x8F93;&#x5165;&#x90FD;&#x662F;&#x4E0A;&#x5C42;&#x8F93;&#x51FA;&#x7684;&#x7EBF;&#x6027;&#x51FD;&#x6570;&#xFF0C;&#x5F88;&#x5BB9;&#x6613;&#x9A8C;&#x8BC1;&#xFF0C;&#x65E0;&#x8BBA;&#x4F60;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x6709;&#x591A;&#x5C11;&#x5C42;&#xFF0C;&#x8F93;&#x51FA;&#x90FD;&#x662F;&#x8F93;&#x5165;&#x7684;&#x7EBF;&#x6027;&#x7EC4;&#x5408;&#xFF0C;&#x4E0E;&#x6CA1;&#x6709;&#x9690;&#x85CF;&#x5C42;&#x6548;&#x679C;&#x76F8;&#x5F53;&#xFF0C;&#x8FD9;&#x6837;&#x4F1A;&#x5BFC;&#x81F4;&#x7F51;&#x7EDC;&#x7684;&#x903C;&#x8FD1;&#x80FD;&#x529B;&#x5927;&#x5927;&#x964D;&#x4F4E;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x5F15;&#x5165;&#x975E;&#x7EBF;&#x6027;&#x51FD;&#x6570;&#x4F5C;&#x4E3A;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x63D0;&#x9AD8;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8868;&#x8FBE;&#x80FD;&#x529B;&#xFF0C;&#x53EF;&#x4EE5;&#x903C;&#x8FD1;&#x4EFB;&#x610F;&#x51FD;&#x6570;&#xFF0C;&#x4E0D;&#x518D;&#x662F;&#x8F93;&#x5165;&#x7684;&#x7EBF;&#x6027;&#x7EC4;&#x5408;&#x3002;<br><a id="more"></a></p><p><img src="/images/deep_learning/activation.png" alt="activation"></p><h1 id="Sigmoid&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"><a href="#Sigmoid&#x6FC0;&#x6D3B;&#x51FD;&#x6570;" class="headerlink" title="Sigmoid&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"></a><font size="5" color="red">Sigmoid&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</font></h1><p>$$ f(z) = \frac{1}{1+e^{-z}} $$<br><img src="/images/deep_learning/sigmoid.png" alt="sigmoid"></p><h1 id="tanh&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"><a href="#tanh&#x6FC0;&#x6D3B;&#x51FD;&#x6570;" class="headerlink" title="tanh&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"></a><font size="5" color="red">tanh&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</font></h1><p>$$ f(x) = \frac{e^{x}-e^{-x}}{e^{x}+e^{-x}} $$<br><img src="/images/deep_learning/tanh.png" alt="tanh"></p><h1 id="ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"><a href="#ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;" class="headerlink" title="ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"></a><font size="5" color="red">ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</font></h1><p>$$ f(x) = \max(0, x) $$<br><img src="/images/deep_learning/relu.png" alt="relu"></p><h1 id="Leaky-ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"><a href="#Leaky-ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;" class="headerlink" title="Leaky-ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"></a><font size="5" color="red">Leaky-ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</font></h1><p>$$ f(x) = \max(\alpha x, x), \alpha=0.01 $$<br><img src="/images/deep_learning/leaky_relu.png" alt="leaky_relu"></p><h1 id="ReLU6&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"><a href="#ReLU6&#x6FC0;&#x6D3B;&#x51FD;&#x6570;" class="headerlink" title="ReLU6&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"></a><font size="5" color="red">ReLU6&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</font></h1><p>$$ f(x) = \min(6, \max(0, x)) $$<br><img src="/images/deep_learning/relu6.png" alt="relu6"></p><h1 id="ELU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"><a href="#ELU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;" class="headerlink" title="ELU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"></a><font size="5" color="red">ELU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</font></h1><p>$$ f(x) = \begin{cases}  x &amp;  x &gt; 0 \\ \alpha(e^{x} - 1) &amp; x \le 0 \end{cases}, \alpha=1 $$<br><img src="/images/deep_learning/elu.png" alt="elu"></p><h1 id="SELU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"><a href="#SELU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;" class="headerlink" title="SELU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"></a><font size="5" color="red">SELU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</font></h1><p>$$ f(x) = \lambda \begin{cases}  x &amp;  x &gt; 0 \\ \alpha(e^{x} - 1) &amp; x \le 0 \end{cases}$$<br>$$ \begin{cases} \lambda=1.0507009873554804934193349852946 \\ \alpha=1.6732632423543772848170429916717 \end{cases}$$<br><img src="/images/deep_learning/selu.png" alt="selu"></p><h1 id="Swish&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"><a href="#Swish&#x6FC0;&#x6D3B;&#x51FD;&#x6570;" class="headerlink" title="Swish&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"></a><font size="5" color="red">Swish&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</font></h1><p>$$ f(x) = x * sigmoid(x) $$<br><img src="/images/deep_learning/swish.png" alt="swish"></p><h1 id="H-Swish&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"><a href="#H-Swish&#x6FC0;&#x6D3B;&#x51FD;&#x6570;" class="headerlink" title="H-Swish&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"></a><font size="5" color="red">H-Swish&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</font></h1><p>$$ f(x) = x * \frac{ReLU6(x + 3)}{6} $$<br><img src="/images/deep_learning/h_swish.png" alt="h_swish"></p><h1 id="Softmax&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"><a href="#Softmax&#x6FC0;&#x6D3B;&#x51FD;&#x6570;" class="headerlink" title="Softmax&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"></a><font size="5" color="red">Softmax&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</font></h1><p>$$ \sigma_{i}(z) = \frac{e^{z_i}}{\sum_{j=1}^{m}{e^{z_j}}} $$<br><img src="/images/deep_learning/softmax.png" alt="softmax"></p><h1 id="&#x4F18;&#x7F3A;&#x70B9;&#x6BD4;&#x8F83;"><a href="#&#x4F18;&#x7F3A;&#x70B9;&#x6BD4;&#x8F83;" class="headerlink" title="&#x4F18;&#x7F3A;&#x70B9;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x4F18;&#x7F3A;&#x70B9;&#x6BD4;&#x8F83;</font></h1><p>Sigmoid&#x51FD;&#x6570;&#x4F18;&#x70B9;&#xFF1A;Sigmoid&#x51FD;&#x6570;&#x5904;&#x5904;&#x8FDE;&#x7EED;&#xFF0C;&#x5904;&#x5904;&#x53EF;&#x5BFC;&#x3002;&#x4E14;<strong>&#x80FD;&#x591F;&#x63A7;&#x5236;&#x6570;&#x503C;&#x7684;&#x5E45;&#x5EA6;</strong>&#xFF0C;&#x4E0D;&#x4F1A;&#x4EA7;&#x751F;&#x5F88;&#x5927;&#x7684;&#x53D8;&#x5316;&#xFF0C;&#x53EF;&#x4EE5;<strong>&#x4F5C;&#x4E3A;&#x4E8C;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x7684;&#x8F93;&#x51FA;</strong>&#xFF0C;&#x800C;ReLU&#x7C7B;&#x578B;&#x7684;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x5BF9;&#x5927;&#x4E8E;0&#x7684;&#x503C;&#x51E0;&#x4E4E;&#x6CA1;&#x6709;&#x7EA6;&#x675F;&#x3002;<br>Sigmoid&#x51FD;&#x6570;&#x7F3A;&#x70B9;&#xFF1A;&#x9971;&#x548C;&#x533A;&#x7684;&#x795E;&#x7ECF;&#x5143;&#x4F1A;&#x4EA7;&#x751F;<strong>&#x68AF;&#x5EA6;&#x6D88;&#x5931;</strong>&#x73B0;&#x8C61;&#xFF0C;&#x4F7F;&#x5F97;<strong>&#x5B66;&#x4E60;&#x901F;&#x5EA6;&#x5927;&#x5927;&#x4E0B;&#x964D;</strong>&#xFF0C;&#x5E76;&#x4E14;&#x6307;&#x6570;&#x51FD;&#x6570;&#x8BA1;&#x7B97;&#x8017;&#x65F6;&#x3002;<br>tanh&#x51FD;&#x6570;&#x4F18;&#x70B9;&#xFF1A;tanh&#x51FD;&#x6570;&#x548C;Sigmoid&#x7C7B;&#x4F3C;&#xFF0C;&#x4F46;&#x662F;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;<strong>tanh&#x7684;&#x5BFC;&#x6570;&#x7684;&#x503C;&#x57DF;&#x4E3A;(0, 1]&#xFF0C;&#x800C;Sigmoid&#x7684;&#x5BFC;&#x6570;&#x7684;&#x503C;&#x57DF;&#x4E3A;(0, 0.25]</strong>&#xFF0C;&#x56E0;&#x6B64;&#x76F8;&#x5F53;&#x4E8E;<strong>&#x5EF6;&#x8FDF;&#x4E86;&#x9971;&#x548C;&#x5468;&#x671F;</strong>&#x3002;<br>tanh&#x51FD;&#x6570;&#x7F3A;&#x70B9;&#xFF1A;tanh&#x51FD;&#x6570;&#x548C;Sigmoid&#x7C7B;&#x4F3C;&#xFF0C;&#x4E5F;&#x5177;&#x6709;<strong>&#x68AF;&#x5EA6;&#x6D88;&#x5931;</strong>&#x95EE;&#x9898;&#xFF0C;&#x548C;&#x6307;&#x6570;&#x8BA1;&#x7B97;&#x8017;&#x65F6;&#x95EE;&#x9898;&#x3002;<br>ReLU&#x7C7B;&#x51FD;&#x6570;&#x4F18;&#x70B9;&#xFF1A;ReLU&#x7C7B;&#x578B;&#x51FD;&#x6570;&#x4F1A;&#x4F7F;&#x4E00;&#x90E8;&#x5206;&#x795E;&#x7ECF;&#x5143;&#x4E3A;0&#x6216;&#x8005;&#x975E;&#x5E38;&#x5C0F;&#xFF0C;&#x4F7F;&#x5F97;&#x7F51;&#x7EDC;&#x5177;&#x6709;<strong>&#x7A00;&#x758F;&#x6027;</strong>&#xFF0C;<strong>&#x51CF;&#x5C11;&#x4E86;&#x53C2;&#x6570;&#x7684;&#x76F8;&#x4E92;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;</strong>&#xFF0C;<strong>&#x7F13;&#x89E3;&#x4E86;&#x8FC7;&#x62DF;&#x5408;</strong>&#xFF0C;&#x800C;&#x4E14;ReLU&#x51FD;&#x6570;&#x53CA;&#x5176;&#x5BFC;&#x6570;&#x7684;&#x8BA1;&#x7B97;&#x975E;&#x5E38;&#x7B80;&#x5355;&#x3002;<br>ReLU&#x7C7B;&#x51FD;&#x6570;&#x7F3A;&#x70B9;&#xFF1A;&#x53EF;&#x80FD;<strong>&#x5B58;&#x5728;&#x795E;&#x7ECF;&#x5143;&#x574F;&#x6B7B;</strong>&#x73B0;&#x8C61;&#xFF0C;&#x5728;x&lt;0&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x68AF;&#x5EA6;&#x4E3A;0&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x4F7F;&#x8FD9;&#x4E2A;&#x795E;&#x7ECF;&#x5143;<strong>&#x5F88;&#x96BE;&#x518D;&#x88AB;&#x6FC0;&#x6D3B;</strong>&#xFF0C;&#x4E14;ReLU&#x51FD;&#x6570;&#x4E0D;&#x80FD;&#x63A7;&#x5236;&#x53C2;&#x6570;&#x7684;&#x5E45;&#x5EA6;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x4EA7;&#x751F;<strong>&#x68AF;&#x5EA6;&#x7206;&#x70B8;</strong>&#x73B0;&#x8C61;&#x3002;<br>Swish&#x7C7B;&#x51FD;&#x6570;&#x4F18;&#x70B9;&#xFF1A;Swish&#x51FD;&#x6570;&#x662F;<strong>&#x4ECB;&#x4E8E;ReLU&#x51FD;&#x6570;&#x548C;Sigmoid&#x51FD;&#x6570;&#x4E4B;&#x95F4;&#x7684;&#x4E00;&#x79CD;&#x5E73;&#x6ED1;&#x51FD;&#x6570;</strong>&#xFF0C;<strong>&#x5177;&#x6709;&#x4E24;&#x8005;&#x7684;&#x4F18;&#x70B9;</strong>&#xFF0C;&#x4E0D;&#x4F1A;&#x50CF;Sigmoid&#x51FD;&#x6570;&#x4E00;&#x6837;&#x4EA7;&#x751F;&#x9971;&#x548C;&#x533A;&#xFF0C;&#x4E5F;&#x4E0D;&#x4F1A;&#x50CF;ReLU&#x51FD;&#x6570;&#x4E00;&#x6837;&#x5B58;&#x5728;&#x574F;&#x6B7B;&#x795E;&#x7ECF;&#x5143;&#x3002;<br>Swish&#x7C7B;&#x51FD;&#x6570;&#x7F3A;&#x70B9;&#xFF1A;Swish&#x51FD;&#x6570;&#x4E5F;<strong>&#x5177;&#x6709;&#x4E24;&#x8005;&#x7684;&#x7F3A;&#x70B9;</strong>&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;Sigmoid&#x51FD;&#x6570;&#x8BA1;&#x7B97;&#x8017;&#x65F6;&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;ReLU&#x51FD;&#x6570;&#x96BE;&#x4EE5;&#x63A7;&#x5236;&#x53C2;&#x6570;&#x5E45;&#x5EA6;&#xFF0C;&#x4F46;&#x6574;&#x4F53;&#x8868;&#x73B0;&#x8F83;&#x597D;&#x3002;<br>Softmax&#x51FD;&#x6570;&#x7279;&#x70B9;&#xFF1A;Softmax&#x51FD;&#x6570;&#x548C;&#x5176;&#x4ED6;&#x7684;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x4E0D;&#x540C;&#xFF0C;Softmax&#x4E3B;&#x8981;&#x7528;&#x4E8E;<strong>&#x591A;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;</strong>&#x4E2D;&#xFF0C;&#x5982;<strong>&#x56FE;&#x50CF;&#x5206;&#x5272;</strong>&#xFF0C;<strong>&#x76EE;&#x6807;&#x68C0;&#x6D4B;</strong>&#xFF0C;&#x9700;&#x8981;&#x5224;&#x65AD;&#x67D0;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x6216;&#x8005;&#x67D0;&#x4E00;&#x4E2A;&#x9884;&#x6D4B;&#x6846;&#x5C5E;&#x4E8E;&#x54EA;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#x3002;Softmax&#x5C06;&#x8F93;&#x5165;&#x5F52;&#x4E00;&#x5316;&#x5230;[0, 1]&#x4E4B;&#x95F4;&#xFF0C;&#x5E76;&#x4E14;&#x4FDD;&#x8BC1;&#x548C;&#x4E3A;1&#xFF0C;&#x4F7F;&#x4EBA;&#x80FD;&#x591F;&#x8054;&#x60F3;&#x5230;&#x6982;&#x7387;&#x7684;&#x6761;&#x4EF6;&#xFF0C;&#x4E5F;&#x662F;&#x5C5E;&#x4E8E;[0, 1]&#xFF0C;&#x5E76;&#x4E14;&#x548C;&#x4E3A;1&#x3002;&#x52A0;&#x4E0A;&#x6307;&#x6570;&#x7684;&#x4F5C;&#x7528;&#x662F;<strong>&#x589E;&#x52A0;&#x6837;&#x672C;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x8DDD;</strong>&#xFF0C;&#x5982;&#x679C;&#x8F93;&#x5165;&#x4E3A;90&#x4E2A;1&#x548C;1&#x4E2A;10&#xFF0C;&#x5219;&#x76F4;&#x63A5;&#x5F52;&#x4E00;&#x5316;&#x7684;&#x7ED3;&#x679C;&#x4E3A;90&#x4E2A;0.01&#x548C;1&#x4E2A;0.1&#xFF0C;&#x5982;&#x679C;10&#x662F;&#x5BF9;&#x5E94;&#x7684;&#x7C7B;&#x522B;&#xFF0C;&#x5373;&#x4F7F;&#x5DF2;&#x7ECF;&#x5206;&#x7C7B;&#x7684;&#x8F83;&#x597D;&#xFF0C;&#x4ECD;&#x7136;&#x4F1A;&#x4F7F;&#x5F97;&#x8BEF;&#x5DEE;&#x8F83;&#x5927;&#x3002;&#x52A0;&#x4E0A;&#x6307;&#x6570;&#x8FD0;&#x7B97;&#x540E;&#xFF0C;&#x5F52;&#x4E00;&#x5316;&#x7684;&#x7ED3;&#x679C;&#x4E3A;90&#x4E2A;0.000122&#xFF0C;1&#x4E2A;0.989&#xFF0C;&#x8FD9;&#x6837;&#x8BEF;&#x5DEE;&#x5C31;&#x4F1A;&#x8F83;&#x5C0F;&#xFF0C;&#x66F4;&#x52A0;&#x63A5;&#x8FD1;&#x4E8E;&#x771F;&#x5B9E;&#x7684;&#x60C5;&#x51B5;&#x3002;</p><h1 id="&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x7684;&#x9009;&#x62E9;"><a href="#&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x7684;&#x9009;&#x62E9;" class="headerlink" title="&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x7684;&#x9009;&#x62E9;"></a><font size="5" color="red">&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x7684;&#x9009;&#x62E9;</font></h1><ol><li>&#x9996;&#x5148;<strong>&#x5224;&#x65AD;&#x4EFB;&#x52A1;&#x7C7B;&#x578B;</strong>&#xFF0C;&#x662F;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x8FD8;&#x662F;&#x4F5C;&#x4E3A;&#x9690;&#x85CF;&#x5C42;&#x975E;&#x7EBF;&#x6027;&#x5355;&#x5143;&#xFF0C;&#x5982;&#x679C;&#x662F;<strong>&#x591A;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x5219;&#x8003;&#x8651;Softmax&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</strong>&#xFF0C;&#x5982;&#x679C;&#x662F;<strong>&#x4E8C;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x5219;&#x8003;&#x8651;Sigmoid&#xFF0C;tanh&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</strong>&#xFF0C;&#x5982;&#x679C;&#x662F;<strong>&#x9690;&#x85CF;&#x5C42;&#x975E;&#x7EBF;&#x6027;&#x5355;&#x5143;&#x5219;&#x8003;&#x8651;Sigmoid&#xFF0C;tanh&#xFF0C;ReLU&#xFF0C;Swish</strong>&#x7B49;&#x7B49;&#x3002;</li><li>&#x5982;&#x679C;&#x662F;&#x9690;&#x85CF;&#x5C42;&#x975E;&#x7EBF;&#x6027;&#x5355;&#x5143;&#xFF0C;<strong>&#x9996;&#x5148;&#x5C1D;&#x8BD5;ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</strong>&#xFF0C;&#x5982;&#x679C;<strong>ReLU&#x6548;&#x679C;&#x6B20;&#x4F73;&#x5219;&#x8003;&#x8651;ReLU&#x53D8;&#x79CD;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</strong>&#xFF0C;ReLU6&#xFF0C;Leaky_ReLU&#xFF0C;SELU&#xFF0C;ELU&#x7B49;&#x7B49;</li><li>&#x5982;&#x679C;&#x6548;&#x679C;&#x4E0D;&#x597D;&#xFF0C;<strong>&#x518D;&#x8003;&#x8651;Swish&#x7C7B;&#x51FD;&#x6570;&#x548C;Sigmoid&#xFF0C;tanh&#x51FD;&#x6570;</strong>&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;<strong>&#x53D1;&#x73B0;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x95EE;&#x9898;&#xFF0C;&#x5219;&#x907F;&#x514D;&#x4F7F;&#x7528;Sigmoid&#x548C;tanh&#x51FD;&#x6570;</strong>&#x3002;<br>4.&#x5982;&#x679C;&#x90FD;&#x4E0D;&#x597D;&#x7528;&#xFF0C;&#x5219;<strong>&#x8003;&#x8651;&#x662F;&#x5426;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#xFF0C;&#x8D85;&#x53C2;&#x6570;&#xFF0C;&#x635F;&#x5931;&#x51FD;&#x6570;&#x8BBE;&#x8BA1;&#x51FA;&#x73B0;&#x95EE;&#x9898;</strong>&#x3002;</li></ol><h1 id="&#x5C0F;&#x7ED3;"><a href="#&#x5C0F;&#x7ED3;" class="headerlink" title="&#x5C0F;&#x7ED3;"></a><font size="5" color="red">&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x5DE5;&#x7A0B;&#x95EE;&#x9898;&#x662F;&#x4E00;&#x7C7B;&#x975E;&#x5E38;&#x590D;&#x6742;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x5F80;&#x5F80;&#x9700;&#x8981;<strong>&#x7F51;&#x7EDC;&#x7ED3;&#x6784;</strong>&#xFF0C;<strong>&#x8D85;&#x53C2;&#x6570;</strong>&#xFF0C;<strong>&#x635F;&#x5931;&#x51FD;&#x6570;</strong>&#xFF0C;<strong>&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x76F8;&#x4E92;&#x914D;&#x5408;</strong>&#x5DE5;&#x4F5C;&#xFF0C;&#x53EF;&#x80FD;&#x67D0;&#x4E2A;&#x7ED3;&#x6784;&#x6216;&#x8005;&#x67D0;&#x4E2A;&#x53C2;&#x6570;&#x9002;&#x5408;&#x67D0;&#x4E2A;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#xFF0C;&#x800C;&#x53E6;&#x5916;&#x7684;&#x7ED3;&#x6784;&#x9002;&#x5408;&#x5176;&#x4ED6;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x3002;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5728;&#x5B9E;&#x9645;&#x7684;&#x5DE5;&#x7A0B;&#x4EFB;&#x52A1;&#x4E2D;&#x6162;&#x6162;&#x6478;&#x7D22;&#xFF0C;&#x591A;&#x591A;&#x5C1D;&#x8BD5;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Addition VS Concatenate&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="常用技巧" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>各种标准化对比</title>
    <link href="https://USTCcoder.github.io/2020/05/07/deep%20learning%20BN_VS_LN_VS_IN_VS_GN/"/>
    <id>https://USTCcoder.github.io/2020/05/07/deep learning BN_VS_LN_VS_IN_VS_GN/</id>
    <published>2020-05-07T09:53:31.000Z</published>
    <updated>2020-05-09T13:17:29.291Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">Normalization</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>Normalization(&#x6807;&#x51C6;&#x5316;)</strong>:&#x6DF1;&#x5EA6;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x6A21;&#x578B;&#x8BAD;&#x7EC3;&#x56F0;&#x96BE;&#xFF0C;&#x5176;&#x4E2D;&#x4E00;&#x4E2A;&#x91CD;&#x8981;&#x7684;&#x73B0;&#x8C61;&#x5C31;&#x662F;<strong>ICS(Internal Covariate Shift&#xFF0C;&#x5185;&#x90E8;&#x534F;&#x53D8;&#x91CF;&#x504F;&#x79FB;)</strong>&#xFF0C;&#x5176;&#x4E2D;<strong>&#x89E3;&#x51B3;&#x7684;&#x65B9;&#x6CD5;&#x5C31;&#x662F;Normalization</strong>&#xFF0C;&#x73B0;&#x5728;&#x6807;&#x51C6;&#x5316;&#x6210;&#x4E3A;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;<strong>&#x5FC5;&#x5907;&#x795E;&#x5668;</strong>&#xFF0C;&#x4ECA;&#x5929;&#x5E26;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x770B;&#x4E00;&#x770B;&#xFF0C;&#x77A7;&#x4E00;&#x77A7;&#x3002;<br><a id="more"></a></p><h1 id="ICS&#x7684;&#x89E3;&#x91CA;"><a href="#ICS&#x7684;&#x89E3;&#x91CA;" class="headerlink" title="ICS&#x7684;&#x89E3;&#x91CA;"></a><font size="5" color="red">ICS&#x7684;&#x89E3;&#x91CA;</font></h1><p><strong>ICS(Internal Covariate Shift&#xFF0C;&#x5185;&#x90E8;&#x534F;&#x53D8;&#x91CF;&#x504F;&#x79FB;)</strong>&#xFF1A;&#x5C06;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x6BCF;&#x4E00;&#x5C42;&#x7684;&#x8F93;&#x5165;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x5206;&#x5E03;&#x6765;&#x770B;&#x4EE3;&#xFF0C;&#x7531;&#x4E8E;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x662F;&#x968F;&#x673A;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x80FD;&#x4F1A;<strong>&#x5BFC;&#x81F4;&#x76F8;&#x540C;&#x7684;&#x8F93;&#x5165;&#x5206;&#x5E03;&#x5374;&#x5F97;&#x5230;&#x4E86;&#x4E0D;&#x540C;&#x7684;&#x8F93;&#x51FA;&#x5206;&#x5E03;</strong>&#x3002;&#x968F;&#x7740;&#x7F51;&#x7EDC;&#x5C42;&#x6570;&#x7684;&#x52A0;&#x6DF1;&#xFF0C;<strong>&#x8F93;&#x5165;&#x5206;&#x5E03;&#x518D;&#x7ECF;&#x8FC7;&#x591A;&#x6B21;&#x975E;&#x7EBF;&#x6027;&#x53D8;&#x6362;&#x540E;&#xFF0C;&#x5DF2;&#x7ECF;&#x88AB;&#x6539;&#x53D8;</strong>&#xFF0C;&#x4F46;&#x662F;&#x5176;<strong>&#x6807;&#x7B7E;&#x8FD8;&#x662F;&#x4E00;&#x81F4;&#x7684;</strong>&#xFF0C;&#x8FD9;&#x5C31;&#x6709;&#x4E00;&#x79CD;&#x4E0D;&#x534F;&#x8C03;&#x7684;&#x611F;&#x89C9;&#xFF0C;&#x8FD9;&#x53EF;&#x80FD;&#x4F1A;&#x5E26;&#x6765;&#x4E0B;&#x9762;&#x51E0;&#x79CD;&#x95EE;&#x9898;&#x3002;</p><ol><li>&#x5728;&#x8BAD;&#x7EC3;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;<strong>&#x7F51;&#x7EDC;&#x9700;&#x8981;&#x4E0D;&#x65AD;&#x9002;&#x5E94;&#x65B0;&#x7684;&#x8F93;&#x5165;&#x6570;&#x636E;&#x5206;&#x5E03;&#xFF0C;&#x6240;&#x4EE5;&#x4F1A;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x5B66;&#x4E60;&#x901F;&#x5EA6;</strong>&#x3002;</li><li>&#x7531;&#x4E8E;<strong>&#x53C2;&#x6570;&#x7684;&#x5206;&#x5E03;&#x4E0D;&#x540C;&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x80FD;&#x5BFC;&#x81F4;&#x5F88;&#x591A;&#x6570;&#x636E;&#x843D;&#x5165;&#x9971;&#x548C;&#x533A;&#xFF0C;&#x4F7F;&#x5F97;&#x5B66;&#x4E60;&#x8FC7;&#x65E9;&#x505C;&#x6B62;</strong>&#x3002;</li><li>&#x67D0;&#x4E9B;<strong>&#x53C2;&#x6570;&#x5206;&#x5E03;&#x504F;&#x79BB;&#x592A;&#x5927;&#xFF0C;&#x5BF9;&#x5176;&#x4ED6;&#x5C42;&#x6216;&#x8005;&#x8F93;&#x51FA;&#x4EA7;&#x751F;&#x4E86;&#x5DE8;&#x5927;&#x5F71;&#x54CD;</strong>&#x3002;</li></ol><h1 id="Normalization&#x539F;&#x7406;&#x5206;&#x6790;"><a href="#Normalization&#x539F;&#x7406;&#x5206;&#x6790;" class="headerlink" title="Normalization&#x539F;&#x7406;&#x5206;&#x6790;"></a><font size="5" color="red">Normalization&#x539F;&#x7406;&#x5206;&#x6790;</font></h1><p>&#x2003;&#x2003;&#x4E3A;&#x4E86;&#x89E3;&#x51B3;&#x4E0A;&#x8FF0;ICS&#x95EE;&#x9898;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5C06;&#x53D8;&#x91CF;&#x5206;&#x5E03;&#x53D8;&#x6210;&#x76F8;&#x540C;&#x5206;&#x5E03;&#x7684;&#xFF0C;&#x8FD9;&#x4F7F;&#x6211;&#x4EEC;&#x60F3;&#x5230;&#x4E86;<strong>&#x6807;&#x51C6;&#x5316;&#x64CD;&#x4F5C;</strong>&#x3002;<br><img src="/images/deep_learning/normal.png" alt="normal"></p><ol><li>&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;$ \overset{\land}{x} = \frac{x - \mu}{\sigma} $&#xFF0C;$ \mu $&#x662F;&#x5E73;&#x79FB;&#x53C2;&#x6570;&#xFF0C;$ \sigma $&#x662F;&#x7F29;&#x653E;&#x53C2;&#x6570;<strong>&#x5C06;&#x6570;&#x636E;&#x53D8;&#x6210;&#x7B26;&#x5408;&#x5747;&#x503C;&#x4E3A;0&#xFF0C;&#x65B9;&#x5DEE;&#x4E3A;1&#x7684;&#x6807;&#x51C6;&#x5206;&#x5E03;</strong>&#x3002;</li><li>&#x6211;&#x4EEC;&#x518D;&#x901A;&#x8FC7;$ y = \gamma * \overset{\land}{x} + \beta $, $ \beta $&#x662F;&#x518D;&#x5E73;&#x79FB;&#x53C2;&#x6570;&#xFF0C;$ \gamma $&#x662F;&#x518D;&#x7F29;&#x653E;&#x53C2;&#x6570;<strong>&#x5C06;&#x6570;&#x636E;&#x53D8;&#x6210;&#x7B26;&#x5408;&#x5747;&#x503C;&#x4E3A;$ \beta $&#xFF0C;&#x65B9;&#x5DEE;&#x4E3A;$ {\gamma}^2 $&#x7684;&#x6807;&#x51C6;&#x5206;&#x5E03;</strong>&#x3002;</li></ol><p><font size="3" color="red">&#x2003;&#x2003;&#x5947;&#x602A;&#x7684;&#x77E5;&#x8BC6;&#x589E;&#x52A0;&#x4E86;&#xFF1F;&#xFF1F;&#xFF1F;&#x4E3A;&#x4EC0;&#x4E48;&#x7B2C;&#x4E00;&#x6B65;&#x5F97;&#x5230;&#x6807;&#x51C6;&#x5206;&#x5E03;&#x4E4B;&#x540E;&#xFF0C;&#x7B2C;&#x4E8C;&#x6B65;&#x53C8;&#x7ED9;&#x53D8;&#x8D70;&#x4E86;&#xFF1F;</font><br>&#x2003;&#x2003;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF0C;&#x9996;&#x5148;&#x4E3A;&#x4E86;<strong>&#x4FDD;&#x8BC1;&#x6A21;&#x578B;&#x7684;&#x8868;&#x8FBE;&#x80FD;&#x529B;&#x4E0D;&#x56E0;&#x4E3A;&#x89C4;&#x8303;&#x5316;&#x800C;&#x4E0B;&#x964D;</strong>&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x518D;&#x5E73;&#x79FB;&#x548C;&#x7F29;&#x653E;&#xFF0C;&#x4F1A;&#x5BFC;&#x81F4;&#x8F93;&#x5165;&#x7684;&#x53C2;&#x6570;&#x5206;&#x5E03;&#x53EF;&#x80FD;&#x53D1;&#x751F;&#x8F83;&#x5927;&#x7684;&#x53D8;&#x5316;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x80FD;&#x4F1A;&#x5BF9;&#x6A21;&#x578B;&#x7684;&#x8868;&#x8FBE;&#x80FD;&#x529B;&#x4EA7;&#x751F;&#x5F71;&#x54CD;&#x3002;&#x5176;&#x6B21;&#x8FD9;&#x4E24;&#x7EC4;&#x53C2;&#x6570;&#x662F;&#x610F;&#x4E49;&#x4E0A;&#x5B8C;&#x5168;&#x4E0D;&#x540C;&#x7684;&#x6982;&#x5FF5;&#xFF0C;<strong>$ \mu $&#x548C;$ \sigma $&#x53D7;&#x5230;&#x4E0A;&#x4E00;&#x5C42;&#x8F93;&#x5165;&#x7684;&#x5F71;&#x54CD;&#xFF0C;$ \beta $&#x548C;$ \gamma $&#x662F;&#x72EC;&#x7ACB;&#x7684;&#xFF0C;&#x4E0E;&#x8F93;&#x5165;&#x65E0;&#x5173;</strong>&#xFF0C;&#x662F;&#x7F51;&#x7EDC;&#x540E;&#x6765;&#x52A0;&#x5165;&#x7684;&#xFF0C;<strong>&#x4F1A;&#x5728;&#x63A5;&#x4E0B;&#x6765;&#x8BAD;&#x7EC3;&#x8FC7;&#x7A0B;&#x4E2D;&#x4E0D;&#x65AD;&#x5B66;&#x4E60;&#x7684;&#xFF0C;&#x4E5F;&#x662F;&#x4E3A;&#x4E86;&#x5C0A;&#x91CD;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x5B66;&#x4E60;&#x7ED3;&#x679C;</strong>&#x3002;&#x56E0;&#x6B64;&#x8FD9;&#x4E24;&#x6B65;&#x662F;&#x6709;&#x5FC5;&#x8981;&#x7684;&#x3002;</p><h1 id="Normalization&#x4F18;&#x70B9;"><a href="#Normalization&#x4F18;&#x70B9;" class="headerlink" title="Normalization&#x4F18;&#x70B9;"></a><font size="5" color="red">Normalization&#x4F18;&#x70B9;</font></h1><ol><li><strong>&#x89E3;&#x51B3;&#x4E86;ICS(Internal Covariate Shift&#xFF0C;&#x5185;&#x90E8;&#x534F;&#x53D8;&#x91CF;&#x504F;&#x79FB;)&#x95EE;&#x9898;</strong>&#x3002;</li><li><strong>&#x52A0;&#x5FEB;&#x5B66;&#x4E60;&#x901F;&#x5EA6;&#xFF0C;&#x9632;&#x6B62;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x73B0;&#x8C61;</strong>&#xFF0C;&#x56E0;&#x4E3A;&#x6807;&#x51C6;&#x5316;&#x540E;&#xFF0C;&#x4F1A;&#x5C06;&#x6570;&#x636E;&#x62C9;&#x56DE;&#x5230;0&#x9644;&#x8FD1;&#xFF0C;&#x5BF9;&#x4E8E;Sigmoid&#xFF0C;tanh&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x6765;&#x8BF4;&#xFF0C;&#x53EF;&#x80FD;&#x5C31;&#x4F1A;<strong>&#x4ECE;&#x9971;&#x548C;&#x533A;&#x62C9;&#x56DE;&#x5230;&#x7EBF;&#x6027;&#x533A;</strong>&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x9632;&#x6B62;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x73B0;&#x8C61;&#x3002;</li><li><strong>&#x51CF;&#x5F31;&#x5BF9;&#x521D;&#x59CB;&#x5316;&#x7684;&#x4F9D;&#x8D56;&#x6027;</strong>&#xFF0C;&#x56E0;&#x4E3A;&#x53C2;&#x6570;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x6240;&#x4EE5;&#x521D;&#x59CB;&#x5316;&#x53C2;&#x6570;&#x65F6;&#xFF0C;&#x4E0D;&#x7528;&#x9650;&#x5236;&#x8F83;&#x5927;&#x3002;</li><li><strong>&#x53EF;&#x4EE5;&#x5BF9;&#x6297;over fitting</strong>&#xFF0C;&#x56E0;&#x4E3A;&#x4F1A;&#x5C06;&#x8F93;&#x5165;&#x8FDB;&#x884C;&#x53D8;&#x5316;&#xFF0C;&#x5F53;&#x8F93;&#x5165;&#x5BFC;&#x81F4;&#x5747;&#x503C;&#x4EA7;&#x751F;&#x504F;&#x79FB;&#xFF0C;&#x6CA1;&#x5173;&#x7CFB;&#xFF0C;&#x540E;&#x9762;&#x8FD8;&#x6709;Normalization&#xFF0C;&#x4F1A;<strong>&#x5BF9;&#x504F;&#x79FB;&#x8FDB;&#x884C;&#x4FEE;&#x6B63;</strong>&#xFF0C;&#x6240;&#x4EE5;&#x4F1A;&#x8D77;&#x5230;&#x4E00;&#x4E9B;&#x9632;&#x6B62;&#x8FC7;&#x62DF;&#x5408;&#x7684;&#x4F5C;&#x7528;&#x3002;</li></ol><h1 id="&#x5E38;&#x89C1;&#x7684;Normalization"><a href="#&#x5E38;&#x89C1;&#x7684;Normalization" class="headerlink" title="&#x5E38;&#x89C1;&#x7684;Normalization"></a><font size="5" color="red">&#x5E38;&#x89C1;&#x7684;Normalization</font></h1><p><img src="/images/deep_learning/normalization.png" alt="normalization"><br>&#x4E3A;&#x4E86;&#x8BF4;&#x660E;&#x7684;&#x6E05;&#x6670;&#xFF0C;&#x6211;&#x4EEC;<strong>&#x5C06;&#x8F93;&#x5165;&#x7684;feature map shape&#x8BB0;&#x4E3A;[N, H, W, C]</strong>&#xFF0C;&#x5176;&#x4E2D;<strong>N&#x4EE3;&#x8868;batch_size&#xFF0C;H&#xFF0C;W&#x4EE3;&#x8868;&#x7279;&#x5F81;&#x56FE;&#x7684;&#x9AD8;&#x548C;&#x5BBD;&#xFF0C;C&#x4EE3;&#x8868;&#x7279;&#x5F81;&#x56FE;&#x7684;&#x901A;&#x9053;&#x6570;</strong>&#x3002;<br>&#x5E76;&#x4E14;&#x4E3A;&#x4E86;&#x76F4;&#x89C2;&#x8BF4;&#x660E;&#xFF0C;&#x5C06;feature map&#x770B;&#x4F5C;&#x4E00;&#x4E2A;&#x5B66;&#x6821;&#xFF0C;N&#x4EE3;&#x8868;&#x5E74;&#x7EA7;&#x6570;&#x91CF;&#xFF0C;&#x89C4;&#x5B9A;&#x503C;&#x4E3A;3&#xFF0C;C&#x4EE3;&#x8868;&#x6BCF;&#x4E2A;&#x5E74;&#x7EA7;&#x7684;&#x73ED;&#x7EA7;&#x6570;&#x91CF;&#xFF0C;&#x89C4;&#x5B9A;&#x503C;&#x4E3A;6&#xFF0C;H&#x548C;W&#x4EE3;&#x8868;&#x73ED;&#x7EA7;&#x7684;&#x6BCF;&#x4E00;&#x6392;&#x548C;&#x6BCF;&#x4E00;&#x5217;&#xFF0C;&#x89C4;&#x5B9A;&#x503C;&#x90FD;&#x4E3A;10&#x3002;</p><h2 id="BN-Batch-Normalization&#xFF0C;2015"><a href="#BN-Batch-Normalization&#xFF0C;2015" class="headerlink" title="BN(Batch Normalization&#xFF0C;2015)"></a><font color="red">BN(Batch Normalization&#xFF0C;2015)</font></h2><p><strong>BN(Batch Normalization)</strong>&#xFF1A;<strong>&#x4FDD;&#x7559;&#x901A;&#x9053;&#x7684;&#x7EF4;&#x5EA6;C&#xFF0C;&#x5BF9;N&#xFF0C;H&#xFF0C;W&#x505A;C&#x6B21;&#x6807;&#x51C6;&#x5316;</strong>&#xFF0C;&#x76F8;&#x5F53;&#x4E8E;&#x5206;&#x522B;&#x6309;&#x7167;&#x73ED;&#x7EA7;&#x5C06;&#x6240;&#x6709;&#x5E74;&#x7EA7;&#x6240;&#x6709;&#x540C;&#x5B66;&#x7684;&#x6210;&#x7EE9;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;(&#x5982;&#x4E00;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#xFF0C;&#x4E8C;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#xFF0C;&#x4E09;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5C06;&#x4E00;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#xFF0C;&#x4E8C;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#xFF0C;&#x4E09;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x76F4;&#x5230;&#x5C06;&#x4E00;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#xFF0C;&#x4E8C;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#xFF0C;&#x4E09;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4E00;&#x5171;&#x505A;&#x4E86;6&#x6B21;&#x6807;&#x51C6;&#x5316;)&#x3002;<strong>batch_size&#x8D8A;&#x5927;&#xFF0C;&#x6548;&#x679C;&#x8D8A;&#x597D;&#xFF0C;&#x9002;&#x5408;&#x56FA;&#x5B9A;&#x6DF1;&#x5EA6;&#x7684;&#x524D;&#x5411;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;&#x5982;CNN&#xFF0C;&#x4E0D;&#x9002;&#x7528;&#x4E8E;RNN</strong>&#x3002;</p><h2 id="LN-Layer-Normalization&#xFF0C;2016"><a href="#LN-Layer-Normalization&#xFF0C;2016" class="headerlink" title="LN(Layer Normalization&#xFF0C;2016)"></a><font color="red">LN(Layer Normalization&#xFF0C;2016)</font></h2><p><strong>LN(Layer Normalization)</strong>&#xFF1A;<strong>&#x4FDD;&#x7559;batch_size&#x7684;&#x7EF4;&#x5EA6;N&#xFF0C;&#x5BF9;H&#xFF0C;W&#xFF0C;C&#x505A;N&#x6B21;&#x6807;&#x51C6;&#x5316;</strong>&#xFF0C;&#x76F8;&#x5F53;&#x4E8E;&#x5206;&#x522B;&#x6309;&#x7167;&#x5E74;&#x7EA7;&#x5C06;&#x6240;&#x6709;&#x73ED;&#x7EA7;&#x6240;&#x6709;&#x540C;&#x5B66;&#x7684;&#x6210;&#x7EE9;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;(&#x5982;&#x4E00;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#xFF0C;&#x4E00;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#x76F4;&#x5230;&#x4E00;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5C06;&#x4E8C;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#xFF0C;&#x4E8C;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#x76F4;&#x5230;&#x4E8C;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x6700;&#x540E;&#x5C06;&#x4E09;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#xFF0C;&#x4E09;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#x76F4;&#x5230;&#x4E09;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4E00;&#x5171;&#x505A;&#x4E86;3&#x6B21;&#x6807;&#x51C6;&#x5316;)&#x3002;<strong>&#x901A;&#x9053;&#x6570;&#x8D8A;&#x5927;&#xFF0C;&#x6548;&#x679C;&#x8D8A;&#x597D;&#xFF0C;&#x4E0D;&#x4F9D;&#x8D56;batch_size&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x9002;&#x5408;&#x6DF1;&#x5EA6;&#x4E0D;&#x56FA;&#x5B9A;&#x7684;&#x7F51;&#x7EDC;&#xFF0C;&#x5982;RNN&#xFF0C;&#x4E0D;&#x9002;&#x7528;&#x4E8E;CNN</strong>&#x3002;</p><h2 id="IN-Instance-Normalization&#xFF0C;2017"><a href="#IN-Instance-Normalization&#xFF0C;2017" class="headerlink" title="IN(Instance Normalization&#xFF0C;2017)"></a><font color="red">IN(Instance Normalization&#xFF0C;2017)</font></h2><p><strong>IN(Instance Normalization)</strong>&#xFF1A;<strong>&#x4FDD;&#x7559;batch_size&#x7684;&#x7EF4;&#x5EA6;N&#x548C;&#x901A;&#x9053;&#x7684;&#x7EF4;&#x5EA6;C&#xFF0C;&#x5BF9;H&#xFF0C;W&#x505A;NxC&#x6B21;&#x6807;&#x51C6;&#x5316;</strong>&#xFF0C;&#x76F8;&#x5F53;&#x4E8E;&#x5206;&#x522B;&#x6309;&#x7167;&#x5E74;&#x7EA7;&#x548C;&#x73ED;&#x7EA7;&#x5C06;&#x6240;&#x6709;&#x540C;&#x5B66;&#x7684;&#x6210;&#x7EE9;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;(&#x5982;&#x4E00;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4E00;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x76F4;&#x5230;&#x4E00;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5C06;&#x4E8C;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4E8C;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x76F4;&#x5230;&#x4E8C;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x6700;&#x540E;&#x5C06;&#x4E09;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4E09;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x76F4;&#x5230;&#x4E09;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4E00;&#x5171;&#x505A;&#x4E86;18&#x6B21;&#x6807;&#x51C6;&#x5316;)&#x3002;&#x6700;&#x521D;<strong>&#x7528;&#x4E8E;&#x751F;&#x6210;&#x5F0F;&#x5BF9;&#x6297;&#x7F51;&#x7EDC;&#x4E2D;&#x7684;&#x98CE;&#x683C;&#x8FC1;&#x79FB;&#xFF0C;&#x751F;&#x6210;&#x7ED3;&#x679C;&#x4F9D;&#x8D56;&#x4E8E;&#x67D0;&#x4E2A;&#x56FE;&#x50CF;&#x5B9E;&#x4F8B;&#xFF0C;&#x53EA;&#x5BF9;&#x7279;&#x5F81;&#x56FE;&#x7684;&#x9AD8;&#x548C;&#x5BBD;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4FDD;&#x6301;&#x56FE;&#x50CF;&#x5B9E;&#x4F8B;&#x4E4B;&#x95F4;&#x7684;&#x72EC;&#x7ACB;</strong>&#x3002;</p><h2 id="GN-Group-Normalization&#xFF0C;2018"><a href="#GN-Group-Normalization&#xFF0C;2018" class="headerlink" title="GN(Group Normalization&#xFF0C;2018)"></a><font color="red">GN(Group Normalization&#xFF0C;2018)</font></h2><p><strong>GN(Group Normalization)</strong>&#xFF1A;&#x4E3A;&#x4E86;&#x89E3;&#x51B3;BN&#x4E2D;&#x5BF9;&#x8F83;&#x5C0F;batch_size&#x6548;&#x679C;&#x8F83;&#x5DEE;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x5C06;&#x901A;&#x9053;&#x6570;C&#x5206;&#x4E3A;G&#x7EC4;&#xFF0C;&#x6BCF;&#x7EC4;&#x6709;C/G&#x4E2A;&#x901A;&#x9053;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x8FD9;&#x4E9B;&#x901A;&#x9053;&#x6570;&#x4E2D;&#x7684;&#x5143;&#x7D20;&#x6807;&#x51C6;&#x5316;&#xFF0C;<strong>&#x505A;NxC/G&#x6B21;&#x6807;&#x51C6;&#x5316;</strong>&#xFF0C;&#x5982;&#x679C;&#x5C06;&#x73ED;&#x7EA7;&#x6570;&#x91CF;&#x5206;&#x4E3A;2&#x7EC4;&#xFF0C;&#x76F8;&#x5F53;&#x4E8E;&#x5206;&#x522B;&#x6309;&#x7167;&#x5E74;&#x7EA7;&#x5148;&#x5C06;&#x73ED;&#x7EA7;&#x5206;&#x4E3A;2&#x7EC4;&#xFF0C;&#x4E00;&#x5171;&#x5206;&#x6210;6&#x7EC4;&#xFF0C;&#x7136;&#x540E;&#x5BF9;&#x6240;&#x6709;&#x7EC4;&#x6240;&#x6709;&#x540C;&#x5B66;&#x7684;&#x6210;&#x7EE9;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;(&#x5982;&#x4E00;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#xFF0C;&#x4E00;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#xFF0C;&#x4E00;&#x5E74;&#x7EA7;&#x4E09;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4E00;&#x5E74;&#x7EA7;&#x56DB;&#x73ED;&#xFF0C;&#x4E00;&#x5E74;&#x7EA7;&#x4E94;&#x73ED;&#xFF0C;&#x4E00;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5C06;&#x4E8C;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#xFF0C;&#x4E8C;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#xFF0C;&#x4E8C;&#x5E74;&#x7EA7;&#x4E09;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4E8C;&#x5E74;&#x7EA7;&#x56DB;&#x73ED;&#xFF0C;&#x4E8C;&#x5E74;&#x7EA7;&#x4E94;&#x73ED;&#xFF0C;&#x4E8C;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x6700;&#x540E;&#x5C06;&#x4E09;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#xFF0C;&#x4E09;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#xFF0C;&#x4E09;&#x5E74;&#x7EA7;&#x4E09;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4E09;&#x5E74;&#x7EA7;&#x56DB;&#x73ED;&#xFF0C;&#x4E09;&#x5E74;&#x7EA7;&#x4E94;&#x73ED;&#xFF0C;&#x4E09;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4E00;&#x5171;&#x505A;&#x4E86;6&#x6B21;&#x6807;&#x51C6;&#x5316;)&#x3002;&#x5206;&#x7EC4;&#x4E4B;&#x540E;&#xFF0C;<strong>&#x4E0D;&#x4F9D;&#x8D56;batch_size&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x56E0;&#x6B64;&#x4E0D;&#x4F1A;&#x88AB;batch_size&#x7EA6;&#x675F;</strong>&#x3002;</p><h1 id="&#x5C0F;&#x7ED3;"><a href="#&#x5C0F;&#x7ED3;" class="headerlink" title="&#x5C0F;&#x7ED3;"></a><font size="5" color="red">&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;Normalization&#x662F;&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;Trick(&#x5C0F;&#x6280;&#x5DE7;)&#xFF0C;&#x81EA;&#x4ECE;Normalization&#x88AB;&#x63D0;&#x51FA;&#x4EE5;&#x540E;&#xFF0C;&#x51E0;&#x4E4E;&#x5404;&#x4E2A;&#x7F51;&#x7EDC;&#x90FD;&#x80FD;&#x770B;&#x5230;&#x5B83;&#x7684;&#x8EAB;&#x5F71;&#xFF0C;&#x7075;&#x6D3B;&#x638C;&#x63E1;&#x4E0D;&#x540C;Normalization&#xFF0C;&#x662F;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x9700;&#x8981;&#x8FBE;&#x6210;&#x7684;&#x76EE;&#x6807;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Normalization&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="常用技巧" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>各种上采样操作对比</title>
    <link href="https://USTCcoder.github.io/2020/05/06/deep%20learning%20upsampling/"/>
    <id>https://USTCcoder.github.io/2020/05/06/deep learning upsampling/</id>
    <published>2020-05-06T09:47:37.000Z</published>
    <updated>2020-05-09T09:47:41.795Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">Upsampling</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>Upsampling(&#x4E0A;&#x91C7;&#x6837;)</strong>:&#x7B80;&#x5355;&#x7684;&#x8BF4;&#x5C31;&#x662F;&#x653E;&#x5927;&#x56FE;&#x50CF;&#xFF0C;&#x83B7;&#x5F97;&#x66F4;&#x5927;&#x7684;&#x5206;&#x8FA8;&#x7387;&#xFF0C;&#x4E0A;&#x91C7;&#x6837;&#x5BF9;&#x4E8E;&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4EFB;&#x52A1;&#x6765;&#x8BF4;&#x5E76;&#x4E0D;&#x662F;&#x5FC5;&#x987B;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x67D0;&#x4E9B;&#x573A;&#x5408;&#x4E2D;&#x5374;&#x5FC5;&#x987B;&#x8981;&#x4F7F;&#x7528;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x5728;<strong>&#x8BED;&#x4E49;&#x5206;&#x5272;</strong>&#x4EFB;&#x52A1;&#x4E2D;&#xFF0C;&#x5982;&#x4F55;&#x9009;&#x62E9;&#x4E0A;&#x91C7;&#x6837;&#x7684;&#x65B9;&#x5F0F;&#x53EF;&#x80FD;&#x51B3;&#x5B9A;&#x7740;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x6548;&#x679C;&#x3002;&#x53EF;&#x80FD;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5BF9;&#x4E0A;&#x91C7;&#x6837;&#x4E0D;&#x662F;&#x5F88;&#x719F;&#x6089;&#xFF0C;&#x4F46;&#x662F;&#x5BF9;&#x4E8E;&#x4E0B;&#x91C7;&#x6837;&#x4E00;&#x5B9A;&#x90FD;&#x4E0D;&#x964C;&#x751F;&#xFF0C;&#x5178;&#x578B;&#x7684;&#x4E0B;&#x91C7;&#x6837;&#x6B65;&#x9AA4;&#x5C31;&#x662F;&#x6C60;&#x5316;&#x3002;&#x56E0;&#x6B64;&#x4E0A;&#x91C7;&#x6837;&#x4E5F;&#x53EF;&#x88AB;&#x770B;&#x4F5C;&#x662F;<strong>&#x6C60;&#x5316;&#x7684;&#x9006;&#x8FC7;&#x7A0B;</strong>&#x3002;<br><a id="more"></a></p><p><img src="/images/Semantic_segmentation/SegNet_U.png.png" alt="upsampling"></p><h1 id="Maxpooling-Indices-&#x6700;&#x5927;&#x6C60;&#x5316;&#x7D22;&#x5F15;-&#x4E0E;Upsampling-&#x4E0A;&#x91C7;&#x6837;-&#x548C;Deconvolution-&#x53CD;&#x5377;&#x79EF;-&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;"><a href="#Maxpooling-Indices-&#x6700;&#x5927;&#x6C60;&#x5316;&#x7D22;&#x5F15;-&#x4E0E;Upsampling-&#x4E0A;&#x91C7;&#x6837;-&#x548C;Deconvolution-&#x53CD;&#x5377;&#x79EF;-&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;" class="headerlink" title="Maxpooling-Indices(&#x6700;&#x5927;&#x6C60;&#x5316;&#x7D22;&#x5F15;)&#x4E0E;Upsampling(&#x4E0A;&#x91C7;&#x6837;)&#x548C;Deconvolution(&#x53CD;&#x5377;&#x79EF;)&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;"></a><font size="5" color="red">Maxpooling-Indices(&#x6700;&#x5927;&#x6C60;&#x5316;&#x7D22;&#x5F15;)&#x4E0E;Upsampling(&#x4E0A;&#x91C7;&#x6837;)&#x548C;Deconvolution(&#x53CD;&#x5377;&#x79EF;)&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;</font></h1><p>&#x2003;&#x2003;<font size="3"><strong>Maxpooling-Indices(&#x6700;&#x5927;&#x6C60;&#x5316;&#x7D22;&#x5F15;)</strong>&#xFF1A;&#x53C8;&#x79F0;&#x4E3A;<strong>Unpooling(&#x53CD;&#x6C60;&#x5316;)</strong>&#xFF0C;&#x6C60;&#x5316;&#x540E;<strong>&#x8BB0;&#x5F55;&#x6700;&#x5927;&#x503C;&#x6240;&#x5728;&#x7684;&#x4F4D;&#x7F6E;</strong>&#xFF0C;&#x5728;&#x53CD;&#x6C60;&#x5316;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x7ED9;&#x76F8;&#x5E94;&#x4F4D;&#x7F6E;&#x4E0A;&#x5199;&#x5165;&#x503C;&#xFF0C;<strong>&#x5176;&#x4ED6;&#x4F4D;&#x7F6E;&#x4E3A;0</strong>&#x3002;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#xFF0C;<strong>&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x5E76;&#x4E0D;&#x5E38;&#x7528;&#xFF0C;&#x56E0;&#x4E3A;&#x5B58;&#x5728;&#x5927;&#x91CF;&#x7684;&#x7A00;&#x758F;&#x6570;&#x636E;&#xFF0C;&#x4F7F;&#x6A21;&#x578B;&#x6536;&#x655B;&#x901F;&#x5EA6;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x3002;</strong></font><br>&#x2003;&#x2003;<font size="3"><strong>Upsampling(&#x4E0A;&#x91C7;&#x6837;)</strong>&#xFF1A;&#x5C06;&#x8F93;&#x5165;<strong>resize&#x5230;&#x8BBE;&#x7F6E;&#x5927;&#x5C0F;</strong>&#xFF0C;&#x7136;&#x540E;&#x5229;&#x7528;&#x6307;&#x5B9A;&#x7684;&#x63D2;&#x503C;&#x65B9;&#x6CD5;<strong>&#x5BF9;&#x5468;&#x56F4;&#x7684;&#x503C;&#x8FDB;&#x884C;&#x63D2;&#x503C;</strong>&#xFF0C;&#x5E38;&#x7528;<strong>&#x6700;&#x8FD1;&#x90BB;&#x63D2;&#x503C;</strong>&#x548C;<strong>&#x53CC;&#x7EBF;&#x6027;&#x63D2;&#x503C;</strong>&#x3002;&#x56E0;&#x4E3A;&#x76F8;&#x90BB;&#x533A;&#x57DF;&#x7684;&#x50CF;&#x7D20;&#x548C;&#x7279;&#x5F81;&#x5E94;&#x8BE5;&#x662F;&#x76F8;&#x4F3C;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x7279;&#x522B;&#x5E38;&#x7528;&#xFF0C;<strong>&#x65E2;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#xFF0C;&#x4E5F;&#x4E0D;&#x4F1A;&#x5B58;&#x5728;&#x7A00;&#x758F;&#x6570;&#x636E;&#x3002;</strong></font><br>&#x2003;&#x2003;<font size="3"><strong>Deconvolution(&#x53CD;&#x5377;&#x79EF;)</strong>&#xFF1A;<strong>&#x672C;&#x8D28;&#x662F;&#x5377;&#x79EF;</strong>&#xFF0C;&#x6CE8;&#x610F;<strong>&#x53CD;&#x5377;&#x79EF;&#x5E76;&#x4E0D;&#x80FD;&#x4ECE;&#x5377;&#x79EF;&#x7684;&#x7ED3;&#x679C;&#x8FD4;&#x56DE;&#x5230;&#x5377;&#x79EF;&#x524D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x53EA;&#x80FD;&#x8FD4;&#x56DE;&#x5230;&#x5377;&#x79EF;&#x524D;&#x7684;&#x5C3A;&#x5BF8;</strong>&#x3002;&#x5377;&#x79EF;&#x901A;&#x8FC7;&#x8BBE;&#x7F6E;kernel_size&#x5377;&#x79EF;&#x6838;&#x5927;&#x5C0F;&#xFF0C;strides&#x6B65;&#x957F;&#x548C;padding&#x586B;&#x5145;&#x65B9;&#x5F0F;&#x53EF;&#x4EE5;&#x5C06;&#x56FE;&#x50CF;&#x7684;&#x5206;&#x8FA8;&#x7387;&#x964D;&#x4F4E;&#xFF0C;&#x76F8;&#x53CD;&#x7684;&#x53CD;&#x5377;&#x79EF;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8BBE;&#x7F6E;kernel_size&#x5377;&#x79EF;&#x6838;&#x5927;&#x5C0F;&#xFF0C;strides&#x6B65;&#x957F;&#x548C;padding&#x586B;&#x5145;&#x65B9;&#x5F0F;<strong>&#x5148;&#x5BF9;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x586B;&#x5145;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8FDB;&#x884C;&#x5377;&#x79EF;&#x64CD;&#x4F5C;</strong>&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x56FE;&#x50CF;&#x7684;&#x5206;&#x8FA8;&#x7387;&#x589E;&#x52A0;&#x3002;<strong>&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x4E0D;&#x63A8;&#x8350;&#x7ECF;&#x5E38;&#x4F7F;&#x7528;&#xFF0C;&#x56E0;&#x4E3A;&#x5B58;&#x5728;&#x5927;&#x91CF;&#x53C2;&#x6570;&#xFF0C;&#x800C;&#x4E14;&#x53EF;&#x80FD;&#x4F1A;&#x5B58;&#x5728;&#x68CB;&#x76D8;&#x683C;&#x6548;&#x5E94;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x8003;<a href="https://distill.pub/2016/deconv-checkerboard/" target="_blank" rel="noopener">&#x68CB;&#x76D8;&#x683C;&#x53EF;&#x89C6;&#x5316;</a></strong>&#x3002;</font></p><h1 id="&#x5C0F;&#x7ED3;"><a href="#&#x5C0F;&#x7ED3;" class="headerlink" title="&#x5C0F;&#x7ED3;"></a><font size="5" color="red">&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x7531;&#x4E8E;CNN&#x7ECF;&#x5E38;&#x4F7F;&#x7528;&#x6C60;&#x5316;&#x6765;&#x7F29;&#x5C0F;&#x56FE;&#x50CF;&#x5C3A;&#x5BF8;&#xFF0C;&#x65B9;&#x4FBF;&#x63D0;&#x53D6;&#x66F4;&#x6DF1;&#x5C42;&#x6B21;&#x7684;&#x7279;&#x5F81;&#xFF0C;&#x56E0;&#x6B64;&#x4E0B;&#x91C7;&#x6837;&#x662F;CNN&#x7F51;&#x7EDC;&#x91CD;&#x8981;&#x7684;&#x7EC4;&#x6210;&#x90E8;&#x5206;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x67D0;&#x4E9B;&#x7279;&#x6B8A;&#x573A;&#x666F;&#x9700;&#x8981;<strong>&#x5BF9;&#x56FE;&#x50CF;&#x5927;&#x5C0F;&#x8FDB;&#x884C;&#x590D;&#x539F;</strong>&#xFF0C;&#x56E0;&#x6B64;&#x4E0A;&#x91C7;&#x6837;&#x5E94;&#x8FD0;&#x800C;&#x751F;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x60F3;&#x7CFB;&#x7EDF;&#x7684;&#x5B66;&#x4E60;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;&#x4E0A;&#x91C7;&#x6837;&#x77E5;&#x8BC6;&#x70B9;&#x662F;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x7684;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Upsampling&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="常用技巧" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>SSD</title>
    <link href="https://USTCcoder.github.io/2020/05/05/Object%20detection%20SSD/"/>
    <id>https://USTCcoder.github.io/2020/05/05/Object detection SSD/</id>
    <published>2020-05-05T05:36:40.000Z</published>
    <updated>2020-05-09T09:17:26.002Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">SSD</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>SSD(Single Shot MultiBox Detector)</strong>:&#x4E8E;<strong>2016&#x5E74;&#x53D1;&#x8868;&#x5728;ECCV</strong>&#x4E0A;&#x3002;Single Shot MultiBox Detector&#x7684;&#x5B57;&#x9762;&#x610F;&#x601D;&#x4E3A;&#xFF1A;&#x5355;&#x6B21;&#x591A;&#x6846;&#x68C0;&#x6D4B;&#x5668;&#xFF0C;&#x987E;&#x540D;&#x601D;&#x4E49;&#xFF0C;&#x5C5E;&#x4E8E;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x7B97;&#x6CD5;&#x4E2D;&#x4E00;&#x6B65;&#x6CD5;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x800C;&#x4E14;&#x5229;&#x7528;&#x5230;&#x591A;&#x4E2A;&#x5148;&#x9A8C;&#x6846;&#x7684;&#x4E00;&#x79CD;&#x7B97;&#x6CD5;&#xFF0C;&#x662F;&#x4E00;&#x6B65;&#x6CD5;&#x7684;&#x5178;&#x578B;&#x4EE3;&#x8868;&#x3002;<a id="more"></a></p><p><img src="/images/Semantic_segmentation/SSD.png" alt="SSD"></p><h1 id="SSD&#x7279;&#x70B9;"><a href="#SSD&#x7279;&#x70B9;" class="headerlink" title="SSD&#x7279;&#x70B9;"></a><font size="5" color="red">SSD&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x4E3A;<strong>VGG</strong>&#xFF0C;&#x6784;&#x5EFA;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x8F83;&#x4E3A;&#x7B80;&#x5355;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x9488;&#x5BF9;&#x4E8E;&#x4E0D;&#x540C;&#x5C3A;&#x5EA6;&#x7684;&#x7279;&#x5F81;&#x5C42;&#x8BBE;&#x8BA1;&#x4E0D;&#x540C;&#x5927;&#x5C0F;&#x7684;&#x5148;&#x9A8C;&#x6846;&#xFF0C;&#x878D;&#x5408;&#x4E0D;&#x540C;&#x7279;&#x5F81;&#x5C42;&#x7684;&#x68C0;&#x6D4B;&#x4FE1;&#x606F;&#x5BF9;&#x5148;&#x9A8C;&#x6846;&#x4E2D;&#x662F;&#x5426;&#x5305;&#x542B;&#x7269;&#x4F53;&#x8FDB;&#x884C;&#x5206;&#x7C7B;&#x3002;</font></p><h1 id="SSD&#x56FE;&#x50CF;&#x5206;&#x6790;"><a href="#SSD&#x56FE;&#x50CF;&#x5206;&#x6790;" class="headerlink" title="SSD&#x56FE;&#x50CF;&#x5206;&#x6790;"></a><font size="5" color="red">SSD&#x56FE;&#x50CF;&#x5206;&#x6790;</font></h1><p><img src="/images/Semantic_segmentation/SSD_A.png" alt="SSD"></p><h1 id="TensorFlow2-0&#x5B9E;&#x73B0;"><a href="#TensorFlow2-0&#x5B9E;&#x73B0;" class="headerlink" title="TensorFlow2.0&#x5B9E;&#x73B0;"></a><font size="4">TensorFlow2.0&#x5B9E;&#x73B0;</font></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Convs(keras.layers.Layer):</span><br><span class="line">    def __init__(self, filters, times=1, kernel_size=(3, 3), strides=(1, 1), padding=&apos;same&apos;, dilation_rate=(1, 1), activation=None, maxpooling=False):</span><br><span class="line">        super(Convs, self).__init__()</span><br><span class="line">        self.blocks = keras.Sequential()</span><br><span class="line"></span><br><span class="line">        for i in range(times):</span><br><span class="line">            self.blocks.add(keras.layers.Conv2D(filters, kernel_size=kernel_size, strides=strides, padding=padding, dilation_rate=dilation_rate, activation=activation))</span><br><span class="line">        if maxpooling:</span><br><span class="line">            self.blocks.add(keras.layers.MaxPool2D((2, 2), (2, 2), padding=&apos;same&apos;))</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, **kwargs):</span><br><span class="line"></span><br><span class="line">        return self.blocks(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SSD(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(SSD, self).__init__()</span><br><span class="line">        self.block1 = keras.Sequential(name=&apos;Conv_block1&apos;)</span><br><span class="line">        self.block1.add(Convs(64, 2, activation=&apos;relu&apos;, maxpooling=True))</span><br><span class="line">        self.block1.add(Convs(128, 2, activation=&apos;relu&apos;, maxpooling=True))</span><br><span class="line">        self.block1.add(Convs(256, 3, activation=&apos;relu&apos;, maxpooling=True))</span><br><span class="line">        self.block1.add(Convs(512, 3, activation=&apos;relu&apos;))</span><br><span class="line"></span><br><span class="line">        self.feature1_reg = keras.Sequential([Convs(4 * 4), keras.layers.Flatten()], name=&apos;Reg_1&apos;)</span><br><span class="line">        self.feature1_cls = keras.Sequential([Convs(4 * 21), keras.layers.Flatten()], name=&apos;Cls_1&apos;)</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential(name=&apos;Conv_block2&apos;)</span><br><span class="line">        self.block2.add(keras.layers.MaxPool2D((2, 2), (2, 2), padding=&apos;same&apos;))</span><br><span class="line">        self.block2.add(Convs(512, 3, activation=&apos;relu&apos;))</span><br><span class="line">        self.block2.add(keras.layers.MaxPool2D((3, 3), (1, 1), padding=&apos;same&apos;))</span><br><span class="line">        self.block2.add(Convs(1024, dilation_rate=(6, 6), activation=&apos;relu&apos;))</span><br><span class="line">        self.block2.add(Convs(1024, kernel_size=(1, 1), activation=&apos;relu&apos;))</span><br><span class="line"></span><br><span class="line">        self.feature2_reg = keras.Sequential([Convs(6 * 4), keras.layers.Flatten()], name=&apos;Reg_2&apos;)</span><br><span class="line">        self.feature2_cls = keras.Sequential([Convs(6 * 21), keras.layers.Flatten()], name=&apos;Cls_2&apos;)</span><br><span class="line"></span><br><span class="line">        self.block3 = keras.Sequential(name=&apos;Conv_block3&apos;)</span><br><span class="line">        self.block3.add(Convs(256, kernel_size=(1, 1), activation=&apos;relu&apos;))</span><br><span class="line">        self.block3.add(Convs(512, kernel_size=(3, 3), strides=(2, 2), activation=&apos;relu&apos;))</span><br><span class="line"></span><br><span class="line">        self.feature3_reg = keras.Sequential([Convs(6 * 4), keras.layers.Flatten()], name=&apos;Reg_3&apos;)</span><br><span class="line">        self.feature3_cls = keras.Sequential([Convs(6 * 21), keras.layers.Flatten()], name=&apos;Cls_3&apos;)</span><br><span class="line"></span><br><span class="line">        self.block4 = keras.Sequential(name=&apos;Conv_block4&apos;)</span><br><span class="line">        self.block4.add(Convs(128, kernel_size=(1, 1), activation=&apos;relu&apos;))</span><br><span class="line">        self.block4.add(Convs(256, kernel_size=(3, 3), strides=(2, 2), activation=&apos;relu&apos;))</span><br><span class="line"></span><br><span class="line">        self.feature4_reg = keras.Sequential([Convs(6 * 4), keras.layers.Flatten()], name=&apos;Reg_4&apos;)</span><br><span class="line">        self.feature4_cls = keras.Sequential([Convs(6 * 21), keras.layers.Flatten()], name=&apos;Cls_4&apos;)</span><br><span class="line"></span><br><span class="line">        self.block5 = keras.Sequential(name=&apos;Conv_block5&apos;)</span><br><span class="line">        self.block5.add(Convs(128, kernel_size=(1, 1), activation=&apos;relu&apos;))</span><br><span class="line">        self.block5.add(Convs(256, kernel_size=(3, 3), padding=&apos;valid&apos;, activation=&apos;relu&apos;))</span><br><span class="line"></span><br><span class="line">        self.feature5_reg = keras.Sequential([Convs(4 * 4), keras.layers.Flatten()], name=&apos;Reg_5&apos;)</span><br><span class="line">        self.feature5_cls = keras.Sequential([Convs(4 * 21), keras.layers.Flatten()], name=&apos;Cls_5&apos;)</span><br><span class="line"></span><br><span class="line">        self.block6 = keras.Sequential(name=&apos;Conv_block6&apos;)</span><br><span class="line">        self.block6.add(Convs(128, kernel_size=(1, 1), activation=&apos;relu&apos;))</span><br><span class="line">        self.block6.add(Convs(256, kernel_size=(3, 3), padding=&apos;valid&apos;, activation=&apos;relu&apos;))</span><br><span class="line"></span><br><span class="line">        self.feature6_reg = keras.Sequential([Convs(4 * 4), keras.layers.Flatten()], name=&apos;Reg_6&apos;)</span><br><span class="line">        self.feature6_cls = keras.Sequential([Convs(4 * 21), keras.layers.Flatten()], name=&apos;Cls_6&apos;)</span><br><span class="line"></span><br><span class="line">        self.concatenate_reg = keras.layers.Concatenate(name=&apos;Concatenate_Reg&apos;)</span><br><span class="line">        self.concatenate_cls = keras.layers.Concatenate(name=&apos;Concatenate_Cls&apos;)</span><br><span class="line"></span><br><span class="line">        self.reshape_reg = keras.layers.Reshape((8732, 4), name=&apos;Reshape_Reg&apos;)</span><br><span class="line">        self.reshape_cls = keras.layers.Reshape((8732, 21), name=&apos;Reshape_Cls&apos;)</span><br><span class="line"></span><br><span class="line">        self.softmax = keras.layers.Softmax(name=&apos;Softmax&apos;)</span><br><span class="line"></span><br><span class="line">        self.concatenate = keras.layers.Concatenate(name=&apos;Concatenate&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block1 = self.block1(inputs)</span><br><span class="line">        l2 = tf.nn.l2_normalize(block1)</span><br><span class="line">        feature1_reg = self.feature1_reg(l2)</span><br><span class="line">        feature1_cls = self.feature1_cls(l2)</span><br><span class="line"></span><br><span class="line">        block2 = self.block2(block1)</span><br><span class="line">        feature2_reg = self.feature2_reg(block2)</span><br><span class="line">        feature2_cls = self.feature2_cls(block2)</span><br><span class="line"></span><br><span class="line">        block3 = self.block3(block2)</span><br><span class="line">        feature3_reg = self.feature3_reg(block3)</span><br><span class="line">        feature3_cls = self.feature3_cls(block3)</span><br><span class="line"></span><br><span class="line">        block4 = self.block4(block3)</span><br><span class="line">        feature4_reg = self.feature4_reg(block4)</span><br><span class="line">        feature4_cls = self.feature4_cls(block4)</span><br><span class="line"></span><br><span class="line">        block5 = self.block5(block4)</span><br><span class="line">        feature5_reg = self.feature5_reg(block5)</span><br><span class="line">        feature5_cls = self.feature5_cls(block5)</span><br><span class="line"></span><br><span class="line">        block6 = self.block6(block5)</span><br><span class="line">        feature6_reg = self.feature6_reg(block6)</span><br><span class="line">        feature6_cls = self.feature6_cls(block6)</span><br><span class="line"></span><br><span class="line">        concatenate_reg = self.concatenate_reg([feature1_reg, feature2_reg, feature3_reg, feature4_reg, feature5_reg, feature6_reg])</span><br><span class="line">        concatenate_cls = self.concatenate_cls([feature1_cls, feature2_cls, feature3_cls, feature4_cls, feature5_cls, feature6_cls])</span><br><span class="line"></span><br><span class="line">        reshape_reg = self.reshape_reg(concatenate_reg)</span><br><span class="line">        reshape_cls = self.reshape_cls(concatenate_cls)</span><br><span class="line"></span><br><span class="line">        softmax = self.softmax(reshape_cls)</span><br><span class="line"></span><br><span class="line">        output = self.concatenate([reshape_reg, softmax])</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line"></span><br><span class="line">    model = SSD()</span><br><span class="line">    model.build(input_shape=(None, 300, 300, 3))</span><br><span class="line">    model.summary()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/Semantic_segmentation/SSD_R.png" alt="SSD"></p><h1 id="Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;"><a href="#Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;" class="headerlink" title="Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;"></a><font size="5" color="red">Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;</font></h1><h2 id="&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E;"><a href="#&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E;" class="headerlink" title="&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E;"></a>&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E;</h2><ul><li>project<ul><li>shape<ul><li>train_imgs(&#x8BAD;&#x7EC3;&#x96C6;&#x56FE;&#x50CF;&#x6587;&#x4EF6;&#x5939;)</li><li>annotations(&#x8BAD;&#x7EC3;&#x96C6;&#x6807;&#x7B7E;&#x6587;&#x4EF6;&#x5939;)</li><li>test_imgs(&#x6D4B;&#x8BD5;&#x96C6;&#x56FE;&#x50CF;&#x6587;&#x4EF6;&#x5939;)</li></ul></li><li>SSD_weight(&#x6A21;&#x578B;&#x6743;&#x91CD;&#x6587;&#x4EF6;&#x5939;)</li><li>SSD_test_result(&#x6D4B;&#x8BD5;&#x96C6;&#x7ED3;&#x679C;&#x6587;&#x4EF6;&#x5939;)</li><li>SSD.py</li></ul></li></ul><h2 id="&#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E;"><a href="#&#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E;" class="headerlink" title="&#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E;"></a>&#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E;</h2><ol><li>&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x548C;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x662F;&#x4E24;&#x79CD;&#x4E0D;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x5DE5;&#x7A0B;&#x9879;&#x76EE;&#xFF0C;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x5B9E;&#x6218;&#x5904;&#x7406;&#x6BD4;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x56F0;&#x96BE;&#x7684;&#x591A;&#xFF0C;&#x9996;&#x5148;&#x8981;&#x8BFB;&#x53D6;&#x771F;&#x5B9E;&#x6846;&#x4FE1;&#x606F;&#xFF0C;&#x5C06;&#x5176;&#x4FDD;&#x5B58;&#x4E0B;&#x6765;&#xFF0C;&#x4E3A;&#x4E86;&#x540E;&#x9762;&#x7F16;&#x7801;&#x4F7F;&#x7528;&#x3002;</li><li>&#x5EFA;&#x7ACB;&#x5148;&#x9A8C;&#x6846;&#xFF0C;&#x6839;&#x636E;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#xFF0C;&#x5728;&#x4E0D;&#x540C;&#x7279;&#x5F81;&#x5C42;&#x4E0A;&#x5EFA;&#x7ACB;&#x4E0D;&#x540C;&#x7684;&#x5148;&#x9A8C;&#x6846;&#xFF0C;&#x5148;&#x9A8C;&#x6846;&#x7684;&#x603B;&#x4E2A;&#x6570;&#x4E3A;&#x6BCF;&#x4E2A;&#x56DE;&#x5F52;&#x5206;&#x7C7B;&#x7279;&#x5F81;&#x5C42;&#x7684;&#x50CF;&#x7D20;&#x70B9;&#x4E2A;&#x6570;x&#x6BCF;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x4E0A;&#x7684;&#x5148;&#x9A8C;&#x6846;&#x4E2A;&#x6570;&#x3002;&#x4EE5;&#x8BBA;&#x6587;&#x4E2D;&#x7684;&#x5148;&#x9A8C;&#x6846;&#x4E3A;&#x4F8B;&#xFF0C;&#x7279;&#x5F81;&#x5C42;&#x6709;6&#x4E2A;&#xFF0C;&#x5927;&#x5C0F;&#x5206;&#x522B;&#x4E3A;38x38&#xFF0C;19x19&#xFF0C;10x10&#xFF0C;5x5&#xFF0C;3x3&#xFF0C;1x1&#xFF0C;&#x7279;&#x5F81;&#x5C42;&#x4E0A;&#x6BCF;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x7684;&#x5148;&#x9A8C;&#x6846;&#x4E2A;&#x6570;&#x5206;&#x522B;&#x4E3A;4&#xFF0C;6&#xFF0C;6&#xFF0C;6&#xFF0C;4&#xFF0C;4&#xFF0C;&#x6545;&#x5148;&#x9A8C;&#x6846;&#x603B;&#x6570;&#x4E3A;38x38x4+19x19x6+10x10x6+5x5x6+3x3x4+1x1x4=8732</li><li>&#x6839;&#x636E;&#x771F;&#x5B9E;&#x6846;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x548C;&#x6240;&#x6709;&#x5148;&#x9A8C;&#x6846;&#x8BA1;&#x7B97;IOU&#xFF0C;&#x5C06;IOU&#x5927;&#x4E8E;&#x8BBE;&#x5B9A;&#x503C;&#x7684;&#x8BB0;&#x5F55;&#x4E0B;&#x6765;&#xFF0C;&#x4F5C;&#x4E3A;&#x6B63;&#x6837;&#x672C;&#x3002;&#x7136;&#x540E;&#x8FDB;&#x884C;&#x7F16;&#x7801;&#xFF0C;&#x5728;&#x6240;&#x5C5E;&#x7C7B;&#x522B;&#x7684;&#x7F6E;&#x4FE1;&#x5EA6;&#x4E0A;&#x9762;&#x7F6E;1&#xFF0C;&#x5176;&#x4ED6;&#x7C7B;&#x522B;&#x7F6E;&#x4FE1;&#x5EA6;&#x7F6E;0&#xFF0C;&#x5E76;&#x8BA1;&#x7B97;&#x6B63;&#x6837;&#x672C;&#x5148;&#x9A8C;&#x6846;&#x7684;&#x4E2D;&#x5FC3;&#x5750;&#x6807;&#x4E0E;&#x5BBD;&#x9AD8;&#x548C;&#x771F;&#x5B9E;&#x6846;&#x7684;&#x4E2D;&#x5FC3;&#x5750;&#x6807;&#x4E0E;&#x5BBD;&#x9AD8;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x5F02;&#x3002;&#x8F93;&#x51FA;(batch_size, num_prior, num_class + 1 + 4)&#xFF0C;num_prior&#x4E3A;&#x5148;&#x9A8C;&#x6846;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x6BCF;&#x4E2A;&#x5148;&#x9A8C;&#x6846;&#x6709;num_class + 1 + 4&#x4E2A;&#x503C;&#xFF0C;num_class&#x4EE3;&#x8868;&#x5C5E;&#x4E8E;&#x67D0;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#x7684;&#x7F6E;&#x4FE1;&#x5EA6;&#xFF0C;1&#x4EE3;&#x8868;&#x5C5E;&#x4E8E;&#x80CC;&#x666F;&#x7684;&#x7F6E;&#x4FE1;&#x5EA6;&#xFF0C;4&#x4EE3;&#x8868;&#x4E2D;&#x5FC3;&#x5750;&#x6807;&#x548C;&#x5BBD;&#x9AD8;&#x76F8;&#x5BF9;&#x771F;&#x5B9E;&#x6846;&#x7684;&#x5DEE;&#x5F02;&#x3002;&#x8981;&#x548C;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x7EF4;&#x5EA6;&#x76F8;&#x5339;&#x914D;&#xFF0C;&#x5373;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x5165;&#x5927;&#x5C0F;&#x4E3A;(batch_size, height, width, 3)&#xFF0C;&#x8F93;&#x51FA;&#x5927;&#x5C0F;&#x4E3A;(batch_size, num_prior, num_class + 1 + 4)&#x3002;<br><strong>IOU(Intersection Over Union&#xFF0C;&#x4EA4;&#x5E76;&#x6BD4;)</strong>&#xFF1A;&#x7528;&#x4E8E;<strong>&#x8BC4;&#x4F30;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x7B97;&#x6CD5;&#x6027;&#x80FD;&#x7684;&#x6307;&#x6807;&#x662F;&#x5E73;&#x5747;IOU</strong>&#xFF0C;&#x4EA4;&#x5E76;&#x6BD4;&#x4E5F;&#x975E;&#x5E38;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x7B97;&#x6CD5;&#x7684;&#x7ED3;&#x679C;&#x4E0E;&#x771F;&#x5B9E;&#x7269;&#x4F53;&#x8FDB;&#x884C;<strong>&#x4EA4;&#x8FD0;&#x7B97;&#x7684;&#x7ED3;&#x679C;&#x9664;&#x4EE5;&#x8FDB;&#x884C;&#x5E76;&#x8FD0;&#x7B97;&#x7684;&#x7ED3;&#x679C;</strong>&#x3002;&#x901A;&#x8FC7;&#x4E0B;&#x56FE;&#x53EF;&#x4EE5;&#x76F4;&#x89C2;&#x7684;&#x770B;&#x51FA;IOU&#x7684;&#x8BA1;&#x7B97;&#x65B9;&#x6CD5;&#x3002;<br><img src="/images/Semantic_segmentation/Dataset_I.png" alt="IOU"></li><li>&#x8BBE;&#x8BA1;&#x635F;&#x5931;&#x51FD;&#x6570;&#xFF0C;&#x56E0;&#x4E3A;&#x5148;&#x9A8C;&#x6846;&#x4E2D;&#x5927;&#x90E8;&#x5206;&#x90FD;&#x662F;&#x8D1F;&#x6837;&#x672C;&#xFF0C;&#x56E0;&#x6B64;&#x4E0D;&#x80FD;&#x76F4;&#x63A5;&#x8BA1;&#x7B97;&#x635F;&#x5931;&#x51FD;&#x6570;&#xFF0C;&#x9996;&#x5148;&#x8981;&#x5BF9;&#x6B63;&#x8D1F;&#x6837;&#x672C;&#x8FDB;&#x884C;&#x6BD4;&#x4F8B;&#x8C03;&#x6574;&#x3002;&#x4E00;&#x822C;&#x9009;&#x62E9;&#x6B63;&#x8D1F;&#x6837;&#x672C;&#x6BD4;&#x4F8B;&#x4E3A;1&#xFF1A;3&#xFF0C;&#x7136;&#x540E;&#x4F7F;&#x7528;&#x4EA4;&#x53C9;&#x71B5;&#x635F;&#x5931;&#x51FD;&#x6570;&#x8BA1;&#x7B97;&#x6B63;&#x8D1F;&#x6837;&#x672C;&#x7684;&#x5206;&#x7C7B;&#x635F;&#x5931;&#xFF0C;&#x4F7F;&#x7528;smooth L1 loss&#x8BA1;&#x7B97;&#x6B63;&#x6837;&#x672C;&#x7684;&#x5B9A;&#x4F4D;&#x635F;&#x5931;&#x3002;</li><li>&#x642D;&#x5EFA;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;<strong>&#x8BBE;&#x7F6E;&#x5408;&#x9002;&#x53C2;&#x6570;</strong>&#xFF0C;&#x8FDB;&#x884C;&#x8BAD;&#x7EC3;&#x3002;</li><li>&#x9884;&#x6D4B;&#x65F6;&#xFF0C;&#x9700;&#x8981;&#x6839;&#x636E;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x8FDB;&#x884C;<strong>&#x9006;&#x5411;&#x89E3;&#x7801;(&#x7F16;&#x7801;&#x7684;&#x53CD;&#x8FC7;&#x7A0B;)</strong>&#xFF0C;&#x6839;&#x636E;&#x7F6E;&#x4FE1;&#x5EA6;&#xFF0C;&#x9009;&#x62E9;<strong>&#x975E;&#x80CC;&#x666F;&#x7F6E;&#x4FE1;&#x5EA6;&#x5927;&#x4E8E;&#x8BBE;&#x5B9A;&#x503C;&#x7684;&#x5148;&#x9A8C;&#x6846;&#x4F5C;&#x4E3A;&#x5019;&#x9009;&#x6846;</strong>&#xFF0C;&#x5E76;&#x4E14;&#x8BE5;&#x6846;&#x7684;<strong>&#x7C7B;&#x522B;&#x8BBE;&#x4E3A;&#x7F6E;&#x4FE1;&#x5EA6;&#x6700;&#x5927;&#x7D22;&#x5F15;&#x5BF9;&#x5E94;&#x7684;&#x7C7B;&#x522B;</strong>&#xFF0C;&#x5982;&#x6700;&#x5927;&#x503C;&#x7684;&#x7D22;&#x5F15;&#x4E3A;2&#xFF0C;&#x5219;&#x8BE5;&#x9884;&#x6D4B;&#x6846;&#x9884;&#x6D4B;&#x7684;&#x7269;&#x4F53;&#x7C7B;&#x522B;&#x662F;&#x7B2C;&#x4E8C;&#x7C7B;&#x3002;&#x7136;&#x540E;<strong>&#x6839;&#x636E;&#x5148;&#x9A8C;&#x6846;&#x7684;&#x5750;&#x6807;&#x548C;4&#x4E2A;&#x56DE;&#x5F52;&#x53C2;&#x6570;&#x786E;&#x5B9A;&#x5019;&#x9009;&#x6846;&#x7684;&#x5DE6;&#x4E0A;&#x89D2;&#x548C;&#x53F3;&#x4E0B;&#x89D2;&#x5750;&#x6807;</strong>&#x3002;&#x5BF9;<strong>&#x6BCF;&#x4E00;&#x7C7B;&#x5019;&#x9009;&#x6846;&#x8FDB;&#x884C;NMS&#x5F97;&#x5230;&#x9884;&#x6D4B;&#x6846;</strong>&#xFF0C;&#x5E76;&#x4E14;&#x5728;&#x56FE;&#x50CF;&#x4E0A;<strong>&#x753B;&#x51FA;&#x9884;&#x6D4B;&#x6846;</strong>&#xFF0C;&#x5E76;&#x4E14;<strong>&#x6807;&#x51FA;&#x7F6E;&#x4FE1;&#x5EA6;</strong>&#x5373;&#x53EF;&#x5B8C;&#x6210;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x4EFB;&#x52A1;&#x3002;<br><strong>NMS(Non-Maximum Suppression&#xFF0C;&#x975E;&#x6781;&#x5927;&#x503C;&#x6291;&#x5236;)</strong>&#xFF1A;&#x7B80;&#x5355;&#x5730;&#x8BF4;&#xFF0C;<strong>&#x4E0D;&#x662F;&#x6700;&#x5927;&#x7684;&#x6211;&#x4E0D;&#x8981;</strong>&#xFF0C;&#x5728;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x4E2D;&#xFF0C;&#x5F80;&#x5F80;&#x56FE;&#x50CF;&#x4E0A;&#x5B58;&#x5728;&#x5927;&#x91CF;&#x5148;&#x9A8C;&#x6846;&#xFF0C;&#x4F1A;&#x5BFC;&#x81F4;&#x5F88;&#x591A;&#x9644;&#x8FD1;&#x7684;&#x6846;&#x90FD;&#x4F1A;&#x9884;&#x6D4B;&#x51FA;&#x540C;&#x4E00;&#x4E2A;&#x7269;&#x4F53;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;<strong>&#x53EA;&#x4FDD;&#x7559;&#x6700;&#x5927;&#x7684;&#x4E00;&#x4E2A;&#x9884;&#x6D4B;&#x7ED3;&#x679C;</strong>&#xFF0C;&#x8FD9;&#x5C31;&#x662F;&#x975E;&#x6781;&#x5927;&#x503C;&#x6291;&#x5236;&#x3002;<br>&#x6B65;&#x9AA4;&#xFF1A;<br>(1)<strong>&#x4ECE;&#x6700;&#x5927;&#x6982;&#x7387;&#x77E9;&#x5F62;&#x6846;F&#x5F00;&#x59CB;</strong>&#xFF0C;&#x5206;&#x522B;&#x5224;&#x65AD;A~E&#x4E0E;F&#x7684;IOU&#x662F;&#x5426;&#x5927;&#x4E8E;&#x67D0;&#x4E2A;&#x8BBE;&#x5B9A;&#x7684;&#x9608;&#x503C;&#xFF0C;<strong>&#x5047;&#x8BBE;B&#x3001;D&#x4E0E;F&#x7684;&#x91CD;&#x53E0;&#x5EA6;&#x8D85;&#x8FC7;&#x9608;&#x503C;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x6254;&#x6389;B&#x3001;D</strong>&#xFF1B;&#x5E76;<strong>&#x6807;&#x8BB0;&#x7B2C;&#x4E00;&#x4E2A;&#x77E9;&#x5F62;&#x6846;F</strong>&#xFF0C;&#x662F;&#x6211;&#x4EEC;&#x4FDD;&#x7559;&#x4E0B;&#x6765;&#x7684;&#x3002;<br>(2)<strong>&#x4ECE;&#x5269;&#x4E0B;&#x7684;&#x77E9;&#x5F62;&#x6846;A&#x3001;C&#x3001;E&#x4E2D;&#xFF0C;&#x9009;&#x62E9;&#x6982;&#x7387;&#x6700;&#x5927;&#x7684;E&#xFF0C;&#x7136;&#x540E;&#x5224;&#x65AD;E&#x4E0E;A&#x3001;C&#x7684;&#x91CD;&#x53E0;&#x5EA6;&#xFF0C;&#x91CD;&#x53E0;&#x5EA6;&#x5927;&#x4E8E;&#x4E00;&#x5B9A;&#x7684;&#x9608;&#x503C;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x6254;&#x6389;&#xFF1B;&#x5E76;&#x6807;&#x8BB0;E&#x662F;&#x6211;&#x4EEC;&#x4FDD;&#x7559;&#x4E0B;&#x6765;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x77E9;&#x5F62;&#x6846;</strong>&#x3002;<br>(3)<strong>&#x91CD;&#x590D;&#x6B65;&#x9AA4;(2)&#xFF0C;&#x76F4;&#x5230;&#x6240;&#x6709;&#x7684;&#x6846;&#x90FD;&#x88AB;&#x629B;&#x5F03;&#x6216;&#x8005;&#x4FDD;&#x7559;</strong>&#x3002;<br><img src="/images/Object_detection/Dataset_N.png" alt="NMS"></li></ol><h2 id="&#x5C0F;&#x6280;&#x5DE7;"><a href="#&#x5C0F;&#x6280;&#x5DE7;" class="headerlink" title="&#x5C0F;&#x6280;&#x5DE7;"></a>&#x5C0F;&#x6280;&#x5DE7;</h2><ol><li>&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x7EF4;&#x5EA6;&#x4E3A;(batch_size, num_prior, num_class + 1 + 4)&#xFF0C;<strong>&#x6B64;&#x6570;&#x636E;&#x96C6;&#x4E3A;3&#x7C7B;&#xFF0C;&#x56E0;&#x6B64;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;&#x662F;8</strong>&#x3002;&#x6BCF;&#x4E2A;&#x5148;&#x9A8C;&#x6846;&#x6709;8&#x4E2A;&#x7D22;&#x5F15;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;0&#x5219;&#x4EE3;&#x8868;&#x80CC;&#x666F;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;1&#x5219;&#x4EE3;&#x8868;&#x5706;&#x5F62;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;2&#x5219;&#x4EE3;&#x8868;&#x4E09;&#x89D2;&#x5F62;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;3&#x5219;&#x4EE3;&#x8868;&#x6B63;&#x65B9;&#x5F62;&#xFF0C;&#x540E;&#x9762;4&#x4E2A;&#x7D22;&#x5F15;&#x4EE3;&#x8868;&#x5148;&#x9A8C;&#x6846;&#x7684;&#x56DE;&#x5F52;&#x53C2;&#x6570;&#xFF0C;&#x7528;&#x6765;&#x5BF9;&#x5148;&#x9A8C;&#x6846;&#x8FDB;&#x884C;&#x8C03;&#x6574;&#x5F97;&#x5230;&#x9884;&#x6D4B;&#x6846;&#x3002;</li><li>&#x5B9E;&#x9645;&#x7684;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x5E38;&#x5E38;&#x8FD8;&#x9700;&#x8981;&#x5BF9;&#x6570;&#x636E;&#x96C6;&#x8FDB;&#x884C;<strong>&#x5927;&#x5C0F;&#x8C03;&#x6574;&#x548C;&#x589E;&#x5F3A;</strong>&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x4E3A;&#x4E86;&#x7B80;&#x5355;&#x8D77;&#x89C1;&#xFF0C;&#x6CA1;&#x6709;&#x8FDB;&#x884C;&#x590D;&#x6742;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5E94;&#x7528;&#x4E2D;&#x8981;&#x8BB0;&#x5F97;&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x7684;&#x9700;&#x8981;&#xFF0C;&#x5BF9;&#x56FE;&#x50CF;&#x8FDB;&#x884C;<strong>resize&#x6216;&#x8005;padding</strong>&#xFF0C;&#x7136;&#x540E;<strong>&#x65CB;&#x8F6C;</strong>&#xFF0C;<strong>&#x5BF9;&#x6BD4;&#x5EA6;&#x589E;&#x5F3A;</strong>&#xFF0C;<strong>&#x4EFF;&#x5C04;&#x8FD0;&#x7B97;</strong>&#x7B49;&#x7B49;&#x64CD;&#x4F5C;&#xFF0C;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x9C81;&#x68D2;&#x6027;&#xFF0C;&#x5E76;&#x4E14;&#x5B9E;&#x9645;&#x4E2D;&#x7684;&#x56FE;&#x50CF;&#x4E0D;&#x4E00;&#x5B9A;&#x6309;&#x7167;&#x987A;&#x5E8F;&#x547D;&#x540D;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x5E94;&#x7528;&#x4E2D;&#x4E5F;&#x8981;&#x6CE8;&#x610F;&#x56FE;&#x50CF;&#x8BFB;&#x53D6;&#x7684;&#x6587;&#x4EF6;&#x540D;&#x3002;</li><li>&#x8BBE;&#x7F6E;&#x4E86;<strong>&#x6743;&#x91CD;&#x7684;&#x4FDD;&#x5B58;&#x65B9;&#x5F0F;</strong>&#xFF0C;<strong>&#x5B66;&#x4E60;&#x7387;&#x7684;&#x4E0B;&#x964D;&#x65B9;&#x5F0F;</strong>&#x548C;<strong>&#x65E9;&#x505C;&#x65B9;&#x5F0F;</strong>&#x3002;</li><li>&#x4F7F;&#x7528;<strong>yield</strong>&#x5173;&#x952E;&#x5B57;&#xFF0C;&#x4EA7;&#x751F;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#xFF0C;&#x4E0D;&#x7528;&#x5C06;&#x6240;&#x6709;&#x7684;&#x6570;&#x636E;&#x90FD;&#x4FDD;&#x5B58;&#x4E0B;&#x6765;&#xFF0C;&#x5927;&#x5927;&#x8282;&#x7EA6;&#x5185;&#x5B58;&#x3002;</li><li>&#x5176;&#x4E2D;&#x5C06;1000&#x4E2A;&#x6570;&#x636E;&#xFF0C;&#x5206;&#x6210;800&#x4E2A;&#x8BAD;&#x7EC3;&#x96C6;&#xFF0C;100&#x4E2A;&#x9A8C;&#x8BC1;&#x96C6;&#x548C;100&#x4E2A;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x81EA;&#x884C;&#x4FEE;&#x6539;&#x3002;</li><li>&#x6CE8;&#x610F;&#x5176;&#x4E2D;&#x7684;&#x4E00;&#x4E9B;&#x7EF4;&#x5EA6;&#x53D8;&#x6362;&#x548C;<strong>numpy</strong>&#xFF0C;<strong>tensorflow</strong>&#x5E38;&#x7528;&#x64CD;&#x4F5C;&#xFF0C;&#x5426;&#x5219;&#x5728;&#x9605;&#x8BFB;&#x4EE3;&#x7801;&#x65F6;&#x53EF;&#x80FD;&#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x56F0;&#x96BE;&#x3002;</li><li>SSD&#x7684;<strong>&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x4E3A;VGG</strong>&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x90E8;&#x5206;&#x5185;&#x5BB9;&#xFF0C;&#x9009;&#x62E9;&#x5176;&#x4ED6;&#x7684;&#x7F51;&#x7EDC;&#x8FDB;&#x884C;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#xFF0C;&#x6BD4;&#x8F83;&#x4E0D;&#x540C;&#x7F51;&#x7EDC;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x8FD0;&#x884C;&#x901F;&#x5EA6;&#xFF0C;&#x6700;&#x7EC8;&#x7ED3;&#x679C;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x5F02;&#x3002;</li><li>&#x56FE;&#x50CF;&#x8F93;&#x5165;&#x53EF;&#x4EE5;&#x5148;&#x5C06;&#x5176;<strong>&#x5F52;&#x4E00;&#x5316;&#x5230;0-1&#x4E4B;&#x95F4;&#x6216;&#x8005;-1-1&#x4E4B;&#x95F4;</strong>&#xFF0C;&#x56E0;&#x4E3A;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x4E00;&#x822C;&#x90FD;&#x6BD4;&#x8F83;&#x5C0F;&#xFF0C;&#x6240;&#x4EE5;&#x5F52;&#x4E00;&#x5316;&#x540E;&#x8BA1;&#x7B97;&#x65B9;&#x4FBF;&#xFF0C;&#x6536;&#x655B;&#x8F83;&#x5FEB;&#x3002;</li><li><strong>&#x6839;&#x636E;&#x5B9E;&#x9645;&#x7684;&#x56FE;&#x50CF;&#x5927;&#x5C0F;&#xFF0C;&#x9009;&#x62E9;&#x5408;&#x9002;&#x7684;&#x7279;&#x5F81;&#x5C42;&#x6570;&#xFF0C;&#x5148;&#x9A8C;&#x6846;&#x7684;&#x5F62;&#x72B6;&#xFF0C;&#x5148;&#x9A8C;&#x6846;&#x6570;&#x91CF;&#xFF0C;&#x4EE5;&#x53CA;&#x5404;&#x79CD;&#x9608;&#x503C;</strong></li><li><strong>anchor&#x5C3A;&#x5BF8;&#x7684;&#x786E;&#x5B9A;</strong>&#xFF0C;anchor&#x4E00;&#x822C;&#x662F;&#x6B63;&#x65B9;&#x5F62;&#x6216;&#x8005;&#x957F;&#x65B9;&#x5F62;&#xFF0C;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x5C42;&#x4E0A;&#x8BBE;&#x7F6E;&#x6700;&#x5927;&#x5C3A;&#x5BF8;max_size&#x548C;&#x6700;&#x5C0F;&#x5C3A;&#x5BF8;min_size&#xFF0C;&#x5982;&#x679C;&#x5148;&#x9A8C;&#x6846;&#x4E3A;4&#x4E2A;&#xFF0C;&#x5219;&#x4EE3;&#x8868;&#x4E24;&#x4E2A;&#x6B63;&#x65B9;&#x5F62;&#x548C;&#x4E24;&#x4E2A;&#x957F;&#x65B9;&#x5F62;&#xFF0C;&#x4E00;&#x4E2A;&#x6B63;&#x65B9;&#x5F62;&#x7684;&#x8FB9;&#x957F;&#x4E3A;min_size&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x4E3A;$\sqrt{max \_ size \times min \_ size}$&#xFF0C;&#x4E00;&#x4E2A;&#x957F;&#x65B9;&#x5F62;&#x7684;&#x8FB9;&#x957F;&#x4E3A;$(min \_ size \times \sqrt2&#xFF0C;min \_ size \div \sqrt2)$&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x957F;&#x65B9;&#x5F62;&#x7684;&#x8FB9;&#x957F;&#x4E3A;$(min \_ size \div \sqrt2&#xFF0C;min \_ size \times \sqrt2)$&#xFF0C;&#x5982;&#x679C;&#x5148;&#x9A8C;&#x6846;&#x4E3A;6&#x4E2A;&#xFF0C;&#x5219;&#x6DFB;&#x52A0;&#x4E24;&#x4E2A;&#x957F;&#x65B9;&#x5F62;&#xFF0C;&#x5C06;&#x4E0A;&#x9762;&#x7684;$\sqrt2$&#x6539;&#x6210;$\sqrt3$&#x5373;&#x53EF;&#x3002;</li></ol><h2 id="&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;"><a href="#&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;" class="headerlink" title="&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;"></a>&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import numpy as np</span><br><span class="line">import cv2 as cv</span><br><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Convs(keras.Model):</span><br><span class="line">    def __init__(self, filters, kernel_size=(3, 3), strides=(1, 1), name=&apos;Convs&apos;):</span><br><span class="line">        super(Convs, self).__init__()</span><br><span class="line">        self.blocks = keras.Sequential(name=name)</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters, kernel_size=kernel_size, strides=strides, padding=&apos;same&apos;))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.blocks(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DepthwiseConv(keras.Model):</span><br><span class="line">    def __init__(self, filters, kernel_size=(3, 3), strides=(1, 1), dilation_rate=1):</span><br><span class="line">        super(DepthwiseConv, self).__init__()</span><br><span class="line">        self.blocks = keras.Sequential()</span><br><span class="line">        self.blocks.add(keras.layers.DepthwiseConv2D(kernel_size=kernel_size, strides=strides, padding=&apos;same&apos;, dilation_rate=dilation_rate))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU())</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters, (1, 1), (1, 1), padding=&apos;same&apos;))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.blocks(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Block(keras.Model):</span><br><span class="line">    def __init__(self, filters, strides=(1, 1), type=None, dilation_rate=1):</span><br><span class="line">        super(Block, self).__init__()</span><br><span class="line">        self.type = type</span><br><span class="line">        self.block = keras.Sequential()</span><br><span class="line">        for i in range(len(filters) - 1):</span><br><span class="line">            self.block.add(DepthwiseConv(filters[i], dilation_rate=dilation_rate))</span><br><span class="line">        self.block.add(DepthwiseConv(filters[-1], strides=strides, dilation_rate=dilation_rate))</span><br><span class="line">        self.block1 = keras.Sequential()</span><br><span class="line">        self.block1.add(keras.layers.Conv2D(filters[-1], (1, 1), strides=strides))</span><br><span class="line">        self.block1.add(keras.layers.BatchNormalization())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block = self.block(inputs)</span><br><span class="line">        if self.type == &apos;conv&apos;:</span><br><span class="line">            conv = self.block1(inputs)</span><br><span class="line">            output = block + conv</span><br><span class="line">        elif self.type == &apos;sum&apos;:</span><br><span class="line">            output = block + inputs</span><br><span class="line">        else:</span><br><span class="line">            output = block</span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ASPP(keras.Model):</span><br><span class="line">    def __init__(self, input_channel, filters, dilation_rate):</span><br><span class="line">        super(ASPP, self).__init__()</span><br><span class="line">        self.block1 = keras.Sequential()</span><br><span class="line">        self.block1.add(keras.layers.GlobalAveragePooling2D())</span><br><span class="line">        self.block1.add(keras.layers.Reshape((1, 1, input_channel)))</span><br><span class="line">        self.block1.add(Convs(filters, (1, 1)))</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential()</span><br><span class="line">        self.block2.add(Convs(filters, (1, 1)))</span><br><span class="line"></span><br><span class="line">        self.block3 = keras.Sequential()</span><br><span class="line">        self.block3.add(DepthwiseConv(filters, dilation_rate=dilation_rate[0]))</span><br><span class="line"></span><br><span class="line">        self.block4 = keras.Sequential()</span><br><span class="line">        self.block4.add(DepthwiseConv(filters, dilation_rate=dilation_rate[1]))</span><br><span class="line"></span><br><span class="line">        self.block5 = keras.Sequential()</span><br><span class="line">        self.block5.add(DepthwiseConv(filters, dilation_rate=dilation_rate[2]))</span><br><span class="line"></span><br><span class="line">        self.concatenate = keras.layers.Concatenate()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block1 = self.block1(inputs)</span><br><span class="line">        block1 = tf.image.resize(block1, (inputs.shape[1], inputs.shape[2]))</span><br><span class="line">        block2 = self.block2(inputs)</span><br><span class="line">        block3 = self.block3(inputs)</span><br><span class="line">        block4 = self.block4(inputs)</span><br><span class="line">        block5 = self.block5(inputs)</span><br><span class="line">        output = self.concatenate([block1, block2, block3, block4, block5])</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Small_DeepLab_V3_Plus(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Small_DeepLab_V3_Plus, self).__init__()</span><br><span class="line">        self.conv_block = keras.Sequential(name=&apos;Conv_Block&apos;)</span><br><span class="line">        self.conv_block.add(Convs(32, strides=(2, 2)))</span><br><span class="line">        self.entry_block1 = keras.Sequential(name=&apos;Entry_Block1&apos;)</span><br><span class="line">        self.entry_block1.add(Block([128, 128, 128], strides=(2, 2), type=&apos;conv&apos;))</span><br><span class="line">        self.skip = keras.Sequential([DepthwiseConv(256)], name=&apos;Skip&apos;)</span><br><span class="line">        self.entry_block2 = keras.Sequential(name=&apos;Entry_Block2&apos;)</span><br><span class="line">        self.entry_block2.add(Block([256, 728], strides=(2, 2), type=&apos;conv&apos;))</span><br><span class="line"></span><br><span class="line">        self.middle_block = keras.Sequential(name=&apos;Middle_Block&apos;)</span><br><span class="line">        for i in range(8):</span><br><span class="line">            self.middle_block.add(Block([728, 728, 728], type=&apos;sum&apos;))</span><br><span class="line"></span><br><span class="line">        self.exit_block1 = keras.Sequential(name=&apos;Exit_Block1&apos;)</span><br><span class="line">        self.exit_block1.add(Block([728, 1024, 1024], type=&apos;conv&apos;))</span><br><span class="line">        self.exit_block2 = keras.Sequential(name=&apos;Exit_Block2&apos;)</span><br><span class="line">        self.exit_block2.add(Block([1536, 1536, 2048], dilation_rate=2))</span><br><span class="line"></span><br><span class="line">        self.aspp = keras.Sequential(name=&apos;ASPP&apos;)</span><br><span class="line">        self.aspp.add(ASPP(input_channel=2048, filters=256, dilation_rate=[2, 4, 8]))</span><br><span class="line">        self.aspp.add(Convs(256, (1, 1)))</span><br><span class="line">        self.aspp.add(keras.layers.Dropout(0.1))</span><br><span class="line"></span><br><span class="line">        self.skip_conv = keras.Sequential([Convs(24, (1, 1))], name=&apos;Skip_Conv&apos;)</span><br><span class="line"></span><br><span class="line">        self.concatenate = keras.layers.Concatenate(name=&apos;Concatenate&apos;)</span><br><span class="line"></span><br><span class="line">        self.dw_block = keras.Sequential(name=&apos;DepthwiseConv_Block&apos;)</span><br><span class="line">        self.dw_block.add(DepthwiseConv(256))</span><br><span class="line">        self.dw_block.add(DepthwiseConv(256))</span><br><span class="line">        self.dw_block.add(keras.layers.Conv2D(num_class, (1, 1)))</span><br><span class="line">        self.softmax = keras.layers.Softmax(name=&apos;Softmax&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        conv_block = self.conv_block(inputs)</span><br><span class="line">        entry_block1 = self.entry_block1(conv_block)</span><br><span class="line">        skip = self.skip(entry_block1)</span><br><span class="line">        entry_block2 = self.entry_block2(skip)</span><br><span class="line">        middle_block = self.middle_block(entry_block2)</span><br><span class="line">        exit_block1 = self.exit_block1(middle_block)</span><br><span class="line">        exit_block2 = self.exit_block2(exit_block1)</span><br><span class="line"></span><br><span class="line">        aspp = self.aspp(exit_block2)</span><br><span class="line">        aspp = tf.image.resize(aspp, (32, 32))</span><br><span class="line">        skip_conv = self.skip_conv(skip)</span><br><span class="line">        concatenate = self.concatenate([aspp, skip_conv])</span><br><span class="line"></span><br><span class="line">        dw_block = self.dw_block(concatenate)</span><br><span class="line">        dw_block = tf.image.resize(dw_block, (img_size[0], img_size[1]))</span><br><span class="line">        output = self.softmax(dw_block)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def generate_arrays_from_file(train_data, batch_size):</span><br><span class="line">    # &#x83B7;&#x53D6;&#x603B;&#x957F;&#x5EA6;</span><br><span class="line">    n = len(train_data)</span><br><span class="line">    i = 0</span><br><span class="line">    while 1:</span><br><span class="line">        X_train = []</span><br><span class="line">        Y_train = []</span><br><span class="line">        # &#x83B7;&#x53D6;&#x4E00;&#x4E2A;batch_size&#x5927;&#x5C0F;&#x7684;&#x6570;&#x636E;</span><br><span class="line">        for _ in range(batch_size):</span><br><span class="line">            if i == 0:</span><br><span class="line">                np.random.shuffle(train_data)</span><br><span class="line">            # &#x4ECE;&#x6587;&#x4EF6;&#x4E2D;&#x8BFB;&#x53D6;&#x56FE;&#x50CF;</span><br><span class="line">            img = cv.imread(imgs_path + &apos;\\&apos; + str(train_data[i]) + &apos;.jpg&apos;)</span><br><span class="line">            img = img / 127.5 - 1</span><br><span class="line">            X_train.append(img)</span><br><span class="line"></span><br><span class="line">            # &#x4ECE;&#x6587;&#x4EF6;&#x4E2D;&#x8BFB;&#x53D6;&#x56FE;&#x50CF;</span><br><span class="line">            img = cv.imread(mask_path + &apos;\\&apos; + str(train_data[i]) + &apos;.png&apos;)</span><br><span class="line">            seg_labels = np.zeros((img_size[0], img_size[1], num_class))</span><br><span class="line">            for c in range(num_class):</span><br><span class="line">                seg_labels[:, :, c] = (img[:, :, 0] == c).astype(int)</span><br><span class="line">            Y_train.append(seg_labels)</span><br><span class="line"></span><br><span class="line">            # &#x8BFB;&#x5B8C;&#x4E00;&#x4E2A;&#x5468;&#x671F;&#x540E;&#x91CD;&#x65B0;&#x5F00;&#x59CB;</span><br><span class="line">            i = (i + 1) % n</span><br><span class="line">        yield tf.constant(X_train), tf.constant(Y_train)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # &#x5305;&#x62EC;&#x80CC;&#x666F;</span><br><span class="line">    num_class = 4</span><br><span class="line">    train_data = list(range(800))</span><br><span class="line">    validation_data = list(range(800, 900))</span><br><span class="line">    test_data = range(900, 1000)</span><br><span class="line">    epochs = 50</span><br><span class="line">    batch_size = 16</span><br><span class="line">    tf.random.set_seed(22)</span><br><span class="line">    img_size = (128, 128)</span><br><span class="line">    colors = [[0, 0, 0], [0, 0, 128], [0, 128, 0], [128, 0, 0]]</span><br><span class="line"></span><br><span class="line">    mask_path = r&apos;.\shape\train_mask&apos;</span><br><span class="line">    imgs_path = r&apos;.\shape\train_imgs&apos;</span><br><span class="line">    test_path = r&apos;.\shape\test_imgs&apos;</span><br><span class="line">    save_path = r&apos;.\DeepLab_V3_Plus_test_result&apos;</span><br><span class="line">    weight_path = r&apos;.\DeepLab_V3_Plus_weight&apos;</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        os.mkdir(save_path)</span><br><span class="line">    except FileExistsError:</span><br><span class="line">        print(save_path + &apos;has been exist&apos;)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        os.mkdir(weight_path)</span><br><span class="line">    except FileExistsError:</span><br><span class="line">        print(weight_path + &apos;has been exist&apos;)</span><br><span class="line"></span><br><span class="line">    model = Small_DeepLab_V3_Plus()</span><br><span class="line"></span><br><span class="line">    model.build(input_shape=(None, img_size[0], img_size[1], 3))</span><br><span class="line">    model.summary()</span><br><span class="line"></span><br><span class="line">    optimizor = keras.optimizers.Adam(lr=1e-3)</span><br><span class="line">    lossor = keras.losses.BinaryCrossentropy()</span><br><span class="line"></span><br><span class="line">    model.compile(optimizer=optimizor, loss=lossor, metrics=[&apos;accuracy&apos;])</span><br><span class="line"></span><br><span class="line">    # &#x4FDD;&#x5B58;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;3&#x4E16;&#x4EE3;&#x4FDD;&#x5B58;&#x4E00;&#x6B21;</span><br><span class="line">    checkpoint_period = keras.callbacks.ModelCheckpoint(</span><br><span class="line">        weight_path + &apos;\\&apos; + &apos;ep{epoch:03d}-loss{loss:.3f}-val_loss{val_loss:.3f}.h5&apos;,</span><br><span class="line">        monitor=&apos;val_loss&apos;,</span><br><span class="line">        save_weights_only=True,</span><br><span class="line">        save_best_only=True,</span><br><span class="line">        period=3</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    # &#x5B66;&#x4E60;&#x7387;&#x4E0B;&#x964D;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;val_loss3&#x6B21;&#x4E0D;&#x4E0B;&#x964D;&#x5C31;&#x4E0B;&#x964D;&#x5B66;&#x4E60;&#x7387;&#x7EE7;&#x7EED;&#x8BAD;&#x7EC3;</span><br><span class="line">    reduce_lr = keras.callbacks.ReduceLROnPlateau(</span><br><span class="line">        monitor=&apos;val_loss&apos;,</span><br><span class="line">        factor=0.5,</span><br><span class="line">        patience=3,</span><br><span class="line">        verbose=1</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    # &#x662F;&#x5426;&#x9700;&#x8981;&#x65E9;&#x505C;&#xFF0C;&#x5F53;val_loss&#x4E00;&#x76F4;&#x4E0D;&#x4E0B;&#x964D;&#x7684;&#x65F6;&#x5019;&#x610F;&#x5473;&#x7740;&#x6A21;&#x578B;&#x57FA;&#x672C;&#x8BAD;&#x7EC3;&#x5B8C;&#x6BD5;&#xFF0C;&#x53EF;&#x4EE5;&#x505C;&#x6B62;</span><br><span class="line">    early_stopping = keras.callbacks.EarlyStopping(</span><br><span class="line">        monitor=&apos;val_loss&apos;,</span><br><span class="line">        min_delta=0,</span><br><span class="line">        patience=10,</span><br><span class="line">        verbose=1</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    model.fit_generator(generate_arrays_from_file(train_data, batch_size),</span><br><span class="line">                        steps_per_epoch=max(1, len(train_data) // batch_size),</span><br><span class="line">                        validation_data=generate_arrays_from_file(validation_data, batch_size),</span><br><span class="line">                        validation_steps=max(1, len(validation_data) // batch_size),</span><br><span class="line">                        epochs=epochs,</span><br><span class="line">                        callbacks=[checkpoint_period, reduce_lr, early_stopping])</span><br><span class="line"></span><br><span class="line">    for name in test_data:</span><br><span class="line">        test_img_path = test_path + &apos;\\&apos; + str(name) + &apos;.jpg&apos;</span><br><span class="line">        save_img_path = save_path + &apos;\\&apos; + str(name) + &apos;.png&apos;</span><br><span class="line">        test_img = cv.imread(test_img_path)</span><br><span class="line">        test_img = tf.constant([test_img / 127.5 - 1])</span><br><span class="line">        test_mask = model.predict(test_img)</span><br><span class="line">        test_mask = np.reshape(test_mask, (img_size[0], img_size[1], num_class))</span><br><span class="line">        test_mask = np.argmax(test_mask, axis=-1)</span><br><span class="line">        seg_img = np.zeros((img_size[0], img_size[1], 3))</span><br><span class="line">        for c in range(num_class):</span><br><span class="line">            seg_img[:, :, 0] += ((test_mask == c) * (colors[c][0]))</span><br><span class="line">            seg_img[:, :, 1] += ((test_mask == c) * (colors[c][1]))</span><br><span class="line">            seg_img[:, :, 2] += ((test_mask == c) * (colors[c][2]))</span><br><span class="line">        seg_img = seg_img.astype(np.uint8)</span><br><span class="line">        cv.imwrite(save_img_path, seg_img)</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"><a href="#&#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C;" class="headerlink" title="&#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a>&#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</h2><p><img src="/images/Semantic_segmentation/SSD_T.png" alt="SSD"></p><h1 id="SSD&#x5C0F;&#x7ED3;"><a href="#SSD&#x5C0F;&#x7ED3;" class="headerlink" title="SSD&#x5C0F;&#x7ED3;"></a><font size="5" color="red">SSD&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;SSD&#x662F;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x7684;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x7F51;&#x7EDC;&#xFF0C;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;SSD&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x53EA;&#x6709;26M&#xFF0C;&#x7531;&#x4E8E;&#x5176;&#x7ED3;&#x6784;&#x7B80;&#x5355;&#xFF0C;&#x6548;&#x679C;&#x7A33;&#x5B9A;&#xFF0C;&#x56E0;&#x6B64;&#x5F88;&#x591A;&#x573A;&#x5408;&#x4ECD;&#x7136;&#x4F7F;&#x7528;SSD&#x4F5C;&#x4E3A;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x7B97;&#x6CD5;&#x3002;SSD&#x4F5C;&#x4E3A;&#x4E00;&#x6B65;&#x6CD5;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x7684;&#x5143;&#x8001;&#x7EA7;&#x6A21;&#x578B;&#xFF0C;&#x662F;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x9700;&#x8981;&#x638C;&#x63E1;&#x7684;&#x4E00;&#x4E2A;&#x6A21;&#x578B;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;SSD&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="目标检测网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>各种卷积黑科技</title>
    <link href="https://USTCcoder.github.io/2020/05/04/deep%20learning%20convolution/"/>
    <id>https://USTCcoder.github.io/2020/05/04/deep learning convolution/</id>
    <published>2020-05-04T04:25:58.000Z</published>
    <updated>2020-05-09T09:27:36.649Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">Convolution</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>Convolution</strong>:&#x5728;&#x8FD9;&#x4E2A;&#x535A;&#x5BA2;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x8C08;&#x8BBA;&#x7684;&#x5377;&#x79EF;&#x5E76;&#x4E0D;&#x662F;&#x5B9E;&#x9645;&#x610F;&#x4E49;&#x4E2D;&#x7684;&#x5377;&#x79EF;&#xFF0C;&#x800C;&#x662F;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4E2D;&#x7684;&#x5377;&#x79EF;&#x3002;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x80FD;&#x4F1A;&#x6709;&#x7591;&#x95EE;&#xFF0C;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x6709;&#x533A;&#x522B;&#x5417;&#xFF1F;&#x5B66;&#x8FC7;&#x4FE1;&#x53F7;&#x5904;&#x7406;&#x6216;&#x8005;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x7684;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5E94;&#x8BE5;&#x5F88;&#x719F;&#x6089;&#xFF0C;&#x5377;&#x79EF;&#x662F;&#x8981;<strong>&#x9996;&#x5148;&#x5C06;&#x6838;&#x7FFB;&#x8F6C;180&#xB0;</strong>&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5E94;&#x7528;&#x4E8E;&#x4FE1;&#x53F7;&#x6216;&#x8005;&#x56FE;&#x50CF;&#x4E0A;&#xFF0C;&#x800C;<strong>&#x76F8;&#x5173;&#x5219;&#x4E0D;&#x9700;&#x8981;&#x7FFB;&#x8F6C;</strong>&#x3002;&#x56E0;&#x6B64;<strong>&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4E2D;&#x7684;&#x5377;&#x79EF;&#x5B9E;&#x9645;&#x4E0A;&#x662F;&#x4E00;&#x79CD;&#x76F8;&#x5173;&#x64CD;&#x4F5C;</strong>&#x3002;<br><a id="more"></a></p><p><img src="/images/deep_learning/convolution.png" alt="convolution"></p><h1 id="Receptive-Field&#x611F;&#x53D7;&#x91CE;"><a href="#Receptive-Field&#x611F;&#x53D7;&#x91CE;" class="headerlink" title="Receptive Field&#x611F;&#x53D7;&#x91CE;"></a><font size="5" color="red">Receptive Field&#x611F;&#x53D7;&#x91CE;</font></h1><p>&#x2003;&#x2003;<font size="3">&#x5728;&#x4E8C;&#x7EF4;&#x5377;&#x79EF;&#x4E2D;&#x4E0D;&#x5F97;&#x4E0D;&#x63D0;&#x5230;&#x4E00;&#x4E2A;&#x91CD;&#x8981;&#x540D;&#x8BCD;&#xFF1A;<strong>&#x611F;&#x53D7;&#x91CE;</strong>&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x6211;&#x53EA;&#x662F;&#x4F5C;&#x4E3A;&#x79D1;&#x666E;&#xFF0C;&#x8BF4;&#x4E00;&#x8BF4;<strong>&#x611F;&#x53D7;&#x91CE;&#x548C;&#x4E8C;&#x7EF4;&#x5377;&#x79EF;&#x7684;&#x5173;&#x7CFB;</strong>&#xFF0C;&#x4E0D;&#x4ECE;&#x751F;&#x547D;&#x79D1;&#x5B66;&#x7684;&#x89D2;&#x5EA6;&#x5177;&#x4F53;&#x63CF;&#x8FF0;&#x611F;&#x53D7;&#x91CE;&#x548C;&#x795E;&#x7ECF;&#x5143;&#x7684;&#x5173;&#x7CFB;&#xFF0C;&#x611F;&#x5174;&#x8DA3;&#x7684;&#x5C0F;&#x4F19;&#x4F34;&#x53EF;&#x4EE5;&#x53BB;&#x7F51;&#x4E0A;&#x641C;&#x7D22;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x60F3;&#x8C61;&#x4E00;&#x4E0B;&#xFF0C;&#x5F53;&#x6211;&#x4EEC;&#x770B;&#x4E00;&#x573A;&#x8DB3;&#x7403;&#x6BD4;&#x8D5B;&#xFF0C;&#x6216;&#x8005;&#x770B;&#x4E00;&#x573A;&#x7CBE;&#x5F69;&#x7684;&#x7535;&#x5F71;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x7684;&#x6CE8;&#x610F;&#x529B;&#x96C6;&#x4E2D;&#x4E8E;&#x67D0;&#x4E2A;&#x70B9;&#xFF0C;&#x6BD4;&#x5982;&#x8DB3;&#x7403;&#x7684;&#x8FD0;&#x52A8;&#x8F68;&#x8FF9;&#xFF0C;&#x7535;&#x5F71;&#x4E2D;&#x4EFB;&#x52A1;&#x7684;&#x7EC6;&#x8282;&#x63CF;&#x5199;&#x3002;&#x6211;&#x4EEC;&#x7684;&#x773C;&#x775B;&#x53EA;&#x662F;&#x5173;&#x6CE8;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x5417;&#xFF1F;&#x7B54;&#x6848;&#x662F;&#x5426;&#x5B9A;&#x7684;&#xFF0C;&#x6211;&#x4EEC;<strong>&#x5173;&#x6CE8;&#x7684;&#x662F;&#x5468;&#x56F4;&#x4E86;&#x4E00;&#x90E8;&#x5206;&#x533A;&#x57DF;</strong>&#xFF0C;&#x8FD9;&#x4E2A;<strong>&#x533A;&#x57DF;&#x53EF;&#x4EE5;&#x79F0;&#x4E4B;&#x4E3A;&#x611F;&#x53D7;&#x91CE;</strong>&#x3002;&#x5F53;&#x6211;&#x4EEC;&#x770B;&#x8FD9;&#x4E2A;&#x4EBA;&#x7684;&#x773C;&#x795E;&#x7EC6;&#x8282;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x8FD8;&#x4F1A;&#x6CE8;&#x610F;&#x5230;&#x9762;&#x90E8;&#x7684;&#x52A8;&#x4F5C;&#xFF0C;&#x800C;&#x5F88;&#x96BE;&#x6CE8;&#x610F;&#x5230;&#x8033;&#x6735;&#x6216;&#x8005;&#x5176;&#x4ED6;&#x90E8;&#x4F4D;&#x7684;&#x53D8;&#x5316;&#x3002;&#x800C;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x4E5F;&#x662F;&#x76F8;&#x540C;&#xFF0C;&#x5BF9;&#x4E8E;&#x67D0;&#x4E2A;&#x4E2D;&#x5FC3;&#x70B9;&#x6C42;&#x5377;&#x79EF;&#xFF0C;&#x53EA;&#x662F;&#x8BA1;&#x7B97;&#x8FD9;&#x4E2A;&#x70B9;&#x5468;&#x56F4;&#x7684;&#x503C;&#xFF0C;&#x800C;&#x4E0D;&#x53BB;&#x8BA1;&#x7B97;&#x8DDD;&#x79BB;&#x5F88;&#x8FDC;&#x7684;&#x50CF;&#x7D20;&#x70B9;&#x3002;&#x610F;&#x5728;<strong>&#x8BA9;&#x8BA1;&#x7B97;&#x673A;&#x6839;&#x636E;&#x4EBA;&#x7C7B;&#x7684;&#x89C6;&#x89C9;&#x884C;&#x4E3A;&#x505A;&#x51FA;&#x7C7B;&#x4F3C;&#x7684;&#x5224;&#x65AD;</strong>&#x3002;</font><br><img src="/images/deep_learning/field.png" alt="field"></p><h1 id="CNN&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;"><a href="#CNN&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;" class="headerlink" title="CNN&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;"></a><font size="5" color="red">CNN&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;</font></h1><p>&#x2003;&#x2003;<font size="3">CNN&#x662F;&#x76EE;&#x524D;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x9886;&#x57DF;&#x4E2D;&#x975E;&#x5E38;&#x5177;&#x6709;&#x4EE3;&#x8868;&#x6027;&#x7684;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4E4B;&#x4E00;&#xFF0C;&#x5728;<strong>&#x56FE;&#x50CF;&#x5206;&#x6790;&#x548C;&#x5904;&#x7406;&#x9886;&#x57DF;</strong>&#x53D6;&#x5F97;&#x4E86;&#x4F17;&#x591A;&#x7A81;&#x7834;&#x6027;&#x7684;&#x8FDB;&#x5C55;&#xFF0C;&#x5305;&#x62EC;<strong>&#x56FE;&#x50CF;&#x8BC6;&#x522B;</strong>&#xFF0C;<strong>&#x8BED;&#x4E49;&#x5206;&#x5272;</strong>&#xFF0C;<strong>&#x76EE;&#x6807;&#x68C0;&#x6D4B;</strong>&#x7B49;&#x7B49;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x5173;&#x4E8E;&#x5377;&#x79EF;&#x7684;&#x8BA1;&#x7B97;&#x8FC7;&#x7A0B;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5E94;&#x8BE5;&#x90FD;&#x6BD4;&#x8F83;&#x4E86;&#x89E3;&#xFF0C;&#x901A;&#x8FC7;&#x6700;&#x4E0A;&#x9762;&#x7684;&#x56FE;&#x4E5F;&#x53EF;&#x4EE5;&#x76F4;&#x89C2;&#x7684;&#x770B;&#x51FA;&#x3002;&#x968F;&#x7740;CNN&#x7684;&#x53D1;&#x5C55;&#xFF0C;&#x5C24;&#x5176;&#x662F;2012&#x5E74;AlexNet&#x7F51;&#x7EDC;&#x5728;ImageNet&#x4E0A;&#x5927;&#x653E;&#x5F02;&#x5F69;&#x4EE5;&#x540E;&#xFF0C;&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x6301;&#x7EED;&#x706B;&#x7206;&#x3002;&#x6E10;&#x6E10;&#x7684;&#x4E00;&#x4E9B;&#x9ED1;&#x79D1;&#x6280;&#x5377;&#x79EF;&#x4E5F;&#x88AB;&#x9646;&#x7EED;&#x53D1;&#x73B0;&#x3002;&#x8FD9;&#x4E2A;&#x535A;&#x5BA2;&#x76EE;&#x7684;&#x662F;&#x5411;&#x5927;&#x5BB6;&#x4ECB;&#x7ECD;&#x5404;&#x79CD;&#x5377;&#x79EF;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x5F02;&#x3002;</font><br><img src="/images/deep_learning/cnn.png" alt="cnn"></p><h1 id="Depthwise-Convolution"><a href="#Depthwise-Convolution" class="headerlink" title="Depthwise Convolution"></a><font size="5" color="red">Depthwise Convolution</font></h1><p><img src="/images/deep_learning/depthwise.png" alt="depthwise"><br>&#x2003;&#x2003;<font size="3"><strong>Depthwise Convolution(&#x6DF1;&#x5EA6;&#x5377;&#x79EF;)&#xFF1A;&#x5728;</strong>&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x4E0A;&#x5355;&#x72EC;&#x8FDB;&#x884C;&#x5377;&#x79EF;<strong></strong></font><br>&#x2003;&#x2003;<font size="3">&#x53C2;&#x6570;depth_multiplier&#x9ED8;&#x8BA4;&#x4E3A;1<strong>&#xFF0C;&#x4EE3;&#x8868;&#x6BCF;&#x4E2A;&#x901A;&#x9053;&#x6570;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x5355;&#x72EC;&#x5377;&#x79EF;&#xFF0C;</strong>&#x8F93;&#x51FA;&#x7684;&#x901A;&#x9053;&#x6570;&#x548C;&#x8F93;&#x5165;&#x901A;&#x9053;&#x6570;&#x76F8;&#x7B49;<strong>&#xFF0C;&#x8BBE;&#x7F6E;</strong>depth_multiplier=n<strong>&#xFF0C;&#x5219;&#x4EE3;&#x8868;&#x6BCF;&#x4E2A;&#x901A;&#x9053;&#x6570;&#x8FDB;&#x884C;n&#x6B21;&#x5355;&#x72EC;&#x5377;&#x79EF;&#xFF0C;</strong>&#x8F93;&#x51FA;&#x901A;&#x9053;&#x6570;&#x662F;&#x8F93;&#x5165;&#x901A;&#x9053;&#x6570;&#x7684;n&#x500D;<strong>&#x3002;</strong></font><br>&#x2003;&#x2003;<font size="3">&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;<strong>&#xFF0C;&#x4E3B;&#x8981;&#x7528;&#x4E8E;</strong>&#x8F7B;&#x91CF;&#x7EA7;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;<strong>&#xFF0C;&#x5728;</strong>MobileNet&#xFF0C;EfficientNet&#xFF0C;ShuffleNet**&#x7F51;&#x7EDC;&#x4E2D;&#x90FD;&#x6709;&#x5927;&#x91CF;&#x4F7F;&#x7528;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;8x8x1024&#x7684;&#x7279;&#x5F81;&#x56FE;&#xFF0C;&#x7ECF;&#x8FC7;5x5&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;8x8x1024&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;1024x(1024x5x5+1)=26215424&#xFF0C;&#x800C;&#x6DF1;&#x5EA6;&#x5377;&#x79EF;&#x53C2;&#x6570;&#x91CF;&#x4E3A;1024x(1x5x5+1)=26624&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;1024&#x500D;&#x3002;</font></p><h1 id="Pointwise-Convolution"><a href="#Pointwise-Convolution" class="headerlink" title="Pointwise Convolution"></a><font size="5" color="red">Pointwise Convolution</font></h1><p><img src="/images/deep_learning/pointwise.png" alt="pointwise"><br>&#x2003;&#x2003;<font size="3"><strong>Pointwise Convolution(&#x70B9;&#x5377;&#x79EF;)</strong>&#xFF1A;&#x5F88;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x5377;&#x79EF;&#x6838;&#x7684;&#x5927;&#x5C0F;&#x4E3A;1x1&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x80FD;&#x4EA7;&#x751F;&#x7591;&#x95EE;&#xFF1F;1x1&#x5377;&#x79EF;&#x6709;&#x4EC0;&#x4E48;&#x4F5C;&#x7528;&#x5462;&#xFF1F;</font></p><ol><li><strong>&#x6539;&#x53D8;&#x901A;&#x9053;&#x6570;</strong>&#xFF0C;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;<strong>&#x5347;&#x7EF4;</strong>&#x6216;&#x8005;<strong>&#x964D;&#x7EF4;</strong>&#xFF0C;&#x5728;<strong>ResNet&#xFF0C;MobileNet</strong>&#x7F51;&#x7EDC;&#x4E2D;&#x6709;&#x91CD;&#x8981;&#x4F5C;&#x7528;&#x3002;</li><li><strong>&#x589E;&#x52A0;&#x975E;&#x7EBF;&#x6027;&#x5173;&#x7CFB;</strong>&#xFF0C;&#x5728;&#x4FDD;&#x6301;&#x7279;&#x5F81;&#x56FE;&#x5C3A;&#x5EA6;&#x7684;&#x524D;&#x63D0;&#x4E0B;&#xFF0C;&#x53EF;&#x4EE5;<strong>&#x5229;&#x7528;&#x975E;&#x7EBF;&#x6027;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x589E;&#x52A0;&#x7F51;&#x7EDC;&#x6DF1;&#x5EA6;</strong>&#x3002;</li><li><strong>&#x5B9E;&#x73B0;&#x8DE8;&#x901A;&#x9053;&#x4FE1;&#x606F;&#x4EA4;&#x4E92;</strong>&#xFF0C;&#x5F80;&#x5F80;&#x548C;Depthwise Convolution&#x7ED3;&#x5408;&#x4F7F;&#x7528;&#x3002;</li></ol><h1 id="Separable-Convolution"><a href="#Separable-Convolution" class="headerlink" title="Separable Convolution"></a><font size="5" color="red">Separable Convolution</font></h1><p><img src="/images/Feature_extraction/Xception_D.png" alt="Xception"><br>&#x2003;&#x2003;<font size="3"><strong>Separable Convolution(&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)</strong>&#xFF1A;&#x662F;&#x4E0A;&#x9762;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x5408;&#x4E8C;&#x4E3A;&#x4E00;&#x7684;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x3002;</font><br>&#x2003;&#x2003;<font size="3"><strong>&#x7B2C;&#x4E00;&#x6B65;&#xFF1A;DepthwiseConv&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x8FDB;&#x884C;&#x5377;&#x79EF;</strong></font><br>&#x2003;&#x2003;<font size="3"><strong>&#x7B2C;&#x4E8C;&#x6B65;&#xFF1A;PointwiseConv&#xFF0C;&#x5BF9;&#x7B2C;&#x4E00;&#x6B65;&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#x8FDB;&#x884C;1x1&#x5377;&#x79EF;&#xFF0C;&#x5B9E;&#x73B0;&#x901A;&#x9053;&#x878D;&#x5408;</strong></font><br>&#x2003;&#x2003;<font size="3">&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;<strong>&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;</strong>&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;<strong>&#x8C03;&#x6574;&#x4E3A;&#x4EFB;&#x610F;&#x5408;&#x9002;&#x7684;&#x901A;&#x9053;&#x6570;</strong>&#xFF0C;&#x5728;<strong>Xception&#xFF0C;MobileNet&#xFF0C;EfficientNet&#xFF0C;ShuffleNet</strong>&#x7F51;&#x7EDC;&#x4E2D;&#x6709;&#x5927;&#x91CF;&#x4F7F;&#x7528;&#x3002;&#x7B2C;&#x4E00;&#x6B65;&#x7684;<strong>&#x76EE;&#x7684;&#x662F;&#x51CF;&#x5C11;&#x53C2;&#x6570;&#x91CF;</strong>&#xFF0C;&#x7B2C;&#x4E8C;&#x6B65;&#x662F;<strong>&#x8C03;&#x6574;&#x901A;&#x9053;&#x6570;</strong>&#xFF0C;&#x56E0;&#x6B64;&#x5C06;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x7ED3;&#x5408;&#xFF0C;&#x7EC4;&#x6210;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x3002;</font></p><h1 id="Spatial-Separable-Convolution"><a href="#Spatial-Separable-Convolution" class="headerlink" title="Spatial Separable Convolution"></a><font size="5" color="red">Spatial Separable Convolution</font></h1><p><img src="/images/deep_learning/spatial.png" alt="spatial"><br>&#x2003;&#x2003;<font size="3"><strong>Spatial Separable Convolution(&#x7A7A;&#x95F4;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)</strong>&#xFF1A;&#x5C06;3x3&#x7684;&#x5377;&#x79EF;&#x5206;&#x89E3;&#x4E3A;3x1&#x7684;&#x5377;&#x79EF;&#x6838;1x3&#x7684;&#x5377;&#x79EF;&#xFF0C;&#x5C06;7x7&#x7684;&#x5377;&#x79EF;&#x5206;&#x89E3;&#x4E3A;7x1&#x7684;&#x5377;&#x79EF;&#x6838;1x7&#x7684;&#x5377;&#x79EF;.&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;<strong>&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;</strong>&#xFF0C;&#x5728;<strong>Inception&#x7C7B;&#x578B;</strong>&#x7684;&#x7F51;&#x7EDC;&#x4E2D;&#x6709;&#x5927;&#x91CF;&#x4F7F;&#x7528;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;64x64x256&#x7684;&#x7279;&#x5F81;&#x56FE;&#xFF0C;&#x7ECF;&#x8FC7;7x7&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(256x7x7+1)=3211520&#xFF0C;&#x800C;&#x7A7A;&#x95F4;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x53C2;&#x6570;&#x91CF;&#x4E3A;2x256x(256x7x1+1)=918016&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;3.5&#x500D;&#x3002;</font></p><h1 id="Atrous-Convolution"><a href="#Atrous-Convolution" class="headerlink" title="Atrous Convolution"></a><font size="5" color="red">Atrous Convolution</font></h1><p><img src="/images/Semantic_segmentation/PSPNet_D.png" alt="PSPNet"><br>&#x2003;&#x2003;<font size="3"><strong>Atrous Convolution(&#x7A7A;&#x6D1E;&#x5377;&#x79EF;)</strong>&#xFF1A;&#x53C8;&#x79F0;<strong>&#x81A8;&#x80C0;&#x5377;&#x79EF;(Dilated Convolution)</strong>&#xFF0C;&#x5728;&#x5377;&#x79EF;&#x5C42;&#x5F15;&#x5165;&#x4E86;&#x4E00;&#x4E2A;<strong>&#x81A8;&#x80C0;&#x7387;(dilation rate)</strong>&#x53C2;&#x6570;&#xFF0C;&#x5B9A;&#x4E49;&#x4E86;&#x5377;&#x79EF;&#x6838;&#x7684;&#x95F4;&#x9694;&#x6570;&#x91CF;&#xFF0C;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x5377;&#x79EF;&#x6838;dilation rate=1&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x4F18;&#x70B9;&#xFF1A;<strong>&#x6269;&#x5927;&#x611F;&#x53D7;&#x91CE;</strong>&#xFF0C;&#x76F8;&#x90BB;&#x7684;&#x50CF;&#x7D20;&#x70B9;&#x53EF;&#x80FD;&#x5B58;&#x5728;&#x5927;&#x91CF;&#x5197;&#x4F59;&#x4FE1;&#x606F;&#xFF0C;&#x6269;&#x5927;&#x611F;&#x53D7;&#x91CE;&#x53EF;&#x80FD;&#x4F1A;&#x83B7;&#x53D6;&#x591A;&#x5C3A;&#x5EA6;&#x4FE1;&#x606F;&#xFF0C;&#x8FD9;&#x5728;&#x89C6;&#x89C9;&#x4EFB;&#x52A1;&#x4E0A;&#x975E;&#x5E38;&#x91CD;&#x8981;&#xFF0C;&#x4E14;<strong>&#x4E0D;&#x9700;&#x8981;&#x5F15;&#x5165;&#x989D;&#x5916;&#x53C2;&#x6570;</strong>&#xFF0C;&#x5982;&#x679C;&#x589E;&#x52A0;&#x5206;&#x8FA8;&#x7387;&#x6216;&#x8005;&#x91C7;&#x7528;&#x5927;&#x5C3A;&#x5BF8;&#x7684;&#x5377;&#x79EF;&#x6838;&#x5219;&#x4F1A;&#x5927;&#x5927;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x5728;<strong>PSPNet&#xFF0C;DeepLab-V3+</strong>&#x7F51;&#x7EDC;&#x4E2D;&#x6709;&#x5927;&#x91CF;&#x4F7F;&#x7528;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x7F3A;&#x70B9;&#xFF1A;&#x7531;&#x4E8E;&#x7A7A;&#x6D1E;&#x5377;&#x79EF;&#x7684;<strong>&#x8BA1;&#x7B97;&#x65B9;&#x5F0F;&#x7C7B;&#x4F3C;&#x4E8E;&#x68CB;&#x76D8;&#x683C;&#x5F0F;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x80FD;&#x4EA7;&#x751F;&#x68CB;&#x76D8;&#x683C;&#x6548;&#x5E94;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x8003;<a href="https://distill.pub/2016/deconv-checkerboard/" target="_blank" rel="noopener">&#x68CB;&#x76D8;&#x683C;&#x53EF;&#x89C6;&#x5316;</a>&#x3002;&#x5982;&#x679C;&#x81A8;&#x80C0;&#x7387;&#x592A;&#x5927;&#x5377;&#x79EF;&#x7ED3;&#x679C;&#x4E4B;&#x95F4;&#x6CA1;&#x6709;&#x76F8;&#x5173;&#x6027;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x4E22;&#x5931;&#x5C40;&#x90E8;&#x4FE1;&#x606F;&#x3002;</strong></font></p><h1 id="Group-Convolution"><a href="#Group-Convolution" class="headerlink" title="Group Convolution"></a><font size="5" color="red">Group Convolution</font></h1><p><img src="/images/Feature_extraction/ShuffleNet_V2_G.png" alt="ShuffleNet_V2"><br>&#x2003;&#x2003;<font size="3"><strong>Group Convolution(&#x5206;&#x7EC4;&#x5377;&#x79EF;)</strong>&#xFF1A;<strong>&#x4F20;&#x7EDF;&#x5377;&#x79EF;&#x662F;&#x91C7;&#x7528;&#x4E00;&#x79CD;&#x5377;&#x79EF;&#x5168;&#x8FDE;&#x63A5;&#x7684;&#x601D;&#x60F3;</strong>&#xFF0C;&#x7279;&#x5F81;&#x56FE;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x90FD;&#x7ED3;&#x5408;&#x4E86;&#x56FE;&#x50CF;&#x4E2D;&#x6240;&#x6709;&#x901A;&#x9053;&#x7684;&#x4FE1;&#x606F;&#x3002;&#x800C;&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x7279;&#x5F81;&#x56FE;&#x50CF;<strong>&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x53EA;&#x5229;&#x7528;&#x5230;&#x4E00;&#x90E8;&#x5206;&#x539F;&#x59CB;&#x56FE;&#x50CF;&#x7684;&#x901A;&#x9053;</strong>&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;<strong>&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;</strong>&#xFF0C;&#x5728;<strong>ResNeXt&#xFF0C;ShuffleNet-V2</strong>&#x7F51;&#x7EDC;&#x4E2D;&#x6709;&#x5927;&#x91CF;&#x4F7F;&#x7528;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;5x5&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(256x5x5+1)=1638656&#xFF0C;&#x800C;&#x5206;&#x6210;32&#x7EC4;&#x7684;&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(8*5x5+1)=51456&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;32&#x500D;&#xFF0C;&#x5F53;&#x7EC4;&#x6570;&#x53D8;&#x6210;&#x901A;&#x9053;&#x6570;&#x65F6;&#xFF0C;&#x5219;&#x7C7B;&#x4F3C;&#x4E8E;Depthwise Convolution&#x6DF1;&#x5EA6;&#x5377;&#x79EF;</font></p><h1 id="Deconvolution"><a href="#Deconvolution" class="headerlink" title="Deconvolution"></a><font size="5" color="red">Deconvolution</font></h1><p><img src="/images/Semantic_segmentation/deconvolution.png" alt="deconvolution"><br>&#x2003;&#x2003;<font size="3"><strong>Deconvolution(&#x53CD;&#x5377;&#x79EF;)</strong>&#xFF1A;<strong>&#x672C;&#x8D28;&#x662F;&#x5377;&#x79EF;</strong>&#xFF0C;&#x6CE8;&#x610F;<strong>&#x53CD;&#x5377;&#x79EF;&#x5E76;&#x4E0D;&#x80FD;&#x4ECE;&#x5377;&#x79EF;&#x7684;&#x7ED3;&#x679C;&#x8FD4;&#x56DE;&#x5230;&#x5377;&#x79EF;&#x524D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x53EA;&#x80FD;&#x8FD4;&#x56DE;&#x5230;&#x5377;&#x79EF;&#x524D;&#x7684;&#x5C3A;&#x5BF8;</strong>&#x3002;&#x5377;&#x79EF;&#x901A;&#x8FC7;&#x8BBE;&#x7F6E;kernel_size&#x5377;&#x79EF;&#x6838;&#x5927;&#x5C0F;&#xFF0C;strides&#x6B65;&#x957F;&#x548C;padding&#x586B;&#x5145;&#x65B9;&#x5F0F;&#x53EF;&#x4EE5;&#x5C06;&#x56FE;&#x50CF;&#x7684;&#x5206;&#x8FA8;&#x7387;&#x964D;&#x4F4E;&#xFF0C;&#x76F8;&#x53CD;&#x7684;&#x53CD;&#x5377;&#x79EF;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8BBE;&#x7F6E;kernel_size&#x5377;&#x79EF;&#x6838;&#x5927;&#x5C0F;&#xFF0C;strides&#x6B65;&#x957F;&#x548C;padding&#x586B;&#x5145;&#x65B9;&#x5F0F;<strong>&#x5148;&#x5BF9;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x586B;&#x5145;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8FDB;&#x884C;&#x5377;&#x79EF;&#x64CD;&#x4F5C;</strong>&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x56FE;&#x50CF;&#x7684;&#x5206;&#x8FA8;&#x7387;&#x589E;&#x52A0;&#x3002;<strong>&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x4E0D;&#x63A8;&#x8350;&#x7ECF;&#x5E38;&#x4F7F;&#x7528;&#xFF0C;&#x56E0;&#x4E3A;&#x5B58;&#x5728;&#x5927;&#x91CF;&#x53C2;&#x6570;&#xFF0C;&#x800C;&#x4E14;&#x53EF;&#x80FD;&#x4F1A;&#x5B58;&#x5728;&#x68CB;&#x76D8;&#x683C;&#x6548;&#x5E94;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x8003;<a href="https://distill.pub/2016/deconv-checkerboard/" target="_blank" rel="noopener">&#x68CB;&#x76D8;&#x683C;&#x53EF;&#x89C6;&#x5316;</a></strong>&#x3002;</font></p><h1 id="Squeeze-and-Excitation"><a href="#Squeeze-and-Excitation" class="headerlink" title="Squeeze-and-Excitation"></a><font size="5" color="red">Squeeze-and-Excitation</font></h1><p><img src="/images/Feature_extraction/SENet_S.png" alt="SENet"><br>&#x2003;&#x2003;<font size="3"><strong>Squeeze-and-Excitation</strong>&#xFF1A;&#x53C8;&#x79F0;&#x4E3A;<strong>&#x7279;&#x5F81;&#x91CD;&#x6807;&#x5B9A;&#x5377;&#x79EF;</strong>&#xFF0C;&#x6216;&#x8005;<strong>&#x6CE8;&#x610F;&#x529B;&#x673A;&#x5236;</strong>&#x3002;&#x5177;&#x4F53;&#x6765;&#x8BF4;&#xFF0C;&#x5C31;&#x662F;&#x901A;&#x8FC7;<strong>&#x5B66;&#x4E60;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x81EA;&#x52A8;&#x83B7;&#x53D6;&#x5230;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x7684;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;</strong>&#xFF0C;&#x7136;&#x540E;&#x4F9D;&#x7167;&#x8FD9;&#x4E2A;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;&#x53BB;<strong>&#x63D0;&#x5347;&#x6709;&#x7528;&#x7684;&#x7279;&#x5F81;&#x5E76;&#x6291;&#x5236;&#x5BF9;&#x5F53;&#x524D;&#x4EFB;&#x52A1;&#x7528;&#x5904;&#x4E0D;&#x5927;&#x7684;&#x7279;&#x5F81;</strong>,&#x5728;<strong>SENet&#xFF0C;MobileNet-V3&#xFF0C;EfficientNet</strong>&#x7F51;&#x7EDC;&#x4E2D;&#x6709;&#x5927;&#x91CF;&#x4F7F;&#x7528;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x9996;&#x5148;&#x662F; <strong>Squeeze&#x64CD;&#x4F5C;</strong>&#xFF0C;&#x5148;<strong>&#x8FDB;&#x884C;&#x5168;&#x5C40;&#x6C60;&#x5316;&#xFF0C;&#x5177;&#x6709;&#x5168;&#x5C40;&#x7684;&#x611F;&#x53D7;&#x91CE;</strong>&#xFF0C;&#x5E76;&#x4E14;&#x8F93;&#x51FA;&#x7684;&#x7EF4;&#x5EA6;&#x548C;&#x8F93;&#x5165;&#x7684;&#x7279;&#x5F81;&#x901A;&#x9053;&#x6570;&#x76F8;&#x5339;&#x914D;&#xFF0C;&#x5B83;&#x8868;&#x5F81;&#x7740;&#x5728;&#x7279;&#x5F81;&#x901A;&#x9053;&#x4E0A;&#x54CD;&#x5E94;&#x7684;&#x5168;&#x5C40;&#x5206;&#x5E03;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x7136;&#x540E;&#x662F;<strong>Excitation&#x64CD;&#x4F5C;</strong>&#xFF0C;<strong>&#x901A;&#x8FC7;&#x5168;&#x8FDE;&#x63A5;&#x5C42;&#x4E3A;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x751F;&#x6210;&#x6743;&#x91CD;&#xFF0C;&#x5EFA;&#x7ACB;&#x901A;&#x9053;&#x95F4;&#x7684;&#x76F8;&#x5173;&#x6027;</strong>&#xFF0C;<strong>&#x8F93;&#x51FA;&#x7684;&#x6743;&#x91CD;&#x770B;&#x505A;&#x662F;&#x8FDB;&#x8FC7;&#x7279;&#x5F81;&#x9009;&#x62E9;&#x540E;&#x7684;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x7684;&#x91CD;&#x8981;&#x6027;</strong>&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;<strong>&#x4E58;&#x6CD5;&#x9010;&#x901A;&#x9053;&#x52A0;&#x6743;&#x5230;&#x5148;&#x524D;&#x7684;&#x7279;&#x5F81;&#x4E0A;</strong>&#xFF0C;&#x5B8C;&#x6210;&#x5728;&#x901A;&#x9053;&#x7EF4;&#x5EA6;&#x4E0A;&#x7684;&#x5BF9;&#x539F;&#x59CB;&#x7279;&#x5F81;&#x7684;&#x91CD;&#x6807;&#x5B9A;&#x3002;</font></p><h1 id="&#x5C0F;&#x7ED3;"><a href="#&#x5C0F;&#x7ED3;" class="headerlink" title="&#x5C0F;&#x7ED3;"></a><font size="5" color="red">&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x662F;CNN&#x7684;&#x6838;&#x5FC3;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x5B66;&#x4E60;&#x65F6;&#x5E38;&#x5E38;&#x4F1A;&#x548C;&#x5B83;&#x4EEC;&#x6253;&#x4EA4;&#x9053;&#xFF0C;&#x56E0;&#x6B64;&#x7CFB;&#x7EDF;&#x7684;&#x5B66;&#x4E60;&#x5404;&#x79CD;&#x5377;&#x79EF;&#x7684;&#x4F18;&#x7F3A;&#x70B9;&#x4EE5;&#x53CA;&#x5229;&#x7528;&#x573A;&#x666F;&#xFF0C;&#x5BF9;&#x4ECA;&#x540E;&#x7684;&#x5B66;&#x4E60;&#x5DE5;&#x4F5C;&#x662F;&#x975E;&#x5E38;&#x6709;&#x5E2E;&#x52A9;&#x7684;&#xFF0C;&#x5E0C;&#x671B;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x90FD;&#x53EF;&#x4EE5;&#x5B66;&#x4E60;&#x548C;&#x638C;&#x63E1;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Convolution&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="常用技巧" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>各种激活函数黑科技</title>
    <link href="https://USTCcoder.github.io/2020/05/02/deep%20learning%20activation/"/>
    <id>https://USTCcoder.github.io/2020/05/02/deep learning activation/</id>
    <published>2020-05-02T02:48:16.000Z</published>
    <updated>2020-05-09T09:27:57.921Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">Activation</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>Activation(&#x6FC0;&#x6D3B;&#x51FD;&#x6570;)</strong>:&#x5728;&#x591A;&#x5C42;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4E2D;&#xFF0C;&#x4E0A;&#x5C42;&#x8282;&#x70B9;&#x7684;&#x8F93;&#x51FA;&#x548C;&#x4E0B;&#x5C42;&#x8282;&#x70B9;&#x7684;&#x8F93;&#x5165;&#x4E4B;&#x95F4;&#x5177;&#x6709;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x5173;&#x7CFB;&#xFF0C;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x79F0;&#x4E3A;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x3002;&#x5982;&#x679C;&#x4E0D;&#x7528;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x6BCF;&#x4E00;&#x5C42;&#x8282;&#x70B9;&#x7684;&#x8F93;&#x5165;&#x90FD;&#x662F;&#x4E0A;&#x5C42;&#x8F93;&#x51FA;&#x7684;&#x7EBF;&#x6027;&#x51FD;&#x6570;&#xFF0C;&#x5F88;&#x5BB9;&#x6613;&#x9A8C;&#x8BC1;&#xFF0C;&#x65E0;&#x8BBA;&#x4F60;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x6709;&#x591A;&#x5C11;&#x5C42;&#xFF0C;&#x8F93;&#x51FA;&#x90FD;&#x662F;&#x8F93;&#x5165;&#x7684;&#x7EBF;&#x6027;&#x7EC4;&#x5408;&#xFF0C;&#x4E0E;&#x6CA1;&#x6709;&#x9690;&#x85CF;&#x5C42;&#x6548;&#x679C;&#x76F8;&#x5F53;&#xFF0C;&#x8FD9;&#x6837;&#x4F1A;&#x5BFC;&#x81F4;&#x7F51;&#x7EDC;&#x7684;&#x903C;&#x8FD1;&#x80FD;&#x529B;&#x5927;&#x5927;&#x964D;&#x4F4E;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x5F15;&#x5165;&#x975E;&#x7EBF;&#x6027;&#x51FD;&#x6570;&#x4F5C;&#x4E3A;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x63D0;&#x9AD8;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8868;&#x8FBE;&#x80FD;&#x529B;&#xFF0C;&#x53EF;&#x4EE5;&#x903C;&#x8FD1;&#x4EFB;&#x610F;&#x51FD;&#x6570;&#xFF0C;&#x4E0D;&#x518D;&#x662F;&#x8F93;&#x5165;&#x7684;&#x7EBF;&#x6027;&#x7EC4;&#x5408;&#x3002;<br><a id="more"></a></p><p><img src="/images/deep_learning/activation.png" alt="activation"></p><h1 id="Sigmoid&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"><a href="#Sigmoid&#x6FC0;&#x6D3B;&#x51FD;&#x6570;" class="headerlink" title="Sigmoid&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"></a><font size="5" color="red">Sigmoid&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</font></h1><p>$$ f(z) = \frac{1}{1+e^{-z}} $$<br><img src="/images/deep_learning/sigmoid.png" alt="sigmoid"></p><h1 id="tanh&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"><a href="#tanh&#x6FC0;&#x6D3B;&#x51FD;&#x6570;" class="headerlink" title="tanh&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"></a><font size="5" color="red">tanh&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</font></h1><p>$$ f(x) = \frac{e^{x}-e^{-x}}{e^{x}+e^{-x}} $$<br><img src="/images/deep_learning/tanh.png" alt="tanh"></p><h1 id="ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"><a href="#ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;" class="headerlink" title="ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"></a><font size="5" color="red">ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</font></h1><p>$$ f(x) = \max(0, x) $$<br><img src="/images/deep_learning/relu.png" alt="relu"></p><h1 id="Leaky-ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"><a href="#Leaky-ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;" class="headerlink" title="Leaky-ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"></a><font size="5" color="red">Leaky-ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</font></h1><p>$$ f(x) = \max(\alpha x, x), \alpha=0.01 $$<br><img src="/images/deep_learning/leaky_relu.png" alt="leaky_relu"></p><h1 id="ReLU6&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"><a href="#ReLU6&#x6FC0;&#x6D3B;&#x51FD;&#x6570;" class="headerlink" title="ReLU6&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"></a><font size="5" color="red">ReLU6&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</font></h1><p>$$ f(x) = \min(6, \max(0, x)) $$<br><img src="/images/deep_learning/relu6.png" alt="relu6"></p><h1 id="ELU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"><a href="#ELU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;" class="headerlink" title="ELU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"></a><font size="5" color="red">ELU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</font></h1><p>$$ f(x) = \begin{cases}  x &amp;  x &gt; 0 \\ \alpha(e^{x} - 1) &amp; x \le 0 \end{cases}, \alpha=1 $$<br><img src="/images/deep_learning/elu.png" alt="elu"></p><h1 id="SELU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"><a href="#SELU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;" class="headerlink" title="SELU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"></a><font size="5" color="red">SELU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</font></h1><p>$$ f(x) = \lambda \begin{cases}  x &amp;  x &gt; 0 \\ \alpha(e^{x} - 1) &amp; x \le 0 \end{cases}$$<br>$$ \begin{cases} \lambda=1.0507009873554804934193349852946 \\ \alpha=1.6732632423543772848170429916717 \end{cases}$$<br><img src="/images/deep_learning/selu.png" alt="selu"></p><h1 id="Swish&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"><a href="#Swish&#x6FC0;&#x6D3B;&#x51FD;&#x6570;" class="headerlink" title="Swish&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"></a><font size="5" color="red">Swish&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</font></h1><p>$$ f(x) = x * sigmoid(x) $$<br><img src="/images/deep_learning/swish.png" alt="swish"></p><h1 id="H-Swish&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"><a href="#H-Swish&#x6FC0;&#x6D3B;&#x51FD;&#x6570;" class="headerlink" title="H-Swish&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"></a><font size="5" color="red">H-Swish&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</font></h1><p>$$ f(x) = x * \frac{ReLU6(x + 3)}{6} $$<br><img src="/images/deep_learning/h_swish.png" alt="h_swish"></p><h1 id="Softmax&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"><a href="#Softmax&#x6FC0;&#x6D3B;&#x51FD;&#x6570;" class="headerlink" title="Softmax&#x6FC0;&#x6D3B;&#x51FD;&#x6570;"></a><font size="5" color="red">Softmax&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</font></h1><p>$$ \sigma_{i}(z) = \frac{e^{z_i}}{\sum_{j=1}^{m}{e^{z_j}}} $$<br><img src="/images/deep_learning/softmax.png" alt="softmax"></p><h1 id="&#x4F18;&#x7F3A;&#x70B9;&#x6BD4;&#x8F83;"><a href="#&#x4F18;&#x7F3A;&#x70B9;&#x6BD4;&#x8F83;" class="headerlink" title="&#x4F18;&#x7F3A;&#x70B9;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x4F18;&#x7F3A;&#x70B9;&#x6BD4;&#x8F83;</font></h1><p>Sigmoid&#x51FD;&#x6570;&#x4F18;&#x70B9;&#xFF1A;Sigmoid&#x51FD;&#x6570;&#x5904;&#x5904;&#x8FDE;&#x7EED;&#xFF0C;&#x5904;&#x5904;&#x53EF;&#x5BFC;&#x3002;&#x4E14;<strong>&#x80FD;&#x591F;&#x63A7;&#x5236;&#x6570;&#x503C;&#x7684;&#x5E45;&#x5EA6;</strong>&#xFF0C;&#x4E0D;&#x4F1A;&#x4EA7;&#x751F;&#x5F88;&#x5927;&#x7684;&#x53D8;&#x5316;&#xFF0C;&#x53EF;&#x4EE5;<strong>&#x4F5C;&#x4E3A;&#x4E8C;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x7684;&#x8F93;&#x51FA;</strong>&#xFF0C;&#x800C;ReLU&#x7C7B;&#x578B;&#x7684;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x5BF9;&#x5927;&#x4E8E;0&#x7684;&#x503C;&#x51E0;&#x4E4E;&#x6CA1;&#x6709;&#x7EA6;&#x675F;&#x3002;<br>Sigmoid&#x51FD;&#x6570;&#x7F3A;&#x70B9;&#xFF1A;&#x9971;&#x548C;&#x533A;&#x7684;&#x795E;&#x7ECF;&#x5143;&#x4F1A;&#x4EA7;&#x751F;<strong>&#x68AF;&#x5EA6;&#x6D88;&#x5931;</strong>&#x73B0;&#x8C61;&#xFF0C;&#x4F7F;&#x5F97;<strong>&#x5B66;&#x4E60;&#x901F;&#x5EA6;&#x5927;&#x5927;&#x4E0B;&#x964D;</strong>&#xFF0C;&#x5E76;&#x4E14;&#x6307;&#x6570;&#x51FD;&#x6570;&#x8BA1;&#x7B97;&#x8017;&#x65F6;&#x3002;<br>tanh&#x51FD;&#x6570;&#x4F18;&#x70B9;&#xFF1A;tanh&#x51FD;&#x6570;&#x548C;Sigmoid&#x7C7B;&#x4F3C;&#xFF0C;&#x4F46;&#x662F;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;<strong>tanh&#x7684;&#x5BFC;&#x6570;&#x7684;&#x503C;&#x57DF;&#x4E3A;(0, 1]&#xFF0C;&#x800C;Sigmoid&#x7684;&#x5BFC;&#x6570;&#x7684;&#x503C;&#x57DF;&#x4E3A;(0, 0.25]</strong>&#xFF0C;&#x56E0;&#x6B64;&#x76F8;&#x5F53;&#x4E8E;<strong>&#x5EF6;&#x8FDF;&#x4E86;&#x9971;&#x548C;&#x5468;&#x671F;</strong>&#x3002;<br>tanh&#x51FD;&#x6570;&#x7F3A;&#x70B9;&#xFF1A;tanh&#x51FD;&#x6570;&#x548C;Sigmoid&#x7C7B;&#x4F3C;&#xFF0C;&#x4E5F;&#x5177;&#x6709;<strong>&#x68AF;&#x5EA6;&#x6D88;&#x5931;</strong>&#x95EE;&#x9898;&#xFF0C;&#x548C;&#x6307;&#x6570;&#x8BA1;&#x7B97;&#x8017;&#x65F6;&#x95EE;&#x9898;&#x3002;<br>ReLU&#x7C7B;&#x51FD;&#x6570;&#x4F18;&#x70B9;&#xFF1A;ReLU&#x7C7B;&#x578B;&#x51FD;&#x6570;&#x4F1A;&#x4F7F;&#x4E00;&#x90E8;&#x5206;&#x795E;&#x7ECF;&#x5143;&#x4E3A;0&#x6216;&#x8005;&#x975E;&#x5E38;&#x5C0F;&#xFF0C;&#x4F7F;&#x5F97;&#x7F51;&#x7EDC;&#x5177;&#x6709;<strong>&#x7A00;&#x758F;&#x6027;</strong>&#xFF0C;<strong>&#x51CF;&#x5C11;&#x4E86;&#x53C2;&#x6570;&#x7684;&#x76F8;&#x4E92;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;</strong>&#xFF0C;<strong>&#x7F13;&#x89E3;&#x4E86;&#x8FC7;&#x62DF;&#x5408;</strong>&#xFF0C;&#x800C;&#x4E14;ReLU&#x51FD;&#x6570;&#x53CA;&#x5176;&#x5BFC;&#x6570;&#x7684;&#x8BA1;&#x7B97;&#x975E;&#x5E38;&#x7B80;&#x5355;&#x3002;<br>ReLU&#x7C7B;&#x51FD;&#x6570;&#x7F3A;&#x70B9;&#xFF1A;&#x53EF;&#x80FD;<strong>&#x5B58;&#x5728;&#x795E;&#x7ECF;&#x5143;&#x574F;&#x6B7B;</strong>&#x73B0;&#x8C61;&#xFF0C;&#x5728;x&lt;0&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x68AF;&#x5EA6;&#x4E3A;0&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x4F7F;&#x8FD9;&#x4E2A;&#x795E;&#x7ECF;&#x5143;<strong>&#x5F88;&#x96BE;&#x518D;&#x88AB;&#x6FC0;&#x6D3B;</strong>&#xFF0C;&#x4E14;ReLU&#x51FD;&#x6570;&#x4E0D;&#x80FD;&#x63A7;&#x5236;&#x53C2;&#x6570;&#x7684;&#x5E45;&#x5EA6;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x4EA7;&#x751F;<strong>&#x68AF;&#x5EA6;&#x7206;&#x70B8;</strong>&#x73B0;&#x8C61;&#x3002;<br>Swish&#x7C7B;&#x51FD;&#x6570;&#x4F18;&#x70B9;&#xFF1A;Swish&#x51FD;&#x6570;&#x662F;<strong>&#x4ECB;&#x4E8E;ReLU&#x51FD;&#x6570;&#x548C;Sigmoid&#x51FD;&#x6570;&#x4E4B;&#x95F4;&#x7684;&#x4E00;&#x79CD;&#x5E73;&#x6ED1;&#x51FD;&#x6570;</strong>&#xFF0C;<strong>&#x5177;&#x6709;&#x4E24;&#x8005;&#x7684;&#x4F18;&#x70B9;</strong>&#xFF0C;&#x4E0D;&#x4F1A;&#x50CF;Sigmoid&#x51FD;&#x6570;&#x4E00;&#x6837;&#x4EA7;&#x751F;&#x9971;&#x548C;&#x533A;&#xFF0C;&#x4E5F;&#x4E0D;&#x4F1A;&#x50CF;ReLU&#x51FD;&#x6570;&#x4E00;&#x6837;&#x5B58;&#x5728;&#x574F;&#x6B7B;&#x795E;&#x7ECF;&#x5143;&#x3002;<br>Swish&#x7C7B;&#x51FD;&#x6570;&#x7F3A;&#x70B9;&#xFF1A;Swish&#x51FD;&#x6570;&#x4E5F;<strong>&#x5177;&#x6709;&#x4E24;&#x8005;&#x7684;&#x7F3A;&#x70B9;</strong>&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;Sigmoid&#x51FD;&#x6570;&#x8BA1;&#x7B97;&#x8017;&#x65F6;&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;ReLU&#x51FD;&#x6570;&#x96BE;&#x4EE5;&#x63A7;&#x5236;&#x53C2;&#x6570;&#x5E45;&#x5EA6;&#xFF0C;&#x4F46;&#x6574;&#x4F53;&#x8868;&#x73B0;&#x8F83;&#x597D;&#x3002;<br>Softmax&#x51FD;&#x6570;&#x7279;&#x70B9;&#xFF1A;Softmax&#x51FD;&#x6570;&#x548C;&#x5176;&#x4ED6;&#x7684;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x4E0D;&#x540C;&#xFF0C;Softmax&#x4E3B;&#x8981;&#x7528;&#x4E8E;<strong>&#x591A;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;</strong>&#x4E2D;&#xFF0C;&#x5982;<strong>&#x56FE;&#x50CF;&#x5206;&#x5272;</strong>&#xFF0C;<strong>&#x76EE;&#x6807;&#x68C0;&#x6D4B;</strong>&#xFF0C;&#x9700;&#x8981;&#x5224;&#x65AD;&#x67D0;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x6216;&#x8005;&#x67D0;&#x4E00;&#x4E2A;&#x9884;&#x6D4B;&#x6846;&#x5C5E;&#x4E8E;&#x54EA;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#x3002;Softmax&#x5C06;&#x8F93;&#x5165;&#x5F52;&#x4E00;&#x5316;&#x5230;[0, 1]&#x4E4B;&#x95F4;&#xFF0C;&#x5E76;&#x4E14;&#x4FDD;&#x8BC1;&#x548C;&#x4E3A;1&#xFF0C;&#x4F7F;&#x4EBA;&#x80FD;&#x591F;&#x8054;&#x60F3;&#x5230;&#x6982;&#x7387;&#x7684;&#x6761;&#x4EF6;&#xFF0C;&#x4E5F;&#x662F;&#x5C5E;&#x4E8E;[0, 1]&#xFF0C;&#x5E76;&#x4E14;&#x548C;&#x4E3A;1&#x3002;&#x52A0;&#x4E0A;&#x6307;&#x6570;&#x7684;&#x4F5C;&#x7528;&#x662F;<strong>&#x589E;&#x52A0;&#x6837;&#x672C;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x8DDD;</strong>&#xFF0C;&#x5982;&#x679C;&#x8F93;&#x5165;&#x4E3A;90&#x4E2A;1&#x548C;1&#x4E2A;10&#xFF0C;&#x5219;&#x76F4;&#x63A5;&#x5F52;&#x4E00;&#x5316;&#x7684;&#x7ED3;&#x679C;&#x4E3A;90&#x4E2A;0.01&#x548C;1&#x4E2A;0.1&#xFF0C;&#x5982;&#x679C;10&#x662F;&#x5BF9;&#x5E94;&#x7684;&#x7C7B;&#x522B;&#xFF0C;&#x5373;&#x4F7F;&#x5DF2;&#x7ECF;&#x5206;&#x7C7B;&#x7684;&#x8F83;&#x597D;&#xFF0C;&#x4ECD;&#x7136;&#x4F1A;&#x4F7F;&#x5F97;&#x8BEF;&#x5DEE;&#x8F83;&#x5927;&#x3002;&#x52A0;&#x4E0A;&#x6307;&#x6570;&#x8FD0;&#x7B97;&#x540E;&#xFF0C;&#x5F52;&#x4E00;&#x5316;&#x7684;&#x7ED3;&#x679C;&#x4E3A;90&#x4E2A;0.000122&#xFF0C;1&#x4E2A;0.989&#xFF0C;&#x8FD9;&#x6837;&#x8BEF;&#x5DEE;&#x5C31;&#x4F1A;&#x8F83;&#x5C0F;&#xFF0C;&#x66F4;&#x52A0;&#x63A5;&#x8FD1;&#x4E8E;&#x771F;&#x5B9E;&#x7684;&#x60C5;&#x51B5;&#x3002;</p><h1 id="&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x7684;&#x9009;&#x62E9;"><a href="#&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x7684;&#x9009;&#x62E9;" class="headerlink" title="&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x7684;&#x9009;&#x62E9;"></a><font size="5" color="red">&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x7684;&#x9009;&#x62E9;</font></h1><ol><li>&#x9996;&#x5148;<strong>&#x5224;&#x65AD;&#x4EFB;&#x52A1;&#x7C7B;&#x578B;</strong>&#xFF0C;&#x662F;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x8FD8;&#x662F;&#x4F5C;&#x4E3A;&#x9690;&#x85CF;&#x5C42;&#x975E;&#x7EBF;&#x6027;&#x5355;&#x5143;&#xFF0C;&#x5982;&#x679C;&#x662F;<strong>&#x591A;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x5219;&#x8003;&#x8651;Softmax&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</strong>&#xFF0C;&#x5982;&#x679C;&#x662F;<strong>&#x4E8C;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x5219;&#x8003;&#x8651;Sigmoid&#xFF0C;tanh&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</strong>&#xFF0C;&#x5982;&#x679C;&#x662F;<strong>&#x9690;&#x85CF;&#x5C42;&#x975E;&#x7EBF;&#x6027;&#x5355;&#x5143;&#x5219;&#x8003;&#x8651;Sigmoid&#xFF0C;tanh&#xFF0C;ReLU&#xFF0C;Swish</strong>&#x7B49;&#x7B49;&#x3002;</li><li>&#x5982;&#x679C;&#x662F;&#x9690;&#x85CF;&#x5C42;&#x975E;&#x7EBF;&#x6027;&#x5355;&#x5143;&#xFF0C;<strong>&#x9996;&#x5148;&#x5C1D;&#x8BD5;ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</strong>&#xFF0C;&#x5982;&#x679C;<strong>ReLU&#x6548;&#x679C;&#x6B20;&#x4F73;&#x5219;&#x8003;&#x8651;ReLU&#x53D8;&#x79CD;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</strong>&#xFF0C;ReLU6&#xFF0C;Leaky_ReLU&#xFF0C;SELU&#xFF0C;ELU&#x7B49;&#x7B49;</li><li>&#x5982;&#x679C;&#x6548;&#x679C;&#x4E0D;&#x597D;&#xFF0C;<strong>&#x518D;&#x8003;&#x8651;Swish&#x7C7B;&#x51FD;&#x6570;&#x548C;Sigmoid&#xFF0C;tanh&#x51FD;&#x6570;</strong>&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;<strong>&#x53D1;&#x73B0;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x95EE;&#x9898;&#xFF0C;&#x5219;&#x907F;&#x514D;&#x4F7F;&#x7528;Sigmoid&#x548C;tanh&#x51FD;&#x6570;</strong>&#x3002;<br>4.&#x5982;&#x679C;&#x90FD;&#x4E0D;&#x597D;&#x7528;&#xFF0C;&#x5219;<strong>&#x8003;&#x8651;&#x662F;&#x5426;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#xFF0C;&#x8D85;&#x53C2;&#x6570;&#xFF0C;&#x635F;&#x5931;&#x51FD;&#x6570;&#x8BBE;&#x8BA1;&#x51FA;&#x73B0;&#x95EE;&#x9898;</strong>&#x3002;</li></ol><h1 id="&#x5C0F;&#x7ED3;"><a href="#&#x5C0F;&#x7ED3;" class="headerlink" title="&#x5C0F;&#x7ED3;"></a><font size="5" color="red">&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x5DE5;&#x7A0B;&#x95EE;&#x9898;&#x662F;&#x4E00;&#x7C7B;&#x975E;&#x5E38;&#x590D;&#x6742;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x5F80;&#x5F80;&#x9700;&#x8981;<strong>&#x7F51;&#x7EDC;&#x7ED3;&#x6784;</strong>&#xFF0C;<strong>&#x8D85;&#x53C2;&#x6570;</strong>&#xFF0C;<strong>&#x635F;&#x5931;&#x51FD;&#x6570;</strong>&#xFF0C;<strong>&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x76F8;&#x4E92;&#x914D;&#x5408;</strong>&#x5DE5;&#x4F5C;&#xFF0C;&#x53EF;&#x80FD;&#x67D0;&#x4E2A;&#x7ED3;&#x6784;&#x6216;&#x8005;&#x67D0;&#x4E2A;&#x53C2;&#x6570;&#x9002;&#x5408;&#x67D0;&#x4E2A;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#xFF0C;&#x800C;&#x53E6;&#x5916;&#x7684;&#x7ED3;&#x6784;&#x9002;&#x5408;&#x5176;&#x4ED6;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x3002;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5728;&#x5B9E;&#x9645;&#x7684;&#x5DE5;&#x7A0B;&#x4EFB;&#x52A1;&#x4E2D;&#x6162;&#x6162;&#x6478;&#x7D22;&#xFF0C;&#x591A;&#x591A;&#x5C1D;&#x8BD5;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Activation&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="常用技巧" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>目标检测数据集</title>
    <link href="https://USTCcoder.github.io/2020/04/30/Object%20detection%20Dataset/"/>
    <id>https://USTCcoder.github.io/2020/04/30/Object detection Dataset/</id>
    <published>2020-04-30T06:05:07.000Z</published>
    <updated>2020-05-09T09:17:48.193Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">Data Set</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>&#x76EE;&#x6807;&#x68C0;&#x6D4B;:</strong>&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x7684;<strong>&#x57FA;&#x7840;&#x4EFB;&#x52A1;</strong>&#xFF0C;&#x8FD1;&#x51E0;&#x5E74;&#x6765;&#xFF0C;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x7B97;&#x6CD5;&#x53D6;&#x5F97;&#x4E86;&#x5F88;&#x5927;&#x7684;&#x7A81;&#x7834;&#xFF0C;&#x4E3B;&#x6D41;&#x8D8B;&#x52BF;&#x662F;&#x4E24;&#x79CD;&#xFF0C;&#x4E00;&#x79CD;&#x662F;<strong>one-stage</strong>&#x7B97;&#x6CD5;&#xFF0C;&#x4EE5;<strong>SSD&#xFF0C;YOLO</strong>&#x4E3A;&#x4EE3;&#x8868;&#xFF0C;&#x53E6;&#x4E00;&#x7C7B;&#x662F;<strong>two-stage</strong>&#x7B97;&#x6CD5;&#xFF0C;&#x4EE5;<strong>Faster R-CNN</strong>&#x4E3A;&#x4EE3;&#x8868;&#x3002;&#x5E7F;&#x6CDB;&#x5E94;&#x7528;&#x4E8E;&#x751F;&#x6D3B;&#x4E4B;&#x4E2D;&#xFF0C;&#x5305;&#x62EC;<strong>&#x4EBA;&#x8138;&#x68C0;&#x6D4B;</strong>&#xFF0C;<strong>&#x81EA;&#x52A8;&#x9A7E;&#x9A76;</strong>&#x7B49;&#x7B49;&#x65B9;&#x9762;&#xFF0C;&#x5728;&#x8FD1;&#x671F;&#x7684;&#x75AB;&#x60C5;&#x4E4B;&#x4E2D;&#x4E5F;&#x53D1;&#x6325;&#x4E86;&#x5DE8;&#x5927;&#x7684;&#x4F5C;&#x7528;&#xFF0C;&#x5728;&#x706B;&#x8F66;&#x7AD9;&#xFF0C;&#x5730;&#x94C1;&#x53E3;&#x90FD;&#x5E94;&#x7528;&#x5230;&#x4E86;&#x4EBA;&#x8138;&#x68C0;&#x6D4B;&#x65B9;&#x6CD5;&#xFF0C;&#x68C0;&#x6D4B;&#x5230;&#x4EBA;&#x8138;&#x540E;&#x5229;&#x7528;&#x7EA2;&#x5916;&#x5BF9;&#x4F53;&#x6E29;&#x8FDB;&#x884C;&#x6D4B;&#x91CF;&#xFF0C;&#x56E0;&#x6B64;&#x80FD;<strong>&#x624B;&#x52A8;&#x642D;&#x5EFA;&#x4E00;&#x4E9B;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x7F51;&#x7EDC;</strong>&#xFF0C;&#x5BF9;&#x4ECA;&#x540E;&#x7684;&#x5B66;&#x4E60;&#x5DE5;&#x4F5C;&#x90FD;&#x662F;&#x975E;&#x5E38;&#x6709;&#x5E2E;&#x52A9;&#x7684;&#x3002;<br><a id="more"></a></p><p><img src="/images/Object_detection/Dataset.png" alt="Dataset"></p><h1 id="&#x4E00;&#x6B65;&#x6CD5;&#x548C;&#x4E24;&#x6B65;&#x6CD5;&#x7684;&#x533A;&#x522B;"><a href="#&#x4E00;&#x6B65;&#x6CD5;&#x548C;&#x4E24;&#x6B65;&#x6CD5;&#x7684;&#x533A;&#x522B;" class="headerlink" title="&#x4E00;&#x6B65;&#x6CD5;&#x548C;&#x4E24;&#x6B65;&#x6CD5;&#x7684;&#x533A;&#x522B;"></a><font size="5" color="red">&#x4E00;&#x6B65;&#x6CD5;&#x548C;&#x4E24;&#x6B65;&#x6CD5;&#x7684;&#x533A;&#x522B;</font></h1><p>&#x4E00;&#x6B65;&#x6CD5;&#xFF1A;&#x5728;&#x539F;&#x56FE;&#x50CF;&#x4E0A;&#x9762;&#x94FA;&#x8BBE;&#x5927;&#x91CF;&#x951A;&#x70B9;&#x6846;(anchor)&#xFF0C;&#x7136;&#x540E;&#x5728;<strong>&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7684;&#x65F6;&#x5019;&#x5BF9;&#x951A;&#x70B9;&#x6846;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x56DE;&#x5F52;&#x548C;&#x5206;&#x7C7B;</strong>&#xFF0C;&#x5F97;&#x5230;&#x6700;&#x7EC8;&#x7684;&#x68C0;&#x6D4B;&#x7ED3;&#x679C;<br>&#x4E24;&#x6B65;&#x6CD5;&#xFF1A;&#x5728;&#x539F;&#x56FE;&#x50CF;&#x4E0A;&#x9762;&#x94FA;&#x8BBE;&#x5927;&#x91CF;&#x951A;&#x70B9;&#x6846;(anchor)&#xFF0C;&#x7136;&#x540E;<strong>&#x5148;&#x5229;&#x7528;&#x4E00;&#x4E2A;&#x7F51;&#x7EDC;&#x5BF9;&#x951A;&#x70B9;&#x6846;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x5206;&#x7C7B;&#x548C;&#x56DE;&#x5F52;(&#x7C97;&#x7B5B;&#x9009;)</strong>&#xFF0C;&#x5F97;&#x5230;<strong>&#x5EFA;&#x8BAE;&#x6846;</strong>&#xFF0C;&#x7136;&#x540E;&#x518D;<strong>&#x5BF9;&#x5EFA;&#x8BAE;&#x6846;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x56DE;&#x5F52;&#x548C;&#x5206;&#x7C7B;</strong>&#x5F97;&#x5230;&#x6700;&#x7EC8;&#x7684;&#x68C0;&#x6D4B;&#x7ED3;&#x679C;&#x3002;<br>&#x4F18;&#x7F3A;&#x70B9;&#xFF1A;&#x7ECF;&#x8FC7;&#x4E0A;&#x9762;&#x7684;&#x63CF;&#x8FF0;&#xFF0C;&#x5BB9;&#x6613;&#x770B;&#x51FA;&#xFF0C;&#x4E00;&#x6B65;&#x6CD5;&#x7684;&#x4F18;&#x70B9;&#x662F;<strong>&#x6548;&#x7387;&#x9AD8;</strong>&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x4E00;&#x6B65;&#x5373;&#x53EF;&#x5B8C;&#x6210;&#x6700;&#x7EC8;&#x68C0;&#x6D4B;&#xFF0C;&#x6CA1;&#x6709;&#x8017;&#x65F6;&#x7684;&#x7B2C;&#x4E8C;&#x6B65;&#xFF0C;&#x4F46;&#x662F;&#x7F3A;&#x70B9;&#x4E5F;&#x5F88;&#x660E;&#x663E;&#xFF0C;&#x56E0;&#x4E3A;&#x6CA1;&#x6709;&#x7C97;&#x7B5B;&#x9009;&#xFF0C;&#x5BFC;&#x81F4;<strong>&#x6B63;&#x8D1F;&#x6837;&#x672C;&#x6781;&#x7AEF;&#x4E0D;&#x5E73;&#x8861;</strong>&#xFF0C;&#x56E0;&#x6B64;<strong>&#x68C0;&#x6D4B;&#x7CBE;&#x5EA6;&#x7565;&#x4F4E;&#x4E8E;&#x4E24;&#x6B65;&#x6CD5;</strong>&#x3002;&#x4E24;&#x6B65;&#x6CD5;&#x867D;&#x7136;<strong>&#x68C0;&#x6D4B;&#x901F;&#x5EA6;&#x6162;</strong>&#xFF0C;&#x4F46;&#x662F;&#x68C0;&#x6D4B;<strong>&#x7CBE;&#x5EA6;&#x7565;&#x9AD8;&#x4E8E;&#x4E00;&#x6B65;&#x6CD5;</strong>&#x3002;&#x968F;&#x7740;&#x7F51;&#x7EDC;&#x7684;&#x53D1;&#x5C55;&#xFF0C;&#x786C;&#x4EF6;&#x6C34;&#x5E73;&#x7684;&#x63D0;&#x9AD8;&#xFF0C;&#x4E24;&#x7C7B;&#x7B97;&#x6CD5;&#x90FD;&#x5728;&#x4E0D;&#x65AD;&#x7684;&#x8FDB;&#x6B65;&#x4E4B;&#x4E2D;&#xFF0C;&#x901F;&#x5EA6;&#x548C;&#x7CBE;&#x5EA6;&#x90FD;&#x53EF;&#x4EE5;&#x53D6;&#x5F97;&#x8F83;&#x597D;&#x7684;&#x7ED3;&#x679C;&#x3002;</p><h1 id="&#x6570;&#x636E;&#x96C6;&#x4EE5;&#x53CA;IOU&#xFF0C;NMS&#x4ECB;&#x7ECD;"><a href="#&#x6570;&#x636E;&#x96C6;&#x4EE5;&#x53CA;IOU&#xFF0C;NMS&#x4ECB;&#x7ECD;" class="headerlink" title="&#x6570;&#x636E;&#x96C6;&#x4EE5;&#x53CA;IOU&#xFF0C;NMS&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x6570;&#x636E;&#x96C6;&#x4EE5;&#x53CA;IOU&#xFF0C;NMS&#x4ECB;&#x7ECD;</font></h1><p><strong>&#x6570;&#x636E;&#x96C6;</strong>&#xFF1A;&#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#x6A21;&#x578B;&#x8C03;&#x8BD5;&#x7684;&#x65B9;&#x4FBF;&#xFF0C;&#x6211;&#x7684;&#x535A;&#x5BA2;&#x4E2D;&#x4ECB;&#x7ECD;&#x7684;&#x6570;&#x636E;&#x96C6;&#x662F;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x7684;Shape&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x53EA;&#x6709;1000&#x4E2A;&#x8BAD;&#x7EC3;&#x6837;&#x672C;&#xFF0C;&#x4E3A;&#x4E86;&#x52A0;&#x5FEB;&#x8BAD;&#x7EC3;&#x901F;&#x5EA6;&#xFF0C;&#x6570;&#x636E;&#x96C6;&#x7684;&#x5927;&#x5C0F;&#x6211;&#x4E5F;&#x8C03;&#x6574;&#x4E3A;128x128&#xFF0C;&#x8FD9;&#x4E2A;&#x6570;&#x636E;&#x96C6;&#x53EA;&#x6709;&#x4E09;&#x7C7B;&#x7269;&#x4F53;&#xFF0C;&#x5206;&#x522B;&#x662F;&#x5706;&#x5F62;&#xFF0C;&#x4E09;&#x89D2;&#x5F62;&#x548C;&#x6B63;&#x65B9;&#x5F62;&#xFF0C;&#x56FE;&#x50CF;&#x6570;&#x636E;&#x4E3A;jpg&#x6587;&#x4EF6;&#xFF0C;&#x6807;&#x7B7E;&#x6570;&#x636E;&#x4E3A;xml&#x6587;&#x4EF6;&#xFF0C;&#x5176;&#x4E2D;&#x8BB0;&#x5F55;&#x4E86;&#x7269;&#x4F53;&#x51FA;&#x73B0;&#x7684;&#x5DE6;&#x4E0A;&#x89D2;&#x548C;&#x53F3;&#x4E0B;&#x89D2;&#x5750;&#x6807;&#x3002;<br><strong>IOU(Intersection Over Union&#xFF0C;&#x4EA4;&#x5E76;&#x6BD4;)</strong>&#xFF1A;&#x7528;&#x4E8E;<strong>&#x8BC4;&#x4F30;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x7B97;&#x6CD5;&#x6027;&#x80FD;&#x7684;&#x6307;&#x6807;&#x662F;&#x5E73;&#x5747;IOU</strong>&#xFF0C;&#x4EA4;&#x5E76;&#x6BD4;&#x4E5F;&#x975E;&#x5E38;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x7B97;&#x6CD5;&#x7684;&#x7ED3;&#x679C;&#x4E0E;&#x771F;&#x5B9E;&#x7269;&#x4F53;&#x8FDB;&#x884C;<strong>&#x4EA4;&#x8FD0;&#x7B97;&#x7684;&#x7ED3;&#x679C;&#x9664;&#x4EE5;&#x8FDB;&#x884C;&#x5E76;&#x8FD0;&#x7B97;&#x7684;&#x7ED3;&#x679C;</strong>&#x3002;&#x901A;&#x8FC7;&#x4E0B;&#x56FE;&#x53EF;&#x4EE5;&#x76F4;&#x89C2;&#x7684;&#x770B;&#x51FA;IOU&#x7684;&#x8BA1;&#x7B97;&#x65B9;&#x6CD5;&#x3002;<br><img src="/images/Semantic_segmentation/Dataset_I.png" alt="IOU"><br><strong>NMS(Non-Maximum Suppression&#xFF0C;&#x975E;&#x6781;&#x5927;&#x503C;&#x6291;&#x5236;)</strong>&#xFF1A;&#x7B80;&#x5355;&#x5730;&#x8BF4;&#xFF0C;<strong>&#x4E0D;&#x662F;&#x6700;&#x5927;&#x7684;&#x6211;&#x4E0D;&#x8981;</strong>&#xFF0C;&#x5728;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x4E2D;&#xFF0C;&#x5F80;&#x5F80;&#x56FE;&#x50CF;&#x4E0A;&#x5B58;&#x5728;&#x5927;&#x91CF;&#x5148;&#x9A8C;&#x6846;&#xFF0C;&#x4F1A;&#x5BFC;&#x81F4;&#x5F88;&#x591A;&#x9644;&#x8FD1;&#x7684;&#x6846;&#x90FD;&#x4F1A;&#x9884;&#x6D4B;&#x51FA;&#x540C;&#x4E00;&#x4E2A;&#x7269;&#x4F53;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;<strong>&#x53EA;&#x4FDD;&#x7559;&#x6700;&#x5927;&#x7684;&#x4E00;&#x4E2A;&#x9884;&#x6D4B;&#x7ED3;&#x679C;</strong>&#xFF0C;&#x8FD9;&#x5C31;&#x662F;&#x975E;&#x6781;&#x5927;&#x503C;&#x6291;&#x5236;&#x3002;<br>&#x6B65;&#x9AA4;&#xFF1A;<br>(1)<strong>&#x4ECE;&#x6700;&#x5927;&#x6982;&#x7387;&#x77E9;&#x5F62;&#x6846;F&#x5F00;&#x59CB;</strong>&#xFF0C;&#x5206;&#x522B;&#x5224;&#x65AD;A~E&#x4E0E;F&#x7684;IOU&#x662F;&#x5426;&#x5927;&#x4E8E;&#x67D0;&#x4E2A;&#x8BBE;&#x5B9A;&#x7684;&#x9608;&#x503C;&#xFF0C;<strong>&#x5047;&#x8BBE;B&#x3001;D&#x4E0E;F&#x7684;&#x91CD;&#x53E0;&#x5EA6;&#x8D85;&#x8FC7;&#x9608;&#x503C;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x6254;&#x6389;B&#x3001;D</strong>&#xFF1B;&#x5E76;<strong>&#x6807;&#x8BB0;&#x7B2C;&#x4E00;&#x4E2A;&#x77E9;&#x5F62;&#x6846;F</strong>&#xFF0C;&#x662F;&#x6211;&#x4EEC;&#x4FDD;&#x7559;&#x4E0B;&#x6765;&#x7684;&#x3002;<br>(2)<strong>&#x4ECE;&#x5269;&#x4E0B;&#x7684;&#x77E9;&#x5F62;&#x6846;A&#x3001;C&#x3001;E&#x4E2D;&#xFF0C;&#x9009;&#x62E9;&#x6982;&#x7387;&#x6700;&#x5927;&#x7684;E&#xFF0C;&#x7136;&#x540E;&#x5224;&#x65AD;E&#x4E0E;A&#x3001;C&#x7684;&#x91CD;&#x53E0;&#x5EA6;&#xFF0C;&#x91CD;&#x53E0;&#x5EA6;&#x5927;&#x4E8E;&#x4E00;&#x5B9A;&#x7684;&#x9608;&#x503C;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x6254;&#x6389;&#xFF1B;&#x5E76;&#x6807;&#x8BB0;E&#x662F;&#x6211;&#x4EEC;&#x4FDD;&#x7559;&#x4E0B;&#x6765;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x77E9;&#x5F62;&#x6846;</strong>&#x3002;<br>(3)<strong>&#x91CD;&#x590D;&#x6B65;&#x9AA4;(2)&#xFF0C;&#x76F4;&#x5230;&#x6240;&#x6709;&#x7684;&#x6846;&#x90FD;&#x88AB;&#x629B;&#x5F03;&#x6216;&#x8005;&#x4FDD;&#x7559;</strong>&#x3002;<br><img src="/images/Object_detection/Dataset_N.png" alt="NMS"></p><h1 id="&#x4E00;&#x4E9B;&#x8BF4;&#x660E;"><a href="#&#x4E00;&#x4E9B;&#x8BF4;&#x660E;" class="headerlink" title="&#x4E00;&#x4E9B;&#x8BF4;&#x660E;"></a><font size="5" color="red">&#x4E00;&#x4E9B;&#x8BF4;&#x660E;</font></h1><ol><li>&#x5728;&#x5B66;&#x4E60;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x53EF;&#x80FD;&#x4F1A;&#x9047;&#x5230;&#x4E00;&#x4E9B;&#x4EE3;&#x7801;&#x4E0A;&#x7684;&#x56F0;&#x96BE;&#xFF0C;&#x5982;<strong>tensorflow</strong>&#xFF0C;<strong>numpy</strong>&#xFF0C;<strong>opencv</strong>&#x7684;&#x7528;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x6211;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x6846;&#x67B6;&#x548C;Python&#x5E38;&#x7528;&#x5E93;&#x76F8;&#x5173;&#x6587;&#x7AE0;&#xFF0C;&#x91CC;&#x9762;&#x4F1A;&#x6709;&#x4E00;&#x4E9B;&#x7B80;&#x5355;&#x7684;&#x4ECB;&#x7ECD;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x5B66;&#x4E60;&#xFF0C;&#x6700;&#x597D;&#x662F;&#x624B;&#x52A8;&#x6572;&#x4E00;&#x6572;&#xFF0C;&#x770B;&#x4E00;&#x770B;&#x3002;</li><li>&#x56E0;&#x4E3A;&#x8FD9;&#x4E2A;&#x535A;&#x5BA2;&#x662F;&#x5BF9;&#x5B66;&#x4E60;&#x7684;&#x4E00;&#x4E9B;&#x603B;&#x7ED3;&#x548C;&#x8BB0;&#x5F55;&#xFF0C;&#x610F;&#x5728;&#x548C;&#x5B66;&#x4E60;&#x8005;&#x63A2;&#x8BA8;&#x548C;&#x4EA4;&#x6D41;&#xFF0C;&#x5E76;&#x4E14;&#x7ED9;&#x51C6;&#x5907;&#x5165;&#x95E8;&#x7684;&#x540C;&#x5B66;&#x4E00;&#x4E9B;&#x624B;&#x628A;&#x624B;&#x7684;&#x6559;&#x5B66;&#xFF0C;&#x56E0;&#x6B64;&#x5173;&#x4E8E;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x7684;&#x7B97;&#x6CD5;&#x53C2;&#x6570;&#x8BBE;&#x8BA1;&#xFF0C;&#x6211;&#x90FD;&#x662F;&#x81EA;&#x5DF1;&#x5C1D;&#x8BD5;&#x7684;&#xFF0C;&#x4E0D;&#x662F;&#x9488;&#x5BF9;&#x4E8E;&#x8FD9;&#x4E2A;&#x6570;&#x636E;&#x96C6;&#x6700;&#x4F18;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x5927;&#x5BB6;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x7684;&#x5B9E;&#x9645;&#x9700;&#x8981;&#x4FEE;&#x6539;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x3002;</li><li>&#x5B9E;&#x9645;&#x7684;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x5E38;&#x5E38;&#x8FD8;&#x9700;&#x8981;&#x5BF9;&#x6570;&#x636E;&#x96C6;&#x8FDB;&#x884C;<strong>&#x5927;&#x5C0F;&#x8C03;&#x6574;&#x548C;&#x589E;&#x5F3A;</strong>&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x4E3A;&#x4E86;&#x7B80;&#x5355;&#x8D77;&#x89C1;&#xFF0C;&#x6CA1;&#x6709;&#x8FDB;&#x884C;&#x590D;&#x6742;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5E94;&#x7528;&#x4E2D;&#x8981;&#x8BB0;&#x5F97;&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x7684;&#x9700;&#x8981;&#xFF0C;&#x5BF9;&#x56FE;&#x50CF;&#x8FDB;&#x884C;<strong>resize&#x6216;&#x8005;padding</strong>&#xFF0C;&#x7136;&#x540E;<strong>&#x65CB;&#x8F6C;</strong>&#xFF0C;<strong>&#x5BF9;&#x6BD4;&#x5EA6;&#x589E;&#x5F3A;</strong>&#xFF0C;<strong>&#x4EFF;&#x5C04;&#x8FD0;&#x7B97;</strong>&#x7B49;&#x7B49;&#x64CD;&#x4F5C;&#xFF0C;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x9C81;&#x68D2;&#x6027;&#xFF0C;&#x5E76;&#x4E14;&#x5B9E;&#x9645;&#x4E2D;&#x7684;&#x56FE;&#x50CF;&#x4E0D;&#x4E00;&#x5B9A;&#x6309;&#x7167;&#x987A;&#x5E8F;&#x547D;&#x540D;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x5E94;&#x7528;&#x4E2D;&#x4E5F;&#x8981;&#x6CE8;&#x610F;&#x56FE;&#x50CF;&#x8BFB;&#x53D6;&#x7684;&#x6587;&#x4EF6;&#x540D;&#x3002;</li><li>&#x4E3A;&#x4E86;&#x8BA9;&#x5B66;&#x4E60;&#x8005;&#x770B;&#x7684;&#x65B9;&#x4FBF;&#x548C;&#x6E05;&#x6670;&#xFF0C;&#x6211;&#x6CA1;&#x6709;&#x4F7F;&#x7528;&#x591A;&#x4E2A;&#x6587;&#x4EF6;&#x5BF9;&#x7A0B;&#x5E8F;&#x8FDB;&#x884C;&#x5C01;&#x88C5;&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x5728;&#x521A;&#x5F00;&#x59CB;&#x5B66;&#x4E60;&#x6A21;&#x578B;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x67E5;&#x770B;GitHub&#x4EE3;&#x7801;&#xFF0C;&#x4E00;&#x4E2A;&#x6A21;&#x578B;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x597D;&#x51E0;&#x4E2A;&#x6587;&#x4EF6;&#x5939;&#xFF0C;&#x6BCF;&#x4E2A;&#x6587;&#x4EF6;&#x5939;&#x91CC;&#x9762;&#x53C8;&#x6709;&#x5F88;&#x591A;&#x7684;&#x4EE3;&#x7801;&#x6587;&#x4EF6;&#xFF0C;&#x5176;&#x4E2D;&#x5F88;&#x591A;&#x6587;&#x4EF6;&#x4E92;&#x76F8;&#x8C03;&#x7528;&#x3002;&#x867D;&#x7136;&#x8FD9;&#x6837;&#x7684;&#x5DE5;&#x7A0B;&#x9879;&#x76EE;&#x662F;&#x975E;&#x5E38;&#x597D;&#x7BA1;&#x7406;&#x548C;&#x8FD0;&#x884C;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x7ED9;&#x521D;&#x5B66;&#x8005;&#x4E00;&#x79CD;&#x4E08;&#x4E8C;&#x548C;&#x5C1A;&#x6478;&#x4E0D;&#x7740;&#x5934;&#x8111;&#x7684;&#x611F;&#x89C9;&#xFF0C;&#x5BF9;&#x6B64;&#x6211;&#x6DF1;&#x6709;&#x4F53;&#x4F1A;&#x3002;&#x6240;&#x4EE5;&#x6211;&#x5C31;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;.py&#x6587;&#x4EF6;&#x6765;&#x5C01;&#x88C5;&#xFF0C;&#x56E0;&#x6B64;&#x4EE3;&#x7801;&#x53EF;&#x80FD;&#x4F1A;&#x6709;&#x51E0;&#x767E;&#x884C;&#xFF0C;&#x4F46;&#x662F;&#x5176;&#x4E2D;&#x7684;&#x5404;&#x4E2A;&#x51FD;&#x6570;&#x548C;&#x7C7B;&#x90FD;&#x6709;&#x81EA;&#x5DF1;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x53EF;&#x4EE5;&#x4FDD;&#x8BC1;&#x5B66;&#x4E60;&#x8005;&#x4E0D;&#x4F1A;&#x88AB;&#x7EB8;&#x8001;&#x864E;&#x5413;&#x4F4F;&#x3002;</li><li>&#x5728;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x5B66;&#x4E60;&#x4E2D;&#xFF0C;&#x6211;&#x4F1A;&#x5217;&#x4E3E;&#x51FA;&#x4E00;&#x4E9B;&#x7ECF;&#x5178;&#x7684;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x6A21;&#x578B;&#xFF0C;&#x56E0;&#x4E3A;&#x6A21;&#x578B;&#x592A;&#x591A;&#xFF0C;&#x5E76;&#x4E14;&#x4ECD;&#x5728;&#x4E0D;&#x65AD;&#x7684;&#x66F4;&#x65B0;&#x8FDB;&#x6B65;&#x4E4B;&#x4E2D;&#xFF0C;&#x6240;&#x4EE5;&#x5927;&#x5BB6;&#x53EF;&#x4EE5;&#x8054;&#x7CFB;&#x6211;&#xFF0C;&#x548C;&#x6211;&#x8FDB;&#x884C;&#x6C9F;&#x901A;&#x548C;&#x4EA4;&#x6D41;&#xFF0C;&#x6216;&#x8005;&#x63A8;&#x8350;&#x7ED9;&#x6211;&#x4E00;&#x4E9B;&#x4F18;&#x79C0;&#x7684;&#x6A21;&#x578B;&#x3002;</li><li>&#x5173;&#x4E8E;&#x95EE;&#x9898;&#x7684;&#x4EA4;&#x6D41;&#xFF0C;&#x56FE;&#x50CF;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x9700;&#x8981;&#x7684;&#x540C;&#x5B66;&#x53EF;&#x4EE5;&#x5230;&#x4E3B;&#x9875;&#x67E5;&#x770B;&#x6211;&#x7684;QQ&#x6216;&#x8005;&#x90AE;&#x7BB1;&#xFF0C;&#x6211;&#x4F1A;&#x975E;&#x5E38;&#x8363;&#x5E78;&#x7684;&#x63D0;&#x4F9B;&#x529B;&#x6240;&#x80FD;&#x53CA;&#x7684;&#x5E2E;&#x52A9;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x52A0;&#x597D;&#x53CB;&#x7684;&#x65F6;&#x5019;&#x4E00;&#x5B9A;&#x8981;&#x8BB0;&#x5F97;&#x5907;&#x6CE8;&#xFF0C;&#x4E0D;&#x7136;&#x6211;&#x53EF;&#x80FD;&#x4F1A;&#x5FFD;&#x89C6;&#x4E00;&#x4E9B;&#x7C97;&#x5FC3;&#x7684;&#x5C0F;&#x4F19;&#x4F34;&#x3002;</li></ol><h1 id="&#x5C0F;&#x7ED3;"><a href="#&#x5C0F;&#x7ED3;" class="headerlink" title="&#x5C0F;&#x7ED3;"></a><font size="5" color="red">&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x7684;<strong>&#x57FA;&#x7840;&#x4EFB;&#x52A1;</strong>&#xFF0C;&#x4E5F;&#x662F;&#x975E;&#x5E38;&#x91CD;&#x8981;&#x7684;&#x4EFB;&#x52A1;&#x4E4B;&#x4E00;&#xFF0C;&#x81EA;&#x4ECE;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7684;&#x65F6;&#x4EE3;&#x5230;&#x6765;&#xFF0C;&#x5404;&#x79CD;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x767E;&#x82B1;&#x9F50;&#x653E;&#xFF0C;&#x5F88;&#x96BE;&#x8BF4;&#x51FA;&#x6700;&#x597D;&#x7684;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x65B9;&#x6CD5;&#xFF0C;&#x53EF;&#x80FD;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x9002;&#x7528;&#x4E8E;&#x5F88;&#x591A;&#x6570;&#x636E;&#xFF0C;&#x4F46;&#x4E5F;<strong>&#x4E0D;&#x80FD;&#x8BF4;&#x660E;&#x67D0;&#x4E00;&#x4E2A;&#x7B97;&#x6CD5;&#x4E00;&#x5B9A;&#x4F18;&#x4E8E;&#x53E6;&#x4E00;&#x4E2A;&#x7B97;&#x6CD5;</strong>&#xFF0C;&#x6211;&#x4EEC;&#x8981;&#x505A;&#x7684;&#x5C31;&#x662F;&#x5C3D;&#x53EF;&#x80FD;&#x591A;&#x7684;<strong>&#x5B66;&#x4E60;&#x5404;&#x79CD;&#x5404;&#x6837;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x6A21;&#x578B;</strong>&#xFF0C;&#x7136;&#x540E;<strong>&#x5438;&#x53D6;&#x8FD9;&#x4E9B;&#x6A21;&#x578B;&#x6210;&#x529F;&#x7684;&#x539F;&#x56E0;</strong>&#xFF0C;&#x6295;&#x5165;&#x5230;&#x81EA;&#x5DF1;&#x7684;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x4E4B;&#x4E2D;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Data Set&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="目标检测网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>DeepLab-V3+</title>
    <link href="https://USTCcoder.github.io/2020/04/27/Semantic_segmentation%20DeepLab_V3+/"/>
    <id>https://USTCcoder.github.io/2020/04/27/Semantic_segmentation DeepLab_V3+/</id>
    <published>2020-04-27T13:10:21.000Z</published>
    <updated>2020-05-09T09:18:28.297Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">DeepLab-V3+</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>DeepLab-V3+</strong>:&#x4E8E;<strong>2018&#x5E74;&#x53D1;&#x8868;&#x5728;CVPR</strong>&#x4E0A;&#xFF0C;&#x5E94;&#x7528;<strong>&#x6539;&#x8FDB;&#x7684;Xception&#x4F5C;&#x4E3A;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;</strong>&#xFF0C;&#x5E76;&#x5C06;<strong>&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;</strong>&#x4E0E;<strong>ASPP(Atrous Spatial Pyramid Pooling&#xFF0C;&#x7A7A;&#x6D1E;&#x7A7A;&#x95F4;&#x5377;&#x79EF;&#x6C60;&#x5316;&#x91D1;&#x5B57;&#x5854;)</strong>&#x7ED3;&#x5408;&#xFF0C;&#x5927;&#x91CF;&#x7F29;&#x5C0F;&#x6A21;&#x578B;&#x53C2;&#x6570;&#xFF0C;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x73B0;&#x5728;<strong>&#x8BED;&#x4E49;&#x5206;&#x5272;&#x6A21;&#x578B;&#x7684;&#x65B0;&#x9AD8;&#x5CF0;</strong>&#x3002;<a id="more"></a></p><p><img src="/images/Semantic_segmentation/DeepLab_V3+.png" alt="DeepLab-V3+"></p><h1 id="DeepLab-V3-&#x7279;&#x70B9;"><a href="#DeepLab-V3-&#x7279;&#x70B9;" class="headerlink" title="DeepLab-V3+&#x7279;&#x70B9;"></a><font size="5" color="red">DeepLab-V3+&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">&#x6539;&#x8FDB;&#x4E86;Xception&#xFF0C;&#x5C06;<strong>Middle Flow&#x4ECE;8&#x5C42;&#x53D8;&#x4E3A;16&#x5C42;</strong>&#xFF0C;&#x52A0;&#x6DF1;&#x7F51;&#x7EDC;&#x5C42;&#x6570;&#xFF0C;&#x4E14;&#x5C06;<strong>&#x6C60;&#x5316;&#x5C42;&#x66FF;&#x6362;&#x4E3A;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x5C42;</strong>&#xFF0C;&#x5E76;&#x4E14;&#x5728;<strong>3x3&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x5C42;&#x540E;&#x6DFB;&#x52A0;BN&#x5C42;&#x548C;ReLU&#x5C42;</strong>&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x4F7F;&#x7528;ASPP&#x7ED3;&#x6784;&#xFF0C;&#x5176;&#x4E2D;<strong>&#x8BBE;&#x7F6E;&#x4E0D;&#x540C;&#x7684;dilation_rate&#x63D0;&#x53D6;&#x4E0D;&#x540C;&#x5C3A;&#x5EA6;&#x7684;&#x7279;&#x5F81;</strong>&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x4ECE;<strong>Xception&#x6D45;&#x5C42;&#x7F51;&#x7EDC;&#x4E2D;&#x63D0;&#x53D6;&#x51FA;&#x4E00;&#x4E2A;&#x5206;&#x652F;</strong>&#xFF0C;&#x4F5C;&#x4E3A;&#x6D45;&#x5C42;&#x7279;&#x5F81;&#xFF0C;&#x548C;ASPP&#x7ED3;&#x6784;&#x4EA7;&#x751F;&#x7684;&#x6DF1;&#x5C42;&#x7279;&#x5F81;&#x8FDB;&#x884C;&#x878D;&#x5408;</font></p><h1 id="&#x7A7A;&#x6D1E;&#x5377;&#x79EF;-atrous-convolutions-&#x548C;&#x666E;&#x901A;&#x5377;&#x79EF;&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;"><a href="#&#x7A7A;&#x6D1E;&#x5377;&#x79EF;-atrous-convolutions-&#x548C;&#x666E;&#x901A;&#x5377;&#x79EF;&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;" class="headerlink" title="&#x7A7A;&#x6D1E;&#x5377;&#x79EF;(atrous convolutions)&#x548C;&#x666E;&#x901A;&#x5377;&#x79EF;&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;"></a><font size="5" color="red">&#x7A7A;&#x6D1E;&#x5377;&#x79EF;(atrous convolutions)&#x548C;&#x666E;&#x901A;&#x5377;&#x79EF;&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;</font></h1><p>&#x2003;&#x2003;<font size="3"><strong>&#x7A7A;&#x6D1E;&#x5377;&#x79EF;(atrous convolutions)&#x53C8;&#x79F0;&#x81A8;&#x80C0;&#x5377;&#x79EF;(dilated convolutions)</strong>&#xFF0C;&#x5728;&#x5377;&#x79EF;&#x5C42;&#x5F15;&#x5165;&#x4E86;&#x4E00;&#x4E2A;<strong>&#x81A8;&#x80C0;&#x7387;(dilation rate)</strong>&#x53C2;&#x6570;&#xFF0C;&#x5B9A;&#x4E49;&#x4E86;&#x5377;&#x79EF;&#x6838;&#x7684;&#x95F4;&#x9694;&#x6570;&#x91CF;&#xFF0C;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x5377;&#x79EF;&#x6838;dilation rate=1</font><br>&#x2003;&#x2003;<font size="3">&#x4F18;&#x70B9;&#xFF1A;<strong>&#x6269;&#x5927;&#x611F;&#x53D7;&#x91CE;</strong>&#xFF0C;&#x76F8;&#x90BB;&#x7684;&#x50CF;&#x7D20;&#x70B9;&#x53EF;&#x80FD;&#x5B58;&#x5728;&#x5927;&#x91CF;&#x5197;&#x4F59;&#x4FE1;&#x606F;&#xFF0C;&#x6269;&#x5927;&#x611F;&#x53D7;&#x91CE;&#x53EF;&#x80FD;&#x4F1A;&#x83B7;&#x53D6;&#x591A;&#x5C3A;&#x5EA6;&#x4FE1;&#x606F;&#xFF0C;&#x8FD9;&#x5728;&#x89C6;&#x89C9;&#x4EFB;&#x52A1;&#x4E0A;&#x975E;&#x5E38;&#x91CD;&#x8981;&#xFF0C;&#x4E14;<strong>&#x4E0D;&#x9700;&#x8981;&#x5F15;&#x5165;&#x989D;&#x5916;&#x53C2;&#x6570;</strong>&#xFF0C;&#x5982;&#x679C;&#x589E;&#x52A0;&#x5206;&#x8FA8;&#x7387;&#x6216;&#x8005;&#x91C7;&#x7528;&#x5927;&#x5C3A;&#x5BF8;&#x7684;&#x5377;&#x79EF;&#x6838;&#x5219;&#x4F1A;&#x5927;&#x5927;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x7F3A;&#x70B9;&#xFF1A;&#x7531;&#x4E8E;&#x7A7A;&#x6D1E;&#x5377;&#x79EF;&#x7684;<strong>&#x8BA1;&#x7B97;&#x65B9;&#x5F0F;&#x7C7B;&#x4F3C;&#x4E8E;&#x68CB;&#x76D8;&#x683C;&#x5F0F;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x80FD;&#x4EA7;&#x751F;&#x68CB;&#x76D8;&#x683C;&#x6548;&#x5E94;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x8003;<a href="https://distill.pub/2016/deconv-checkerboard/" target="_blank" rel="noopener">&#x68CB;&#x76D8;&#x683C;&#x53EF;&#x89C6;&#x5316;</a>&#x3002;&#x5982;&#x679C;&#x81A8;&#x80C0;&#x7387;&#x592A;&#x5927;&#x5377;&#x79EF;&#x7ED3;&#x679C;&#x4E4B;&#x95F4;&#x6CA1;&#x6709;&#x76F8;&#x5173;&#x6027;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x4E22;&#x5931;&#x5C40;&#x90E8;&#x4FE1;&#x606F;&#x3002;</strong></font><br><img src="/images/Semantic_segmentation/PSPNet_D.png" alt="PSPNet"></p><h1 id="DeepLab-V3-&#x56FE;&#x50CF;&#x5206;&#x6790;"><a href="#DeepLab-V3-&#x56FE;&#x50CF;&#x5206;&#x6790;" class="headerlink" title="DeepLab-V3+&#x56FE;&#x50CF;&#x5206;&#x6790;"></a><font size="5" color="red">DeepLab-V3+&#x56FE;&#x50CF;&#x5206;&#x6790;</font></h1><p><img src="/images/Semantic_segmentation/DeepLab_V3+_A.png" alt="DeepLab-V3+"></p><h1 id="TensorFlow2-0&#x5B9E;&#x73B0;"><a href="#TensorFlow2-0&#x5B9E;&#x73B0;" class="headerlink" title="TensorFlow2.0&#x5B9E;&#x73B0;"></a><font size="4">TensorFlow2.0&#x5B9E;&#x73B0;</font></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Convs(keras.Model):</span><br><span class="line">    def __init__(self, filters, kernel_size=(3, 3), strides=(1, 1), name=&apos;Convs&apos;):</span><br><span class="line">        super(Convs, self).__init__()</span><br><span class="line">        self.blocks = keras.Sequential(name=name)</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters, kernel_size=kernel_size, strides=strides, padding=&apos;same&apos;))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.blocks(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DepthwiseConv(keras.Model):</span><br><span class="line">    def __init__(self, filters, kernel_size=(3, 3), strides=(1, 1), dilation_rate=1):</span><br><span class="line">        super(DepthwiseConv, self).__init__()</span><br><span class="line">        self.blocks = keras.Sequential()</span><br><span class="line">        self.blocks.add(keras.layers.DepthwiseConv2D(kernel_size=kernel_size, strides=strides, padding=&apos;same&apos;, dilation_rate=dilation_rate))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU())</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters, (1, 1), (1, 1), padding=&apos;same&apos;))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.blocks(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Block(keras.Model):</span><br><span class="line">    def __init__(self, filters, strides=(1, 1), type=None, dilation_rate=1):</span><br><span class="line">        super(Block, self).__init__()</span><br><span class="line">        self.type = type</span><br><span class="line">        self.block = keras.Sequential()</span><br><span class="line">        for i in range(len(filters) - 1):</span><br><span class="line">            self.block.add(DepthwiseConv(filters[i], dilation_rate=dilation_rate))</span><br><span class="line">        self.block.add(DepthwiseConv(filters[-1], strides=strides, dilation_rate=dilation_rate))</span><br><span class="line">        self.block1 = keras.Sequential()</span><br><span class="line">        self.block1.add(keras.layers.Conv2D(filters[-1], (1, 1), strides=strides))</span><br><span class="line">        self.block1.add(keras.layers.BatchNormalization())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block = self.block(inputs)</span><br><span class="line">        if self.type == &apos;conv&apos;:</span><br><span class="line">            conv = self.block1(inputs)</span><br><span class="line">            output = block + conv</span><br><span class="line">        elif self.type == &apos;sum&apos;:</span><br><span class="line">            output = block + inputs</span><br><span class="line">        else:</span><br><span class="line">            output = block</span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ASPP(keras.Model):</span><br><span class="line">    def __init__(self, input_channel, filters, dilation_rate):</span><br><span class="line">        super(ASPP, self).__init__()</span><br><span class="line">        self.block1 = keras.Sequential()</span><br><span class="line">        self.block1.add(keras.layers.GlobalAveragePooling2D())</span><br><span class="line">        self.block1.add(keras.layers.Reshape((1, 1, input_channel)))</span><br><span class="line">        self.block1.add(Convs(filters, (1, 1)))</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential()</span><br><span class="line">        self.block2.add(Convs(filters, (1, 1)))</span><br><span class="line"></span><br><span class="line">        self.block3 = keras.Sequential()</span><br><span class="line">        self.block3.add(DepthwiseConv(filters, dilation_rate=dilation_rate[0]))</span><br><span class="line"></span><br><span class="line">        self.block4 = keras.Sequential()</span><br><span class="line">        self.block4.add(DepthwiseConv(filters, dilation_rate=dilation_rate[1]))</span><br><span class="line"></span><br><span class="line">        self.block5 = keras.Sequential()</span><br><span class="line">        self.block5.add(DepthwiseConv(filters, dilation_rate=dilation_rate[2]))</span><br><span class="line"></span><br><span class="line">        self.concatenate = keras.layers.Concatenate()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block1 = self.block1(inputs)</span><br><span class="line">        block1 = tf.image.resize(block1, (inputs.shape[1], inputs.shape[2]))</span><br><span class="line">        block2 = self.block2(inputs)</span><br><span class="line">        block3 = self.block3(inputs)</span><br><span class="line">        block4 = self.block4(inputs)</span><br><span class="line">        block5 = self.block5(inputs)</span><br><span class="line">        output = self.concatenate([block1, block2, block3, block4, block5])</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DeepLab_V3_Plus(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(DeepLab_V3_Plus, self).__init__()</span><br><span class="line">        self.conv_block = keras.Sequential(name=&apos;Conv_Block&apos;)</span><br><span class="line">        self.conv_block.add(Convs(32, strides=(2, 2)))</span><br><span class="line">        self.conv_block.add(Convs(64))</span><br><span class="line">        self.entry_block1 = keras.Sequential(name=&apos;Entry_Block1&apos;)</span><br><span class="line">        self.entry_block1.add(Block([128, 128, 128], strides=(2, 2), type=&apos;conv&apos;))</span><br><span class="line">        self.skip = keras.Sequential([DepthwiseConv(256)], name=&apos;Skip&apos;)</span><br><span class="line">        self.entry_block2 = keras.Sequential(name=&apos;Entry_Block2&apos;)</span><br><span class="line">        self.entry_block2.add(Block([256, 256], strides=(2, 2), type=&apos;conv&apos;))</span><br><span class="line">        self.entry_block3 = keras.Sequential(name=&apos;Entry_Block3&apos;)</span><br><span class="line">        self.entry_block3.add(Block([728, 728, 728], strides=(2, 2), type=&apos;conv&apos;))</span><br><span class="line"></span><br><span class="line">        self.middle_block = keras.Sequential(name=&apos;Middle_Block&apos;)</span><br><span class="line">        for i in range(16):</span><br><span class="line">            self.middle_block.add(Block([728, 728, 728], type=&apos;sum&apos;))</span><br><span class="line"></span><br><span class="line">        self.exit_block1 = keras.Sequential(name=&apos;Exit_Block1&apos;)</span><br><span class="line">        self.exit_block1.add(Block([728, 1024, 1024], type=&apos;conv&apos;))</span><br><span class="line">        self.exit_block2 = keras.Sequential(name=&apos;Exit_Block2&apos;)</span><br><span class="line">        self.exit_block2.add(Block([1536, 1536, 2048], dilation_rate=2))</span><br><span class="line"></span><br><span class="line">        self.aspp = keras.Sequential(name=&apos;ASPP&apos;)</span><br><span class="line">        self.aspp.add(ASPP(input_channel=2048, filters=256, dilation_rate=[6, 12, 18]))</span><br><span class="line">        self.aspp.add(Convs(256, (1, 1)))</span><br><span class="line">        self.aspp.add(keras.layers.Dropout(0.1))</span><br><span class="line"></span><br><span class="line">        self.skip_conv = keras.Sequential([Convs(48, (1, 1))], name=&apos;Skip_Conv&apos;)</span><br><span class="line"></span><br><span class="line">        self.concatenate = keras.layers.Concatenate(name=&apos;Concatenate&apos;)</span><br><span class="line"></span><br><span class="line">        self.dw_block = keras.Sequential(name=&apos;DepthwiseConv_Block&apos;)</span><br><span class="line">        self.dw_block.add(DepthwiseConv(256))</span><br><span class="line">        self.dw_block.add(DepthwiseConv(256))</span><br><span class="line">        self.dw_block.add(keras.layers.Conv2D(21, (1, 1)))</span><br><span class="line">        self.softmax = keras.layers.Softmax(name=&apos;Softmax&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        conv_block = self.conv_block(inputs)</span><br><span class="line">        entry_block1 = self.entry_block1(conv_block)</span><br><span class="line">        skip = self.skip(entry_block1)</span><br><span class="line">        entry_block2 = self.entry_block2(skip)</span><br><span class="line">        entry_block3 = self.entry_block3(entry_block2)</span><br><span class="line">        middle_block = self.middle_block(entry_block3)</span><br><span class="line">        exit_block1 = self.exit_block1(middle_block)</span><br><span class="line">        exit_block2 = self.exit_block2(exit_block1)</span><br><span class="line"></span><br><span class="line">        aspp = self.aspp(exit_block2)</span><br><span class="line">        aspp = tf.image.resize(aspp, (128, 128))</span><br><span class="line">        skip_conv = self.skip_conv(skip)</span><br><span class="line">        concatenate = self.concatenate([aspp, skip_conv])</span><br><span class="line"></span><br><span class="line">        dw_block = self.dw_block(concatenate)</span><br><span class="line">        dw_block = tf.image.resize(dw_block, (512, 512))</span><br><span class="line">        output = self.softmax(dw_block)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line"></span><br><span class="line">    model = DeepLab_V3_Plus()</span><br><span class="line">    model.build(input_shape=(None, 512, 512, 3))</span><br><span class="line">    model.summary()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/Semantic_segmentation/DeepLab_V3+_R.png" alt="DeepLab-V3+"></p><h1 id="Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;"><a href="#Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;" class="headerlink" title="Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;"></a><font size="5" color="red">Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;</font></h1><h2 id="&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E;"><a href="#&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E;" class="headerlink" title="&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E;"></a>&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E;</h2><ul><li>project<ul><li>shape<ul><li>train_imgs(&#x8BAD;&#x7EC3;&#x96C6;&#x56FE;&#x50CF;&#x6587;&#x4EF6;&#x5939;)</li><li>train_mask(&#x8BAD;&#x7EC3;&#x96C6;&#x63A9;&#x6A21;&#x6587;&#x4EF6;&#x5939;)</li><li>test_imgs(&#x6D4B;&#x8BD5;&#x96C6;&#x56FE;&#x50CF;&#x6587;&#x4EF6;&#x5939;)</li></ul></li><li>DeepLab-V3+_weight(&#x6A21;&#x578B;&#x6743;&#x91CD;&#x6587;&#x4EF6;&#x5939;)</li><li>DeepLab-V3+_test_result(&#x6D4B;&#x8BD5;&#x96C6;&#x7ED3;&#x679C;&#x6587;&#x4EF6;&#x5939;)</li><li>DeepLab-V3+.py</li></ul></li></ul><h2 id="&#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E;"><a href="#&#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E;" class="headerlink" title="&#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E;"></a>&#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E;</h2><ol><li>&#x8BED;&#x4E49;&#x5206;&#x5272;&#x5B9E;&#x6218;&#x8FD0;&#x884C;&#x8F83;&#x4E3A;&#x7B80;&#x5355;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x7684;&#x8F93;&#x5165;&#x7684;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x4E3A;&#x56FE;&#x50CF;&#xFF0C;&#x8F93;&#x5165;&#x7684;&#x6807;&#x7B7E;&#x6570;&#x636E;&#x4E5F;&#x662F;&#x56FE;&#x50CF;&#xFF0C;&#x9996;&#x5148;<strong>&#x8981;&#x5BF9;&#x8F93;&#x5165;&#x7684;&#x6807;&#x7B7E;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x7F16;&#x7801;&#xFF0C;&#x8F6C;&#x6362;&#x4E3A;&#x7C7B;&#x522B;&#x4FE1;&#x606F;</strong>&#xFF0C;&#x8981;&#x548C;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x7EF4;&#x5EA6;&#x76F8;&#x5339;&#x914D;&#xFF0C;&#x4ECE;(batch_size, height, width, 1)&#x8F6C;&#x6362;&#x4E3A;(batch_size, height, width, num_class + 1)&#xFF0C;<strong>&#x67D0;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x4E3A;&#x54EA;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#xFF0C;&#x5219;&#x5728;&#x8BE5;&#x901A;&#x9053;&#x4E0A;&#x7F6E;1&#xFF0C;&#x5176;&#x4F59;&#x901A;&#x9053;&#x7F6E;0</strong>&#x3002;&#x5373;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x5165;&#x5927;&#x5C0F;&#x4E3A;(batch_size, height, width, 3)&#xFF0C;&#x8F93;&#x51FA;&#x5927;&#x5C0F;&#x4E3A;(batch_size, height, width, num_class + 1)&#x3002;</li><li>&#x8BBE;&#x8BA1;&#x635F;&#x5931;&#x51FD;&#x6570;&#xFF0C;&#x7B80;&#x5355;&#x60C5;&#x51B5;&#x8BBE;&#x7F6E;&#x4EA4;&#x53C9;&#x71B5;&#x635F;&#x5931;&#x51FD;&#x6570;&#x5373;&#x53EF;&#x8FBE;&#x5230;&#x8F83;&#x597D;&#x6548;&#x679C;&#x3002;</li><li>&#x642D;&#x5EFA;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;<strong>&#x8BBE;&#x7F6E;&#x5408;&#x9002;&#x53C2;&#x6570;</strong>&#xFF0C;&#x8FDB;&#x884C;&#x8BAD;&#x7EC3;&#x3002;</li><li>&#x9884;&#x6D4B;&#x65F6;&#xFF0C;&#x9700;&#x8981;&#x6839;&#x636E;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x8FDB;&#x884C;<strong>&#x9006;&#x5411;&#x89E3;&#x7801;(&#x7F16;&#x7801;&#x7684;&#x53CD;&#x8FC7;&#x7A0B;)</strong>&#xFF0C;&#x5BFB;&#x627E;<strong>&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#xFF0C;&#x54EA;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x4E0A;&#x503C;&#x6700;&#x5927;&#x5219;&#x5F52;&#x4E3A;&#x54EA;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;</strong>&#xFF0C;&#x5373;&#x53EF;&#x5B8C;&#x6210;&#x5B9E;&#x6218;&#x7684;&#x8FC7;&#x7A0B;&#x3002;</li></ol><h2 id="&#x5C0F;&#x6280;&#x5DE7;"><a href="#&#x5C0F;&#x6280;&#x5DE7;" class="headerlink" title="&#x5C0F;&#x6280;&#x5DE7;"></a>&#x5C0F;&#x6280;&#x5DE7;</h2><ol><li>&#x8BBE;&#x7F6E;&#x7684;&#x56FE;&#x50CF;<strong>&#x7C7B;&#x522B;&#x6570;&#x4E3A;&#x5B9E;&#x9645;&#x7C7B;&#x522B;&#x6570;+1</strong>&#xFF0C;1&#x4EE3;&#x8868;&#x80CC;&#x666F;&#x7C7B;&#x522B;&#xFF0C;<strong>&#x6B64;&#x6570;&#x636E;&#x96C6;&#x4E3A;3&#x7C7B;&#xFF0C;&#x6700;&#x540E;&#x7684;&#x901A;&#x9053;&#x6570;&#x4E3A;4&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x9884;&#x6D4B;&#x4E00;&#x7C7B;&#x7269;&#x4F53;</strong>&#x3002;&#x5728;&#x901A;&#x9053;&#x65B9;&#x5411;&#x6C42;Softmax&#xFF0C;&#x5E76;&#x4E14;&#x6C42;&#x51FA;&#x6700;&#x5927;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;0&#x5219;&#x4EE3;&#x8868;&#x80CC;&#x666F;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;1&#x5219;&#x4EE3;&#x8868;&#x5706;&#x5F62;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;2&#x5219;&#x4EE3;&#x8868;&#x4E09;&#x89D2;&#x5F62;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;3&#x5219;&#x4EE3;&#x8868;&#x6B63;&#x65B9;&#x5F62;&#x3002;</li><li>ASPP&#x6A21;&#x5757;&#x4E2D;&#x7684;&#x81A8;&#x80C0;&#x7387;&#xFF0C;&#x53EF;&#x4EE5;<strong>&#x6839;&#x636E;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x8C03;&#x6574;</strong>&#xFF0C;&#x8BBA;&#x6587;&#x4E2D;&#x81A8;&#x80C0;&#x7387;&#x5206;&#x522B;&#x4E3A;6&#xFF0C; 12&#xFF0C; 18&#xFF0C;&#x5728;&#x8FD9;&#x4E2A;&#x7B80;&#x5355;&#x6570;&#x636E;&#x96C6;&#x4E2D;&#xFF0C;&#x8F93;&#x5165;&#x5C3A;&#x5BF8;&#x4E3A;16&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x9009;&#x62E9;&#x7684;&#x81A8;&#x80C0;&#x7387;&#x662F;2&#xFF0C;4&#xFF0C;8&#x3002;</li><li>&#x8BBE;&#x7F6E;&#x4E86;<strong>&#x6743;&#x91CD;&#x7684;&#x4FDD;&#x5B58;&#x65B9;&#x5F0F;</strong>&#xFF0C;<strong>&#x5B66;&#x4E60;&#x7387;&#x7684;&#x4E0B;&#x964D;&#x65B9;&#x5F0F;</strong>&#x548C;<strong>&#x65E9;&#x505C;&#x65B9;&#x5F0F;</strong>&#x3002;</li><li>&#x4F7F;&#x7528;<strong>yield</strong>&#x5173;&#x952E;&#x5B57;&#xFF0C;&#x4EA7;&#x751F;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#xFF0C;&#x4E0D;&#x7528;&#x5C06;&#x6240;&#x6709;&#x7684;&#x6570;&#x636E;&#x90FD;&#x4FDD;&#x5B58;&#x4E0B;&#x6765;&#xFF0C;&#x5927;&#x5927;&#x8282;&#x7EA6;&#x5185;&#x5B58;&#x3002;</li><li>&#x5176;&#x4E2D;&#x5C06;1000&#x4E2A;&#x6570;&#x636E;&#xFF0C;&#x5206;&#x6210;800&#x4E2A;&#x8BAD;&#x7EC3;&#x96C6;&#xFF0C;100&#x4E2A;&#x9A8C;&#x8BC1;&#x96C6;&#x548C;100&#x4E2A;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x81EA;&#x884C;&#x4FEE;&#x6539;&#x3002;</li><li>&#x6CE8;&#x610F;&#x5176;&#x4E2D;&#x7684;&#x4E00;&#x4E9B;&#x7EF4;&#x5EA6;&#x53D8;&#x6362;&#x548C;<strong>numpy</strong>&#xFF0C;<strong>tensorflow</strong>&#x5E38;&#x7528;&#x64CD;&#x4F5C;&#xFF0C;&#x5426;&#x5219;&#x5728;&#x9605;&#x8BFB;&#x4EE3;&#x7801;&#x65F6;&#x53EF;&#x80FD;&#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x56F0;&#x96BE;&#x3002;</li><li>DeepLab-V3+&#x7684;<strong>&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x4E3A;&#x6539;&#x8FDB;&#x7684;Xception</strong>&#xFF0C;&#x8BBA;&#x6587;&#x4E2D;&#x4E5F;&#x6BD4;&#x8F83;&#x4E86;ResNet&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x7684;&#x6027;&#x80FD;&#x3002;&#x5B9E;&#x6218;&#x4E2D;&#x6211;&#x9009;&#x62E9;&#x7684;&#x662F;Middle Flow&#x4E3A;8&#x7684;Xception&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x90E8;&#x5206;&#x5185;&#x5BB9;&#xFF0C;&#x9009;&#x62E9;&#x5176;&#x4ED6;&#x7684;&#x7F51;&#x7EDC;&#x8FDB;&#x884C;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#xFF0C;&#x6BD4;&#x8F83;&#x4E0D;&#x540C;&#x7F51;&#x7EDC;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x8FD0;&#x884C;&#x901F;&#x5EA6;&#xFF0C;&#x6700;&#x7EC8;&#x7ED3;&#x679C;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x5F02;&#x3002;</li><li>&#x5173;&#x4E8E;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#xFF0C;&#x8BBA;&#x6587;&#x4E2D;&#x7ED9;&#x51FA;&#x539F;&#x5C3A;&#x5BF8;&#x7F29;&#x5C0F;16&#x500D;&#x7684;&#x548C;&#x7F29;&#x5C0F;8&#x500D;&#x7684;&#xFF0C;&#x4E24;&#x8005;&#x7ED3;&#x6784;&#x5DEE;&#x5F02;<strong>&#x4EC5;&#x5728;&#x7F29;&#x5C0F;16&#x500D;&#x7684;Entry Flow&#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x6A21;&#x5757;strides=(2, 2)</strong>&#xFF0C;&#x6027;&#x80FD;&#x5DEE;&#x5F02;&#x4E0D;&#x5927;&#xFF0C;&#x4F46;&#x662F;&#x7F29;&#x5C0F;8&#x500D;&#x7684;&#x7F51;&#x7EDC;&#x53C2;&#x6570;&#x91CF;&#x5927;&#x5927;&#x589E;&#x52A0;&#x3002;&#x5728;&#x5B9E;&#x6218;&#x4E2D;&#xFF0C;&#x6570;&#x636E;&#x96C6;&#x7684;&#x5C3A;&#x5BF8;&#x8F83;&#x5C0F;&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x9009;&#x62E9;&#x4E86;&#x7F29;&#x5C0F;8&#x500D;&#x7684;&#x7F51;&#x7EDC;&#x53C2;&#x6570;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5728;&#x4F7F;&#x7528;&#x65F6;&#x53EF;&#x4EE5;&#x914C;&#x60C5;&#x4FEE;&#x6539;&#x3002;</li><li>&#x56FE;&#x50CF;&#x8F93;&#x5165;&#x53EF;&#x4EE5;&#x5148;&#x5C06;&#x5176;<strong>&#x5F52;&#x4E00;&#x5316;&#x5230;0-1&#x4E4B;&#x95F4;&#x6216;&#x8005;-1-1&#x4E4B;&#x95F4;</strong>&#xFF0C;&#x56E0;&#x4E3A;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x4E00;&#x822C;&#x90FD;&#x6BD4;&#x8F83;&#x5C0F;&#xFF0C;&#x6240;&#x4EE5;&#x5F52;&#x4E00;&#x5316;&#x540E;&#x8BA1;&#x7B97;&#x65B9;&#x4FBF;&#xFF0C;&#x6536;&#x655B;&#x8F83;&#x5FEB;&#x3002;</li><li>&#x5B9E;&#x9645;&#x7684;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x5E38;&#x5E38;&#x8FD8;&#x9700;&#x8981;&#x5BF9;&#x6570;&#x636E;&#x96C6;&#x8FDB;&#x884C;<strong>&#x5927;&#x5C0F;&#x8C03;&#x6574;&#x548C;&#x589E;&#x5F3A;</strong>&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x4E3A;&#x4E86;&#x7B80;&#x5355;&#x8D77;&#x89C1;&#xFF0C;&#x6CA1;&#x6709;&#x8FDB;&#x884C;&#x590D;&#x6742;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5E94;&#x7528;&#x4E2D;&#x8981;&#x8BB0;&#x5F97;&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x7684;&#x9700;&#x8981;&#xFF0C;&#x5BF9;&#x56FE;&#x50CF;&#x8FDB;&#x884C;<strong>resize&#x6216;&#x8005;padding</strong>&#xFF0C;&#x7136;&#x540E;<strong>&#x65CB;&#x8F6C;</strong>&#xFF0C;<strong>&#x5BF9;&#x6BD4;&#x5EA6;&#x589E;&#x5F3A;</strong>&#xFF0C;<strong>&#x4EFF;&#x5C04;&#x8FD0;&#x7B97;</strong>&#x7B49;&#x7B49;&#x64CD;&#x4F5C;&#xFF0C;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x9C81;&#x68D2;&#x6027;&#xFF0C;&#x5E76;&#x4E14;&#x5B9E;&#x9645;&#x4E2D;&#x7684;&#x56FE;&#x50CF;&#x4E0D;&#x4E00;&#x5B9A;&#x6309;&#x7167;&#x987A;&#x5E8F;&#x547D;&#x540D;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x5E94;&#x7528;&#x4E2D;&#x4E5F;&#x8981;&#x6CE8;&#x610F;&#x56FE;&#x50CF;&#x8BFB;&#x53D6;&#x7684;&#x6587;&#x4EF6;&#x540D;&#x3002;</li></ol><h2 id="&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;"><a href="#&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;" class="headerlink" title="&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;"></a>&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import numpy as np</span><br><span class="line">import cv2 as cv</span><br><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Convs(keras.Model):</span><br><span class="line">    def __init__(self, filters, kernel_size=(3, 3), strides=(1, 1), name=&apos;Convs&apos;):</span><br><span class="line">        super(Convs, self).__init__()</span><br><span class="line">        self.blocks = keras.Sequential(name=name)</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters, kernel_size=kernel_size, strides=strides, padding=&apos;same&apos;))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.blocks(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DepthwiseConv(keras.Model):</span><br><span class="line">    def __init__(self, filters, kernel_size=(3, 3), strides=(1, 1), dilation_rate=1):</span><br><span class="line">        super(DepthwiseConv, self).__init__()</span><br><span class="line">        self.blocks = keras.Sequential()</span><br><span class="line">        self.blocks.add(keras.layers.DepthwiseConv2D(kernel_size=kernel_size, strides=strides, padding=&apos;same&apos;, dilation_rate=dilation_rate))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU())</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters, (1, 1), (1, 1), padding=&apos;same&apos;))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.blocks(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Block(keras.Model):</span><br><span class="line">    def __init__(self, filters, strides=(1, 1), type=None, dilation_rate=1):</span><br><span class="line">        super(Block, self).__init__()</span><br><span class="line">        self.type = type</span><br><span class="line">        self.block = keras.Sequential()</span><br><span class="line">        for i in range(len(filters) - 1):</span><br><span class="line">            self.block.add(DepthwiseConv(filters[i], dilation_rate=dilation_rate))</span><br><span class="line">        self.block.add(DepthwiseConv(filters[-1], strides=strides, dilation_rate=dilation_rate))</span><br><span class="line">        self.block1 = keras.Sequential()</span><br><span class="line">        self.block1.add(keras.layers.Conv2D(filters[-1], (1, 1), strides=strides))</span><br><span class="line">        self.block1.add(keras.layers.BatchNormalization())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block = self.block(inputs)</span><br><span class="line">        if self.type == &apos;conv&apos;:</span><br><span class="line">            conv = self.block1(inputs)</span><br><span class="line">            output = block + conv</span><br><span class="line">        elif self.type == &apos;sum&apos;:</span><br><span class="line">            output = block + inputs</span><br><span class="line">        else:</span><br><span class="line">            output = block</span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ASPP(keras.Model):</span><br><span class="line">    def __init__(self, input_channel, filters, dilation_rate):</span><br><span class="line">        super(ASPP, self).__init__()</span><br><span class="line">        self.block1 = keras.Sequential()</span><br><span class="line">        self.block1.add(keras.layers.GlobalAveragePooling2D())</span><br><span class="line">        self.block1.add(keras.layers.Reshape((1, 1, input_channel)))</span><br><span class="line">        self.block1.add(Convs(filters, (1, 1)))</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential()</span><br><span class="line">        self.block2.add(Convs(filters, (1, 1)))</span><br><span class="line"></span><br><span class="line">        self.block3 = keras.Sequential()</span><br><span class="line">        self.block3.add(DepthwiseConv(filters, dilation_rate=dilation_rate[0]))</span><br><span class="line"></span><br><span class="line">        self.block4 = keras.Sequential()</span><br><span class="line">        self.block4.add(DepthwiseConv(filters, dilation_rate=dilation_rate[1]))</span><br><span class="line"></span><br><span class="line">        self.block5 = keras.Sequential()</span><br><span class="line">        self.block5.add(DepthwiseConv(filters, dilation_rate=dilation_rate[2]))</span><br><span class="line"></span><br><span class="line">        self.concatenate = keras.layers.Concatenate()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block1 = self.block1(inputs)</span><br><span class="line">        block1 = tf.image.resize(block1, (inputs.shape[1], inputs.shape[2]))</span><br><span class="line">        block2 = self.block2(inputs)</span><br><span class="line">        block3 = self.block3(inputs)</span><br><span class="line">        block4 = self.block4(inputs)</span><br><span class="line">        block5 = self.block5(inputs)</span><br><span class="line">        output = self.concatenate([block1, block2, block3, block4, block5])</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Small_DeepLab_V3_Plus(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Small_DeepLab_V3_Plus, self).__init__()</span><br><span class="line">        self.conv_block = keras.Sequential(name=&apos;Conv_Block&apos;)</span><br><span class="line">        self.conv_block.add(Convs(32, strides=(2, 2)))</span><br><span class="line">        self.entry_block1 = keras.Sequential(name=&apos;Entry_Block1&apos;)</span><br><span class="line">        self.entry_block1.add(Block([128, 128, 128], strides=(2, 2), type=&apos;conv&apos;))</span><br><span class="line">        self.skip = keras.Sequential([DepthwiseConv(256)], name=&apos;Skip&apos;)</span><br><span class="line">        self.entry_block2 = keras.Sequential(name=&apos;Entry_Block2&apos;)</span><br><span class="line">        self.entry_block2.add(Block([256, 728], strides=(2, 2), type=&apos;conv&apos;))</span><br><span class="line"></span><br><span class="line">        self.middle_block = keras.Sequential(name=&apos;Middle_Block&apos;)</span><br><span class="line">        for i in range(8):</span><br><span class="line">            self.middle_block.add(Block([728, 728, 728], type=&apos;sum&apos;))</span><br><span class="line"></span><br><span class="line">        self.exit_block1 = keras.Sequential(name=&apos;Exit_Block1&apos;)</span><br><span class="line">        self.exit_block1.add(Block([728, 1024, 1024], type=&apos;conv&apos;))</span><br><span class="line">        self.exit_block2 = keras.Sequential(name=&apos;Exit_Block2&apos;)</span><br><span class="line">        self.exit_block2.add(Block([1536, 1536, 2048], dilation_rate=2))</span><br><span class="line"></span><br><span class="line">        self.aspp = keras.Sequential(name=&apos;ASPP&apos;)</span><br><span class="line">        self.aspp.add(ASPP(input_channel=2048, filters=256, dilation_rate=[2, 4, 8]))</span><br><span class="line">        self.aspp.add(Convs(256, (1, 1)))</span><br><span class="line">        self.aspp.add(keras.layers.Dropout(0.1))</span><br><span class="line"></span><br><span class="line">        self.skip_conv = keras.Sequential([Convs(24, (1, 1))], name=&apos;Skip_Conv&apos;)</span><br><span class="line"></span><br><span class="line">        self.concatenate = keras.layers.Concatenate(name=&apos;Concatenate&apos;)</span><br><span class="line"></span><br><span class="line">        self.dw_block = keras.Sequential(name=&apos;DepthwiseConv_Block&apos;)</span><br><span class="line">        self.dw_block.add(DepthwiseConv(256))</span><br><span class="line">        self.dw_block.add(DepthwiseConv(256))</span><br><span class="line">        self.dw_block.add(keras.layers.Conv2D(num_class, (1, 1)))</span><br><span class="line">        self.softmax = keras.layers.Softmax(name=&apos;Softmax&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        conv_block = self.conv_block(inputs)</span><br><span class="line">        entry_block1 = self.entry_block1(conv_block)</span><br><span class="line">        skip = self.skip(entry_block1)</span><br><span class="line">        entry_block2 = self.entry_block2(skip)</span><br><span class="line">        middle_block = self.middle_block(entry_block2)</span><br><span class="line">        exit_block1 = self.exit_block1(middle_block)</span><br><span class="line">        exit_block2 = self.exit_block2(exit_block1)</span><br><span class="line"></span><br><span class="line">        aspp = self.aspp(exit_block2)</span><br><span class="line">        aspp = tf.image.resize(aspp, (32, 32))</span><br><span class="line">        skip_conv = self.skip_conv(skip)</span><br><span class="line">        concatenate = self.concatenate([aspp, skip_conv])</span><br><span class="line"></span><br><span class="line">        dw_block = self.dw_block(concatenate)</span><br><span class="line">        dw_block = tf.image.resize(dw_block, (img_size[0], img_size[1]))</span><br><span class="line">        output = self.softmax(dw_block)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def generate_arrays_from_file(train_data, batch_size):</span><br><span class="line">    # &#x83B7;&#x53D6;&#x603B;&#x957F;&#x5EA6;</span><br><span class="line">    n = len(train_data)</span><br><span class="line">    i = 0</span><br><span class="line">    while 1:</span><br><span class="line">        X_train = []</span><br><span class="line">        Y_train = []</span><br><span class="line">        # &#x83B7;&#x53D6;&#x4E00;&#x4E2A;batch_size&#x5927;&#x5C0F;&#x7684;&#x6570;&#x636E;</span><br><span class="line">        for _ in range(batch_size):</span><br><span class="line">            if i == 0:</span><br><span class="line">                np.random.shuffle(train_data)</span><br><span class="line">            # &#x4ECE;&#x6587;&#x4EF6;&#x4E2D;&#x8BFB;&#x53D6;&#x56FE;&#x50CF;</span><br><span class="line">            img = cv.imread(imgs_path + &apos;\\&apos; + str(train_data[i]) + &apos;.jpg&apos;)</span><br><span class="line">            img = img / 127.5 - 1</span><br><span class="line">            X_train.append(img)</span><br><span class="line"></span><br><span class="line">            # &#x4ECE;&#x6587;&#x4EF6;&#x4E2D;&#x8BFB;&#x53D6;&#x56FE;&#x50CF;</span><br><span class="line">            img = cv.imread(mask_path + &apos;\\&apos; + str(train_data[i]) + &apos;.png&apos;)</span><br><span class="line">            seg_labels = np.zeros((img_size[0], img_size[1], num_class))</span><br><span class="line">            for c in range(num_class):</span><br><span class="line">                seg_labels[:, :, c] = (img[:, :, 0] == c).astype(int)</span><br><span class="line">            Y_train.append(seg_labels)</span><br><span class="line"></span><br><span class="line">            # &#x8BFB;&#x5B8C;&#x4E00;&#x4E2A;&#x5468;&#x671F;&#x540E;&#x91CD;&#x65B0;&#x5F00;&#x59CB;</span><br><span class="line">            i = (i + 1) % n</span><br><span class="line">        yield tf.constant(X_train), tf.constant(Y_train)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # &#x5305;&#x62EC;&#x80CC;&#x666F;</span><br><span class="line">    num_class = 4</span><br><span class="line">    train_data = list(range(800))</span><br><span class="line">    validation_data = list(range(800, 900))</span><br><span class="line">    test_data = range(900, 1000)</span><br><span class="line">    epochs = 50</span><br><span class="line">    batch_size = 16</span><br><span class="line">    tf.random.set_seed(22)</span><br><span class="line">    img_size = (128, 128)</span><br><span class="line">    colors = [[0, 0, 0], [0, 0, 128], [0, 128, 0], [128, 0, 0]]</span><br><span class="line"></span><br><span class="line">    mask_path = r&apos;.\shape\train_mask&apos;</span><br><span class="line">    imgs_path = r&apos;.\shape\train_imgs&apos;</span><br><span class="line">    test_path = r&apos;.\shape\test_imgs&apos;</span><br><span class="line">    save_path = r&apos;.\DeepLab_V3_Plus_test_result&apos;</span><br><span class="line">    weight_path = r&apos;.\DeepLab_V3_Plus_weight&apos;</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        os.mkdir(save_path)</span><br><span class="line">    except FileExistsError:</span><br><span class="line">        print(save_path + &apos;has been exist&apos;)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        os.mkdir(weight_path)</span><br><span class="line">    except FileExistsError:</span><br><span class="line">        print(weight_path + &apos;has been exist&apos;)</span><br><span class="line"></span><br><span class="line">    model = Small_DeepLab_V3_Plus()</span><br><span class="line"></span><br><span class="line">    model.build(input_shape=(None, img_size[0], img_size[1], 3))</span><br><span class="line">    model.summary()</span><br><span class="line"></span><br><span class="line">    optimizor = keras.optimizers.Adam(lr=1e-3)</span><br><span class="line">    lossor = keras.losses.BinaryCrossentropy()</span><br><span class="line"></span><br><span class="line">    model.compile(optimizer=optimizor, loss=lossor, metrics=[&apos;accuracy&apos;])</span><br><span class="line"></span><br><span class="line">    # &#x4FDD;&#x5B58;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;3&#x4E16;&#x4EE3;&#x4FDD;&#x5B58;&#x4E00;&#x6B21;</span><br><span class="line">    checkpoint_period = keras.callbacks.ModelCheckpoint(</span><br><span class="line">        weight_path + &apos;\\&apos; + &apos;ep{epoch:03d}-loss{loss:.3f}-val_loss{val_loss:.3f}.h5&apos;,</span><br><span class="line">        monitor=&apos;val_loss&apos;,</span><br><span class="line">        save_weights_only=True,</span><br><span class="line">        save_best_only=True,</span><br><span class="line">        period=3</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    # &#x5B66;&#x4E60;&#x7387;&#x4E0B;&#x964D;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;val_loss3&#x6B21;&#x4E0D;&#x4E0B;&#x964D;&#x5C31;&#x4E0B;&#x964D;&#x5B66;&#x4E60;&#x7387;&#x7EE7;&#x7EED;&#x8BAD;&#x7EC3;</span><br><span class="line">    reduce_lr = keras.callbacks.ReduceLROnPlateau(</span><br><span class="line">        monitor=&apos;val_loss&apos;,</span><br><span class="line">        factor=0.5,</span><br><span class="line">        patience=3,</span><br><span class="line">        verbose=1</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    # &#x662F;&#x5426;&#x9700;&#x8981;&#x65E9;&#x505C;&#xFF0C;&#x5F53;val_loss&#x4E00;&#x76F4;&#x4E0D;&#x4E0B;&#x964D;&#x7684;&#x65F6;&#x5019;&#x610F;&#x5473;&#x7740;&#x6A21;&#x578B;&#x57FA;&#x672C;&#x8BAD;&#x7EC3;&#x5B8C;&#x6BD5;&#xFF0C;&#x53EF;&#x4EE5;&#x505C;&#x6B62;</span><br><span class="line">    early_stopping = keras.callbacks.EarlyStopping(</span><br><span class="line">        monitor=&apos;val_loss&apos;,</span><br><span class="line">        min_delta=0,</span><br><span class="line">        patience=10,</span><br><span class="line">        verbose=1</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    model.fit_generator(generate_arrays_from_file(train_data, batch_size),</span><br><span class="line">                        steps_per_epoch=max(1, len(train_data) // batch_size),</span><br><span class="line">                        validation_data=generate_arrays_from_file(validation_data, batch_size),</span><br><span class="line">                        validation_steps=max(1, len(validation_data) // batch_size),</span><br><span class="line">                        epochs=epochs,</span><br><span class="line">                        callbacks=[checkpoint_period, reduce_lr, early_stopping])</span><br><span class="line"></span><br><span class="line">    for name in test_data:</span><br><span class="line">        test_img_path = test_path + &apos;\\&apos; + str(name) + &apos;.jpg&apos;</span><br><span class="line">        save_img_path = save_path + &apos;\\&apos; + str(name) + &apos;.png&apos;</span><br><span class="line">        test_img = cv.imread(test_img_path)</span><br><span class="line">        test_img = tf.constant([test_img / 127.5 - 1])</span><br><span class="line">        test_mask = model.predict(test_img)</span><br><span class="line">        test_mask = np.reshape(test_mask, (img_size[0], img_size[1], num_class))</span><br><span class="line">        test_mask = np.argmax(test_mask, axis=-1)</span><br><span class="line">        seg_img = np.zeros((img_size[0], img_size[1], 3))</span><br><span class="line">        for c in range(num_class):</span><br><span class="line">            seg_img[:, :, 0] += ((test_mask == c) * (colors[c][0]))</span><br><span class="line">            seg_img[:, :, 1] += ((test_mask == c) * (colors[c][1]))</span><br><span class="line">            seg_img[:, :, 2] += ((test_mask == c) * (colors[c][2]))</span><br><span class="line">        seg_img = seg_img.astype(np.uint8)</span><br><span class="line">        cv.imwrite(save_img_path, seg_img)</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"><a href="#&#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C;" class="headerlink" title="&#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a>&#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</h2><p><img src="/images/Semantic_segmentation/DeepLab_V3+_T.png" alt="DeepLab-V3+"></p><h1 id="DeepLab-V3-&#x5C0F;&#x7ED3;"><a href="#DeepLab-V3-&#x5C0F;&#x7ED3;" class="headerlink" title="DeepLab-V3+&#x5C0F;&#x7ED3;"></a><font size="5" color="red">DeepLab-V3+&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;DeepLab-V3+&#x662F;&#x4E00;&#x79CD;&#x9AD8;&#x6548;&#x7684;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x7F51;&#x7EDC;&#xFF0C;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;DeepLab-V3+&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x53EA;&#x6709;41M&#xFF0C;&#x5C31;&#x76EE;&#x524D;&#x6765;&#x8BF4;&#xFF0C;DeepLab-V3+&#x662F;<strong>&#x8BED;&#x4E49;&#x5206;&#x5272;&#x516C;&#x8BA4;&#x7684;&#x6700;&#x9AD8;&#x5CF0;</strong>&#xFF0C;&#x4E3B;&#x8981;&#x6765;&#x6E90;&#x4E8E;<strong>ASPP&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x548C;&#x6DF1;&#x6D45;&#x5C42;&#x7279;&#x5F81;&#x878D;&#x5408;</strong>&#xFF0C;&#x662F;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x9700;&#x8981;&#x638C;&#x63E1;&#x7684;&#x4E00;&#x4E2A;&#x6A21;&#x578B;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;DeepLab-V3+&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="语义分割网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>PSPNet</title>
    <link href="https://USTCcoder.github.io/2020/04/24/Semantic_segmentation%20PSPNet/"/>
    <id>https://USTCcoder.github.io/2020/04/24/Semantic_segmentation PSPNet/</id>
    <published>2020-04-24T08:09:28.000Z</published>
    <updated>2020-05-09T09:18:54.425Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">PSPNet</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>PSPNet</strong>:&#x7531;&#x9999;&#x6E2F;&#x4E2D;&#x6587;&#x5927;&#x5B66;&#x548C;&#x5546;&#x6C64;&#x79D1;&#x6280;&#x63D0;&#x51FA;&#xFF0C;&#x83B7;&#x5F97;<strong>2016&#x5E74;ImageNet&#x573A;&#x666F;&#x89E3;&#x6790;&#x6311;&#x6218;&#x7684;&#x51A0;&#x519B;</strong>&#xFF0C;&#x4E8E;<strong>2017&#x53D1;&#x8868;&#x5728;CVPR</strong>&#xFF0C;&#x901A;&#x8FC7;&#x4F7F;&#x7528;<strong>&#x91D1;&#x5B57;&#x5854;&#x6C60;&#x5316;&#x6A21;&#x5757;</strong>&#x5B8C;&#x6210;&#x56FE;&#x50CF;&#x5206;&#x5272;&#xFF0C;&#x662F;&#x4E00;&#x79CD;&#x9AD8;&#x6548;&#x7684;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x6A21;&#x578B;&#x3002;<a id="more"></a></p><p><img src="/images/Semantic_segmentation/PSPNet.png" alt="PSPNet"></p><h1 id="PSPNet&#x7279;&#x70B9;"><a href="#PSPNet&#x7279;&#x70B9;" class="headerlink" title="PSPNet&#x7279;&#x70B9;"></a><font size="5" color="red">PSPNet&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x9009;&#x62E9;&#x65BD;&#x52A0;<strong>&#x7A7A;&#x6D1E;&#x5377;&#x79EF;(atrous convolutions)&#x7684;ResNet</strong>&#xFF0C;&#x5E76;&#x4E14;&#x9009;&#x62E9;<strong>AL(auxiliary loss, &#x8F85;&#x52A9;&#x635F;&#x5931;)</strong>&#x5BF9;ResNet&#x8FDB;&#x884C;&#x8BAD;&#x7EC3;&#xFF0C;&#x901A;&#x5E38;&#x5728;&#x67D0;&#x4E00;&#x5C42;&#x540E;&#x63A5;&#x7740;&#x51E0;&#x4E2A;&#x8F6C;&#x6362;&#x5C42;&#x548C;&#x5168;&#x8FDE;&#x63A5;&#x5C42;&#xFF0C;&#x6700;&#x540E;&#x5206;&#x7C7B;&#x9884;&#x6D4B;&#xFF0C;&#x5E76;&#x4E14;&#x7ED9;&#x4E88;<strong>&#x635F;&#x5931;&#x5C0F;&#x4E8E;1&#x7684;&#x6743;&#x91CD;</strong>&#xFF0C;&#x5B8C;&#x6210;&#x8F85;&#x52A9;&#x635F;&#x5931;&#xFF0C;&#x76EE;&#x7684;&#x662F;<strong>&#x7F13;&#x89E3;&#x6DF1;&#x5EA6;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4E2D;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x7684;&#x95EE;&#x9898;&#x3002;</strong></font><br>&#x2003;&#x2003;<font size="3">&#x4F7F;&#x7528;<strong>&#x91D1;&#x5B57;&#x5854;&#x6C60;&#x5316;&#x6A21;&#x5757;&#x805A;&#x5408;&#x4FE1;&#x606F;&#xFF0C;&#x6839;&#x636E;&#x4E0D;&#x540C;&#x5185;&#x6838;&#x7684;&#x6C60;&#x5316;&#x5C42;&#xFF0C;&#x83B7;&#x53D6;&#x4E0D;&#x540C;&#x5C3A;&#x5EA6;&#x7684;&#x56FE;&#x50CF;&#x4FE1;&#x606F;</strong>&#xFF0C;&#x7136;&#x540E;&#x518D;Concatenate&#xFF0C;&#x5B8C;&#x6210;&#x4FE1;&#x606F;&#x7684;&#x878D;&#x5408;&#x3002;</font></p><h1 id="&#x7A7A;&#x6D1E;&#x5377;&#x79EF;-atrous-convolutions-&#x548C;&#x666E;&#x901A;&#x5377;&#x79EF;&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;"><a href="#&#x7A7A;&#x6D1E;&#x5377;&#x79EF;-atrous-convolutions-&#x548C;&#x666E;&#x901A;&#x5377;&#x79EF;&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;" class="headerlink" title="&#x7A7A;&#x6D1E;&#x5377;&#x79EF;(atrous convolutions)&#x548C;&#x666E;&#x901A;&#x5377;&#x79EF;&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;"></a><font size="5" color="red">&#x7A7A;&#x6D1E;&#x5377;&#x79EF;(atrous convolutions)&#x548C;&#x666E;&#x901A;&#x5377;&#x79EF;&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;</font></h1><p>&#x2003;&#x2003;<font size="3"><strong>&#x7A7A;&#x6D1E;&#x5377;&#x79EF;(atrous convolutions)&#x53C8;&#x79F0;&#x81A8;&#x80C0;&#x5377;&#x79EF;(dilated convolutions)</strong>&#xFF0C;&#x5728;&#x5377;&#x79EF;&#x5C42;&#x5F15;&#x5165;&#x4E86;&#x4E00;&#x4E2A;<strong>&#x81A8;&#x80C0;&#x7387;(dilation rate)</strong>&#x53C2;&#x6570;&#xFF0C;&#x5B9A;&#x4E49;&#x4E86;&#x5377;&#x79EF;&#x6838;&#x7684;&#x95F4;&#x9694;&#x6570;&#x91CF;&#xFF0C;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x5377;&#x79EF;&#x6838;dilation rate=1</font><br>&#x2003;&#x2003;<font size="3">&#x4F18;&#x70B9;&#xFF1A;<strong>&#x6269;&#x5927;&#x611F;&#x53D7;&#x91CE;</strong>&#xFF0C;&#x76F8;&#x90BB;&#x7684;&#x50CF;&#x7D20;&#x70B9;&#x53EF;&#x80FD;&#x5B58;&#x5728;&#x5927;&#x91CF;&#x5197;&#x4F59;&#x4FE1;&#x606F;&#xFF0C;&#x6269;&#x5927;&#x611F;&#x53D7;&#x91CE;&#x53EF;&#x80FD;&#x4F1A;&#x83B7;&#x53D6;&#x591A;&#x5C3A;&#x5EA6;&#x4FE1;&#x606F;&#xFF0C;&#x8FD9;&#x5728;&#x89C6;&#x89C9;&#x4EFB;&#x52A1;&#x4E0A;&#x975E;&#x5E38;&#x91CD;&#x8981;&#xFF0C;&#x4E14;<strong>&#x4E0D;&#x9700;&#x8981;&#x5F15;&#x5165;&#x989D;&#x5916;&#x53C2;&#x6570;</strong>&#xFF0C;&#x5982;&#x679C;&#x589E;&#x52A0;&#x5206;&#x8FA8;&#x7387;&#x6216;&#x8005;&#x91C7;&#x7528;&#x5927;&#x5C3A;&#x5BF8;&#x7684;&#x5377;&#x79EF;&#x6838;&#x5219;&#x4F1A;&#x5927;&#x5927;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x7F3A;&#x70B9;&#xFF1A;&#x7531;&#x4E8E;&#x7A7A;&#x6D1E;&#x5377;&#x79EF;&#x7684;<strong>&#x8BA1;&#x7B97;&#x65B9;&#x5F0F;&#x7C7B;&#x4F3C;&#x4E8E;&#x68CB;&#x76D8;&#x683C;&#x5F0F;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x80FD;&#x4EA7;&#x751F;&#x68CB;&#x76D8;&#x683C;&#x6548;&#x5E94;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x8003;<a href="https://distill.pub/2016/deconv-checkerboard/" target="_blank" rel="noopener">&#x68CB;&#x76D8;&#x683C;&#x53EF;&#x89C6;&#x5316;</a>&#x3002;&#x5982;&#x679C;&#x81A8;&#x80C0;&#x7387;&#x592A;&#x5927;&#x5377;&#x79EF;&#x7ED3;&#x679C;&#x4E4B;&#x95F4;&#x6CA1;&#x6709;&#x76F8;&#x5173;&#x6027;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x4E22;&#x5931;&#x5C40;&#x90E8;&#x4FE1;&#x606F;&#x3002;</strong></font><br><img src="/images/Semantic_segmentation/PSPNet_D.png" alt="PSPNet"></p><h1 id="PSPNet&#x56FE;&#x50CF;&#x5206;&#x6790;"><a href="#PSPNet&#x56FE;&#x50CF;&#x5206;&#x6790;" class="headerlink" title="PSPNet&#x56FE;&#x50CF;&#x5206;&#x6790;"></a><font size="5" color="red">PSPNet&#x56FE;&#x50CF;&#x5206;&#x6790;</font></h1><p><img src="/images/Semantic_segmentation/PSPNet_A.png" alt="PSPNet"></p><h1 id="TensorFlow2-0&#x5B9E;&#x73B0;"><a href="#TensorFlow2-0&#x5B9E;&#x73B0;" class="headerlink" title="TensorFlow2.0&#x5B9E;&#x73B0;"></a><font size="4">TensorFlow2.0&#x5B9E;&#x73B0;</font></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Block(keras.Model):</span><br><span class="line">    def __init__(self, filters, strides=(1, 1), dilation_rate=(1, 1), type=&apos;Conv_Block&apos;):</span><br><span class="line">        super(Block, self).__init__()</span><br><span class="line">        self.blocks = keras.Sequential()</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters // 4, (1, 1)))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU())</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters // 4, (3, 3), strides, padding=&apos;same&apos;, dilation_rate=dilation_rate))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU())</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters, (1, 1)))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.conv = keras.layers.Conv2D(filters, (1, 1), strides)</span><br><span class="line">        self.relu = keras.layers.ReLU()</span><br><span class="line">        self.type = type</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        blocks = self.blocks(inputs)</span><br><span class="line">        if self.type == &apos;Conv_Block&apos;:</span><br><span class="line">            inputs = self.conv(inputs)</span><br><span class="line">        blocks = self.relu(blocks + inputs)</span><br><span class="line">        return blocks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add_block(filters, strides=(1, 1), dilation_rate=(1, 1), name=&apos;Block&apos;, times=1):</span><br><span class="line">    block = keras.Sequential(name=name)</span><br><span class="line">    block.add(Block(filters, strides))</span><br><span class="line">    for i in range(times - 1):</span><br><span class="line">        block.add(Block(filters, dilation_rate=dilation_rate, type=&apos;identity_block&apos;))</span><br><span class="line">    return block</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Convs(keras.Model):</span><br><span class="line">    def __init__(self, filters, kernel_size, strides, padding):</span><br><span class="line">        super(Convs, self).__init__()</span><br><span class="line">        self.block = keras.Sequential()</span><br><span class="line">        self.block.add(keras.layers.Conv2D(filters, kernel_size, strides, padding=padding))</span><br><span class="line">        self.block.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.block.add(keras.layers.ReLU())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.block(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class PSPBlock(keras.Model):</span><br><span class="line">    def __init__(self, input_channel, input_size):</span><br><span class="line">        super(PSPBlock, self).__init__()</span><br><span class="line">        self.shape = input_size</span><br><span class="line"></span><br><span class="line">        self.block1 = keras.Sequential()</span><br><span class="line">        self.block1.add(keras.layers.MaxPool2D(input_size, input_size))</span><br><span class="line">        self.block1.add(Convs(input_channel // 4, (1, 1), (1, 1), padding=&apos;same&apos;))</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential()</span><br><span class="line">        self.block2.add(keras.layers.MaxPool2D((input_size[0] // 2, input_size[1] // 2), (input_size[0] // 2, input_size[1] // 2)))</span><br><span class="line">        self.block2.add(Convs(input_channel // 4, (1, 1), (1, 1), padding=&apos;same&apos;))</span><br><span class="line"></span><br><span class="line">        self.block3 = keras.Sequential()</span><br><span class="line">        self.block3.add(keras.layers.MaxPool2D((input_size[0] // 3, input_size[1] // 3), (input_size[0] // 3, input_size[1] // 3)))</span><br><span class="line">        self.block3.add(Convs(input_channel // 4, (1, 1), (1, 1), padding=&apos;same&apos;))</span><br><span class="line"></span><br><span class="line">        self.block4 = keras.Sequential()</span><br><span class="line">        self.block4.add(keras.layers.MaxPool2D((input_size[0] // 6, input_size[1] // 6), (input_size[0] // 6, input_size[1] // 6)))</span><br><span class="line">        self.block4.add(Convs(input_channel // 4, (1, 1), (1, 1), padding=&apos;same&apos;))</span><br><span class="line"></span><br><span class="line">        self.concatenate = keras.layers.Concatenate()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block1 = self.block1(inputs)</span><br><span class="line">        block2 = self.block2(inputs)</span><br><span class="line">        block3 = self.block3(inputs)</span><br><span class="line">        block4 = self.block4(inputs)</span><br><span class="line">        resize1 = tf.image.resize(block1, self.shape)</span><br><span class="line">        resize2 = tf.image.resize(block2, self.shape)</span><br><span class="line">        resize3 = tf.image.resize(block3, self.shape)</span><br><span class="line">        resize4 = tf.image.resize(block4, self.shape)</span><br><span class="line">        output = self.concatenate([resize1, resize2, resize3, resize4, inputs])</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class PSPNet(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(PSPNet, self).__init__()</span><br><span class="line">        self.resnet_block0 = keras.Sequential(name=&apos;ResNet101_Block0&apos;)</span><br><span class="line">        self.resnet_block0.add(Convs(64, (3, 3), (2, 2), &apos;same&apos;))</span><br><span class="line">        self.resnet_block0.add(Convs(64, (3, 3), (1, 1), &apos;same&apos;))</span><br><span class="line">        self.resnet_block0.add(Convs(128, (3, 3), (1, 1), &apos;same&apos;))</span><br><span class="line">        self.resnet_block0.add(keras.layers.MaxPool2D((3, 3), (2, 2), &apos;same&apos;))</span><br><span class="line"></span><br><span class="line">        self.resnet_block1 = add_block(256, (1, 1), name=&apos;ResNet101_Block1&apos;, times=3)</span><br><span class="line"></span><br><span class="line">        self.resnet_block2 = add_block(512, (2, 2), name=&apos;ResNet101_Block2&apos;, times=4)</span><br><span class="line"></span><br><span class="line">        self.resnet_block3 = add_block(1024, (1, 1), dilation_rate=(2, 2), name=&apos;ResNet101_Block3&apos;, times=23)</span><br><span class="line"></span><br><span class="line">        self.resnet_block4 = add_block(2048, (1, 1), dilation_rate=(4, 4), name=&apos;ResNet101_Block4&apos;, times=3)</span><br><span class="line"></span><br><span class="line">        self.psp = keras.Sequential([PSPBlock(2048, (60, 60))], name=&apos;PSPBlock&apos;)</span><br><span class="line"></span><br><span class="line">        self.conv = keras.Sequential(name=&apos;Conv&apos;)</span><br><span class="line">        self.conv.add(Convs(512, (1, 1), (1, 1), &apos;same&apos;))</span><br><span class="line">        self.conv.add(keras.layers.Dropout(0.1))</span><br><span class="line">        self.conv.add(keras.layers.Conv2D(21, (1, 1), (1, 1), &apos;same&apos;))</span><br><span class="line">        self.softmax = keras.layers.Softmax(name=&apos;SoftMax&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        resnet_block0 = self.resnet_block0(inputs)</span><br><span class="line">        resnet_block1 = self.resnet_block1(resnet_block0)</span><br><span class="line">        resnet_block2 = self.resnet_block2(resnet_block1)</span><br><span class="line">        resnet_block3 = self.resnet_block3(resnet_block2)</span><br><span class="line">        resnet_block4 = self.resnet_block4(resnet_block3)</span><br><span class="line"></span><br><span class="line">        psp = self.psp(resnet_block4)</span><br><span class="line"></span><br><span class="line">        conv = self.conv(psp)</span><br><span class="line">        resize = tf.image.resize(conv, (473, 473))</span><br><span class="line">        output = self.softmax(resize)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line"></span><br><span class="line">    model = PSPNet()</span><br><span class="line">    model.build(input_shape=(None, 473, 473, 3))</span><br><span class="line">    model.summary()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/Semantic_segmentation/PSPNet_R.png" alt="PSPNet"></p><h1 id="Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;"><a href="#Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;" class="headerlink" title="Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;"></a><font size="5" color="red">Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;</font></h1><h2 id="&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E;"><a href="#&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E;" class="headerlink" title="&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E;"></a>&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E;</h2><ul><li>project<ul><li>shape<ul><li>train_imgs(&#x8BAD;&#x7EC3;&#x96C6;&#x56FE;&#x50CF;&#x6587;&#x4EF6;&#x5939;)</li><li>train_mask(&#x8BAD;&#x7EC3;&#x96C6;&#x63A9;&#x6A21;&#x6587;&#x4EF6;&#x5939;)</li><li>test_imgs(&#x6D4B;&#x8BD5;&#x96C6;&#x56FE;&#x50CF;&#x6587;&#x4EF6;&#x5939;)</li></ul></li><li>PSPNet_weight(&#x6A21;&#x578B;&#x6743;&#x91CD;&#x6587;&#x4EF6;&#x5939;)</li><li>PSPNet_test_result(&#x6D4B;&#x8BD5;&#x96C6;&#x7ED3;&#x679C;&#x6587;&#x4EF6;&#x5939;)</li><li>PSPNet.py</li></ul></li></ul><h2 id="&#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E;"><a href="#&#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E;" class="headerlink" title="&#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E;"></a>&#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E;</h2><ol><li>&#x8BED;&#x4E49;&#x5206;&#x5272;&#x5B9E;&#x6218;&#x8FD0;&#x884C;&#x8F83;&#x4E3A;&#x7B80;&#x5355;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x7684;&#x8F93;&#x5165;&#x7684;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x4E3A;&#x56FE;&#x50CF;&#xFF0C;&#x8F93;&#x5165;&#x7684;&#x6807;&#x7B7E;&#x6570;&#x636E;&#x4E5F;&#x662F;&#x56FE;&#x50CF;&#xFF0C;&#x9996;&#x5148;<strong>&#x8981;&#x5BF9;&#x8F93;&#x5165;&#x7684;&#x6807;&#x7B7E;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x7F16;&#x7801;&#xFF0C;&#x8F6C;&#x6362;&#x4E3A;&#x7C7B;&#x522B;&#x4FE1;&#x606F;</strong>&#xFF0C;&#x8981;&#x548C;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x7EF4;&#x5EA6;&#x76F8;&#x5339;&#x914D;&#xFF0C;&#x4ECE;(batch_size, height, width, 1)&#x8F6C;&#x6362;&#x4E3A;(batch_size, height, width, num_class + 1)&#xFF0C;<strong>&#x67D0;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x4E3A;&#x54EA;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#xFF0C;&#x5219;&#x5728;&#x8BE5;&#x901A;&#x9053;&#x4E0A;&#x7F6E;1&#xFF0C;&#x5176;&#x4F59;&#x901A;&#x9053;&#x7F6E;0</strong>&#x3002;&#x5373;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x5165;&#x5927;&#x5C0F;&#x4E3A;(batch_size, height, width, 3)&#xFF0C;&#x8F93;&#x51FA;&#x5927;&#x5C0F;&#x4E3A;(batch_size, height, width, num_class + 1)&#x3002;</li><li>&#x8BBE;&#x8BA1;&#x635F;&#x5931;&#x51FD;&#x6570;&#xFF0C;&#x7B80;&#x5355;&#x60C5;&#x51B5;&#x8BBE;&#x7F6E;&#x4EA4;&#x53C9;&#x71B5;&#x635F;&#x5931;&#x51FD;&#x6570;&#x5373;&#x53EF;&#x8FBE;&#x5230;&#x8F83;&#x597D;&#x6548;&#x679C;&#x3002;</li><li>&#x642D;&#x5EFA;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;<strong>&#x8BBE;&#x7F6E;&#x5408;&#x9002;&#x53C2;&#x6570;</strong>&#xFF0C;&#x8FDB;&#x884C;&#x8BAD;&#x7EC3;&#x3002;</li><li>&#x9884;&#x6D4B;&#x65F6;&#xFF0C;&#x9700;&#x8981;&#x6839;&#x636E;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x8FDB;&#x884C;<strong>&#x9006;&#x5411;&#x89E3;&#x7801;(&#x7F16;&#x7801;&#x7684;&#x53CD;&#x8FC7;&#x7A0B;)</strong>&#xFF0C;&#x5BFB;&#x627E;<strong>&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#xFF0C;&#x54EA;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x4E0A;&#x503C;&#x6700;&#x5927;&#x5219;&#x5F52;&#x4E3A;&#x54EA;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;</strong>&#xFF0C;&#x5373;&#x53EF;&#x5B8C;&#x6210;&#x5B9E;&#x6218;&#x7684;&#x8FC7;&#x7A0B;&#x3002;</li></ol><h2 id="&#x5C0F;&#x6280;&#x5DE7;"><a href="#&#x5C0F;&#x6280;&#x5DE7;" class="headerlink" title="&#x5C0F;&#x6280;&#x5DE7;"></a>&#x5C0F;&#x6280;&#x5DE7;</h2><ol><li>&#x8BBE;&#x7F6E;&#x7684;&#x56FE;&#x50CF;<strong>&#x7C7B;&#x522B;&#x6570;&#x4E3A;&#x5B9E;&#x9645;&#x7C7B;&#x522B;&#x6570;+1</strong>&#xFF0C;1&#x4EE3;&#x8868;&#x80CC;&#x666F;&#x7C7B;&#x522B;&#xFF0C;<strong>&#x6B64;&#x6570;&#x636E;&#x96C6;&#x4E3A;3&#x7C7B;&#xFF0C;&#x6700;&#x540E;&#x7684;&#x901A;&#x9053;&#x6570;&#x4E3A;4&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x9884;&#x6D4B;&#x4E00;&#x7C7B;&#x7269;&#x4F53;</strong>&#x3002;&#x5728;&#x901A;&#x9053;&#x65B9;&#x5411;&#x6C42;Softmax&#xFF0C;&#x5E76;&#x4E14;&#x6C42;&#x51FA;&#x6700;&#x5927;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;0&#x5219;&#x4EE3;&#x8868;&#x80CC;&#x666F;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;1&#x5219;&#x4EE3;&#x8868;&#x5706;&#x5F62;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;2&#x5219;&#x4EE3;&#x8868;&#x4E09;&#x89D2;&#x5F62;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;3&#x5219;&#x4EE3;&#x8868;&#x6B63;&#x65B9;&#x5F62;&#x3002;</li><li>&#x5728;PSPNet&#x4E2D;&#x53EA;&#x4F7F;&#x7528;ResNet101&#x7684;&#x6700;&#x540E;&#x4E00;&#x5C42;&#xFF0C;<strong>&#x53EF;&#x4EE5;&#x501F;&#x9274;UNet&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x591A;&#x5C42;&#x8F93;&#x51FA;&#xFF0C;&#x5B9E;&#x73B0;&#x591A;&#x5C3A;&#x5EA6;&#x7279;&#x5F81;&#x878D;&#x5408;&#x3002;</strong></li><li>&#x8BBE;&#x7F6E;&#x4E86;<strong>&#x6743;&#x91CD;&#x7684;&#x4FDD;&#x5B58;&#x65B9;&#x5F0F;</strong>&#xFF0C;<strong>&#x5B66;&#x4E60;&#x7387;&#x7684;&#x4E0B;&#x964D;&#x65B9;&#x5F0F;</strong>&#x548C;<strong>&#x65E9;&#x505C;&#x65B9;&#x5F0F;</strong>&#x3002;</li><li>&#x4F7F;&#x7528;<strong>yield</strong>&#x5173;&#x952E;&#x5B57;&#xFF0C;&#x4EA7;&#x751F;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#xFF0C;&#x4E0D;&#x7528;&#x5C06;&#x6240;&#x6709;&#x7684;&#x6570;&#x636E;&#x90FD;&#x4FDD;&#x5B58;&#x4E0B;&#x6765;&#xFF0C;&#x5927;&#x5927;&#x8282;&#x7EA6;&#x5185;&#x5B58;&#x3002;</li><li>&#x5176;&#x4E2D;&#x5C06;1000&#x4E2A;&#x6570;&#x636E;&#xFF0C;&#x5206;&#x6210;800&#x4E2A;&#x8BAD;&#x7EC3;&#x96C6;&#xFF0C;100&#x4E2A;&#x9A8C;&#x8BC1;&#x96C6;&#x548C;100&#x4E2A;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x81EA;&#x884C;&#x4FEE;&#x6539;&#x3002;</li><li>&#x6CE8;&#x610F;&#x5176;&#x4E2D;&#x7684;&#x4E00;&#x4E9B;&#x7EF4;&#x5EA6;&#x53D8;&#x6362;&#x548C;<strong>numpy</strong>&#xFF0C;<strong>tensorflow</strong>&#x5E38;&#x7528;&#x64CD;&#x4F5C;&#xFF0C;&#x5426;&#x5219;&#x5728;&#x9605;&#x8BFB;&#x4EE3;&#x7801;&#x65F6;&#x53EF;&#x80FD;&#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x56F0;&#x96BE;&#x3002;</li><li>&#x91D1;&#x5B57;&#x5854;&#x6C60;&#x5316;&#x6A21;&#x5757;&#x4E2D;&#x7684;&#x6C60;&#x5316;&#x6838;&#xFF0C;&#x53EF;&#x4EE5;<strong>&#x6839;&#x636E;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x8C03;&#x6574;</strong>&#xFF0C;&#x8BBA;&#x6587;&#x4E2D;&#x91D1;&#x5B57;&#x5854;&#x6C60;&#x5316;&#x6A21;&#x5757;&#x7684;&#x8F93;&#x5165;&#x5C3A;&#x5BF8;&#x4E3A;60x60&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;60x60&#xFF0C;30x30&#xFF0C;20x20&#xFF0C;10x10&#x7684;&#x6C60;&#x5316;&#x6838;&#xFF0C;&#x5728;&#x8FD9;&#x4E2A;&#x7B80;&#x5355;&#x6570;&#x636E;&#x96C6;&#x4E2D;&#xFF0C;&#x8F93;&#x5165;&#x5C3A;&#x5BF8;&#x4E3A;8&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x9009;&#x62E9;&#x7684;&#x662F;8x8&#xFF0C;4x4&#xFF0C;2x2&#xFF0C;1x1&#x7684;&#x6C60;&#x5316;&#x6838;&#x3002;</li><li>PSPNet&#x7684;<strong>&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x4E3A;ResNet101</strong>&#xFF0C;&#x5B9E;&#x6218;&#x4E2D;&#x6211;&#x9009;&#x62E9;&#x7684;&#x662F;ResNet50&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x90E8;&#x5206;&#x5185;&#x5BB9;&#xFF0C;&#x9009;&#x62E9;&#x5176;&#x4ED6;&#x7684;&#x7F51;&#x7EDC;&#x8FDB;&#x884C;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#xFF0C;&#x6BD4;&#x8F83;&#x4E0D;&#x540C;&#x7F51;&#x7EDC;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x8FD0;&#x884C;&#x901F;&#x5EA6;&#xFF0C;&#x6700;&#x7EC8;&#x7ED3;&#x679C;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x5F02;&#x3002;</li><li>&#x5728;&#x8BBA;&#x6587;&#x4E2D;&#x63D0;&#x5230;&#x7684;AL(&#x8F85;&#x52A9;&#x635F;&#x5931;)&#x662F;&#x5728;&#x6784;&#x5EFA;ResNet101&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x65F6;&#x4F7F;&#x7528;&#x7684;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x4E3A;&#x4E86;&#x7B80;&#x5355;&#x8D77;&#x89C1;&#xFF0C;&#x76F4;&#x63A5;&#x4F7F;&#x7528;ResNet50&#x3002;</li><li>&#x56FE;&#x50CF;&#x8F93;&#x5165;&#x53EF;&#x4EE5;&#x5148;&#x5C06;&#x5176;<strong>&#x5F52;&#x4E00;&#x5316;&#x5230;0-1&#x4E4B;&#x95F4;&#x6216;&#x8005;-1-1&#x4E4B;&#x95F4;</strong>&#xFF0C;&#x56E0;&#x4E3A;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x4E00;&#x822C;&#x90FD;&#x6BD4;&#x8F83;&#x5C0F;&#xFF0C;&#x6240;&#x4EE5;&#x5F52;&#x4E00;&#x5316;&#x540E;&#x8BA1;&#x7B97;&#x65B9;&#x4FBF;&#xFF0C;&#x6536;&#x655B;&#x8F83;&#x5FEB;&#x3002;</li><li>&#x5B9E;&#x9645;&#x7684;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x5E38;&#x5E38;&#x8FD8;&#x9700;&#x8981;&#x5BF9;&#x6570;&#x636E;&#x96C6;&#x8FDB;&#x884C;<strong>&#x5927;&#x5C0F;&#x8C03;&#x6574;&#x548C;&#x589E;&#x5F3A;</strong>&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x4E3A;&#x4E86;&#x7B80;&#x5355;&#x8D77;&#x89C1;&#xFF0C;&#x6CA1;&#x6709;&#x8FDB;&#x884C;&#x590D;&#x6742;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5E94;&#x7528;&#x4E2D;&#x8981;&#x8BB0;&#x5F97;&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x7684;&#x9700;&#x8981;&#xFF0C;&#x5BF9;&#x56FE;&#x50CF;&#x8FDB;&#x884C;<strong>resize&#x6216;&#x8005;padding</strong>&#xFF0C;&#x7136;&#x540E;<strong>&#x65CB;&#x8F6C;</strong>&#xFF0C;<strong>&#x5BF9;&#x6BD4;&#x5EA6;&#x589E;&#x5F3A;</strong>&#xFF0C;<strong>&#x4EFF;&#x5C04;&#x8FD0;&#x7B97;</strong>&#x7B49;&#x7B49;&#x64CD;&#x4F5C;&#xFF0C;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x9C81;&#x68D2;&#x6027;&#xFF0C;&#x5E76;&#x4E14;&#x5B9E;&#x9645;&#x4E2D;&#x7684;&#x56FE;&#x50CF;&#x4E0D;&#x4E00;&#x5B9A;&#x6309;&#x7167;&#x987A;&#x5E8F;&#x547D;&#x540D;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x5E94;&#x7528;&#x4E2D;&#x4E5F;&#x8981;&#x6CE8;&#x610F;&#x56FE;&#x50CF;&#x8BFB;&#x53D6;&#x7684;&#x6587;&#x4EF6;&#x540D;&#x3002;</li></ol><h2 id="&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;"><a href="#&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;" class="headerlink" title="&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;"></a>&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import numpy as np</span><br><span class="line">import cv2 as cv</span><br><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Block(keras.Model):</span><br><span class="line">    def __init__(self, filters, strides=(1, 1), dilation_rate=(1, 1), type=&apos;Conv_Block&apos;):</span><br><span class="line">        super(Block, self).__init__()</span><br><span class="line">        self.blocks = keras.Sequential()</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters // 4, (1, 1)))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU())</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters // 4, (3, 3), strides, padding=&apos;same&apos;, dilation_rate=dilation_rate))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU())</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters, (1, 1)))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.conv = keras.layers.Conv2D(filters, (1, 1), strides)</span><br><span class="line">        self.relu = keras.layers.ReLU()</span><br><span class="line">        self.type = type</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        blocks = self.blocks(inputs)</span><br><span class="line">        if self.type == &apos;Conv_Block&apos;:</span><br><span class="line">            inputs = self.conv(inputs)</span><br><span class="line">        blocks = self.relu(blocks + inputs)</span><br><span class="line">        return blocks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add_block(filters, strides=(1, 1), dilation_rate=(1, 1), name=&apos;Block&apos;, times=1):</span><br><span class="line">    block = keras.Sequential(name=name)</span><br><span class="line">    block.add(Block(filters, strides))</span><br><span class="line">    for i in range(times - 1):</span><br><span class="line">        block.add(Block(filters, dilation_rate=dilation_rate, type=&apos;identity_block&apos;))</span><br><span class="line">    return block</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Convs(keras.Model):</span><br><span class="line">    def __init__(self, filters, kernel_size, strides, padding):</span><br><span class="line">        super(Convs, self).__init__()</span><br><span class="line">        self.block = keras.Sequential()</span><br><span class="line">        self.block.add(keras.layers.Conv2D(filters, kernel_size, strides, padding=padding))</span><br><span class="line">        self.block.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.block.add(keras.layers.ReLU())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.block(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class PSPBlock(keras.Model):</span><br><span class="line">    def __init__(self, input_channel, input_size):</span><br><span class="line">        super(PSPBlock, self).__init__()</span><br><span class="line">        self.shape = input_size</span><br><span class="line"></span><br><span class="line">        self.block1 = keras.Sequential()</span><br><span class="line">        self.block1.add(keras.layers.MaxPool2D(input_size, input_size))</span><br><span class="line">        self.block1.add(Convs(input_channel // 4, (1, 1), (1, 1), padding=&apos;same&apos;))</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential()</span><br><span class="line">        self.block2.add(keras.layers.MaxPool2D((input_size[0] // 2, input_size[1] // 2), (input_size[0] // 2, input_size[1] // 2)))</span><br><span class="line">        self.block2.add(Convs(input_channel // 4, (1, 1), (1, 1), padding=&apos;same&apos;))</span><br><span class="line"></span><br><span class="line">        self.block3 = keras.Sequential()</span><br><span class="line">        self.block3.add(keras.layers.MaxPool2D((input_size[0] // 4, input_size[1] // 4), (input_size[0] // 4, input_size[1] // 4)))</span><br><span class="line">        self.block3.add(Convs(input_channel // 4, (1, 1), (1, 1), padding=&apos;same&apos;))</span><br><span class="line"></span><br><span class="line">        self.block4 = keras.Sequential()</span><br><span class="line">        self.block4.add(keras.layers.MaxPool2D((input_size[0] // 8, input_size[1] // 8), (input_size[0] // 8, input_size[1] // 8)))</span><br><span class="line">        self.block4.add(Convs(input_channel // 4, (1, 1), (1, 1), padding=&apos;same&apos;))</span><br><span class="line"></span><br><span class="line">        self.concatenate = keras.layers.Concatenate()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block1 = self.block1(inputs)</span><br><span class="line">        block2 = self.block2(inputs)</span><br><span class="line">        block3 = self.block3(inputs)</span><br><span class="line">        block4 = self.block4(inputs)</span><br><span class="line">        resize1 = tf.image.resize(block1, self.shape)</span><br><span class="line">        resize2 = tf.image.resize(block2, self.shape)</span><br><span class="line">        resize3 = tf.image.resize(block3, self.shape)</span><br><span class="line">        resize4 = tf.image.resize(block4, self.shape)</span><br><span class="line">        output = self.concatenate([resize1, resize2, resize3, resize4, inputs])</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Small_PSPNet(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Small_PSPNet, self).__init__()</span><br><span class="line">        self.resnet_block0 = keras.Sequential(name=&apos;ResNet101_Block0&apos;)</span><br><span class="line">        self.resnet_block0.add(Convs(32, (3, 3), (2, 2), &apos;same&apos;))</span><br><span class="line">        self.resnet_block0.add(Convs(32, (3, 3), (1, 1), &apos;same&apos;))</span><br><span class="line">        self.resnet_block0.add(Convs(64, (3, 3), (1, 1), &apos;same&apos;))</span><br><span class="line">        self.resnet_block0.add(keras.layers.MaxPool2D((3, 3), (2, 2), &apos;same&apos;))</span><br><span class="line"></span><br><span class="line">        self.resnet_block1 = add_block(128, (1, 1), name=&apos;ResNet101_Block1&apos;, times=3)</span><br><span class="line"></span><br><span class="line">        self.resnet_block2 = add_block(256, (2, 2), name=&apos;ResNet101_Block2&apos;, times=3)</span><br><span class="line"></span><br><span class="line">        self.resnet_block3 = add_block(512, (2, 2), name=&apos;ResNet101_Block3&apos;, times=3)</span><br><span class="line"></span><br><span class="line">        self.resnet_block4 = add_block(1024, (1, 1), dilation_rate=(2, 2), name=&apos;ResNet101_Block4&apos;, times=3)</span><br><span class="line"></span><br><span class="line">        self.psp3 = keras.Sequential([PSPBlock(1024, (8, 8))], name=&apos;PSPBlock_3&apos;)</span><br><span class="line">        self.upsample3 = keras.layers.UpSampling2D(name=&apos;UpSample_3&apos;)</span><br><span class="line">        self.concatenate3 = keras.layers.Concatenate(name=&apos;Concatenate_3&apos;)</span><br><span class="line">        self.conv3 = keras.Sequential([Convs(512, (1, 1), (1, 1), &apos;same&apos;)], name=&apos;Convs_3&apos;)</span><br><span class="line"></span><br><span class="line">        self.psp2 = keras.Sequential([PSPBlock(512, (16, 16))], name=&apos;PSPBlock_2&apos;)</span><br><span class="line"></span><br><span class="line">        self.conv = keras.Sequential(name=&apos;Conv&apos;)</span><br><span class="line">        self.conv.add(Convs(128, (1, 1), (1, 1), &apos;same&apos;))</span><br><span class="line">        self.conv.add(keras.layers.Dropout(0.1))</span><br><span class="line">        self.conv.add(keras.layers.Conv2D(num_class, (1, 1), (1, 1), &apos;same&apos;))</span><br><span class="line">        self.softmax = keras.layers.Softmax(name=&apos;SoftMax&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        resnet_block0 = self.resnet_block0(inputs)</span><br><span class="line">        resnet_block1 = self.resnet_block1(resnet_block0)</span><br><span class="line">        resnet_block2 = self.resnet_block2(resnet_block1)</span><br><span class="line">        resnet_block3 = self.resnet_block3(resnet_block2)</span><br><span class="line">        resnet_block4 = self.resnet_block4(resnet_block3)</span><br><span class="line"></span><br><span class="line">        psp3 = self.psp3(resnet_block4)</span><br><span class="line">        upsample3 = self.upsample3(psp3)</span><br><span class="line">        concatenate3 = self.concatenate3([resnet_block2, upsample3])</span><br><span class="line">        conv3 = self.conv3(concatenate3)</span><br><span class="line"></span><br><span class="line">        psp2 = self.psp2(conv3)</span><br><span class="line"></span><br><span class="line">        conv = self.conv(psp2)</span><br><span class="line">        resize = tf.image.resize(conv, (img_size[0], img_size[1]))</span><br><span class="line">        output = self.softmax(resize)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def generate_arrays_from_file(train_data, batch_size):</span><br><span class="line">    # &#x83B7;&#x53D6;&#x603B;&#x957F;&#x5EA6;</span><br><span class="line">    n = len(train_data)</span><br><span class="line">    i = 0</span><br><span class="line">    while 1:</span><br><span class="line">        X_train = []</span><br><span class="line">        Y_train = []</span><br><span class="line">        # &#x83B7;&#x53D6;&#x4E00;&#x4E2A;batch_size&#x5927;&#x5C0F;&#x7684;&#x6570;&#x636E;</span><br><span class="line">        for _ in range(batch_size):</span><br><span class="line">            if i == 0:</span><br><span class="line">                np.random.shuffle(train_data)</span><br><span class="line">            # &#x4ECE;&#x6587;&#x4EF6;&#x4E2D;&#x8BFB;&#x53D6;&#x56FE;&#x50CF;</span><br><span class="line">            img = cv.imread(imgs_path + &apos;\\&apos; + str(train_data[i]) + &apos;.jpg&apos;)</span><br><span class="line">            img = img / 127.5 - 1</span><br><span class="line">            X_train.append(img)</span><br><span class="line"></span><br><span class="line">            # &#x4ECE;&#x6587;&#x4EF6;&#x4E2D;&#x8BFB;&#x53D6;&#x56FE;&#x50CF;</span><br><span class="line">            img = cv.imread(mask_path + &apos;\\&apos; + str(train_data[i]) + &apos;.png&apos;)</span><br><span class="line">            seg_labels = np.zeros((img_size[0], img_size[1], num_class))</span><br><span class="line">            for c in range(num_class):</span><br><span class="line">                seg_labels[:, :, c] = (img[:, :, 0] == c).astype(int)</span><br><span class="line">            Y_train.append(seg_labels)</span><br><span class="line"></span><br><span class="line">            # &#x8BFB;&#x5B8C;&#x4E00;&#x4E2A;&#x5468;&#x671F;&#x540E;&#x91CD;&#x65B0;&#x5F00;&#x59CB;</span><br><span class="line">            i = (i + 1) % n</span><br><span class="line">        yield tf.constant(X_train), tf.constant(Y_train)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # &#x5305;&#x62EC;&#x80CC;&#x666F;</span><br><span class="line">    num_class = 4</span><br><span class="line">    train_data = list(range(800))</span><br><span class="line">    validation_data = list(range(800, 900))</span><br><span class="line">    test_data = range(900, 1000)</span><br><span class="line">    epochs = 50</span><br><span class="line">    batch_size = 16</span><br><span class="line">    tf.random.set_seed(22)</span><br><span class="line">    img_size = (128, 128)</span><br><span class="line">    colors = [[0, 0, 0], [0, 0, 128], [0, 128, 0], [128, 0, 0]]</span><br><span class="line"></span><br><span class="line">    mask_path = r&apos;.\shape\train_mask&apos;</span><br><span class="line">    imgs_path = r&apos;.\shape\train_imgs&apos;</span><br><span class="line">    test_path = r&apos;.\shape\test_imgs&apos;</span><br><span class="line">    save_path = r&apos;.\PSPNet_test_result&apos;</span><br><span class="line">    weight_path = r&apos;.\PSPNet_weight&apos;</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        os.mkdir(save_path)</span><br><span class="line">    except FileExistsError:</span><br><span class="line">        print(save_path + &apos;has been exist&apos;)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        os.mkdir(weight_path)</span><br><span class="line">    except FileExistsError:</span><br><span class="line">        print(weight_path + &apos;has been exist&apos;)</span><br><span class="line"></span><br><span class="line">    model = Small_PSPNet()</span><br><span class="line">    model.build(input_shape=(None, img_size[0], img_size[1], 3))</span><br><span class="line">    model.summary()</span><br><span class="line"></span><br><span class="line">    optimizor = keras.optimizers.Adam(lr=1e-3)</span><br><span class="line">    lossor = keras.losses.BinaryCrossentropy()</span><br><span class="line"></span><br><span class="line">    model.compile(optimizer=optimizor, loss=lossor, metrics=[&apos;accuracy&apos;])</span><br><span class="line"></span><br><span class="line">    # &#x4FDD;&#x5B58;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;3&#x4E16;&#x4EE3;&#x4FDD;&#x5B58;&#x4E00;&#x6B21;</span><br><span class="line">    checkpoint_period = keras.callbacks.ModelCheckpoint(</span><br><span class="line">        weight_path + &apos;\\&apos; + &apos;ep{epoch:03d}-loss{loss:.3f}-val_loss{val_loss:.3f}.h5&apos;,</span><br><span class="line">        monitor=&apos;val_loss&apos;,</span><br><span class="line">        save_weights_only=True,</span><br><span class="line">        save_best_only=True,</span><br><span class="line">        period=3</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    # &#x5B66;&#x4E60;&#x7387;&#x4E0B;&#x964D;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;val_loss3&#x6B21;&#x4E0D;&#x4E0B;&#x964D;&#x5C31;&#x4E0B;&#x964D;&#x5B66;&#x4E60;&#x7387;&#x7EE7;&#x7EED;&#x8BAD;&#x7EC3;</span><br><span class="line">    reduce_lr = keras.callbacks.ReduceLROnPlateau(</span><br><span class="line">        monitor=&apos;val_loss&apos;,</span><br><span class="line">        factor=0.5,</span><br><span class="line">        patience=3,</span><br><span class="line">        verbose=1</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    # &#x662F;&#x5426;&#x9700;&#x8981;&#x65E9;&#x505C;&#xFF0C;&#x5F53;val_loss&#x4E00;&#x76F4;&#x4E0D;&#x4E0B;&#x964D;&#x7684;&#x65F6;&#x5019;&#x610F;&#x5473;&#x7740;&#x6A21;&#x578B;&#x57FA;&#x672C;&#x8BAD;&#x7EC3;&#x5B8C;&#x6BD5;&#xFF0C;&#x53EF;&#x4EE5;&#x505C;&#x6B62;</span><br><span class="line">    early_stopping = keras.callbacks.EarlyStopping(</span><br><span class="line">        monitor=&apos;val_loss&apos;,</span><br><span class="line">        min_delta=0,</span><br><span class="line">        patience=10,</span><br><span class="line">        verbose=1</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    model.fit_generator(generate_arrays_from_file(train_data, batch_size),</span><br><span class="line">                        steps_per_epoch=max(1, len(train_data) // batch_size),</span><br><span class="line">                        validation_data=generate_arrays_from_file(validation_data, batch_size),</span><br><span class="line">                        validation_steps=max(1, len(validation_data) // batch_size),</span><br><span class="line">                        epochs=epochs,</span><br><span class="line">                        callbacks=[checkpoint_period, reduce_lr, early_stopping])</span><br><span class="line"></span><br><span class="line">    for name in test_data:</span><br><span class="line">        test_img_path = test_path + &apos;\\&apos; + str(name) + &apos;.jpg&apos;</span><br><span class="line">        save_img_path = save_path + &apos;\\&apos; + str(name) + &apos;.png&apos;</span><br><span class="line">        test_img = cv.imread(test_img_path)</span><br><span class="line">        test_img = tf.constant([test_img / 127.5 - 1])</span><br><span class="line">        test_mask = model.predict(test_img)</span><br><span class="line">        test_mask = np.reshape(test_mask, (img_size[0], img_size[1], num_class))</span><br><span class="line">        test_mask = np.argmax(test_mask, axis=-1)</span><br><span class="line">        seg_img = np.zeros((img_size[0], img_size[1], 3))</span><br><span class="line">        for c in range(num_class):</span><br><span class="line">            seg_img[:, :, 0] += ((test_mask == c) * (colors[c][0]))</span><br><span class="line">            seg_img[:, :, 1] += ((test_mask == c) * (colors[c][1]))</span><br><span class="line">            seg_img[:, :, 2] += ((test_mask == c) * (colors[c][2]))</span><br><span class="line">        seg_img = seg_img.astype(np.uint8)</span><br><span class="line">        cv.imwrite(save_img_path, seg_img)</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"><a href="#&#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C;" class="headerlink" title="&#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a>&#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</h2><p><img src="/images/Semantic_segmentation/PSPNet_T.png" alt="PSPNet"></p><h1 id="PSPNet&#x5C0F;&#x7ED3;"><a href="#PSPNet&#x5C0F;&#x7ED3;" class="headerlink" title="PSPNet&#x5C0F;&#x7ED3;"></a><font size="5" color="red">PSPNet&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;PSPNet&#x662F;&#x4E00;&#x79CD;&#x9AD8;&#x6548;&#x7684;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x7F51;&#x7EDC;&#xFF0C;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;PSPNet&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x6709;49M&#xFF0C;PSPNet&#x4E0D;&#x540C;&#x4E8E;SegNet&#x548C;UNet&#xFF0C;&#x6CA1;&#x6709;&#x5F88;&#x5BF9;&#x79F0;&#x7684;&#x7F16;&#x7801;&#x89E3;&#x7801;&#x7ED3;&#x6784;&#xFF0C;&#x5728;&#x7F16;&#x7801;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x4F7F;&#x7528;<strong>&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;&#x91D1;&#x5B57;&#x5854;&#x6C60;&#x5316;&#x6838;&#x5B8C;&#x6210;&#x5BF9;&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;&#x7279;&#x5F81;&#x7684;&#x878D;&#x5408;</strong>&#xFF0C;&#x5728;&#x89E3;&#x7801;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x76F4;&#x63A5;&#x4F7F;&#x7528;<strong>&#x7B80;&#x5355;&#x7684;resize&#x5B8C;&#x6210;&#x5BF9;&#x56FE;&#x50CF;&#x4FE1;&#x606F;&#x7684;&#x6062;&#x590D;</strong>&#xFF0C;&#x5BF9;&#x540E;&#x9762;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#x7684;&#x53D1;&#x5C55;&#x6709;&#x91CD;&#x8981;&#x7684;&#x5F71;&#x54CD;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;PSPNet&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="语义分割网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>UNet</title>
    <link href="https://USTCcoder.github.io/2020/04/21/Semantic_segmentation%20UNet/"/>
    <id>https://USTCcoder.github.io/2020/04/21/Semantic_segmentation UNet/</id>
    <published>2020-04-21T07:13:21.000Z</published>
    <updated>2020-05-09T09:19:42.026Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">UNet</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>UNet</strong>:&#x4E8E;<strong>2015&#x5E74;&#x53D1;&#x8868;&#x4E8E;MICCA</strong>&#xFF0C;&#x8BBE;&#x8BA1;&#x7684;&#x5C31;&#x662F;&#x5E94;&#x7528;&#x4E8E;<strong>&#x533B;&#x5B66;&#x56FE;&#x50CF;</strong>&#x7684;&#x5206;&#x5272;&#xFF0C;&#x7531;&#x4E8E;&#x533B;&#x5B66;&#x5F71;&#x54CD;&#x672C;&#x8EAB;&#x7684;&#x6027;&#x8D28;&#xFF0C;&#x8BED;&#x4E49;&#x8F83;&#x4E3A;&#x7B80;&#x5355;&#xFF0C;&#x7ED3;&#x6784;&#x8F83;&#x4E3A;&#x56FA;&#x5B9A;&#xFF0C;&#x6570;&#x636E;&#x91CF;&#x8F83;&#x5C11;&#x4E14;&#x5177;&#x6709;&#x591A;&#x6A21;&#x6001;&#x7684;&#x6027;&#x8D28;&#xFF0C;&#x6839;&#x636E;CT&#x704C;&#x6CE8;&#x65B9;&#x6CD5;&#x4E0D;&#x540C;&#xFF0C;&#x5177;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x6A21;&#x6001;&#x3002;UNet&#x5B9E;&#x73B0;&#x4E86;&#x4F7F;&#x7528;<strong>&#x5C11;&#x91CF;&#x6570;&#x636E;&#x96C6;&#x8FDB;&#x884C;&#x5927;&#x5C3A;&#x5BF8;&#x56FE;&#x50CF;</strong>&#x7684;&#x6709;&#x6548;&#x7B97;&#x6CD5;&#xFF0C;&#x56E0;&#x4E3A;<strong>&#x7ED3;&#x6784;&#x7C7B;&#x4F3C;U&#x578B;&#xFF0C;&#x6545;&#x79F0;&#x4E4B;&#x4E3A;UNet&#x3002;</strong><a id="more"></a></p><p><img src="/images/Semantic_segmentation/UNet.png" alt="UNet"></p><h1 id="UNet&#x7279;&#x70B9;"><a href="#UNet&#x7279;&#x70B9;" class="headerlink" title="UNet&#x7279;&#x70B9;"></a><font size="5" color="red">UNet&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x7B80;&#x5355;&#xFF0C;&#x6613;&#x4E8E;&#x5B9E;&#x73B0;</font><br>&#x2003;&#x2003;<font size="3">&#x4F7F;&#x7528;<strong>Over-tile</strong>&#x7B56;&#x7565;&#xFF0C;&#x56E0;&#x4E3A;&#x533B;&#x5B66;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x7684;&#x56FE;&#x50CF;&#x5C3A;&#x5BF8;&#x8F83;&#x5927;&#xFF0C;&#x6211;&#x4EEC;&#x9488;&#x5BF9;&#x4E8E;&#x67D0;&#x4E00;&#x533A;&#x57DF;&#x8FDB;&#x884C;&#x5206;&#x5272;&#x65F6;&#xFF0C;&#x53EF;&#x4EE5;<strong>&#x83B7;&#x53D6;&#x5468;&#x56F4;&#x66F4;&#x5927;&#x5C3A;&#x5BF8;&#x7684;&#x4FE1;&#x606F;&#x4F5C;&#x4E3A;&#x4E0A;&#x4E0B;&#x6587;</strong>&#xFF0C;&#x5728;&#x5377;&#x79EF;&#x65F6;&#x53EA;&#x4F7F;&#x7528;&#x6709;&#x6548;&#x90E8;&#x5206;&#xFF0C;&#x8FD9;&#x6837;<strong>&#x9632;&#x6B62;padding=same&#x65F6;&#x6DFB;&#x52A0;&#x65E0;&#x6548;&#x4FE1;&#x606F;</strong>&#x3002;&#x56E0;&#x6B64;&#x56FE;&#x50CF;&#x7684;&#x5C3A;&#x5BF8;&#x4F1A;&#x7F29;&#x5C0F;&#xFF0C;&#x5728;&#x7F51;&#x7EDC;&#x4E2D;&#x9700;&#x8981;<strong>&#x5BF9;&#x6D45;&#x5C42;&#x7279;&#x5F81;&#x8FDB;&#x884C;Crop</strong>&#x4E4B;&#x540E;&#x624D;&#x53EF;&#x4EE5;&#x4E0E;&#x6DF1;&#x5C42;&#x7279;&#x5F81;&#x8FDB;&#x884C;Concatenate&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x4F7F;&#x7528;<strong>&#x968F;&#x673A;&#x5F39;&#x6027;&#x53D8;&#x5F62;&#x5BF9;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x589E;&#x5F3A;</strong>&#xFF0C;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x9C81;&#x68D2;&#x6027;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x4F7F;&#x7528;<strong>&#x52A0;&#x6743;Loss</strong>&#xFF0C;&#x5BF9;&#x4E8E;&#x67D0;&#x4E00;&#x70B9;&#x5230;&#x8FB9;&#x754C;&#x7684;&#x8DDD;&#x79BB;&#x5448;&#x9AD8;&#x65AF;&#x5173;&#x7CFB;&#x7684;&#x6743;&#x91CD;&#xFF0C;&#x8DDD;&#x79BB;&#x8FB9;&#x754C;&#x8D8A;&#x8FD1;&#x6743;&#x91CD;&#x8D8A;&#x5927;&#xFF0C;&#x8DDD;&#x79BB;&#x8D8A;&#x8FDC;&#x6743;&#x91CD;&#x8D8A;&#x5C0F;&#x3002;</font></p><h1 id="UNet&#x56FE;&#x50CF;&#x5206;&#x6790;"><a href="#UNet&#x56FE;&#x50CF;&#x5206;&#x6790;" class="headerlink" title="UNet&#x56FE;&#x50CF;&#x5206;&#x6790;"></a><font size="5" color="red">UNet&#x56FE;&#x50CF;&#x5206;&#x6790;</font></h1><p><img src="/images/Semantic_segmentation/UNet_A.png" alt="UNet"></p><h1 id="TensorFlow2-0&#x5B9E;&#x73B0;"><a href="#TensorFlow2-0&#x5B9E;&#x73B0;" class="headerlink" title="TensorFlow2.0&#x5B9E;&#x73B0;"></a><font size="4">TensorFlow2.0&#x5B9E;&#x73B0;</font></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Convs(keras.Model):</span><br><span class="line">    def __init__(self, filters, times=2, maxpooling=True, name=&apos;Convs&apos;):</span><br><span class="line">        super(Convs, self).__init__()</span><br><span class="line">        self.blocks = keras.Sequential(name=name)</span><br><span class="line">        if maxpooling:</span><br><span class="line">            self.blocks.add(keras.layers.MaxPool2D(name=name + &apos;_maxpool&apos;))</span><br><span class="line"></span><br><span class="line">        for i in range(times):</span><br><span class="line">            self.blocks.add(keras.layers.Conv2D(filters, (3, 3), (1, 1), padding=&apos;valid&apos;, activation=&apos;relu&apos;, name=name + &apos;_con&apos; + str(i + 1)))</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.blocks(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DeConvs(keras.Model):</span><br><span class="line">    def __init__(self, filters, times=2, upsampling=True, name=&apos;DeConvs&apos;):</span><br><span class="line">        super(DeConvs, self).__init__()</span><br><span class="line">        self.blocks = keras.Sequential(name=name)</span><br><span class="line"></span><br><span class="line">        for i in range(times):</span><br><span class="line">            self.blocks.add(keras.layers.Conv2D(filters, (3, 3), (1, 1), padding=&apos;valid&apos;, activation=&apos;relu&apos;, name=name + &apos;_con&apos; + str(i + 1)))</span><br><span class="line"></span><br><span class="line">        if upsampling:</span><br><span class="line">            self.blocks.add(keras.layers.UpSampling2D())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        output = self.blocks(inputs)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UNet(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(UNet, self).__init__()</span><br><span class="line">        self.encoder1 = keras.Sequential([Convs(64, maxpooling=False)], name=&apos;Encoder_1&apos;)</span><br><span class="line">        self.crop1 = keras.layers.Cropping2D(((88, 88), (88, 88)), name=&apos;Crop_1&apos;)</span><br><span class="line">        self.encoder2 = keras.Sequential([Convs(128)], name=&apos;Encoder_2&apos;)</span><br><span class="line">        self.crop2 = keras.layers.Cropping2D(((40, 40), (40, 40)), name=&apos;Crop_2&apos;)</span><br><span class="line">        self.encoder3 = keras.Sequential([Convs(256)], name=&apos;Encoder_3&apos;)</span><br><span class="line">        self.crop3 = keras.layers.Cropping2D(((16, 16), (16, 16)), name=&apos;Crop_3&apos;)</span><br><span class="line">        self.encoder4 = keras.Sequential([Convs(512)], name=&apos;Encoder_4&apos;)</span><br><span class="line">        self.crop4 = keras.layers.Cropping2D(((4, 4), (4, 4)), name=&apos;Crop_4&apos;)</span><br><span class="line">        self.encoder5 = keras.Sequential([Convs(1024)], name=&apos;Encoder_5&apos;)</span><br><span class="line"></span><br><span class="line">        self.upsample = keras.layers.UpSampling2D(name=&apos;UpSample&apos;)</span><br><span class="line">        self.concatenate4 = keras.layers.Concatenate(name=&apos;Concatenate_4&apos;)</span><br><span class="line">        self.decoder3 = keras.Sequential([DeConvs(512)], name=&apos;Decoder_4&apos;)</span><br><span class="line">        self.concatenate3 = keras.layers.Concatenate(name=&apos;Concatenate_3&apos;)</span><br><span class="line">        self.decoder2 = keras.Sequential([DeConvs(256)], name=&apos;Decoder_3&apos;)</span><br><span class="line">        self.concatenate2 = keras.layers.Concatenate(name=&apos;Concatenate_2&apos;)</span><br><span class="line">        self.decoder1 = keras.Sequential([DeConvs(256)], name=&apos;Decoder_2&apos;)</span><br><span class="line">        self.concatenate1 = keras.layers.Concatenate(name=&apos;Concatenate_1&apos;)</span><br><span class="line">        self.decoder0 = keras.Sequential([DeConvs(64, upsampling=False)], name=&apos;Decoder_0&apos;)</span><br><span class="line"></span><br><span class="line">        self.conv = keras.layers.Conv2D(21, (1, 1), padding=&apos;same&apos;, name=&apos;Conv&apos;)</span><br><span class="line">        self.softmax = keras.layers.Softmax(name=&apos;SoftMax&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        encoder1 = self.encoder1(inputs)</span><br><span class="line">        crop1 = self.crop1(encoder1)</span><br><span class="line">        encoder2 = self.encoder2(encoder1)</span><br><span class="line">        crop2 = self.crop2(encoder2)</span><br><span class="line">        encoder3 = self.encoder3(encoder2)</span><br><span class="line">        crop3 = self.crop3(encoder3)</span><br><span class="line">        encoder4 = self.encoder4(encoder3)</span><br><span class="line">        crop4 = self.crop4(encoder4)</span><br><span class="line">        encoder5 = self.encoder5(encoder4)</span><br><span class="line">        decoder4 = self.upsample(encoder5)</span><br><span class="line"></span><br><span class="line">        concatenate4 = self.concatenate4([crop4, decoder4])</span><br><span class="line">        decoder3 = self.decoder3(concatenate4)</span><br><span class="line">        concatenate3 = self.concatenate3([crop3, decoder3])</span><br><span class="line">        decoder2 = self.decoder2(concatenate3)</span><br><span class="line">        concatenate2 = self.concatenate2([crop2, decoder2])</span><br><span class="line">        decoder1 = self.decoder1(concatenate2)</span><br><span class="line">        concatenate1 = self.concatenate1([crop1, decoder1])</span><br><span class="line">        decoder0 = self.decoder0(concatenate1)</span><br><span class="line"></span><br><span class="line">        conv = self.conv(decoder0)</span><br><span class="line">        output = self.softmax(conv)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line"></span><br><span class="line">    model = UNet()</span><br><span class="line">    model.build(input_shape=(None, 572, 572, 3))</span><br><span class="line">    model.summary()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/Semantic_segmentation/UNet_R.png" alt="UNet"></p><h1 id="Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;"><a href="#Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;" class="headerlink" title="Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;"></a><font size="5" color="red">Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;</font></h1><h2 id="&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E;"><a href="#&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E;" class="headerlink" title="&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E;"></a>&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E;</h2><ul><li>project<ul><li>shape<ul><li>train_imgs(&#x8BAD;&#x7EC3;&#x96C6;&#x56FE;&#x50CF;&#x6587;&#x4EF6;&#x5939;)</li><li>train_mask(&#x8BAD;&#x7EC3;&#x96C6;&#x63A9;&#x6A21;&#x6587;&#x4EF6;&#x5939;)</li><li>test_imgs(&#x6D4B;&#x8BD5;&#x96C6;&#x56FE;&#x50CF;&#x6587;&#x4EF6;&#x5939;)</li></ul></li><li>UNet_weight(&#x6A21;&#x578B;&#x6743;&#x91CD;&#x6587;&#x4EF6;&#x5939;)</li><li>UNet_test_result(&#x6D4B;&#x8BD5;&#x96C6;&#x7ED3;&#x679C;&#x6587;&#x4EF6;&#x5939;)</li><li>UNet.py</li></ul></li></ul><h2 id="&#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E;"><a href="#&#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E;" class="headerlink" title="&#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E;"></a>&#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E;</h2><ol><li>&#x8BED;&#x4E49;&#x5206;&#x5272;&#x5B9E;&#x6218;&#x8FD0;&#x884C;&#x8F83;&#x4E3A;&#x7B80;&#x5355;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x7684;&#x8F93;&#x5165;&#x7684;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x4E3A;&#x56FE;&#x50CF;&#xFF0C;&#x8F93;&#x5165;&#x7684;&#x6807;&#x7B7E;&#x6570;&#x636E;&#x4E5F;&#x662F;&#x56FE;&#x50CF;&#xFF0C;&#x9996;&#x5148;<strong>&#x8981;&#x5BF9;&#x8F93;&#x5165;&#x7684;&#x6807;&#x7B7E;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x7F16;&#x7801;&#xFF0C;&#x8F6C;&#x6362;&#x4E3A;&#x7C7B;&#x522B;&#x4FE1;&#x606F;</strong>&#xFF0C;&#x8981;&#x548C;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x7EF4;&#x5EA6;&#x76F8;&#x5339;&#x914D;&#xFF0C;&#x4ECE;(batch_size, height, width, 1)&#x8F6C;&#x6362;&#x4E3A;(batch_size, height, width, num_class + 1)&#xFF0C;<strong>&#x67D0;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x4E3A;&#x54EA;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#xFF0C;&#x5219;&#x5728;&#x8BE5;&#x901A;&#x9053;&#x4E0A;&#x7F6E;1&#xFF0C;&#x5176;&#x4F59;&#x901A;&#x9053;&#x7F6E;0</strong>&#x3002;&#x5373;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x5165;&#x5927;&#x5C0F;&#x4E3A;(batch_size, height, width, 3)&#xFF0C;&#x8F93;&#x51FA;&#x5927;&#x5C0F;&#x4E3A;(batch_size, height, width, num_class + 1)&#x3002;</li><li>&#x8BBE;&#x8BA1;&#x635F;&#x5931;&#x51FD;&#x6570;&#xFF0C;&#x7B80;&#x5355;&#x60C5;&#x51B5;&#x8BBE;&#x7F6E;&#x4EA4;&#x53C9;&#x71B5;&#x635F;&#x5931;&#x51FD;&#x6570;&#x5373;&#x53EF;&#x8FBE;&#x5230;&#x8F83;&#x597D;&#x6548;&#x679C;&#x3002;</li><li>&#x642D;&#x5EFA;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;<strong>&#x8BBE;&#x7F6E;&#x5408;&#x9002;&#x53C2;&#x6570;</strong>&#xFF0C;&#x8FDB;&#x884C;&#x8BAD;&#x7EC3;&#x3002;</li><li>&#x9884;&#x6D4B;&#x65F6;&#xFF0C;&#x9700;&#x8981;&#x6839;&#x636E;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x8FDB;&#x884C;<strong>&#x9006;&#x5411;&#x89E3;&#x7801;(&#x7F16;&#x7801;&#x7684;&#x53CD;&#x8FC7;&#x7A0B;)</strong>&#xFF0C;&#x5BFB;&#x627E;<strong>&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#xFF0C;&#x54EA;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x4E0A;&#x503C;&#x6700;&#x5927;&#x5219;&#x5F52;&#x4E3A;&#x54EA;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;</strong>&#xFF0C;&#x5373;&#x53EF;&#x5B8C;&#x6210;&#x5B9E;&#x6218;&#x7684;&#x8FC7;&#x7A0B;&#x3002;</li></ol><h2 id="&#x5C0F;&#x6280;&#x5DE7;"><a href="#&#x5C0F;&#x6280;&#x5DE7;" class="headerlink" title="&#x5C0F;&#x6280;&#x5DE7;"></a>&#x5C0F;&#x6280;&#x5DE7;</h2><ol><li>&#x8BBE;&#x7F6E;&#x7684;&#x56FE;&#x50CF;<strong>&#x7C7B;&#x522B;&#x6570;&#x4E3A;&#x5B9E;&#x9645;&#x7C7B;&#x522B;&#x6570;+1</strong>&#xFF0C;1&#x4EE3;&#x8868;&#x80CC;&#x666F;&#x7C7B;&#x522B;&#xFF0C;<strong>&#x6B64;&#x6570;&#x636E;&#x96C6;&#x4E3A;3&#x7C7B;&#xFF0C;&#x6700;&#x540E;&#x7684;&#x901A;&#x9053;&#x6570;&#x4E3A;4&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x9884;&#x6D4B;&#x4E00;&#x7C7B;&#x7269;&#x4F53;</strong>&#x3002;&#x5728;&#x901A;&#x9053;&#x65B9;&#x5411;&#x6C42;Softmax&#xFF0C;&#x5E76;&#x4E14;&#x6C42;&#x51FA;&#x6700;&#x5927;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;0&#x5219;&#x4EE3;&#x8868;&#x80CC;&#x666F;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;1&#x5219;&#x4EE3;&#x8868;&#x5706;&#x5F62;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;2&#x5219;&#x4EE3;&#x8868;&#x4E09;&#x89D2;&#x5F62;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;3&#x5219;&#x4EE3;&#x8868;&#x6B63;&#x65B9;&#x5F62;&#x3002;</li><li>&#x5B9E;&#x9645;&#x4E2D;&#x7528;&#x5230;&#x7684;&#x56FE;&#x50CF;&#x7684;&#x5C3A;&#x5BF8;&#x4E00;&#x822C;&#x90FD;&#x4E0D;&#x662F;&#x7279;&#x522B;&#x5927;&#xFF0C;&#x56E0;&#x6B64;<strong>&#x4E0D;&#x9700;&#x8981;&#x5C06;&#x56FE;&#x50CF;&#x8FDB;&#x884C;Crop&#xFF0C;&#x6240;&#x4EE5;&#x5377;&#x79EF;&#x7684;padding&#x4FEE;&#x6539;&#x4E3A;same</strong>&#x3002;</li><li>&#x635F;&#x5931;&#x51FD;&#x6570;&#x4F7F;&#x7528;&#x4EA4;&#x53C9;&#x71B5;&#x5373;&#x53EF;&#xFF0C;&#x4F7F;&#x7528;&#x52A0;&#x6743;Loss&#xFF0C;&#x8BA1;&#x7B97;&#x91CF;&#x8F83;&#x5927;&#xFF0C;&#x800C;&#x4E14;&#x9700;&#x8981;&#x8BA1;&#x7B97;&#x8FB9;&#x7F18;&#x64CD;&#x4F5C;&#x3002;</li><li>&#x8BBE;&#x7F6E;&#x4E86;<strong>&#x6743;&#x91CD;&#x7684;&#x4FDD;&#x5B58;&#x65B9;&#x5F0F;</strong>&#xFF0C;<strong>&#x5B66;&#x4E60;&#x7387;&#x7684;&#x4E0B;&#x964D;&#x65B9;&#x5F0F;</strong>&#x548C;<strong>&#x65E9;&#x505C;&#x65B9;&#x5F0F;</strong>&#x3002;</li><li>&#x4F7F;&#x7528;<strong>yield</strong>&#x5173;&#x952E;&#x5B57;&#xFF0C;&#x4EA7;&#x751F;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#xFF0C;&#x4E0D;&#x7528;&#x5C06;&#x6240;&#x6709;&#x7684;&#x6570;&#x636E;&#x90FD;&#x4FDD;&#x5B58;&#x4E0B;&#x6765;&#xFF0C;&#x5927;&#x5927;&#x8282;&#x7EA6;&#x5185;&#x5B58;&#x3002;</li><li>&#x5176;&#x4E2D;&#x5C06;1000&#x4E2A;&#x6570;&#x636E;&#xFF0C;&#x5206;&#x6210;800&#x4E2A;&#x8BAD;&#x7EC3;&#x96C6;&#xFF0C;100&#x4E2A;&#x9A8C;&#x8BC1;&#x96C6;&#x548C;100&#x4E2A;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x81EA;&#x884C;&#x4FEE;&#x6539;&#x3002;</li><li>&#x6CE8;&#x610F;&#x5176;&#x4E2D;&#x7684;&#x4E00;&#x4E9B;&#x7EF4;&#x5EA6;&#x53D8;&#x6362;&#x548C;<strong>numpy</strong>&#xFF0C;<strong>tensorflow</strong>&#x5E38;&#x7528;&#x64CD;&#x4F5C;&#xFF0C;&#x5426;&#x5219;&#x5728;&#x9605;&#x8BFB;&#x4EE3;&#x7801;&#x65F6;&#x53EF;&#x80FD;&#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x56F0;&#x96BE;&#x3002;</li><li>UNet&#x7684;<strong>&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x7C7B;&#x4F3C;&#x4E8E;VGG</strong>&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x90E8;&#x5206;&#x5185;&#x5BB9;&#xFF0C;&#x9009;&#x62E9;&#x5176;&#x4ED6;&#x7684;&#x7F51;&#x7EDC;&#x8FDB;&#x884C;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#xFF0C;&#x6BD4;&#x8F83;&#x4E0D;&#x540C;&#x7F51;&#x7EDC;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x8FD0;&#x884C;&#x901F;&#x5EA6;&#xFF0C;&#x6700;&#x7EC8;&#x7ED3;&#x679C;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x5F02;&#x3002;</li><li>&#x56FE;&#x50CF;&#x8F93;&#x5165;&#x53EF;&#x4EE5;&#x5148;&#x5C06;&#x5176;<strong>&#x5F52;&#x4E00;&#x5316;&#x5230;0-1&#x4E4B;&#x95F4;&#x6216;&#x8005;-1-1&#x4E4B;&#x95F4;</strong>&#xFF0C;&#x56E0;&#x4E3A;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x4E00;&#x822C;&#x90FD;&#x6BD4;&#x8F83;&#x5C0F;&#xFF0C;&#x6240;&#x4EE5;&#x5F52;&#x4E00;&#x5316;&#x540E;&#x8BA1;&#x7B97;&#x65B9;&#x4FBF;&#xFF0C;&#x6536;&#x655B;&#x8F83;&#x5FEB;&#x3002;</li><li>&#x5B9E;&#x9645;&#x7684;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x5E38;&#x5E38;&#x8FD8;&#x9700;&#x8981;&#x5BF9;&#x6570;&#x636E;&#x96C6;&#x8FDB;&#x884C;<strong>&#x5927;&#x5C0F;&#x8C03;&#x6574;&#x548C;&#x589E;&#x5F3A;</strong>&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x4E3A;&#x4E86;&#x7B80;&#x5355;&#x8D77;&#x89C1;&#xFF0C;&#x6CA1;&#x6709;&#x8FDB;&#x884C;&#x590D;&#x6742;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5E94;&#x7528;&#x4E2D;&#x8981;&#x8BB0;&#x5F97;&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x7684;&#x9700;&#x8981;&#xFF0C;&#x5BF9;&#x56FE;&#x50CF;&#x8FDB;&#x884C;<strong>resize&#x6216;&#x8005;padding</strong>&#xFF0C;&#x7136;&#x540E;<strong>&#x65CB;&#x8F6C;</strong>&#xFF0C;<strong>&#x5BF9;&#x6BD4;&#x5EA6;&#x589E;&#x5F3A;</strong>&#xFF0C;<strong>&#x4EFF;&#x5C04;&#x8FD0;&#x7B97;</strong>&#x7B49;&#x7B49;&#x64CD;&#x4F5C;&#xFF0C;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x9C81;&#x68D2;&#x6027;&#xFF0C;&#x5E76;&#x4E14;&#x5B9E;&#x9645;&#x4E2D;&#x7684;&#x56FE;&#x50CF;&#x4E0D;&#x4E00;&#x5B9A;&#x6309;&#x7167;&#x987A;&#x5E8F;&#x547D;&#x540D;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x5E94;&#x7528;&#x4E2D;&#x4E5F;&#x8981;&#x6CE8;&#x610F;&#x56FE;&#x50CF;&#x8BFB;&#x53D6;&#x7684;&#x6587;&#x4EF6;&#x540D;&#x3002;</li></ol><h2 id="&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;"><a href="#&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;" class="headerlink" title="&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;"></a>&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import numpy as np</span><br><span class="line">import cv2 as cv</span><br><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Convs(keras.Model):</span><br><span class="line">    def __init__(self, filters, times=2, maxpooling=True, name=&apos;Convs&apos;):</span><br><span class="line">        super(Convs, self).__init__()</span><br><span class="line">        self.blocks = keras.Sequential(name=name)</span><br><span class="line">        if maxpooling:</span><br><span class="line">            self.blocks.add(keras.layers.MaxPool2D(name=name + &apos;_maxpool&apos;))</span><br><span class="line"></span><br><span class="line">        for i in range(times):</span><br><span class="line">            self.blocks.add(keras.layers.Conv2D(filters, (3, 3), (1, 1), padding=&apos;same&apos;, activation=&apos;relu&apos;, name=name + &apos;_con&apos; + str(i + 1)))</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.blocks(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DeConvs(keras.Model):</span><br><span class="line">    def __init__(self, filters, times=2, upsampling=True, name=&apos;DeConvs&apos;):</span><br><span class="line">        super(DeConvs, self).__init__()</span><br><span class="line">        self.blocks = keras.Sequential(name=name)</span><br><span class="line"></span><br><span class="line">        for i in range(times):</span><br><span class="line">            self.blocks.add(keras.layers.Conv2D(filters, (3, 3), (1, 1), padding=&apos;same&apos;, activation=&apos;relu&apos;, name=name + &apos;_con&apos; + str(i + 1)))</span><br><span class="line"></span><br><span class="line">        if upsampling:</span><br><span class="line">            self.blocks.add(keras.layers.UpSampling2D())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        output = self.blocks(inputs)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Small_UNet(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Small_UNet, self).__init__()</span><br><span class="line">        self.encoder1 = keras.Sequential([Convs(32, maxpooling=False)], name=&apos;Encoder_1&apos;)</span><br><span class="line">        self.encoder2 = keras.Sequential([Convs(32)], name=&apos;Encoder_2&apos;)</span><br><span class="line">        self.encoder3 = keras.Sequential([Convs(64)], name=&apos;Encoder_3&apos;)</span><br><span class="line">        self.encoder4 = keras.Sequential([Convs(128)], name=&apos;Encoder_4&apos;)</span><br><span class="line">        self.encoder5 = keras.Sequential([Convs(256)], name=&apos;Encoder_5&apos;)</span><br><span class="line"></span><br><span class="line">        self.upsample = keras.layers.UpSampling2D(name=&apos;UpSample&apos;)</span><br><span class="line">        self.concatenate4 = keras.layers.Concatenate(name=&apos;Concatenate_4&apos;)</span><br><span class="line">        self.decoder3 = keras.Sequential([DeConvs(128)], name=&apos;Decoder_4&apos;)</span><br><span class="line">        self.concatenate3 = keras.layers.Concatenate(name=&apos;Concatenate_3&apos;)</span><br><span class="line">        self.decoder2 = keras.Sequential([DeConvs(64)], name=&apos;Decoder_3&apos;)</span><br><span class="line">        self.concatenate2 = keras.layers.Concatenate(name=&apos;Concatenate_2&apos;)</span><br><span class="line">        self.decoder1 = keras.Sequential([DeConvs(32)], name=&apos;Decoder_2&apos;)</span><br><span class="line">        self.concatenate1 = keras.layers.Concatenate(name=&apos;Concatenate_1&apos;)</span><br><span class="line">        self.decoder0 = keras.Sequential([DeConvs(32, upsampling=False)], name=&apos;Decoder_0&apos;)</span><br><span class="line"></span><br><span class="line">        self.conv = keras.layers.Conv2D(num_class, (1, 1), padding=&apos;same&apos;, name=&apos;Convs&apos;)</span><br><span class="line">        self.softmax = keras.layers.Softmax(name=&apos;SoftMax&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        encoder1 = self.encoder1(inputs)</span><br><span class="line">        encoder2 = self.encoder2(encoder1)</span><br><span class="line">        encoder3 = self.encoder3(encoder2)</span><br><span class="line">        encoder4 = self.encoder4(encoder3)</span><br><span class="line">        encoder5 = self.encoder5(encoder4)</span><br><span class="line">        decoder4 = self.upsample(encoder5)</span><br><span class="line"></span><br><span class="line">        concatenate4 = self.concatenate4([encoder4, decoder4])</span><br><span class="line">        decoder3 = self.decoder3(concatenate4)</span><br><span class="line">        concatenate3 = self.concatenate3([encoder3, decoder3])</span><br><span class="line">        decoder2 = self.decoder2(concatenate3)</span><br><span class="line">        concatenate2 = self.concatenate2([encoder2, decoder2])</span><br><span class="line">        decoder1 = self.decoder1(concatenate2)</span><br><span class="line">        concatenate1 = self.concatenate1([encoder1, decoder1])</span><br><span class="line">        decoder0 = self.decoder0(concatenate1)</span><br><span class="line"></span><br><span class="line">        conv = self.conv(decoder0)</span><br><span class="line">        output = self.softmax(conv)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def generate_arrays_from_file(train_data, batch_size):</span><br><span class="line">    # &#x83B7;&#x53D6;&#x603B;&#x957F;&#x5EA6;</span><br><span class="line">    n = len(train_data)</span><br><span class="line">    i = 0</span><br><span class="line">    while 1:</span><br><span class="line">        X_train = []</span><br><span class="line">        Y_train = []</span><br><span class="line">        # &#x83B7;&#x53D6;&#x4E00;&#x4E2A;batch_size&#x5927;&#x5C0F;&#x7684;&#x6570;&#x636E;</span><br><span class="line">        for _ in range(batch_size):</span><br><span class="line">            if i == 0:</span><br><span class="line">                np.random.shuffle(train_data)</span><br><span class="line">            # &#x4ECE;&#x6587;&#x4EF6;&#x4E2D;&#x8BFB;&#x53D6;&#x56FE;&#x50CF;</span><br><span class="line">            img = cv.imread(imgs_path + &apos;\\&apos; + str(train_data[i]) + &apos;.jpg&apos;)</span><br><span class="line">            img = img / 127.5 - 1</span><br><span class="line">            X_train.append(img)</span><br><span class="line"></span><br><span class="line">            # &#x4ECE;&#x6587;&#x4EF6;&#x4E2D;&#x8BFB;&#x53D6;&#x56FE;&#x50CF;</span><br><span class="line">            img = cv.imread(mask_path + &apos;\\&apos; + str(train_data[i]) + &apos;.png&apos;)</span><br><span class="line">            seg_labels = np.zeros((img_size[0], img_size[1], num_class))</span><br><span class="line">            for c in range(num_class):</span><br><span class="line">                seg_labels[:, :, c] = (img[:, :, 0] == c).astype(int)</span><br><span class="line">            Y_train.append(seg_labels)</span><br><span class="line"></span><br><span class="line">            # &#x8BFB;&#x5B8C;&#x4E00;&#x4E2A;&#x5468;&#x671F;&#x540E;&#x91CD;&#x65B0;&#x5F00;&#x59CB;</span><br><span class="line">            i = (i + 1) % n</span><br><span class="line">        yield tf.constant(X_train), tf.constant(Y_train)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # &#x5305;&#x62EC;&#x80CC;&#x666F;</span><br><span class="line">    num_class = 4 </span><br><span class="line">    train_data = list(range(800))</span><br><span class="line">    validation_data = list(range(800, 900))</span><br><span class="line">    test_data = range(900, 1000)</span><br><span class="line">    epochs = 50</span><br><span class="line">    batch_size = 16</span><br><span class="line">    tf.random.set_seed(22)</span><br><span class="line">    img_size = (128, 128)</span><br><span class="line">    colors = [[0, 0, 0], [0, 0, 128], [0, 128, 0], [128, 0, 0]]</span><br><span class="line"></span><br><span class="line">    mask_path = r&apos;.\shape\train_mask&apos;</span><br><span class="line">    imgs_path = r&apos;.\shape\train_imgs&apos;</span><br><span class="line">    test_path = r&apos;.\shape\test_imgs&apos;</span><br><span class="line">    save_path = r&apos;.\UNet_test_result&apos;</span><br><span class="line">    weight_path = r&apos;.\UNet_weight&apos;</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        os.mkdir(save_path)</span><br><span class="line">    except FileExistsError:</span><br><span class="line">        print(save_path + &apos;has been exist&apos;)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        os.mkdir(weight_path)</span><br><span class="line">    except FileExistsError:</span><br><span class="line">        print(weight_path + &apos;has been exist&apos;)</span><br><span class="line"></span><br><span class="line">    model = Small_UNet()</span><br><span class="line">    model.build(input_shape=(None, img_size[0], img_size[1], 3))</span><br><span class="line">    model.summary()</span><br><span class="line"></span><br><span class="line">    optimizor = keras.optimizers.Adam(lr=1e-3)</span><br><span class="line">    lossor = keras.losses.BinaryCrossentropy()</span><br><span class="line"></span><br><span class="line">    model.compile(optimizer=optimizor, loss=lossor, metrics=[&apos;accuracy&apos;])</span><br><span class="line"></span><br><span class="line">    # &#x4FDD;&#x5B58;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;3&#x4E16;&#x4EE3;&#x4FDD;&#x5B58;&#x4E00;&#x6B21;</span><br><span class="line">    checkpoint_period = keras.callbacks.ModelCheckpoint(</span><br><span class="line">        weight_path + &apos;\\&apos; + &apos;ep{epoch:03d}-loss{loss:.3f}-val_loss{val_loss:.3f}.h5&apos;,</span><br><span class="line">        monitor=&apos;val_loss&apos;,</span><br><span class="line">        save_weights_only=True,</span><br><span class="line">        save_best_only=True,</span><br><span class="line">        period=3</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    # &#x5B66;&#x4E60;&#x7387;&#x4E0B;&#x964D;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;val_loss3&#x6B21;&#x4E0D;&#x4E0B;&#x964D;&#x5C31;&#x4E0B;&#x964D;&#x5B66;&#x4E60;&#x7387;&#x7EE7;&#x7EED;&#x8BAD;&#x7EC3;</span><br><span class="line">    reduce_lr = keras.callbacks.ReduceLROnPlateau(</span><br><span class="line">        monitor=&apos;val_loss&apos;,</span><br><span class="line">        factor=0.5,</span><br><span class="line">        patience=3,</span><br><span class="line">        verbose=1</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    # &#x662F;&#x5426;&#x9700;&#x8981;&#x65E9;&#x505C;&#xFF0C;&#x5F53;val_loss&#x4E00;&#x76F4;&#x4E0D;&#x4E0B;&#x964D;&#x7684;&#x65F6;&#x5019;&#x610F;&#x5473;&#x7740;&#x6A21;&#x578B;&#x57FA;&#x672C;&#x8BAD;&#x7EC3;&#x5B8C;&#x6BD5;&#xFF0C;&#x53EF;&#x4EE5;&#x505C;&#x6B62;</span><br><span class="line">    early_stopping = keras.callbacks.EarlyStopping(</span><br><span class="line">        monitor=&apos;val_loss&apos;,</span><br><span class="line">        min_delta=0,</span><br><span class="line">        patience=10,</span><br><span class="line">        verbose=1</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    model.fit_generator(generate_arrays_from_file(train_data, batch_size),</span><br><span class="line">                        steps_per_epoch=max(1, len(train_data) // batch_size),</span><br><span class="line">                        validation_data=generate_arrays_from_file(validation_data, batch_size),</span><br><span class="line">                        validation_steps=max(1, len(validation_data) // batch_size),</span><br><span class="line">                        epochs=epochs,</span><br><span class="line">                        callbacks=[checkpoint_period, reduce_lr, early_stopping])</span><br><span class="line"></span><br><span class="line">    for name in test_data:</span><br><span class="line">        test_img_path = test_path + &apos;\\&apos; + str(name) + &apos;.jpg&apos;</span><br><span class="line">        save_img_path = save_path + &apos;\\&apos; + str(name) + &apos;.png&apos;</span><br><span class="line">        test_img = cv.imread(test_img_path)</span><br><span class="line">        test_img = tf.constant([test_img / 127.5 - 1])</span><br><span class="line">        test_mask = model.predict(test_img)</span><br><span class="line">        test_mask = np.reshape(test_mask, (img_size[0], img_size[1], num_class))</span><br><span class="line">        test_mask = np.argmax(test_mask, axis=-1)</span><br><span class="line">        seg_img = np.zeros((img_size[0], img_size[1], 3))</span><br><span class="line">        for c in range(num_class):</span><br><span class="line">            seg_img[:, :, 0] += ((test_mask == c) * (colors[c][0]))</span><br><span class="line">            seg_img[:, :, 1] += ((test_mask == c) * (colors[c][1]))</span><br><span class="line">            seg_img[:, :, 2] += ((test_mask == c) * (colors[c][2]))</span><br><span class="line">        seg_img = seg_img.astype(np.uint8)</span><br><span class="line">        cv.imwrite(save_img_path, seg_img)</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"><a href="#&#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C;" class="headerlink" title="&#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a>&#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</h2><p><img src="/images/Semantic_segmentation/UNet_T.png" alt="UNet"></p><h1 id="UNet&#x5C0F;&#x7ED3;"><a href="#UNet&#x5C0F;&#x7ED3;" class="headerlink" title="UNet&#x5C0F;&#x7ED3;"></a><font size="5" color="red">UNet&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;UNet&#x662F;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x7684;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x7F51;&#x7EDC;&#xFF0C;&#x5728;&#x8F93;&#x5165;&#x56FE;&#x50CF;&#x5C3A;&#x5BF8;&#x4E3A;572x572&#x65F6;&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x4E3A;32M&#x3002;&#x56E0;&#x4E3A;&#x5176;<strong>padding&#x65B9;&#x5F0F;&#x4F7F;&#x5176;&#x56FE;&#x50CF;&#x5C3A;&#x5BF8;&#x7F29;&#x5C0F;&#xFF0C;&#x9002;&#x5408;&#x4E8E;&#x5927;&#x5C3A;&#x5BF8;&#x56FE;&#x50CF;&#x7684;&#x5206;&#x5272;</strong>&#xFF0C;&#x5E76;&#x4E14;&#x91C7;&#x7528;<strong>&#x52A0;&#x6743;&#x635F;&#x5931;&#x51FD;&#x6570;</strong>&#x548C;&#x4F18;&#x79C0;&#x7684;<strong>&#x56FE;&#x50CF;&#x589E;&#x5F3A;</strong>&#x64CD;&#x4F5C;&#xFF0C;&#x4F7F;&#x5F97;&#x5176;&#x5728;&#x533B;&#x5B66;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x4E2D;&#x6709;&#x826F;&#x597D;&#x7684;&#x8868;&#x73B0;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;UNet&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="语义分割网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>SegNet</title>
    <link href="https://USTCcoder.github.io/2020/04/18/Semantic_segmentation%20SegNet/"/>
    <id>https://USTCcoder.github.io/2020/04/18/Semantic_segmentation SegNet/</id>
    <published>2020-04-18T10:07:25.000Z</published>
    <updated>2020-05-09T09:43:57.732Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">SegNet</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>SegNet</strong>:&#x7531;&#x5251;&#x6865;&#x5927;&#x5B66;&#x63D0;&#x51FA;&#xFF0C;2015&#x5E74;&#x88AB;&#x63D0;&#x4EA4;&#x5230;CVPR&#xFF0C;&#x4F46;&#x662F;&#x6700;&#x540E;&#x6CA1;&#x6709;&#x53D1;&#x8868;&#xFF0C;&#x53CD;&#x800C;&#x5728;<strong>2017&#x5E74;&#x53D1;&#x8868;&#x5728;TPAMI</strong>&#x4E0A;&#x3002;&#x662F;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x9AD8;&#x6548;&#x7684;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x6A21;&#x578B;&#x3002;<a id="more"></a></p><p><img src="/images/Semantic_segmentation/SegNet.png" alt="SegNet"></p><h1 id="SegNet&#x7279;&#x70B9;"><a href="#SegNet&#x7279;&#x70B9;" class="headerlink" title="SegNet&#x7279;&#x70B9;"></a><font size="5" color="red">SegNet&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">&#x7F51;&#x7EDC;&#x5206;&#x4E3A;&#x4E24;&#x4E2A;&#x90E8;&#x5206;&#xFF0C;<strong>&#x7F16;&#x7801;(Encoder)</strong>&#x548C;<strong>&#x89E3;&#x7801;(Decoder)</strong>&#xFF0C;&#x7ED3;&#x6784;&#x7B80;&#x5355;&#xFF0C;&#x7F51;&#x7EDC;&#x6613;&#x4E8E;&#x5B9E;&#x73B0;</font><br>&#x2003;&#x2003;<font size="3">&#x4F7F;&#x7528;&#x4E86;<strong>Maxpooling-Indices(&#x6700;&#x5927;&#x6C60;&#x5316;&#x7D22;&#x5F15;)</strong>&#x6765;&#x8FDB;&#x884C;&#x56FE;&#x50CF;&#x5206;&#x8FA8;&#x7387;&#x7684;&#x63D0;&#x9AD8;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x91C7;&#x7528;&#x4E0A;&#x91C7;&#x6837;&#x6216;&#x8005;&#x53CD;&#x5377;&#x79EF;&#x3002;</font></p><h1 id="Maxpooling-Indices-&#x6700;&#x5927;&#x6C60;&#x5316;&#x7D22;&#x5F15;-&#x4E0E;Upsampling-&#x4E0A;&#x91C7;&#x6837;-&#x548C;Deconvolution-&#x53CD;&#x5377;&#x79EF;-&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;"><a href="#Maxpooling-Indices-&#x6700;&#x5927;&#x6C60;&#x5316;&#x7D22;&#x5F15;-&#x4E0E;Upsampling-&#x4E0A;&#x91C7;&#x6837;-&#x548C;Deconvolution-&#x53CD;&#x5377;&#x79EF;-&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;" class="headerlink" title="Maxpooling-Indices(&#x6700;&#x5927;&#x6C60;&#x5316;&#x7D22;&#x5F15;)&#x4E0E;Upsampling(&#x4E0A;&#x91C7;&#x6837;)&#x548C;Deconvolution(&#x53CD;&#x5377;&#x79EF;)&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;"></a><font size="5" color="red">Maxpooling-Indices(&#x6700;&#x5927;&#x6C60;&#x5316;&#x7D22;&#x5F15;)&#x4E0E;Upsampling(&#x4E0A;&#x91C7;&#x6837;)&#x548C;Deconvolution(&#x53CD;&#x5377;&#x79EF;)&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;</font></h1><p>&#x2003;&#x2003;<font size="3"><strong>Maxpooling-Indices(&#x6700;&#x5927;&#x6C60;&#x5316;&#x7D22;&#x5F15;)</strong>&#xFF1A;&#x53C8;&#x79F0;&#x4E3A;<strong>Unpooling(&#x53CD;&#x6C60;&#x5316;)</strong>&#xFF0C;&#x6C60;&#x5316;&#x540E;<strong>&#x8BB0;&#x5F55;&#x6700;&#x5927;&#x503C;&#x6240;&#x5728;&#x7684;&#x4F4D;&#x7F6E;</strong>&#xFF0C;&#x5728;&#x53CD;&#x6C60;&#x5316;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x7ED9;&#x76F8;&#x5E94;&#x4F4D;&#x7F6E;&#x4E0A;&#x5199;&#x5165;&#x503C;&#xFF0C;<strong>&#x5176;&#x4ED6;&#x4F4D;&#x7F6E;&#x4E3A;0</strong>&#x3002;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#xFF0C;<strong>&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x5E76;&#x4E0D;&#x5E38;&#x7528;&#xFF0C;&#x56E0;&#x4E3A;&#x5B58;&#x5728;&#x5927;&#x91CF;&#x7684;&#x7A00;&#x758F;&#x6570;&#x636E;&#xFF0C;&#x4F7F;&#x6A21;&#x578B;&#x6536;&#x655B;&#x901F;&#x5EA6;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x3002;</strong></font><br>&#x2003;&#x2003;<font size="3"><strong>Upsampling(&#x4E0A;&#x91C7;&#x6837;)</strong>&#xFF1A;&#x5C06;&#x8F93;&#x5165;<strong>resize&#x5230;&#x8BBE;&#x7F6E;&#x5927;&#x5C0F;</strong>&#xFF0C;&#x7136;&#x540E;&#x5229;&#x7528;&#x6307;&#x5B9A;&#x7684;&#x63D2;&#x503C;&#x65B9;&#x6CD5;<strong>&#x5BF9;&#x5468;&#x56F4;&#x7684;&#x503C;&#x8FDB;&#x884C;&#x63D2;&#x503C;</strong>&#xFF0C;&#x5E38;&#x7528;<strong>&#x6700;&#x8FD1;&#x90BB;&#x63D2;&#x503C;</strong>&#x548C;<strong>&#x53CC;&#x7EBF;&#x6027;&#x63D2;&#x503C;</strong>&#x3002;&#x56E0;&#x4E3A;&#x76F8;&#x90BB;&#x533A;&#x57DF;&#x7684;&#x50CF;&#x7D20;&#x548C;&#x7279;&#x5F81;&#x5E94;&#x8BE5;&#x662F;&#x76F8;&#x4F3C;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x7279;&#x522B;&#x5E38;&#x7528;&#xFF0C;<strong>&#x65E2;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#xFF0C;&#x4E5F;&#x4E0D;&#x4F1A;&#x5B58;&#x5728;&#x7A00;&#x758F;&#x6570;&#x636E;&#x3002;</strong></font><br>&#x2003;&#x2003;<font size="3"><strong>Deconvolution(&#x53CD;&#x5377;&#x79EF;)</strong>&#xFF1A;<strong>&#x672C;&#x8D28;&#x662F;&#x5377;&#x79EF;</strong>&#xFF0C;&#x6CE8;&#x610F;<strong>&#x53CD;&#x5377;&#x79EF;&#x5E76;&#x4E0D;&#x80FD;&#x4ECE;&#x5377;&#x79EF;&#x7684;&#x7ED3;&#x679C;&#x8FD4;&#x56DE;&#x5230;&#x5377;&#x79EF;&#x524D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x53EA;&#x80FD;&#x8FD4;&#x56DE;&#x5230;&#x5377;&#x79EF;&#x524D;&#x7684;&#x5C3A;&#x5BF8;</strong>&#x3002;&#x5377;&#x79EF;&#x901A;&#x8FC7;&#x8BBE;&#x7F6E;kernel_size&#x5377;&#x79EF;&#x6838;&#x5927;&#x5C0F;&#xFF0C;strides&#x6B65;&#x957F;&#x548C;padding&#x586B;&#x5145;&#x65B9;&#x5F0F;&#x53EF;&#x4EE5;&#x5C06;&#x56FE;&#x50CF;&#x7684;&#x5206;&#x8FA8;&#x7387;&#x964D;&#x4F4E;&#xFF0C;&#x76F8;&#x53CD;&#x7684;&#x53CD;&#x5377;&#x79EF;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8BBE;&#x7F6E;kernel_size&#x5377;&#x79EF;&#x6838;&#x5927;&#x5C0F;&#xFF0C;strides&#x6B65;&#x957F;&#x548C;padding&#x586B;&#x5145;&#x65B9;&#x5F0F;<strong>&#x5148;&#x5BF9;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x586B;&#x5145;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8FDB;&#x884C;&#x5377;&#x79EF;&#x64CD;&#x4F5C;</strong>&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x56FE;&#x50CF;&#x7684;&#x5206;&#x8FA8;&#x7387;&#x589E;&#x52A0;&#x3002;<strong>&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x4E0D;&#x63A8;&#x8350;&#x7ECF;&#x5E38;&#x4F7F;&#x7528;&#xFF0C;&#x56E0;&#x4E3A;&#x5B58;&#x5728;&#x5927;&#x91CF;&#x53C2;&#x6570;&#xFF0C;&#x800C;&#x4E14;&#x53EF;&#x80FD;&#x4F1A;&#x5B58;&#x5728;&#x68CB;&#x76D8;&#x683C;&#x6548;&#x5E94;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x8003;<a href="https://distill.pub/2016/deconv-checkerboard/" target="_blank" rel="noopener">&#x68CB;&#x76D8;&#x683C;&#x53EF;&#x89C6;&#x5316;</a></strong>&#x3002;</font><br><img src="/images/Semantic_segmentation/SegNet_U.png" alt="SegNet"></p><h1 id="SegNet&#x56FE;&#x50CF;&#x5206;&#x6790;"><a href="#SegNet&#x56FE;&#x50CF;&#x5206;&#x6790;" class="headerlink" title="SegNet&#x56FE;&#x50CF;&#x5206;&#x6790;"></a><font size="5" color="red">SegNet&#x56FE;&#x50CF;&#x5206;&#x6790;</font></h1><p><img src="/images/Semantic_segmentation/SegNet_A.png" alt="SegNet"></p><h1 id="TensorFlow2-0&#x5B9E;&#x73B0;"><a href="#TensorFlow2-0&#x5B9E;&#x73B0;" class="headerlink" title="TensorFlow2.0&#x5B9E;&#x73B0;"></a><font size="4">TensorFlow2.0&#x5B9E;&#x73B0;</font></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def indices_maxpool(val, index):</span><br><span class="line">    input_size = index.shape</span><br><span class="line">    output_size = [x * 2 if i == 0 or i == 1 else x for i, x in enumerate(input_size[1:])]</span><br><span class="line">    output = tf.reshape(tf.scatter_nd(tf.reshape(index, (-1, 1)), tf.reshape(val, (-1, )), (batch_size * np.prod(output_size), )), [-1] + output_size)</span><br><span class="line"></span><br><span class="line">    return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Convs(keras.Model):</span><br><span class="line">    def __init__(self, filters, times):</span><br><span class="line">        super(Convs, self).__init__()</span><br><span class="line">        self.blocks = keras.Sequential()</span><br><span class="line"></span><br><span class="line">        for i in range(times):</span><br><span class="line">            self.blocks.add(keras.layers.Conv2D(filters, (3, 3), (1, 1), padding=&apos;same&apos;))</span><br><span class="line">            self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">            self.blocks.add(keras.layers.ReLU())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        output = self.blocks(inputs)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SegNet(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(SegNet, self).__init__()</span><br><span class="line">        self.encoder1 = keras.Sequential([Convs(64, 2)], name=&apos;Encoder1&apos;)</span><br><span class="line">        self.encoder2 = keras.Sequential([Convs(128, 2)], name=&apos;Encoder2&apos;)</span><br><span class="line">        self.encoder3 = keras.Sequential([Convs(256, 3)], name=&apos;Encoder3&apos;)</span><br><span class="line">        self.encoder4 = keras.Sequential([Convs(512, 3)], name=&apos;Encoder4&apos;)</span><br><span class="line">        self.encoder5 = keras.Sequential([Convs(512, 3)], name=&apos;Encoder5&apos;)</span><br><span class="line"></span><br><span class="line">        self.decoder1 = keras.Sequential([Convs(64, 1), Convs(21, 1)], name=&apos;Decoder1&apos;)</span><br><span class="line">        self.decoder2 = keras.Sequential([Convs(128, 1), Convs(64, 1)], name=&apos;Decoder2&apos;)</span><br><span class="line">        self.decoder3 = keras.Sequential([Convs(256, 2), Convs(128, 1)], name=&apos;Decoder3&apos;)</span><br><span class="line">        self.decoder4 = keras.Sequential([Convs(512, 2), Convs(256, 1)], name=&apos;Decoder4&apos;)</span><br><span class="line">        self.decoder5 = keras.Sequential([Convs(512, 2), Convs(512, 1)], name=&apos;Decoder5&apos;)</span><br><span class="line"></span><br><span class="line">        self.softmax = keras.layers.Softmax(name=&apos;Softmax&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        encoder1 = self.encoder1(inputs)</span><br><span class="line">        val_1, index_1 = tf.nn.max_pool_with_argmax(encoder1, (2, 2), (2, 2), &apos;VALID&apos;)</span><br><span class="line">        encoder2 = self.encoder2(val_1)</span><br><span class="line">        val_2, index_2 = tf.nn.max_pool_with_argmax(encoder2, (2, 2), (2, 2), &apos;VALID&apos;)</span><br><span class="line">        encoder3 = self.encoder3(val_2)</span><br><span class="line">        val_3, index_3 = tf.nn.max_pool_with_argmax(encoder3, (2, 2), (2, 2), &apos;VALID&apos;)</span><br><span class="line">        encoder4 = self.encoder4(val_3)</span><br><span class="line">        val_4, index_4 = tf.nn.max_pool_with_argmax(encoder4, (2, 2), (2, 2), &apos;VALID&apos;)</span><br><span class="line">        encoder5 = self.encoder5(val_4)</span><br><span class="line">        val_5, index_5 = tf.nn.max_pool_with_argmax(encoder5, (2, 2), (2, 2), &apos;VALID&apos;)</span><br><span class="line"></span><br><span class="line">        indices_maxpool5 = indices_maxpool(val_5, index_5)</span><br><span class="line">        decoder5 = self.decoder5(indices_maxpool5)</span><br><span class="line">        indices_maxpool4 = indices_maxpool(decoder5, index_4)</span><br><span class="line">        decoder4 = self.decoder4(indices_maxpool4)</span><br><span class="line">        indices_maxpool3 = indices_maxpool(decoder4, index_3)</span><br><span class="line">        decoder3 = self.decoder3(indices_maxpool3)</span><br><span class="line">        indices_maxpool2 = indices_maxpool(decoder3, index_2)</span><br><span class="line">        decoder2 = self.decoder2(indices_maxpool2)</span><br><span class="line">        indices_maxpool1 = indices_maxpool(decoder2, index_1)</span><br><span class="line">        decoder1 = self.decoder1(indices_maxpool1)</span><br><span class="line"></span><br><span class="line">        output = self.softmax(decoder1)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line"></span><br><span class="line">    batch_size = 16</span><br><span class="line">    model = SegNet()</span><br><span class="line">    model.build(input_shape=(batch_size, 512, 512, 3))</span><br><span class="line">    model.summary()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/Semantic_segmentation/SegNet_R.png" alt="SegNet"></p><h1 id="Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;"><a href="#Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;" class="headerlink" title="Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;"></a><font size="5" color="red">Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;</font></h1><h2 id="&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E;"><a href="#&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E;" class="headerlink" title="&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E;"></a>&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E;</h2><ul><li>project<ul><li>shape<ul><li>train_imgs(&#x8BAD;&#x7EC3;&#x96C6;&#x56FE;&#x50CF;&#x6587;&#x4EF6;&#x5939;)</li><li>train_mask(&#x8BAD;&#x7EC3;&#x96C6;&#x63A9;&#x6A21;&#x6587;&#x4EF6;&#x5939;)</li><li>test_imgs(&#x6D4B;&#x8BD5;&#x96C6;&#x56FE;&#x50CF;&#x6587;&#x4EF6;&#x5939;)</li></ul></li><li>SegNet_weight(&#x6A21;&#x578B;&#x6743;&#x91CD;&#x6587;&#x4EF6;&#x5939;)</li><li>SegNet_test_result(&#x6D4B;&#x8BD5;&#x96C6;&#x7ED3;&#x679C;&#x6587;&#x4EF6;&#x5939;)</li><li>SegNet.py</li></ul></li></ul><h2 id="&#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E;"><a href="#&#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E;" class="headerlink" title="&#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E;"></a>&#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E;</h2><ol><li>&#x8BED;&#x4E49;&#x5206;&#x5272;&#x5B9E;&#x6218;&#x8FD0;&#x884C;&#x8F83;&#x4E3A;&#x7B80;&#x5355;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x7684;&#x8F93;&#x5165;&#x7684;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x4E3A;&#x56FE;&#x50CF;&#xFF0C;&#x8F93;&#x5165;&#x7684;&#x6807;&#x7B7E;&#x6570;&#x636E;&#x4E5F;&#x662F;&#x56FE;&#x50CF;&#xFF0C;&#x9996;&#x5148;<strong>&#x8981;&#x5BF9;&#x8F93;&#x5165;&#x7684;&#x6807;&#x7B7E;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x7F16;&#x7801;&#xFF0C;&#x8F6C;&#x6362;&#x4E3A;&#x7C7B;&#x522B;&#x4FE1;&#x606F;</strong>&#xFF0C;&#x8981;&#x548C;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x7EF4;&#x5EA6;&#x76F8;&#x5339;&#x914D;&#xFF0C;&#x4ECE;(batch_size, height, width, 1)&#x8F6C;&#x6362;&#x4E3A;(batch_size, height, width, num_class + 1)&#xFF0C;<strong>&#x67D0;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x4E3A;&#x54EA;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#xFF0C;&#x5219;&#x5728;&#x8BE5;&#x901A;&#x9053;&#x4E0A;&#x7F6E;1&#xFF0C;&#x5176;&#x4F59;&#x901A;&#x9053;&#x7F6E;0</strong>&#x3002;&#x5373;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x5165;&#x5927;&#x5C0F;&#x4E3A;(batch_size, height, width, 3)&#xFF0C;&#x8F93;&#x51FA;&#x5927;&#x5C0F;&#x4E3A;(batch_size, height, width, num_class + 1)&#x3002;</li><li>&#x8BBE;&#x8BA1;&#x635F;&#x5931;&#x51FD;&#x6570;&#xFF0C;&#x7B80;&#x5355;&#x60C5;&#x51B5;&#x8BBE;&#x7F6E;&#x4EA4;&#x53C9;&#x71B5;&#x635F;&#x5931;&#x51FD;&#x6570;&#x5373;&#x53EF;&#x8FBE;&#x5230;&#x8F83;&#x597D;&#x6548;&#x679C;&#x3002;</li><li>&#x642D;&#x5EFA;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;<strong>&#x8BBE;&#x7F6E;&#x5408;&#x9002;&#x53C2;&#x6570;</strong>&#xFF0C;&#x8FDB;&#x884C;&#x8BAD;&#x7EC3;&#x3002;</li><li>&#x9884;&#x6D4B;&#x65F6;&#xFF0C;&#x9700;&#x8981;&#x6839;&#x636E;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x8FDB;&#x884C;<strong>&#x9006;&#x5411;&#x89E3;&#x7801;(&#x7F16;&#x7801;&#x7684;&#x53CD;&#x8FC7;&#x7A0B;)</strong>&#xFF0C;&#x5BFB;&#x627E;<strong>&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#xFF0C;&#x54EA;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x4E0A;&#x503C;&#x6700;&#x5927;&#x5219;&#x5F52;&#x4E3A;&#x54EA;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;</strong>&#xFF0C;&#x5373;&#x53EF;&#x5B8C;&#x6210;&#x5B9E;&#x6218;&#x7684;&#x8FC7;&#x7A0B;&#x3002;</li></ol><h2 id="&#x5C0F;&#x6280;&#x5DE7;"><a href="#&#x5C0F;&#x6280;&#x5DE7;" class="headerlink" title="&#x5C0F;&#x6280;&#x5DE7;"></a>&#x5C0F;&#x6280;&#x5DE7;</h2><ol><li>&#x8BBE;&#x7F6E;&#x7684;&#x56FE;&#x50CF;<strong>&#x7C7B;&#x522B;&#x6570;&#x4E3A;&#x5B9E;&#x9645;&#x7C7B;&#x522B;&#x6570;+1</strong>&#xFF0C;1&#x4EE3;&#x8868;&#x80CC;&#x666F;&#x7C7B;&#x522B;&#xFF0C;<strong>&#x6B64;&#x6570;&#x636E;&#x96C6;&#x4E3A;3&#x7C7B;&#xFF0C;&#x6700;&#x540E;&#x7684;&#x901A;&#x9053;&#x6570;&#x4E3A;4&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x9884;&#x6D4B;&#x4E00;&#x7C7B;&#x7269;&#x4F53;</strong>&#x3002;&#x5728;&#x901A;&#x9053;&#x65B9;&#x5411;&#x6C42;Softmax&#xFF0C;&#x5E76;&#x4E14;&#x6C42;&#x51FA;&#x6700;&#x5927;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;0&#x5219;&#x4EE3;&#x8868;&#x80CC;&#x666F;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;1&#x5219;&#x4EE3;&#x8868;&#x5706;&#x5F62;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;2&#x5219;&#x4EE3;&#x8868;&#x4E09;&#x89D2;&#x5F62;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;3&#x5219;&#x4EE3;&#x8868;&#x6B63;&#x65B9;&#x5F62;&#x3002;</li><li><strong>&#x6700;&#x5927;&#x6C60;&#x5316;&#x6536;&#x655B;&#x901F;&#x5EA6;&#x8F83;&#x6162;&#xFF0C;&#x56E0;&#x6B64;&#x6362;&#x6210;&#x4E0A;&#x91C7;&#x6837;&#xFF0C;&#x4E0D;&#x4F46;&#x53EF;&#x4EE5;&#x4F7F;&#x6A21;&#x578B;&#x66F4;&#x52A0;&#x7B80;&#x5355;&#xFF0C;&#x800C;&#x4E14;&#x53EF;&#x4EE5;&#x52A0;&#x5FEB;&#x7F51;&#x7EDC;&#x7684;&#x6536;&#x655B;&#x901F;&#x5EA6;&#x3002;</strong></li><li>&#x8BBE;&#x7F6E;&#x4E86;<strong>&#x6743;&#x91CD;&#x7684;&#x4FDD;&#x5B58;&#x65B9;&#x5F0F;</strong>&#xFF0C;<strong>&#x5B66;&#x4E60;&#x7387;&#x7684;&#x4E0B;&#x964D;&#x65B9;&#x5F0F;</strong>&#x548C;<strong>&#x65E9;&#x505C;&#x65B9;&#x5F0F;</strong>&#x3002;</li><li>&#x4F7F;&#x7528;<strong>yield</strong>&#x5173;&#x952E;&#x5B57;&#xFF0C;&#x4EA7;&#x751F;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#xFF0C;&#x4E0D;&#x7528;&#x5C06;&#x6240;&#x6709;&#x7684;&#x6570;&#x636E;&#x90FD;&#x4FDD;&#x5B58;&#x4E0B;&#x6765;&#xFF0C;&#x5927;&#x5927;&#x8282;&#x7EA6;&#x5185;&#x5B58;&#x3002;</li><li>&#x5176;&#x4E2D;&#x5C06;1000&#x4E2A;&#x6570;&#x636E;&#xFF0C;&#x5206;&#x6210;800&#x4E2A;&#x8BAD;&#x7EC3;&#x96C6;&#xFF0C;100&#x4E2A;&#x9A8C;&#x8BC1;&#x96C6;&#x548C;100&#x4E2A;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x81EA;&#x884C;&#x4FEE;&#x6539;&#x3002;</li><li>&#x6CE8;&#x610F;&#x5176;&#x4E2D;&#x7684;&#x4E00;&#x4E9B;&#x7EF4;&#x5EA6;&#x53D8;&#x6362;&#x548C;<strong>numpy</strong>&#xFF0C;<strong>tensorflow</strong>&#x5E38;&#x7528;&#x64CD;&#x4F5C;&#xFF0C;&#x5426;&#x5219;&#x5728;&#x9605;&#x8BFB;&#x4EE3;&#x7801;&#x65F6;&#x53EF;&#x80FD;&#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x56F0;&#x96BE;&#x3002;</li><li>SegNet&#x7684;<strong>&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;(&#x7F16;&#x7801;&#x7F51;&#x7EDC;)&#x7C7B;&#x4F3C;&#x4E8E;VGG</strong>&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x90E8;&#x5206;&#x5185;&#x5BB9;&#xFF0C;&#x9009;&#x62E9;&#x5176;&#x4ED6;&#x7684;&#x7F51;&#x7EDC;&#x8FDB;&#x884C;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#xFF0C;&#x6BD4;&#x8F83;&#x4E0D;&#x540C;&#x7F51;&#x7EDC;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x8FD0;&#x884C;&#x901F;&#x5EA6;&#xFF0C;&#x6700;&#x7EC8;&#x7ED3;&#x679C;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x5F02;&#x3002;</li><li>&#x56FE;&#x50CF;&#x8F93;&#x5165;&#x53EF;&#x4EE5;&#x5148;&#x5C06;&#x5176;<strong>&#x5F52;&#x4E00;&#x5316;&#x5230;0-1&#x4E4B;&#x95F4;&#x6216;&#x8005;-1-1&#x4E4B;&#x95F4;</strong>&#xFF0C;&#x56E0;&#x4E3A;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x4E00;&#x822C;&#x90FD;&#x6BD4;&#x8F83;&#x5C0F;&#xFF0C;&#x6240;&#x4EE5;&#x5F52;&#x4E00;&#x5316;&#x540E;&#x8BA1;&#x7B97;&#x65B9;&#x4FBF;&#xFF0C;&#x6536;&#x655B;&#x8F83;&#x5FEB;&#x3002;</li><li>&#x5B9E;&#x9645;&#x7684;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x5E38;&#x5E38;&#x8FD8;&#x9700;&#x8981;&#x5BF9;&#x6570;&#x636E;&#x96C6;&#x8FDB;&#x884C;<strong>&#x5927;&#x5C0F;&#x8C03;&#x6574;&#x548C;&#x589E;&#x5F3A;</strong>&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x4E3A;&#x4E86;&#x7B80;&#x5355;&#x8D77;&#x89C1;&#xFF0C;&#x6CA1;&#x6709;&#x8FDB;&#x884C;&#x590D;&#x6742;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5E94;&#x7528;&#x4E2D;&#x8981;&#x8BB0;&#x5F97;&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x7684;&#x9700;&#x8981;&#xFF0C;&#x5BF9;&#x56FE;&#x50CF;&#x8FDB;&#x884C;<strong>resize&#x6216;&#x8005;padding</strong>&#xFF0C;&#x7136;&#x540E;<strong>&#x65CB;&#x8F6C;</strong>&#xFF0C;<strong>&#x5BF9;&#x6BD4;&#x5EA6;&#x589E;&#x5F3A;</strong>&#xFF0C;<strong>&#x4EFF;&#x5C04;&#x8FD0;&#x7B97;</strong>&#x7B49;&#x7B49;&#x64CD;&#x4F5C;&#xFF0C;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x9C81;&#x68D2;&#x6027;&#xFF0C;&#x5E76;&#x4E14;&#x5B9E;&#x9645;&#x4E2D;&#x7684;&#x56FE;&#x50CF;&#x4E0D;&#x4E00;&#x5B9A;&#x6309;&#x7167;&#x987A;&#x5E8F;&#x547D;&#x540D;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x5E94;&#x7528;&#x4E2D;&#x4E5F;&#x8981;&#x6CE8;&#x610F;&#x56FE;&#x50CF;&#x8BFB;&#x53D6;&#x7684;&#x6587;&#x4EF6;&#x540D;&#x3002;</li></ol><h2 id="&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;"><a href="#&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;" class="headerlink" title="&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;"></a>&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import numpy as np</span><br><span class="line">import cv2 as cv</span><br><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def indices_maxpool(val, index):</span><br><span class="line">    input_size = index.shape</span><br><span class="line">    output_size = [x * 2 if i == 0 or i == 1 else x for i, x in enumerate(input_size[1:])]</span><br><span class="line">    output = tf.reshape(tf.scatter_nd(tf.reshape(index, (-1, 1)), tf.reshape(val, (-1, )), (batch_size * np.prod(output_size), )), [-1] + output_size)</span><br><span class="line"></span><br><span class="line">    return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Convs(keras.Model):</span><br><span class="line">    def __init__(self, filters, times):</span><br><span class="line">        super(Convs, self).__init__()</span><br><span class="line">        self.blocks = keras.Sequential()</span><br><span class="line"></span><br><span class="line">        for i in range(times):</span><br><span class="line">            self.blocks.add(keras.layers.Conv2D(filters, (3, 3), (1, 1), padding=&apos;same&apos;))</span><br><span class="line">            self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">            self.blocks.add(keras.layers.ReLU())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        output = self.blocks(inputs)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Small_SegNet(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Small_SegNet, self).__init__()</span><br><span class="line">        self.encoder1 = keras.Sequential([Convs(32, 2), keras.layers.MaxPool2D()], name=&apos;Encoder1&apos;)</span><br><span class="line">        self.encoder2 = keras.Sequential([Convs(64, 2), keras.layers.MaxPool2D()], name=&apos;Encoder2&apos;)</span><br><span class="line">        self.encoder3 = keras.Sequential([Convs(128, 2), keras.layers.MaxPool2D()], name=&apos;Encoder3&apos;)</span><br><span class="line">        self.encoder4 = keras.Sequential([Convs(256, 2), keras.layers.MaxPool2D()], name=&apos;Encoder4&apos;)</span><br><span class="line"></span><br><span class="line">        self.decoder1 = keras.Sequential([Convs(32, 2), keras.layers.UpSampling2D()], name=&apos;Decoder1&apos;)</span><br><span class="line">        self.decoder2 = keras.Sequential([Convs(64, 2), keras.layers.UpSampling2D()], name=&apos;Decoder2&apos;)</span><br><span class="line">        self.decoder3 = keras.Sequential([Convs(128, 2), keras.layers.UpSampling2D()], name=&apos;Decoder3&apos;)</span><br><span class="line">        self.decoder4 = keras.Sequential([Convs(256, 2), keras.layers.UpSampling2D()], name=&apos;Decoder4&apos;)</span><br><span class="line"></span><br><span class="line">        self.conv = keras.layers.Conv2D(num_class, (3, 3), (1, 1), padding=&apos;same&apos;, name=&apos;Conv&apos;)</span><br><span class="line">        self.softmax = keras.layers.Softmax(name=&apos;Softmax&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        encoder1 = self.encoder1(inputs)</span><br><span class="line">        encoder2 = self.encoder2(encoder1)</span><br><span class="line">        encoder3 = self.encoder3(encoder2)</span><br><span class="line">        encoder4 = self.encoder4(encoder3)</span><br><span class="line"></span><br><span class="line">        decoder4 = self.decoder4(encoder4)</span><br><span class="line">        decoder3 = self.decoder3(decoder4)</span><br><span class="line">        decoder2 = self.decoder2(decoder3)</span><br><span class="line">        decoder1 = self.decoder1(decoder2)</span><br><span class="line"></span><br><span class="line">        conv = self.conv(decoder1)</span><br><span class="line">        output = self.softmax(conv)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def generate_arrays_from_file(train_data, batch_size):</span><br><span class="line">    # &#x83B7;&#x53D6;&#x603B;&#x957F;&#x5EA6;</span><br><span class="line">    n = len(train_data)</span><br><span class="line">    i = 0</span><br><span class="line">    while 1:</span><br><span class="line">        X_train = []</span><br><span class="line">        Y_train = []</span><br><span class="line">        # &#x83B7;&#x53D6;&#x4E00;&#x4E2A;batch_size&#x5927;&#x5C0F;&#x7684;&#x6570;&#x636E;</span><br><span class="line">        for _ in range(batch_size):</span><br><span class="line">            if i == 0:</span><br><span class="line">                np.random.shuffle(train_data)</span><br><span class="line">            # &#x4ECE;&#x6587;&#x4EF6;&#x4E2D;&#x8BFB;&#x53D6;&#x56FE;&#x50CF;</span><br><span class="line">            img = cv.imread(imgs_path + &apos;\\&apos; + str(train_data[i]) + &apos;.jpg&apos;)</span><br><span class="line">            img = img / 127.5 - 1</span><br><span class="line">            X_train.append(img)</span><br><span class="line"></span><br><span class="line">            # &#x4ECE;&#x6587;&#x4EF6;&#x4E2D;&#x8BFB;&#x53D6;&#x56FE;&#x50CF;</span><br><span class="line">            img = cv.imread(mask_path + &apos;\\&apos; + str(train_data[i]) + &apos;.png&apos;)</span><br><span class="line">            seg_labels = np.zeros((img_size[0], img_size[1], num_class))</span><br><span class="line">            for c in range(num_class):</span><br><span class="line">                seg_labels[:, :, c] = (img[:, :, 0] == c).astype(int)</span><br><span class="line">            Y_train.append(seg_labels)</span><br><span class="line"></span><br><span class="line">            # &#x8BFB;&#x5B8C;&#x4E00;&#x4E2A;&#x5468;&#x671F;&#x540E;&#x91CD;&#x65B0;&#x5F00;&#x59CB;</span><br><span class="line">            i = (i + 1) % n</span><br><span class="line">        yield tf.constant(X_train), tf.constant(Y_train)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # &#x5305;&#x62EC;&#x80CC;&#x666F;</span><br><span class="line">    num_class = 4</span><br><span class="line">    train_data = list(range(800))</span><br><span class="line">    validation_data = list(range(800, 900))</span><br><span class="line">    test_data = range(900, 1000)</span><br><span class="line">    epochs = 50</span><br><span class="line">    batch_size = 16</span><br><span class="line">    tf.random.set_seed(22)</span><br><span class="line">    img_size = (128, 128)</span><br><span class="line">    colors = [[0, 0, 0], [0, 0, 128], [0, 128, 0], [128, 0, 0]]</span><br><span class="line"></span><br><span class="line">    mask_path = r&apos;.\shape\train_mask&apos;</span><br><span class="line">    imgs_path = r&apos;.\shape\train_imgs&apos;</span><br><span class="line">    test_path = r&apos;.\shape\test_imgs&apos;</span><br><span class="line">    save_path = r&apos;.\SegNet_test_result&apos;</span><br><span class="line">    weight_path = r&apos;.\SegNet_weight&apos;</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        os.mkdir(save_path)</span><br><span class="line">    except FileExistsError:</span><br><span class="line">        print(save_path + &apos;has been exist&apos;)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        os.mkdir(weight_path)</span><br><span class="line">    except FileExistsError:</span><br><span class="line">        print(weight_path + &apos;has been exist&apos;)</span><br><span class="line"></span><br><span class="line">    model = Small_SegNet()</span><br><span class="line">    model.build(input_shape=(None, img_size[0], img_size[1], 3))</span><br><span class="line">    model.summary()</span><br><span class="line"></span><br><span class="line">    optimizor = keras.optimizers.Adam(lr=1e-3)</span><br><span class="line">    lossor = keras.losses.BinaryCrossentropy()</span><br><span class="line"></span><br><span class="line">    model.compile(optimizer=optimizor, loss=lossor, metrics=[&apos;accuracy&apos;])</span><br><span class="line"></span><br><span class="line">    # &#x4FDD;&#x5B58;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;3&#x4E16;&#x4EE3;&#x4FDD;&#x5B58;&#x4E00;&#x6B21;</span><br><span class="line">    checkpoint_period = keras.callbacks.ModelCheckpoint(</span><br><span class="line">        weight_path + &apos;\\&apos; + &apos;ep{epoch:03d}-loss{loss:.3f}-val_loss{val_loss:.3f}.h5&apos;,</span><br><span class="line">        monitor=&apos;val_loss&apos;,</span><br><span class="line">        save_weights_only=True,</span><br><span class="line">        save_best_only=True,</span><br><span class="line">        period=3</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    # &#x5B66;&#x4E60;&#x7387;&#x4E0B;&#x964D;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;val_loss3&#x6B21;&#x4E0D;&#x4E0B;&#x964D;&#x5C31;&#x4E0B;&#x964D;&#x5B66;&#x4E60;&#x7387;&#x7EE7;&#x7EED;&#x8BAD;&#x7EC3;</span><br><span class="line">    reduce_lr = keras.callbacks.ReduceLROnPlateau(</span><br><span class="line">        monitor=&apos;val_loss&apos;,</span><br><span class="line">        factor=0.5,</span><br><span class="line">        patience=3,</span><br><span class="line">        verbose=1</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    # &#x662F;&#x5426;&#x9700;&#x8981;&#x65E9;&#x505C;&#xFF0C;&#x5F53;val_loss&#x4E00;&#x76F4;&#x4E0D;&#x4E0B;&#x964D;&#x7684;&#x65F6;&#x5019;&#x610F;&#x5473;&#x7740;&#x6A21;&#x578B;&#x57FA;&#x672C;&#x8BAD;&#x7EC3;&#x5B8C;&#x6BD5;&#xFF0C;&#x53EF;&#x4EE5;&#x505C;&#x6B62;</span><br><span class="line">    early_stopping = keras.callbacks.EarlyStopping(</span><br><span class="line">        monitor=&apos;val_loss&apos;,</span><br><span class="line">        min_delta=0,</span><br><span class="line">        patience=10,</span><br><span class="line">        verbose=1</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    model.fit_generator(generate_arrays_from_file(train_data, batch_size),</span><br><span class="line">                        steps_per_epoch=max(1, len(train_data) // batch_size),</span><br><span class="line">                        validation_data=generate_arrays_from_file(validation_data, batch_size),</span><br><span class="line">                        validation_steps=max(1, len(validation_data) // batch_size),</span><br><span class="line">                        epochs=epochs,</span><br><span class="line">                        callbacks=[checkpoint_period, reduce_lr, early_stopping])</span><br><span class="line"></span><br><span class="line">    for name in test_data:</span><br><span class="line">        test_img_path = test_path + &apos;\\&apos; + str(name) + &apos;.jpg&apos;</span><br><span class="line">        save_img_path = save_path + &apos;\\&apos; + str(name) + &apos;.png&apos;</span><br><span class="line">        test_img = cv.imread(test_img_path)</span><br><span class="line">        test_img = tf.constant([test_img / 127.5 - 1])</span><br><span class="line">        test_mask = model.predict(test_img)</span><br><span class="line">        test_mask = np.reshape(test_mask, (img_size[0], img_size[1], num_class))</span><br><span class="line">        test_mask = np.argmax(test_mask, axis=-1)</span><br><span class="line">        seg_img = np.zeros((img_size[0], img_size[1], 3))</span><br><span class="line">        for c in range(num_class):</span><br><span class="line">            seg_img[:, :, 0] += ((test_mask == c) * (colors[c][0]))</span><br><span class="line">            seg_img[:, :, 1] += ((test_mask == c) * (colors[c][1]))</span><br><span class="line">            seg_img[:, :, 2] += ((test_mask == c) * (colors[c][2]))</span><br><span class="line">        seg_img = seg_img.astype(np.uint8)</span><br><span class="line">        cv.imwrite(save_img_path, seg_img)</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"><a href="#&#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C;" class="headerlink" title="&#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a>&#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</h2><p><img src="/images/Semantic_segmentation/SegNet_T.png" alt="SegNet"></p><h1 id="SegNet&#x5C0F;&#x7ED3;"><a href="#SegNet&#x5C0F;&#x7ED3;" class="headerlink" title="SegNet&#x5C0F;&#x7ED3;"></a><font size="5" color="red">SegNet&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;SegNet&#x662F;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x7684;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x7F51;&#x7EDC;&#xFF0C;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;SegNet&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x53EA;&#x6709;29M&#xFF0C;&#x867D;&#x7136;&#x73B0;&#x5728;SegNet&#x7F51;&#x7EDC;&#x4E0D;&#x662F;&#x6700;&#x597D;&#x7684;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x7F51;&#x7EDC;&#xFF0C;&#x4F46;&#x662F;&#x5176;&#x7F16;&#x7801;&#x89E3;&#x7801;&#x7ED3;&#x6784;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x5BF9;&#x540E;&#x9762;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#x7684;&#x53D1;&#x5C55;&#x6709;&#x91CD;&#x8981;&#x7684;&#x5F71;&#x54CD;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;SegNet&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="语义分割网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>语义分割数据集</title>
    <link href="https://USTCcoder.github.io/2020/04/15/Semantic_segmentation%20Dataset/"/>
    <id>https://USTCcoder.github.io/2020/04/15/Semantic_segmentation Dataset/</id>
    <published>2020-04-15T13:02:25.000Z</published>
    <updated>2020-05-09T09:18:03.226Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">Data Set</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>&#x8BED;&#x4E49;&#x5206;&#x5272;:</strong>&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x7684;<strong>&#x57FA;&#x7840;&#x4EFB;&#x52A1;</strong>&#xFF0C;&#x5728;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x4E2D;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5C06;&#x89C6;&#x89C9;&#x8F93;&#x5165;&#x5206;&#x4E3A;&#x4E0D;&#x540C;&#x7684;<strong>&#x53EF;&#x89E3;&#x91CA;&#x7C7B;&#x522B;</strong>&#xFF0C;&#x548C;&#x805A;&#x7C7B;&#x5206;&#x5272;&#x65B9;&#x6CD5;&#x4E0D;&#x540C;&#x70B9;&#x5728;&#x4E8E;&#x6B64;&#xFF0C;&#x5176;&#x7C7B;&#x522B;&#x5728;&#x771F;&#x5B9E;&#x4E16;&#x754C;&#x4E2D;&#x662F;&#x6709;&#x610F;&#x4E49;&#x7684;&#xFF0C;&#x800C;&#x805A;&#x7C7B;&#x5206;&#x5272;&#x662F;&#x53EF;&#x4EE5;&#x5C06;&#x7269;&#x4F53;&#x5206;&#x6210;&#x82E5;&#x5E72;&#x90E8;&#x5206;&#xFF0C;&#x4F46;&#x662F;&#x6BCF;&#x4E00;&#x90E8;&#x5206;&#x4E0D;&#x4E00;&#x5B9A;&#x662F;&#x6709;&#x8BED;&#x4E49;&#x7684;&#xFF0C;&#x5728;<strong>&#x81EA;&#x52A8;&#x9A7E;&#x9A76;</strong>&#xFF0C;<strong>&#x56FE;&#x50CF;&#x641C;&#x7D22;</strong>&#x7B49;&#x7B49;&#x9886;&#x57DF;&#x90FD;&#x662F;&#x975E;&#x5E38;&#x91CD;&#x8981;&#x7684;&#x3002;<br><a id="more"></a></p><p><img src="/images/Semantic_segmentation/Dataset.png" alt="Dataset"></p><h1 id="&#x6570;&#x636E;&#x96C6;&#x4EE5;&#x53CA;IOU&#x4ECB;&#x7ECD;"><a href="#&#x6570;&#x636E;&#x96C6;&#x4EE5;&#x53CA;IOU&#x4ECB;&#x7ECD;" class="headerlink" title="&#x6570;&#x636E;&#x96C6;&#x4EE5;&#x53CA;IOU&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x6570;&#x636E;&#x96C6;&#x4EE5;&#x53CA;IOU&#x4ECB;&#x7ECD;</font></h1><p><strong>&#x6570;&#x636E;&#x96C6;</strong>&#xFF1A;&#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#x6A21;&#x578B;&#x8C03;&#x8BD5;&#x7684;&#x65B9;&#x4FBF;&#xFF0C;&#x6211;&#x7684;&#x535A;&#x5BA2;&#x4E2D;&#x4ECB;&#x7ECD;&#x7684;&#x6570;&#x636E;&#x96C6;&#x662F;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x7684;Shape&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x53EA;&#x6709;1000&#x4E2A;&#x8BAD;&#x7EC3;&#x6837;&#x672C;&#xFF0C;&#x4E3A;&#x4E86;&#x52A0;&#x5FEB;&#x8BAD;&#x7EC3;&#x901F;&#x5EA6;&#xFF0C;&#x6570;&#x636E;&#x96C6;&#x7684;&#x5927;&#x5C0F;&#x6211;&#x4E5F;&#x8C03;&#x6574;&#x4E3A;128x128&#xFF0C;&#x8FD9;&#x4E2A;&#x6570;&#x636E;&#x96C6;&#x53EA;&#x6709;&#x4E09;&#x7C7B;&#x7269;&#x4F53;&#xFF0C;&#x5206;&#x522B;&#x662F;&#x5706;&#x5F62;&#xFF0C;&#x4E09;&#x89D2;&#x5F62;&#x548C;&#x6B63;&#x65B9;&#x5F62;&#xFF0C;&#x56FE;&#x50CF;&#x6570;&#x636E;&#x4E3A;jpg&#x6587;&#x4EF6;&#xFF0C;&#x63A9;&#x6A21;&#x6570;&#x636E;&#x4E3A;png&#x6587;&#x4EF6;&#x3002;<br><strong>mask&#x56FE;&#x50CF;</strong>&#xFF1A;mask&#x56FE;&#x50CF;&#x7ED9;&#x521D;&#x5B66;&#x8005;&#x7B2C;&#x4E00;&#x773C;&#x770B;&#x4E0A;&#x53BB;&#x662F;&#x61F5;&#x903C;&#x7684;&#xFF0C;&#x5F53;&#x7136;&#x5305;&#x62EC;&#x6211;&#x4E5F;&#x662F;&#xFF0C;&#x8FD9;&#x4E0D;&#x662F;&#x5168;&#x9ED1;&#x7684;&#x56FE;&#x50CF;&#x5417;&#xFF1F;&#x8FD9;&#x6709;&#x4F55;&#x610F;&#x4E49;&#x5462;&#xFF1F;&#x63A9;&#x6A21;&#x56FE;&#x50CF;&#x7684;&#x4FDD;&#x5B58;&#x662F;&#x4F7F;&#x7528;8&#x4F4D;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#xFF0C;&#x56E0;&#x6B64;&#x5B83;&#x7684;&#x503C;&#x4E3A;0-255&#xFF0C;&#x79F0;&#x4E4B;&#x4E3A;&#x7070;&#x5EA6;&#x503C;&#x3002;&#x6BCF;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#x7528;&#x4E00;&#x4E2A;&#x6570;&#x66FF;&#x4EE3;&#xFF0C;&#x4E3A;&#x4E86;&#x4F7F;&#x7528;&#x65B9;&#x4FBF;&#x5219;&#x6309;&#x987A;&#x5E8F;<strong>&#x4F7F;&#x7528;1&#xFF0C;2&#xFF0C;3&#x6765;&#x5206;&#x522B;&#x4EE3;&#x8868;&#x5706;&#x5F62;&#xFF0C;&#x4E09;&#x89D2;&#x5F62;&#x548C;&#x6B63;&#x65B9;&#x5F62;&#xFF0C;&#x5176;&#x4E2D;&#x80CC;&#x666F;&#x7528;0&#x8868;&#x793A;</strong>&#x3002;&#x5728;&#x56FE;&#x50CF;&#x4E2D;&#xFF0C;0&#x4E3A;&#x9ED1;&#x8272;&#xFF0C;255&#x4E3A;&#x767D;&#x8272;&#xFF0C;&#x7070;&#x5EA6;&#x503C;&#x8D8A;&#x63A5;&#x8FD1;0&#xFF0C;&#x5219;&#x56FE;&#x50CF;&#x8D8A;&#x9ED1;&#xFF0C;&#x8D8A;&#x63A5;&#x8FD1;255&#x5219;&#x56FE;&#x50CF;&#x8D8A;&#x767D;&#x3002;&#x56E0;&#x6B64;&#x5728;&#x8FD9;&#x4E2A;&#x4E09;&#x7C7B;&#x95EE;&#x9898;&#x4E2D;&#xFF0C;&#x56FE;&#x50CF;&#x7070;&#x5EA6;&#x6700;&#x5927;&#x4E3A;3&#xFF0C;&#x5F53;&#x7136;&#x770B;&#x8D77;&#x6765;&#x662F;&#x9ED1;&#x8272;&#x7684;&#x3002;&#x4E0D;&#x4FE1;&#x53EF;&#x4EE5;&#x5BF9;mask&#x4E58;85&#x5219;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x989C;&#x8272;&#x3002;<br><strong>IOU(Intersection Over Union&#xFF0C;&#x4EA4;&#x5E76;&#x6BD4;)</strong>&#xFF1A;&#x7528;&#x4E8E;<strong>&#x8BC4;&#x4F30;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x7B97;&#x6CD5;&#x6027;&#x80FD;&#x7684;&#x6307;&#x6807;&#x662F;&#x5E73;&#x5747;IOU</strong>&#xFF0C;&#x4EA4;&#x5E76;&#x6BD4;&#x4E5F;&#x975E;&#x5E38;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x7B97;&#x6CD5;&#x7684;&#x7ED3;&#x679C;&#x4E0E;&#x771F;&#x5B9E;&#x7269;&#x4F53;&#x8FDB;&#x884C;<strong>&#x4EA4;&#x8FD0;&#x7B97;&#x7684;&#x7ED3;&#x679C;&#x9664;&#x4EE5;&#x8FDB;&#x884C;&#x5E76;&#x8FD0;&#x7B97;&#x7684;&#x7ED3;&#x679C;</strong>&#x3002;&#x901A;&#x8FC7;&#x4E0B;&#x56FE;&#x53EF;&#x4EE5;&#x76F4;&#x89C2;&#x7684;&#x770B;&#x51FA;IOU&#x7684;&#x8BA1;&#x7B97;&#x65B9;&#x6CD5;&#x3002;<br><img src="/images/Semantic_segmentation/Dataset_I.png" alt="IOU"></p><h1 id="&#x4E00;&#x4E9B;&#x8BF4;&#x660E;"><a href="#&#x4E00;&#x4E9B;&#x8BF4;&#x660E;" class="headerlink" title="&#x4E00;&#x4E9B;&#x8BF4;&#x660E;"></a><font size="5" color="red">&#x4E00;&#x4E9B;&#x8BF4;&#x660E;</font></h1><ol><li>&#x5728;&#x5B66;&#x4E60;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x53EF;&#x80FD;&#x4F1A;&#x9047;&#x5230;&#x4E00;&#x4E9B;&#x4EE3;&#x7801;&#x4E0A;&#x7684;&#x56F0;&#x96BE;&#xFF0C;&#x5982;<strong>tensorflow</strong>&#xFF0C;<strong>numpy</strong>&#xFF0C;<strong>opencv</strong>&#x7684;&#x7528;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x6211;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x6846;&#x67B6;&#x548C;Python&#x5E38;&#x7528;&#x5E93;&#x76F8;&#x5173;&#x6587;&#x7AE0;&#xFF0C;&#x91CC;&#x9762;&#x4F1A;&#x6709;&#x4E00;&#x4E9B;&#x7B80;&#x5355;&#x7684;&#x4ECB;&#x7ECD;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x5B66;&#x4E60;&#xFF0C;&#x6700;&#x597D;&#x662F;&#x624B;&#x52A8;&#x6572;&#x4E00;&#x6572;&#xFF0C;&#x770B;&#x4E00;&#x770B;&#x3002;</li><li>&#x56E0;&#x4E3A;&#x8FD9;&#x4E2A;&#x535A;&#x5BA2;&#x662F;&#x5BF9;&#x5B66;&#x4E60;&#x7684;&#x4E00;&#x4E9B;&#x603B;&#x7ED3;&#x548C;&#x8BB0;&#x5F55;&#xFF0C;&#x610F;&#x5728;&#x548C;&#x5B66;&#x4E60;&#x8005;&#x63A2;&#x8BA8;&#x548C;&#x4EA4;&#x6D41;&#xFF0C;&#x5E76;&#x4E14;&#x7ED9;&#x51C6;&#x5907;&#x5165;&#x95E8;&#x7684;&#x540C;&#x5B66;&#x4E00;&#x4E9B;&#x624B;&#x628A;&#x624B;&#x7684;&#x6559;&#x5B66;&#xFF0C;&#x56E0;&#x6B64;&#x5173;&#x4E8E;&#x56FE;&#x50CF;&#x5206;&#x5272;&#x7684;&#x7B97;&#x6CD5;&#x53C2;&#x6570;&#x8BBE;&#x8BA1;&#xFF0C;&#x6211;&#x90FD;&#x662F;&#x81EA;&#x5DF1;&#x5C1D;&#x8BD5;&#x7684;&#xFF0C;&#x4E0D;&#x662F;&#x9488;&#x5BF9;&#x4E8E;&#x8FD9;&#x4E2A;&#x6570;&#x636E;&#x96C6;&#x6700;&#x4F18;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x5927;&#x5BB6;&#x53EF;&#x4EE5;<strong>&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x7684;&#x5B9E;&#x9645;&#x9700;&#x8981;&#x4FEE;&#x6539;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;</strong>&#x3002;</li><li>&#x5B9E;&#x9645;&#x7684;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x5E38;&#x5E38;&#x8FD8;&#x9700;&#x8981;&#x5BF9;&#x6570;&#x636E;&#x96C6;&#x8FDB;&#x884C;<strong>&#x5927;&#x5C0F;&#x8C03;&#x6574;&#x548C;&#x589E;&#x5F3A;</strong>&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x4E3A;&#x4E86;&#x7B80;&#x5355;&#x8D77;&#x89C1;&#xFF0C;&#x6CA1;&#x6709;&#x8FDB;&#x884C;&#x590D;&#x6742;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5E94;&#x7528;&#x4E2D;&#x8981;&#x8BB0;&#x5F97;&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x7684;&#x9700;&#x8981;&#xFF0C;&#x5BF9;&#x56FE;&#x50CF;&#x8FDB;&#x884C;<strong>resize&#x6216;&#x8005;padding</strong>&#xFF0C;&#x7136;&#x540E;<strong>&#x65CB;&#x8F6C;</strong>&#xFF0C;<strong>&#x5BF9;&#x6BD4;&#x5EA6;&#x589E;&#x5F3A;</strong>&#xFF0C;<strong>&#x4EFF;&#x5C04;&#x8FD0;&#x7B97;</strong>&#x7B49;&#x7B49;&#x64CD;&#x4F5C;&#xFF0C;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x9C81;&#x68D2;&#x6027;&#xFF0C;&#x5E76;&#x4E14;&#x5B9E;&#x9645;&#x4E2D;&#x7684;&#x56FE;&#x50CF;&#x4E0D;&#x4E00;&#x5B9A;&#x6309;&#x7167;&#x987A;&#x5E8F;&#x547D;&#x540D;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x5E94;&#x7528;&#x4E2D;&#x4E5F;&#x8981;&#x6CE8;&#x610F;&#x56FE;&#x50CF;&#x8BFB;&#x53D6;&#x7684;&#x6587;&#x4EF6;&#x540D;&#x3002;</li><li>&#x4E3A;&#x4E86;&#x8BA9;&#x5B66;&#x4E60;&#x8005;&#x770B;&#x7684;&#x65B9;&#x4FBF;&#x548C;&#x6E05;&#x6670;&#xFF0C;&#x6211;&#x6CA1;&#x6709;&#x4F7F;&#x7528;&#x591A;&#x4E2A;&#x6587;&#x4EF6;&#x5BF9;&#x7A0B;&#x5E8F;&#x8FDB;&#x884C;&#x5C01;&#x88C5;&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x5728;&#x521A;&#x5F00;&#x59CB;&#x5B66;&#x4E60;&#x6A21;&#x578B;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x67E5;&#x770B;GitHub&#x4EE3;&#x7801;&#xFF0C;&#x4E00;&#x4E2A;&#x6A21;&#x578B;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x597D;&#x51E0;&#x4E2A;&#x6587;&#x4EF6;&#x5939;&#xFF0C;&#x6BCF;&#x4E2A;&#x6587;&#x4EF6;&#x5939;&#x91CC;&#x9762;&#x53C8;&#x6709;&#x5F88;&#x591A;&#x7684;&#x4EE3;&#x7801;&#x6587;&#x4EF6;&#xFF0C;&#x5176;&#x4E2D;&#x5F88;&#x591A;&#x6587;&#x4EF6;&#x4E92;&#x76F8;&#x8C03;&#x7528;&#x3002;&#x867D;&#x7136;&#x8FD9;&#x6837;&#x7684;&#x5DE5;&#x7A0B;&#x9879;&#x76EE;&#x662F;&#x975E;&#x5E38;&#x597D;&#x7BA1;&#x7406;&#x548C;&#x8FD0;&#x884C;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x7ED9;&#x521D;&#x5B66;&#x8005;&#x4E00;&#x79CD;&#x4E08;&#x4E8C;&#x548C;&#x5C1A;&#x6478;&#x4E0D;&#x7740;&#x5934;&#x8111;&#x7684;&#x611F;&#x89C9;&#xFF0C;&#x5BF9;&#x6B64;&#x6211;&#x6DF1;&#x6709;&#x4F53;&#x4F1A;&#x3002;&#x6240;&#x4EE5;&#x6211;&#x5C31;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;.py&#x6587;&#x4EF6;&#x6765;&#x5C01;&#x88C5;&#xFF0C;&#x56E0;&#x6B64;&#x4EE3;&#x7801;&#x53EF;&#x80FD;&#x4F1A;&#x6709;&#x51E0;&#x767E;&#x884C;&#xFF0C;&#x4F46;&#x662F;&#x5176;&#x4E2D;&#x7684;&#x5404;&#x4E2A;&#x51FD;&#x6570;&#x548C;&#x7C7B;&#x90FD;&#x6709;&#x81EA;&#x5DF1;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x53EF;&#x4EE5;&#x4FDD;&#x8BC1;&#x5B66;&#x4E60;&#x8005;&#x4E0D;&#x4F1A;&#x88AB;&#x7EB8;&#x8001;&#x864E;&#x5413;&#x4F4F;&#x3002;</li><li>&#x5728;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x5B66;&#x4E60;&#x4E2D;&#xFF0C;&#x6211;&#x4F1A;&#x5217;&#x4E3E;&#x51FA;&#x4E00;&#x4E9B;&#x7ECF;&#x5178;&#x7684;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x6A21;&#x578B;&#xFF0C;&#x56E0;&#x4E3A;&#x6A21;&#x578B;&#x592A;&#x591A;&#xFF0C;&#x5E76;&#x4E14;&#x4ECD;&#x5728;&#x4E0D;&#x65AD;&#x7684;&#x66F4;&#x65B0;&#x8FDB;&#x6B65;&#x4E4B;&#x4E2D;&#xFF0C;&#x6240;&#x4EE5;&#x5927;&#x5BB6;&#x53EF;&#x4EE5;&#x8054;&#x7CFB;&#x6211;&#xFF0C;&#x548C;&#x6211;&#x8FDB;&#x884C;&#x6C9F;&#x901A;&#x548C;&#x4EA4;&#x6D41;&#xFF0C;&#x6216;&#x8005;&#x63A8;&#x8350;&#x7ED9;&#x6211;&#x4E00;&#x4E9B;&#x4F18;&#x79C0;&#x7684;&#x6A21;&#x578B;&#x3002;</li><li>&#x5173;&#x4E8E;&#x95EE;&#x9898;&#x7684;&#x4EA4;&#x6D41;&#xFF0C;&#x56FE;&#x50CF;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x9700;&#x8981;&#x7684;&#x540C;&#x5B66;&#x53EF;&#x4EE5;&#x5230;&#x4E3B;&#x9875;&#x67E5;&#x770B;&#x6211;&#x7684;QQ&#x6216;&#x8005;&#x90AE;&#x7BB1;&#xFF0C;&#x6211;&#x4F1A;&#x975E;&#x5E38;&#x8363;&#x5E78;&#x7684;&#x63D0;&#x4F9B;&#x529B;&#x6240;&#x80FD;&#x53CA;&#x7684;&#x5E2E;&#x52A9;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x52A0;&#x597D;&#x53CB;&#x7684;&#x65F6;&#x5019;&#x4E00;&#x5B9A;&#x8981;&#x8BB0;&#x5F97;&#x5907;&#x6CE8;&#xFF0C;&#x4E0D;&#x7136;&#x6211;&#x53EF;&#x80FD;&#x4F1A;&#x5FFD;&#x89C6;&#x4E00;&#x4E9B;&#x7C97;&#x5FC3;&#x7684;&#x5C0F;&#x4F19;&#x4F34;&#x3002;</li></ol><h1 id="&#x5C0F;&#x7ED3;"><a href="#&#x5C0F;&#x7ED3;" class="headerlink" title="&#x5C0F;&#x7ED3;"></a><font size="5" color="red">&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;<strong>&#x8BED;&#x4E49;&#x5206;&#x5272;</strong>&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x7684;<strong>&#x57FA;&#x7840;&#x4EFB;&#x52A1;</strong>&#xFF0C;&#x4E5F;&#x662F;&#x975E;&#x5E38;&#x91CD;&#x8981;&#x7684;&#x4EFB;&#x52A1;&#x4E4B;&#x4E00;&#xFF0C;&#x81EA;&#x4ECE;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7684;&#x65F6;&#x4EE3;&#x5230;&#x6765;&#xFF0C;&#x5404;&#x79CD;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x767E;&#x82B1;&#x9F50;&#x653E;&#xFF0C;&#x5F88;&#x96BE;&#x8BF4;&#x51FA;&#x6700;&#x597D;&#x7684;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x65B9;&#x6CD5;&#xFF0C;&#x53EF;&#x80FD;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x9002;&#x7528;&#x4E8E;&#x5F88;&#x591A;&#x6570;&#x636E;&#xFF0C;&#x4F46;&#x4E5F;<strong>&#x4E0D;&#x80FD;&#x8BF4;&#x660E;&#x67D0;&#x4E00;&#x4E2A;&#x7B97;&#x6CD5;&#x4E00;&#x5B9A;&#x4F18;&#x4E8E;&#x53E6;&#x4E00;&#x4E2A;&#x7B97;&#x6CD5;</strong>&#xFF0C;&#x6211;&#x4EEC;&#x8981;&#x505A;&#x7684;&#x5C31;&#x662F;&#x5C3D;&#x53EF;&#x80FD;&#x591A;&#x7684;<strong>&#x5B66;&#x4E60;&#x5404;&#x79CD;&#x5404;&#x6837;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x6A21;&#x578B;</strong>&#xFF0C;&#x7136;&#x540E;<strong>&#x5438;&#x53D6;&#x8FD9;&#x4E9B;&#x6A21;&#x578B;&#x6210;&#x529F;&#x7684;&#x539F;&#x56E0;</strong>&#xFF0C;&#x6295;&#x5165;&#x5230;&#x81EA;&#x5DF1;&#x7684;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x4E4B;&#x4E2D;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Data Set&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="语义分割网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>GhostNet</title>
    <link href="https://USTCcoder.github.io/2020/04/08/feature_extraction%20GhostNet/"/>
    <id>https://USTCcoder.github.io/2020/04/08/feature_extraction GhostNet/</id>
    <published>2020-04-08T09:21:16.000Z</published>
    <updated>2020-05-09T09:08:28.038Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">GhostNet</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>GhostNet:</strong>&#x6765;&#x81EA;<strong>&#x534E;&#x4E3A;&#x8BFA;&#x4E9A;&#x65B9;&#x821F;&#x5B9E;&#x9A8C;&#x5BA4;</strong>&#xFF0C;&#x4E8E;<strong>2020&#x5E74;&#x88AB;CVPR</strong>&#x63A5;&#x53D7;&#xFF0C;&#x501F;&#x9274;&#x4E86;&#x5927;&#x91CF;&#x4F18;&#x79C0;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x7279;&#x70B9;&#xFF0C;&#x63D0;&#x51FA;&#x4E86;&#x4E00;&#x79CD;&#x65B0;&#x578B;&#x7684;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x67B6;&#x6784;&#x3002;<br><a id="more"></a></p><p><img src="/images/Feature_extraction/GhostNet.png" alt="GhostNet"></p><h1 id="GhostNet&#x7279;&#x70B9;"><a href="#GhostNet&#x7279;&#x70B9;" class="headerlink" title="GhostNet&#x7279;&#x70B9;"></a><font size="5" color="red">GhostNet&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">&#x5728;Ghost Module&#x4E2D;&#x5F15;&#x5165;<strong>&#x74F6;&#x9888;&#x7ED3;&#x6784;</strong>&#x548C;<strong>GroupConv&#x5206;&#x7EC4;&#x5377;&#x79EF;</strong></font><br>&#x2003;&#x2003;<font size="3">&#x5728;Ghost Bottleneck&#x4E2D;&#x5F15;&#x5165;<strong>DepthwiseConv&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;</strong>&#x548C;<strong>Squeeze-and-Excitation&#x6A21;&#x5757;</strong></font></p><h1 id="Group-Convolution"><a href="#Group-Convolution" class="headerlink" title="Group Convolution"></a><font size="5" color="red">Group Convolution</font></h1><p><img src="/images/Feature_extraction/ShuffleNet_V2_G.png" alt="ShuffleNet_V2"><br>&#x2003;&#x2003;<font size="3"><strong>Group Convolution(&#x5206;&#x7EC4;&#x5377;&#x79EF;)</strong>&#xFF1A;<strong>&#x4F20;&#x7EDF;&#x5377;&#x79EF;&#x662F;&#x91C7;&#x7528;&#x4E00;&#x79CD;&#x5377;&#x79EF;&#x5168;&#x8FDE;&#x63A5;&#x7684;&#x601D;&#x60F3;</strong>&#xFF0C;&#x7279;&#x5F81;&#x56FE;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x90FD;&#x7ED3;&#x5408;&#x4E86;&#x56FE;&#x50CF;&#x4E2D;&#x6240;&#x6709;&#x901A;&#x9053;&#x7684;&#x4FE1;&#x606F;&#x3002;&#x800C;&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x7279;&#x5F81;&#x56FE;&#x50CF;<strong>&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x53EA;&#x5229;&#x7528;&#x5230;&#x4E00;&#x90E8;&#x5206;&#x539F;&#x59CB;&#x56FE;&#x50CF;&#x7684;&#x901A;&#x9053;</strong>&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;<strong>&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;</strong>&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;5x5&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(256x5x5+1)=1638656&#xFF0C;&#x800C;&#x5206;&#x6210;32&#x7EC4;&#x7684;&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(8*5x5+1)=51456&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;32&#x500D;&#xFF0C;&#x5F53;&#x7EC4;&#x6570;&#x53D8;&#x6210;&#x901A;&#x9053;&#x6570;&#x65F6;&#xFF0C;&#x5219;&#x7C7B;&#x4F3C;&#x4E8E;Depthwise Convolution&#x6DF1;&#x5EA6;&#x5377;&#x79EF;</font></p><h1 id="Depthwise-Convolution"><a href="#Depthwise-Convolution" class="headerlink" title="Depthwise Convolution"></a><font size="5" color="red">Depthwise Convolution</font></h1><p><img src="/images/deep_learning/depthwise.png" alt="depthwise"><br>&#x2003;&#x2003;<font size="3"><strong>Depthwise Convolution(&#x6DF1;&#x5EA6;&#x5377;&#x79EF;)&#xFF1A;&#x5728;</strong>&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x4E0A;&#x5355;&#x72EC;&#x8FDB;&#x884C;&#x5377;&#x79EF;<strong></strong></font><br>&#x2003;&#x2003;<font size="3">&#x53C2;&#x6570;depth_multiplier&#x9ED8;&#x8BA4;&#x4E3A;1<strong>&#xFF0C;&#x4EE3;&#x8868;&#x6BCF;&#x4E2A;&#x901A;&#x9053;&#x6570;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x5355;&#x72EC;&#x5377;&#x79EF;&#xFF0C;</strong>&#x8F93;&#x51FA;&#x7684;&#x901A;&#x9053;&#x6570;&#x548C;&#x8F93;&#x5165;&#x901A;&#x9053;&#x6570;&#x76F8;&#x7B49;<strong>&#xFF0C;&#x8BBE;&#x7F6E;</strong>depth_multiplier=n<strong>&#xFF0C;&#x5219;&#x4EE3;&#x8868;&#x6BCF;&#x4E2A;&#x901A;&#x9053;&#x6570;&#x8FDB;&#x884C;n&#x6B21;&#x5355;&#x72EC;&#x5377;&#x79EF;&#xFF0C;</strong>&#x8F93;&#x51FA;&#x901A;&#x9053;&#x6570;&#x662F;&#x8F93;&#x5165;&#x901A;&#x9053;&#x6570;&#x7684;n&#x500D;<strong>&#x3002;</strong></font><br>&#x2003;&#x2003;<font size="3">&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;**&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;8x8x1024&#x7684;&#x7279;&#x5F81;&#x56FE;&#xFF0C;&#x7ECF;&#x8FC7;5x5&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;8x8x1024&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;1024x(1024x5x5+1)=26215424&#xFF0C;&#x800C;&#x6DF1;&#x5EA6;&#x5377;&#x79EF;&#x53C2;&#x6570;&#x91CF;&#x4E3A;1024x(1x5x5+1)=26624&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;1024&#x500D;&#x3002;</font></p><h1 id="Squeeze-and-Excitation"><a href="#Squeeze-and-Excitation" class="headerlink" title="Squeeze-and-Excitation"></a><font size="5" color="red">Squeeze-and-Excitation</font></h1><p><img src="/images/Feature_extraction/SENet_S.png" alt="SENet"><br>&#x2003;&#x2003;<font size="3"><strong>Squeeze-and-Excitation</strong>&#xFF1A;&#x53C8;&#x79F0;&#x4E3A;<strong>&#x7279;&#x5F81;&#x91CD;&#x6807;&#x5B9A;&#x5377;&#x79EF;</strong>&#xFF0C;&#x6216;&#x8005;<strong>&#x6CE8;&#x610F;&#x529B;&#x673A;&#x5236;</strong>&#x3002;&#x5177;&#x4F53;&#x6765;&#x8BF4;&#xFF0C;&#x5C31;&#x662F;&#x901A;&#x8FC7;<strong>&#x5B66;&#x4E60;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x81EA;&#x52A8;&#x83B7;&#x53D6;&#x5230;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x7684;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;</strong>&#xFF0C;&#x7136;&#x540E;&#x4F9D;&#x7167;&#x8FD9;&#x4E2A;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;&#x53BB;<strong>&#x63D0;&#x5347;&#x6709;&#x7528;&#x7684;&#x7279;&#x5F81;&#x5E76;&#x6291;&#x5236;&#x5BF9;&#x5F53;&#x524D;&#x4EFB;&#x52A1;&#x7528;&#x5904;&#x4E0D;&#x5927;&#x7684;&#x7279;&#x5F81;</strong>&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x9996;&#x5148;&#x662F; <strong>Squeeze&#x64CD;&#x4F5C;</strong>&#xFF0C;&#x5148;<strong>&#x8FDB;&#x884C;&#x5168;&#x5C40;&#x6C60;&#x5316;&#xFF0C;&#x5177;&#x6709;&#x5168;&#x5C40;&#x7684;&#x611F;&#x53D7;&#x91CE;</strong>&#xFF0C;&#x5E76;&#x4E14;&#x8F93;&#x51FA;&#x7684;&#x7EF4;&#x5EA6;&#x548C;&#x8F93;&#x5165;&#x7684;&#x7279;&#x5F81;&#x901A;&#x9053;&#x6570;&#x76F8;&#x5339;&#x914D;&#xFF0C;&#x5B83;&#x8868;&#x5F81;&#x7740;&#x5728;&#x7279;&#x5F81;&#x901A;&#x9053;&#x4E0A;&#x54CD;&#x5E94;&#x7684;&#x5168;&#x5C40;&#x5206;&#x5E03;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x7136;&#x540E;&#x662F;<strong>Excitation&#x64CD;&#x4F5C;</strong>&#xFF0C;<strong>&#x901A;&#x8FC7;&#x5168;&#x8FDE;&#x63A5;&#x5C42;&#x4E3A;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x751F;&#x6210;&#x6743;&#x91CD;&#xFF0C;&#x5EFA;&#x7ACB;&#x901A;&#x9053;&#x95F4;&#x7684;&#x76F8;&#x5173;&#x6027;</strong>&#xFF0C;<strong>&#x8F93;&#x51FA;&#x7684;&#x6743;&#x91CD;&#x770B;&#x505A;&#x662F;&#x8FDB;&#x8FC7;&#x7279;&#x5F81;&#x9009;&#x62E9;&#x540E;&#x7684;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x7684;&#x91CD;&#x8981;&#x6027;</strong>&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;<strong>&#x4E58;&#x6CD5;&#x9010;&#x901A;&#x9053;&#x52A0;&#x6743;&#x5230;&#x5148;&#x524D;&#x7684;&#x7279;&#x5F81;&#x4E0A;</strong>&#xFF0C;&#x5B8C;&#x6210;&#x5728;&#x901A;&#x9053;&#x7EF4;&#x5EA6;&#x4E0A;&#x7684;&#x5BF9;&#x539F;&#x59CB;&#x7279;&#x5F81;&#x7684;&#x91CD;&#x6807;&#x5B9A;&#x3002;</font></p><h1 id="GhostNet&#x56FE;&#x50CF;&#x5206;&#x6790;"><a href="#GhostNet&#x56FE;&#x50CF;&#x5206;&#x6790;" class="headerlink" title="GhostNet&#x56FE;&#x50CF;&#x5206;&#x6790;"></a><font size="5" color="red">GhostNet&#x56FE;&#x50CF;&#x5206;&#x6790;</font></h1><p><img src="/images/Feature_extraction/GhostNet_A.png" alt="GhostNet"></p><h1 id="TensorFlow2-0&#x5B9E;&#x73B0;"><a href="#TensorFlow2-0&#x5B9E;&#x73B0;" class="headerlink" title="TensorFlow2.0&#x5B9E;&#x73B0;"></a><font size="4">TensorFlow2.0&#x5B9E;&#x73B0;</font></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Ghost_Block(keras.Model):</span><br><span class="line">    def __init__(self, out_channel, relu=True):</span><br><span class="line">        super(Ghost_Block, self).__init__()</span><br><span class="line">        self.conv = Conv_block(out_channel // 2, relu=relu)</span><br><span class="line">        self.gconv = Conv_block(kernel_size=(3, 3), relu=relu)</span><br><span class="line">        self.concatenate = keras.layers.Concatenate()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        conv = self.conv(inputs)</span><br><span class="line">        gconv = self.gconv(conv)</span><br><span class="line">        output = self.concatenate([conv, gconv])</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SE_Block(keras.Model):</span><br><span class="line">    def __init__(self, out_channel):</span><br><span class="line">        super(SE_Block, self).__init__()</span><br><span class="line">        self.squeeze = keras.Sequential()</span><br><span class="line">        self.squeeze.add(keras.layers.GlobalAveragePooling2D())</span><br><span class="line">        self.squeeze.add(keras.layers.Dense(out_channel // 4))</span><br><span class="line">        self.squeeze.add(keras.layers.ReLU())</span><br><span class="line">        self.squeeze.add(keras.layers.Dense(out_channel))</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        squeeze = self.squeeze(inputs)</span><br><span class="line">        sigmoid = tf.nn.sigmoid(squeeze)</span><br><span class="line">        reshape = tf.reshape(sigmoid, (-1, 1, 1, inputs.shape[-1]))</span><br><span class="line">        output = inputs * reshape</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Ghost_Bneck(keras.Model):</span><br><span class="line">    def __init__(self, out_channel, exp_channel, kernel_size, strides=(1, 1), se=False):</span><br><span class="line">        super(Ghost_Bneck, self).__init__()</span><br><span class="line">        self.block = keras.Sequential()</span><br><span class="line">        self.block.add(Ghost_Block(exp_channel))</span><br><span class="line">        if strides == (2, 2):</span><br><span class="line">            self.block.add(Conv_block(kernel_size=kernel_size, strides=(2, 2)))</span><br><span class="line">        if se:</span><br><span class="line">            self.block.add(SE_Block(exp_channel))</span><br><span class="line">        self.block.add(Ghost_Block(out_channel, relu=False))</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        output = self.block(inputs)</span><br><span class="line">        if output.shape[1:] == inputs.shape[1:]:</span><br><span class="line">            output = inputs + output</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Conv_block(keras.Model):</span><br><span class="line">    def __init__(self, filters=None, kernel_size=(1, 1), strides=(1, 1), padding=&apos;same&apos;, relu=True, name=&apos;Conv_Block&apos;):</span><br><span class="line">        super(Conv_block, self).__init__()</span><br><span class="line">        self.block = keras.Sequential(name=name)</span><br><span class="line">        if filters:</span><br><span class="line">            self.block.add(keras.layers.Conv2D(filters=filters, kernel_size=kernel_size, strides=strides, padding=padding))</span><br><span class="line">        else:</span><br><span class="line">            self.block.add(keras.layers.DepthwiseConv2D(kernel_size=kernel_size, strides=strides, padding=padding))</span><br><span class="line">        self.block.add(keras.layers.BatchNormalization())</span><br><span class="line">        if relu:</span><br><span class="line">            self.block.add(keras.layers.ReLU())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.block(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GhostNet(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(GhostNet, self).__init__()</span><br><span class="line">        self.conv1 = keras.Sequential(name=&apos;Conv_Block1&apos;)</span><br><span class="line">        self.conv1.add(Conv_block(16, (3, 3), (2, 2)))</span><br><span class="line"></span><br><span class="line">        self.bneck1 = keras.Sequential(name=&apos;GBneck1&apos;)</span><br><span class="line">        self.bneck1.add(Ghost_Bneck(out_channel=16, exp_channel=16, kernel_size=(3, 3)))</span><br><span class="line">        self.bneck1.add(Ghost_Bneck(out_channel=24, exp_channel=48, kernel_size=(3, 3), strides=(2, 2)))</span><br><span class="line"></span><br><span class="line">        self.bneck2 = keras.Sequential(name=&apos;GBneck2&apos;)</span><br><span class="line">        self.bneck2.add(Ghost_Bneck(out_channel=24, exp_channel=72, kernel_size=(3, 3)))</span><br><span class="line">        self.bneck2.add(Ghost_Bneck(out_channel=40, exp_channel=72, kernel_size=(5, 5), strides=(2, 2), se=True))</span><br><span class="line"></span><br><span class="line">        self.bneck3 = keras.Sequential(name=&apos;GBneck3&apos;)</span><br><span class="line">        self.bneck3.add(Ghost_Bneck(out_channel=40, exp_channel=120, kernel_size=(5, 5), se=True))</span><br><span class="line">        self.bneck3.add(Ghost_Bneck(out_channel=80, exp_channel=240, kernel_size=(3, 3), strides=(2, 2)))</span><br><span class="line"></span><br><span class="line">        self.bneck4 = keras.Sequential(name=&apos;GBneck4&apos;)</span><br><span class="line">        self.bneck4.add(Ghost_Bneck(out_channel=80, exp_channel=200, kernel_size=(3, 3)))</span><br><span class="line">        self.bneck4.add(Ghost_Bneck(out_channel=80, exp_channel=184, kernel_size=(3, 3)))</span><br><span class="line">        self.bneck4.add(Ghost_Bneck(out_channel=80, exp_channel=184, kernel_size=(3, 3)))</span><br><span class="line">        self.bneck4.add(Ghost_Bneck(out_channel=112, exp_channel=480, kernel_size=(3, 3), se=True))</span><br><span class="line">        self.bneck4.add(Ghost_Bneck(out_channel=112, exp_channel=672, kernel_size=(3, 3), se=True))</span><br><span class="line">        self.bneck4.add(Ghost_Bneck(out_channel=160, exp_channel=672, kernel_size=(5, 5), strides=(2, 2), se=True))</span><br><span class="line"></span><br><span class="line">        self.bneck5 = keras.Sequential(name=&apos;GBneck5&apos;)</span><br><span class="line">        self.bneck5.add(Ghost_Bneck(out_channel=160, exp_channel=960, kernel_size=(5, 5)))</span><br><span class="line">        self.bneck5.add(Ghost_Bneck(out_channel=160, exp_channel=960, kernel_size=(5, 5), se=True))</span><br><span class="line">        self.bneck5.add(Ghost_Bneck(out_channel=160, exp_channel=960, kernel_size=(5, 5)))</span><br><span class="line">        self.bneck5.add(Ghost_Bneck(out_channel=160, exp_channel=960, kernel_size=(5, 5), se=True))</span><br><span class="line"></span><br><span class="line">        self.conv2 = keras.Sequential(name=&apos;Conv_Block2&apos;)</span><br><span class="line">        self.conv2.add(Conv_block(960))</span><br><span class="line">        self.average_pooling = keras.layers.AveragePooling2D((7, 7), (7, 7), name=&apos;AveragePooling&apos;)</span><br><span class="line">        self.conv3 = keras.Sequential(name=&apos;Conv_Block3&apos;)</span><br><span class="line">        self.conv3.add(Conv_block(1280))</span><br><span class="line">        self.conv3.add(keras.layers.Conv2D(1000, (1, 1)))</span><br><span class="line">        self.softmax = keras.layers.Softmax(name=&apos;Softmax&apos;)</span><br><span class="line">        self.reshape = keras.layers.Reshape((1000,), name=&apos;Reshape&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        conv1 = self.conv1(inputs)</span><br><span class="line">        bneck1 = self.bneck1(conv1)</span><br><span class="line">        bneck2 = self.bneck2(bneck1)</span><br><span class="line">        bneck3 = self.bneck3(bneck2)</span><br><span class="line">        bneck4 = self.bneck4(bneck3)</span><br><span class="line">        bneck5 = self.bneck5(bneck4)</span><br><span class="line">        conv2 = self.conv2(bneck5)</span><br><span class="line">        average_pooling = self.average_pooling(conv2)</span><br><span class="line">        conv3 = self.conv3(average_pooling)</span><br><span class="line">        softmax = self.softmax(conv3)</span><br><span class="line">        output = self.reshape(softmax)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    model = GhostNet()</span><br><span class="line">    model.build(input_shape=(None, 224, 224, 3))</span><br><span class="line">    model.summary()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/Feature_extraction/GhostNet_R.png" alt="GhostNet"></p><h1 id="GhostNet&#x5C0F;&#x7ED3;"><a href="#GhostNet&#x5C0F;&#x7ED3;" class="headerlink" title="GhostNet&#x5C0F;&#x7ED3;"></a><font size="5" color="red">GhostNet&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;GhostNet&#x662F;&#x4E00;&#x79CD;&#x590D;&#x6742;&#x7684;&#x8F7B;&#x91CF;&#x7EA7;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x4E3A;5M&#xFF0C;&#x5176;&#x501F;&#x9274;&#x4E86;&#x5927;&#x91CF;&#x4F18;&#x79C0;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#x7684;&#x7CBE;&#x9AD3;&#xFF0C;&#x5982;<strong>MobileNet&#x7684;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;</strong>&#x601D;&#x60F3;&#xFF0C;<strong>AlexNet&#x7684;&#x5206;&#x7EC4;&#x5377;&#x79EF;</strong>&#x601D;&#x60F3;&#xFF0C;<strong>SENet&#x7684;&#x6CE8;&#x610F;&#x529B;&#x673A;&#x5236;</strong>&#xFF0C;&#x56E0;&#x6B64;&#x83B7;&#x5F97;&#x4E86;&#x8F83;&#x597D;&#x7684;&#x6548;&#x679C;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;GhostNet&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="特征提取网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>ShuffleNet-V2</title>
    <link href="https://USTCcoder.github.io/2020/04/02/feature_extraction%20ShuffleNet_V2/"/>
    <id>https://USTCcoder.github.io/2020/04/02/feature_extraction ShuffleNet_V2/</id>
    <published>2020-04-02T07:13:17.000Z</published>
    <updated>2020-05-09T09:15:53.113Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">ShuffleNet-V2</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>ShuffleNet-V2</strong>:<strong>2018&#x5E74;&#x53D1;&#x8868;&#x4E8E;ECCV</strong>&#xFF0C;&#x662F;&#x4E00;&#x79CD;&#x9AD8;&#x6548;&#x7684;&#x8F7B;&#x91CF;&#x7EA7;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x6A21;&#x578B;&#xFF0C;&#x5728;<strong>&#x540C;&#x7B49;&#x590D;&#x6742;&#x5EA6;&#x4E0B;&#xFF0C;ShuffleNet-V2&#x6BD4;ShuffleNet&#x548C;MobileNet&#x66F4;&#x51C6;&#x786E;</strong>&#x3002;<br><a id="more"></a></p><p><img src="/images/Feature_extraction/ShuffleNet_V2.png" alt="ShuffleNet_V2"></p><h1 id="ShuffleNet-V2&#x7279;&#x70B9;"><a href="#ShuffleNet-V2&#x7279;&#x70B9;" class="headerlink" title="ShuffleNet-V2&#x7279;&#x70B9;"></a><font size="5" color="red">ShuffleNet-V2&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3"><strong>&#x501F;&#x9274;&#x4E86;AlexNet&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x7684;&#x6982;&#x5FF5;</strong>&#xFF0C;&#x5F15;&#x5165;&#x4E86;<strong>&#x901A;&#x9053;&#x5206;&#x79BB;</strong>&#x548C;<strong>&#x901A;&#x9053;&#x6D17;&#x724C;</strong>&#xFF0C;&#x5728;<strong>&#x51CF;&#x5C11;&#x53C2;&#x6570;&#x91CF;&#x7684;&#x540C;&#x65F6;&#xFF0C;&#x589E;&#x52A0;&#x4E86;&#x901A;&#x9053;&#x4E4B;&#x95F4;&#x7684;&#x8054;&#x7CFB;</strong>&#xFF0C;&#x5E76;&#x4E14;<strong>&#x5BF9;&#x6700;&#x540E;&#x7684;&#x7ED3;&#x679C;&#x8FDB;&#x884C;&#x901A;&#x9053;&#x5408;&#x5E76;&#xFF0C;&#x5B8C;&#x6210;&#x7279;&#x5F81;&#x878D;&#x5408;</strong>&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x5728;Block&#x4E2D;&#x4F7F;&#x7528;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x601D;&#x60F3;&#xFF0C;&#x51CF;&#x5C11;&#x6A21;&#x578B;&#x53C2;&#x6570;&#x91CF;</font></p><h1 id="Group-Convolution"><a href="#Group-Convolution" class="headerlink" title="Group Convolution"></a><font size="5" color="red">Group Convolution</font></h1><p><img src="/images/Feature_extraction/ShuffleNet_V2_G.png" alt="ShuffleNet_V2"><br>&#x2003;&#x2003;<font size="3"><strong>Group Convolution(&#x5206;&#x7EC4;&#x5377;&#x79EF;)</strong>&#xFF1A;<strong>&#x4F20;&#x7EDF;&#x5377;&#x79EF;&#x662F;&#x91C7;&#x7528;&#x4E00;&#x79CD;&#x5377;&#x79EF;&#x5168;&#x8FDE;&#x63A5;&#x7684;&#x601D;&#x60F3;</strong>&#xFF0C;&#x7279;&#x5F81;&#x56FE;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x90FD;&#x7ED3;&#x5408;&#x4E86;&#x56FE;&#x50CF;&#x4E2D;&#x6240;&#x6709;&#x901A;&#x9053;&#x7684;&#x4FE1;&#x606F;&#x3002;&#x800C;&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x7279;&#x5F81;&#x56FE;&#x50CF;<strong>&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x53EA;&#x5229;&#x7528;&#x5230;&#x4E00;&#x90E8;&#x5206;&#x539F;&#x59CB;&#x56FE;&#x50CF;&#x7684;&#x901A;&#x9053;</strong>&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;<strong>&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;</strong>&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;5x5&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(256x5x5+1)=1638656&#xFF0C;&#x800C;&#x5206;&#x6210;32&#x7EC4;&#x7684;&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(8*5x5+1)=51456&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;32&#x500D;&#xFF0C;&#x5F53;&#x7EC4;&#x6570;&#x53D8;&#x6210;&#x901A;&#x9053;&#x6570;&#x65F6;&#xFF0C;&#x5219;&#x7C7B;&#x4F3C;&#x4E8E;Depthwise Convolution&#x6DF1;&#x5EA6;&#x5377;&#x79EF;</font></p><h1 id="Separable-Convolution"><a href="#Separable-Convolution" class="headerlink" title="Separable Convolution"></a><font size="5" color="red">Separable Convolution</font></h1><p><img src="/images/Feature_extraction/Xception_D.png" alt="Xception"><br>&#x2003;&#x2003;<font size="3"><strong>Separable Convolution(&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)</strong>&#xFF1A;&#x662F;&#x4E0A;&#x9762;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x5408;&#x4E8C;&#x4E3A;&#x4E00;&#x7684;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x3002;</font><br>&#x2003;&#x2003;<font size="3"><strong>&#x7B2C;&#x4E00;&#x6B65;&#xFF1A;DepthwiseConv&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x8FDB;&#x884C;&#x5377;&#x79EF;</strong></font><br>&#x2003;&#x2003;<font size="3"><strong>&#x7B2C;&#x4E8C;&#x6B65;&#xFF1A;PointwiseConv&#xFF0C;&#x5BF9;&#x7B2C;&#x4E00;&#x6B65;&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#x8FDB;&#x884C;1x1&#x5377;&#x79EF;&#xFF0C;&#x5B9E;&#x73B0;&#x901A;&#x9053;&#x878D;&#x5408;</strong></font><br>&#x2003;&#x2003;<font size="3">&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;<strong>&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;</strong>&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;<strong>&#x8C03;&#x6574;&#x4E3A;&#x4EFB;&#x610F;&#x5408;&#x9002;&#x7684;&#x901A;&#x9053;&#x6570;</strong>&#x3002;&#x7B2C;&#x4E00;&#x6B65;&#x7684;<strong>&#x76EE;&#x7684;&#x662F;&#x51CF;&#x5C11;&#x53C2;&#x6570;&#x91CF;</strong>&#xFF0C;&#x7B2C;&#x4E8C;&#x6B65;&#x662F;<strong>&#x8C03;&#x6574;&#x901A;&#x9053;&#x6570;</strong>&#xFF0C;&#x56E0;&#x6B64;&#x5C06;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x7ED3;&#x5408;&#xFF0C;&#x7EC4;&#x6210;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x3002;</font></p><h1 id="&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;ShuffleNet-V2&#x7F51;&#x7EDC;&#x7ED3;&#x6784;"><a href="#&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;ShuffleNet-V2&#x7F51;&#x7EDC;&#x7ED3;&#x6784;" class="headerlink" title="&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;ShuffleNet-V2&#x7F51;&#x7EDC;&#x7ED3;&#x6784;"></a><font size="5" color="red">&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;ShuffleNet-V2&#x7F51;&#x7EDC;&#x7ED3;&#x6784;</font></h1><p><img src="/images/Feature_extraction/ShuffleNet_V2_C.png" alt="ShuffleNet_V2"></p><h1 id="ShuffleNet-V2&#x56FE;&#x50CF;&#x5206;&#x6790;"><a href="#ShuffleNet-V2&#x56FE;&#x50CF;&#x5206;&#x6790;" class="headerlink" title="ShuffleNet-V2&#x56FE;&#x50CF;&#x5206;&#x6790;"></a><font size="5" color="red">ShuffleNet-V2&#x56FE;&#x50CF;&#x5206;&#x6790;</font></h1><p><img src="/images/Feature_extraction/ShuffleNet_V2_A.png" alt="ShuffleNet_V2"></p><h1 id="TensorFlow2-0&#x5B9E;&#x73B0;"><a href="#TensorFlow2-0&#x5B9E;&#x73B0;" class="headerlink" title="TensorFlow2.0&#x5B9E;&#x73B0;"></a><font size="4">TensorFlow2.0&#x5B9E;&#x73B0;</font></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Channel_Split(keras.layers.Layer):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Channel_Split, self).__init__()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, **kwargs):</span><br><span class="line"></span><br><span class="line">        return inputs[..., :inputs.shape[-1] // 2], inputs[..., inputs.shape[-1] // 2:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Channel_Shuffle(keras.layers.Layer):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Channel_Shuffle, self).__init__()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, **kwargs):</span><br><span class="line">        channel = inputs.shape[-1]</span><br><span class="line">        reshape1 = tf.reshape(inputs, (-1, inputs.shape[1], inputs.shape[2], 2, channel // 2))</span><br><span class="line">        permute = tf.transpose(reshape1, perm=[0, 1, 2, 4, 3])</span><br><span class="line">        output = tf.reshape(permute, (-1, inputs.shape[1], inputs.shape[2], channel))</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Block(keras.Model):</span><br><span class="line">    def __init__(self, out_channel, strides=(1, 1)):</span><br><span class="line">        super(Block, self).__init__()</span><br><span class="line">        self.strides = strides</span><br><span class="line"></span><br><span class="line">        self.block1 = keras.Sequential()</span><br><span class="line">        self.block1.add(Conv_block(out_channel // 2))</span><br><span class="line">        self.block1.add(Conv_block(kernel_size=(3, 3), strides=strides, relu=False))</span><br><span class="line">        self.block1.add(Conv_block(out_channel // 2))</span><br><span class="line"></span><br><span class="line">        if strides == (2, 2):</span><br><span class="line">            self.block2 = keras.Sequential()</span><br><span class="line">            self.block2.add(Conv_block(kernel_size=(3, 3), strides=strides, relu=False))</span><br><span class="line">            self.block2.add(Conv_block(out_channel // 2))</span><br><span class="line">        else:</span><br><span class="line">            self.channel_split = Channel_Split()</span><br><span class="line"></span><br><span class="line">        self.concatenate = keras.layers.Concatenate()</span><br><span class="line">        self.channel_shuffle = Channel_Shuffle()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        if self.strides == (1, 1):</span><br><span class="line">            split1, split2 = self.channel_split(inputs)</span><br><span class="line">        else:</span><br><span class="line">            split1, split2 = inputs, inputs</span><br><span class="line">        block1 = self.block1(split1)</span><br><span class="line">        if self.strides == (1, 1):</span><br><span class="line">            block2 = split2</span><br><span class="line">        else:</span><br><span class="line">            block2 = self.block2(split2)</span><br><span class="line">        concatenate = self.concatenate([block1, block2])</span><br><span class="line">        output = self.channel_shuffle(concatenate)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Conv_block(keras.Model):</span><br><span class="line">    def __init__(self, filters=None, kernel_size=(1, 1), strides=(1, 1), padding=&apos;same&apos;, relu=True, name=&apos;Conv_Block&apos;):</span><br><span class="line">        super(Conv_block, self).__init__()</span><br><span class="line">        self.block = keras.Sequential(name=name)</span><br><span class="line">        if filters:</span><br><span class="line">            self.block.add(keras.layers.Conv2D(filters=filters, kernel_size=kernel_size, strides=strides, padding=padding))</span><br><span class="line">        else:</span><br><span class="line">            self.block.add(keras.layers.DepthwiseConv2D(kernel_size=kernel_size, strides=strides, padding=padding))</span><br><span class="line">        self.block.add(keras.layers.BatchNormalization())</span><br><span class="line">        if relu:</span><br><span class="line">            self.block.add(keras.layers.ReLU())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.block(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ShuffleNet_V2(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(ShuffleNet_V2, self).__init__()</span><br><span class="line">        self.conv1 = keras.layers.Conv2D(24, (3, 3), (2, 2), padding=&apos;same&apos;, name=&apos;Conv1&apos;)</span><br><span class="line">        self.maxpooling = keras.layers.MaxPool2D((3, 3), (2, 2), padding=&apos;same&apos;, name=&apos;MaxPool&apos;)</span><br><span class="line"></span><br><span class="line">        self.block1 = keras.Sequential(name=&apos;Block_1&apos;)</span><br><span class="line">        self.block1.add(Block(116, (2, 2)))</span><br><span class="line">        for i in range(3):</span><br><span class="line">            self.block1.add(Block(116))</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential(name=&apos;Block_2&apos;)</span><br><span class="line">        self.block2.add(Block(232, (2, 2)))</span><br><span class="line">        for i in range(7):</span><br><span class="line">            self.block2.add(Block(232))</span><br><span class="line"></span><br><span class="line">        self.block3 = keras.Sequential(name=&apos;Block_3&apos;)</span><br><span class="line">        self.block3.add(Block(464, (2, 2)))</span><br><span class="line">        for i in range(3):</span><br><span class="line">            self.block3.add(Block(464))</span><br><span class="line"></span><br><span class="line">        self.conv2 = keras.layers.Conv2D(1024, (1, 1), (1, 1), padding=&apos;same&apos;, name=&apos;Conv2&apos;)</span><br><span class="line">        self.global_average_pooling = keras.layers.GlobalAveragePooling2D(name=&apos;GlobalAveragePooling&apos;)</span><br><span class="line">        self.dense = keras.layers.Dense(num_class, activation=&apos;softmax&apos;, name=&apos;Dense&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        conv1 = self.conv1(inputs)</span><br><span class="line">        maxpooling = self.maxpooling(conv1)</span><br><span class="line">        block1 = self.block1(maxpooling)</span><br><span class="line">        block2 = self.block2(block1)</span><br><span class="line">        block3 = self.block3(block2)</span><br><span class="line">        conv2 = self.conv2(block3)</span><br><span class="line">        global_average_pooling = self.global_average_pooling(conv2)</span><br><span class="line">        output = self.dense(global_average_pooling)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    model = ShuffleNet_V2()</span><br><span class="line">    model.build(input_shape=(None, 224, 224, 3))</span><br><span class="line">    model.summary()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/Feature_extraction/ShuffleNet_V2_R.png" alt="ShuffleNet_V2"></p><h1 id="ShuffleNet-V2&#x5C0F;&#x7ED3;"><a href="#ShuffleNet-V2&#x5C0F;&#x7ED3;" class="headerlink" title="ShuffleNet-V2&#x5C0F;&#x7ED3;"></a><font size="5" color="red">ShuffleNet-V2&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;ShuffleNet-V2&#x662F;&#x4E00;&#x79CD;&#x6709;&#x6548;&#x7684;&#x8F7B;&#x91CF;&#x7EA7;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x53EA;&#x6709;1M&#xFF0C;&#x5176;&#x4ECE;AlexNet&#x4E2D;&#x501F;&#x9274;&#x4E86;<strong>&#x5206;&#x7EC4;&#x5377;&#x79EF;</strong>&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x5E76;&#x4E14;&#x8FD0;&#x7528;&#x4E86;<strong>&#x901A;&#x9053;&#x5206;&#x79BB;</strong>&#x548C;<strong>&#x6D17;&#x724C;</strong>&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x4E0D;&#x4F46;&#x53EF;&#x4EE5;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x6A21;&#x578B;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;<strong>&#x63D0;&#x9AD8;&#x6A21;&#x578B;&#x7684;&#x9C81;&#x68D2;&#x6027;</strong>&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;ShuffleNet-V2&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="特征提取网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>EfficientNet</title>
    <link href="https://USTCcoder.github.io/2020/03/31/feature_extraction%20EfficientNet/"/>
    <id>https://USTCcoder.github.io/2020/03/31/feature_extraction EfficientNet/</id>
    <published>2020-03-31T13:04:38.000Z</published>
    <updated>2020-05-09T09:08:02.121Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">EfficientNet</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>EfficientNet:</strong>&#x662F;<strong>&#x8C37;&#x6B4C;&#x516C;&#x53F8;&#x4E8E;2019&#x5E74;&#x63D0;&#x51FA;</strong>&#x7684;&#x9AD8;&#x6548;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;&#x6545;&#x5F97;&#x540D;&#x4E3A;EfficientNet&#xFF0C;<strong>&#x5927;&#x5E45;&#x5EA6;&#x7684;&#x7F29;&#x5C0F;&#x4E86;&#x53C2;&#x6570;&#x7684;&#x540C;&#x65F6;&#x63D0;&#x9AD8;&#x4E86;&#x9884;&#x6D4B;&#x51C6;&#x786E;&#x5EA6;</strong>&#x3002;<br><a id="more"></a></p><p><img src="/images/Feature_extraction/EfficientNet.png" alt="EfficientNet"></p><h1 id="EfficientNet&#x7279;&#x70B9;"><a href="#EfficientNet&#x7279;&#x70B9;" class="headerlink" title="EfficientNet&#x7279;&#x70B9;"></a><font size="5" color="red">EfficientNet&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">&#x548C;MobileNet_V3&#x7C7B;&#x4F3C;&#xFF0C;&#x5728;Block&#x4E2D;<strong>&#x5148;&#x8FDB;&#x884C;1x1&#x5377;&#x79EF;&#x63D0;&#x5347;&#x901A;&#x9053;&#x6570;</strong>&#xFF0C;&#x7136;&#x540E;<strong>&#x8FDB;&#x884C;DepthwiseConv&#x6DF1;&#x5EA6;&#x5377;&#x79EF;</strong>&#x51CF;&#x5C11;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x5E76;&#x4E14;&#x5728;<strong>Block&#x4E2D;&#x5F15;&#x5165;&#x6B8B;&#x5DEE;&#x7ED3;&#x6784;&#x548C;Squeeze-and-Excitation&#x6A21;&#x5757;</strong></font><br>&#x2003;&#x2003;<font size="3">&#x5EFA;&#x7ACB;<strong>&#x591A;&#x4E2A;&#x7F51;&#x7EDC;&#x6DF1;&#x5EA6;&#xFF0C;&#x7F51;&#x7EDC;&#x5BBD;&#x5EA6;&#xFF0C;&#x56FE;&#x50CF;&#x5206;&#x8FA8;&#x7387;&#x4E0D;&#x540C;&#x7684;&#x6A21;&#x578B;</strong>&#xFF0C;&#x4ECE;<strong>&#x4E09;&#x4E2A;&#x65B9;&#x9762;&#x62D3;&#x5C55;&#x7F51;&#x7EDC;&#x6027;&#x80FD;</strong></font></p><h1 id="Depthwise-Convolution"><a href="#Depthwise-Convolution" class="headerlink" title="Depthwise Convolution"></a><font size="5" color="red">Depthwise Convolution</font></h1><p><img src="/images/deep_learning/depthwise.png" alt="depthwise"><br>&#x2003;&#x2003;<font size="3"><strong>Depthwise Convolution(&#x6DF1;&#x5EA6;&#x5377;&#x79EF;)&#xFF1A;&#x5728;</strong>&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x4E0A;&#x5355;&#x72EC;&#x8FDB;&#x884C;&#x5377;&#x79EF;<strong></strong></font><br>&#x2003;&#x2003;<font size="3">&#x53C2;&#x6570;depth_multiplier&#x9ED8;&#x8BA4;&#x4E3A;1<strong>&#xFF0C;&#x4EE3;&#x8868;&#x6BCF;&#x4E2A;&#x901A;&#x9053;&#x6570;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x5355;&#x72EC;&#x5377;&#x79EF;&#xFF0C;</strong>&#x8F93;&#x51FA;&#x7684;&#x901A;&#x9053;&#x6570;&#x548C;&#x8F93;&#x5165;&#x901A;&#x9053;&#x6570;&#x76F8;&#x7B49;<strong>&#xFF0C;&#x8BBE;&#x7F6E;</strong>depth_multiplier=n<strong>&#xFF0C;&#x5219;&#x4EE3;&#x8868;&#x6BCF;&#x4E2A;&#x901A;&#x9053;&#x6570;&#x8FDB;&#x884C;n&#x6B21;&#x5355;&#x72EC;&#x5377;&#x79EF;&#xFF0C;</strong>&#x8F93;&#x51FA;&#x901A;&#x9053;&#x6570;&#x662F;&#x8F93;&#x5165;&#x901A;&#x9053;&#x6570;&#x7684;n&#x500D;<strong>&#x3002;</strong></font><br>&#x2003;&#x2003;<font size="3">&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;**&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;8x8x1024&#x7684;&#x7279;&#x5F81;&#x56FE;&#xFF0C;&#x7ECF;&#x8FC7;5x5&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;8x8x1024&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;1024x(1024x5x5+1)=26215424&#xFF0C;&#x800C;&#x6DF1;&#x5EA6;&#x5377;&#x79EF;&#x53C2;&#x6570;&#x91CF;&#x4E3A;1024x(1x5x5+1)=26624&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;1024&#x500D;&#x3002;</font></p><h1 id="Squeeze-and-Excitation"><a href="#Squeeze-and-Excitation" class="headerlink" title="Squeeze-and-Excitation"></a><font size="5" color="red">Squeeze-and-Excitation</font></h1><p><img src="/images/Feature_extraction/SENet_S.png" alt="SENet"><br>&#x2003;&#x2003;<font size="3"><strong>Squeeze-and-Excitation</strong>&#xFF1A;&#x53C8;&#x79F0;&#x4E3A;<strong>&#x7279;&#x5F81;&#x91CD;&#x6807;&#x5B9A;&#x5377;&#x79EF;</strong>&#xFF0C;&#x6216;&#x8005;<strong>&#x6CE8;&#x610F;&#x529B;&#x673A;&#x5236;</strong>&#x3002;&#x5177;&#x4F53;&#x6765;&#x8BF4;&#xFF0C;&#x5C31;&#x662F;&#x901A;&#x8FC7;<strong>&#x5B66;&#x4E60;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x81EA;&#x52A8;&#x83B7;&#x53D6;&#x5230;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x7684;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;</strong>&#xFF0C;&#x7136;&#x540E;&#x4F9D;&#x7167;&#x8FD9;&#x4E2A;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;&#x53BB;<strong>&#x63D0;&#x5347;&#x6709;&#x7528;&#x7684;&#x7279;&#x5F81;&#x5E76;&#x6291;&#x5236;&#x5BF9;&#x5F53;&#x524D;&#x4EFB;&#x52A1;&#x7528;&#x5904;&#x4E0D;&#x5927;&#x7684;&#x7279;&#x5F81;</strong>&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x9996;&#x5148;&#x662F; <strong>Squeeze&#x64CD;&#x4F5C;</strong>&#xFF0C;&#x5148;<strong>&#x8FDB;&#x884C;&#x5168;&#x5C40;&#x6C60;&#x5316;&#xFF0C;&#x5177;&#x6709;&#x5168;&#x5C40;&#x7684;&#x611F;&#x53D7;&#x91CE;</strong>&#xFF0C;&#x5E76;&#x4E14;&#x8F93;&#x51FA;&#x7684;&#x7EF4;&#x5EA6;&#x548C;&#x8F93;&#x5165;&#x7684;&#x7279;&#x5F81;&#x901A;&#x9053;&#x6570;&#x76F8;&#x5339;&#x914D;&#xFF0C;&#x5B83;&#x8868;&#x5F81;&#x7740;&#x5728;&#x7279;&#x5F81;&#x901A;&#x9053;&#x4E0A;&#x54CD;&#x5E94;&#x7684;&#x5168;&#x5C40;&#x5206;&#x5E03;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x7136;&#x540E;&#x662F;<strong>Excitation&#x64CD;&#x4F5C;</strong>&#xFF0C;<strong>&#x901A;&#x8FC7;&#x5168;&#x8FDE;&#x63A5;&#x5C42;&#x4E3A;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x751F;&#x6210;&#x6743;&#x91CD;&#xFF0C;&#x5EFA;&#x7ACB;&#x901A;&#x9053;&#x95F4;&#x7684;&#x76F8;&#x5173;&#x6027;</strong>&#xFF0C;<strong>&#x8F93;&#x51FA;&#x7684;&#x6743;&#x91CD;&#x770B;&#x505A;&#x662F;&#x8FDB;&#x8FC7;&#x7279;&#x5F81;&#x9009;&#x62E9;&#x540E;&#x7684;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x7684;&#x91CD;&#x8981;&#x6027;</strong>&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;<strong>&#x4E58;&#x6CD5;&#x9010;&#x901A;&#x9053;&#x52A0;&#x6743;&#x5230;&#x5148;&#x524D;&#x7684;&#x7279;&#x5F81;&#x4E0A;</strong>&#xFF0C;&#x5B8C;&#x6210;&#x5728;&#x901A;&#x9053;&#x7EF4;&#x5EA6;&#x4E0A;&#x7684;&#x5BF9;&#x539F;&#x59CB;&#x7279;&#x5F81;&#x7684;&#x91CD;&#x6807;&#x5B9A;&#x3002;</font></p><h1 id="EfficientNet&#x57FA;&#x6A21;&#x578B;B0&#x56FE;&#x50CF;&#x5206;&#x6790;"><a href="#EfficientNet&#x57FA;&#x6A21;&#x578B;B0&#x56FE;&#x50CF;&#x5206;&#x6790;" class="headerlink" title="EfficientNet&#x57FA;&#x6A21;&#x578B;B0&#x56FE;&#x50CF;&#x5206;&#x6790;"></a><font size="5" color="red">EfficientNet&#x57FA;&#x6A21;&#x578B;B0&#x56FE;&#x50CF;&#x5206;&#x6790;</font></h1><p><img src="/images/Feature_extraction/EfficientNet_A.png" alt="EfficientNet"></p><h1 id="&#x57FA;&#x6A21;&#x578B;B0&#x7684;TensorFlow2-0&#x5B9E;&#x73B0;"><a href="#&#x57FA;&#x6A21;&#x578B;B0&#x7684;TensorFlow2-0&#x5B9E;&#x73B0;" class="headerlink" title="&#x57FA;&#x6A21;&#x578B;B0&#x7684;TensorFlow2.0&#x5B9E;&#x73B0;"></a><font size="4">&#x57FA;&#x6A21;&#x578B;B0&#x7684;TensorFlow2.0&#x5B9E;&#x73B0;</font></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Swish(keras.layers.Layer):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Swish, self).__init__()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, **kwargs):</span><br><span class="line"></span><br><span class="line">        return inputs * tf.nn.sigmoid(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Block(keras.Model):</span><br><span class="line">    def __init__(self, in_channel, out_channel, times1, times2=4, kernel_size=(1, 1), strides=(1, 1)):</span><br><span class="line">        super(Block, self).__init__()</span><br><span class="line">        self.block1 = keras.Sequential()</span><br><span class="line">        self.block1.add(Conv_block(in_channel * times1))</span><br><span class="line">        self.block1.add(Conv_block(kernel_size=kernel_size, strides=strides))</span><br><span class="line">        self.block2 = keras.Sequential()</span><br><span class="line">        self.block2.add(keras.layers.GlobalAveragePooling2D())</span><br><span class="line">        self.block2.add(keras.layers.Reshape((1, 1, in_channel * times1)))</span><br><span class="line">        self.block2.add(keras.layers.Conv2D(in_channel // times2, (1, 1)))</span><br><span class="line">        self.block2.add(keras.layers.Conv2D(in_channel * times1, (1, 1)))</span><br><span class="line">        self.conv = Conv_block(out_channel)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block1 = self.block1(inputs)</span><br><span class="line">        block2 = self.block2(block1)</span><br><span class="line">        output = block1 * block2</span><br><span class="line">        if output.shape[1:] == inputs.shape[1:]:</span><br><span class="line">            output = output + inputs</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Conv_block(keras.Model):</span><br><span class="line">    def __init__(self, filters=None, kernel_size=(1, 1), strides=(1, 1), padding=&apos;same&apos;, name=&apos;Conv_Block&apos;):</span><br><span class="line">        super(Conv_block, self).__init__()</span><br><span class="line">        self.block = keras.Sequential(name=name)</span><br><span class="line">        if filters:</span><br><span class="line">            self.block.add(keras.layers.Conv2D(filters=filters, kernel_size=kernel_size, strides=strides, padding=padding))</span><br><span class="line">        else:</span><br><span class="line">            self.block.add(keras.layers.DepthwiseConv2D(kernel_size=kernel_size, strides=strides, padding=padding))</span><br><span class="line">        self.block.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.block.add(Swish())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.block(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class EfficientNet(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(EfficientNet, self).__init__()</span><br><span class="line">        self.zeropadding = keras.layers.ZeroPadding2D(name=&apos;ZeroPadding&apos;)</span><br><span class="line">        self.conv1 = keras.Sequential(name=&apos;Conv_Block_1&apos;)</span><br><span class="line">        self.conv1.add(Conv_block(32, (3, 3), (2, 2), padding=&apos;valid&apos;))</span><br><span class="line"></span><br><span class="line">        self.block1 = keras.Sequential(name=&apos;Block_1&apos;)</span><br><span class="line">        self.block1.add(Block(in_channel=32, out_channel=16, times1=1, kernel_size=(3, 3), strides=(1, 1)))</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential(name=&apos;Block_2&apos;)</span><br><span class="line">        self.block2.add(Block(in_channel=16, out_channel=24, times1=6, kernel_size=(3, 3), strides=(2, 2)))</span><br><span class="line">        self.block2.add(Block(in_channel=24, out_channel=24, times1=6, kernel_size=(3, 3)))</span><br><span class="line"></span><br><span class="line">        self.block3 = keras.Sequential(name=&apos;Block_3&apos;)</span><br><span class="line">        self.block3.add(Block(in_channel=24, out_channel=40, times1=6, kernel_size=(5, 5), strides=(2, 2)))</span><br><span class="line">        self.block3.add(Block(in_channel=40, out_channel=40, times1=6, kernel_size=(5, 5)))</span><br><span class="line"></span><br><span class="line">        self.block4 = keras.Sequential(name=&apos;Block_4&apos;)</span><br><span class="line">        self.block4.add(Block(in_channel=40, out_channel=80, times1=6, kernel_size=(3, 3), strides=(2, 2)))</span><br><span class="line">        self.block4.add(Block(in_channel=80, out_channel=80, times1=6, kernel_size=(3, 3)))</span><br><span class="line">        self.block4.add(Block(in_channel=80, out_channel=80, times1=6, kernel_size=(3, 3)))</span><br><span class="line"></span><br><span class="line">        self.block5 = keras.Sequential(name=&apos;Block_5&apos;)</span><br><span class="line">        self.block5.add(Block(in_channel=80, out_channel=112, times1=6, kernel_size=(5, 5)))</span><br><span class="line">        self.block5.add(Block(in_channel=112, out_channel=112, times1=6, kernel_size=(5, 5)))</span><br><span class="line">        self.block5.add(Block(in_channel=112, out_channel=112, times1=6, kernel_size=(5, 5)))</span><br><span class="line"></span><br><span class="line">        self.block6 = keras.Sequential(name=&apos;Block_6&apos;)</span><br><span class="line">        self.block6.add(Block(in_channel=112, out_channel=192, times1=6, kernel_size=(5, 5), strides=(2, 2)))</span><br><span class="line">        self.block6.add(Block(in_channel=192, out_channel=192, times1=6, kernel_size=(5, 5)))</span><br><span class="line">        self.block6.add(Block(in_channel=192, out_channel=192, times1=6, kernel_size=(5, 5)))</span><br><span class="line">        self.block6.add(Block(in_channel=192, out_channel=192, times1=6, kernel_size=(5, 5)))</span><br><span class="line"></span><br><span class="line">        self.block7 = keras.Sequential(name=&apos;Block_7&apos;)</span><br><span class="line">        self.block7.add(Block(in_channel=192, out_channel=320, times1=6, kernel_size=(3, 3)))</span><br><span class="line"></span><br><span class="line">        self.conv2 = keras.Sequential(name=&apos;Conv_Block_2&apos;)</span><br><span class="line">        self.conv2.add(Conv_block(1280))</span><br><span class="line"></span><br><span class="line">        self.global_average_pooling = keras.layers.GlobalAveragePooling2D(name=&apos;GlobalAveragePooling&apos;)</span><br><span class="line">        self.dropout = keras.layers.Dropout(0.2, name=&apos;Dropout&apos;)</span><br><span class="line">        self.dense = keras.layers.Dense(1000, activation=&apos;softmax&apos;, name=&apos;Dense&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        zeropadding = self.zeropadding(inputs)</span><br><span class="line">        conv1 = self.conv1(zeropadding)</span><br><span class="line">        block1 = self.block1(conv1)</span><br><span class="line">        block2 = self.block2(block1)</span><br><span class="line">        block3 = self.block3(block2)</span><br><span class="line">        block4 = self.block4(block3)</span><br><span class="line">        block5 = self.block5(block4)</span><br><span class="line">        block6 = self.block6(block5)</span><br><span class="line">        block7 = self.block7(block6)</span><br><span class="line">        conv2 = self.conv2(block7)</span><br><span class="line">        global_average_pooling = self.global_average_pooling(conv2)</span><br><span class="line">        dropout = self.dropout(global_average_pooling)</span><br><span class="line">        output = self.dense(dropout)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    model = EfficientNet()</span><br><span class="line">    model.build(input_shape=(None, 224, 224, 3))</span><br><span class="line">    model.summary()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/Feature_extraction/EfficientNet_R.png" alt="EfficientNet"></p><h1 id="EfficientNet&#x5C0F;&#x7ED3;"><a href="#EfficientNet&#x5C0F;&#x7ED3;" class="headerlink" title="EfficientNet&#x5C0F;&#x7ED3;"></a><font size="5" color="red">EfficientNet&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;EfficientNet&#x662F;&#x4E00;&#x79CD;&#x590D;&#x6742;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;EfficientNet&#x57FA;&#x6A21;&#x578B;B0&#x7684;&#x53C2;&#x6570;&#x91CF;&#x6709;10M&#xFF0C;&#x5176;&#x8003;&#x8651;<strong>&#x7F51;&#x7EDC;&#x6DF1;&#x5EA6;</strong>&#xFF0C;<strong>&#x7F51;&#x7EDC;&#x5BBD;&#x5EA6;</strong>&#xFF0C;<strong>&#x56FE;&#x50CF;&#x5206;&#x8FA8;&#x7387;</strong>&#x7B49;&#x56E0;&#x7D20;&#x7684;&#x601D;&#x60F3;&#x503C;&#x5F97;&#x6211;&#x4EEC;&#x5B66;&#x4E60;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;EfficientNet&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="特征提取网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>EffNet</title>
    <link href="https://USTCcoder.github.io/2020/03/28/feature_extraction%20EffNet/"/>
    <id>https://USTCcoder.github.io/2020/03/28/feature_extraction EffNet/</id>
    <published>2020-03-28T12:58:51.000Z</published>
    <updated>2020-05-09T09:07:41.586Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">EffNet</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>EffNet</strong>:<strong>2018&#x5E74;&#x53D1;&#x8868;&#x4E8E;ICIP</strong>&#xFF0C;&#x63D0;&#x51FA;&#x4E00;&#x79CD;<strong>&#x65B0;&#x9896;&#x7684;&#x5377;&#x79EF;&#x5757;&#x8BBE;&#x8BA1;</strong>&#xFF0C;&#x80FD;&#x591F;&#x663E;&#x8457;<strong>&#x51CF;&#x8F7B;&#x8BA1;&#x7B97;&#x8D1F;&#x62C5;</strong>&#xFF0C;&#x4E14;&#x6027;&#x80FD;&#x8FDC;&#x80DC;&#x5F53;&#x524D;&#x7684;&#x6700;&#x597D;&#x7684;&#x6A21;&#x578B;(&#x5BF9;&#x6BD4;MobileNet,ShuffleNet)&#x3002;<br><a id="more"></a></p><p><img src="/images/Feature_extraction/EffNet.png" alt="EffNet"></p><h1 id="EffNet&#x7279;&#x70B9;"><a href="#EffNet&#x7279;&#x70B9;" class="headerlink" title="EffNet&#x7279;&#x70B9;"></a><font size="5" color="red">EffNet&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">&#x501F;&#x9274;&#x4E86;<strong>Depthwise Convolution(&#x6DF1;&#x5EA6;&#x5377;&#x79EF;)</strong>&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x5E76;&#x4E14;&#x5C06;Inception&#x4E2D;<strong>spatial separable convolutions(&#x7A7A;&#x95F4;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)&#x7684;&#x601D;&#x60F3;&#x63A8;&#x5E7F;&#x5230;&#x6C60;&#x5316;&#x5206;&#x89E3;</strong>&#x3002;&#x91C7;&#x7528;<strong>&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;</strong>&#x4EE3;&#x66FF;<strong>&#x4F20;&#x7EDF;&#x7684;&#x5377;&#x79EF;</strong>&#xFF0C;&#x5E76;&#x4E14;<strong>&#x5377;&#x79EF;&#x6838;&#x91C7;&#x7528;1x3&#x548C;3x1&#x4EE3;&#x66FF;3x3</strong>&#xFF0C;&#x4E24;&#x6B21;&#x5377;&#x79EF;&#x6838;&#x4E4B;&#x95F4;<strong>&#x63D2;&#x5165;&#x4E00;&#x7EF4;&#x6C60;&#x5316;&#x6838;</strong>&#xFF0C;&#x53EF;&#x4EE5;&#x8FDB;&#x4E00;&#x6B65;&#x51CF;&#x5C11;&#x53C2;&#x6570;&#x91CF;&#x3002;</font></p><h1 id="Depthwise-Convolution"><a href="#Depthwise-Convolution" class="headerlink" title="Depthwise Convolution"></a><font size="5" color="red">Depthwise Convolution</font></h1><p><img src="/images/deep_learning/depthwise.png" alt="depthwise"><br>&#x2003;&#x2003;<font size="3"><strong>Depthwise Convolution(&#x6DF1;&#x5EA6;&#x5377;&#x79EF;)&#xFF1A;&#x5728;</strong>&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x4E0A;&#x5355;&#x72EC;&#x8FDB;&#x884C;&#x5377;&#x79EF;<strong></strong></font><br>&#x2003;&#x2003;<font size="3">&#x53C2;&#x6570;depth_multiplier&#x9ED8;&#x8BA4;&#x4E3A;1<strong>&#xFF0C;&#x4EE3;&#x8868;&#x6BCF;&#x4E2A;&#x901A;&#x9053;&#x6570;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x5355;&#x72EC;&#x5377;&#x79EF;&#xFF0C;</strong>&#x8F93;&#x51FA;&#x7684;&#x901A;&#x9053;&#x6570;&#x548C;&#x8F93;&#x5165;&#x901A;&#x9053;&#x6570;&#x76F8;&#x7B49;<strong>&#xFF0C;&#x8BBE;&#x7F6E;</strong>depth_multiplier=n<strong>&#xFF0C;&#x5219;&#x4EE3;&#x8868;&#x6BCF;&#x4E2A;&#x901A;&#x9053;&#x6570;&#x8FDB;&#x884C;n&#x6B21;&#x5355;&#x72EC;&#x5377;&#x79EF;&#xFF0C;</strong>&#x8F93;&#x51FA;&#x901A;&#x9053;&#x6570;&#x662F;&#x8F93;&#x5165;&#x901A;&#x9053;&#x6570;&#x7684;n&#x500D;<strong>&#x3002;</strong></font><br>&#x2003;&#x2003;<font size="3">&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;**&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;8x8x1024&#x7684;&#x7279;&#x5F81;&#x56FE;&#xFF0C;&#x7ECF;&#x8FC7;5x5&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;8x8x1024&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;1024x(1024x5x5+1)=26215424&#xFF0C;&#x800C;&#x6DF1;&#x5EA6;&#x5377;&#x79EF;&#x53C2;&#x6570;&#x91CF;&#x4E3A;1024x(1x5x5+1)=26624&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;1024&#x500D;&#x3002;</font></p><h1 id="Spatial-Separable-Convolution"><a href="#Spatial-Separable-Convolution" class="headerlink" title="Spatial Separable Convolution"></a><font size="5" color="red">Spatial Separable Convolution</font></h1><p><img src="/images/deep_learning/spatial.png" alt="spatial"><br>&#x2003;&#x2003;<font size="3"><strong>Spatial Separable Convolution(&#x7A7A;&#x95F4;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)</strong>&#xFF1A;&#x5C06;3x3&#x7684;&#x5377;&#x79EF;&#x5206;&#x89E3;&#x4E3A;3x1&#x7684;&#x5377;&#x79EF;&#x6838;1x3&#x7684;&#x5377;&#x79EF;&#xFF0C;&#x5C06;7x7&#x7684;&#x5377;&#x79EF;&#x5206;&#x89E3;&#x4E3A;7x1&#x7684;&#x5377;&#x79EF;&#x6838;1x7&#x7684;&#x5377;&#x79EF;.&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;<strong>&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;</strong>&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;64x64x256&#x7684;&#x7279;&#x5F81;&#x56FE;&#xFF0C;&#x7ECF;&#x8FC7;7x7&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(256x7x7+1)=3211520&#xFF0C;&#x800C;&#x7A7A;&#x95F4;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x53C2;&#x6570;&#x91CF;&#x4E3A;2x256x(256x7x1+1)=918016&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;3.5&#x500D;&#x3002;</font></p><h1 id="EffNet&#x56FE;&#x50CF;&#x5206;&#x6790;"><a href="#EffNet&#x56FE;&#x50CF;&#x5206;&#x6790;" class="headerlink" title="EffNet&#x56FE;&#x50CF;&#x5206;&#x6790;"></a><font size="5" color="red">EffNet&#x56FE;&#x50CF;&#x5206;&#x6790;</font></h1><p><img src="/images/Feature_extraction/EffNet_A.png" alt="EffNet"></p><h1 id="TensorFlow2-0&#x5B9E;&#x73B0;"><a href="#TensorFlow2-0&#x5B9E;&#x73B0;" class="headerlink" title="TensorFlow2.0&#x5B9E;&#x73B0;"></a><font size="4">TensorFlow2.0&#x5B9E;&#x73B0;</font></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Block(keras.Model):</span><br><span class="line">    def __init__(self, in_channel, out_channel):</span><br><span class="line">        super(Block, self).__init__()</span><br><span class="line">        self.block = keras.Sequential()</span><br><span class="line">        self.block.add(Conv_block(in_channel))</span><br><span class="line">        self.block.add(Conv_block(kernel_size=(1, 3)))</span><br><span class="line">        self.block.add(keras.layers.MaxPool2D((1, 2), (1, 2)))</span><br><span class="line">        self.block.add(Conv_block(kernel_size=(3, 1)))</span><br><span class="line">        self.block.add(Conv_block(out_channel, strides=(2, 1)))</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.block(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Conv_block(keras.Model):</span><br><span class="line">    def __init__(self, filters=None, kernel_size=(1, 1), strides=(1, 1), padding=&apos;same&apos;, name=&apos;Conv_Block&apos;):</span><br><span class="line">        super(Conv_block, self).__init__()</span><br><span class="line">        self.block = keras.Sequential(name=name)</span><br><span class="line">        if filters:</span><br><span class="line">            self.block.add(keras.layers.Conv2D(filters=filters, kernel_size=kernel_size, strides=strides, padding=padding))</span><br><span class="line">        else:</span><br><span class="line">            self.block.add(keras.layers.DepthwiseConv2D(kernel_size=kernel_size, strides=strides, padding=padding))</span><br><span class="line">        self.block.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.block.add(keras.layers.LeakyReLU())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.block(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class EffNet(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(EffNet, self).__init__()</span><br><span class="line">        self.block1 = keras.Sequential(name=&apos;Block1&apos;)</span><br><span class="line">        self.block1.add(Block(32, 64))</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential(name=&apos;Block2&apos;)</span><br><span class="line">        self.block2.add(Block(64, 128))</span><br><span class="line"></span><br><span class="line">        self.block3 = keras.Sequential(name=&apos;Block3&apos;)</span><br><span class="line">        self.block3.add(Block(128, 256))</span><br><span class="line"></span><br><span class="line">        self.flatten = keras.layers.Flatten(name=&apos;Flatten&apos;)</span><br><span class="line">        self.dense = keras.layers.Dense(10, activation=&apos;softmax&apos;, name=&apos;Dense&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block1 = self.block1(inputs)</span><br><span class="line">        block2 = self.block2(block1)</span><br><span class="line">        block3 = self.block3(block2)</span><br><span class="line">        flatten = self.flatten(block3)</span><br><span class="line">        output = self.dense(flatten)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    model = EffNet()</span><br><span class="line">    model.build(input_shape=(None, 32, 32, 3))</span><br><span class="line">    model.summary()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/Feature_extraction/EffNet_R.png" alt="EffNet"></p><h1 id="EffNet&#x5C0F;&#x7ED3;"><a href="#EffNet&#x5C0F;&#x7ED3;" class="headerlink" title="EffNet&#x5C0F;&#x7ED3;"></a><font size="5" color="red">EffNet&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;EffNet&#x7ED9;&#x6211;&#x4EEC;<strong>&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x79CD;&#x4E00;&#x7EF4;&#x6C60;&#x5316;&#x7684;&#x601D;&#x8DEF;</strong>&#xFF0C;&#x867D;&#x7136;&#x8BBA;&#x6587;&#x4E2D;&#x4EE5;Cifar10&#x4F5C;&#x4E3A;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x65E0;&#x6CD5;&#x548C;&#x5176;&#x4ED6;&#x6A21;&#x578B;&#x8FDB;&#x884C;&#x76F4;&#x63A5;&#x7684;&#x5BF9;&#x6BD4;&#xFF0C;&#x4F46;&#x662F;&#x6A21;&#x578B;&#x7684;&#x4F7F;&#x7528;&#x6548;&#x679C;&#x5374;&#x4F18;&#x4E8E;MobileNet&#x548C;ShuffleNet&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;EffNet&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="特征提取网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>MobileNet-V3</title>
    <link href="https://USTCcoder.github.io/2020/03/26/feature_extraction%20MobileNet_V3/"/>
    <id>https://USTCcoder.github.io/2020/03/26/feature_extraction MobileNet_V3/</id>
    <published>2020-03-26T07:07:42.000Z</published>
    <updated>2020-05-09T09:10:40.929Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">MobileNet-V3</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>MobileNet-V3:</strong>&#x662F;Google&#x7EE7;MobileNet-V2&#x4E4B;&#x540E;&#x7684;&#x53C8;&#x4E00;&#x529B;&#x4F5C;&#xFF0C;&#x4E8E;<strong>2019&#x5E74;&#x63D0;&#x51FA;</strong>&#xFF0C;&#x6548;&#x679C;&#x8F83;MobileNet-V2&#x6709;&#x6240;&#x63D0;&#x5347;&#x3002;MobileNet-V3&#x63D0;&#x4F9B;&#x4E86;<strong>&#x4E24;&#x4E2A;&#x7248;&#x672C;</strong>&#xFF0C;&#x5206;&#x522B;&#x4E3A;<strong>MobileNet-V3-Large</strong>&#x4EE5;&#x53CA;<strong>MobileNet-V3-Small</strong>&#xFF0C;&#x5206;&#x522B;&#x9002;&#x7528;&#x4E8E;&#x5BF9;&#x8D44;&#x6E90;&#x4E0D;&#x540C;&#x8981;&#x6C42;&#x7684;&#x60C5;&#x51B5;&#x3002;<br><a id="more"></a></p><p><img src="/images/Feature_extraction/MobileNet_V3.png" alt="MobileNet_V3"></p><h1 id="MobileNet-V3&#x7279;&#x70B9;"><a href="#MobileNet-V3&#x7279;&#x70B9;" class="headerlink" title="MobileNet-V3&#x7279;&#x70B9;"></a><font size="5" color="red">MobileNet-V3&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3"><strong>&#x4FDD;&#x7559;MobileNet-V2&#x7684;SeparableConv&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x7ED3;&#x6784;&#x548C;&#x6B8B;&#x5DEE;&#x7ED3;&#x6784;</strong></font><br>&#x2003;&#x2003;<font size="3"><strong>&#x5F15;&#x5165;SE&#x7ED3;&#x6784;&#xFF0C;&#x5177;&#x6709;&#x8F7B;&#x91CF;&#x7EA7;&#x7684;&#x6CE8;&#x610F;&#x529B;&#x6A21;&#x578B;</strong></font><br>&#x2003;&#x2003;<font size="3"><strong>&#x5BF9;MobileNet-V2&#x7684;&#x5934;&#x90E8;&#x7ED3;&#x6784;&#x8FDB;&#x884C;&#x4F18;&#x5316;</strong>&#xFF0C;MobileNet-V2&#x4E2D;&#x7B2C;&#x4E8C;&#x5C42;&#x5F97;&#x5230;&#x7684;&#x7279;&#x5F81;&#x56FE;&#x5927;&#x5C0F;&#x4E3A;112x112x32&#xFF0C;&#x800C;&#x5728;MobileNet-V3&#x4E2D;&#xFF0C;&#x53EA;&#x9700;&#x8981;112x112x16&#x5373;&#x53EF;&#x4FDD;&#x8BC1;&#x7CBE;&#x5EA6;&#xFF0C;&#x5E76;&#x4E14;&#x63D0;&#x5347;&#x8FD0;&#x884C;&#x901F;&#x5EA6;&#x3002;</font><br>&#x2003;&#x2003;<font size="3"><strong>&#x5BF9;MobileNet-V2&#x7684;&#x5C3E;&#x90E8;&#x7ED3;&#x6784;&#x8FDB;&#x884C;&#x4F18;&#x5316;</strong>&#xFF0C;MobileNet-V2&#x4E2D;&#x5BF9;7x7&#x7684;&#x7279;&#x5F81;&#x56FE;&#x8FDB;&#x884C;1x1&#x7684;&#x5377;&#x79EF;&#x63D0;&#x5347;&#x901A;&#x9053;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8FDB;&#x884C;&#x5168;&#x5C40;&#x5E73;&#x5747;&#x6C60;&#x5316;&#xFF0C;&#x800C;&#x5728;MobileNet-V3&#x4E2D;&#xFF0C;&#x5148;&#x5BF9;7x7&#x7684;&#x7279;&#x5F81;&#x56FE;&#x8FDB;&#x884C;&#x5168;&#x5C40;&#x5E73;&#x5747;&#x6C60;&#x5316;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8FDB;&#x884C;1x1&#x7684;&#x5377;&#x79EF;&#x63D0;&#x5347;&#x901A;&#x9053;&#x6570;&#xFF0C;&#x8282;&#x7EA6;&#x4E86;49&#x500D;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x4F7F;&#x7528;<strong>h-swish</strong>&#x548C;<strong>ReLU6</strong>&#x5E76;&#x5B58;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x52A0;&#x5FEB;&#x4E86;&#x8FD0;&#x884C;&#x7684;&#x901F;&#x5EA6;</font></p><h1 id="Separable-Convolution"><a href="#Separable-Convolution" class="headerlink" title="Separable Convolution"></a><font size="5" color="red">Separable Convolution</font></h1><p><img src="/images/Feature_extraction/Xception_D.png" alt="Xception"><br>&#x2003;&#x2003;<font size="3"><strong>Separable Convolution(&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)</strong>&#xFF1A;&#x662F;&#x4E0A;&#x9762;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x5408;&#x4E8C;&#x4E3A;&#x4E00;&#x7684;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x3002;</font><br>&#x2003;&#x2003;<font size="3"><strong>&#x7B2C;&#x4E00;&#x6B65;&#xFF1A;DepthwiseConv&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x8FDB;&#x884C;&#x5377;&#x79EF;</strong></font><br>&#x2003;&#x2003;<font size="3"><strong>&#x7B2C;&#x4E8C;&#x6B65;&#xFF1A;PointwiseConv&#xFF0C;&#x5BF9;&#x7B2C;&#x4E00;&#x6B65;&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#x8FDB;&#x884C;1x1&#x5377;&#x79EF;&#xFF0C;&#x5B9E;&#x73B0;&#x901A;&#x9053;&#x878D;&#x5408;</strong></font><br>&#x2003;&#x2003;<font size="3">&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;<strong>&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;</strong>&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;<strong>&#x8C03;&#x6574;&#x4E3A;&#x4EFB;&#x610F;&#x5408;&#x9002;&#x7684;&#x901A;&#x9053;&#x6570;</strong>&#x3002;&#x7B2C;&#x4E00;&#x6B65;&#x7684;<strong>&#x76EE;&#x7684;&#x662F;&#x51CF;&#x5C11;&#x53C2;&#x6570;&#x91CF;</strong>&#xFF0C;&#x7B2C;&#x4E8C;&#x6B65;&#x662F;<strong>&#x8C03;&#x6574;&#x901A;&#x9053;&#x6570;</strong>&#xFF0C;&#x56E0;&#x6B64;&#x5C06;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x7ED3;&#x5408;&#xFF0C;&#x7EC4;&#x6210;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x3002;</font></p><h1 id="Squeeze-and-Excitation"><a href="#Squeeze-and-Excitation" class="headerlink" title="Squeeze-and-Excitation"></a><font size="5" color="red">Squeeze-and-Excitation</font></h1><p><img src="/images/Feature_extraction/SENet_S.png" alt="SENet"><br>&#x2003;&#x2003;<font size="3"><strong>Squeeze-and-Excitation</strong>&#xFF1A;&#x53C8;&#x79F0;&#x4E3A;<strong>&#x7279;&#x5F81;&#x91CD;&#x6807;&#x5B9A;&#x5377;&#x79EF;</strong>&#xFF0C;&#x6216;&#x8005;<strong>&#x6CE8;&#x610F;&#x529B;&#x673A;&#x5236;</strong>&#x3002;&#x5177;&#x4F53;&#x6765;&#x8BF4;&#xFF0C;&#x5C31;&#x662F;&#x901A;&#x8FC7;<strong>&#x5B66;&#x4E60;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x81EA;&#x52A8;&#x83B7;&#x53D6;&#x5230;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x7684;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;</strong>&#xFF0C;&#x7136;&#x540E;&#x4F9D;&#x7167;&#x8FD9;&#x4E2A;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;&#x53BB;<strong>&#x63D0;&#x5347;&#x6709;&#x7528;&#x7684;&#x7279;&#x5F81;&#x5E76;&#x6291;&#x5236;&#x5BF9;&#x5F53;&#x524D;&#x4EFB;&#x52A1;&#x7528;&#x5904;&#x4E0D;&#x5927;&#x7684;&#x7279;&#x5F81;</strong>&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x9996;&#x5148;&#x662F; <strong>Squeeze&#x64CD;&#x4F5C;</strong>&#xFF0C;&#x5148;<strong>&#x8FDB;&#x884C;&#x5168;&#x5C40;&#x6C60;&#x5316;&#xFF0C;&#x5177;&#x6709;&#x5168;&#x5C40;&#x7684;&#x611F;&#x53D7;&#x91CE;</strong>&#xFF0C;&#x5E76;&#x4E14;&#x8F93;&#x51FA;&#x7684;&#x7EF4;&#x5EA6;&#x548C;&#x8F93;&#x5165;&#x7684;&#x7279;&#x5F81;&#x901A;&#x9053;&#x6570;&#x76F8;&#x5339;&#x914D;&#xFF0C;&#x5B83;&#x8868;&#x5F81;&#x7740;&#x5728;&#x7279;&#x5F81;&#x901A;&#x9053;&#x4E0A;&#x54CD;&#x5E94;&#x7684;&#x5168;&#x5C40;&#x5206;&#x5E03;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x7136;&#x540E;&#x662F;<strong>Excitation&#x64CD;&#x4F5C;</strong>&#xFF0C;<strong>&#x901A;&#x8FC7;&#x5168;&#x8FDE;&#x63A5;&#x5C42;&#x4E3A;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x751F;&#x6210;&#x6743;&#x91CD;&#xFF0C;&#x5EFA;&#x7ACB;&#x901A;&#x9053;&#x95F4;&#x7684;&#x76F8;&#x5173;&#x6027;</strong>&#xFF0C;<strong>&#x8F93;&#x51FA;&#x7684;&#x6743;&#x91CD;&#x770B;&#x505A;&#x662F;&#x8FDB;&#x8FC7;&#x7279;&#x5F81;&#x9009;&#x62E9;&#x540E;&#x7684;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x7684;&#x91CD;&#x8981;&#x6027;</strong>&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;<strong>&#x4E58;&#x6CD5;&#x9010;&#x901A;&#x9053;&#x52A0;&#x6743;&#x5230;&#x5148;&#x524D;&#x7684;&#x7279;&#x5F81;&#x4E0A;</strong>&#xFF0C;&#x5B8C;&#x6210;&#x5728;&#x901A;&#x9053;&#x7EF4;&#x5EA6;&#x4E0A;&#x7684;&#x5BF9;&#x539F;&#x59CB;&#x7279;&#x5F81;&#x7684;&#x91CD;&#x6807;&#x5B9A;&#x3002;</font></p><h1 id="&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;MobileNet-V3&#x7F51;&#x7EDC;&#x7ED3;&#x6784;"><a href="#&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;MobileNet-V3&#x7F51;&#x7EDC;&#x7ED3;&#x6784;" class="headerlink" title="&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;MobileNet-V3&#x7F51;&#x7EDC;&#x7ED3;&#x6784;"></a><font size="5" color="red">&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;MobileNet-V3&#x7F51;&#x7EDC;&#x7ED3;&#x6784;</font></h1><p><img src="/images/Feature_extraction/MobileNet_V3_C.png" alt="MobileNet_V3"></p><h1 id="MobileNet-V3&#x56FE;&#x50CF;&#x5206;&#x6790;"><a href="#MobileNet-V3&#x56FE;&#x50CF;&#x5206;&#x6790;" class="headerlink" title="MobileNet-V3&#x56FE;&#x50CF;&#x5206;&#x6790;"></a><font size="5" color="red">MobileNet-V3&#x56FE;&#x50CF;&#x5206;&#x6790;</font></h1><p><img src="/images/Feature_extraction/MobileNet_V3_A.png" alt="MobileNet_V3"></p><h1 id="TensorFlow2-0&#x5B9E;&#x73B0;"><a href="#TensorFlow2-0&#x5B9E;&#x73B0;" class="headerlink" title="TensorFlow2.0&#x5B9E;&#x73B0;"></a><font size="4">TensorFlow2.0&#x5B9E;&#x73B0;</font></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class H_Swish(keras.layers.Layer):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(H_Swish, self).__init__()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, **kwargs):</span><br><span class="line"></span><br><span class="line">        return inputs * tf.nn.relu6(inputs + 3) / 6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Bneck(keras.Model):</span><br><span class="line">    def __init__(self, filters, up_dim, kernel_size=(1, 1), strides=(1, 1), squeeze=False, activation=None):</span><br><span class="line">        super(Bneck, self).__init__()</span><br><span class="line">        self.squeeze = squeeze</span><br><span class="line"></span><br><span class="line">        self.block1 = keras.Sequential()</span><br><span class="line">        self.block1.add(Conv_block(up_dim, activation=activation))</span><br><span class="line">        self.block1.add(Conv_block(kernel_size=kernel_size, strides=strides, activation=activation))</span><br><span class="line"></span><br><span class="line">        if squeeze:</span><br><span class="line">            self.squeeze = keras.Sequential()</span><br><span class="line">            self.squeeze.add(keras.layers.GlobalAveragePooling2D())</span><br><span class="line">            self.squeeze.add(keras.layers.Dense(up_dim // 4))</span><br><span class="line">            self.squeeze.add(keras.layers.ReLU(6))</span><br><span class="line">            self.squeeze.add(keras.layers.Dense(up_dim))</span><br><span class="line">            self.squeeze.add(H_Swish())</span><br><span class="line">            self.squeeze.add(keras.layers.Reshape((1, 1, up_dim)))</span><br><span class="line">            self.multiply = keras.layers.Multiply()</span><br><span class="line"></span><br><span class="line">        self.conv = Conv_block(filters)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block1 = self.block1(inputs)</span><br><span class="line">        if self.squeeze:</span><br><span class="line">            squeeze = self.squeeze(block1)</span><br><span class="line">            block1 = self.multiply([block1, squeeze])</span><br><span class="line">        output = self.conv(block1)</span><br><span class="line">        if output.shape[1:] == inputs.shape[1:]:</span><br><span class="line">            output = output + inputs</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Conv_block(keras.Model):</span><br><span class="line">    def __init__(self, filters=None, kernel_size=(1, 1), strides=(1, 1), activation=None):</span><br><span class="line">        super(Conv_block, self).__init__()</span><br><span class="line">        self.block = keras.Sequential()</span><br><span class="line">        if filters:</span><br><span class="line">            self.block.add(keras.layers.Conv2D(filters=filters, kernel_size=kernel_size, strides=strides, padding=&apos;same&apos;))</span><br><span class="line">        else:</span><br><span class="line">            self.block.add(keras.layers.DepthwiseConv2D(kernel_size=kernel_size, strides=strides, padding=&apos;same&apos;))</span><br><span class="line">        self.block.add(keras.layers.BatchNormalization())</span><br><span class="line">        if activation == &apos;relu6&apos;:</span><br><span class="line">            self.block.add(keras.layers.ReLU(6))</span><br><span class="line">        elif activation == &apos;h_swish&apos;:</span><br><span class="line">            self.block.add(H_Swish())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.block(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MobileNet_v3(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(MobileNet_v3, self).__init__()</span><br><span class="line">        self.conv1 = keras.Sequential(name=&apos;Conv_Block1&apos;)</span><br><span class="line">        self.conv1.add(Conv_block(16, (3, 3), (2, 2), activation=&apos;h_swish&apos;))</span><br><span class="line">        self.bneck1 = keras.Sequential(name=&apos;Bneck1&apos;)</span><br><span class="line">        self.bneck1.add(Bneck(16, 16, (3, 3), activation=&apos;relu6&apos;))</span><br><span class="line">        self.bneck2 = keras.Sequential(name=&apos;Bneck2&apos;)</span><br><span class="line">        self.bneck2.add(Bneck(24, 64, (3, 3), strides=(2, 2), activation=&apos;relu6&apos;))</span><br><span class="line">        self.bneck2.add(Bneck(24, 72, (3, 3), activation=&apos;relu6&apos;))</span><br><span class="line">        self.bneck3 = keras.Sequential(name=&apos;Bneck3&apos;)</span><br><span class="line">        self.bneck3.add(Bneck(40, 72, (5, 5), strides=(2, 2), squeeze=True, activation=&apos;relu6&apos;))</span><br><span class="line">        self.bneck3.add(Bneck(40, 120, (5, 5), squeeze=True, activation=&apos;relu6&apos;))</span><br><span class="line">        self.bneck3.add(Bneck(40, 120, (5, 5), squeeze=True, activation=&apos;relu6&apos;))</span><br><span class="line">        self.bneck4 = keras.Sequential(name=&apos;Bneck4&apos;)</span><br><span class="line">        self.bneck4.add(Bneck(80, 240, (3, 3), strides=(2, 2), activation=&apos;h_swish&apos;))</span><br><span class="line">        self.bneck4.add(Bneck(80, 200, (3, 3), activation=&apos;h_swish&apos;))</span><br><span class="line">        self.bneck4.add(Bneck(80, 184, (3, 3), activation=&apos;h_swish&apos;))</span><br><span class="line">        self.bneck4.add(Bneck(80, 184, (3, 3), activation=&apos;h_swish&apos;))</span><br><span class="line">        self.bneck5 = keras.Sequential(name=&apos;Bneck5&apos;)</span><br><span class="line">        self.bneck5.add(Bneck(112, 480, (3, 3), squeeze=True, activation=&apos;h_swish&apos;))</span><br><span class="line">        self.bneck5.add(Bneck(112, 672, (3, 3), squeeze=True, activation=&apos;h_swish&apos;))</span><br><span class="line">        self.bneck6 = keras.Sequential(name=&apos;Bneck&apos;)</span><br><span class="line">        self.bneck6.add(Bneck(160, 672, (5, 5), strides=(2, 2), squeeze=True, activation=&apos;h_swish&apos;))</span><br><span class="line">        self.bneck6.add(Bneck(160, 960, (5, 5), squeeze=True, activation=&apos;h_swish&apos;))</span><br><span class="line">        self.bneck6.add(Bneck(160, 960, (5, 5), squeeze=True, activation=&apos;h_swish&apos;))</span><br><span class="line">        self.conv2 = keras.Sequential(name=&apos;Conv_Block2&apos;)</span><br><span class="line">        self.conv2.add(Conv_block(960, activation=&apos;h_swish&apos;))</span><br><span class="line">        self.global_average_pooling = keras.layers.GlobalAveragePooling2D(name=&apos;GlobalAveragePooling&apos;)</span><br><span class="line">        self.reshape1 = keras.layers.Reshape((1, 1, 960), name=&apos;Reshape1&apos;)</span><br><span class="line">        self.conv3 = keras.Sequential(name=&apos;Conv_Block3&apos;)</span><br><span class="line">        self.conv3.add(Conv_block(1280, activation=&apos;h_swish&apos;))</span><br><span class="line">        self.conv3.add(keras.layers.Conv2D(1000, (1, 1)))</span><br><span class="line">        self.softmax = keras.layers.Softmax(name=&apos;Softmax&apos;)</span><br><span class="line">        self.reshape2 = keras.layers.Reshape((1000,), name=&apos;Reshape2&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        conv1 = self.conv1(inputs)</span><br><span class="line">        bneck1 = self.bneck1(conv1)</span><br><span class="line">        bneck2 = self.bneck2(bneck1)</span><br><span class="line">        bneck3 = self.bneck3(bneck2)</span><br><span class="line">        bneck4 = self.bneck4(bneck3)</span><br><span class="line">        bneck5 = self.bneck5(bneck4)</span><br><span class="line">        bneck6 = self.bneck6(bneck5)</span><br><span class="line">        conv2 = self.conv2(bneck6)</span><br><span class="line">        global_average_pooling = self.global_average_pooling(conv2)</span><br><span class="line">        reshape = self.reshape1(global_average_pooling)</span><br><span class="line">        conv3 = self.conv3(reshape)</span><br><span class="line">        softmax = self.softmax(conv3)</span><br><span class="line">        output = self.reshape2(softmax)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    model = MobileNet_V3()</span><br><span class="line">    model.build(input_shape=(None, 224, 224, 3))</span><br><span class="line">    model.summary()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/Feature_extraction/MobileNet_V3_R.png" alt="MobileNet_V3"></p><h1 id="MobileNet-V3&#x5C0F;&#x7ED3;"><a href="#MobileNet-V3&#x5C0F;&#x7ED3;" class="headerlink" title="MobileNet-V3&#x5C0F;&#x7ED3;"></a><font size="5" color="red">MobileNet-V3&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;MobileNet-V3&#x662F;&#x4E00;&#x79CD;&#x590D;&#x6742;&#x7684;&#x8F7B;&#x91CF;&#x7EA7;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;MobileNet-V3&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;5M&#xFF0C;&#x5176;&#x5728;MobileNet-V2&#x7684;&#x57FA;&#x7840;&#x4E0A;&#x52A0;&#x5165;&#x4E86;&#x5927;&#x91CF;&#x9ED1;&#x79D1;&#x6280;&#xFF0C;&#x56E0;&#x6B64;&#x83B7;&#x5F97;&#x4E86;&#x66F4;&#x597D;&#x7684;&#x6548;&#x679C;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;MobileNet-V3&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="特征提取网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>MobileNet-V2</title>
    <link href="https://USTCcoder.github.io/2020/03/22/feature_extraction%20MobileNet_V2/"/>
    <id>https://USTCcoder.github.io/2020/03/22/feature_extraction MobileNet_V2/</id>
    <published>2020-03-22T12:04:27.000Z</published>
    <updated>2020-05-09T09:08:55.629Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">MobileNet-V2</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>MobileNet-V2:</strong>&#x662F;MobileNet&#x7684;&#x5347;&#x7EA7;&#x7248;&#x672C;&#xFF0C;<strong>Google&#x516C;&#x53F8;&#x4E8E;2018&#x5E74;</strong>&#x63D0;&#x51FA;&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x7ED3;&#x6784;&#x7B80;&#x5355;&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x8F83;&#x5C11;&#x7684;&#x8F7B;&#x91CF;&#x7EA7;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#x6A21;&#x578B;&#x3002;<br><a id="more"></a></p><p><img src="/images/Feature_extraction/MobileNet_V2.png" alt="MobileNet_V2"></p><h1 id="MobileNet-V2&#x7279;&#x70B9;"><a href="#MobileNet-V2&#x7279;&#x70B9;" class="headerlink" title="MobileNet-V2&#x7279;&#x70B9;"></a><font size="5" color="red">MobileNet-V2&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3"><strong>&#x4FDD;&#x7559;MobileNet&#x7684;SeparableConv&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x7ED3;&#x6784;&#xFF0C;&#x5E76;&#x4E14;&#x5728;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x524D;&#x901A;&#x8FC7;1x1&#x5377;&#x79EF;&#x63D0;&#x5347;&#x901A;&#x9053;&#x6570;&#x3002;</strong></font><br>&#x2003;&#x2003;<font size="3">&#x5F15;&#x5165;&#x4E86;<strong>&#x53CD;&#x6B8B;&#x5DEE;&#x7ED3;&#x6784;</strong>&#xFF0C;&#x501F;&#x9274;&#x4E86;ResNet&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x8054;&#x7CFB;&#x4E86;&#x4E0D;&#x540C;&#x5C3A;&#x5EA6;&#x7684;&#x7279;&#x5F81;</font><br>&#x2003;&#x2003;<font size="3">&#x5F15;&#x5165;&#x4E86;<strong>&#x7EBF;&#x6027;&#x74F6;&#x9888;&#x7ED3;&#x6784;</strong>&#xFF0C;&#x5728;&#x6B8B;&#x5DEE;&#x76F8;&#x52A0;&#x524D;&#x4E0D;&#x4F7F;&#x7528;ReLU6&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#xFF0C;&#x907F;&#x514D;&#x7834;&#x574F;&#x7279;&#x5F81;</font></p><h1 id="Separable-Convolution"><a href="#Separable-Convolution" class="headerlink" title="Separable Convolution"></a><font size="5" color="red">Separable Convolution</font></h1><p><img src="/images/Feature_extraction/Xception_D.png" alt="Xception"><br>&#x2003;&#x2003;<font size="3"><strong>Separable Convolution(&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)</strong>&#xFF1A;&#x662F;&#x4E0A;&#x9762;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x5408;&#x4E8C;&#x4E3A;&#x4E00;&#x7684;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x3002;</font><br>&#x2003;&#x2003;<font size="3"><strong>&#x7B2C;&#x4E00;&#x6B65;&#xFF1A;DepthwiseConv&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x8FDB;&#x884C;&#x5377;&#x79EF;</strong></font><br>&#x2003;&#x2003;<font size="3"><strong>&#x7B2C;&#x4E8C;&#x6B65;&#xFF1A;PointwiseConv&#xFF0C;&#x5BF9;&#x7B2C;&#x4E00;&#x6B65;&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#x8FDB;&#x884C;1x1&#x5377;&#x79EF;&#xFF0C;&#x5B9E;&#x73B0;&#x901A;&#x9053;&#x878D;&#x5408;</strong></font><br>&#x2003;&#x2003;<font size="3">&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;<strong>&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;</strong>&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;<strong>&#x8C03;&#x6574;&#x4E3A;&#x4EFB;&#x610F;&#x5408;&#x9002;&#x7684;&#x901A;&#x9053;&#x6570;</strong>&#x3002;&#x7B2C;&#x4E00;&#x6B65;&#x7684;<strong>&#x76EE;&#x7684;&#x662F;&#x51CF;&#x5C11;&#x53C2;&#x6570;&#x91CF;</strong>&#xFF0C;&#x7B2C;&#x4E8C;&#x6B65;&#x662F;<strong>&#x8C03;&#x6574;&#x901A;&#x9053;&#x6570;</strong>&#xFF0C;&#x56E0;&#x6B64;&#x5C06;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x7ED3;&#x5408;&#xFF0C;&#x7EC4;&#x6210;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x3002;</font></p><h1 id="MobileNet-V2&#x56FE;&#x50CF;&#x5206;&#x6790;"><a href="#MobileNet-V2&#x56FE;&#x50CF;&#x5206;&#x6790;" class="headerlink" title="MobileNet-V2&#x56FE;&#x50CF;&#x5206;&#x6790;"></a><font size="5" color="red">MobileNet-V2&#x56FE;&#x50CF;&#x5206;&#x6790;</font></h1><p><img src="/images/Feature_extraction/MobileNet_V2_A.png" alt="MobileNet_V2"></p><h1 id="TensorFlow2-0&#x5B9E;&#x73B0;"><a href="#TensorFlow2-0&#x5B9E;&#x73B0;" class="headerlink" title="TensorFlow2.0&#x5B9E;&#x73B0;"></a><font size="4">TensorFlow2.0&#x5B9E;&#x73B0;</font></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Block(keras.Model):</span><br><span class="line">    def __init__(self, filters, t, s=(1, 1), name=&apos;Block&apos;):</span><br><span class="line">        super(Block, self).__init__()</span><br><span class="line">        self.blocks = keras.Sequential(name=name)</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(t * filters, (1, 1)))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU(6))</span><br><span class="line">        self.blocks.add(keras.layers.DepthwiseConv2D((3, 3), strides=s, padding=&apos;same&apos;))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU(6))</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters, (1, 1)))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        output = self.blocks(inputs)</span><br><span class="line">        if output.shape == inputs.shape:</span><br><span class="line">            output += inputs</span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add_block(filters, t, s, name, times):</span><br><span class="line">    block = keras.Sequential(name=name)</span><br><span class="line">    block.add(Block(filters, t, s))</span><br><span class="line">    for i in range(times - 1):</span><br><span class="line">        block.add(Block(filters, t))</span><br><span class="line">    return block</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MobileNet_v2(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(MobileNet_v2, self).__init__()</span><br><span class="line">        self.zeropadding = keras.layers.ZeroPadding2D((1, 1), name=&apos;Zero_Padding&apos;)</span><br><span class="line">        self.conv1 = keras.layers.Conv2D(32, (3, 3), strides=(2, 2), padding=&apos;same&apos;, name=&apos;Conv1&apos;)</span><br><span class="line">        self.bn1 = keras.layers.BatchNormalization(name=&apos;BatchNormalization2&apos;)</span><br><span class="line">        self.relu1 = keras.layers.ReLU(6, name=&apos;Relu6&apos;)</span><br><span class="line"></span><br><span class="line">        self.blocks1 = add_block(16, 1, (1, 1), &apos;Block1&apos;, 1)</span><br><span class="line"></span><br><span class="line">        self.blocks2 = add_block(24, 6, (2, 2), &apos;Block2&apos;, 2)</span><br><span class="line"></span><br><span class="line">        self.blocks3 = add_block(32, 6, (2, 2), &apos;Block3&apos;, 3)</span><br><span class="line"></span><br><span class="line">        self.blocks4 = add_block(64, 6, (1, 1), &apos;Block4&apos;, 4)</span><br><span class="line"></span><br><span class="line">        self.blocks5 = add_block(96, 6, (2, 2), &apos;Block5&apos;, 3)</span><br><span class="line"></span><br><span class="line">        self.blocks6 = add_block(160, 6, (2, 2), &apos;Block6&apos;, 3)</span><br><span class="line"></span><br><span class="line">        self.blocks7 = add_block(320, 6, (1, 1), &apos;Block7&apos;, 1)</span><br><span class="line"></span><br><span class="line">        self.conv2 = keras.layers.Conv2D(1280, (1, 1), name=&apos;Conv2&apos;)</span><br><span class="line">        self.bn2 = keras.layers.BatchNormalization(name=&apos;BatchNormalization2&apos;)</span><br><span class="line">        self.relu2 = keras.layers.ReLU(6, name=&apos;Relu6&apos;)</span><br><span class="line">        self.global_average_pool = keras.layers.GlobalAveragePooling2D(name=&apos;Global_average_pooling&apos;)</span><br><span class="line">        self.dense = keras.layers.Dense(1000, activation=&apos;softmax&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        zeropadding = self.zeropadding(inputs)</span><br><span class="line">        conv1 = self.conv1(zeropadding)</span><br><span class="line">        bn1 = self.bn1(conv1)</span><br><span class="line">        relu1 = self.relu1(bn1)</span><br><span class="line">        blocks1 = self.blocks1(relu1)</span><br><span class="line">        blocks2 = self.blocks2(blocks1)</span><br><span class="line">        blocks3 = self.blocks3(blocks2)</span><br><span class="line">        blocks4 = self.blocks4(blocks3)</span><br><span class="line">        blocks5 = self.blocks5(blocks4)</span><br><span class="line">        blocks6 = self.blocks6(blocks5)</span><br><span class="line">        blocks7 = self.blocks7(blocks6)</span><br><span class="line">        conv2 = self.conv2(blocks7)</span><br><span class="line">        bn2 = self.bn2(conv2)</span><br><span class="line">        relu2 = self.relu2(bn2)</span><br><span class="line">        global_average_pool = self.global_average_pool(relu2)</span><br><span class="line">        output = self.dense(global_average_pool)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    model = MobileNet_V2()</span><br><span class="line">    model.build(input_shape=(None, 224, 224, 3))</span><br><span class="line">    model.summary()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/Feature_extraction/MobileNet_V2_R.png" alt="MobileNet_V2"></p><h1 id="MobileNet-V2&#x5C0F;&#x7ED3;"><a href="#MobileNet-V2&#x5C0F;&#x7ED3;" class="headerlink" title="MobileNet-V2&#x5C0F;&#x7ED3;"></a><font size="5" color="red">MobileNet-V2&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;MobileNet-V2&#x662F;&#x4E00;&#x79CD;&#x9AD8;&#x6548;&#x7684;&#x8F7B;&#x91CF;&#x7EA7;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;<strong>MobileNet-V2&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x548C;MobileNet&#x51E0;&#x4E4E;&#x76F8;&#x540C;</strong>&#xFF0C;&#x90FD;&#x662F;4M&#x7684;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x56E0;&#x4E3A;&#x5176;<strong>&#x7ED3;&#x5408;&#x4E86;&#x4E0D;&#x540C;&#x5C3A;&#x5EA6;&#x7684;&#x7279;&#x5F81;</strong>&#xFF0C;&#x56E0;&#x6B64;&#x6548;&#x679C;&#x4F18;&#x4E8E;MobileNet&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;MobileNet-V2&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="特征提取网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>MobileNet</title>
    <link href="https://USTCcoder.github.io/2020/03/20/feature_extraction%20MobileNet/"/>
    <id>https://USTCcoder.github.io/2020/03/20/feature_extraction MobileNet/</id>
    <published>2020-03-20T10:57:32.000Z</published>
    <updated>2020-05-09T09:06:31.281Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">MobileNet</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>MobileNet:</strong>&#x662F;<strong>2017&#x5E74;Google&#x9488;&#x5BF9;&#x624B;&#x673A;&#x7B49;&#x5D4C;&#x5165;&#x5F0F;&#x8BBE;&#x5907;&#x63D0;&#x51FA;&#x7684;&#x4E00;&#x79CD;&#x8F7B;&#x91CF;&#x7EA7;&#x7684;&#x6DF1;&#x5C42;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;</strong>&#xFF0C;&#x6545;&#x79F0;&#x4E4B;&#x4E3A;MobileNet&#xFF0C;&#x7531;&#x4E8E;&#x5176;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x7B80;&#x5355;&#xFF0C;&#x73B0;&#x5728;&#x4ECD;&#x7136;&#x5177;&#x6709;&#x5F88;&#x597D;&#x7684;&#x9002;&#x7528;&#x6027;&#x3002;<br><a id="more"></a></p><p><img src="/images/Feature_extraction/MobileNet.png" alt="MobileNet"></p><h1 id="MobileNet&#x7279;&#x70B9;"><a href="#MobileNet&#x7279;&#x70B9;" class="headerlink" title="MobileNet&#x7279;&#x70B9;"></a><font size="5" color="red">MobileNet&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3"><strong>&#x7ED3;&#x6784;&#x548C;VGG&#x7C7B;&#x4F3C;&#xFF0C;&#x53EA;&#x662F;&#x5C06;&#x6807;&#x51C6;&#x5377;&#x79EF;&#x6362;&#x6210;SeparableConv&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;</strong></font><br>&#x2003;&#x2003;<font size="3">&#x5F15;&#x5165;<strong>ReLU6</strong>&#x4EE3;&#x66FF;ReLU&#xFF0C;&#x4F7F;&#x5F97;&#x5927;&#x4E8E;0&#x7684;&#x6570;&#x503C;&#x4E5F;&#x5177;&#x6709;&#x975E;&#x7EBF;&#x6027;</font></p><h1 id="Separable-Convolution"><a href="#Separable-Convolution" class="headerlink" title="Separable Convolution"></a><font size="5" color="red">Separable Convolution</font></h1><p><img src="/images/Feature_extraction/Xception_D.png" alt="Xception"><br>&#x2003;&#x2003;<font size="3"><strong>Separable Convolution(&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)</strong>&#xFF1A;&#x662F;&#x4E0A;&#x9762;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x5408;&#x4E8C;&#x4E3A;&#x4E00;&#x7684;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x3002;</font><br>&#x2003;&#x2003;<font size="3"><strong>&#x7B2C;&#x4E00;&#x6B65;&#xFF1A;DepthwiseConv&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x8FDB;&#x884C;&#x5377;&#x79EF;</strong></font><br>&#x2003;&#x2003;<font size="3"><strong>&#x7B2C;&#x4E8C;&#x6B65;&#xFF1A;PointwiseConv&#xFF0C;&#x5BF9;&#x7B2C;&#x4E00;&#x6B65;&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#x8FDB;&#x884C;1x1&#x5377;&#x79EF;&#xFF0C;&#x5B9E;&#x73B0;&#x901A;&#x9053;&#x878D;&#x5408;</strong></font><br>&#x2003;&#x2003;<font size="3">&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;<strong>&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;</strong>&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;<strong>&#x8C03;&#x6574;&#x4E3A;&#x4EFB;&#x610F;&#x5408;&#x9002;&#x7684;&#x901A;&#x9053;&#x6570;</strong>&#x3002;&#x7B2C;&#x4E00;&#x6B65;&#x7684;<strong>&#x76EE;&#x7684;&#x662F;&#x51CF;&#x5C11;&#x53C2;&#x6570;&#x91CF;</strong>&#xFF0C;&#x7B2C;&#x4E8C;&#x6B65;&#x662F;<strong>&#x8C03;&#x6574;&#x901A;&#x9053;&#x6570;</strong>&#xFF0C;&#x56E0;&#x6B64;&#x5C06;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x7ED3;&#x5408;&#xFF0C;&#x7EC4;&#x6210;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x3002;</font></p><h1 id="MobileNet&#x56FE;&#x50CF;&#x5206;&#x6790;"><a href="#MobileNet&#x56FE;&#x50CF;&#x5206;&#x6790;" class="headerlink" title="MobileNet&#x56FE;&#x50CF;&#x5206;&#x6790;"></a><font size="5" color="red">MobileNet&#x56FE;&#x50CF;&#x5206;&#x6790;</font></h1><p><img src="/images/Feature_extraction/MobileNet_A.png" alt="MobileNet"></p><h1 id="TensorFlow2-0&#x5B9E;&#x73B0;"><a href="#TensorFlow2-0&#x5B9E;&#x73B0;" class="headerlink" title="TensorFlow2.0&#x5B9E;&#x73B0;"></a><font size="4">TensorFlow2.0&#x5B9E;&#x73B0;</font></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Block(keras.Model):</span><br><span class="line">    def __init__(self, filters, strides, name=&apos;Block&apos;):</span><br><span class="line">        super(Block, self).__init__()</span><br><span class="line">        self.blocks = keras.Sequential(name=name)</span><br><span class="line">        self.blocks.add(keras.layers.DepthwiseConv2D((3, 3), strides=strides, padding=&apos;same&apos;))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU(6))</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters, (1, 1)))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU(6))</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.blocks(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MobileNet(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(MobileNet, self).__init__()</span><br><span class="line">        self.conv1 = keras.layers.Conv2D(32, (3, 3), strides=(2, 2), padding=&apos;same&apos;, name=&apos;Conv&apos;)</span><br><span class="line">        self.bn1 = keras.layers.BatchNormalization(name=&apos;BatchNormalization&apos;)</span><br><span class="line">        self.relu1 = keras.layers.ReLU(6, name=&apos;Relu&apos;)</span><br><span class="line">        self.blocks = keras.Sequential(name=&apos;Block&apos;)</span><br><span class="line"></span><br><span class="line">        self.blocks.add(Block(64, (1, 1)))</span><br><span class="line">        self.blocks.add(Block(128, (2, 2)))</span><br><span class="line">        self.blocks.add(Block(128, (1, 1)))</span><br><span class="line">        self.blocks.add(Block(256, (2, 2)))</span><br><span class="line">        self.blocks.add(Block(256, (1, 1)))</span><br><span class="line">        self.blocks.add(Block(512, (2, 2)))</span><br><span class="line">        for i in range(5):</span><br><span class="line">            self.blocks.add(Block(512, (1, 1)))</span><br><span class="line">        self.blocks.add(Block(1024, (2, 2)))</span><br><span class="line">        self.blocks.add(Block(1024, (1, 1)))</span><br><span class="line">        self.global_average_pool = keras.layers.GlobalAveragePooling2D(name=&apos;Global_average_pooling&apos;)</span><br><span class="line">        self.reshape1 = keras.layers.Reshape((1, 1, 1024), name=&apos;Reshape&apos;)</span><br><span class="line">        self.dropout = keras.layers.Dropout(0.2, name=&apos;Dropout&apos;)</span><br><span class="line">        self.conv2 = keras.layers.Conv2D(1000, (1, 1), name=&apos;Conv&apos;)</span><br><span class="line">        self.reshape2 = keras.layers.Reshape((1000, ), name=&apos;Reshape&apos;)</span><br><span class="line">        self.softmax = keras.layers.Softmax(name=&apos;softmax&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        conv1 = self.conv1(inputs)</span><br><span class="line">        bn1 = self.bn1(conv1)</span><br><span class="line">        relu1 = self.relu1(bn1)</span><br><span class="line">        blocks = self.blocks(relu1)</span><br><span class="line">        global_average_pool = self.global_average_pool(blocks)</span><br><span class="line">        reshape1 = self.reshape1(global_average_pool)</span><br><span class="line">        dropout = self.dropout(reshape1)</span><br><span class="line">        conv2 = self.conv2(dropout)</span><br><span class="line">        reshape2 = self.reshape2(conv2)</span><br><span class="line">        output = self.softmax(reshape2)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    model = MobileNet()</span><br><span class="line">    model.build(input_shape=(None, 224, 224, 3))</span><br><span class="line">    model.summary()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/Feature_extraction/MobileNet_R.png" alt="MobileNet"></p><h1 id="MobileNet&#x5C0F;&#x7ED3;"><a href="#MobileNet&#x5C0F;&#x7ED3;" class="headerlink" title="MobileNet&#x5C0F;&#x7ED3;"></a><font size="5" color="red">MobileNet&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;MobileNet&#x662F;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x7684;&#x8F7B;&#x91CF;&#x7EA7;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;MobileNet&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x53EA;&#x6709;4M&#xFF0C;&#x5728;&#x79FB;&#x52A8;&#x8BBE;&#x5907;&#x4E2D;&#x6709;&#x826F;&#x597D;&#x8868;&#x73B0;&#xFF0C;&#x6709;&#x65F6;&#x4E5F;&#x53EF;<strong>&#x4F5C;&#x4E3A;&#x66FF;&#x4EE3;VGG&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;</strong>&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;MobileNet&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="特征提取网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>SqueezeNet</title>
    <link href="https://USTCcoder.github.io/2020/03/18/feature_extraction%20SqueezeNet/"/>
    <id>https://USTCcoder.github.io/2020/03/18/feature_extraction SqueezeNet/</id>
    <published>2020-03-18T05:09:52.000Z</published>
    <updated>2020-05-08T00:46:37.096Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">SqueezeNet</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>SqueezeNet:</strong>&#x662F;&#x4E00;&#x79CD;&#x8F7B;&#x91CF;&#x7EA7;&#x6DF1;&#x5EA6;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x6A21;&#x578B;&#xFF0C;&#x5728;<strong>2017&#x5E74;&#x53D1;&#x8868;&#x4E8E;ICLR</strong>&#xFF0C;&#x4F5C;&#x8005;&#x6765;&#x81EA;Berkeley&#x548C;Stanford&#xFF0C;&#x5176;<strong>&#x53EA;&#x7528;1/50&#x7684;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x53EF;&#x4EE5;&#x8FBE;&#x5230;&#x4E0E;AlexNet&#x76F8;&#x540C;&#x7684;&#x7CBE;&#x5EA6;</strong>&#xFF0C;&#x5176;&#x6838;&#x5FC3;&#x7ED3;&#x6784;&#x4E3A;<strong>Fire Module</strong>&#x3002;<br><a id="more"></a></p><p><img src="/images/Feature_extraction/SqueezeNet.png" alt="SqueezeNet"></p><h1 id="SqueezeNet&#x7279;&#x70B9;"><a href="#SqueezeNet&#x7279;&#x70B9;" class="headerlink" title="SqueezeNet&#x7279;&#x70B9;"></a><font size="5" color="red">SqueezeNet&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">&#x5F15;&#x5165;<strong>Fire Module</strong>&#xFF0C;&#x6839;&#x636E;<strong>&#x964D;&#x7EF4;</strong>&#x601D;&#x60F3;&#xFF0C;&#x5148;&#x901A;&#x8FC7;1x1&#x7684;&#x5377;&#x79EF;&#x6838;&#x5BF9;&#x53C2;&#x6570;&#x91CF;&#x8FDB;&#x884C;&#x538B;&#x7F29;&#xFF0C;&#x7136;&#x540E;&#x91C7;&#x7528;&#x4E86;<strong>Inception</strong>&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x8FDB;&#x884C;&#x591A;&#x8DEF;&#x878D;&#x5408;&#x3002;</font></p><h1 id="SqueezeNet&#x56FE;&#x50CF;&#x5206;&#x6790;"><a href="#SqueezeNet&#x56FE;&#x50CF;&#x5206;&#x6790;" class="headerlink" title="SqueezeNet&#x56FE;&#x50CF;&#x5206;&#x6790;"></a><font size="5" color="red">SqueezeNet&#x56FE;&#x50CF;&#x5206;&#x6790;</font></h1><p><img src="/images/Feature_extraction/SqueezeNet_A.png" alt="SqueezeNet"></p><h1 id="TensorFlow2-0&#x5B9E;&#x73B0;"><a href="#TensorFlow2-0&#x5B9E;&#x73B0;" class="headerlink" title="TensorFlow2.0&#x5B9E;&#x73B0;"></a><font size="4">TensorFlow2.0&#x5B9E;&#x73B0;</font></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Fire_Block(keras.Model):</span><br><span class="line">    def __init__(self, s1, e1, e3):</span><br><span class="line">        super(Fire_Block, self).__init__()</span><br><span class="line">        self.conv = keras.layers.Conv2D(s1, (1, 1), activation=&apos;relu&apos;)</span><br><span class="line"></span><br><span class="line">        self.conv2_1 = keras.layers.Conv2D(e1, (1, 1), activation=&apos;relu&apos;)</span><br><span class="line">        self.conv2_2 = keras.layers.Conv2D(e3, (3, 3), padding=&apos;same&apos;, activation=&apos;relu&apos;)</span><br><span class="line"></span><br><span class="line">        self.concatenate = keras.layers.Concatenate()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        s1 = self.conv(inputs)</span><br><span class="line">        e1 = self.conv2_1(s1)</span><br><span class="line">        e3 = self.conv2_2(s1)</span><br><span class="line">        output = self.concatenate([e1, e3])</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SqueezeNet(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(SqueezeNet, self).__init__()</span><br><span class="line">        self.conv1 = keras.layers.Conv2D(96, (7, 7), (2, 2), padding=&apos;same&apos;, activation=&apos;relu&apos;, name=&apos;Conv1&apos;)</span><br><span class="line">        self.maxpooling = keras.layers.MaxPool2D((3, 3), (2, 2), name=&apos;MaxPooling&apos;)</span><br><span class="line">        self.block1 = keras.Sequential(name=&apos;Fire_Block1&apos;)</span><br><span class="line">        self.block1.add(Fire_Block(16, 64, 64))</span><br><span class="line">        self.block1.add(Fire_Block(16, 64, 64))</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential(name=&apos;Fire_Block2&apos;)</span><br><span class="line">        self.block2.add(Fire_Block(32, 128, 128))</span><br><span class="line">        self.block2.add(keras.layers.MaxPool2D((3, 3), (2, 2)))</span><br><span class="line">        self.block2.add(Fire_Block(32, 128, 128))</span><br><span class="line"></span><br><span class="line">        self.block3 = keras.Sequential(name=&apos;Fire_Block3&apos;)</span><br><span class="line">        self.block3.add(Fire_Block(48, 192, 192))</span><br><span class="line">        self.block3.add(Fire_Block(48, 192, 192))</span><br><span class="line"></span><br><span class="line">        self.block4 = keras.Sequential(name=&apos;Fire_Block4&apos;)</span><br><span class="line">        self.block4.add(Fire_Block(64, 256, 256))</span><br><span class="line">        self.block4.add(keras.layers.MaxPool2D((3, 3), (2, 2)))</span><br><span class="line">        self.block4.add(Fire_Block(64, 256, 256))</span><br><span class="line"></span><br><span class="line">        self.dropout = keras.layers.Dropout(0.5, name=&apos;Dropout&apos;)</span><br><span class="line">        self.conv2 = keras.layers.Conv2D(1000, (1, 1), activation=&apos;relu&apos;)</span><br><span class="line"></span><br><span class="line">        self.global_average_pooling = keras.layers.GlobalAveragePooling2D(name=&apos;GlobalAveragePooling&apos;)</span><br><span class="line"></span><br><span class="line">        self.softmax = keras.layers.Softmax(name=&apos;Softmax&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        conv1 = self.conv1(inputs)</span><br><span class="line">        maxpooling = self.maxpooling(conv1)</span><br><span class="line">        block1 = self.block1(maxpooling)</span><br><span class="line">        block2 = self.block2(block1)</span><br><span class="line">        block3 = self.block3(block2)</span><br><span class="line">        block4 = self.block4(block3)</span><br><span class="line">        dropout = self.dropout(block4)</span><br><span class="line">        conv2 = self.conv2(dropout)</span><br><span class="line">        global_average_pooling = self.global_average_pooling(conv2)</span><br><span class="line">        output = self.softmax(global_average_pooling)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    model = SqueezeNet()</span><br><span class="line">    model.build(input_shape=(None, 224, 224, 3))</span><br><span class="line">    model.summary()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/Feature_extraction/SqueezeNet_R.png" alt="SqueezeNet"></p><h1 id="SqueezeNet&#x5C0F;&#x7ED3;"><a href="#SqueezeNet&#x5C0F;&#x7ED3;" class="headerlink" title="SqueezeNet&#x5C0F;&#x7ED3;"></a><font size="5" color="red">SqueezeNet&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;SqueezeNet&#x662F;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x7684;&#x8F7B;&#x91CF;&#x7EA7;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;SqueezeNet&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x53EA;&#x6709;1M&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x67D0;&#x4E9B;&#x7279;&#x6B8A;&#x573A;&#x5408;&#x4E2D;&#x80FD;&#x591F;&#x53D1;&#x6325;&#x51FA;&#x5F88;&#x597D;&#x7684;&#x6548;&#x679C;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;SqueezeNet&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="特征提取网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>SENet</title>
    <link href="https://USTCcoder.github.io/2020/03/17/feature_extraction%20SENet/"/>
    <id>https://USTCcoder.github.io/2020/03/17/feature_extraction SENet/</id>
    <published>2020-03-17T07:09:54.000Z</published>
    <updated>2020-05-09T09:12:05.737Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">SENet</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>SENet:</strong>&#x662F;<strong>2017&#x5E74;&#x53D1;&#x8868;&#x5728;CVPR</strong>&#x4E0A;&#x7684;&#x4E00;&#x4E2A;&#x6A21;&#x578B;&#xFF0C;&#x4E5F;&#x662F;<strong>&#x6700;&#x540E;&#x4E00;&#x5C4A;ImageNet 2017&#x7ADE;&#x8D5B;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x7684;&#x51A0;&#x519B;</strong>&#xFF0C;&#x5176;&#x521B;&#x65B0;&#x70B9;&#x662F;<strong>&#x5F15;&#x5165;&#x4E86;&#x6CE8;&#x610F;&#x529B;Squeeze-and-Excitation (SE)&#x6A21;&#x5757;</strong>&#x3002;<br><a id="more"></a></p><p><img src="/images/Feature_extraction/SENet.png" alt="SENet"></p><h1 id="SENet&#x7279;&#x70B9;"><a href="#SENet&#x7279;&#x70B9;" class="headerlink" title="SENet&#x7279;&#x70B9;"></a><font size="5" color="red">SENet&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">&#x5F15;&#x5165;&#x4E86;<strong>&#x6CE8;&#x610F;&#x529B;Squeeze-and-Excitation(SE)&#x6A21;&#x5757;</strong></font><br>&#x2003;&#x2003;<font size="3">&#x7531;&#x4E8E;SE&#x6A21;&#x5757;&#x7B80;&#x5355;&#x6709;&#x6548;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;<strong>&#x5F88;&#x5BB9;&#x6613;&#x7684;&#x548C;&#x5176;&#x4ED6;&#x6A21;&#x578B;&#x8026;&#x5408;</strong>&#xFF0C;&#x548C;ResNet&#x8026;&#x5408;&#x53D8;&#x6210;SE-ResNet&#xFF0C;&#x548C;Inception-V3&#x8026;&#x5408;&#x53D8;&#x6210;SE-Inception-V3&#x7B49;&#x7B49;</font></p><h1 id="Squeeze-and-Excitation"><a href="#Squeeze-and-Excitation" class="headerlink" title="Squeeze-and-Excitation"></a><font size="5" color="red">Squeeze-and-Excitation</font></h1><p><img src="/images/Feature_extraction/SENet_S.png" alt="SENet"><br>&#x2003;&#x2003;<font size="3"><strong>Squeeze-and-Excitation</strong>&#xFF1A;&#x53C8;&#x79F0;&#x4E3A;<strong>&#x7279;&#x5F81;&#x91CD;&#x6807;&#x5B9A;&#x5377;&#x79EF;</strong>&#xFF0C;&#x6216;&#x8005;<strong>&#x6CE8;&#x610F;&#x529B;&#x673A;&#x5236;</strong>&#x3002;&#x5177;&#x4F53;&#x6765;&#x8BF4;&#xFF0C;&#x5C31;&#x662F;&#x901A;&#x8FC7;<strong>&#x5B66;&#x4E60;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x81EA;&#x52A8;&#x83B7;&#x53D6;&#x5230;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x7684;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;</strong>&#xFF0C;&#x7136;&#x540E;&#x4F9D;&#x7167;&#x8FD9;&#x4E2A;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;&#x53BB;<strong>&#x63D0;&#x5347;&#x6709;&#x7528;&#x7684;&#x7279;&#x5F81;&#x5E76;&#x6291;&#x5236;&#x5BF9;&#x5F53;&#x524D;&#x4EFB;&#x52A1;&#x7528;&#x5904;&#x4E0D;&#x5927;&#x7684;&#x7279;&#x5F81;</strong>&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x9996;&#x5148;&#x662F; <strong>Squeeze&#x64CD;&#x4F5C;</strong>&#xFF0C;&#x5148;<strong>&#x8FDB;&#x884C;&#x5168;&#x5C40;&#x6C60;&#x5316;&#xFF0C;&#x5177;&#x6709;&#x5168;&#x5C40;&#x7684;&#x611F;&#x53D7;&#x91CE;</strong>&#xFF0C;&#x5E76;&#x4E14;&#x8F93;&#x51FA;&#x7684;&#x7EF4;&#x5EA6;&#x548C;&#x8F93;&#x5165;&#x7684;&#x7279;&#x5F81;&#x901A;&#x9053;&#x6570;&#x76F8;&#x5339;&#x914D;&#xFF0C;&#x5B83;&#x8868;&#x5F81;&#x7740;&#x5728;&#x7279;&#x5F81;&#x901A;&#x9053;&#x4E0A;&#x54CD;&#x5E94;&#x7684;&#x5168;&#x5C40;&#x5206;&#x5E03;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x7136;&#x540E;&#x662F;<strong>Excitation&#x64CD;&#x4F5C;</strong>&#xFF0C;<strong>&#x901A;&#x8FC7;&#x5168;&#x8FDE;&#x63A5;&#x5C42;&#x4E3A;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x751F;&#x6210;&#x6743;&#x91CD;&#xFF0C;&#x5EFA;&#x7ACB;&#x901A;&#x9053;&#x95F4;&#x7684;&#x76F8;&#x5173;&#x6027;</strong>&#xFF0C;<strong>&#x8F93;&#x51FA;&#x7684;&#x6743;&#x91CD;&#x770B;&#x505A;&#x662F;&#x8FDB;&#x8FC7;&#x7279;&#x5F81;&#x9009;&#x62E9;&#x540E;&#x7684;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x7684;&#x91CD;&#x8981;&#x6027;</strong>&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;<strong>&#x4E58;&#x6CD5;&#x9010;&#x901A;&#x9053;&#x52A0;&#x6743;&#x5230;&#x5148;&#x524D;&#x7684;&#x7279;&#x5F81;&#x4E0A;</strong>&#xFF0C;&#x5B8C;&#x6210;&#x5728;&#x901A;&#x9053;&#x7EF4;&#x5EA6;&#x4E0A;&#x7684;&#x5BF9;&#x539F;&#x59CB;&#x7279;&#x5F81;&#x7684;&#x91CD;&#x6807;&#x5B9A;&#x3002;</font></p><h1 id="SE-ResNet50&#x56FE;&#x50CF;&#x5206;&#x6790;"><a href="#SE-ResNet50&#x56FE;&#x50CF;&#x5206;&#x6790;" class="headerlink" title="SE-ResNet50&#x56FE;&#x50CF;&#x5206;&#x6790;"></a><font size="5" color="red">SE-ResNet50&#x56FE;&#x50CF;&#x5206;&#x6790;</font></h1><p><img src="/images/Feature_extraction/SENet_A.png" alt="SENet"></p><h1 id="TensorFlow2-0&#x5B9E;&#x73B0;"><a href="#TensorFlow2-0&#x5B9E;&#x73B0;" class="headerlink" title="TensorFlow2.0&#x5B9E;&#x73B0;"></a><font size="4">TensorFlow2.0&#x5B9E;&#x73B0;</font></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SE_Block(keras.Model):</span><br><span class="line">    def __init__(self, out_channel):</span><br><span class="line">        super(SE_Block, self).__init__()</span><br><span class="line">        self.squeeze = keras.Sequential()</span><br><span class="line">        self.squeeze.add(keras.layers.GlobalAveragePooling2D())</span><br><span class="line">        self.squeeze.add(keras.layers.Dense(out_channel // 16))</span><br><span class="line">        self.squeeze.add(keras.layers.ReLU())</span><br><span class="line">        self.squeeze.add(keras.layers.Dense(out_channel))</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        squeeze = self.squeeze(inputs)</span><br><span class="line">        sigmoid = tf.nn.sigmoid(squeeze)</span><br><span class="line">        reshape = tf.reshape(sigmoid, (-1, 1, 1, inputs.shape[-1]))</span><br><span class="line">        output = inputs * reshape</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Block(keras.Model):</span><br><span class="line">    def __init__(self, filters, strides=(1, 1), name=&apos;Conv_Block&apos;, type=&apos;Conv_Block&apos;):</span><br><span class="line">        super(Block, self).__init__()</span><br><span class="line">        self.blocks = keras.Sequential(name=name)</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters // 4, (1, 1)))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU())</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters // 4, (3, 3), strides, padding=&apos;same&apos;))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU())</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters, (1, 1)))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(SE_Block(filters))</span><br><span class="line">        self.conv = keras.layers.Conv2D(filters, (1, 1), strides)</span><br><span class="line">        self.relu = keras.layers.ReLU()</span><br><span class="line">        self.type = type</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        blocks = self.blocks(inputs)</span><br><span class="line">        if self.type == &apos;Conv_Block&apos;:</span><br><span class="line">            inputs = self.conv(inputs)</span><br><span class="line">        blocks = self.relu(blocks + inputs)</span><br><span class="line">        return blocks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add_block(filters, strides=(1, 1), name=&apos;Block&apos;, times=1):</span><br><span class="line">    block = keras.Sequential(name=name)</span><br><span class="line">    block.add(Block(filters, strides))</span><br><span class="line">    for i in range(times - 1):</span><br><span class="line">        block.add(Block(filters, type=&apos;identity_block&apos;))</span><br><span class="line">    return block</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SE_ResNet50(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(SE_ResNet50, self).__init__()</span><br><span class="line">        self.zeropadding = keras.layers.ZeroPadding2D((3, 3), name=&apos;Zero_Padding&apos;)</span><br><span class="line">        self.conv1 = keras.layers.Conv2D(64, (7, 7), (2, 2), name=&apos;Conv2d&apos;)</span><br><span class="line">        self.bn1 = keras.layers.BatchNormalization(name=&apos;BatchNormalization&apos;)</span><br><span class="line">        self.relu1 = keras.layers.ReLU(name=&apos;Relu&apos;)</span><br><span class="line">        self.max_pooling = keras.layers.MaxPool2D((3, 3), (2, 2), padding=&apos;same&apos;, name=&apos;Max_Pooling&apos;)</span><br><span class="line">        self.block1 = add_block(256, name=&apos;Block1&apos;, times=3)</span><br><span class="line">        self.block2 = add_block(512, strides=(2, 2), name=&apos;Block2&apos;, times=4)</span><br><span class="line">        self.block3 = add_block(1024, strides=(2, 2), name=&apos;Block3&apos;, times=6)</span><br><span class="line">        self.block4 = add_block(2048, strides=(2, 2), name=&apos;Block4&apos;, times=3)</span><br><span class="line">        self.average_pooling = keras.layers.GlobalAveragePooling2D(name=&apos;Average_Pooling&apos;)</span><br><span class="line">        self.dense = keras.layers.Dense(1000, activation=&apos;softmax&apos;, name=&apos;Dense&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        zeropadding = self.zeropadding(inputs)</span><br><span class="line">        conv1 = self.conv1(zeropadding)</span><br><span class="line">        bn1 = self.bn1(conv1)</span><br><span class="line">        relu1 = self.relu1(bn1)</span><br><span class="line">        max_pooling = self.max_pooling(relu1)</span><br><span class="line">        block1 = self.block1(max_pooling)</span><br><span class="line">        block2 = self.block2(block1)</span><br><span class="line">        block3 = self.block3(block2)</span><br><span class="line">        block4 = self.block4(block3)</span><br><span class="line">        average_pooling = self.average_pooling(block4)</span><br><span class="line">        out_put = self.dense(average_pooling)</span><br><span class="line"></span><br><span class="line">        return out_put</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    model = SE_ResNet50()</span><br><span class="line">    model.build(input_shape=(None, 224, 224, 3))</span><br><span class="line">    model.summary()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/Feature_extraction/SENet_R.png" alt="SENet"></p><h1 id="SENet&#x5C0F;&#x7ED3;"><a href="#SENet&#x5C0F;&#x7ED3;" class="headerlink" title="SENet&#x5C0F;&#x7ED3;"></a><font size="5" color="red">SENet&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;SENet&#x662F;&#x4E00;&#x79CD;&#x975E;&#x5E38;&#x597D;&#x7684;&#x601D;&#x8DEF;&#xFF0C;&#x5176;&#x6A21;&#x578B;&#x53C2;&#x6570;&#x9700;&#x8981;&#x6839;&#x636E;&#x9009;&#x62E9;&#x7684;&#x8026;&#x5408;&#x6A21;&#x578B;&#x786E;&#x5B9A;&#xFF0C;&#x5982;&#x679C;&#x8026;&#x5408;&#x6A21;&#x578B;&#x4E3A;SE-ResNet50&#xFF0C;&#x5219;&#x53C2;&#x6570;&#x91CF;&#x4E3A;28M&#xFF0C;&#x5176;<strong>&#x6CE8;&#x610F;&#x529B;&#x673A;&#x5236;&#x975E;&#x5E38;&#x6709;&#x6548;</strong>&#xFF0C;&#x4E3A;<strong>MobileNet-V3</strong>&#x7684;&#x53D1;&#x5C55;&#xFF0C;<strong>EfficientNet</strong>&#xFF0C;<strong>GhostNet</strong>&#x7B49;&#x7F51;&#x7EDC;&#x8D77;&#x5230;&#x4E86;&#x63A8;&#x52A8;&#x4F5C;&#x7528;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;SENet&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="特征提取网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>DenseNet</title>
    <link href="https://USTCcoder.github.io/2020/03/16/feature_extraction%20DenseNet/"/>
    <id>https://USTCcoder.github.io/2020/03/16/feature_extraction DenseNet/</id>
    <published>2020-03-16T10:13:23.000Z</published>
    <updated>2020-05-08T02:34:34.117Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">DenseNet</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>DenseNet:</strong>&#x4F5C;&#x4E3A;<strong>CVPR2017&#x5E74;&#x7684;Best Paper</strong>&#xFF0C;DenseNet<strong>&#x8131;&#x79BB;&#x4E86;&#x52A0;&#x6DF1;&#x7F51;&#x7EDC;&#x5C42;&#x6570;(ResNet)&#x548C;&#x52A0;&#x5BBD;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;(Inception)&#x6765;&#x63D0;&#x5347;&#x7F51;&#x7EDC;&#x6027;&#x80FD;&#x7684;&#x5B9A;&#x5F0F;&#x601D;&#x7EF4;</strong>&#xFF0C;&#x901A;&#x8FC7;<strong>&#x7279;&#x5F81;&#x91CD;&#x7528;&#x548C;&#x65C1;&#x8DEF;</strong>,&#x65E2;<strong>&#x5927;&#x5E45;&#x5EA6;&#x51CF;&#x5C11;&#x4E86;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;</strong>,&#x53C8;&#x5728;&#x4E00;&#x5B9A;&#x7A0B;&#x5EA6;&#x4E0A;<strong>&#x7F13;&#x89E3;&#x4E86;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x95EE;&#x9898;</strong>&#x7684;&#x4EA7;&#x751F;&#x3002;<br><a id="more"></a></p><p><img src="/images/Feature_extraction/DenseNet.png" alt="DenseNet"></p><h1 id="DenseNet&#x7279;&#x70B9;"><a href="#DenseNet&#x7279;&#x70B9;" class="headerlink" title="DenseNet&#x7279;&#x70B9;"></a><font size="5" color="red">DenseNet&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3"><strong>&#x540C;&#x6837;&#x6DF1;&#x5EA6;&#x7684;DenseNet&#x6240;&#x9700;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x76F8;&#x6BD4;ResNet&#x5927;&#x5E45;&#x51CF;&#x5C11;</strong></font><br>&#x2003;&#x2003;<font size="3">Dense Block&#x7C7B;&#x4F3C;&#x4E8E;ResNet&#x4E2D;&#x7684;Identity Block&#xFF0C;Transition Block&#x7C7B;&#x4F3C;&#x4E8E;ResNet&#x4E2D;&#x7684;Conv Block</font><br>&#x2003;&#x2003;<font size="3">&#x7ED3;&#x6784;&#x7B80;&#x5355;&#xFF0C;<strong>&#x7EFC;&#x5408;&#x4E86;&#x4E0D;&#x540C;&#x5C3A;&#x5EA6;&#x7684;&#x611F;&#x53D7;&#x91CE;</strong>&#xFF0C;&#x63D0;&#x5347;&#x7F51;&#x7EDC;&#x6027;&#x80FD;</font></p><h1 id="&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;DenseNet&#x7F51;&#x7EDC;&#x7ED3;&#x6784;"><a href="#&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;DenseNet&#x7F51;&#x7EDC;&#x7ED3;&#x6784;" class="headerlink" title="&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;DenseNet&#x7F51;&#x7EDC;&#x7ED3;&#x6784;"></a><font size="5" color="red">&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;DenseNet&#x7F51;&#x7EDC;&#x7ED3;&#x6784;</font></h1><p><img src="/images/Feature_extraction/DenseNet_C.png" alt="DenseNet"></p><h1 id="DenseNet121&#x56FE;&#x50CF;&#x5206;&#x6790;"><a href="#DenseNet121&#x56FE;&#x50CF;&#x5206;&#x6790;" class="headerlink" title="DenseNet121&#x56FE;&#x50CF;&#x5206;&#x6790;"></a><font size="5" color="red">DenseNet121&#x56FE;&#x50CF;&#x5206;&#x6790;</font></h1><p><img src="/images/Feature_extraction/DenseNet_A.png" alt="DenseNet"></p><h1 id="TensorFlow2-0&#x5B9E;&#x73B0;"><a href="#TensorFlow2-0&#x5B9E;&#x73B0;" class="headerlink" title="TensorFlow2.0&#x5B9E;&#x73B0;"></a><font size="4">TensorFlow2.0&#x5B9E;&#x73B0;</font></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DenseBlock(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(DenseBlock, self).__init__()</span><br><span class="line">        self.block = keras.Sequential()</span><br><span class="line">        self.block.add(Conv_block(128))</span><br><span class="line">        self.block.add(Conv_block(32, (3, 3)))</span><br><span class="line">        self.concatenate = keras.layers.Concatenate()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.concatenate([inputs, self.block(inputs)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TransitionBlock(keras.Model):</span><br><span class="line">    def __init__(self, filters):</span><br><span class="line">        super(TransitionBlock, self).__init__()</span><br><span class="line">        self.block = keras.Sequential()</span><br><span class="line">        self.block.add(Conv_block(filters))</span><br><span class="line">        self.block.add(keras.layers.AveragePooling2D())</span><br><span class="line">        self.filters = filters</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.block(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Conv_block(keras.Model):</span><br><span class="line">    def __init__(self, filters, kernel_size=(1, 1), strides=(1, 1), padding=&apos;same&apos;, name=&apos;Conv_Block&apos;):</span><br><span class="line">        super(Conv_block, self).__init__()</span><br><span class="line">        self.block = keras.Sequential(name=name)</span><br><span class="line">        self.block.add(keras.layers.Conv2D(filters=filters, kernel_size=kernel_size, strides=strides, padding=padding))</span><br><span class="line">        self.block.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.block.add(keras.layers.ReLU())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.block(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DenseNet121(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(DenseNet121, self).__init__()</span><br><span class="line">        self.zeropadding1 = keras.layers.ZeroPadding2D((3, 3), name=&apos;Zero_Padding1&apos;)</span><br><span class="line">        self.conv = keras.layers.Conv2D(64, (7, 7), (2, 2), name=&apos;Conv&apos;)</span><br><span class="line">        self.bn = keras.layers.BatchNormalization(name=&apos;BatchNormalization&apos;)</span><br><span class="line">        self.relu = keras.layers.ReLU(name=&apos;Relu&apos;)</span><br><span class="line">        self.zeropadding2 = keras.layers.ZeroPadding2D((1, 1), name=&apos;Zero_Padding2&apos;)</span><br><span class="line">        self.maxpooling = keras.layers.MaxPool2D((3, 3), (2, 2), name=&apos;Max_Pooling&apos;)</span><br><span class="line"></span><br><span class="line">        self.block1 = keras.Sequential(name=&apos;Block1&apos;)</span><br><span class="line">        for i in range(6):</span><br><span class="line">            self.block1.add(DenseBlock())</span><br><span class="line">        self.block1.add(TransitionBlock(128))</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential(name=&apos;Block2&apos;)</span><br><span class="line">        for i in range(12):</span><br><span class="line">            self.block2.add(DenseBlock())</span><br><span class="line">        self.block2.add(TransitionBlock(256))</span><br><span class="line"></span><br><span class="line">        self.block3 = keras.Sequential(name=&apos;Block3&apos;)</span><br><span class="line">        for i in range(24):</span><br><span class="line">            self.block3.add(DenseBlock())</span><br><span class="line">        self.block3.add(TransitionBlock(512))</span><br><span class="line"></span><br><span class="line">        self.block4 = keras.Sequential(name=&apos;Block4&apos;)</span><br><span class="line">        for i in range(16):</span><br><span class="line">            self.block4.add(DenseBlock())</span><br><span class="line"></span><br><span class="line">        self.global_average_pooling = keras.layers.GlobalAveragePooling2D(name=&apos;Average_Pooling&apos;)</span><br><span class="line">        self.dense = keras.layers.Dense(1000, activation=&apos;softmax&apos;, name=&apos;Dense&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        zeropadding1 = self.zeropadding1(inputs)</span><br><span class="line">        conv = self.conv(zeropadding1)</span><br><span class="line">        bn = self.bn(conv)</span><br><span class="line">        relu = self.relu(bn)</span><br><span class="line">        zeropadding2 = self.zeropadding2(relu)</span><br><span class="line">        maxpooling = self.maxpooling(zeropadding2)</span><br><span class="line">        block1 = self.block1(maxpooling)</span><br><span class="line">        block2 = self.block2(block1)</span><br><span class="line">        block3 = self.block3(block2)</span><br><span class="line">        block4 = self.block4(block3)</span><br><span class="line">        global_average_pooling = self.global_average_pooling(block4)</span><br><span class="line">        out_put = self.dense(global_average_pooling)</span><br><span class="line"></span><br><span class="line">        return out_put</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    model = DenseNet()</span><br><span class="line">    model.build(input_shape=(None, 224, 224, 3))</span><br><span class="line">    model.summary()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/Feature_extraction/DenseNet_R.png" alt="DenseNet"></p><h1 id="DenseNet&#x5C0F;&#x7ED3;"><a href="#DenseNet&#x5C0F;&#x7ED3;" class="headerlink" title="DenseNet&#x5C0F;&#x7ED3;"></a><font size="5" color="red">DenseNet&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;DenseNet&#x662F;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x4E5F;&#x662F;&#x4E00;&#x79CD;&#x975E;&#x5E38;&#x6709;&#x6548;&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x6A21;&#x578B;&#x3002;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;<strong>DenseNet121&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x53EA;&#x6709;8M&#xFF0C;&#x751A;&#x81F3;&#x662F;ResNet50&#x7684;&#x53C2;&#x6570;&#x91CF;&#x7684;&#x4E09;&#x5206;&#x4E4B;&#x4E00;</strong>&#xFF0C;&#x56E0;&#x6B64;&#x5B9E;&#x9645;&#x4EFB;&#x52A1;&#x4E2D;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;DenseNet&#x4F5C;&#x4E3A;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#xFF0C;<strong>&#x65E2;&#x9AD8;&#x6548;&#x53C8;&#x8282;&#x7EA6;&#x5185;&#x5B58;&#x548C;&#x8BA1;&#x7B97;&#x91CF;</strong>&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;DenseNet&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="特征提取网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>Xception</title>
    <link href="https://USTCcoder.github.io/2020/03/14/feature_extraction%20Xception/"/>
    <id>https://USTCcoder.github.io/2020/03/14/feature_extraction Xception/</id>
    <published>2020-03-14T08:08:58.000Z</published>
    <updated>2020-05-09T09:16:24.482Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">Xception</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>Xception:</strong>&#x662F;<strong>&#x8C37;&#x6B4C;&#x516C;&#x53F8;&#x5BF9;Inception-V3&#x7684;&#x6539;&#x8FDB;</strong>&#xFF0C;&#x88AB;<strong>CVPR2017&#x5E74;&#x6536;&#x5F55;</strong>&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x597D;&#x7684;&#x56FE;&#x50CF;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x6A21;&#x578B;&#x3002;<br><a id="more"></a></p><p><img src="/images/Feature_extraction/Xception.png" alt="Xception"></p><h1 id="Xception&#x7279;&#x70B9;"><a href="#Xception&#x7279;&#x70B9;" class="headerlink" title="Xception&#x7279;&#x70B9;"></a><font size="5" color="red">Xception&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">&#x9664;&#x4E86;Inception&#x7684;&#x7279;&#x70B9;&#x4EE5;&#x5916;&#xFF0C;&#x91C7;&#x7528;&#x4E86;<strong>SeparableConv(&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)&#x4EE3;&#x66FF;Inception&#x4E2D;&#x7684;(Conv)&#x5377;&#x79EF;&#x64CD;&#x4F5C;</strong>&#xFF0C;&#x5927;&#x5927;&#x8282;&#x7EA6;&#x4E86;&#x53C2;&#x6570;&#x91CF;</font></p><h1 id="Separable-Convolution"><a href="#Separable-Convolution" class="headerlink" title="Separable Convolution"></a><font size="5" color="red">Separable Convolution</font></h1><p><img src="/images/Feature_extraction/Xception_D.png" alt="Xception"><br>&#x2003;&#x2003;<font size="3"><strong>Separable Convolution(&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)</strong>&#xFF1A;&#x662F;&#x4E0A;&#x9762;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x5408;&#x4E8C;&#x4E3A;&#x4E00;&#x7684;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x3002;</font><br>&#x2003;&#x2003;<font size="3"><strong>&#x7B2C;&#x4E00;&#x6B65;&#xFF1A;DepthwiseConv&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x8FDB;&#x884C;&#x5377;&#x79EF;</strong></font><br>&#x2003;&#x2003;<font size="3"><strong>&#x7B2C;&#x4E8C;&#x6B65;&#xFF1A;PointwiseConv&#xFF0C;&#x5BF9;&#x7B2C;&#x4E00;&#x6B65;&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#x8FDB;&#x884C;1x1&#x5377;&#x79EF;&#xFF0C;&#x5B9E;&#x73B0;&#x901A;&#x9053;&#x878D;&#x5408;</strong></font><br>&#x2003;&#x2003;<font size="3">&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;<strong>&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;</strong>&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;<strong>&#x8C03;&#x6574;&#x4E3A;&#x4EFB;&#x610F;&#x5408;&#x9002;&#x7684;&#x901A;&#x9053;&#x6570;</strong>&#xFF0C;&#x5728;<strong>Xception&#xFF0C;MobileNet&#xFF0C;EfficientNet&#xFF0C;ShuffleNet</strong>&#x7F51;&#x7EDC;&#x4E2D;&#x6709;&#x5927;&#x91CF;&#x4F7F;&#x7528;&#x3002;&#x7B2C;&#x4E00;&#x6B65;&#x7684;<strong>&#x76EE;&#x7684;&#x662F;&#x51CF;&#x5C11;&#x53C2;&#x6570;&#x91CF;</strong>&#xFF0C;&#x7B2C;&#x4E8C;&#x6B65;&#x662F;<strong>&#x8C03;&#x6574;&#x901A;&#x9053;&#x6570;</strong>&#xFF0C;&#x56E0;&#x6B64;&#x5C06;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x7ED3;&#x5408;&#xFF0C;&#x7EC4;&#x6210;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x3002;</font></p><h1 id="Xception&#x56FE;&#x50CF;&#x5206;&#x6790;"><a href="#Xception&#x56FE;&#x50CF;&#x5206;&#x6790;" class="headerlink" title="Xception&#x56FE;&#x50CF;&#x5206;&#x6790;"></a><font size="5" color="red">Xception&#x56FE;&#x50CF;&#x5206;&#x6790;</font></h1><p><img src="/images/Feature_extraction/Xception_A.png" alt="Xception"></p><h1 id="TensorFlow2-0&#x5B9E;&#x73B0;"><a href="#TensorFlow2-0&#x5B9E;&#x73B0;" class="headerlink" title="TensorFlow2.0&#x5B9E;&#x73B0;"></a><font size="4">TensorFlow2.0&#x5B9E;&#x73B0;</font></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SeparableConv_Bn_Relu(keras.Model):</span><br><span class="line">    def __init__(self, filters, kernel_size, strides=(1, 1), padding=&apos;same&apos;, name=&apos;Conv_Bn&apos;, use_separable=True, use_relu=True):</span><br><span class="line">        super(SeparableConv_Bn_Relu, self).__init__()</span><br><span class="line">        self.block = keras.Sequential(name=name)</span><br><span class="line">        if use_separable:</span><br><span class="line">            self.block.add(keras.layers.SeparableConv2D(filters, kernel_size, strides, padding=padding))</span><br><span class="line">        else:</span><br><span class="line">            self.block.add(keras.layers.Conv2D(filters, kernel_size, strides, padding=padding))</span><br><span class="line">        self.block.add(keras.layers.BatchNormalization())</span><br><span class="line">        if use_relu:</span><br><span class="line">            self.block.add(keras.layers.ReLU())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.block(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Entry_Exit_Block(keras.Model):</span><br><span class="line">    def __init__(self, filters, relu=True, name=&apos;Entry_Exit_Block&apos;):</span><br><span class="line">        super(Entry_Exit_Block, self).__init__()</span><br><span class="line">        self.block = keras.Sequential(name=name)</span><br><span class="line">        if relu:</span><br><span class="line">            self.block.add(keras.layers.ReLU())</span><br><span class="line">        self.block.add(SeparableConv_Bn_Relu(filters, (3, 3)))</span><br><span class="line">        self.block.add(SeparableConv_Bn_Relu(filters, (3, 3), use_relu=False))</span><br><span class="line">        self.block.add(keras.layers.MaxPool2D((3, 3), (2, 2), padding=&apos;same&apos;))</span><br><span class="line">        self.conv_bn = SeparableConv_Bn_Relu(filters, (1, 1), (2, 2), use_separable=False, use_relu=False)</span><br><span class="line">        self.relu = keras.layers.ReLU()</span><br><span class="line">        self.concatenate = keras.layers.Concatenate()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block = self.block(inputs)</span><br><span class="line">        conv_bn = self.conv_bn(inputs)</span><br><span class="line">        output = self.concatenate([block, conv_bn])</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Middle_Block(keras.Model):</span><br><span class="line">    def __init__(self, filters, name=&apos;Middle_Block&apos;):</span><br><span class="line">        super(Middle_Block, self).__init__()</span><br><span class="line">        self.block = keras.Sequential(name=name)</span><br><span class="line">        self.block.add(keras.layers.ReLU())</span><br><span class="line">        self.block.add(SeparableConv_Bn_Relu(filters, (3, 3)))</span><br><span class="line">        self.block.add(SeparableConv_Bn_Relu(filters, (3, 3)))</span><br><span class="line">        self.block.add(SeparableConv_Bn_Relu(filters, (3, 3), use_relu=False))</span><br><span class="line">        self.concatenate = keras.layers.Concatenate()</span><br><span class="line">        self.relu = keras.layers.ReLU()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block = self.block(inputs)</span><br><span class="line">        output = self.concatenate([block, inputs])</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Xception(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Xception, self).__init__()</span><br><span class="line">        self.conv_bn_relu1 = SeparableConv_Bn_Relu(32, (3, 3), (2, 2), padding=&apos;valid&apos;, name=&apos;Conv_Bn_Relu1&apos;, use_separable=False)</span><br><span class="line">        self.conv_bn_relu2 = SeparableConv_Bn_Relu(64, (3, 3), padding=&apos;valid&apos;, name=&apos;Conv_Bn_Relu2&apos;, use_separable=False)</span><br><span class="line"></span><br><span class="line">        self.entry_block = keras.Sequential(name=&apos;Entry_Block&apos;)</span><br><span class="line">        entry_filters = [128, 256, 728]</span><br><span class="line">        self.entry_block.add(Entry_Exit_Block(entry_filters[0], relu=False))</span><br><span class="line">        for i in range(1, len(entry_filters)):</span><br><span class="line">            self.entry_block.add(Entry_Exit_Block(entry_filters[i]))</span><br><span class="line"></span><br><span class="line">        self.middle_block = keras.Sequential(name=&apos;Middle_Block&apos;)</span><br><span class="line">        for i in range(8):</span><br><span class="line">            self.middle_block.add(Middle_Block(728))</span><br><span class="line"></span><br><span class="line">        self.exit_block = keras.Sequential(name=&apos;Exit_Block&apos;)</span><br><span class="line">        self.exit_block.add(Entry_Exit_Block(1024))</span><br><span class="line"></span><br><span class="line">        self.separableconv_bn_relu1 = SeparableConv_Bn_Relu(1536, (3, 3), name=&apos;SeparableConv_Bn_Relu1&apos;)</span><br><span class="line">        self.separableconv_bn_relu2 = SeparableConv_Bn_Relu(2048, (3, 3), name=&apos;SeparableConv_Bn_Relu2&apos;)</span><br><span class="line">        self.global_average_pooling = keras.layers.GlobalAveragePooling2D(name=&apos;Global_AveragePooling&apos;)</span><br><span class="line">        self.dense = keras.layers.Dense(1000, activation=&apos;softmax&apos;, name=&apos;Dense&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        conv_bn_relu1 = self.conv_bn_relu1(inputs)</span><br><span class="line">        conv_bn_relu2 = self.conv_bn_relu2(conv_bn_relu1)</span><br><span class="line">        entry_filters = self.entry_block(conv_bn_relu2)</span><br><span class="line">        middle_block = self.middle_block(entry_filters)</span><br><span class="line">        exit_block = self.exit_block(middle_block)</span><br><span class="line">        separableconv_bn_relu1 = self.separableconv_bn_relu1(exit_block)</span><br><span class="line">        separableconv_bn_relu2 = self.separableconv_bn_relu2(separableconv_bn_relu1)</span><br><span class="line">        global_average_pooling = self.global_average_pooling(separableconv_bn_relu2)</span><br><span class="line">        output = self.dense(global_average_pooling)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    model = Xception()</span><br><span class="line">    model.build(input_shape=(None, 299, 299, 3))</span><br><span class="line">    model.summary()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/Feature_extraction/Xception_R.png" alt="Xception"></p><h1 id="Xception&#x5C0F;&#x7ED3;"><a href="#Xception&#x5C0F;&#x7ED3;" class="headerlink" title="Xception&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Xception&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;Xception&#x662F;&#x4E00;&#x79CD;&#x590D;&#x6742;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;Xception&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x53EF;&#x8FBE;58M&#xFF0C;&#x56E0;&#x4E3A;&#x5176;&#x4F18;&#x79C0;&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x80FD;&#x529B;&#xFF0C;&#x5E76;&#x4E14;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x76F8;&#x6BD4;Inception-V3&#x8F83;&#x4E3A;&#x7B80;&#x5355;&#x3002;&#x56E0;&#x6B64;&#x5B9E;&#x9645;&#x4EFB;&#x52A1;&#x7ECF;&#x5E38;&#x4F7F;&#x7528;&#xFF0C;&#x5982;<strong>&#x8BED;&#x4E49;&#x5206;&#x5272;&#x7F51;&#x7EDC;DeepLab-V3+&#x4F7F;&#x7528;&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x5C31;&#x662F;Xception</strong>&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Xception&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="特征提取网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>ResNeXt</title>
    <link href="https://USTCcoder.github.io/2020/03/13/feature_extraction%20ResNeXt/"/>
    <id>https://USTCcoder.github.io/2020/03/13/feature_extraction ResNeXt/</id>
    <published>2020-03-13T07:22:15.000Z</published>
    <updated>2020-05-09T09:11:35.977Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">ResNeXt</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>ResNeXt:</strong>&#x662F;<strong>2017&#x5E74;&#x53D1;&#x8868;&#x4E8E;CVPR</strong>&#x7684;&#x4E00;&#x4E2A;&#x6A21;&#x578B;&#xFF0C;&#x662F;<strong>ResNet&#x7F51;&#x7EDC;&#x7684;&#x5347;&#x7EA7;&#x7248;&#x672C;</strong>&#x3002;&#x548C;Inception-ResNet&#x7C7B;&#x4F3C;&#xFF0C;Inception-ResNet&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x662F;Inception&#x6A21;&#x578B;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#x5438;&#x6536;ResNet&#x6B8B;&#x5DEE;&#x601D;&#x60F3;&#xFF0C;&#x800C;ResNext&#x5219;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x662F;ResNet&#x6A21;&#x578B;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#x5438;&#x6536;Inception&#x5206;&#x5757;&#x5408;&#x5E76;&#x601D;&#x60F3;&#x3002;<br><a id="more"></a></p><p><img src="/images/Feature_extraction/ResNeXt.png" alt="ResNeXt"></p><h1 id="ResNeXt&#x7279;&#x70B9;"><a href="#ResNeXt&#x7279;&#x70B9;" class="headerlink" title="ResNeXt&#x7279;&#x70B9;"></a><font size="5" color="red">ResNeXt&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3"><strong>&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x548C;ResNet&#x76F8;&#x540C;</strong>&#xFF0C;&#x6839;&#x636E;ResNet50&#xFF0C;&#x5219;&#x53EF;&#x4EE5;&#x4FEE;&#x6539;&#x4E3A;ResNeXt50&#xFF0C;&#x6839;&#x636E;ResNet101&#xFF0C;&#x5219;&#x53EF;&#x4EE5;&#x4FEE;&#x6539;&#x4E3A;ResNeXt101&#xFF0C;&#x7B49;&#x7B49;</font><br>&#x2003;&#x2003;<font size="3"><strong>&#x5F15;&#x5165;Inception&#x6A21;&#x578B;&#x5206;&#x5757;&#x5408;&#x5E76;&#x601D;&#x60F3;</strong>&#xFF0C;&#x5C06;ResNet&#x4E2D;Conv Block&#x548C;Identity Block&#x4E2D;&#x7684;<strong>&#x666E;&#x901A;&#x5377;&#x79EF;</strong>&#x53D8;&#x6210;<strong>GroupConv&#x5206;&#x7EC4;&#x5377;&#x79EF;</strong>&#x3002;&#x63D0;&#x51FA;&#x4E86;<strong>cardinality(&#x57FA;&#x6570;)</strong>&#x540D;&#x8BCD;&#xFF0C;&#x57FA;&#x6570;&#x4E3A;32&#xFF0C;&#x76F8;&#x5F53;&#x4E8E;&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x7684;&#x7EC4;&#x6570;&#x4E3A;32&#xFF0C;&#x6700;&#x540E;&#x5C06;32&#x7EC4;&#x5377;&#x79EF;&#x7ED3;&#x679C;&#x5408;&#x5E76;</font></p><h1 id="Group-Convolution"><a href="#Group-Convolution" class="headerlink" title="Group Convolution"></a><font size="5" color="red">Group Convolution</font></h1><p><img src="/images/Feature_extraction/ShuffleNet_V2_G.png" alt="ShuffleNet_V2"><br>&#x2003;&#x2003;<font size="3"><strong>Group Convolution(&#x5206;&#x7EC4;&#x5377;&#x79EF;)</strong>&#xFF1A;<strong>&#x4F20;&#x7EDF;&#x5377;&#x79EF;&#x662F;&#x91C7;&#x7528;&#x4E00;&#x79CD;&#x5377;&#x79EF;&#x5168;&#x8FDE;&#x63A5;&#x7684;&#x601D;&#x60F3;</strong>&#xFF0C;&#x7279;&#x5F81;&#x56FE;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x90FD;&#x7ED3;&#x5408;&#x4E86;&#x56FE;&#x50CF;&#x4E2D;&#x6240;&#x6709;&#x901A;&#x9053;&#x7684;&#x4FE1;&#x606F;&#x3002;&#x800C;&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x7279;&#x5F81;&#x56FE;&#x50CF;<strong>&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x53EA;&#x5229;&#x7528;&#x5230;&#x4E00;&#x90E8;&#x5206;&#x539F;&#x59CB;&#x56FE;&#x50CF;&#x7684;&#x901A;&#x9053;</strong>&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;<strong>&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;</strong>&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;5x5&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(256x5x5+1)=1638656&#xFF0C;&#x800C;&#x5206;&#x6210;32&#x7EC4;&#x7684;&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(8*5x5+1)=51456&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;32&#x500D;&#xFF0C;&#x5F53;&#x7EC4;&#x6570;&#x53D8;&#x6210;&#x901A;&#x9053;&#x6570;&#x65F6;&#xFF0C;&#x5219;&#x7C7B;&#x4F3C;&#x4E8E;Depthwise Convolution&#x6DF1;&#x5EA6;&#x5377;&#x79EF;</font></p><h1 id="ResNeXt50&#x56FE;&#x50CF;&#x5206;&#x6790;"><a href="#ResNeXt50&#x56FE;&#x50CF;&#x5206;&#x6790;" class="headerlink" title="ResNeXt50&#x56FE;&#x50CF;&#x5206;&#x6790;"></a><font size="5" color="red">ResNeXt50&#x56FE;&#x50CF;&#x5206;&#x6790;</font></h1><p><img src="/images/Feature_extraction/ResNetX_A.png" alt="ResNeXt"></p><h1 id="TensorFlow2-0&#x5B9E;&#x73B0;"><a href="#TensorFlow2-0&#x5B9E;&#x73B0;" class="headerlink" title="TensorFlow2.0&#x5B9E;&#x73B0;"></a><font size="4">TensorFlow2.0&#x5B9E;&#x73B0;</font></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GroupConv(keras.layers.Layer):</span><br><span class="line">    def __init__(self, filters, strides=(1, 1), g_num=32):</span><br><span class="line">        super(GroupConv, self).__init__()</span><br><span class="line">        self.g_num = g_num</span><br><span class="line">        self.groupconv = []</span><br><span class="line">        for i in range(g_num):</span><br><span class="line">            self.groupconv.append(keras.layers.Conv2D(filters // g_num, (3, 3), strides=strides, padding=&apos;same&apos;))</span><br><span class="line">        self.concatenate = keras.layers.Concatenate()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, **kwargs):</span><br><span class="line">        groupconv = []</span><br><span class="line">        split = tf.split(inputs, self.g_num, axis=-1)</span><br><span class="line">        for i in range(self.g_num):</span><br><span class="line">            groupconv.append(self.groupconv[i](split[i]))</span><br><span class="line">        output = self.concatenate(groupconv)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Block(keras.Model):</span><br><span class="line">    def __init__(self, filters, strides=(1, 1), name=&apos;Conv_Block&apos;, type=&apos;Conv_Block&apos;):</span><br><span class="line">        super(Block, self).__init__()</span><br><span class="line">        self.blocks = keras.Sequential(name=name)</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters // 2, (1, 1)))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU())</span><br><span class="line">        self.blocks.add(GroupConv(filters // 2, strides=strides))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU())</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters, (1, 1)))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.conv = keras.layers.Conv2D(filters, (1, 1), strides)</span><br><span class="line">        self.relu = keras.layers.ReLU()</span><br><span class="line">        self.type = type</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        blocks = self.blocks(inputs)</span><br><span class="line">        if self.type == &apos;Conv_Block&apos;:</span><br><span class="line">            inputs = self.conv(inputs)</span><br><span class="line">        blocks = self.relu(blocks + inputs)</span><br><span class="line">        return blocks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add_block(filters, strides=(1, 1), name=&apos;Block&apos;, times=1):</span><br><span class="line">    block = keras.Sequential(name=name)</span><br><span class="line">    block.add(Block(filters, strides))</span><br><span class="line">    for i in range(times - 1):</span><br><span class="line">        block.add(Block(filters, type=&apos;identity_block&apos;))</span><br><span class="line">    return block</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ResNeXt50(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(ResNeXt50, self).__init__()</span><br><span class="line">        self.zeropadding = keras.layers.ZeroPadding2D((3, 3), name=&apos;Zero_Padding&apos;)</span><br><span class="line">        self.conv1 = keras.layers.Conv2D(64, (7, 7), (2, 2), name=&apos;Conv2d&apos;)</span><br><span class="line">        self.bn1 = keras.layers.BatchNormalization(name=&apos;BatchNormalization&apos;)</span><br><span class="line">        self.relu1 = keras.layers.ReLU(name=&apos;Relu&apos;)</span><br><span class="line">        self.max_pooling = keras.layers.MaxPool2D((3, 3), (2, 2), padding=&apos;valid&apos;, name=&apos;Max_Pooling&apos;)</span><br><span class="line">        self.block1 = add_block(256, name=&apos;Block1&apos;, times=3)</span><br><span class="line">        self.block2 = add_block(512, strides=(2, 2), name=&apos;Block2&apos;, times=4)</span><br><span class="line">        self.block3 = add_block(1024, strides=(2, 2), name=&apos;Block3&apos;, times=6)</span><br><span class="line">        self.block4 = add_block(2048, strides=(2, 2), name=&apos;Block4&apos;, times=3)</span><br><span class="line">        self.average_pooling = keras.layers.GlobalAveragePooling2D(name=&apos;Average_Pooling&apos;)</span><br><span class="line">        self.dense = keras.layers.Dense(1000, activation=&apos;softmax&apos;, name=&apos;Dense&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        zeropadding = self.zeropadding(inputs)</span><br><span class="line">        conv1 = self.conv1(zeropadding)</span><br><span class="line">        bn1 = self.bn1(conv1)</span><br><span class="line">        relu1 = self.relu1(bn1)</span><br><span class="line">        max_pooling = self.max_pooling(relu1)</span><br><span class="line">        block1 = self.block1(max_pooling)</span><br><span class="line">        block2 = self.block2(block1)</span><br><span class="line">        block3 = self.block3(block2)</span><br><span class="line">        block4 = self.block4(block3)</span><br><span class="line">        average_pooling = self.average_pooling(block4)</span><br><span class="line">        out_put = self.dense(average_pooling)</span><br><span class="line"></span><br><span class="line">        return out_put</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    model = ResNeXt50()</span><br><span class="line">    model.build(input_shape=(None, 224, 224, 3))</span><br><span class="line">    model.summary()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/Feature_extraction/ResNeXt_R.png" alt="ResNeXt"></p><h1 id="ResNeXt&#x5C0F;&#x7ED3;"><a href="#ResNeXt&#x5C0F;&#x7ED3;" class="headerlink" title="ResNeXt&#x5C0F;&#x7ED3;"></a><font size="5" color="red">ResNeXt&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;ResNeXt&#x662F;&#x4E00;&#x79CD;&#x975E;&#x5E38;&#x6709;&#x6548;&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#xFF0C;ResNeXt&#x53C2;&#x6570;&#x91CF;&#x4E3A;25M&#xFF0C;&#x548C;&#x76F8;&#x540C;&#x7ED3;&#x6784;&#x7684;ResNet&#x51E0;&#x4E4E;&#x76F8;&#x540C;&#xFF0C;&#x4F46;&#x662F;&#x6548;&#x679C;&#x4F18;&#x4E8E;ResNet&#xFF0C;&#x56E0;&#x6B64;&#x662F;&#x4E00;&#x79CD;&#x5B9E;&#x7528;&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;ResNeXt&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="特征提取网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>Inception-ResNet-V2</title>
    <link href="https://USTCcoder.github.io/2020/03/12/feature_extraction%20Inception-ResNet_V2/"/>
    <id>https://USTCcoder.github.io/2020/03/12/feature_extraction Inception-ResNet_V2/</id>
    <published>2020-03-12T05:39:25.000Z</published>
    <updated>2020-05-09T09:06:43.562Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">Inception-ResNet-V2</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>Inception-ResNet-V2:</strong>&#x548C;Inception-V4&#xFF0C;Inception-ResNet-V1&#x4E8E;<strong>2017&#x5E74;&#x53D1;&#x8868;&#x5728;AAAI</strong>&#x540C;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;&#x4E2D;&#xFF0C;&#x4E09;&#x8005;&#x7684;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x57FA;&#x672C;&#x76F8;&#x540C;&#x3002;&#x7ED3;&#x5408;&#x4E86;<strong>Inception-V3</strong>&#x548C;<strong>ResNet</strong>&#x7684;&#x4F18;&#x70B9;&#x800C;&#x6210;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#x3002;<br><a id="more"></a></p><p><img src="/images/Feature_extraction/Inception-ResNet_V2.png" alt="Inception-ResNet_V2"></p><h1 id="Inception-ResNet-V2&#x7279;&#x70B9;"><a href="#Inception-ResNet-V2&#x7279;&#x70B9;" class="headerlink" title="Inception-ResNet-V2&#x7279;&#x70B9;"></a><font size="5" color="red">Inception-ResNet-V2&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3"><strong>&#x5728;Inception-V3&#x7684;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x589E;&#x52A0;&#x4E86;&#x6B8B;&#x5DEE;&#x7ED3;&#x6784;</strong></font><br>&#x2003;&#x2003;<font size="3">&#x5BF9;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x5165;<strong>&#x589E;&#x52A0;&#x4E86;Stem&#x5C42;</strong>&#xFF0C;&#x4E0D;&#x518D;&#x662F;Inception-V3&#x4E2D;&#x7B80;&#x5355;&#x7684;&#x5377;&#x79EF;&#x64CD;&#x4F5C;</font></p><h1 id="Spatial-Separable-Convolution"><a href="#Spatial-Separable-Convolution" class="headerlink" title="Spatial Separable Convolution"></a><font size="5" color="red">Spatial Separable Convolution</font></h1><p><img src="/images/deep_learning/spatial.png" alt="spatial"><br>&#x2003;&#x2003;<font size="3"><strong>Spatial Separable Convolution(&#x7A7A;&#x95F4;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)</strong>&#xFF1A;&#x5C06;3x3&#x7684;&#x5377;&#x79EF;&#x5206;&#x89E3;&#x4E3A;3x1&#x7684;&#x5377;&#x79EF;&#x6838;1x3&#x7684;&#x5377;&#x79EF;&#xFF0C;&#x5C06;7x7&#x7684;&#x5377;&#x79EF;&#x5206;&#x89E3;&#x4E3A;7x1&#x7684;&#x5377;&#x79EF;&#x6838;1x7&#x7684;&#x5377;&#x79EF;.&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;<strong>&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;</strong>&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;64x64x256&#x7684;&#x7279;&#x5F81;&#x56FE;&#xFF0C;&#x7ECF;&#x8FC7;7x7&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(256x7x7+1)=3211520&#xFF0C;&#x800C;&#x7A7A;&#x95F4;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x53C2;&#x6570;&#x91CF;&#x4E3A;2x256x(256x7x1+1)=918016&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;3.5&#x500D;&#x3002;</font></p><h1 id="Inception-ResNet-V2&#x56FE;&#x50CF;&#x5206;&#x6790;"><a href="#Inception-ResNet-V2&#x56FE;&#x50CF;&#x5206;&#x6790;" class="headerlink" title="Inception-ResNet-V2&#x56FE;&#x50CF;&#x5206;&#x6790;"></a><font size="5" color="red">Inception-ResNet-V2&#x56FE;&#x50CF;&#x5206;&#x6790;</font></h1><p><img src="/images/Feature_extraction/Inception-ResNet_V2_A.png" alt="Inception-ResNet_V2"></p><h1 id="TensorFlow2-0&#x5B9E;&#x73B0;"><a href="#TensorFlow2-0&#x5B9E;&#x73B0;" class="headerlink" title="TensorFlow2.0&#x5B9E;&#x73B0;"></a><font size="4">TensorFlow2.0&#x5B9E;&#x73B0;</font></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Conv_Bn_Relu(keras.Model):</span><br><span class="line">    def __init__(self, filters, kernel_size, strides=(1, 1), padding=&apos;same&apos;, name=&apos;Conv_Bn_Relu&apos;):</span><br><span class="line">        super(Conv_Bn_Relu, self).__init__()</span><br><span class="line">        self.block = keras.Sequential(name=name)</span><br><span class="line">        self.block.add(keras.layers.Conv2D(filters, kernel_size, strides, padding=padding))</span><br><span class="line">        self.block.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.block.add(keras.layers.ReLU())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.block(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Stem_Block(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Stem_Block, self).__init__()</span><br><span class="line">        self.block = keras.Sequential()</span><br><span class="line">        self.block.add(Conv_Bn_Relu(32, (3, 3), (2, 2), padding=&apos;valid&apos;))</span><br><span class="line">        self.block.add(Conv_Bn_Relu(32, (3, 3), padding=&apos;valid&apos;))</span><br><span class="line">        self.block.add(Conv_Bn_Relu(64, (3, 3)))</span><br><span class="line"></span><br><span class="line">        self.maxpooling1 = keras.layers.MaxPool2D((3, 3), (2, 2))</span><br><span class="line">        self.conv1 = Conv_Bn_Relu(96, (3, 3), (2, 2), &apos;valid&apos;)</span><br><span class="line">        self.concatenate1 = keras.layers.Concatenate()</span><br><span class="line"></span><br><span class="line">        self.conv2_1 = keras.Sequential()</span><br><span class="line">        self.conv2_1.add(Conv_Bn_Relu(64, (1, 1)))</span><br><span class="line">        self.conv2_1.add(Conv_Bn_Relu(96, (3, 3), padding=&apos;valid&apos;))</span><br><span class="line">        self.conv2_2 = keras.Sequential()</span><br><span class="line">        self.conv2_2.add(Conv_Bn_Relu(64, (1, 1)))</span><br><span class="line">        self.conv2_2.add(Conv_Bn_Relu(64, (1, 7)))</span><br><span class="line">        self.conv2_2.add(Conv_Bn_Relu(64, (7, 1)))</span><br><span class="line">        self.conv2_2.add(Conv_Bn_Relu(96, (3, 3), padding=&apos;valid&apos;))</span><br><span class="line">        self.concatenate2 = keras.layers.Concatenate()</span><br><span class="line"></span><br><span class="line">        self.maxpooling3 = keras.layers.MaxPool2D((3, 3), (2, 2))</span><br><span class="line">        self.conv3 = Conv_Bn_Relu(192, (3, 3), (2, 2), &apos;valid&apos;)</span><br><span class="line">        self.concatenate3 = keras.layers.Concatenate()</span><br><span class="line"></span><br><span class="line">        self.relu = keras.layers.ReLU()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block = self.block(inputs)</span><br><span class="line">        maxpooling1 = self.maxpooling1(block)</span><br><span class="line">        conv1 = self.conv1(block)</span><br><span class="line">        concatenate1 = self.concatenate1([maxpooling1, conv1])</span><br><span class="line"></span><br><span class="line">        conv2_1 = self.conv2_1(concatenate1)</span><br><span class="line">        conv2_2 = self.conv2_2(concatenate1)</span><br><span class="line">        concatenate2 = self.concatenate2([conv2_1, conv2_2])</span><br><span class="line"></span><br><span class="line">        maxpooling3 = self.maxpooling3(concatenate2)</span><br><span class="line">        conv3 = self.conv3(concatenate2)</span><br><span class="line">        concatenate3 = self.concatenate3([maxpooling3, conv3])</span><br><span class="line"></span><br><span class="line">        output = self.relu(concatenate3)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Inception_ResNet_A(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Inception_ResNet_A, self).__init__()</span><br><span class="line">        self.block1 = keras.Sequential()</span><br><span class="line">        self.block1.add(Conv_Bn_Relu(32, (1, 1)))</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential()</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(32, (1, 1)))</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(32, (3, 3)))</span><br><span class="line"></span><br><span class="line">        self.block3 = keras.Sequential()</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(32, (1, 1)))</span><br><span class="line">        self.block3.add(Conv_Bn_Relu(48, (3, 3)))</span><br><span class="line">        self.block3.add(Conv_Bn_Relu(64, (3, 3)))</span><br><span class="line"></span><br><span class="line">        self.concatenate = keras.layers.Concatenate()</span><br><span class="line"></span><br><span class="line">        self.conv = Conv_Bn_Relu(384, (1, 1))</span><br><span class="line"></span><br><span class="line">        self.relu = keras.layers.ReLU()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block1 = self.block1(inputs)</span><br><span class="line">        block2 = self.block2(inputs)</span><br><span class="line">        block3 = self.block3(inputs)</span><br><span class="line">        concatenate = self.concatenate([block1, block2, block3])</span><br><span class="line">        conv = self.conv(concatenate)</span><br><span class="line">        output = self.relu(conv + inputs)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Reduction_A(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Reduction_A, self).__init__()</span><br><span class="line">        self.block1 = keras.Sequential()</span><br><span class="line">        self.block1.add(Conv_Bn_Relu(384, (3, 3), (2, 2), padding=&apos;valid&apos;))</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential()</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(256, (1, 1)))</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(256, (3, 3)))</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(384, (3, 3), (2, 2), padding=&apos;valid&apos;))</span><br><span class="line"></span><br><span class="line">        self.block3 = keras.Sequential()</span><br><span class="line">        self.block3.add(keras.layers.MaxPool2D((3, 3), (2, 2), padding=&apos;valid&apos;))</span><br><span class="line"></span><br><span class="line">        self.concatenate = keras.layers.Concatenate()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block1 = self.block1(inputs)</span><br><span class="line">        block2 = self.block2(inputs)</span><br><span class="line">        block3 = self.block3(inputs)</span><br><span class="line">        output = self.concatenate([block1, block2, block3])</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Inception_ResNet_B(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Inception_ResNet_B, self).__init__()</span><br><span class="line">        self.block1 = keras.Sequential()</span><br><span class="line">        self.block1.add(Conv_Bn_Relu(192, (1, 1)))</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential()</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(128, (1, 1)))</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(160, (1, 7)))</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(192, (7, 1)))</span><br><span class="line"></span><br><span class="line">        self.concatenate = keras.layers.Concatenate()</span><br><span class="line"></span><br><span class="line">        self.conv = Conv_Bn_Relu(1152, (1, 1))</span><br><span class="line"></span><br><span class="line">        self.relu = keras.layers.ReLU()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block1 = self.block1(inputs)</span><br><span class="line">        block2 = self.block2(inputs)</span><br><span class="line">        concatenate = self.concatenate([block1, block2])</span><br><span class="line">        conv = self.conv(concatenate)</span><br><span class="line">        output = self.relu(conv + inputs)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Reduction_B(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Reduction_B, self).__init__()</span><br><span class="line">        self.block1 = keras.Sequential()</span><br><span class="line">        self.block1.add(Conv_Bn_Relu(256, (1, 1)))</span><br><span class="line">        self.block1.add(Conv_Bn_Relu(384, (3, 3), (2, 2), padding=&apos;valid&apos;))</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential()</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(256, (1, 1)))</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(288, (3, 3), (2, 2), padding=&apos;valid&apos;))</span><br><span class="line"></span><br><span class="line">        self.block3 = keras.Sequential()</span><br><span class="line">        self.block3.add(Conv_Bn_Relu(256, (1, 1)))</span><br><span class="line">        self.block3.add(Conv_Bn_Relu(288, (3, 3)))</span><br><span class="line">        self.block3.add(Conv_Bn_Relu(320, (3, 3), (2, 2), padding=&apos;valid&apos;))</span><br><span class="line"></span><br><span class="line">        self.block4 = keras.Sequential()</span><br><span class="line">        self.block4.add(keras.layers.MaxPool2D((3, 3), (2, 2), padding=&apos;valid&apos;))</span><br><span class="line"></span><br><span class="line">        self.concatenate = keras.layers.Concatenate()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block1 = self.block1(inputs)</span><br><span class="line">        block2 = self.block2(inputs)</span><br><span class="line">        block3 = self.block3(inputs)</span><br><span class="line">        block4 = self.block4(inputs)</span><br><span class="line">        output = self.concatenate([block1, block2, block3, block4])</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Inception_ResNet_C(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Inception_ResNet_C, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.block1 = keras.Sequential()</span><br><span class="line">        self.block1.add(Conv_Bn_Relu(192, (1, 1)))</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential()</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(192, (1, 1)))</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(224, (1, 7)))</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(256, (7, 1)))</span><br><span class="line"></span><br><span class="line">        self.concatenate = keras.layers.Concatenate()</span><br><span class="line"></span><br><span class="line">        self.conv = Conv_Bn_Relu(2144, (1, 1))</span><br><span class="line"></span><br><span class="line">        self.relu = keras.layers.ReLU()</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block1 = self.block1(inputs)</span><br><span class="line">        block2 = self.block2(inputs)</span><br><span class="line">        concatenate = self.concatenate([block1, block2])</span><br><span class="line">        conv = self.conv(concatenate)</span><br><span class="line">        output = self.relu(conv + inputs)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Inception_ResNet_v2(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Inception_ResNet_v2, self).__init__()</span><br><span class="line">        self.stem = keras.Sequential(name=&apos;Stem_Block&apos;)</span><br><span class="line">        self.stem.add(Stem_Block())</span><br><span class="line"></span><br><span class="line">        self.inception_resnet_a = keras.Sequential(name=&apos;Inception_ResNet_A&apos;)</span><br><span class="line">        for i in range(10):</span><br><span class="line">            self.inception_resnet_a.add(Inception_ResNet_A())</span><br><span class="line"></span><br><span class="line">        self.reduction_a = keras.Sequential(name=&apos;Reduction_A&apos;)</span><br><span class="line">        self.reduction_a.add(Reduction_A())</span><br><span class="line"></span><br><span class="line">        self.inception_resnet_b = keras.Sequential(name=&apos;Inception_ResNet_B&apos;)</span><br><span class="line">        for i in range(20):</span><br><span class="line">            self.inception_resnet_b.add(Inception_ResNet_B())</span><br><span class="line"></span><br><span class="line">        self.reduction_b = keras.Sequential(name=&apos;Reduction_B&apos;)</span><br><span class="line">        self.reduction_b.add(Reduction_B())</span><br><span class="line"></span><br><span class="line">        self.inception_resnet_c = keras.Sequential(name=&apos;Inception_ResNet_C&apos;)</span><br><span class="line">        for i in range(10):</span><br><span class="line">            self.inception_resnet_c.add(Inception_ResNet_C())</span><br><span class="line"></span><br><span class="line">        self.average_pooling = keras.layers.AveragePooling2D((8, 8), (8, 8), name=&apos;AveragePooling&apos;)</span><br><span class="line">        self.dropout = keras.layers.Dropout(0.2)</span><br><span class="line">        self.flatten = keras.layers.Flatten(name=&apos;Flatten&apos;)</span><br><span class="line">        self.dense = keras.layers.Dense(1000, activation=&apos;softmax&apos;, name=&apos;Dense&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        stem = self.stem(inputs)</span><br><span class="line"></span><br><span class="line">        inception_resnet_a = self.inception_resnet_a(stem)</span><br><span class="line">        reduction_a = self.reduction_a(inception_resnet_a)</span><br><span class="line"></span><br><span class="line">        inception_resnet_b = self.inception_resnet_b(reduction_a)</span><br><span class="line">        reduction_b = self.reduction_b(inception_resnet_b)</span><br><span class="line"></span><br><span class="line">        inception_resnet_c = self.inception_resnet_c(reduction_b)</span><br><span class="line"></span><br><span class="line">        average_pooling = self.average_pooling(inception_resnet_c)</span><br><span class="line">        dropout = self.dropout(average_pooling)</span><br><span class="line">        flatten = self.flatten(dropout)</span><br><span class="line">        output = self.dense(flatten)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    model = Inception_ResNet_v2()</span><br><span class="line">    model.build(input_shape=(None, 299, 299, 3))</span><br><span class="line">    model.summary()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/Feature_extraction/Inception-ResNet_V2_R.png" alt="Inception-ResNet_V2"></p><h1 id="Inception-ResNet-V2&#x5C0F;&#x7ED3;"><a href="#Inception-ResNet-V2&#x5C0F;&#x7ED3;" class="headerlink" title="Inception-ResNet-V2&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Inception-ResNet-V2&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;Inception-ResNet-V2&#x662F;&#x4E00;&#x79CD;&#x96C6;<strong>Inception-V3</strong>&#x548C;<strong>ResNet</strong>&#x6240;&#x957F;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;Inception-ResNet-V2&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x8FBE;&#x5230;61M&#xFF0C;&#x4F46;&#x662F;<strong>&#x7531;&#x4E8E;&#x5176;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x592A;&#x590D;&#x6742;&#xFF0C;&#x6BD4;Inception-V3&#x8981;&#x590D;&#x6742;&#x5F97;&#x591A;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x5B9E;&#x9645;&#x4E2D;&#x4E5F;&#x8F83;&#x5C11;&#x4F7F;&#x7528;&#x5176;&#x4F5C;&#x4E3A;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;</strong>&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Inception-ResNet-V2&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="特征提取网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>Inception-V3</title>
    <link href="https://USTCcoder.github.io/2020/03/10/feature_extraction%20Inception_V3/"/>
    <id>https://USTCcoder.github.io/2020/03/10/feature_extraction Inception_V3/</id>
    <published>2020-03-10T04:41:17.000Z</published>
    <updated>2020-05-09T09:06:54.240Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">Inception-V3</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>Inception-V3:</strong>&#x7531;<strong>&#x8C37;&#x6B4C;&#x516C;&#x53F8;2015&#x5E74;</strong>&#x63D0;&#x51FA;&#xFF0C;&#x521D;&#x59CB;&#x7248;&#x672C;&#x662F;GoogleNet&#xFF0C;&#x662F;<strong>2014&#x5E74;ILSVRC&#x7ADE;&#x8D5B;&#x7684;&#x7B2C;&#x4E00;&#x540D;</strong>&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x8F83;&#x4E3A;&#x590D;&#x6742;&#x7684;&#x56FE;&#x50CF;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x6A21;&#x578B;&#x3002;<br><a id="more"></a></p><p><img src="/images/Feature_extraction/Inception_V3.png" alt="Inception_V3"></p><h1 id="Inception-V3&#x7279;&#x70B9;"><a href="#Inception-V3&#x7279;&#x70B9;" class="headerlink" title="Inception-V3&#x7279;&#x70B9;"></a><font size="5" color="red">Inception-V3&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">&#x91C7;&#x7528;<strong>&#x4E0D;&#x540C;&#x5927;&#x5C0F;&#x7684;&#x5377;&#x79EF;&#x6838;</strong>&#xFF0C;&#x610F;&#x5473;&#x7740;<strong>&#x4E0D;&#x540C;&#x5927;&#x5C0F;&#x7684;&#x611F;&#x53D7;&#x91CE;</strong>&#xFF0C;&#x5F97;&#x5230;<strong>&#x4E0D;&#x540C;&#x5C3A;&#x5EA6;&#x7684;&#x7279;&#x5F81;</strong>&#xFF0C;&#x6700;&#x540E;&#x5C06;&#x4E0D;&#x540C;&#x5C3A;&#x5EA6;&#x7684;&#x7279;&#x5F81;&#x8FDB;&#x884C;<strong>&#x62FC;&#x63A5;&#x878D;&#x5408;</strong></font><br>&#x2003;&#x2003;<font size="3">&#x63D0;&#x51FA;<strong>&#x5377;&#x79EF;&#x5206;&#x89E3;</strong>&#x601D;&#x60F3;&#xFF0C;&#x5C06;<strong>&#x4E00;&#x4E2A;5x5&#x7684;&#x5377;&#x79EF;&#xFF0C;&#x5206;&#x89E3;&#x4E3A;&#x4E24;&#x4E2A;3x3&#x7684;&#x5377;&#x79EF;</strong>&#xFF0C;&#x800C;&#x4E14;&#x5C06;<strong>3x3&#x7684;&#x5377;&#x79EF;&#x5206;&#x89E3;&#x6210;&#x4E00;&#x4E2A;1x3&#x7684;&#x5377;&#x79EF;&#x548C;&#x4E00;&#x4E2A;3*1&#x7684;&#x5377;&#x79EF;</strong></font></p><h1 id="Spatial-Separable-Convolution"><a href="#Spatial-Separable-Convolution" class="headerlink" title="Spatial Separable Convolution"></a><font size="5" color="red">Spatial Separable Convolution</font></h1><p><img src="/images/deep_learning/spatial.png" alt="spatial"><br>&#x2003;&#x2003;<font size="3"><strong>Spatial Separable Convolution(&#x7A7A;&#x95F4;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)</strong>&#xFF1A;&#x5C06;3x3&#x7684;&#x5377;&#x79EF;&#x5206;&#x89E3;&#x4E3A;3x1&#x7684;&#x5377;&#x79EF;&#x6838;1x3&#x7684;&#x5377;&#x79EF;&#xFF0C;&#x5C06;7x7&#x7684;&#x5377;&#x79EF;&#x5206;&#x89E3;&#x4E3A;7x1&#x7684;&#x5377;&#x79EF;&#x6838;1x7&#x7684;&#x5377;&#x79EF;.&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;<strong>&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;</strong>&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;64x64x256&#x7684;&#x7279;&#x5F81;&#x56FE;&#xFF0C;&#x7ECF;&#x8FC7;7x7&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(256x7x7+1)=3211520&#xFF0C;&#x800C;&#x7A7A;&#x95F4;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x53C2;&#x6570;&#x91CF;&#x4E3A;2x256x(256x7x1+1)=918016&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;3.5&#x500D;&#x3002;</font></p><h1 id="Inception-V3&#x56FE;&#x50CF;&#x5206;&#x6790;"><a href="#Inception-V3&#x56FE;&#x50CF;&#x5206;&#x6790;" class="headerlink" title="Inception-V3&#x56FE;&#x50CF;&#x5206;&#x6790;"></a><font size="5" color="red">Inception-V3&#x56FE;&#x50CF;&#x5206;&#x6790;</font></h1><p><img src="/images/Feature_extraction/Inception_V3_A.png" alt="Inception_V3"></p><h1 id="TensorFlow2-0&#x5B9E;&#x73B0;"><a href="#TensorFlow2-0&#x5B9E;&#x73B0;" class="headerlink" title="TensorFlow2.0&#x5B9E;&#x73B0;"></a><font size="4">TensorFlow2.0&#x5B9E;&#x73B0;</font></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Conv_Bn_Relu(keras.Model):</span><br><span class="line">    def __init__(self, filters, kernel_size, strides=(1, 1), padding=&apos;same&apos;, name=&apos;Conv_Bn_Relu&apos;):</span><br><span class="line">        super(Conv_Bn_Relu, self).__init__()</span><br><span class="line">        self.block = keras.Sequential(name=name)</span><br><span class="line">        self.block.add(keras.layers.Conv2D(filters, kernel_size, strides, padding=padding))</span><br><span class="line">        self.block.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.block.add(keras.layers.ReLU())</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.block(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Pooling_Block1(keras.Model):</span><br><span class="line">    def __init__(self, name=&apos;Pooling_Block&apos;):</span><br><span class="line">        super(Pooling_Block1, self).__init__()</span><br><span class="line">        self.block1 = keras.Sequential(name=&apos;Pooling_Block1_1&apos;)</span><br><span class="line">        self.block1.add(keras.layers.MaxPooling2D((3, 3), (2, 2)))</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential(name=&apos;Pooling_Block1_2&apos;)</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(64, (1, 1)))</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(96, (3, 3)))</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(96, (3, 3), (2, 2), padding=&apos;valid&apos;))</span><br><span class="line"></span><br><span class="line">        self.block3 = keras.Sequential(name=&apos;Pooling_Block1_3&apos;)</span><br><span class="line">        self.block3.add(Conv_Bn_Relu(384, (3, 3), (2, 2), padding=&apos;valid&apos;))</span><br><span class="line"></span><br><span class="line">        self.concatenate = keras.layers.Concatenate(name=&apos;Pooling_Block1_Concatenate&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block1 = self.block1(inputs)</span><br><span class="line">        block2 = self.block2(inputs)</span><br><span class="line">        block3 = self.block3(inputs)</span><br><span class="line">        output = self.concatenate([block1, block2, block3])</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Pooling_Block2(keras.Model):</span><br><span class="line">    def __init__(self, name=&apos;Pooling_Block&apos;):</span><br><span class="line">        super(Pooling_Block2, self).__init__()</span><br><span class="line">        self.block1 = keras.Sequential(name=&apos;Pooling_Block2_1&apos;)</span><br><span class="line">        self.block1.add(keras.layers.MaxPooling2D((3, 3), (2, 2)))</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential(name=&apos;Pooling_Block2_2&apos;)</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(192, (1, 1)))</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(192, (1, 7)))</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(192, (7, 1)))</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(192, (3, 3), (2, 2), padding=&apos;valid&apos;))</span><br><span class="line"></span><br><span class="line">        self.block3 = keras.Sequential(name=&apos;Pooling_Block2_3&apos;)</span><br><span class="line">        self.block3.add(Conv_Bn_Relu(192, (1, 1)))</span><br><span class="line">        self.block3.add(Conv_Bn_Relu(320, (3, 3), (2, 2), padding=&apos;valid&apos;))</span><br><span class="line"></span><br><span class="line">        self.concatenate = keras.layers.Concatenate(name=&apos;Pooling_Block2_Concatenate&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block1 = self.block1(inputs)</span><br><span class="line">        block2 = self.block2(inputs)</span><br><span class="line">        block3 = self.block3(inputs)</span><br><span class="line">        output = self.concatenate([block1, block2, block3])</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Block1(keras.Model):</span><br><span class="line">    def __init__(self, filters, name=&apos;Conv_Block&apos;):</span><br><span class="line">        super(Block1, self).__init__()</span><br><span class="line">        self.block1 = keras.Sequential(name=&apos;Block1_1&apos;)</span><br><span class="line">        self.block1.add(keras.layers.AveragePooling2D((2, 2), (1, 1), padding=&apos;same&apos;))</span><br><span class="line">        self.block1.add(Conv_Bn_Relu(filters - 224, (1, 1)))</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential(name=&apos;Block1_2&apos;)</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(64, (1, 1)))</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(96, (3, 3)))</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(96, (3, 3)))</span><br><span class="line"></span><br><span class="line">        self.block3 = keras.Sequential(name=&apos;Block1_3&apos;)</span><br><span class="line">        self.block3.add(Conv_Bn_Relu(48, (1, 1)))</span><br><span class="line">        self.block3.add(Conv_Bn_Relu(64, (5, 5)))</span><br><span class="line"></span><br><span class="line">        self.block4 = keras.Sequential(name=&apos;Block1_4&apos;)</span><br><span class="line">        self.block4.add(Conv_Bn_Relu(64, (1, 1)))</span><br><span class="line"></span><br><span class="line">        self.concatenate = keras.layers.Concatenate(name=&apos;Block_1_Concatenate&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block1 = self.block1(inputs)</span><br><span class="line">        block2 = self.block2(inputs)</span><br><span class="line">        block3 = self.block3(inputs)</span><br><span class="line">        block4 = self.block4(inputs)</span><br><span class="line">        output = self.concatenate([block1, block2, block3, block4])</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Block2(keras.Model):</span><br><span class="line">    def __init__(self, name=&apos;Conv_Block&apos;):</span><br><span class="line">        super(Block2, self).__init__()</span><br><span class="line">        self.block1 = keras.Sequential(name=&apos;Block2_1&apos;)</span><br><span class="line">        self.block1.add(keras.layers.AveragePooling2D((2, 2), (1, 1), padding=&apos;same&apos;))</span><br><span class="line">        self.block1.add(Conv_Bn_Relu(192, (1, 1)))</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential(name=&apos;Block2_2&apos;)</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(128, (1, 1)))</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(128, (7, 1)))</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(128, (1, 7)))</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(128, (7, 1)))</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(192, (1, 7)))</span><br><span class="line"></span><br><span class="line">        self.block3 = keras.Sequential(name=&apos;Block2_3&apos;)</span><br><span class="line">        self.block3.add(Conv_Bn_Relu(128, (1, 1)))</span><br><span class="line">        self.block3.add(Conv_Bn_Relu(128, (7, 1)))</span><br><span class="line">        self.block3.add(Conv_Bn_Relu(192, (1, 7)))</span><br><span class="line"></span><br><span class="line">        self.block4 = keras.Sequential(name=&apos;Block2_4&apos;)</span><br><span class="line">        self.block4.add(Conv_Bn_Relu(192, (1, 1)))</span><br><span class="line"></span><br><span class="line">        self.concatenate = keras.layers.Concatenate(name=&apos;Block2_Concatenate&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block1 = self.block1(inputs)</span><br><span class="line">        block2 = self.block2(inputs)</span><br><span class="line">        block3 = self.block3(inputs)</span><br><span class="line">        block4 = self.block4(inputs)</span><br><span class="line">        output = self.concatenate([block1, block2, block3, block4])</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Block3(keras.Model):</span><br><span class="line">    def __init__(self, name=&apos;Conv_Block&apos;):</span><br><span class="line">        super(Block3, self).__init__()</span><br><span class="line">        self.block1 = keras.Sequential(name=&apos;Block3_1&apos;)</span><br><span class="line">        self.block1.add(keras.layers.AveragePooling2D((2, 2), (1, 1), padding=&apos;same&apos;))</span><br><span class="line">        self.block1.add(Conv_Bn_Relu(192, (1, 1)))</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential(name=&apos;Block3_2&apos;)</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(448, (1, 1)))</span><br><span class="line">        self.block2.add(Conv_Bn_Relu(384, (3, 3)))</span><br><span class="line"></span><br><span class="line">        self.conv_bn_relu2_1 = Conv_Bn_Relu(384, (1, 3), name=&apos;Block3_2_1Conv_Bn_Relu&apos;)</span><br><span class="line">        self.conv_bn_relu2_2 = Conv_Bn_Relu(384, (3, 1), name=&apos;Block3_2_2Conv_Bn_Relu&apos;)</span><br><span class="line"></span><br><span class="line">        self.concatenate2 = keras.layers.Concatenate(name=&apos;Block3_2_Concatenate&apos;)</span><br><span class="line"></span><br><span class="line">        self.block3 = keras.Sequential(name=&apos;Block3_3&apos;)</span><br><span class="line">        self.block3.add(Conv_Bn_Relu(384, (1, 1)))</span><br><span class="line"></span><br><span class="line">        self.conv_bn_relu3_1 = Conv_Bn_Relu(384, (1, 3), name=&apos;Block3_3_1Conv_Bn_Relu&apos;)</span><br><span class="line">        self.conv_bn_relu3_2 = Conv_Bn_Relu(384, (3, 1), name=&apos;Block3_3_2Conv_Bn_Relu&apos;)</span><br><span class="line"></span><br><span class="line">        self.concatenate3 = keras.layers.Concatenate(name=&apos;Block3_3_Concatenate&apos;)</span><br><span class="line"></span><br><span class="line">        self.block4 = keras.Sequential(name=&apos;Block3_4&apos;)</span><br><span class="line">        self.block4.add(Conv_Bn_Relu(320, (1, 1)))</span><br><span class="line"></span><br><span class="line">        self.concatenate = keras.layers.Concatenate(name=&apos;Block_3_Concatenate&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block1 = self.block1(inputs)</span><br><span class="line">        block2 = self.block2(inputs)</span><br><span class="line">        block3 = self.block3(inputs)</span><br><span class="line">        block4 = self.block4(inputs)</span><br><span class="line">        block2_1 = self.conv_bn_relu2_1(block2)</span><br><span class="line">        block2_2 = self.conv_bn_relu2_2(block2)</span><br><span class="line">        block2 = self.concatenate2([block2_1, block2_2])</span><br><span class="line">        block3_1 = self.conv_bn_relu3_1(block3)</span><br><span class="line">        block3_2 = self.conv_bn_relu3_2(block3)</span><br><span class="line">        block3 = self.concatenate3([block3_1, block3_2])</span><br><span class="line">        output = self.concatenate([block1, block2, block3, block4])</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Inception_v3(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Inception_v3, self).__init__()</span><br><span class="line">        self.conv_bn_relu1 = Conv_Bn_Relu(32, (3, 3), (2, 2), padding=&apos;valid&apos;, name=&apos;Conv_Bn_Relu1&apos;)</span><br><span class="line">        self.conv_bn_relu2 = Conv_Bn_Relu(32, (3, 3), padding=&apos;valid&apos;, name=&apos;Conv_Bn_Relu2&apos;)</span><br><span class="line">        self.conv_bn_relu3 = Conv_Bn_Relu(64, (3, 3), name=&apos;Conv_Bn_Relu3&apos;)</span><br><span class="line">        self.maxpooling1 = keras.layers.MaxPool2D((3, 3), (2, 2), name=&apos;MaxPooling1&apos;)</span><br><span class="line">        self.conv_bn_relu4 = Conv_Bn_Relu(80, (1, 1), name=&apos;Conv_Bn_Relu4&apos;)</span><br><span class="line">        self.conv_bn_relu5 = Conv_Bn_Relu(192, (3, 3), padding=&apos;valid&apos;, name=&apos;Conv_Bn_Relu5&apos;)</span><br><span class="line">        self.maxpooling2 = keras.layers.MaxPool2D((3, 3), (2, 2), name=&apos;MaxPooling2&apos;)</span><br><span class="line"></span><br><span class="line">        self.block1 = keras.Sequential(name=&apos;Block1&apos;)</span><br><span class="line">        self.block1.add(Block1(256))</span><br><span class="line">        self.block1.add(Block1(288))</span><br><span class="line">        self.block1.add(Block1(288))</span><br><span class="line">        self.block1.add(Pooling_Block1())</span><br><span class="line"></span><br><span class="line">        self.block2 = keras.Sequential(name=&apos;Block2&apos;)</span><br><span class="line">        self.block2.add(Block2())</span><br><span class="line">        self.block2.add(Block2())</span><br><span class="line">        self.block2.add(Block2())</span><br><span class="line">        self.block2.add(Block2())</span><br><span class="line">        self.block2.add(Pooling_Block2())</span><br><span class="line"></span><br><span class="line">        self.block3 = keras.Sequential(name=&apos;Block3&apos;)</span><br><span class="line">        self.block3.add(Block3())</span><br><span class="line">        self.block3.add(Block3())</span><br><span class="line"></span><br><span class="line">        self.global_average_pooling = keras.layers.GlobalAveragePooling2D(name=&apos;Global_AveragePooling&apos;)</span><br><span class="line">        self.dense = keras.layers.Dense(1000, activation=&apos;softmax&apos;, name=&apos;Dense&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        conv_bn_relu1 = self.conv_bn_relu1(inputs)</span><br><span class="line">        conv_bn_relu2 = self.conv_bn_relu2(conv_bn_relu1)</span><br><span class="line">        conv_bn_relu3 = self.conv_bn_relu3(conv_bn_relu2)</span><br><span class="line">        maxpooling1 = self.maxpooling1(conv_bn_relu3)</span><br><span class="line">        conv_bn_relu4 = self.conv_bn_relu4(maxpooling1)</span><br><span class="line">        conv_bn_relu5 = self.conv_bn_relu5(conv_bn_relu4)</span><br><span class="line">        maxpooling2 = self.maxpooling2(conv_bn_relu5)</span><br><span class="line"></span><br><span class="line">        block1 = self.block1(maxpooling2)</span><br><span class="line"></span><br><span class="line">        block2 = self.block2(block1)</span><br><span class="line"></span><br><span class="line">        block3 = self.block3(block2)</span><br><span class="line"></span><br><span class="line">        global_average_pooling = self.global_average_pooling(block3)</span><br><span class="line">        out_put = self.dense(global_average_pooling)</span><br><span class="line"></span><br><span class="line">        return out_put</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    model = Inception_v3()</span><br><span class="line">    model.build(input_shape=(None, 299, 299, 3))</span><br><span class="line">    model.summary()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/Feature_extraction/Inception_V3_R.png" alt="Inception_V3"></p><h1 id="Inception-V3&#x5C0F;&#x7ED3;"><a href="#Inception-V3&#x5C0F;&#x7ED3;" class="headerlink" title="Inception-V3&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Inception-V3&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;Inception-V3&#x662F;&#x4E00;&#x79CD;&#x590D;&#x6742;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x4E3A;22M&#xFF0C;<strong>&#x7531;&#x4E8E;&#x5176;&#x7ED3;&#x6784;&#x8FC7;&#x4E8E;&#x590D;&#x6742;&#xFF0C;&#x5F88;&#x5C11;&#x88AB;&#x5176;&#x4ED6;&#x7F51;&#x7EDC;&#x6240;&#x4F7F;&#x7528;</strong>&#xFF0C;&#x4F46;&#x662F;&#x5176;<strong>&#x4E0D;&#x540C;&#x611F;&#x53D7;&#x91CE;&#x548C;&#x5377;&#x79EF;&#x5206;&#x89E3;&#x7684;&#x601D;&#x60F3;&#x7ED9;&#x5176;&#x4ED6;&#x7F51;&#x7EDC;&#x63D0;&#x4F9B;&#x4E86;&#x601D;&#x8DEF;</strong>&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Inception-V3&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="特征提取网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>ResNet</title>
    <link href="https://USTCcoder.github.io/2020/03/09/feature_extraction%20ResNet/"/>
    <id>https://USTCcoder.github.io/2020/03/09/feature_extraction ResNet/</id>
    <published>2020-03-09T09:22:18.000Z</published>
    <updated>2020-05-08T00:42:00.732Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">ResNet</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>ResNet:</strong>&#x7531;<strong>&#x534E;&#x4EBA;&#x5B66;&#x8005;&#x4F55;&#x51EF;&#x660E;&#x5927;&#x795E;&#x4E8E;2015&#x5E74;&#x63D0;&#x51FA;</strong>&#xFF0C;&#x5176;&#x4E3B;&#x8981;&#x4F53;&#x73B0;&#x51FA;&#x4E86;&#x6B8B;&#x5DEE;&#x76F8;&#x8FDE;&#x7684;&#x4F18;&#x52BF;&#xFF0C;&#x6545;&#x7B80;&#x79F0;ResNet&#xFF0C;&#x662F;<strong>2015&#x5E74;ILSVRC&#x7ADE;&#x8D5B;&#x7684;&#x7B2C;&#x4E00;&#x540D;</strong>&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x597D;&#x7684;&#x56FE;&#x50CF;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x6A21;&#x578B;&#x3002;<br><a id="more"></a></p><p><img src="/images/Feature_extraction/ResNet.png" alt="ResNet"></p><h1 id="ResNet&#x7279;&#x70B9;"><a href="#ResNet&#x7279;&#x70B9;" class="headerlink" title="ResNet&#x7279;&#x70B9;"></a><font size="5" color="red">ResNet&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">&#x4F7F;&#x7528;<strong>&#x6B8B;&#x5DEE;&#x5757;&#x7ED3;&#x6784;</strong>&#xFF0C;&#x4F7F;&#x5F97;&#x7F51;&#x7EDC;&#x80FD;&#x591F;&#x66F4;&#x591A;&#x83B7;&#x53D6;&#x4E4B;&#x524D;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x5E76;&#x4E14;&#x4F7F;<strong>&#x5B66;&#x4E60;&#x7ED3;&#x679C;&#x5BF9;&#x4E8E;&#x6743;&#x91CD;&#x7684;&#x53D8;&#x5316;&#x66F4;&#x52A0;&#x654F;&#x611F;</strong></font><br>&#x2003;&#x2003;<font size="3">&#x4F7F;&#x7528;<strong>&#x74F6;&#x9888;&#x7ED3;&#x6784;</strong>&#xFF0C;&#x5148;&#x4F7F;&#x7528;1x1&#x7684;&#x5377;&#x79EF;&#x6838;&#x8FDB;&#x884C;&#x964D;&#x7EF4;&#xFF0C;&#x6700;&#x540E;&#x518D;&#x6B21;&#x4F7F;&#x7528;1x1&#x7684;&#x5377;&#x79EF;&#x6838;&#x5347;&#x7EF4;&#xFF0C;&#x53EF;&#x4EE5;&#x964D;&#x4F4E;&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;</font><br>&#x2003;&#x2003;<font size="3"><strong>Conv Block</strong>&#xFF1A;&#x4F5C;&#x7528;&#x662F;<strong>&#x6539;&#x53D8;&#x56FE;&#x50CF;&#x5927;&#x5C0F;</strong>&#xFF0C;&#x8F93;&#x5165;&#x548C;&#x8F93;&#x51FA;&#x7684;&#x5C3A;&#x5BF8;&#x4E0D;&#x540C;&#xFF0C;&#x56E0;&#x6B64;<strong>&#x65E0;&#x6CD5;&#x76F4;&#x63A5;&#x6B8B;&#x5DEE;&#x76F8;&#x8FDE;</strong>&#xFF0C;</font><br>&#x2003;&#x2003;<font size="3"><strong>Identity Block</strong>&#xFF1A;&#x4F5C;&#x7528;&#x662F;<strong>&#x589E;&#x52A0;&#x7F51;&#x7EDC;&#x6DF1;&#x5EA6;</strong>&#xFF0C;&#x8F93;&#x5165;&#x548C;&#x8F93;&#x51FA;&#x7684;&#x5C3A;&#x5BF8;&#x76F8;&#x540C;&#xFF0C;&#x53EF;&#x4EE5;<strong>&#x76F4;&#x63A5;&#x6B8B;&#x5DEE;&#x76F8;&#x8FDE;</strong></font></p><h1 id="&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;ResNet&#x7F51;&#x7EDC;&#x7ED3;&#x6784;"><a href="#&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;ResNet&#x7F51;&#x7EDC;&#x7ED3;&#x6784;" class="headerlink" title="&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;ResNet&#x7F51;&#x7EDC;&#x7ED3;&#x6784;"></a><font size="5" color="red">&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;ResNet&#x7F51;&#x7EDC;&#x7ED3;&#x6784;</font></h1><p><img src="/images/Feature_extraction/ResNet_C.png" alt="ResNet"></p><h1 id="ResNet50&#x56FE;&#x50CF;&#x5206;&#x6790;"><a href="#ResNet50&#x56FE;&#x50CF;&#x5206;&#x6790;" class="headerlink" title="ResNet50&#x56FE;&#x50CF;&#x5206;&#x6790;"></a><font size="5" color="red">ResNet50&#x56FE;&#x50CF;&#x5206;&#x6790;</font></h1><p><img src="/images/Feature_extraction/ResNet_A.png" alt="ResNet"></p><h1 id="TensorFlow2-0&#x5B9E;&#x73B0;"><a href="#TensorFlow2-0&#x5B9E;&#x73B0;" class="headerlink" title="TensorFlow2.0&#x5B9E;&#x73B0;"></a><font size="4">TensorFlow2.0&#x5B9E;&#x73B0;</font></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Block(keras.Model):</span><br><span class="line">    def __init__(self, filters, strides=(1, 1), name=&apos;Conv_Block&apos;, type=&apos;Conv_Block&apos;):</span><br><span class="line">        super(Block, self).__init__()</span><br><span class="line">        self.blocks = keras.Sequential(name=name)</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters // 4, (1, 1)))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU())</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters // 4, (3, 3), strides, padding=&apos;same&apos;))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.blocks.add(keras.layers.ReLU())</span><br><span class="line">        self.blocks.add(keras.layers.Conv2D(filters, (1, 1)))</span><br><span class="line">        self.blocks.add(keras.layers.BatchNormalization())</span><br><span class="line">        self.conv = keras.layers.Conv2D(filters, (1, 1), strides)</span><br><span class="line">        self.relu = keras.layers.ReLU()</span><br><span class="line">        self.type = type</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        blocks = self.blocks(inputs)</span><br><span class="line">        if self.type == &apos;Conv_Block&apos;:</span><br><span class="line">            inputs = self.conv(inputs)</span><br><span class="line">        blocks = self.relu(blocks + inputs)</span><br><span class="line">        return blocks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add_block(filters, strides=(1, 1), name=&apos;Block&apos;, times=1):</span><br><span class="line">    block = keras.Sequential(name=name)</span><br><span class="line">    block.add(Block(filters, strides))</span><br><span class="line">    for i in range(times - 1):</span><br><span class="line">        block.add(Block(filters, type=&apos;identity_block&apos;))</span><br><span class="line">    return block</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ResNet50(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(ResNet50, self).__init__()</span><br><span class="line">        self.zeropadding = keras.layers.ZeroPadding2D((3, 3), name=&apos;Zero_Padding&apos;)</span><br><span class="line">        self.conv1 = keras.layers.Conv2D(64, (7, 7), (2, 2), name=&apos;Conv2d&apos;)</span><br><span class="line">        self.bn1 = keras.layers.BatchNormalization(name=&apos;BatchNormalization&apos;)</span><br><span class="line">        self.relu1 = keras.layers.ReLU(name=&apos;Relu&apos;)</span><br><span class="line">        self.max_pooling = keras.layers.MaxPool2D((3, 3), (2, 2), padding=&apos;same&apos;, name=&apos;Max_Pooling&apos;)</span><br><span class="line">        self.block1 = add_block(256, name=&apos;Block1&apos;, times=3)</span><br><span class="line">        self.block2 = add_block(512, strides=(2, 2), name=&apos;Block2&apos;, times=4)</span><br><span class="line">        self.block3 = add_block(1024, strides=(2, 2), name=&apos;Block3&apos;, times=6)</span><br><span class="line">        self.block4 = add_block(2048, strides=(2, 2), name=&apos;Block4&apos;, times=3)</span><br><span class="line">        self.average_pooling = keras.layers.GlobalAveragePooling2D(name=&apos;Average_Pooling&apos;)</span><br><span class="line">        self.dense = keras.layers.Dense(1000, activation=&apos;softmax&apos;, name=&apos;Dense&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        zeropadding = self.zeropadding(inputs)</span><br><span class="line">        conv1 = self.conv1(zeropadding)</span><br><span class="line">        bn1 = self.bn1(conv1)</span><br><span class="line">        relu1 = self.relu1(bn1)</span><br><span class="line">        max_pooling = self.max_pooling(relu1)</span><br><span class="line">        block1 = self.block1(max_pooling)</span><br><span class="line">        block2 = self.block2(block1)</span><br><span class="line">        block3 = self.block3(block2)</span><br><span class="line">        block4 = self.block4(block3)</span><br><span class="line">        average_pooling = self.average_pooling(block4)</span><br><span class="line">        out_put = self.dense(average_pooling)</span><br><span class="line"></span><br><span class="line">        return out_put</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    model = ResNet50()</span><br><span class="line">    model.build(input_shape=(None, 224, 224, 3))</span><br><span class="line">    model.summary()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/Feature_extraction/ResNet_R.png" alt="ResNet"></p><h1 id="ResNet&#x5C0F;&#x7ED3;"><a href="#ResNet&#x5C0F;&#x7ED3;" class="headerlink" title="ResNet&#x5C0F;&#x7ED3;"></a><font size="5" color="red">ResNet&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;ResNet&#x662F;&#x4E00;&#x79CD;&#x975E;&#x5E38;&#x6709;&#x6548;&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#xFF0C;&#x7531;&#x4E8E;&#x51CF;&#x5C11;&#x4E86;Dense&#x5C42;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x56E0;&#x6B64;&#x53C2;&#x6570;&#x91CF;<strong>&#x76F8;&#x6BD4;&#x4E8E;VGG&#x5927;&#x5927;&#x51CF;&#x5C11;</strong>&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x53EA;&#x6709;25M&#xFF0C;&#x56E0;&#x6B64;&#x5B9E;&#x9645;&#x4EFB;&#x52A1;&#x7ECF;&#x5E38;&#x4F7F;&#x7528;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;ResNet&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="特征提取网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>VGG</title>
    <link href="https://USTCcoder.github.io/2020/03/08/feature_extraction%20VGG/"/>
    <id>https://USTCcoder.github.io/2020/03/08/feature_extraction VGG/</id>
    <published>2020-03-08T07:43:15.000Z</published>
    <updated>2020-05-08T00:47:50.180Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">VGG</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>VGG:</strong>&#x6765;&#x6E90;&#x4E8E;<strong>&#x725B;&#x6D25;&#x5927;&#x5B66;&#x89C6;&#x89C9;&#x51E0;&#x4F55;&#x7EC4;Visual Geometry Group</strong>&#xFF0C;&#x6545;&#x7B80;&#x79F0;VGG&#xFF0C;&#x662F;<strong>2014&#x5E74;ILSVRC&#x7ADE;&#x8D5B;&#x7684;&#x7B2C;&#x4E8C;&#x540D;</strong>&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x597D;&#x7684;&#x56FE;&#x50CF;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x6A21;&#x578B;&#x3002;<br><a id="more"></a></p><p><img src="/images/Feature_extraction/VGG.png" alt="VGG"></p><h1 id="VGG&#x7279;&#x70B9;"><a href="#VGG&#x7279;&#x70B9;" class="headerlink" title="VGG&#x7279;&#x70B9;"></a><font size="5" color="red">VGG&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">&#x5377;&#x79EF;&#x6838;&#xFF1A;VGG&#x5168;&#x7531;3x3&#x5C0F;&#x5377;&#x79EF;&#x6838;&#x6784;&#x6210;&#xFF0C;&#x6B65;&#x957F;&#x4E3A;1&#xFF0C;&#x586B;&#x5145;&#x65B9;&#x5F0F;&#x4E3A;same</font><br>&#x2003;&#x2003;<font size="3">&#x6C60;&#x5316;&#x6838;&#xFF1A;VGG&#x5168;&#x7531;2x2&#x6C60;&#x5316;&#x6838;&#x6784;&#x6210;&#xFF0C;&#x6B65;&#x957F;&#x4E3A;2</font><br>&#x2003;&#x2003;<font size="3">&#x7F51;&#x7EDC;&#x5C42;&#xFF1A;VGG&#x5177;&#x6709;&#x8F83;&#x6DF1;&#x7684;&#x7F51;&#x7EDC;&#x5C42;&#xFF0C;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x8C03;&#x6574;</font><br>&#x2003;&#x2003;<font size="3">&#x53C2;&#x6570;&#x91CF;&#xFF1A;VGG&#x5177;&#x6709;&#x8F83;&#x5927;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x4E3B;&#x8981;&#x6765;&#x6E90;&#x4E8E;Flatten&#x5C42;&#x540E;&#x9762;&#x7684;&#x5168;&#x8FDE;&#x63A5;&#x5C42;</font></p><h1 id="&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;VGG&#x7F51;&#x7EDC;&#x7ED3;&#x6784;"><a href="#&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;VGG&#x7F51;&#x7EDC;&#x7ED3;&#x6784;" class="headerlink" title="&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;VGG&#x7F51;&#x7EDC;&#x7ED3;&#x6784;"></a><font size="5" color="red">&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;VGG&#x7F51;&#x7EDC;&#x7ED3;&#x6784;</font></h1><p><img src="/images/Feature_extraction/VGG_C.png" alt="VGG"></p><h1 id="VGG16&#x56FE;&#x50CF;&#x5206;&#x6790;"><a href="#VGG16&#x56FE;&#x50CF;&#x5206;&#x6790;" class="headerlink" title="VGG16&#x56FE;&#x50CF;&#x5206;&#x6790;"></a><font size="5" color="red">VGG16&#x56FE;&#x50CF;&#x5206;&#x6790;</font></h1><p><img src="/images/Feature_extraction/VGG_A.png" alt="VGG"></p><h1 id="TensorFlow2-0&#x5B9E;&#x73B0;"><a href="#TensorFlow2-0&#x5B9E;&#x73B0;" class="headerlink" title="TensorFlow2.0&#x5B9E;&#x73B0;"></a><font size="4">TensorFlow2.0&#x5B9E;&#x73B0;</font></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import tensorflow.keras as keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Convs(keras.Model):</span><br><span class="line">    def __init__(self, times, filters, name):</span><br><span class="line">        super(Convs, self).__init__()</span><br><span class="line">        self.blocks = keras.Sequential(name=name)</span><br><span class="line"></span><br><span class="line">        for i in range(times):</span><br><span class="line">            self.blocks.add(keras.layers.Conv2D(filters, (3, 3), (1, 1), padding=&apos;same&apos;, activation=&apos;relu&apos;, name=name + &apos;_con&apos; + str(i + 1)))</span><br><span class="line">        self.blocks.add(keras.layers.MaxPool2D(name=name + &apos;_maxpool&apos;))</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line"></span><br><span class="line">        return self.blocks(inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class VGG16(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(VGG16, self).__init__()</span><br><span class="line">        times = [2, 2, 3, 3, 5]</span><br><span class="line">        filters = [64, 128, 256, 512, 512]</span><br><span class="line">        self.blocks = keras.Sequential(name=&apos;Conv_block&apos;)</span><br><span class="line">        for i in range(len(times)):</span><br><span class="line">            self.blocks.add(Convs(times=times[i], filters=filters[i], name=&apos;block1&apos;))</span><br><span class="line">        self.flatten = keras.layers.Flatten(name=&apos;flatten&apos;)</span><br><span class="line">        self.dense1 = keras.layers.Dense(4096, activation=&apos;relu&apos;, name=&apos;dense_1&apos;)</span><br><span class="line">        self.dense2 = keras.layers.Dense(4096, activation=&apos;relu&apos;, name=&apos;dense_2&apos;)</span><br><span class="line">        self.dense3 = keras.layers.Dense(1000, activation=&apos;softmax&apos;, name=&apos;dense_3&apos;)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None, mask=None):</span><br><span class="line">        block = self.blocks(inputs)</span><br><span class="line">        flatten = self.flatten(block)</span><br><span class="line">        dense1 = self.dense1(flatten)</span><br><span class="line">        dense2 = self.dense2(dense1)</span><br><span class="line">        output = self.dense3(dense2)</span><br><span class="line"></span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    model = VGG16()</span><br><span class="line">    model.build(input_shape=(None, 224, 224, 3))</span><br><span class="line">    model.summary()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/Feature_extraction/VGG_R.png" alt="VGG"></p><h1 id="VGG&#x5C0F;&#x7ED3;"><a href="#VGG&#x5C0F;&#x7ED3;" class="headerlink" title="VGG&#x5C0F;&#x7ED3;"></a><font size="5" color="red">VGG&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;VGG&#x662F;<strong>&#x6700;&#x7B80;&#x5355;&#x7684;&#x4E00;&#x79CD;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;</strong>&#xFF0C;&#x4E5F;&#x662F;&#x4E00;&#x79CD;<strong>&#x975E;&#x5E38;&#x6709;&#x6548;&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x6A21;&#x578B;</strong>&#x3002;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;VGG16&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x8FBE;&#x5230;143M&#xFF0C;<strong>&#x56E0;&#x4E3A;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x65F6;&#x4E0D;&#x9700;&#x8981;&#x540E;&#x9762;&#x7684;Dense&#x5C42;&#xFF0C;&#x53EF;&#x4EE5;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x89C4;&#x6A21;</strong>&#x3002;&#x56E0;&#x6B64;&#x5B9E;&#x9645;&#x4EFB;&#x52A1;&#x6240;&#x4F7F;&#x7528;&#xFF0C;&#x5982;<strong>&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x7B97;&#x6CD5;SSD&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x5C31;&#x662F;VGG</strong>&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;VGG&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="特征提取网络" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux(操作系统)</title>
    <link href="https://USTCcoder.github.io/2019/09/23/skill%20Linux/"/>
    <id>https://USTCcoder.github.io/2019/09/23/skill Linux/</id>
    <published>2019-09-23T00:10:40.000Z</published>
    <updated>2019-09-25T08:22:16.932Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">Linux</font></strong></center><p></p><h1 id="Linux&#x4ECB;&#x7ECD;"><a href="#Linux&#x4ECB;&#x7ECD;" class="headerlink" title="Linux&#x4ECB;&#x7ECD;"></a><font size="5" color="red">Linux&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>Linux:</strong>&#x5728;1991&#x5E74;10&#x6708;&#x88AB;<strong>Linus Torvalds(&#x6797;&#x7EB3;&#x65AF;&#xB7;&#x6258;&#x74E6;&#x5179;)</strong>&#x521B;&#x5EFA;&#xFF0C;&#x5E76;&#x4E8E;<strong>1994&#x5E74;&#x53D1;&#x5E03;&#x4E86;Linux-v1.0</strong>&#x3002;&#x662F;&#x4E00;&#x5957;<strong>&#x514D;&#x8D39;&#x4F7F;&#x7528;</strong>&#x548C;<strong>&#x81EA;&#x7531;&#x4F20;&#x64AD;</strong>&#x7684;<strong>&#x7C7B;Unix</strong>&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x57FA;&#x4E8E;POSIX&#x548C;Unix&#x7684;&#x591A;&#x7528;&#x6237;&#x3001;&#x591A;&#x4EFB;&#x52A1;&#x3001;&#x652F;&#x6301;&#x591A;&#x7EBF;&#x7A0B;&#x548C;&#x591A;CPU&#x7684;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x3002;<br><a id="more"></a></p><p><img src="/images/SKILL/linux1.jpg" alt="1"></p><h1 id="Linux&#x7279;&#x70B9;"><a href="#Linux&#x7279;&#x70B9;" class="headerlink" title="Linux&#x7279;&#x70B9;"></a><font size="5" color="red">Linux&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">Linux&#x662F;&#x4E00;&#x6B3E;&#x5B8C;&#x5168;&#x514D;&#x8D39;&#x7684;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#xFF0C;&#x7528;&#x6237;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5404;&#x79CD;&#x6E20;&#x9053;&#x4E0B;&#x8F7D;&#x4F7F;&#x7528;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">Linux&#x662F;&#x4E00;&#x6B3E;&#x5B8C;&#x5168;&#x5F00;&#x6E90;&#x7684;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#xFF0C;&#x7528;&#x6237;&#x53EF;&#x4EE5;&#x4EFB;&#x610F;&#x4FEE;&#x6539;&#x5176;&#x6E90;&#x4EE3;&#x7801;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">Linux&#x652F;&#x6301;&#x591A;&#x7528;&#x6237;&#xFF0C;&#x591A;&#x4EFB;&#x52A1;&#x7684;&#x4F7F;&#x7528;&#x65B9;&#x5F0F;&#xFF0C;&#x5BF9;&#x4E0D;&#x540C;&#x7684;&#x7528;&#x6237;&#x6709;&#x7740;&#x4E0D;&#x540C;&#x7684;&#x6743;&#x5229;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">Linux&#x5177;&#x6709;&#x826F;&#x597D;&#x7684;&#x754C;&#x9762;&#xFF0C;&#x540C;&#x65F6;&#x5177;&#x6709;&#x5B57;&#x7B26;&#x754C;&#x9762;&#x548C;&#x56FE;&#x5F62;&#x754C;&#x9762;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">Linux&#x652F;&#x6301;&#x591A;&#x5E73;&#x53F0;&#xFF0C;&#x53EF;&#x4EE5;&#x8FD0;&#x884C;&#x5728;&#x591A;&#x79CD;&#x786C;&#x4EF6;&#x5E73;&#x53F0;&#x4E0A;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">Linux&#x5185;&#x6838;&#x9AD8;&#x6548;&#x7A33;&#x5B9A;&#xFF0C;&#x53EF;&#x4F7F;&#x7528;&#x6237;&#x65B9;&#x4FBF;&#x5730;&#x5EFA;&#x7ACB;&#x9632;&#x706B;&#x5899;&#xFF0C;&#x670D;&#x52A1;&#x5668;&#x3002;</font></p><h1 id="Linux&#x6CE8;&#x610F;&#x4E8B;&#x9879;"><a href="#Linux&#x6CE8;&#x610F;&#x4E8B;&#x9879;" class="headerlink" title="Linux&#x6CE8;&#x610F;&#x4E8B;&#x9879;"></a><font size="5" color="red">Linux&#x6CE8;&#x610F;&#x4E8B;&#x9879;</font></h1><p>&#x2003;&#x2003;<font size="3">Linux&#x4E25;&#x683C;&#x533A;&#x5206;&#x5927;&#x5C0F;&#x5199;&#xFF0C;&#x5927;&#x5C0F;&#x5199;&#x4E0D;&#x540C;&#xFF0C;&#x547D;&#x4EE4;&#x4E0D;&#x540C;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">Linux&#x4E2D;&#x6240;&#x6709;&#x5185;&#x5BB9;&#x4EE5;&#x6587;&#x4EF6;&#x5F62;&#x5F0F;&#x4FDD;&#x5B58;&#xFF0C;&#x5305;&#x62EC;&#x786C;&#x4EF6;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">Linux&#x548C;Windows&#x4E0D;&#x540C;&#xFF0C;&#x4E0D;&#x9760;&#x6269;&#x5C55;&#x540D;&#x6765;&#x533A;&#x5206;&#x6587;&#x4EF6;&#x7C7B;&#x578B;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">Linux&#x6240;&#x6709;&#x7684;&#x8BBE;&#x5907;&#x90FD;&#x9700;&#x8981;&#x5148;&#x6302;&#x8F7D;&#x4E4B;&#x540E;&#x624D;&#x80FD;&#x4F7F;&#x7528;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">Windows&#x4E0B;&#x7684;&#x7A0B;&#x5E8F;&#x4E0D;&#x80FD;&#x76F4;&#x63A5;&#x5728;Linux&#x4E2D;&#x5B89;&#x88C5;&#x8FD0;&#x884C;&#x3002;</font></p><h1 id="Linux&#x5E38;&#x7528;&#x547D;&#x4EE4;"><a href="#Linux&#x5E38;&#x7528;&#x547D;&#x4EE4;" class="headerlink" title="Linux&#x5E38;&#x7528;&#x547D;&#x4EE4;"></a><font size="5" color="red">Linux&#x5E38;&#x7528;&#x547D;&#x4EE4;</font></h1><p>&#x2003;&#x2003;<font size="3">&#x6B64;&#x547D;&#x4EE4;&#x90FD;&#x662F;&#x8FD0;&#x884C;&#x5728;Ubuntu&#x7CFB;&#x7EDF;&#x4E2D;&#xFF0C;&#x4E0D;&#x540C;&#x7684;Linux&#x7CFB;&#x5217;&#xFF0C;&#x5982;Debian&#x7CFB;&#x5217;&#x548C;Redhat&#x547D;&#x4EE4;&#x5927;&#x540C;&#x5C0F;&#x5F02;&#x3002;</font></p><h2 id="&#x663E;&#x793A;&#x76EE;&#x5F55;&#x6587;&#x4EF6;"><a href="#&#x663E;&#x793A;&#x76EE;&#x5F55;&#x6587;&#x4EF6;" class="headerlink" title="&#x663E;&#x793A;&#x76EE;&#x5F55;&#x6587;&#x4EF6;"></a><font size="4">&#x663E;&#x793A;&#x76EE;&#x5F55;&#x6587;&#x4EF6;</font></h2><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>ls -a</td><td>&#x663E;&#x793A;&#x6240;&#x6709;&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x5305;&#x62EC;&#x9690;&#x542B;&#x6587;&#x4EF6;(&#x4EE5;.&#x5F00;&#x5934;)</td></tr><tr><td>ls -l</td><td>&#x663E;&#x793A;&#x6587;&#x4EF6;&#x7684;&#x8BE6;&#x7EC6;&#x4FE1;&#x606F;&#xFF0C;&#x4E0D;&#x5305;&#x62EC;&#x9690;&#x542B;&#x6587;&#x4EF6;</td></tr><tr><td>ls -h</td><td>&#x4EE5;&#x4EBA;&#x6027;&#x5316;&#x5F62;&#x5F0F;&#x663E;&#x793A;&#x6587;&#x4EF6;&#xFF0C;&#x4E0D;&#x5305;&#x62EC;&#x9690;&#x542B;&#x6587;&#x4EF6;</td></tr><tr><td>ls -i</td><td>&#x67E5;&#x770B;&#x6587;&#x4EF6;&#x7684;i&#x7ED3;&#x70B9;&#xFF0C;&#x4E0D;&#x5305;&#x62EC;&#x9690;&#x542B;&#x6587;&#x4EF6;</td></tr></tbody></table><p><img src="/images/SKILL/linux1.png" alt="1"></p><p>&#x2003;&#x2003;<font size="4" color="red">&#x6587;&#x4EF6;&#x4FE1;&#x606F;&#x5B57;&#x6BB5;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E00;&#x9879;&#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x6BCD;&#xFF1A;&#x6587;&#x4EF6;&#x7684;&#x7C7B;&#x578B;&#xFF0C;-&#x4EE3;&#x8868;&#x4E8C;&#x8FDB;&#x5236;&#x6587;&#x4EF6;&#xFF0C;d&#x4EE3;&#x8868;&#x76EE;&#x5F55;&#xFF0C;l&#x4EE3;&#x8868;&#x8F6F;&#x8FDE;&#x63A5;&#x6587;&#x4EF6;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E00;&#x9879;&#x7B2C;&#x4E8C;&#x4E2A;&#x5B57;&#x6BCD;&#x5230;&#x7B2C;&#x56DB;&#x4E2A;&#x5B57;&#x6BCD;&#xFF1A;&#x6587;&#x4EF6;&#x6240;&#x6709;&#x8005;&#x53EF;&#x5BF9;&#x6587;&#x4EF6;&#x7684;&#x64CD;&#x4F5C;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E00;&#x9879;&#x7B2C;&#x4E94;&#x4E2A;&#x5B57;&#x6BCD;&#x5230;&#x7B2C;&#x4E03;&#x4E2A;&#x5B57;&#x6BCD;&#xFF1A;&#x7EC4;&#x5185;&#x6210;&#x5458;&#x53EF;&#x5BF9;&#x6587;&#x4EF6;&#x7684;&#x64CD;&#x4F5C;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E00;&#x9879;&#x7B2C;&#x516B;&#x4E2A;&#x5B57;&#x6BCD;&#x5230;&#x7B2C;&#x5341;&#x4E2A;&#x5B57;&#x6BCD;&#xFF1A;&#x5176;&#x4ED6;&#x7528;&#x6237;&#x53EF;&#x5BF9;&#x6587;&#x4EF6;&#x7684;&#x64CD;&#x4F5C;</font><br>&#x2003;&#x2003;<font size="3">&#x4E09;&#x4E2A;&#x5B57;&#x6BCD;&#x4E3A;&#x4E00;&#x7EC4;&#xFF0C;&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#x5206;&#x522B;&#x662F;&#x8BFB;(r)&#xFF0C;&#x5199;(w)&#xFF0C;&#x6267;&#x884C;(x)</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E8C;&#x9879;&#xFF1A;&#x6587;&#x4EF6;&#x786C;&#x94FE;&#x63A5;&#x6570;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E09;&#x9879;&#xFF1A;&#x6587;&#x4EF6;&#x7684;&#x6240;&#x6709;&#x8005;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x56DB;&#x9879;&#xFF1A;&#x6587;&#x4EF6;&#x7684;&#x6240;&#x5C5E;&#x7EC4;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E94;&#x9879;&#xFF1A;&#x6587;&#x4EF6;&#x6240;&#x5360;&#x7528;&#x7684;&#x5B57;&#x8282;&#x7A7A;&#x95F4;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x516D;&#x9879;&#xFF1A;&#x6587;&#x4EF6;&#x6700;&#x8FD1;&#x7684;&#x8BBF;&#x95EE;&#x65F6;&#x95F4;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E03;&#x9879;&#xFF1A;&#x6587;&#x4EF6;&#x540D;</font></p><h2 id="&#x76EE;&#x5F55;&#x5904;&#x7406;&#x547D;&#x4EE4;"><a href="#&#x76EE;&#x5F55;&#x5904;&#x7406;&#x547D;&#x4EE4;" class="headerlink" title="&#x76EE;&#x5F55;&#x5904;&#x7406;&#x547D;&#x4EE4;"></a><font size="4">&#x76EE;&#x5F55;&#x5904;&#x7406;&#x547D;&#x4EE4;</font></h2><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>mkdir -p dicname</td><td>&#x9012;&#x5F52;&#x521B;&#x5EFA;&#x540D;&#x4E3A;dicname&#x7684;&#x6587;&#x4EF6;&#x5939;</td></tr><tr><td>mkdir dicname</td><td>&#x521B;&#x5EFA;&#x540D;&#x4E3A;dicname&#x7684;&#x6587;&#x4EF6;&#x5939;</td></tr><tr><td>cd dicname</td><td>&#x5207;&#x6362;&#x76EE;&#x5F55;</td></tr><tr><td>cd ..</td><td>&#x8FD4;&#x56DE;&#x4E0A;&#x4E00;&#x7EA7;&#x76EE;&#x5F55;</td></tr><tr><td>pwd</td><td>&#x663E;&#x793A;&#x5F53;&#x524D;&#x76EE;&#x5F55;</td></tr><tr><td>rmdir dicname</td><td>&#x5220;&#x9664;&#x7A7A;&#x76EE;&#x5F55;</td></tr><tr><td>cp old new</td><td>&#x590D;&#x5236;&#x6587;&#x4EF6;</td></tr><tr><td>cp -r old new</td><td>&#x590D;&#x5236;&#x76EE;&#x5F55;</td></tr><tr><td>cp -p old new</td><td>&#x4FDD;&#x7559;&#x5C5E;&#x6027;&#x590D;&#x5236;</td></tr><tr><td>mv old new</td><td>&#x526A;&#x5207;&#x6587;&#x4EF6;</td></tr><tr><td>rm filename</td><td>&#x5220;&#x9664;&#x6587;&#x4EF6;</td></tr><tr><td>rm -r dicname</td><td>&#x5220;&#x9664;&#x76EE;&#x5F55;</td></tr><tr><td>rm -f</td><td>&#x5F3A;&#x5236;&#x6267;&#x884C;</td></tr></tbody></table><p><img src="/images/SKILL/linux2.png" alt="2"></p><h2 id="&#x6587;&#x4EF6;&#x5904;&#x7406;&#x547D;&#x4EE4;"><a href="#&#x6587;&#x4EF6;&#x5904;&#x7406;&#x547D;&#x4EE4;" class="headerlink" title="&#x6587;&#x4EF6;&#x5904;&#x7406;&#x547D;&#x4EE4;"></a><font size="4">&#x6587;&#x4EF6;&#x5904;&#x7406;&#x547D;&#x4EE4;</font></h2><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>touch filename</td><td>&#x521B;&#x5EFA;&#x540D;&#x4E3A;filename&#x7684;&#x7A7A;&#x6587;&#x4EF6;</td></tr><tr><td>cat filename</td><td>&#x663E;&#x793A;filename&#x6587;&#x4EF6;&#x5185;&#x5BB9;</td></tr><tr><td>cat -n filename</td><td>&#x663E;&#x793A;filename&#x6587;&#x4EF6;&#x5185;&#x5BB9;&#xFF0C;&#x5E76;&#x663E;&#x793A;&#x884C;&#x53F7;</td></tr><tr><td>tac</td><td>&#x53CD;&#x5411;&#x663E;&#x793A;&#x6587;&#x4EF6;&#x5185;&#x5BB9;</td></tr><tr><td>less</td><td>&#x5206;&#x9875;&#x663E;&#x793A;&#x6587;&#x4EF6;&#x5185;&#x5BB9;(pageup&#x548C;pagedown)</td></tr><tr><td>head -n m</td><td>&#x663E;&#x793A;&#x6587;&#x4EF6;&#x524D;m&#x884C;</td></tr><tr><td>tail -n m</td><td>&#x663E;&#x793A;&#x6587;&#x4EF6;&#x540E;m&#x884C;</td></tr></tbody></table><p><img src="/images/SKILL/linux4.png" alt="4"></p><h2 id="&#x94FE;&#x63A5;&#x547D;&#x4EE4;"><a href="#&#x94FE;&#x63A5;&#x547D;&#x4EE4;" class="headerlink" title="&#x94FE;&#x63A5;&#x547D;&#x4EE4;"></a><font size="4">&#x94FE;&#x63A5;&#x547D;&#x4EE4;</font></h2><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>ln filename hardlink</td><td>&#x751F;&#x6210;&#x94FE;&#x63A5;&#x5230;filename&#x7684;&#x786C;&#x94FE;&#x63A5;</td></tr><tr><td>ln -s filename softlink</td><td>&#x751F;&#x6210;&#x94FE;&#x63A5;&#x5230;filename&#x7684;&#x8F6F;&#x94FE;&#x63A5;</td></tr></tbody></table><p>&#x2003;&#x2003;<font size="4" color="red">&#x786C;&#x94FE;&#x63A5;</font><br>&#x2003;&#x2003;<font size="3">&#x786C;&#x94FE;&#x63A5;&#x9664;&#x4E86;&#x6587;&#x4EF6;&#x540D;&#x6240;&#x5728;&#x5730;&#xFF0C;&#x5176;&#x4F59;&#x4FE1;&#x606F;&#x90FD;&#x76F8;&#x540C;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x786C;&#x94FE;&#x63A5;&#x540E;&#xFF0C;&#x6587;&#x4EF6;&#x4FE1;&#x606F;&#x4E2D;&#x7684;&#x94FE;&#x63A5;&#x6570;&#x4F1A;&#x52A0;1&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x786C;&#x94FE;&#x63A5;&#x6587;&#x4EF6;&#x7684;i&#x8282;&#x70B9;&#x548C;&#x6E90;&#x6587;&#x4EF6;&#x76F8;&#x540C;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x786C;&#x94FE;&#x63A5;&#x4E0D;&#x80FD;&#x8DE8;&#x5206;&#x533A;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x786C;&#x94FE;&#x63A5;&#x4E0D;&#x80FD;&#x9488;&#x5BF9;&#x76EE;&#x5F55;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x6E90;&#x6587;&#x4EF6;&#x4E22;&#x5931;&#xFF0C;&#x4ECD;&#x7136;&#x53EF;&#x4EE5;&#x8BBF;&#x95EE;&#x786C;&#x94FE;&#x63A5;&#x3002;</font></p><p>&#x2003;&#x2003;<font size="4" color="red">&#x8F6F;&#x94FE;&#x63A5;</font><br>&#x2003;&#x2003;<font size="3">&#x8F6F;&#x94FE;&#x63A5;&#x7C7B;&#x4F3C;&#x4E8E;Windows&#x4E2D;&#x7684;&#x5FEB;&#x6377;&#x65B9;&#x5F0F;&#xFF0C;&#x6709;&#x7BAD;&#x5934;&#x6307;&#x5411;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x8F6F;&#x94FE;&#x63A5;&#x540E;&#xFF0C;&#x6587;&#x4EF6;&#x4FE1;&#x606F;&#x4E2D;&#x7684;&#x94FE;&#x63A5;&#x6570;&#x4E0D;&#x53D8;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x8F6F;&#x94FE;&#x63A5;&#x6587;&#x4EF6;&#x7684;i&#x8282;&#x70B9;&#x548C;&#x6E90;&#x6587;&#x4EF6;&#x4E0D;&#x540C;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x8F6F;&#x94FE;&#x63A5;&#x53EF;&#x4EE5;&#x8DE8;&#x5206;&#x533A;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x8F6F;&#x94FE;&#x63A5;&#x53EF;&#x4EE5;&#x9488;&#x5BF9;&#x76EE;&#x5F55;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x6E90;&#x6587;&#x4EF6;&#x4E22;&#x5931;&#xFF0C;&#x4E0D;&#x80FD;&#x8BBF;&#x95EE;&#x8F6F;&#x94FE;&#x63A5;&#x3002;</font></p><p><img src="/images/SKILL/linux3.png" alt="3"></p><h2 id="&#x6743;&#x9650;&#x7BA1;&#x7406;&#x547D;&#x4EE4;"><a href="#&#x6743;&#x9650;&#x7BA1;&#x7406;&#x547D;&#x4EE4;" class="headerlink" title="&#x6743;&#x9650;&#x7BA1;&#x7406;&#x547D;&#x4EE4;"></a><font size="4">&#x6743;&#x9650;&#x7BA1;&#x7406;&#x547D;&#x4EE4;</font></h2><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>chmod op filename</td><td>&#x4FEE;&#x6539;filename&#x6587;&#x4EF6;&#x7684;&#x6743;&#x9650;</td></tr><tr><td>chmod -R op dicname</td><td>&#x4FEE;&#x6539;dicname&#x76EE;&#x5F55;&#x4E0B;&#x6240;&#x6709;&#x6587;&#x4EF6;&#x7684;&#x6743;&#x9650;</td></tr><tr><td>chown own filename_or_dicname</td><td>&#x4FEE;&#x6539;&#x6587;&#x4EF6;&#x6216;&#x76EE;&#x5F55;&#x7684;&#x6240;&#x6709;&#x8005;</td></tr><tr><td>chgrp grp filename_or_dicname</td><td>&#x4FEE;&#x6539;&#x6587;&#x4EF6;&#x6216;&#x76EE;&#x5F55;&#x7684;&#x6240;&#x5C5E;&#x7EC4;</td></tr><tr><td>umask</td><td>&#x67E5;&#x770B;&#x5F53;&#x524D;&#x7528;&#x6237;&#x65B0;&#x5EFA;&#x6587;&#x4EF6;&#x7684;&#x7F3A;&#x7701;&#x6743;&#x9650;</td></tr></tbody></table><p>&#x2003;&#x2003;<font size="4" color="red">&#x6587;&#x4EF6;&#x6743;&#x9650;</font><br>&#x2003;&#x2003;<font size="3">r&#xFF1A;&#x8BFB;&#x6743;&#x9650;&#xFF0C;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x6587;&#x4EF6;&#x5185;&#x5BB9;&#xFF0C;&#x5982;cat, tac, less, head, tail&#x7B49;</font><br>&#x2003;&#x2003;<font size="3">w&#xFF1A;&#x5199;&#x6743;&#x9650;&#xFF0C;&#x53EF;&#x4EE5;&#x4FEE;&#x6539;&#x6587;&#x4EF6;&#x5185;&#x5BB9;&#xFF0C;&#x5982;vi, vim&#x7B49;</font><br>&#x2003;&#x2003;<font size="3">x&#xFF1A;&#x6267;&#x884C;&#x6743;&#x9650;&#xFF0C;&#x53EF;&#x4EE5;&#x6267;&#x884C;&#x6587;&#x4EF6;&#xFF0C;&#x5982;script, command&#x7B49;</font></p><p>&#x2003;&#x2003;<font size="4" color="red">&#x76EE;&#x5F55;&#x6743;&#x9650;</font><br>&#x2003;&#x2003;<font size="3">r&#xFF1A;&#x8BFB;&#x6743;&#x9650;&#xFF0C;&#x53EF;&#x4EE5;&#x5217;&#x51FA;&#x76EE;&#x5F55;&#x5185;&#x5BB9;&#xFF0C;&#x5982;ls&#x7B49;</font><br>&#x2003;&#x2003;<font size="3">w&#xFF1A;&#x5199;&#x6743;&#x9650;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x76EE;&#x5F55;&#x4E2D;&#x521B;&#x5EFA;&#x5220;&#x9664;&#x6587;&#x4EF6;&#xFF0C;&#x5982;touch, mkdir, rmdir, rm&#x7B49;</font><br>&#x2003;&#x2003;<font size="3">x&#xFF1A;&#x6267;&#x884C;&#x6743;&#x9650;&#xFF0C;&#x53EF;&#x4EE5;&#x8FDB;&#x5165;&#x76EE;&#x5F55;&#xFF0C;&#x5982;cd&#x7B49;</font></p><p>&#x2003;&#x2003;<font size="4" color="red">&#x4FEE;&#x6539;&#x6743;&#x9650;&#x4E24;&#x79CD;&#x64CD;&#x4F5C;</font><br>&#x2003;&#x2003;<font size="3">u/g/o/a +/-/= r/w/x&#x5BF9;&#x6240;&#x6709;&#x8005;/&#x6240;&#x5C5E;&#x7EC4;/&#x5176;&#x4ED6;&#x7528;&#x6237;/&#x6240;&#x6709;&#x4EBA; &#x52A0;/&#x51CF;/&#x8D4B;&#x503C; &#x8BFB;/&#x5199;/&#x6267;&#x884C;&#x6743;&#x9650;</font><br>&#x2003;&#x2003;<font size="3">&#x5982; chmod g+w, o-r filename &#x5BF9;filename&#x7684;&#x6240;&#x5C5E;&#x7EC4;&#x6DFB;&#x52A0;&#x5199;&#x6743;&#x9650;&#xFF0C;&#x5BF9;&#x5176;&#x4ED6;&#x7528;&#x6237;&#x5220;&#x9664;&#x8BFB;&#x6743;&#x9650;</font></p><p>&#x2003;&#x2003;<font size="3">&#x76F4;&#x63A5;&#x5229;&#x7528;&#x6570;&#x5B57;&#x8FDB;&#x884C;&#x8D4B;&#x503C;&#x6743;&#x9650;</font><br>&#x2003;&#x2003;<font size="3">&#x5982; chmod 644 filename &#x5BF9;filename&#x7684;&#x6240;&#x6709;&#x8005;&#x6DFB;&#x52A0;&#x8BFB;&#x5199;&#x6743;&#x9650;&#xFF0C;&#x5BF9;&#x6240;&#x5C5E;&#x7EC4;&#x548C;&#x5176;&#x4ED6;&#x7528;&#x6237;&#x6DFB;&#x52A0;&#x8BFB;&#x6743;&#x9650;</font><br><img src="/images/SKILL/linux6.png" alt="6"></p><h2 id="&#x6587;&#x4EF6;&#x641C;&#x7D22;&#x547D;&#x4EE4;"><a href="#&#x6587;&#x4EF6;&#x641C;&#x7D22;&#x547D;&#x4EE4;" class="headerlink" title="&#x6587;&#x4EF6;&#x641C;&#x7D22;&#x547D;&#x4EE4;"></a><font size="4">&#x6587;&#x4EF6;&#x641C;&#x7D22;&#x547D;&#x4EE4;</font></h2><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>find range condition</td><td>&#x67E5;&#x627E;range&#x8303;&#x56F4;&#x5185;&#x7B26;&#x5408;&#x6761;&#x4EF6;&#x7684;&#x6587;&#x4EF6;&#x6216;&#x76EE;&#x5F55;</td></tr><tr><td>locate filename</td><td>&#x4ECE;&#x6587;&#x4EF6;&#x8D44;&#x6599;&#x5E93;&#x4E2D;&#x67E5;&#x627E;&#x6587;&#x4EF6;</td></tr><tr><td>which command</td><td>&#x641C;&#x7D22;&#x547D;&#x4EE4;&#x6240;&#x5728;&#x76EE;&#x5F55;&#x53CA;&#x522B;&#x540D;&#x4FE1;&#x606F;</td></tr><tr><td>whereis command</td><td>&#x641C;&#x7D22;&#x547D;&#x4EE4;&#x6240;&#x5728;&#x76EE;&#x5F55;&#x53CA;&#x5E2E;&#x52A9;&#x6587;&#x6863;&#x8DEF;&#x5F84;</td></tr><tr><td>grep string file</td><td>&#x5728;&#x6587;&#x4EF6;&#x4E2D;&#x641C;&#x7D22;&#x5B57;&#x7B26;&#x4E32;&#x5339;&#x914D;&#x7684;&#x884C;&#x5E76;&#x8F93;&#x51FA;</td></tr><tr><td>grep -i string file</td><td>&#x4E0D;&#x533A;&#x5206;&#x5B57;&#x7B26;&#x4E32;&#x5927;&#x5C0F;&#x5199;&#x641C;&#x7D22;&#x5339;&#x914D;&#x7684;&#x884C;&#x5E76;&#x8F93;&#x51FA;</td></tr><tr><td>grep -v string file</td><td>&#x5728;&#x6587;&#x4EF6;&#x4E2D;&#x6392;&#x9664;&#x4E0E;&#x5B57;&#x7B26;&#x4E32;&#x5339;&#x914D;&#x7684;&#x884C;&#x5E76;&#x8F93;&#x51FA;</td></tr><tr><td>grep -n string file</td><td>&#x5728;&#x6587;&#x4EF6;&#x4E2D;&#x641C;&#x7D22;&#x5B57;&#x7B26;&#x4E32;&#x5339;&#x914D;&#x7684;&#x884C;&#x5E76;&#x8F93;&#x51FA;&#xFF0C;&#x5E76;&#x663E;&#x793A;&#x884C;&#x6570;</td></tr></tbody></table><p>&#x2003;&#x2003;<font size="4" color="red">find&#x641C;&#x7D22;&#x5339;&#x914D;&#x6761;&#x4EF6;</font><br>&#x2003;&#x2003;<font size="3">*&#xFF1A;&#x5339;&#x914D;&#x5B57;&#x7B26;&#x591A;&#x4E2A;</font><br>&#x2003;&#x2003;<font size="3">&#x5982;*init&#x6307;&#x4EE5;init&#x7ED3;&#x5C3E;&#x7684;&#x6587;&#x4EF6;&#x540D;&#xFF0C;*init*&#x6307;&#x5305;&#x542B;init&#x7684;&#x6587;&#x4EF6;&#x540D;</font><br>&#x2003;&#x2003;<font size="3">?&#xFF1A;&#x5339;&#x914D;&#x5355;&#x4E2A;&#x5B57;&#x7B26;</font><br>&#x2003;&#x2003;<font size="3">&#x5982;???init&#x6307;&#x4EE5;init&#x7ED3;&#x5C3E;&#x957F;&#x5EA6;&#x4E3A;7&#x7684;&#x6587;&#x4EF6;&#x540D;</font><br><img src="/images/SKILL/linux5.png" alt="5"></p><h2 id="&#x5E2E;&#x52A9;&#x547D;&#x4EE4;"><a href="#&#x5E2E;&#x52A9;&#x547D;&#x4EE4;" class="headerlink" title="&#x5E2E;&#x52A9;&#x547D;&#x4EE4;"></a><font size="4">&#x5E2E;&#x52A9;&#x547D;&#x4EE4;</font></h2><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>man command</td><td>&#x83B7;&#x5F97;&#x547D;&#x4EE4;&#x7684;&#x5E2E;&#x52A9;&#x4FE1;&#x606F;</td></tr><tr><td>whatis command</td><td>&#x67E5;&#x770B;&#x547D;&#x4EE4;&#x7684;&#x529F;&#x80FD;</td></tr><tr><td>apropos filename</td><td>&#x67E5;&#x770B;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x7684;&#x7B80;&#x8981;&#x4FE1;&#x606F;</td></tr><tr><td>command &#x2013;help</td><td>&#x67E5;&#x770B;&#x547D;&#x4EE4;&#x7684;&#x5E38;&#x89C1;&#x9009;&#x9879;</td></tr><tr><td>help command</td><td>&#x67E5;&#x770B;shell&#x5185;&#x7F6E;&#x547D;&#x4EE4;&#x7684;&#x5E2E;&#x52A9;&#x4FE1;&#x606F;</td></tr></tbody></table><p><img src="/images/SKILL/linux7.png" alt="7"></p><h2 id="&#x7F51;&#x7EDC;&#x547D;&#x4EE4;"><a href="#&#x7F51;&#x7EDC;&#x547D;&#x4EE4;" class="headerlink" title="&#x7F51;&#x7EDC;&#x547D;&#x4EE4;"></a><font size="4">&#x7F51;&#x7EDC;&#x547D;&#x4EE4;</font></h2><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>write username</td><td>&#x7ED9;&#x7528;&#x6237;&#x53D1;&#x4FE1;&#x606F;</td></tr><tr><td>wall</td><td>&#x53D1;&#x5E7F;&#x64AD;&#x4FE1;&#x606F;</td></tr><tr><td>ping ip</td><td>&#x5BF9;ip&#x5730;&#x5740;&#x53D1;&#x6570;&#x636E;&#x5305;&#x68C0;&#x6D4B;&#x7F51;&#x7EDC;&#x8FDE;&#x901A;&#x6027;&#xFF0C;&#x4E00;&#x76F4;&#x5728;&#x53D1;&#x9001;</td></tr><tr><td>ping -c n ip</td><td>&#x5BF9;ip&#x5730;&#x5740;&#x53D1;&#x6570;&#x636E;&#x5305;&#x68C0;&#x6D4B;&#x7F51;&#x7EDC;&#x8FDE;&#x901A;&#x6027;&#xFF0C;&#x53D1;&#x9001;n&#x6B21;</td></tr><tr><td>ifconfig net_card ip</td><td>&#x914D;&#x7F6E;&#x7F51;&#x5361;&#x7684;ip&#x5730;&#x5740;</td></tr><tr><td>mail username</td><td>&#x67E5;&#x770B;&#x53D1;&#x9001;&#x7684;&#x7535;&#x5B50;&#x90AE;&#x4EF6;</td></tr><tr><td>last</td><td>&#x5217;&#x51FA;&#x767B;&#x5F55;&#x7CFB;&#x7EDF;&#x7684;&#x7528;&#x6237;&#x4FE1;&#x606F;</td></tr><tr><td>lastlog</td><td>&#x67E5;&#x770B;&#x6240;&#x6709;&#x7528;&#x6237;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x767B;&#x5F55;&#x7684;&#x65F6;&#x95F4;</td></tr><tr><td>lastlog -u userid</td><td>&#x67E5;&#x770B;&#x7528;&#x6237;id&#x4E3A;userid(&#x4E0D;&#x662F;&#x7528;&#x6237;&#x540D;)&#x7684;&#x7528;&#x6237;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x767B;&#x5F55;&#x65F6;&#x95F4;</td></tr><tr><td>traceroute url</td><td>&#x67E5;&#x770B;&#x6570;&#x636E;&#x5305;&#x5230;&#x4E3B;&#x673A;&#x95F4;&#x7684;&#x8DEF;&#x5F84;</td></tr><tr><td>netstat -t</td><td>&#x663E;&#x793A;&#x7F51;&#x7EDC;&#x4E2D;&#x7684;TCP&#x534F;&#x8BAE;</td></tr><tr><td>netstat -u</td><td>&#x663E;&#x793A;&#x7F51;&#x7EDC;&#x4E2D;&#x7684;UDP&#x534F;&#x8BAE;</td></tr><tr><td>netstat -l</td><td>&#x76D1;&#x542C;&#x7F51;&#x7EDC;&#x670D;&#x52A1;</td></tr><tr><td>netstat -r</td><td>&#x67E5;&#x770B;&#x8DEF;&#x7531;&#x8868;</td></tr><tr><td>netstat -n</td><td>&#x663E;&#x793A;ip&#x5730;&#x5740;&#x548C;&#x7AEF;&#x53E3;&#x53F7;</td></tr></tbody></table><p><img src="/images/SKILL/linux8.png" alt="8"></p><h2 id="&#x5173;&#x673A;&#x91CD;&#x542F;&#x547D;&#x4EE4;"><a href="#&#x5173;&#x673A;&#x91CD;&#x542F;&#x547D;&#x4EE4;" class="headerlink" title="&#x5173;&#x673A;&#x91CD;&#x542F;&#x547D;&#x4EE4;"></a><font size="4">&#x5173;&#x673A;&#x91CD;&#x542F;&#x547D;&#x4EE4;</font></h2><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>shutdown -c</td><td>&#x53D6;&#x6D88;&#x4E0A;&#x4E00;&#x4E2A;&#x5173;&#x673A;&#x547D;&#x4EE4;</td></tr><tr><td>shutdown -h +n</td><td>n&#x5206;&#x949F;&#x540E;&#x5173;&#x673A;</td></tr><tr><td>shutdown -h time</td><td>&#x5230;&#x8FBE;&#x65F6;&#x95F4;time&#x5173;&#x673A;</td></tr><tr><td>shutdown -h now</td><td>&#x73B0;&#x5728;&#x5173;&#x673A;</td></tr><tr><td>shutdown -r +n</td><td>n&#x5206;&#x949F;&#x540E;&#x91CD;&#x542F;</td></tr><tr><td>shutdown -r time</td><td>&#x5230;&#x8FBE;&#x65F6;&#x95F4;time&#x91CD;&#x542F;</td></tr><tr><td>shutdown -r now</td><td>&#x73B0;&#x5728;&#x91CD;&#x542F;</td></tr></tbody></table><h2 id="&#x4FEE;&#x6539;&#x7CFB;&#x7EDF;&#x9ED8;&#x8BA4;&#x8FD0;&#x884C;&#x7EA7;&#x522B;"><a href="#&#x4FEE;&#x6539;&#x7CFB;&#x7EDF;&#x9ED8;&#x8BA4;&#x8FD0;&#x884C;&#x7EA7;&#x522B;" class="headerlink" title="&#x4FEE;&#x6539;&#x7CFB;&#x7EDF;&#x9ED8;&#x8BA4;&#x8FD0;&#x884C;&#x7EA7;&#x522B;"></a><font size="4">&#x4FEE;&#x6539;&#x7CFB;&#x7EDF;&#x9ED8;&#x8BA4;&#x8FD0;&#x884C;&#x7EA7;&#x522B;</font></h2><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>vim /etc/inittab</td><td>&#x4FEE;&#x6539;&#x7CFB;&#x7EDF;&#x9ED8;&#x8BA4;&#x8FD0;&#x884C;&#x7EA7;&#x522B;</td></tr><tr><td>runlevel</td><td>&#x67E5;&#x770B;&#x7CFB;&#x7EDF;&#x8FD0;&#x884C;&#x7EA7;&#x522B;</td></tr></tbody></table><p>&#x2003;&#x2003;<font size="4" color="red">&#x7CFB;&#x7EDF;&#x8FD0;&#x884C;&#x7EA7;&#x522B;</font><br>&#x2003;&#x2003;<font size="3">0&#xFF1A;&#x5173;&#x673A;</font><br>&#x2003;&#x2003;<font size="3">1&#xFF1A;&#x5355;&#x7528;&#x6237;&#x6A21;&#x5F0F;</font><br>&#x2003;&#x2003;<font size="3">2&#xFF1A;&#x4E0D;&#x5B8C;&#x5168;&#x591A;&#x7528;&#x6237;&#x6A21;&#x5F0F;&#xFF0C;&#x4E0D;&#x542B; NFS&#x670D;&#x52A1;</font><br>&#x2003;&#x2003;<font size="3">3&#xFF1A;&#x5B8C;&#x5168;&#x591A;&#x7528;&#x6237;&#x6A21;&#x5F0F;&#x52A1;</font><br>&#x2003;&#x2003;<font size="3">4&#xFF1A;&#x672A;&#x5206;&#x914D;</font><br>&#x2003;&#x2003;<font size="3">5&#xFF1A;&#x56FE;&#x5F62;&#x754C;&#x9762;</font><br>&#x2003;&#x2003;<font size="3">6&#xFF1A;&#x91CD;&#x542F;</font></p><h2 id="&#x7528;&#x6237;&#x914D;&#x7F6E;&#x6587;&#x4EF6;"><a href="#&#x7528;&#x6237;&#x914D;&#x7F6E;&#x6587;&#x4EF6;" class="headerlink" title="&#x7528;&#x6237;&#x914D;&#x7F6E;&#x6587;&#x4EF6;"></a><font size="4">&#x7528;&#x6237;&#x914D;&#x7F6E;&#x6587;&#x4EF6;</font></h2><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>less /etc/passwd</td><td>&#x67E5;&#x770B;&#x7528;&#x6237;&#x4FE1;&#x606F;&#x6587;&#x4EF6;</td></tr><tr><td>less /etc/shadow</td><td>&#x67E5;&#x770B;&#x7528;&#x6237;&#x5F71;&#x5B50;&#x6587;&#x4EF6;</td></tr><tr><td>less /etc/group</td><td>&#x67E5;&#x770B;&#x7EC4;&#x4FE1;&#x606F;&#x6587;&#x4EF6;</td></tr><tr><td>less /etc/gshadow</td><td>&#x67E5;&#x770B;&#x7EC4;&#x5F71;&#x5B50;&#x6587;&#x4EF6;</td></tr></tbody></table><p>&#x2003;&#x2003;<font size="4" color="red">&#x7528;&#x6237;&#x4FE1;&#x606F;&#x6587;&#x4EF6;&#x5B57;&#x6BB5;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7528;&#x6237;&#x540D;&#x79F0;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E8C;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x5BC6;&#x7801;&#x6807;&#x5FD7;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E09;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7528;&#x6237;ID(UID)</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x56DB;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7528;&#x6237;&#x521D;&#x59CB;&#x7EC4;ID(GID)</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E94;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7528;&#x6237;&#x8BF4;&#x660E;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x516D;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x5BB6;&#x7528;&#x6237;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E03;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x767B;&#x5F55;&#x540E;&#x7684;shell</font></p><p>&#x2003;&#x2003;<font size="4" color="red">&#x7528;&#x6237;&#x5F71;&#x5B50;&#x6587;&#x4EF6;&#x5B57;&#x6BB5;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7528;&#x6237;&#x540D;&#x79F0;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E8C;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x52A0;&#x5BC6;&#x5BC6;&#x7801;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E09;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x5BC6;&#x7801;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x4FEE;&#x6539;&#x65F6;&#x95F4;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x56DB;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x4E24;&#x6B21;&#x5BC6;&#x7801;&#x4FEE;&#x6539;&#x95F4;&#x9694;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E94;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x5BC6;&#x7801;&#x6709;&#x6548;&#x671F;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x516D;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x5BC6;&#x7801;&#x5230;&#x671F;&#x524D;&#x7684;&#x8B66;&#x544A;&#x5929;&#x6570;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E03;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x5BC6;&#x7801;&#x8FC7;&#x671F;&#x540E;&#x7684;&#x5BBD;&#x9650;&#x5929;&#x6570;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x516B;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x8D26;&#x53F7;&#x5931;&#x6548;&#x65F6;&#x95F4;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E5D;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x4FDD;&#x7559;&#x5B57;&#x6BB5;</font></p><p>&#x2003;&#x2003;<font size="4" color="red">&#x7EC4;&#x4FE1;&#x606F;&#x6587;&#x4EF6;&#x5B57;&#x6BB5;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7EC4;&#x540D;&#x79F0;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E8C;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7EC4;&#x5BC6;&#x7801;&#x6807;&#x5FD7;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E09;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7EC4;ID(GID)</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x56DB;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7EC4;&#x4E2D;&#x9644;&#x52A0;&#x7528;&#x6237;</font></p><p>&#x2003;&#x2003;<font size="4" color="red">&#x7EC4;&#x5F71;&#x5B50;&#x6587;&#x4EF6;&#x5B57;&#x6BB5;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7EC4;&#x540D;&#x79F0;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E8C;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7EC4;&#x5BC6;&#x7801;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E09;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7EC4;&#x7BA1;&#x7406;&#x5458;&#x7528;&#x6237;&#x540D;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x56DB;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7EC4;&#x4E2D;&#x9644;&#x52A0;&#x7528;&#x6237;</font></p><h2 id="&#x7528;&#x6237;&#x7BA1;&#x7406;&#x547D;&#x4EE4;"><a href="#&#x7528;&#x6237;&#x7BA1;&#x7406;&#x547D;&#x4EE4;" class="headerlink" title="&#x7528;&#x6237;&#x7BA1;&#x7406;&#x547D;&#x4EE4;"></a><font size="4">&#x7528;&#x6237;&#x7BA1;&#x7406;&#x547D;&#x4EE4;</font></h2><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>useradd username</td><td>&#x6DFB;&#x52A0;&#x65B0;&#x7528;&#x6237;</td></tr><tr><td>useradd -u username</td><td>&#x6DFB;&#x52A0;&#x65B0;&#x7528;&#x6237;&#xFF0C;&#x624B;&#x52A8;&#x6307;&#x5B9A;&#x7528;&#x6237;id</td></tr><tr><td>useradd -d username</td><td>&#x6DFB;&#x52A0;&#x65B0;&#x7528;&#x6237;&#xFF0C;&#x624B;&#x52A8;&#x6307;&#x5B9A;&#x5BB6;&#x76EE;&#x5F55;</td></tr><tr><td>useradd -c username</td><td>&#x6DFB;&#x52A0;&#x65B0;&#x7528;&#x6237;&#xFF0C;&#x624B;&#x52A8;&#x6307;&#x5B9A;&#x7528;&#x6237;&#x8BF4;&#x660E;</td></tr><tr><td>useradd -G username</td><td>&#x6DFB;&#x52A0;&#x65B0;&#x7528;&#x6237;&#xFF0C;&#x624B;&#x52A8;&#x6307;&#x5B9A;&#x9644;&#x52A0;&#x7EC4;</td></tr><tr><td>useradd -g username</td><td>&#x6DFB;&#x52A0;&#x65B0;&#x7528;&#x6237;&#xFF0C;&#x624B;&#x52A8;&#x6307;&#x5B9A;&#x521D;&#x59CB;&#x7EC4;</td></tr><tr><td>useradd -s username</td><td>&#x6DFB;&#x52A0;&#x65B0;&#x7528;&#x6237;&#xFF0C;&#x624B;&#x52A8;&#x6307;&#x5B9A;&#x767B;&#x5F55;shell</td></tr><tr><td>passwd username</td><td>&#x8BBE;&#x7F6E;&#x7528;&#x6237;&#x5BC6;&#x7801;</td></tr><tr><td>passwd -s username</td><td>&#x67E5;&#x8BE2;&#x7528;&#x6237;&#x5BC6;&#x7801;&#x72B6;&#x6001;</td></tr><tr><td>passwd -l username</td><td>&#x6682;&#x65F6;&#x9501;&#x5B9A;&#x7528;&#x6237;</td></tr><tr><td>passwd -u username</td><td>&#x89E3;&#x9501;&#x7528;&#x6237;</td></tr><tr><td>userdel username</td><td>&#x5220;&#x9664;&#x7528;&#x6237;</td></tr><tr><td>change -l username</td><td>&#x5217;&#x51FA;&#x7528;&#x6237;&#x7684;&#x8BE6;&#x7EC6;&#x5BC6;&#x7801;&#x72B6;&#x6001;</td></tr><tr><td>change -d username</td><td>&#x4FEE;&#x6539;&#x5BC6;&#x7801;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x66F4;&#x6539;&#x65E5;&#x671F;</td></tr><tr><td>change -m username</td><td>&#x4FEE;&#x6539;&#x4E24;&#x6B21;&#x5BC6;&#x7801;&#x4FEE;&#x6539;&#x95F4;&#x9694;</td></tr><tr><td>change -M username</td><td>&#x4FEE;&#x6539;&#x5BC6;&#x7801;&#x6709;&#x6548;&#x671F;</td></tr><tr><td>change -W username</td><td>&#x4FEE;&#x6539;&#x5BC6;&#x7801;&#x8FC7;&#x671F;&#x524D;&#x8B66;&#x544A;&#x5929;&#x6570;</td></tr><tr><td>change -I username</td><td>&#x4FEE;&#x6539;&#x5BC6;&#x7801;&#x8FC7;&#x671F;&#x540E;&#x5BBD;&#x9650;&#x5929;&#x6570;</td></tr><tr><td>change -E username</td><td>&#x4FEE;&#x6539;&#x8D26;&#x53F7;&#x5931;&#x6548;&#x65F6;&#x95F4;</td></tr></tbody></table><h2 id="&#x7528;&#x6237;&#x7EC4;&#x7BA1;&#x7406;&#x547D;&#x4EE4;"><a href="#&#x7528;&#x6237;&#x7EC4;&#x7BA1;&#x7406;&#x547D;&#x4EE4;" class="headerlink" title="&#x7528;&#x6237;&#x7EC4;&#x7BA1;&#x7406;&#x547D;&#x4EE4;"></a><font size="4">&#x7528;&#x6237;&#x7EC4;&#x7BA1;&#x7406;&#x547D;&#x4EE4;</font></h2><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>groupadd groupname</td><td>&#x6DFB;&#x52A0;&#x65B0;&#x7528;&#x6237;&#x7EC4;</td></tr><tr><td>groupadd -g groupname</td><td>&#x6DFB;&#x52A0;&#x65B0;&#x7528;&#x6237;&#xFF0C;&#x624B;&#x52A8;&#x6307;&#x5B9A;&#x7EC4;id</td></tr><tr><td>groupmod -g groupname</td><td>&#x4FEE;&#x6539;&#x7EC4;id</td></tr><tr><td>groupmod -n groupname</td><td>&#x4FEE;&#x6539;&#x7EC4;&#x540D;</td></tr><tr><td>groupdel groupname</td><td>&#x5220;&#x9664;&#x7528;&#x6237;&#x7EC4;</td></tr><tr><td>gpasswd -a groupname</td><td>&#x5C06;&#x7528;&#x6237;&#x52A0;&#x5165;&#x7528;&#x6237;&#x7EC4;</td></tr><tr><td>gpasswd -a groupname</td><td>&#x5C06;&#x7528;&#x6237;&#x4ECE;&#x7528;&#x6237;&#x7EC4;&#x5220;&#x9664;</td></tr></tbody></table><h2 id="&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#x7BA1;&#x7406;&#x547D;&#x4EE4;"><a href="#&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#x7BA1;&#x7406;&#x547D;&#x4EE4;" class="headerlink" title="&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#x7BA1;&#x7406;&#x547D;&#x4EE4;"></a><font size="4">&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#x7BA1;&#x7406;&#x547D;&#x4EE4;</font></h2><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>df -a dirname</td><td>&#x663E;&#x793A;&#x6587;&#x4EF6;&#x7684;&#x7CFB;&#x7EDF;&#x4FE1;&#x606F;</td></tr><tr><td>df -h dirname</td><td>&#x4EE5;&#x4EBA;&#x6027;&#x5316;&#x65B9;&#x5F0F;&#x663E;&#x793A;&#x6587;&#x4EF6;&#x7684;&#x7CFB;&#x7EDF;&#x4FE1;&#x606F;</td></tr><tr><td>df -a dirname</td><td>&#x663E;&#x793A;&#x6587;&#x4EF6;&#x7684;&#x7CFB;&#x7EDF;&#x7C7B;&#x578B;</td></tr><tr><td>du -a dicname</td><td>&#x663E;&#x793A;&#x6BCF;&#x4E2A;&#x5B50;&#x6587;&#x4EF6;&#x7684;&#x78C1;&#x76D8;&#x5360;&#x7528;&#x91CF;</td></tr><tr><td>du -h dicname</td><td>&#x4EE5;&#x4EBA;&#x6027;&#x5316;&#x65B9;&#x5F0F;&#x663E;&#x793A;&#x6BCF;&#x4E2A;&#x5B50;&#x6587;&#x4EF6;&#x7684;&#x78C1;&#x76D8;&#x5360;&#x7528;&#x91CF;</td></tr><tr><td>du -s dicname</td><td>&#x7EDF;&#x8BA1;&#x603B;&#x5360;&#x7528;&#x91CF;</td></tr><tr><td>fdisk -l</td><td>&#x67E5;&#x770B;u&#x76D8;&#x7684;&#x8BBE;&#x5907;&#x6587;&#x4EF6;&#x540D;</td></tr><tr><td>mount -t vfat device dicname</td><td>&#x5C06;u&#x76D8;&#x6587;&#x4EF6;&#x540D;device&#x6302;&#x8F7D;&#x5230;dicname&#x6587;&#x4EF6;&#x540D;&#x4E2D;</td></tr><tr><td>umount device</td><td>&#x5378;&#x8F7D;&#x6302;&#x8F7D;device</td></tr></tbody></table><h2 id="&#x7EC8;&#x7AEF;&#x5E38;&#x7528;&#x547D;&#x4EE4;"><a href="#&#x7EC8;&#x7AEF;&#x5E38;&#x7528;&#x547D;&#x4EE4;" class="headerlink" title="&#x7EC8;&#x7AEF;&#x5E38;&#x7528;&#x547D;&#x4EE4;"></a><font size="4">&#x7EC8;&#x7AEF;&#x5E38;&#x7528;&#x547D;&#x4EE4;</font></h2><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>Ctrl + Alt +t</td><td>&#x6253;&#x5F00;&#x7EC8;&#x7AEF;</td></tr><tr><td>Ctrl + d</td><td>&#x9000;&#x51FA;&#x7EC8;&#x7AEF;</td></tr><tr><td>Ctrl + c</td><td>&#x7EC8;&#x6B62;&#x6B63;&#x5728;&#x8FD0;&#x884C;&#x7684;&#x7A0B;&#x5E8F;</td></tr><tr><td>Ctrl + l</td><td>&#x6E05;&#x5C4F;</td></tr><tr><td>Ctrl + s</td><td>&#x9501;&#x4F4F;&#x7EC8;&#x7AEF;</td></tr><tr><td>Ctrl + q</td><td>&#x89E3;&#x9501;&#x7EC8;&#x7AEF;</td></tr><tr><td>Ctrl + r</td><td>&#x67E5;&#x627E;&#x5386;&#x53F2;&#x547D;&#x4EE4;</td></tr><tr><td>^up</td><td>&#x67E5;&#x770B;&#x4E0A;&#x4E00;&#x4E2A;&#x5386;&#x53F2;&#x8BB0;&#x5F55;</td></tr><tr><td>^down</td><td>&#x67E5;&#x770B;&#x4E0B;&#x4E00;&#x4E2A;&#x5386;&#x53F2;&#x8BB0;&#x5F55;</td></tr><tr><td>su</td><td>&#x5207;&#x6362;&#x5230;root&#x7528;&#x6237;</td></tr><tr><td>su username</td><td>&#x5207;&#x6362;&#x5230;username&#x7528;&#x6237;</td></tr><tr><td>sudo command</td><td>&#x4EE5;root&#x6743;&#x9650;&#x6267;&#x884C;&#x547D;&#x4EE4;</td></tr><tr><td>TAB</td><td>&#x547D;&#x4EE4;&#x4E0E;&#x6587;&#x4EF6;&#x8865;&#x5168;</td></tr><tr><td>alias</td><td>&#x67E5;&#x770B;&#x547D;&#x4EE4;&#x7684;&#x522B;&#x540D;</td></tr><tr><td>alias newname command</td><td>&#x7ED9;&#x539F;&#x547D;&#x4EE4;&#x8D77;&#x4E00;&#x4E2A;&#x522B;&#x540D;</td></tr></tbody></table><h2 id="&#x91CD;&#x5B9A;&#x5411;&#x547D;&#x4EE4;"><a href="#&#x91CD;&#x5B9A;&#x5411;&#x547D;&#x4EE4;" class="headerlink" title="&#x91CD;&#x5B9A;&#x5411;&#x547D;&#x4EE4;"></a><font size="4">&#x91CD;&#x5B9A;&#x5411;&#x547D;&#x4EE4;</font></h2><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>command &gt; filename</td><td>&#x5C06;&#x6B63;&#x786E;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8986;&#x76D6;&#x5230;filename&#x6587;&#x4EF6;&#x4E2D;</td></tr><tr><td>command &gt;&gt; filename</td><td>&#x5C06;&#x6B63;&#x786E;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8FFD;&#x52A0;&#x5230;filename&#x6587;&#x4EF6;&#x4E2D;</td></tr><tr><td>command 2&gt; filename</td><td>&#x5C06;&#x9519;&#x8BEF;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8986;&#x76D6;&#x5230;filename&#x6587;&#x4EF6;&#x4E2D;</td></tr><tr><td>command 2&gt;&gt; filename</td><td>&#x5C06;&#x9519;&#x8BEF;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8FFD;&#x52A0;&#x5230;filename&#x6587;&#x4EF6;&#x4E2D;</td></tr><tr><td>command &amp;&gt; filename</td><td>&#x5C06;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8986;&#x76D6;&#x5230;filename&#x6587;&#x4EF6;&#x4E2D;(&#x65E0;&#x8BBA;&#x6B63;&#x786E;&#x4E0E;&#x5426;)</td></tr><tr><td>command &amp;&gt;&gt; filename</td><td>&#x5C06;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8FFD;&#x52A0;&#x5230;filename&#x6587;&#x4EF6;&#x4E2D;(&#x65E0;&#x8BBA;&#x6B63;&#x786E;&#x4E0E;&#x5426;)</td></tr><tr><td>command &gt;&gt; filename1 &amp;&gt;&gt; filename2</td><td>&#x5C06;&#x6B63;&#x786E;&#x7684;&#x547D;&#x4EE4;&#x7ED3;&#x679C;&#x8FFD;&#x52A0;&#x5230;filename1&#xFF0C;&#x9519;&#x8BEF;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8FFD;&#x52A0;&#x5230;&#x5230;filename2</td></tr></tbody></table><h2 id="&#x591A;&#x547D;&#x4EE4;"><a href="#&#x591A;&#x547D;&#x4EE4;" class="headerlink" title="&#x591A;&#x547D;&#x4EE4;"></a><font size="4">&#x591A;&#x547D;&#x4EE4;</font></h2><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>command1 ; command2 ; &#x2026;</td><td>&#x591A;&#x4E2A;&#x547D;&#x4EE4;&#x987A;&#x5E8F;&#x6267;&#x884C;&#xFF0C;&#x547D;&#x4EE4;1&#x51FA;&#x9519;&#x547D;&#x4EE4;2&#x4E5F;&#x4F1A;&#x6267;&#x884C;</td></tr><tr><td>command1 &amp;&amp; command2 &amp;&amp; &#x2026;</td><td>&#x903B;&#x8F91;&#x4E0E;&#xFF0C;&#x547D;&#x4EE4;1&#x6B63;&#x786E;&#x6267;&#x884C;&#xFF0C;&#x547D;&#x4EE4;2&#x624D;&#x4F1A;&#x6267;&#x884C;</td></tr><tr><td>command1 ll command2 ll &#x2026;</td><td>&#x903B;&#x8F91;&#x6216;&#xFF0C;&#x547D;&#x4EE4;1&#x4E0D;&#x6B63;&#x786E;&#x6267;&#x884C;&#xFF0C;&#x547D;&#x4EE4;2&#x624D;&#x4F1A;&#x6267;&#x884C;</td></tr><tr><td>command 2&gt;&gt; filename</td><td>&#x5C06;&#x9519;&#x8BEF;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8FFD;&#x52A0;&#x5230;filename&#x6587;&#x4EF6;&#x4E2D;</td></tr><tr><td>command &amp;&gt; filename</td><td>&#x5C06;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8986;&#x76D6;&#x5230;filename&#x6587;&#x4EF6;&#x4E2D;(&#x65E0;&#x8BBA;&#x6B63;&#x786E;&#x4E0E;&#x5426;)</td></tr><tr><td>command &amp;&gt;&gt; filename</td><td>&#x5C06;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8FFD;&#x52A0;&#x5230;filename&#x6587;&#x4EF6;&#x4E2D;(&#x65E0;&#x8BBA;&#x6B63;&#x786E;&#x4E0E;&#x5426;)</td></tr><tr><td>command &gt;&gt; filename1 &amp;&gt;&gt; filename2</td><td>&#x5C06;&#x6B63;&#x786E;&#x7684;&#x547D;&#x4EE4;&#x7ED3;&#x679C;&#x8FFD;&#x52A0;&#x5230;filename1&#xFF0C;&#x9519;&#x8BEF;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8FFD;&#x52A0;&#x5230;&#x5230;filename2</td></tr><tr><td>command1 l command2</td><td>&#x7BA1;&#x9053;&#x7B26;&#xFF0C;&#x547D;&#x4EE4;1&#x7684;&#x6B63;&#x786E;&#x8F93;&#x51FA;&#x4F5C;&#x4E3A;&#x547D;&#x4EE4;2&#x7684;&#x64CD;&#x4F5C;&#x5BF9;&#x8C61;</td></tr></tbody></table><p><img src="/images/SKILL/linux9.png" alt="9"></p><h2 id="&#x7279;&#x6B8A;&#x7B26;&#x53F7;"><a href="#&#x7279;&#x6B8A;&#x7B26;&#x53F7;" class="headerlink" title="&#x7279;&#x6B8A;&#x7B26;&#x53F7;"></a><font size="4">&#x7279;&#x6B8A;&#x7B26;&#x53F7;</font></h2><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>?</td><td>&#x5339;&#x914D;&#x4E00;&#x4E2A;&#x4EFB;&#x610F;&#x5B57;&#x7B26;</td></tr><tr><td>*</td><td>&#x5339;&#x914D;&#x4EFB;&#x610F;&#x591A;&#x4E2A;&#x5B57;&#x7B26;</td></tr><tr><td>[]</td><td>&#x5339;&#x914D;[]&#x4E2D;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;</td></tr><tr><td>[-]</td><td>&#x5339;&#x914D;[]&#x4E2D;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#xFF0C;-&#x4EE3;&#x8868;&#x8303;&#x56F4;&#xFF0C;&#x5982;0-9</td></tr><tr><td>[^]</td><td>&#x5339;&#x914D;&#x4E0D;&#x5728;[]&#x4E2D;&#x7684;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;</td></tr><tr><td>&#x2018;&#x2019;</td><td>&#x5355;&#x5F15;&#x53F7;&#x5C06;&#x5176;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x6574;&#x4F53;&#xFF0C;&#x5176;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x7279;&#x6B8A;&#x7B26;&#x53F7;&#x90FD;&#x662F;&#x666E;&#x901A;&#x7B26;&#x53F7;</td></tr><tr><td>&#x201C;&#x201D;</td><td>&#x53CC;&#x5F15;&#x53F7;&#x4E2D;$&#x8C03;&#x7528;&#x53D8;&#x91CF;&#x7684;&#x503C;&#xFF0C;`&#x5F15;&#x7528;&#x547D;&#x4EE4;&#xFF0C;\&#x8F6C;&#x4E49;&#x5B57;&#x7B26;</td></tr><tr><td>``</td><td>&#x53CD;&#x5F15;&#x53F7;&#x4E2D;&#x7684;&#x5185;&#x5BB9;&#x4E3A;&#x7CFB;&#x7EDF;&#x547D;&#x4EE4;</td></tr><tr><td>$</td><td>&#x7F8E;&#x5143;&#x7B26;&#x53F7;&#x8C03;&#x7528;&#x53D8;&#x91CF;&#x7684;&#x503C;</td></tr><tr><td>\</td><td>&#x53CD;&#x659C;&#x6760;&#x6307;&#x8F6C;&#x4E49;&#x7B26;</td></tr><tr><td>#</td><td>&#x6CE8;&#x91CA;&#x7B26;</td></tr></tbody></table><h2 id="&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;"><a href="#&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;" class="headerlink" title="&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;"></a><font size="4">&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5728;Linux&#x4E2D;&#xFF0C;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x662F;&#x7528;&#x6765;&#x5728;&#x6587;&#x4EF6;&#x4E2D;&#x5339;&#x914D;&#x7B26;&#x5408;&#x6761;&#x4EF6;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x6B63;&#x5219;&#x662F;&#x5305;&#x542B;&#x5339;&#x914D;&#xFF0C;grep&#xFF0C;awk&#xFF0C;sed&#x7B49;&#x547D;&#x4EE4;&#x652F;&#x6301;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x5728;Linux&#x4E2D;&#xFF0C;&#x901A;&#x914D;&#x7B26;&#x662F;&#x7528;&#x6765;&#x5339;&#x914D;&#x7B26;&#x5408;&#x6761;&#x4EF6;&#x7684;&#x6587;&#x4EF6;&#x540D;&#xFF0C;&#x901A;&#x914D;&#x7B26;&#x662F;&#x5B8C;&#x5168;&#x5339;&#x914D;&#xFF0C;ls&#xFF0C;find&#xFF0C;cp&#x7B49;&#x547D;&#x4EE4;&#x4E0D;&#x652F;&#x6301;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x53EA;&#x80FD;&#x4F7F;&#x7528;&#x901A;&#x914D;&#x7B26;&#x8FDB;&#x884C;&#x5339;&#x914D;&#x3002;</font></p><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>*</td><td>&#x524D;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x5339;&#x914D;0&#x6B21;&#x6216;&#x4EFB;&#x610F;&#x591A;&#x6B21;</td></tr><tr><td>.</td><td>&#x5339;&#x914D;&#x9664;&#x6362;&#x884C;&#x7B26;&#x5916;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;</td></tr><tr><td>^</td><td>&#x5339;&#x914D;&#x884C;&#x9996;</td></tr><tr><td>$</td><td>&#x5339;&#x914D;&#x884C;&#x5C3E;</td></tr><tr><td>[]</td><td>&#x5339;&#x914D;&#x62EC;&#x53F7;&#x4E2D;&#x6307;&#x5B9A;&#x7684;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;</td></tr><tr><td>[^]</td><td>&#x5339;&#x914D;&#x9664;&#x4E86;&#x62EC;&#x53F7;&#x4E2D;&#x6307;&#x5B9A;&#x7684;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;</td></tr><tr><td>\</td><td>&#x8F6C;&#x4E49;&#x5B57;&#x7B26;</td></tr><tr><td>{n}</td><td>&#x8868;&#x793A;&#x524D;&#x9762;&#x7684;&#x5B57;&#x7B26;&#x51FA;&#x73B0;n&#x6B21;</td></tr><tr><td>{n,}</td><td>&#x8868;&#x793A;&#x524D;&#x9762;&#x7684;&#x5B57;&#x7B26;&#x51FA;&#x73B0;&#x4E0D;&#x5C0F;&#x4E8E;n&#x6B21;</td></tr><tr><td>{n,m}</td><td>&#x8868;&#x793A;&#x524D;&#x9762;&#x7684;&#x5B57;&#x7B26;&#x81F3;&#x5C11;&#x51FA;&#x73B0;n&#x6B21;&#xFF0C;&#x81F3;&#x591A;m&#x6B21;</td></tr></tbody></table><h2 id="&#x5B57;&#x7B26;&#x5904;&#x7406;&#x547D;&#x4EE4;"><a href="#&#x5B57;&#x7B26;&#x5904;&#x7406;&#x547D;&#x4EE4;" class="headerlink" title="&#x5B57;&#x7B26;&#x5904;&#x7406;&#x547D;&#x4EE4;"></a><font size="4">&#x5B57;&#x7B26;&#x5904;&#x7406;&#x547D;&#x4EE4;</font></h2><p>|  &#x7B26;&#x53F7;   | &#x8BF4;&#x660E;  |<br>|  cut -f n filename  |  &#x63D0;&#x53D6;&#x6587;&#x4EF6;&#x7B2C;n&#x5217;  |<br>|  cut -d interval -f n filename   |  &#x8BBE;&#x5B9A;&#x5206;&#x9694;&#x7B26;&#x63D0;&#x53D6;&#x6587;&#x4EF6;&#x7B2C;n&#x5217;  |<br>|  printf &#x201C;type_and_format&#x201D; content  |  &#x683C;&#x5F0F;&#x5316;&#x8F93;&#x51FA;  |<br>|  awk &#x201C;condition1 {action1} condition2 {action2} &#x2026;&#x201D; filename  |  &#x5BF9;filename&#x4E2D;&#x7B26;&#x5408;condition&#x7684;&#x8FDB;&#x884C;action&#x64CD;&#x4F5C;  |<br>|  awk &#x201C;BEGIN{action} condition1 {action1} condition2 {action2} &#x2026;&#x201D; filename  |  &#x5728;&#x5BF9;filename&#x64CD;&#x4F5C;&#x4E4B;&#x524D;&#x8FDB;&#x884C;action&#x64CD;&#x4F5C;  |<br>|  awk &#x201C;BEGIN{FS=&#x2019;c&#x2019;} condition1 {action1} condition2 {action2} &#x2026;&#x201D; filename  |  &#x4EE5;c&#x4E3A;&#x5206;&#x9694;&#x7B26;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#xFF0C;&#x9ED8;&#x8BA4;&#x5206;&#x9694;&#x7B26;&#x4E3A;&#x5236;&#x8868;&#x7B26;  |<br>|  awk &#x201C;END{action} condition1 {action1} condition2 {action2} &#x2026;&#x201D; filename  |  &#x5728;&#x5BF9;filename&#x64CD;&#x4F5C;&#x4E4B;&#x540E;&#x8FDB;&#x884C;action&#x64CD;&#x4F5C;  |<br>|  sed -n  |  &#x628A;&#x53EA;&#x7ECF;&#x8FC7;sed&#x5904;&#x7406;&#x7684;&#x8F93;&#x51FA;&#xFF0C;&#x539F;&#x6587;&#x4EF6;&#x4E0D;&#x53D8;&#x5316;  |<br>|  sed -e  |  &#x5141;&#x8BB8;&#x5BF9;&#x8F93;&#x5165;&#x6570;&#x636E;&#x5E94;&#x7528;&#x591A;&#x6761;sed&#x547D;&#x4EE4;  |<br>|  sed -i  |  &#x76F4;&#x63A5;&#x5BF9;&#x6587;&#x4EF6;&#x8FDB;&#x884C;&#x4FEE;&#x6539;&#xFF0C;&#x4E0D;&#x663E;&#x793A;&#x8F93;&#x51FA;  |<br>|  sed a  |  &#x5728;&#x5F53;&#x524D;&#x884C;&#x540E;&#x6DFB;&#x52A0;&#x4E00;&#x884C;&#x6216;&#x591A;&#x884C;  |<br>|  sed c  |  &#x5BF9;&#x5F53;&#x524D;&#x884C;&#x66FF;&#x6362;  |<br>|  sed i  |  &#x5BF9;&#x5F53;&#x524D;&#x884C;&#x63D2;&#x5165;  |<br>|  sed d  |  &#x5220;&#x9664;&#x6307;&#x5B9A;&#x7684;&#x884C;  |<br>|  sed p |  &#x6253;&#x5370;&#x6307;&#x5B9A;&#x7684;&#x884C;  |<br>|  sed s  |  &#x5B57;&#x7B26;&#x66FF;&#x6362;&#xFF0C;&#x683C;&#x5F0F;&#x4E3A;&#x201D;&#x884C;&#x8303;&#x56F4;/s/old_str/new_str/g&#x201D;  |<br>|  sort  |  &#x4EE5;&#x6570;&#x503C;&#x578B;&#x6392;&#x5E8F;  |<br>|  sort -f  |  &#x5FFD;&#x7565;&#x5927;&#x5C0F;&#x5199;&#x6392;&#x5E8F;  |<br>|  sort -n |  &#x4EE5;&#x6570;&#x503C;&#x578B;&#x6392;&#x5E8F;  |<br>|  sort -r  |  &#x53CD;&#x5411;&#x6392;&#x5E8F;  |<br>|  sort -t |  &#x6307;&#x5B9A;&#x5206;&#x9694;&#x7B26;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x5236;&#x8868;&#x7B26;  |<br>|  sort -k n[,m]  |  &#x6309;&#x7167;&#x6307;&#x5B9A;&#x7684;&#x5B57;&#x6BB5;&#xFF0C;&#x4ECE;n&#x5F00;&#x59CB;&#x5230;m&#x7ED3;&#x675F;  |<br>|  wc  |  &#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;Ctrl+d&#x7ED3;&#x675F;&#xFF0C;&#x7EDF;&#x8BA1;&#x884C;&#x6570;&#xFF0C;&#x5355;&#x8BCD;&#x6570;&#x548C;&#x5B57;&#x7B26;&#x6570;  |<br>|  wc filename  |  &#x7EDF;&#x8BA1;filename&#x6587;&#x4EF6;&#x4E2D;&#x7684;&#x884C;&#x6570;&#xFF0C;&#x5355;&#x8BCD;&#x6570;&#x548C;&#x5B57;&#x7B26;&#x6570;  |<br>|  wc -c  |  &#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;Ctrl+d&#x7ED3;&#x675F;&#xFF0C;&#x7EDF;&#x8BA1;&#x5B57;&#x7B26;&#x6570;  |<br>|  wc -w  |  &#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;Ctrl+d&#x7ED3;&#x675F;&#xFF0C;&#x7EDF;&#x8BA1;&#x5355;&#x8BCD;&#x6570;  |<br>|  wc -l  |  &#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;Ctrl+d&#x7ED3;&#x675F;&#xFF0C;&#x7EDF;&#x8BA1;&#x884C;&#x6570;  |<br><img src="/images/SKILL/linux11.png" alt="11"></p><h2 id="&#x7CFB;&#x7EDF;&#x7BA1;&#x7406;"><a href="#&#x7CFB;&#x7EDF;&#x7BA1;&#x7406;" class="headerlink" title="&#x7CFB;&#x7EDF;&#x7BA1;&#x7406;"></a><font size="4">&#x7CFB;&#x7EDF;&#x7BA1;&#x7406;</font></h2><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>ps aux</td><td>&#x67E5;&#x770B;&#x7CFB;&#x7EDF;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x8FDB;&#x7A0B;</td></tr><tr><td>top</td><td>&#x67E5;&#x770B;&#x7CFB;&#x7EDF;&#x7684;&#x5065;&#x5EB7;&#x72B6;&#x6001;&#xFF0C;&#x9ED8;&#x8BA4;&#x6BCF;3&#x79D2;&#x66F4;&#x65B0;&#x4E00;&#x6B21;</td></tr><tr><td>top -d</td><td>&#x8BBE;&#x7F6E;&#x66F4;&#x65B0;&#x7684;&#x79D2;&#x6570;</td></tr><tr><td>top P</td><td>&#x4EE5;CPU&#x4F7F;&#x7528;&#x7387;&#x6392;&#x5E8F;</td></tr><tr><td>top M</td><td>&#x4EE5;&#x5185;&#x5B58;&#x4F7F;&#x7528;&#x7387;&#x6392;&#x5E8F;</td></tr><tr><td>top N</td><td>&#x4EE5;&#x8FDB;&#x7A0B;&#x53F7;(PID)&#x6392;&#x5E8F;</td></tr><tr><td>q</td><td>&#x9000;&#x51FA;top</td></tr><tr><td>pstree</td><td>&#x67E5;&#x770B;&#x8FDB;&#x7A0B;&#x6811;</td></tr><tr><td>pstree -p</td><td>&#x67E5;&#x770B;&#x8FDB;&#x7A0B;&#x6811;&#xFF0C;&#x5E76;&#x663E;&#x793A;&#x8FDB;&#x7A0B;&#x53F7;</td></tr><tr><td>pstree -u</td><td>&#x67E5;&#x770B;&#x8FDB;&#x7A0B;&#x6811;&#xFF0C;&#x5E76;&#x663E;&#x793A;&#x6240;&#x5C5E;&#x7528;&#x6237;</td></tr><tr><td>kill -l</td><td>&#x67E5;&#x770B;&#x53EF;&#x7528;&#x7684;&#x8FDB;&#x7A0B;&#x4FE1;&#x53F7;</td></tr><tr><td>kill PID</td><td>&#x6B63;&#x5E38;&#x5173;&#x95ED;&#x8FDB;&#x7A0B;&#x53F7;&#x4E3A;PID&#x7684;&#x8FDB;&#x7A0B;</td></tr><tr><td>kill -n PID</td><td>&#x5BF9;&#x8FDB;&#x7A0B;&#x53F7;&#x4E3A;PID&#x7684;&#x8FDB;&#x7A0B;&#x8FDB;&#x884C;n&#x64CD;&#x4F5C;&#xFF0C;n&#x53EF;&#x4EE5;&#x901A;&#x8FC7;kill -l&#x67E5;&#x8BE2;</td></tr><tr><td>killall p_name</td><td>&#x6740;&#x6B7B;&#x8FDB;&#x7A0B;&#x540D;&#x4E3A;p_name&#x7684;&#x8FDB;&#x7A0B;</td></tr><tr><td>killall p_name</td><td>&#x6740;&#x6B7B;&#x8FDB;&#x7A0B;&#x540D;&#x4E3A;p_name&#x7684;&#x8FDB;&#x7A0B;</td></tr><tr><td>killall p_name</td><td>&#x6740;&#x6B7B;&#x8FDB;&#x7A0B;&#x540D;&#x4E3A;p_name&#x7684;&#x8FDB;&#x7A0B;</td></tr><tr><td>command &amp;</td><td>&#x5C06;&#x547D;&#x4EE4;&#x653E;&#x5728;&#x540E;&#x53F0;&#x6267;&#x884C;</td></tr><tr><td>command + Ctrl + z</td><td>&#x5C06;&#x547D;&#x4EE4;&#x653E;&#x5728;&#x540E;&#x53F0;&#xFF0C;&#x4E14;&#x4E0D;&#x6267;&#x884C;</td></tr><tr><td>jobs</td><td>&#x663E;&#x793A;&#x540E;&#x53F0;&#x7684;&#x8FDB;&#x7A0B;</td></tr><tr><td>jobs -l</td><td>&#x663E;&#x793A;&#x540E;&#x53F0;&#x7684;&#x8FDB;&#x7A0B;&#xFF0C;&#x5E76;&#x663E;&#x793A;PID</td></tr><tr><td>fg</td><td>&#x6062;&#x590D;&#x7B2C;&#x4E00;&#x4E2A;&#x540E;&#x53F0;&#x6682;&#x505C;&#x7684;&#x8FDB;&#x7A0B;&#x5230;&#x524D;&#x53F0;&#x6267;&#x884C;</td></tr><tr><td>fg %work_id</td><td>&#x6062;&#x590D;&#x5DE5;&#x4F5C;&#x53F7;&#x4E3A;work_id&#x540E;&#x53F0;&#x6682;&#x505C;&#x7684;&#x8FDB;&#x7A0B;&#x5230;&#x524D;&#x53F0;&#x6267;&#x884C;&#xFF0C;&#x6CE8;&#x610F;&#x5DE5;&#x4F5C;&#x53F7;&#x548C;PID&#x4E0D;&#x540C;</td></tr><tr><td>bg</td><td>&#x6062;&#x590D;&#x7B2C;&#x4E00;&#x4E2A;&#x540E;&#x53F0;&#x6682;&#x505C;&#x7684;&#x8FDB;&#x7A0B;&#x5230;&#x540E;&#x53F0;&#x6267;&#x884C;</td></tr><tr><td>bg %work_id</td><td>&#x6062;&#x590D;&#x5DE5;&#x4F5C;&#x53F7;&#x4E3A;work_id&#x540E;&#x53F0;&#x6682;&#x505C;&#x7684;&#x8FDB;&#x7A0B;&#x5230;&#x540E;&#x53F0;&#x6267;&#x884C;&#xFF0C;&#x6CE8;&#x610F;&#x5DE5;&#x4F5C;&#x53F7;&#x548C;PID&#x4E0D;&#x540C;</td></tr><tr><td>vmstat flu_time flu_num</td><td>&#x67E5;&#x770B;&#x7CFB;&#x7EDF;&#x8D44;&#x6E90;&#xFF0C;&#x95F4;&#x9694;&#x4E3A;flu_time&#xFF0C;&#x6B21;&#x6570;&#x4E3A;flu_num</td></tr><tr><td>free -b</td><td>&#x4EE5;&#x5B57;&#x8282;&#x4E3A;&#x5355;&#x4F4D;&#x67E5;&#x770B;&#x5185;&#x5B58;&#x4F7F;&#x7528;&#x72B6;&#x6001;</td></tr><tr><td>free -k</td><td>&#x4EE5;KB&#x4E3A;&#x5355;&#x4F4D;&#x67E5;&#x770B;&#x5185;&#x5B58;&#x4F7F;&#x7528;&#x72B6;&#x6001;&#xFF0C;&#x9ED8;&#x8BA4;&#x4EE5;KB&#x4E3A;&#x5355;&#x4F4D;</td></tr><tr><td>free -m</td><td>&#x4EE5;MB&#x4E3A;&#x5355;&#x4F4D;&#x67E5;&#x770B;&#x5185;&#x5B58;&#x4F7F;&#x7528;&#x72B6;&#x6001;</td></tr><tr><td>free -g</td><td>&#x4EE5;GB&#x4E3A;&#x5355;&#x4F4D;&#x67E5;&#x770B;&#x5185;&#x5B58;&#x4F7F;&#x7528;&#x72B6;&#x6001;</td></tr><tr><td>free -b</td><td>&#x4EE5;&#x5B57;&#x8282;&#x4E3A;&#x5355;&#x4F4D;&#x67E5;&#x770B;&#x5185;&#x5B58;&#x4F7F;&#x7528;&#x72B6;&#x6001;</td></tr><tr><td>cat /proc/cpuinfo</td><td>&#x67E5;&#x770B;CPU&#x7684;&#x8BE6;&#x7EC6;&#x4FE1;&#x606F;</td></tr><tr><td>uptime</td><td>&#x663E;&#x793A;&#x7CFB;&#x7EDF;&#x7684;&#x542F;&#x52A8;&#x65F6;&#x95F4;&#x548C;&#x5E73;&#x5747;&#x8D1F;&#x8F7D;</td></tr><tr><td>uptime -a</td><td>&#x67E5;&#x770B;&#x7CFB;&#x7EDF;&#x6240;&#x6709;&#x76F8;&#x5173;&#x4FE1;&#x606F;</td></tr><tr><td>uptime -r</td><td>&#x67E5;&#x770B;&#x5185;&#x6838;&#x7248;&#x672C;</td></tr><tr><td>uptime -s</td><td>&#x67E5;&#x770B;&#x5185;&#x6838;&#x540D;&#x79F0;</td></tr><tr><td>file /bin/ls</td><td>&#x67E5;&#x770B;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x7684;&#x4F4D;&#x6570;</td></tr><tr><td>lsb_release -a</td><td>&#x67E5;&#x8BE2;Linux&#x7684;&#x53D1;&#x884C;&#x7248;&#x672C;</td></tr><tr><td>lsof -c string</td><td>&#x5217;&#x51FA;&#x4EE5;&#x5B57;&#x7B26;&#x4E32;&#x5F00;&#x5934;&#x7684;&#x8FDB;&#x7A0B;&#x6253;&#x5F00;&#x7684;&#x6587;&#x4EF6;</td></tr><tr><td>lsof -u username</td><td>&#x5217;&#x51FA;&#x67D0;&#x4E2A;&#x7528;&#x6237;&#x7684;&#x8FDB;&#x7A0B;&#x6253;&#x5F00;&#x7684;&#x6587;&#x4EF6;</td></tr><tr><td>lsof -p pid</td><td>&#x5217;&#x51FA;&#x67D0;&#x4E2A;PID&#x8FDB;&#x7A0B;&#x6253;&#x5F00;&#x7684;&#x6587;&#x4EF6;</td></tr></tbody></table><p><img src="/images/SKILL/linux18.png" alt="18"></p><h2 id="&#x5B9A;&#x65F6;&#x4EFB;&#x52A1;"><a href="#&#x5B9A;&#x65F6;&#x4EFB;&#x52A1;" class="headerlink" title="&#x5B9A;&#x65F6;&#x4EFB;&#x52A1;"></a><font size="4">&#x5B9A;&#x65F6;&#x4EFB;&#x52A1;</font></h2><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>crontab -e</td><td>&#x7F16;&#x8F91;&#x5B9A;&#x65F6;&#x4EFB;&#x52A1;</td></tr><tr><td>crontab -l</td><td>&#x67E5;&#x8BE2;&#x5B9A;&#x65F6;&#x4EFB;&#x52A1;</td></tr><tr><td>crontab -r</td><td>&#x5220;&#x9664;&#x6240;&#x6709;&#x5B9A;&#x65F6;&#x4EFB;&#x52A1;</td></tr></tbody></table><p>&#x2003;&#x2003;<font size="4" color="red">&#x7F16;&#x8F91;&#x5B9A;&#x65F6;&#x4EFB;&#x52A1;&#x683C;&#x5F0F;</font><br>&#x2003;&#x2003;<font size="3">* * * * * &#x6267;&#x884C;&#x7684;&#x4EFB;&#x52A1;</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E00;&#x4E2A;*&#xFF1A;&#x4E00;&#x5C0F;&#x65F6;&#x5F53;&#x4E2D;&#x7684;&#x7B2C;&#x51E0;&#x5206;&#x949F;(0-59)</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E8C;&#x4E2A;*&#xFF1A;&#x4E00;&#x5929;&#x5F53;&#x4E2D;&#x7684;&#x7B2C;&#x51E0;&#x5C0F;&#x65F6;(0-23)</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E09;&#x4E2A;*&#xFF1A;&#x4E00;&#x4E2A;&#x6708;&#x5F53;&#x4E2D;&#x7684;&#x7B2C;&#x51E0;&#x5929;(1-31)</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x56DB;&#x4E2A;*&#xFF1A;&#x4E00;&#x5E74;&#x5F53;&#x4E2D;&#x7684;&#x7B2C;&#x51E0;&#x6708;(1-12)</font><br>&#x2003;&#x2003;<font size="3">&#x7B2C;&#x4E94;&#x4E2A;*&#xFF1A;&#x4E00;&#x5468;&#x5F53;&#x4E2D;&#x7684;&#x661F;&#x671F;&#x51E0;(0-7)</font></p><p>&#x2003;&#x2003;<font size="4" color="red">&#x7F16;&#x8F91;&#x5B9A;&#x65F6;&#x4EFB;&#x52A1;&#x7279;&#x6B8A;&#x7B26;&#x53F7;</font><br>&#x2003;&#x2003;<font size="3">*&#xFF1A;&#x4EE3;&#x8868;&#x4EFB;&#x4F55;&#x65F6;&#x95F4;</font><br>&#x2003;&#x2003;<font size="3">,&#xFF1A;&#x4EE3;&#x8868;&#x4E0D;&#x8FDE;&#x7EED;&#x65F6;&#x95F4;</font><br>&#x2003;&#x2003;<font size="3">-&#xFF1A;&#x4EE3;&#x8868;&#x8FDE;&#x7EED;&#x7684;&#x65F6;&#x95F4;&#x8303;&#x56F4;</font><br>&#x2003;&#x2003;<font size="3">*/n&#xFF1A;&#x4EE3;&#x8868;&#x6BCF;&#x9694;&#x591A;&#x4E45;&#x6267;&#x884C;&#x4E00;&#x6B21;</font></p><p>&#x2003;&#x2003;<font size="3">&#x7F16;&#x8F91;&#x5B9A;&#x65F6;&#x4EFB;&#x52A1;&#x4F8B;&#x5B50;</font><br>&#x2003;&#x2003;<font size="3">45 22 * * * command&#xFF1A;&#x6BCF;&#x5929;&#x7684;22:45&#x6267;&#x884C;&#x547D;&#x4EE4;</font><br>&#x2003;&#x2003;<font size="3">30 12 * * 1 command&#xFF1A;&#x6BCF;&#x5468;&#x4E00;&#x7684;12:30&#x6267;&#x884C;&#x547D;&#x4EE4;</font><br>&#x2003;&#x2003;<font size="3">0 8,12,16 * * * command&#xFF1A;&#x6BCF;&#x5929;&#x7684;8:00&#xFF0C;12:00&#x548C;16:00&#x90FD;&#x6267;&#x884C;&#x547D;&#x4EE4;</font><br>&#x2003;&#x2003;<font size="3">0 5 * * 1-6 command&#xFF1A;&#x6BCF;&#x5468;&#x4E00;&#x7684;5:00&#x6267;&#x884C;&#x547D;&#x4EE4;</font><br>&#x2003;&#x2003;<font size="3">0/10 4 * * * command&#xFF1A;&#x6BCF;&#x5929;&#x7684;&#x51CC;&#x6668;4&#x70B9;&#xFF0C;&#x6BCF;&#x9694;10&#x5206;&#x949F;&#x6267;&#x884C;&#x4E00;&#x6B21;</font><br>&#x2003;&#x2003;<font size="3">0 0 1,15 * 1 command&#xFF1A;&#x6BCF;&#x5468;&#x4E00;&#x7684;0:00&#x548C;&#x6BCF;&#x4E2A;&#x6708;&#x7684;1&#x53F7;&#x548C;15&#x53F7;&#x90FD;&#x4F1A;&#x6267;&#x884C;&#x547D;&#x4EE4;&#xFF0C;&#x5C3D;&#x91CF;&#x4E0D;&#x8981;&#x8FD9;&#x6837;&#x5199;</font><br><img src="/images/SKILL/linux19.png" alt="19"></p><h2 id="&#x5907;&#x4EFD;&#x4E0E;&#x6062;&#x590D;"><a href="#&#x5907;&#x4EFD;&#x4E0E;&#x6062;&#x590D;" class="headerlink" title="&#x5907;&#x4EFD;&#x4E0E;&#x6062;&#x590D;"></a><font size="4">&#x5907;&#x4EFD;&#x4E0E;&#x6062;&#x590D;</font></h2><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>dump -level</td><td>&#x8BBE;&#x5B9A;level&#x5907;&#x4EFD;&#x7EA7;&#x522B;&#xFF0C;0&#x4E3A;&#x5B8C;&#x5168;&#x5907;&#x4EFD;&#xFF0C;1-9&#x4E3A;&#x589E;&#x91CF;&#x5907;&#x4EFD;&#xFF0C;&#x5BF9;&#x5206;&#x533A;&#x53EF;&#x4EE5;&#x589E;&#x91CF;&#x5907;&#x4EFD;&#xFF0C;&#x5BF9;&#x4E8E;&#x6587;&#x4EF6;&#x6216;&#x76EE;&#x5F55;&#x53EA;&#x80FD;&#x5B8C;&#x5168;&#x5907;&#x4EFD;</td></tr><tr><td>dump -f b_file o_file</td><td>&#x5C06;o_file&#x5907;&#x4EFD;&#x5230;b_file&#x4E2D;</td></tr><tr><td>dump -u</td><td>&#x5907;&#x4EFD;&#x6210;&#x529F;&#x540E;&#xFF0C;&#x628A;&#x5907;&#x4EFD;&#x65F6;&#x95F4;&#x8BB0;&#x5F55;&#x5728;/etc/dumpdates&#x6587;&#x4EF6;</td></tr><tr><td>dump -v</td><td>&#x663E;&#x793A;&#x5907;&#x4EFD;&#x8FC7;&#x7A0B;&#x4E2D;&#x66F4;&#x591A;&#x7684;&#x8F93;&#x51FA;&#x4FE1;&#x606F;</td></tr><tr><td>dump -j</td><td>&#x8C03;&#x7528;bzlib&#x5E93;&#x538B;&#x7F29;&#x5907;&#x4EFD;&#x6587;&#x4EF6;&#xFF0C;&#x5C06;&#x5907;&#x4EFD;&#x6587;&#x4EF6;&#x538B;&#x7F29;&#x4E3A;.bz2&#x683C;&#x5F0F;</td></tr><tr><td>dump -W</td><td>&#x663E;&#x793A;&#x5141;&#x8BB8;&#x88AB;dump&#x7684;&#x5206;&#x533A;&#x7684;&#x5907;&#x4EFD;&#x7B49;&#x7EA7;&#x53CA;&#x5907;&#x4EFD;&#x65F6;&#x95F4;</td></tr><tr><td>restore -C</td><td>&#x6BD4;&#x8F83;&#x5907;&#x4EFD;&#x6570;&#x636E;&#x548C;&#x5B9E;&#x9645;&#x6570;&#x636E;&#x7684;&#x53D8;&#x6362;</td></tr><tr><td>restore -i</td><td>&#x8FDB;&#x5165;&#x4EA4;&#x4E92;&#x6A21;&#x5F0F;&#xFF0C;&#x624B;&#x5DE5;&#x9009;&#x62E9;&#x9700;&#x8981;&#x6062;&#x590D;&#x7684;&#x6587;&#x4EF6;</td></tr><tr><td>restore -t</td><td>&#x67E5;&#x770B;&#x6A21;&#x5F0F;&#xFF0C;&#x7528;&#x4E8E;&#x67E5;&#x770B;&#x5907;&#x4EFD;&#x6587;&#x4EF6;&#x4E2D;&#x62E5;&#x6709;&#x54EA;&#x4E9B;&#x6570;&#x636E;</td></tr><tr><td>restore -r</td><td>&#x8FD8;&#x539F;&#x6A21;&#x5F0F;&#xFF0C;&#x7528;&#x4E8E;&#x6570;&#x636E;&#x8FD8;&#x539F;</td></tr><tr><td>restore -f</td><td>&#x6307;&#x5B9A;&#x5907;&#x4EFD;&#x6587;&#x4EF6;&#x7684;&#x6587;&#x4EF6;&#x540D;</td></tr></tbody></table><h2 id="Shell&#x57FA;&#x7840;"><a href="#Shell&#x57FA;&#x7840;" class="headerlink" title="Shell&#x57FA;&#x7840;"></a><font size="4">Shell&#x57FA;&#x7840;</font></h2><p>&#x2003;&#x2003;<font size="3">Shell&#x662F;&#x4E00;&#x4E2A;&#x547D;&#x4EE4;&#x884C;&#x89E3;&#x91CA;&#x5668;&#xFF0C;&#x4E3A;&#x7528;&#x6237;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x5411;Linux&#x5185;&#x6838;&#x53D1;&#x9001;&#x8BF7;&#x6C42;&#x4EE5;&#x4FBF;&#x8FD0;&#x884C;&#x7A0B;&#x5E8F;&#x7684;&#x7CFB;&#x7EDF;&#x7EA7;&#x7A0B;&#x5E8F;&#xFF0C;&#x7528;&#x6237;&#x53EF;&#x4EE5;&#x7528;Shell&#x542F;&#x52A8;&#xFF0C;&#x6302;&#x8D77;&#xFF0C;&#x505C;&#x6B62;&#x751A;&#x81F3;&#x7F16;&#x5199;&#x7A0B;&#x5E8F;</font></p><p>&#x2003;&#x2003;<font size="3">Shell&#x662F;&#x4E00;&#x4E2A;&#x529F;&#x80FD;&#x5F3A;&#x5927;&#x7684;&#x89E3;&#x91CA;&#x6027;&#x811A;&#x672C;&#x8BED;&#x8A00;&#xFF0C;&#x6613;&#x7F16;&#x5199;&#xFF0C;&#x6613;&#x8C03;&#x8BD5;&#xFF0C;&#x7075;&#x6D3B;&#x6027;&#x5F3A;&#xFF0C;&#x4E14;&#x5728;Shell&#x4E2D;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x8C03;&#x7528;Linux&#x7CFB;&#x7EDF;&#x547D;&#x4EE4;&#x3002;</font></p><p>&#x2003;&#x2003;<font size="3">Bash&#x662F;Linux&#x7684;&#x57FA;&#x672C;Shell&#xFF0C;&#x6267;&#x884C;&#x65F6;&#x4F7F;&#x7528;/&#x6587;&#x4EF6;&#x540D;&#x6216;&#x8005;bash &#x6587;&#x4EF6;&#x540D;</font></p><h3 id="&#x5B9A;&#x4E49;&#x53D8;&#x91CF;"><a href="#&#x5B9A;&#x4E49;&#x53D8;&#x91CF;" class="headerlink" title="&#x5B9A;&#x4E49;&#x53D8;&#x91CF;"></a><font size="3">&#x5B9A;&#x4E49;&#x53D8;&#x91CF;</font></h3><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>var_name=&#x2019;xxx&#x2019;</td><td>&#x5B9A;&#x4E49;&#x53D8;&#x91CF;&#xFF0C;&#x7B49;&#x4E8E;&#x53F7;&#x524D;&#x540E;&#x4E0D;&#x8981;&#x52A0;&#x7A7A;&#x683C;</td></tr><tr><td>$var_name</td><td>&#x8C03;&#x7528;&#x53D8;&#x91CF;</td></tr><tr><td>unset var_name</td><td>&#x5220;&#x9664;&#x53D8;&#x91CF;</td></tr><tr><td>set</td><td>&#x67E5;&#x770B;&#x6240;&#x6709;&#x53D8;&#x91CF;</td></tr><tr><td>echo</td><td>&#x8F93;&#x51FA;</td></tr><tr><td>read -t n var_name</td><td>&#x7ED9;var_name&#x8BFB;&#x5165;&#x4E00;&#x4E2A;&#x503C;&#xFF0C;&#x7B49;&#x5F85;n&#x79D2;</td></tr><tr><td>read -p str var_name</td><td>&#x663E;&#x793A;str&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x518D;&#x7ED9;var_name&#x8BFB;&#x5165;&#x4E00;&#x4E2A;&#x503C;</td></tr></tbody></table><h3 id="&#x4F4D;&#x7F6E;&#x53C2;&#x6570;&#x53D8;&#x91CF;"><a href="#&#x4F4D;&#x7F6E;&#x53C2;&#x6570;&#x53D8;&#x91CF;" class="headerlink" title="&#x4F4D;&#x7F6E;&#x53C2;&#x6570;&#x53D8;&#x91CF;"></a><font size="3">&#x4F4D;&#x7F6E;&#x53C2;&#x6570;&#x53D8;&#x91CF;</font></h3><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>$n</td><td>0&#x4EE3;&#x8868;&#x547D;&#x4EE4;&#x672C;&#x8EAB;&#xFF0C;1-9&#x4EE3;&#x8868;&#x7B2C;&#x4E00;&#x5230;&#x7B2C;&#x4E5D;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;10&#x4EE5;&#x4E0A;&#x8981;&#x7528;{}&#x62EC;&#x8D77;&#x6765;</td></tr><tr><td>$*</td><td>&#x6240;&#x6709;&#x53C2;&#x6570;&#xFF0C;&#x770B;&#x4F5C;&#x4E00;&#x4E2A;&#x6574;&#x4F53;</td></tr><tr><td>$@</td><td>&#x6240;&#x6709;&#x53C2;&#x6570;&#xFF0C;&#x6BCF;&#x4E2A;&#x53C2;&#x6570;&#x5206;&#x5F00;&#x5BF9;&#x5F85;</td></tr><tr><td>$#</td><td>&#x6240;&#x6709;&#x53C2;&#x6570;&#x7684;&#x4E2A;&#x6570;</td></tr></tbody></table><h3 id="&#x9884;&#x5B9A;&#x4E49;&#x53D8;&#x91CF;"><a href="#&#x9884;&#x5B9A;&#x4E49;&#x53D8;&#x91CF;" class="headerlink" title="&#x9884;&#x5B9A;&#x4E49;&#x53D8;&#x91CF;"></a><font size="3">&#x9884;&#x5B9A;&#x4E49;&#x53D8;&#x91CF;</font></h3><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>$?</td><td>&#x5224;&#x65AD;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x6267;&#x884C;&#x547D;&#x4EE4;&#x7684;&#x8FD4;&#x56DE;&#x72B6;&#x6001;&#xFF0C;&#x4E3A;0&#x5219;&#x6B63;&#x786E;&#xFF0C;&#x5426;&#x5219;&#x9519;&#x8BEF;</td></tr><tr><td>$$</td><td>&#x5F53;&#x524D;&#x8FDB;&#x7A0B;&#x7684;&#x8FDB;&#x7A0B;&#x53F7;(PID)</td></tr><tr><td>$!</td><td>&#x540E;&#x53F0;&#x8FD0;&#x884C;&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x7684;&#x8FDB;&#x7A0B;&#x53F7;</td></tr></tbody></table><h3 id="&#x58F0;&#x660E;&#x53D8;&#x91CF;&#x7C7B;&#x578B;"><a href="#&#x58F0;&#x660E;&#x53D8;&#x91CF;&#x7C7B;&#x578B;" class="headerlink" title="&#x58F0;&#x660E;&#x53D8;&#x91CF;&#x7C7B;&#x578B;"></a><font size="3">&#x58F0;&#x660E;&#x53D8;&#x91CF;&#x7C7B;&#x578B;</font></h3><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>declare - var_name</td><td>&#x7ED9;&#x53D8;&#x91CF;&#x8BBE;&#x5B9A;&#x7C7B;&#x578B;&#x5C5E;&#x6027;</td></tr><tr><td>declare + var_name</td><td>&#x53D6;&#x6D88;&#x53D8;&#x91CF;&#x7684;&#x7C7B;&#x578B;&#x5C5E;&#x6027;</td></tr><tr><td>declare -i var_name</td><td>&#x5C06;&#x53D8;&#x91CF;&#x58F0;&#x660E;&#x4E3A;&#x6574;&#x578B;</td></tr><tr><td>declare -x var_name</td><td>&#x5C06;&#x53D8;&#x91CF;&#x58F0;&#x660E;&#x4E3A;&#x73AF;&#x5883;&#x53D8;&#x91CF;</td></tr><tr><td>declare -p var_name</td><td>&#x663E;&#x793A;&#x53D8;&#x91CF;&#x7684;&#x7C7B;&#x578B;</td></tr></tbody></table><p>&#x2003;&#x2003;<font size="3">Linux&#x4E2D;&#x7684;&#x53D8;&#x91CF;&#x90FD;&#x9ED8;&#x8BA4;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#x578B;&#xFF0C;&#x6570;&#x503C;&#x8FD0;&#x7B97;&#x65F6;&#x8981;&#x91C7;&#x7528;var_name=$((&#x8FD0;&#x7B97;&#x5F0F;))&#x7684;&#x683C;&#x5F0F;&#x3002;</font><br><img src="/images/SKILL/linux10.png" alt="10"></p><h3 id="&#x6761;&#x4EF6;&#x5224;&#x65AD;"><a href="#&#x6761;&#x4EF6;&#x5224;&#x65AD;" class="headerlink" title="&#x6761;&#x4EF6;&#x5224;&#x65AD;"></a><font size="3">&#x6761;&#x4EF6;&#x5224;&#x65AD;</font></h3><table><thead><tr><th>&#x547D;&#x4EE4;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>[ -d filename ]</td><td>&#x6CE8;&#x610F;&#x4E2D;&#x62EC;&#x53F7;&#x524D;&#x540E;&#x90FD;&#x6709;&#x7A7A;&#x683C;&#xFF0C;&#x5224;&#x65AD;&#x6587;&#x4EF6;&#x662F;&#x5426;&#x5B58;&#x5728;&#xFF0C;&#x5E76;&#x4E14;&#x662F;&#x5426;&#x4E3A;&#x76EE;&#x5F55;&#x6587;&#x4EF6;&#xFF0C;&#x662F;&#x76EE;&#x5F55;&#x6587;&#x4EF6;&#x4E3A;&#x771F;</td></tr><tr><td>[ -e filename ]</td><td>&#x5224;&#x65AD;&#x6587;&#x4EF6;&#x662F;&#x5426;&#x5B58;&#x5728;&#xFF0C;&#x5B58;&#x5728;&#x4E3A;&#x771F;</td></tr><tr><td>[ -f filename ]</td><td>&#x5224;&#x65AD;&#x6587;&#x4EF6;&#x662F;&#x5426;&#x5B58;&#x5728;&#xFF0C;&#x5E76;&#x4E14;&#x662F;&#x5426;&#x4E3A;&#x666E;&#x901A;&#x6587;&#x4EF6;&#xFF0C;&#x662F;&#x666E;&#x901A;&#x6587;&#x4EF6;&#x4E3A;&#x771F;</td></tr><tr><td>[ -r filename ]</td><td>&#x5224;&#x65AD;&#x6587;&#x4EF6;&#x662F;&#x5426;&#x5B58;&#x5728;&#xFF0C;&#x5E76;&#x4E14;&#x662F;&#x5426;&#x5177;&#x6709;&#x8BFB;&#x6743;&#x9650;(&#x65E0;&#x8BBA;&#x662F;&#x62E5;&#x6709;&#x8005;&#x8FD8;&#x662F;&#x6240;&#x5C5E;&#x7EC4;&#x8FD8;&#x662F;&#x5176;&#x4ED6;&#x7528;&#x6237;&#xFF0C;&#x53EA;&#x8981;&#x6709;&#x5C31;&#x4E3A;&#x771F;)</td></tr><tr><td>[ -w filename ]</td><td>&#x5224;&#x65AD;&#x6587;&#x4EF6;&#x662F;&#x5426;&#x5B58;&#x5728;&#xFF0C;&#x5E76;&#x4E14;&#x662F;&#x5426;&#x5177;&#x6709;&#x5199;&#x6743;&#x9650;</td></tr><tr><td>[ -x filename ]</td><td>&#x5224;&#x65AD;&#x6587;&#x4EF6;&#x662F;&#x5426;&#x5B58;&#x5728;&#xFF0C;&#x5E76;&#x4E14;&#x662F;&#x5426;&#x5177;&#x6709;&#x6267;&#x884C;&#x6743;&#x9650;</td></tr><tr><td>[ filename1 -nt filename2 ]</td><td>&#x5224;&#x65AD;&#x6587;&#x4EF6;1&#x662F;&#x5426;&#x6BD4;&#x6587;&#x4EF6;2&#x65B0;(&#x4FEE;&#x6539;&#x65F6;&#x95F4;)</td></tr><tr><td>[ filename1 -ot filename2 ]</td><td>&#x5224;&#x65AD;&#x6587;&#x4EF6;1&#x662F;&#x5426;&#x6BD4;&#x6587;&#x4EF6;2&#x65E7;</td></tr><tr><td>[ filename1 -ef filename2 ]</td><td>&#x5224;&#x65AD;&#x6587;&#x4EF6;1&#x548C;&#x6587;&#x4EF6;2&#x7684;i&#x8282;&#x70B9;&#x662F;&#x5426;&#x4E00;&#x81F4;&#xFF0C;&#x53EF;&#x4EE5;&#x5224;&#x65AD;&#x786C;&#x94FE;&#x63A5;</td></tr><tr><td>[ int1 -eq int2 ]</td><td>&#x5224;&#x65AD;&#x6574;&#x6570;1&#x662F;&#x5426;&#x7B49;&#x4E8E;&#x6574;&#x6570;2</td></tr><tr><td>[ int1 -ne int2 ]</td><td>&#x5224;&#x65AD;&#x6574;&#x6570;1&#x662F;&#x5426;&#x4E0D;&#x7B49;&#x4E8E;&#x6574;&#x6570;2</td></tr><tr><td>[ int1 -gt int2 ]</td><td>&#x5224;&#x65AD;&#x6574;&#x6570;1&#x662F;&#x5426;&#x5927;&#x4E8E;&#x6574;&#x6570;2</td></tr><tr><td>[ int1 -lt int2 ]</td><td>&#x5224;&#x65AD;&#x6574;&#x6570;1&#x662F;&#x5426;&#x5C0F;&#x4E8E;&#x6574;&#x6570;2</td></tr><tr><td>[ int1 -ge int2 ]</td><td>&#x5224;&#x65AD;&#x6574;&#x6570;1&#x662F;&#x5426;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;&#x6574;&#x6570;2</td></tr><tr><td>[ int1 -le int2 ]</td><td>&#x5224;&#x65AD;&#x6574;&#x6570;1&#x662F;&#x5426;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;&#x6574;&#x6570;2</td></tr><tr><td>[ -z str ]</td><td>&#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x4E3A;&#x7A7A;</td></tr><tr><td>[ -n str ]</td><td>&#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x975E;&#x7A7A;</td></tr><tr><td>[ str1==str2 ]</td><td>&#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;1&#x662F;&#x5426;&#x7B49;&#x4E8E;&#x5B57;&#x7B26;&#x4E32;2</td></tr><tr><td>[ str1!=str2 ]</td><td>&#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;1&#x662F;&#x5426;&#x4E0D;&#x7B49;&#x4E8E;&#x5B57;&#x7B26;&#x4E32;2</td></tr><tr><td>[ judge1 -a judge2 ]</td><td>&#x903B;&#x8F91;&#x4E0E;&#xFF0C;&#x5224;&#x65AD;1&#x548C;&#x5224;&#x65AD;2&#x90FD;&#x4E3A;&#x771F;&#x5219;&#x4E3A;&#x771F;</td></tr><tr><td>[ judge1 -o judge2 ]</td><td>&#x903B;&#x8F91;&#x6216;&#xFF0C;&#x5224;&#x65AD;1&#x548C;&#x5224;&#x65AD;2&#x90FD;&#x4E3A;&#x5047;&#x5219;&#x4E3A;&#x5047;</td></tr><tr><td>[ !judge ]</td><td>&#x903B;&#x8F91;&#x975E;&#xFF0C;&#x5224;&#x65AD;&#x53D6;&#x53CD;</td></tr></tbody></table><p><img src="/images/SKILL/linux12.png" alt="12"></p><h3 id="&#x6D41;&#x7A0B;&#x63A7;&#x5236;"><a href="#&#x6D41;&#x7A0B;&#x63A7;&#x5236;" class="headerlink" title="&#x6D41;&#x7A0B;&#x63A7;&#x5236;"></a><font size="3">&#x6D41;&#x7A0B;&#x63A7;&#x5236;</font></h3><p>&#x2003;&#x2003;<font size="3">Linux&#x4E2D;Shell&#x811A;&#x672C;&#x7684;&#x7B2C;&#x4E00;&#x53E5;&#x4E3A;#!bin/bash&#xFF0C;&#x8BF4;&#x660E;&#x4E0B;&#x9762;&#x7684;&#x5185;&#x5BB9;&#x90FD;&#x662F;Shell&#x811A;&#x672C;&#x3002;</font></p><p>&#x2003;&#x2003;<font size="3">&#x6267;&#x884C;&#x811A;&#x672C;&#x65F6;&#xFF0C;&#x5148;&#x5C06;&#x6587;&#x4EF6;&#x7684;&#x6743;&#x9650;&#x53D8;&#x4E3A;&#x53EF;&#x6267;&#x884C;&#x6587;&#x4EF6;&#xFF0C;&#x7136;&#x540E;./filename&#x6216;&#x8005;&#x76F4;&#x63A5;&#x4F7F;&#x7528;bash filename</font></p><h3 id="if&#x6761;&#x4EF6;&#x6D41;&#x7A0B;&#x63A7;&#x5236;"><a href="#if&#x6761;&#x4EF6;&#x6D41;&#x7A0B;&#x63A7;&#x5236;" class="headerlink" title="if&#x6761;&#x4EF6;&#x6D41;&#x7A0B;&#x63A7;&#x5236;"></a><font size="3">if&#x6761;&#x4EF6;&#x6D41;&#x7A0B;&#x63A7;&#x5236;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># &#x5355;&#x5206;&#x652F;if&#x6761;&#x4EF6;&#x8BED;&#x53E5;&#x683C;&#x5F0F;</span><br><span class="line"># if [ condition ]</span><br><span class="line">#     then</span><br><span class="line">#         &#x7A0B;&#x5E8F;</span><br><span class="line"># fi</span><br><span class="line"># &#x5982;&#x679C;condition&#x6210;&#x7ACB;&#x5219;&#x6267;&#x884C;&#x7A0B;&#x5E8F;&#xFF0C;&#x5426;&#x5219;&#x4E0D;&#x6267;&#x884C;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># &#x53CC;&#x5206;&#x652F;if&#x6761;&#x4EF6;&#x8BED;&#x53E5;&#x683C;&#x5F0F;</span><br><span class="line"># if [ condition ]</span><br><span class="line">#     then</span><br><span class="line">#         &#x7A0B;&#x5E8F;1</span><br><span class="line">#     else</span><br><span class="line">#         &#x7A0B;&#x5E8F;2</span><br><span class="line"># fi</span><br><span class="line"># &#x5982;&#x679C;condition&#x6210;&#x7ACB;&#x5219;&#x6267;&#x884C;&#x7A0B;&#x5E8F;1&#xFF0C;&#x5426;&#x5219;&#x6267;&#x884C;&#x7A0B;&#x5E8F;2</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/linux13.png" alt="13"></p><h3 id="case&#x6761;&#x4EF6;&#x6D41;&#x7A0B;&#x63A7;&#x5236;"><a href="#case&#x6761;&#x4EF6;&#x6D41;&#x7A0B;&#x63A7;&#x5236;" class="headerlink" title="case&#x6761;&#x4EF6;&#x6D41;&#x7A0B;&#x63A7;&#x5236;"></a><font size="3">case&#x6761;&#x4EF6;&#x6D41;&#x7A0B;&#x63A7;&#x5236;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># &#x591A;&#x5206;&#x652F;case&#x6761;&#x4EF6;&#x8BED;&#x53E5;</span><br><span class="line"># case $&#x53D8;&#x91CF;&#x540D; in</span><br><span class="line">#     &quot;value1&quot;)</span><br><span class="line">#         &#x7A0B;&#x5E8F;1</span><br><span class="line">#         ;;</span><br><span class="line">#     &quot;value2&quot;)</span><br><span class="line">#         &#x7A0B;&#x5E8F;2</span><br><span class="line">#         ;;</span><br><span class="line">#     *)</span><br><span class="line">#         &#x7A0B;&#x5E8F;n</span><br><span class="line">#         ;;</span><br><span class="line"># esac</span><br><span class="line"># &#x5982;&#x679C;&#x53D8;&#x91CF;&#x7684;&#x503C;&#x4E3A;value1&#x6267;&#x884C;&#x7A0B;&#x5E8F;1&#xFF0C;&#x53D8;&#x91CF;&#x503C;&#x4E3A;value2&#x6267;&#x884C;&#x7A0B;&#x5E8F;2&#xFF0C;...&#xFF0C;&#x5982;&#x679C;&#x90FD;&#x4E0D;&#x7B49;&#x4E8E;&#x5219;&#x6267;&#x884C;&#x7A0B;&#x5E8F;n</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/linux15.png" alt="15"></p><h3 id="for&#x5FAA;&#x73AF;&#x6D41;&#x7A0B;&#x63A7;&#x5236;"><a href="#for&#x5FAA;&#x73AF;&#x6D41;&#x7A0B;&#x63A7;&#x5236;" class="headerlink" title="for&#x5FAA;&#x73AF;&#x6D41;&#x7A0B;&#x63A7;&#x5236;"></a><font size="3">for&#x5FAA;&#x73AF;&#x6D41;&#x7A0B;&#x63A7;&#x5236;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># for &#x53D8;&#x91CF; in value1 value2 ...</span><br><span class="line">#     do</span><br><span class="line">#         &#x7A0B;&#x5E8F;</span><br><span class="line">#     done</span><br><span class="line"># &#x548C;Python&#x8BED;&#x8A00;&#x7684;for&#x5FAA;&#x73AF;&#x7C7B;&#x4F3C;&#xFF0C;&#x5C06;value1&#xFF0C;value2&#xFF0C;...&#xFF0C;&#x4F9D;&#x6B21;&#x5E26;&#x5165;&#x7A0B;&#x5E8F;&#xFF0C;&#x4E0D;&#x540C;value&#x4E4B;&#x95F4;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># for ((&#x521D;&#x59CB;&#x503C;;&#x5FAA;&#x73AF;&#x63A7;&#x5236;&#x6761;&#x4EF6;;&#x53D8;&#x91CF;&#x53D8;&#x6362;))</span><br><span class="line">#     do</span><br><span class="line">#         &#x7A0B;&#x5E8F;</span><br><span class="line">#     done</span><br><span class="line"># &#x548C;C&#x8BED;&#x8A00;&#x7684;for&#x5FAA;&#x73AF;&#x7C7B;&#x4F3C;&#xFF0C;&#x5C06;&#x53D8;&#x91CF;&#x5E26;&#x5165;&#x7A0B;&#x5E8F;&#xFF0C;&#x6BCF;&#x6B21;&#x5FAA;&#x73AF;&#x7ED3;&#x675F;&#x65F6;&#x66F4;&#x6539;&#x53D8;&#x91CF;&#x7684;&#x503C;&#xFF0C;&#x5E76;&#x4E14;&#x5224;&#x65AD;&#x5FAA;&#x73AF;&#x6761;&#x4EF6;&#x662F;&#x5426;&#x6EE1;&#x8DB3;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/linux14.png" alt="14"></p><h3 id="while&#x5FAA;&#x73AF;&#x6D41;&#x7A0B;&#x63A7;&#x5236;"><a href="#while&#x5FAA;&#x73AF;&#x6D41;&#x7A0B;&#x63A7;&#x5236;" class="headerlink" title="while&#x5FAA;&#x73AF;&#x6D41;&#x7A0B;&#x63A7;&#x5236;"></a><font size="3">while&#x5FAA;&#x73AF;&#x6D41;&#x7A0B;&#x63A7;&#x5236;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># while [ condition ]</span><br><span class="line">#     do</span><br><span class="line">#         &#x7A0B;&#x5E8F;</span><br><span class="line">#     done</span><br><span class="line"># &#x5982;&#x679C;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#x5219;&#x8FDB;&#x5165;&#x5FAA;&#x73AF;&#xFF0C;&#x6BCF;&#x6B21;&#x5FAA;&#x73AF;&#x7ED3;&#x675F;&#x8981;&#x91CD;&#x65B0;&#x5224;&#x65AD;&#x662F;&#x5426;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/linux16.png" alt="16"></p><h3 id="until&#x5FAA;&#x73AF;&#x6D41;&#x7A0B;&#x63A7;&#x5236;"><a href="#until&#x5FAA;&#x73AF;&#x6D41;&#x7A0B;&#x63A7;&#x5236;" class="headerlink" title="until&#x5FAA;&#x73AF;&#x6D41;&#x7A0B;&#x63A7;&#x5236;"></a><font size="3">until&#x5FAA;&#x73AF;&#x6D41;&#x7A0B;&#x63A7;&#x5236;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># until [ condition ]</span><br><span class="line">#     do</span><br><span class="line">#         &#x7A0B;&#x5E8F;</span><br><span class="line">#     done</span><br><span class="line"># &#x5982;&#x679C;&#x4E0D;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#x5219;&#x8FDB;&#x5165;&#x5FAA;&#x73AF;&#xFF0C;&#x6BCF;&#x6B21;&#x5FAA;&#x73AF;&#x7ED3;&#x675F;&#x8981;&#x91CD;&#x65B0;&#x5224;&#x65AD;&#x662F;&#x5426;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/linux17.png" alt="17"></p><h1 id="Linux&#x5C0F;&#x7ED3;"><a href="#Linux&#x5C0F;&#x7ED3;" class="headerlink" title="Linux&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Linux&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x56E0;&#x4E3A;Linux&#x7684;&#x5B89;&#x5168;&#x6027;&#x548C;&#x5F00;&#x6E90;&#x7279;&#x6027;&#xFF0C;&#x4F7F;&#x5F97;Linux&#x53D7;&#x5230;&#x5E7F;&#x6CDB;&#x7684;&#x9752;&#x7750;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x5728;&#x516C;&#x53F8;&#x5C42;&#x9762;&#x3002;&#x5728;&#x4E2A;&#x4EBA;&#x673A;&#x4E0A;&#xFF0C;&#x591A;&#x6570;&#x4EBA;&#x4E3A;&#x4E86;&#x4F7F;&#x7528;&#x65B9;&#x4FBF;&#xFF0C;&#x91C7;&#x7528;Windows&#x7CFB;&#x7EDF;&#x3002;&#x4F46;&#x662F;&#x4E3A;&#x4E86;&#x516C;&#x53F8;&#x670D;&#x52A1;&#x5668;&#x8FD0;&#x7EF4;&#x7A33;&#x5B9A;&#xFF0C;&#x53EF;&#x9760;&#xFF0C;&#x65B9;&#x4FBF;&#xFF0C;Linux&#x662F;&#x4F7F;&#x7528;&#x6700;&#x5E7F;&#x6CDB;&#x7684;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x3002;&#x56E0;&#x6B64;&#x5B66;&#x4F1A;Linux&#x662F;&#x7A0B;&#x5E8F;&#x5458;&#x7684;&#x5FC5;&#x4FEE;&#x8BFE;&#x4E4B;&#x4E00;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Linux&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="程序员必备技能" scheme="https://USTCcoder.github.io/categories/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>Vim(文本编辑器)</title>
    <link href="https://USTCcoder.github.io/2019/09/22/skill%20Vim/"/>
    <id>https://USTCcoder.github.io/2019/09/22/skill Vim/</id>
    <published>2019-09-22T04:28:20.000Z</published>
    <updated>2019-09-26T06:25:20.389Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">Vim</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"><a href="#&#x539F;&#x7406;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x539F;&#x7406;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>Vim</strong>&#x662F;&#x4E00;&#x4E2A;&#x7C7B;&#x4F3C;&#x4E8E;Vi&#x7684;&#x8457;&#x540D;&#x7684;&#x529F;&#x80FD;&#x5F3A;&#x5927;&#x3001;&#x9AD8;&#x5EA6;&#x53EF;&#x5B9A;&#x5236;&#x7684;<strong>&#x6587;&#x672C;&#x7F16;&#x8F91;&#x5668;</strong>&#x3002;&#x4EE3;&#x7801;&#x8865;&#x5168;&#x3001;&#x7F16;&#x8BD1;&#x53CA;&#x9519;&#x8BEF;&#x8DF3;&#x8F6C;&#x7B49;&#x65B9;&#x4FBF;&#x7F16;&#x7A0B;&#x7684;<strong>&#x529F;&#x80FD;&#x7279;&#x522B;&#x4E30;&#x5BCC;</strong>&#xFF0C;&#x5728;&#x7A0B;&#x5E8F;&#x5458;&#x4E2D;&#x88AB;&#x5E7F;&#x6CDB;&#x4F7F;&#x7528;&#xFF0C;&#x662F;<strong>&#x7C7B;Unix</strong>&#x7CFB;&#x7EDF;&#x7528;&#x6237;&#x6700;&#x559C;&#x6B22;&#x7684;&#x6587;&#x672C;&#x7F16;&#x8F91;&#x5668;&#x3002;<br><a id="more"></a></p><h1 id="Vim&#x7279;&#x70B9;"><a href="#Vim&#x7279;&#x70B9;" class="headerlink" title="Vim&#x7279;&#x70B9;"></a><font size="5" color="red">Vim&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">&#x89E3;&#x653E;&#x7A0B;&#x5E8F;&#x5458;&#x7684;&#x53CC;&#x624B;&#xFF0C;&#x8FD9;&#x4E00;&#x70B9;&#x975E;&#x5E38;&#x91CD;&#x8981;&#xFF0C;&#x4F7F;&#x5F97;&#x7A0B;&#x5E8F;&#x5458;&#x5728;&#x7F16;&#x8F91;&#x6587;&#x6863;&#x65F6;&#x53EF;&#x4EE5;&#x4E0D;&#x518D;&#x4F9D;&#x8D56;&#x4E8E;&#x9F20;&#x6807;</font><br>&#x2003;&#x2003;<font size="3">Vim&#x5177;&#x6709;&#x9AD8;&#x6548;&#x7387;&#x7684;&#x79FB;&#x52A8;&#xFF0C;&#x5728;&#x884C;&#x5185;&#xFF0C;&#x6587;&#x4EF6;&#x5185;&#x53EF;&#x4EE5;&#x968F;&#x610F;&#x7684;&#x79FB;&#x52A8;&#xFF0C;&#x53EF;&#x4EE5;&#x8282;&#x7EA6;&#x5927;&#x91CF;&#x65F6;&#x95F4;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">Vim&#x5177;&#x6709;&#x9AD8;&#x6548;&#x7387;&#x7684;&#x8F93;&#x5165;&#xFF0C;&#x53EF;&#x4EE5;&#x6709;&#x5F88;&#x591A;&#x7684;&#x63D2;&#x5165;&#x65B9;&#x5F0F;&#xFF0C;&#x590D;&#x5236;&#xFF0C;&#x7C98;&#x8D34;&#xFF0C;&#x526A;&#x5207;&#x90FD;&#x975E;&#x5E38;&#x65B9;&#x4FBF;&#x3002;</font></p><h1 id="Vim&#x5173;&#x7CFB;&#x56FE;"><a href="#Vim&#x5173;&#x7CFB;&#x56FE;" class="headerlink" title="Vim&#x5173;&#x7CFB;&#x56FE;"></a><font size="5" color="red">Vim&#x5173;&#x7CFB;&#x56FE;</font></h1><p><img src="/images/SKILL/Vim2.png" alt="2"></p><h1 id="Vim&#x5E94;&#x7528;"><a href="#Vim&#x5E94;&#x7528;" class="headerlink" title="Vim&#x5E94;&#x7528;"></a><font size="5" color="red">Vim&#x5E94;&#x7528;</font></h1><p><img src="/images/SKILL/Vim1.png" alt="1"></p><h2 id="&#x8FDB;&#x5165;Vim"><a href="#&#x8FDB;&#x5165;Vim" class="headerlink" title="&#x8FDB;&#x5165;Vim"></a><font size="4">&#x8FDB;&#x5165;Vim</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5728;&#x7EC8;&#x7AEF;&#x4E2D;&#x8F93;&#x5165;vim filename &#x8FDB;&#x5165;Vim&#xFF0C;&#x5982;&#x679C;&#x5B58;&#x5728;&#x8BE5;&#x6587;&#x4EF6;&#x5219;&#x7F16;&#x8F91;&#x8BE5;&#x6587;&#x4EF6;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x5B58;&#x5728;&#x8BE5;&#x6587;&#x4EF6;&#x5219;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x6587;&#x4EF6;&#x5E76;&#x7F16;&#x8F91;&#x8BE5;&#x6587;&#x4EF6;</font></p><h2 id="&#x63D2;&#x5165;"><a href="#&#x63D2;&#x5165;" class="headerlink" title="&#x63D2;&#x5165;"></a><font size="4">&#x63D2;&#x5165;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x4E00;&#x822C;&#x662F;&#x7531;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x8FDB;&#x5165;&#x63D2;&#x5165;&#x6A21;&#x5F0F;</font></p><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>a</td><td>&#x5728;&#x5149;&#x6807;&#x6240;&#x5728;&#x5B57;&#x7B26;&#x540E;&#x63D2;&#x5165;</td></tr><tr><td>A</td><td>&#x5728;&#x5149;&#x6807;&#x6240;&#x5728;&#x884C;&#x5C3E;&#x63D2;&#x5165;</td></tr><tr><td>i</td><td>&#x5728;&#x5149;&#x6807;&#x6240;&#x5728;&#x5B57;&#x7B26;&#x524D;&#x63D2;&#x5165;</td></tr><tr><td>I</td><td>&#x5728;&#x5149;&#x6807;&#x6240;&#x5728;&#x884C;&#x9996;&#x63D2;&#x5165;</td></tr><tr><td>o</td><td>&#x5728;&#x5149;&#x6807;&#x4E0B;&#x63D2;&#x5165;&#x65B0;&#x884C;</td></tr><tr><td>O</td><td>&#x5728;&#x5149;&#x6807;&#x4E0A;&#x63D2;&#x5165;&#x65B0;&#x884C;</td></tr></tbody></table><h2 id="&#x5149;&#x6807;&#x79FB;&#x52A8;"><a href="#&#x5149;&#x6807;&#x79FB;&#x52A8;" class="headerlink" title="&#x5149;&#x6807;&#x79FB;&#x52A8;"></a><font size="4">&#x5149;&#x6807;&#x79FB;&#x52A8;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B;</font></p><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>k</td><td>&#x5149;&#x6807;&#x5411;&#x4E0A;&#x79FB;&#x52A8;&#x4E00;&#x884C;</td></tr><tr><td>nk</td><td>&#x5149;&#x6807;&#x5411;&#x4E0A;&#x79FB;&#x52A8;n&#x884C;</td></tr><tr><td>j</td><td>&#x5149;&#x6807;&#x5411;&#x4E0B;&#x79FB;&#x52A8;&#x4E00;&#x884C;</td></tr><tr><td>nj</td><td>&#x5149;&#x6807;&#x5411;&#x4E0B;&#x79FB;&#x52A8;n&#x884C;</td></tr><tr><td>h</td><td>&#x5149;&#x6807;&#x5411;&#x5DE6;&#x79FB;&#x52A8;&#x4E00;&#x884C;</td></tr><tr><td>nh</td><td>&#x5149;&#x6807;&#x5411;&#x5DE6;&#x79FB;&#x52A8;n&#x884C;</td></tr><tr><td>l</td><td>&#x5149;&#x6807;&#x5411;&#x53F3;&#x79FB;&#x52A8;&#x4E00;&#x884C;</td></tr><tr><td>nl</td><td>&#x5149;&#x6807;&#x5411;&#x53F3;&#x79FB;&#x52A8;n&#x884C;</td></tr></tbody></table><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>b</td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x524D;&#x4E00;&#x4E2A;&#x5355;&#x8BCD;&#x7684;&#x9996;&#x5B57;&#x6BCD;&#x4E0A;</td></tr><tr><td>nb</td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x524D;n&#x4E2A;&#x5355;&#x8BCD;&#x7684;&#x9996;&#x5B57;&#x6BCD;&#x4E0A;</td></tr><tr><td>w</td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x540E;&#x4E00;&#x4E2A;&#x5355;&#x8BCD;&#x7684;&#x9996;&#x5B57;&#x6BCD;&#x4E0A;</td></tr><tr><td>nw</td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x540E;n&#x4E2A;&#x5355;&#x8BCD;&#x7684;&#x9996;&#x5B57;&#x6BCD;&#x4E0A;</td></tr><tr><td>ge</td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x524D;&#x4E00;&#x4E2A;&#x5355;&#x8BCD;&#x7684;&#x5C3E;&#x5B57;&#x6BCD;&#x4E0A;</td></tr><tr><td>nge</td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x524D;n&#x4E2A;&#x5355;&#x8BCD;&#x7684;&#x5C3E;&#x5B57;&#x6BCD;&#x4E0A;</td></tr><tr><td>e</td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x540E;&#x4E00;&#x4E2A;&#x5355;&#x8BCD;&#x7684;&#x5C3E;&#x5B57;&#x6BCD;&#x4E0A;</td></tr><tr><td>ne</td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x540E;n&#x4E2A;&#x5355;&#x8BCD;&#x7684;&#x5C3E;&#x5B57;&#x6BCD;&#x4E0A;</td></tr><tr><td>n<space></space></td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x540E;n&#x4E2A;&#x5B57;&#x7B26;&#x4E0A;</td></tr></tbody></table><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>gg</td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x7B2C;&#x4E00;&#x884C;&#x9996;</td></tr><tr><td>G</td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x6700;&#x540E;&#x4E00;&#x884C;&#x9996;</td></tr><tr><td>ngg&#x6216;nG&#x6216;:n</td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x7B2C;n&#x884C;&#x9996;</td></tr><tr><td>-</td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x4E0A;&#x4E00;&#x884C;&#x884C;&#x9996;</td></tr><tr><td>n-</td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x4E0A;n&#x884C;&#x884C;&#x9996;</td></tr><tr><td>+</td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x4E0B;&#x4E00;&#x884C;&#x884C;&#x9996;</td></tr><tr><td>n+</td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x4E0B;n&#x884C;&#x884C;&#x9996;</td></tr><tr><td>0</td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x8BE5;&#x884C;&#x884C;&#x9996;</td></tr><tr><td>$</td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x8BE5;&#x884C;&#x884C;&#x5C3E;</td></tr><tr><td>n$</td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x4E0B;n&#x884C;&#x884C;&#x5C3E;</td></tr><tr><td>^</td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x8BE5;&#x884C;&#x9996;&#x5B57;&#x6BCD;</td></tr></tbody></table><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>Home</td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x8BE5;&#x884C;&#x884C;&#x9996;(&#x53EF;&#x4EE5;&#x5728;&#x63D2;&#x5165;&#x6A21;&#x5F0F;&#x4E0B;&#x4F7F;&#x7528;)</td></tr><tr><td>End</td><td>&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x8BE5;&#x884C;&#x884C;&#x5C3E;(&#x53EF;&#x4EE5;&#x5728;&#x63D2;&#x5165;&#x6A21;&#x5F0F;&#x4E0B;&#x4F7F;&#x7528;)</td></tr></tbody></table><h2 id="&#x5220;&#x9664;-&#x526A;&#x5207;-&#x5B57;&#x7B26;"><a href="#&#x5220;&#x9664;-&#x526A;&#x5207;-&#x5B57;&#x7B26;" class="headerlink" title="&#x5220;&#x9664;(&#x526A;&#x5207;)&#x5B57;&#x7B26;"></a><font size="4">&#x5220;&#x9664;(&#x526A;&#x5207;)&#x5B57;&#x7B26;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B;</font></p><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>x</td><td>&#x5220;&#x9664;&#x5149;&#x6807;&#x6240;&#x5728;&#x5B57;&#x7B26;</td></tr><tr><td>nx</td><td>&#x5220;&#x9664;&#x5149;&#x6807;&#x5904;&#x53CA;&#x540E;n-1&#x4E2A;&#x5B57;&#x7B26;</td></tr><tr><td>X</td><td>&#x5220;&#x9664;&#x5149;&#x6807;&#x524D;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;</td></tr><tr><td>nX</td><td>&#x5220;&#x9664;&#x5149;&#x6807;&#x524D;n&#x4E2A;&#x5B57;&#x7B26;</td></tr><tr><td>dd</td><td>&#x5220;&#x9664;&#x5149;&#x6807;&#x6240;&#x5728;&#x884C;</td></tr><tr><td>ndd</td><td>&#x5220;&#x9664;&#x5149;&#x6807;&#x6240;&#x5728;&#x884C;&#x53CA;&#x540E;n-1&#x884C;</td></tr><tr><td>dw</td><td>&#x5220;&#x9664;&#x5149;&#x6807;&#x6240;&#x5728;&#x5904;&#x7684;&#x5355;&#x8BCD;</td></tr><tr><td>dnw</td><td>&#x5220;&#x9664;&#x5149;&#x6807;&#x6240;&#x5728;&#x5904;&#x53CA;&#x540E;n-1&#x4E2A;&#x5355;&#x8BCD;</td></tr><tr><td>dG</td><td>&#x5220;&#x9664;&#x5149;&#x6807;&#x6240;&#x5728;&#x884C;&#x5230;&#x6587;&#x4EF6;&#x672B;&#x5C3E;&#x7684;&#x6240;&#x6709;&#x884C;</td></tr><tr><td>dgg</td><td>&#x5220;&#x9664;&#x5149;&#x6807;&#x6240;&#x5728;&#x884C;&#x5230;&#x6587;&#x4EF6;&#x5F00;&#x59CB;&#x7684;&#x6240;&#x6709;&#x884C;</td></tr><tr><td>d/word</td><td>&#x5220;&#x9664;&#x4ECE;&#x5149;&#x6807;&#x6240;&#x5728;&#x5904;&#x5230;&#x5355;&#x8BCD;word&#x7684;&#x6240;&#x6709;&#x6587;&#x672C;</td></tr><tr><td>D</td><td>&#x5220;&#x9664;&#x5149;&#x6807;&#x6240;&#x5728;&#x5904;&#x5230;&#x8BE5;&#x884C;&#x5C3E;&#x7684;&#x6240;&#x6709;&#x5185;&#x5BB9;</td></tr><tr><td>:nd</td><td>&#x5220;&#x9664;&#x7B2C;n&#x884C;</td></tr><tr><td>:n1,n2d</td><td>&#x5220;&#x9664;n1&#x884C;&#x5230;n2&#x884C;</td></tr></tbody></table><h2 id="&#x590D;&#x5236;"><a href="#&#x590D;&#x5236;" class="headerlink" title="&#x590D;&#x5236;"></a><font size="4">&#x590D;&#x5236;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B;</font></p><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>yy</td><td>&#x590D;&#x5236;&#x5149;&#x6807;&#x6240;&#x5728;&#x884C;</td></tr><tr><td>nyy</td><td>&#x590D;&#x5236;&#x5149;&#x6807;&#x6240;&#x5728;&#x884C;&#x53CA;&#x540E;n-1&#x884C;</td></tr><tr><td>yw</td><td>&#x590D;&#x5236;&#x5149;&#x6807;&#x6240;&#x5728;&#x5904;&#x7684;&#x5355;&#x8BCD;</td></tr><tr><td>ynw</td><td>&#x590D;&#x5236;&#x5149;&#x6807;&#x6240;&#x5728;&#x5904;&#x53CA;&#x540E;n-1&#x4E2A;&#x5355;&#x8BCD;</td></tr><tr><td>yG</td><td>&#x590D;&#x5236;&#x5149;&#x6807;&#x6240;&#x5728;&#x884C;&#x5230;&#x6587;&#x4EF6;&#x672B;&#x5C3E;&#x7684;&#x6240;&#x6709;&#x884C;</td></tr><tr><td>ygg</td><td>&#x590D;&#x5236;&#x5149;&#x6807;&#x6240;&#x5728;&#x884C;&#x5230;&#x6587;&#x4EF6;&#x5F00;&#x59CB;&#x7684;&#x6240;&#x6709;&#x884C;</td></tr><tr><td>y/word</td><td>&#x590D;&#x5236;&#x4ECE;&#x5149;&#x6807;&#x6240;&#x5728;&#x5904;&#x5230;&#x5355;&#x8BCD;word&#x7684;&#x6240;&#x6709;&#x6587;&#x672C;</td></tr><tr><td>Y</td><td>&#x590D;&#x5236;&#x5149;&#x6807;&#x6240;&#x5728;&#x5904;&#x5230;&#x8BE5;&#x884C;&#x5C3E;&#x7684;&#x6240;&#x6709;&#x5185;&#x5BB9;</td></tr><tr><td>:ny</td><td>&#x590D;&#x5236;&#x7B2C;n&#x884C;</td></tr><tr><td>:n1,n2y</td><td>&#x590D;&#x5236;n1&#x884C;&#x5230;n2&#x884C;</td></tr></tbody></table><h2 id="&#x7C98;&#x8D34;"><a href="#&#x7C98;&#x8D34;" class="headerlink" title="&#x7C98;&#x8D34;"></a><font size="4">&#x7C98;&#x8D34;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B;</font></p><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>p</td><td>&#x7C98;&#x8D34;&#x5728;&#x5F53;&#x524D;&#x5149;&#x6807;&#x4E0B;</td></tr><tr><td>P</td><td>&#x7C98;&#x8D34;&#x5728;&#x5F53;&#x524D;&#x5149;&#x6807;&#x4E0A;</td></tr></tbody></table><h2 id="&#x53EF;&#x89C6;"><a href="#&#x53EF;&#x89C6;" class="headerlink" title="&#x53EF;&#x89C6;"></a><font size="4">&#x53EF;&#x89C6;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B;</font></p><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>v</td><td>&#x8FDB;&#x5165;&#x53EF;&#x89C6;(&#x9009;&#x62E9;)&#x6A21;&#x5F0F;</td></tr><tr><td>d</td><td>&#x5220;&#x9664;&#x5149;&#x6807;&#x5185;&#x5BB9;</td></tr><tr><td>y</td><td>&#x590D;&#x5236;&#x5149;&#x6807;&#x5185;&#x5BB9;</td></tr></tbody></table><h2 id="&#x53EF;&#x89C6;-1"><a href="#&#x53EF;&#x89C6;-1" class="headerlink" title="&#x53EF;&#x89C6;"></a><font size="4">&#x53EF;&#x89C6;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B;</font></p><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>v</td><td>&#x8FDB;&#x5165;&#x53EF;&#x89C6;(&#x9009;&#x62E9;)&#x6A21;&#x5F0F;</td></tr><tr><td>y</td><td>&#x590D;&#x5236;&#x5149;&#x6807;&#x5185;&#x5BB9;</td></tr><tr><td>d</td><td>&#x526A;&#x5207;&#x5149;&#x6807;&#x5185;&#x5BB9;</td></tr></tbody></table><h2 id="&#x64A4;&#x56DE;&#x548C;&#x6062;&#x590D;"><a href="#&#x64A4;&#x56DE;&#x548C;&#x6062;&#x590D;" class="headerlink" title="&#x64A4;&#x56DE;&#x548C;&#x6062;&#x590D;"></a><font size="4">&#x64A4;&#x56DE;&#x548C;&#x6062;&#x590D;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B;</font></p><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>u</td><td>&#x590D;&#x539F;&#x524D;&#x4E00;&#x6B21;&#x64CD;&#x4F5C;</td></tr><tr><td>Ctrl + r</td><td>&#x91CD;&#x505A;&#x4E0A;&#x4E2A;&#x52A8;&#x4F5C;</td></tr></tbody></table><h2 id="&#x7FFB;&#x9875;&#x64CD;&#x4F5C;"><a href="#&#x7FFB;&#x9875;&#x64CD;&#x4F5C;" class="headerlink" title="&#x7FFB;&#x9875;&#x64CD;&#x4F5C;"></a><font size="4">&#x7FFB;&#x9875;&#x64CD;&#x4F5C;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B;</font></p><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>Ctrl + f</td><td>&#x5C4F;&#x5E55;&#x5411;&#x4E0B;&#x79FB;&#x52A8;&#x4E00;&#x9875;</td></tr><tr><td>Ctrl + b</td><td>&#x5C4F;&#x5E55;&#x5411;&#x4E0A;&#x79FB;&#x52A8;&#x4E00;&#x9875;</td></tr><tr><td>Ctrl + d</td><td>&#x5C4F;&#x5E55;&#x5411;&#x4E0B;&#x79FB;&#x52A8;&#x534A;&#x9875;</td></tr><tr><td>Ctrl + u</td><td>&#x5C4F;&#x5E55;&#x5411;&#x4E0B;&#x79FB;&#x52A8;&#x534A;&#x9875;</td></tr></tbody></table><h2 id="&#x8BBE;&#x7F6E;&#x884C;&#x53F7;"><a href="#&#x8BBE;&#x7F6E;&#x884C;&#x53F7;" class="headerlink" title="&#x8BBE;&#x7F6E;&#x884C;&#x53F7;"></a><font size="4">&#x8BBE;&#x7F6E;&#x884C;&#x53F7;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B;</font></p><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>:set nu</td><td>&#x663E;&#x793A;&#x6240;&#x6709;&#x7684;&#x884C;&#x53F7;</td></tr><tr><td>:set nonu</td><td>&#x53D6;&#x6D88;&#x663E;&#x793A;&#x884C;&#x53F7;</td></tr></tbody></table><h2 id="&#x641C;&#x7D22;"><a href="#&#x641C;&#x7D22;" class="headerlink" title="&#x641C;&#x7D22;"></a><font size="4">&#x641C;&#x7D22;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B;</font></p><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>/word</td><td>&#x5411;&#x5149;&#x6807;&#x4E4B;&#x4E0B;&#x5BFB;&#x627E;/word&#x7684;&#x5B57;&#x7B26;&#x4E32;</td></tr><tr><td>?word</td><td>&#x5411;&#x5149;&#x6807;&#x4E4B;&#x4E0A;&#x5BFB;&#x627E;/word&#x7684;&#x5B57;&#x7B26;&#x4E32;</td></tr><tr><td>n</td><td>&#x7EE7;&#x7EED;&#x5411;&#x4E0B;&#x67E5;&#x627E;&#x4E0B;&#x4E00;&#x4E2A;&#x5339;&#x914D;&#x7684;&#x5B57;&#x7B26;&#x4E32;</td></tr><tr><td>N</td><td>&#x7EE7;&#x7EED;&#x5411;&#x4E0A;&#x67E5;&#x627E;&#x4E0B;&#x4E00;&#x4E2A;&#x5339;&#x914D;&#x7684;&#x5B57;&#x7B26;&#x4E32;</td></tr><tr><td>:noh</td><td>&#x53D6;&#x6D88;&#x9AD8;&#x4EAE;&#x663E;&#x793A;</td></tr><tr><td>:set ic</td><td>&#x67E5;&#x627E;&#x5FFD;&#x7565;&#x5927;&#x5C0F;&#x5199;</td></tr><tr><td>:set noic</td><td>&#x67E5;&#x627E;&#x4E0D;&#x5FFD;&#x7565;&#x5927;&#x5C0F;&#x5199;</td></tr></tbody></table><h2 id="&#x66FF;&#x6362;"><a href="#&#x66FF;&#x6362;" class="headerlink" title="&#x66FF;&#x6362;"></a><font size="4">&#x66FF;&#x6362;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B;</font></p><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>r</td><td>&#x53D6;&#x4EE3;&#x5149;&#x6807;&#x5904;&#x7684;&#x5B57;&#x7B26;&#x4E32;</td></tr><tr><td>R</td><td>&#x4ECE;&#x5149;&#x6807;&#x5904;&#x5F00;&#x59CB;&#x66FF;&#x6362;&#x5B57;&#x7B26;&#xFF0C;Esc&#x7ED3;&#x675F;&#x66FF;&#x6362;</td></tr><tr><td>:n1,n2s/word1/word2/g</td><td>&#x5728;n1&#x5230;n2&#x884C;&#x4E4B;&#x95F4;&#x5C06;word1&#x6362;&#x6210;word2</td></tr><tr><td>:%s/word1/word2/g</td><td>&#x5C06;&#x6587;&#x6863;&#x4E2D;&#x6240;&#x6709;&#x7684;word1&#x6362;&#x6210;word2</td></tr><tr><td>:%s/word1/word2/g</td><td>&#x5C06;&#x6587;&#x6863;&#x4E2D;&#x6240;&#x6709;&#x7684;word1&#x6362;&#x6210;word2&#xFF0C;&#x53D6;&#x4EE3;&#x524D;&#x8BE2;&#x95EE;</td></tr></tbody></table><h2 id="&#x66FF;&#x6362;-1"><a href="#&#x66FF;&#x6362;-1" class="headerlink" title="&#x66FF;&#x6362;"></a><font size="4">&#x66FF;&#x6362;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B;</font></p><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>r</td><td>&#x53D6;&#x4EE3;&#x5149;&#x6807;&#x5904;&#x7684;&#x5B57;&#x7B26;&#x4E32;</td></tr><tr><td>R</td><td>&#x4ECE;&#x5149;&#x6807;&#x5904;&#x5F00;&#x59CB;&#x66FF;&#x6362;&#x5B57;&#x7B26;&#xFF0C;Esc&#x7ED3;&#x675F;&#x66FF;&#x6362;</td></tr><tr><td>:n1,n2s/word1/word2/g</td><td>&#x5728;n1&#x5230;n2&#x884C;&#x4E4B;&#x95F4;&#x5C06;word1&#x6362;&#x6210;word2</td></tr><tr><td>:%s/word1/word2/g</td><td>&#x5C06;&#x6587;&#x6863;&#x4E2D;&#x6240;&#x6709;&#x7684;word1&#x6362;&#x6210;word2</td></tr><tr><td>:%s/word1/word2/g</td><td>&#x5C06;&#x6587;&#x6863;&#x4E2D;&#x6240;&#x6709;&#x7684;word1&#x6362;&#x6210;word2&#xFF0C;&#x53D6;&#x4EE3;&#x524D;&#x8BE2;&#x95EE;</td></tr><tr><td>:ab word1 word2</td><td>&#x6587;&#x6863;&#x4E2D;&#x4EE5;&#x540E;&#x51FA;&#x73B0;&#x7684;word1&#x5B57;&#x7B26;&#x81EA;&#x52A8;&#x8F6C;&#x6362;&#x4E3A;word2</td></tr></tbody></table><h2 id="&#x5B9A;&#x4E49;&#x5FEB;&#x6377;&#x952E;"><a href="#&#x5B9A;&#x4E49;&#x5FEB;&#x6377;&#x952E;" class="headerlink" title="&#x5B9A;&#x4E49;&#x5FEB;&#x6377;&#x952E;"></a><font size="4">&#x5B9A;&#x4E49;&#x5FEB;&#x6377;&#x952E;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B;</font><br>&#x2003;&#x2003;<font size="3">:map ctrl+v+&#x5B57;&#x7B26; &#x547D;&#x4EE4; &#x53EF;&#x4EE5;&#x7528;&#x6765;&#x5B9A;&#x4E49;&#x5FEB;&#x6377;&#x952E;</font></p><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>:map ctrl+v+p I#<esc></esc></td><td>&#x6309;ctrl+v+p&#x5219;&#x4F1A;&#x5728;&#x884C;&#x9996;&#x52A0;#&#x6CE8;&#x91CA;</td></tr><tr><td>:map ctrl+v+H iHello World !<esc></esc></td><td>&#x6309;ctrl+v+H&#x4F1A;&#x63D2;&#x5165;Hello World !</td></tr></tbody></table><h2 id="&#x8FDE;&#x7EED;&#x884C;&#x6CE8;&#x91CA;"><a href="#&#x8FDE;&#x7EED;&#x884C;&#x6CE8;&#x91CA;" class="headerlink" title="&#x8FDE;&#x7EED;&#x884C;&#x6CE8;&#x91CA;"></a><font size="4">&#x8FDE;&#x7EED;&#x884C;&#x6CE8;&#x91CA;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B;</font></p><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>:n1,n2s/^/xxx/g</td><td>&#x5728;n1&#x5230;n2&#x884C;&#x7684;&#x884C;&#x9996;&#x52A0;xxx</td></tr><tr><td>:n1,n2s/^xxx//g</td><td>&#x5C06;n1&#x5230;n2&#x884C;&#x884C;&#x9996;&#x7684;xxx&#x5220;&#x53BB;</td></tr><tr><td>:n1,n2s/^/\/\//g</td><td>&#x5728;n1&#x5230;n2&#x884C;&#x7684;&#x884C;&#x9996;&#x52A0;//&#xFF0C;\/&#x4EE3;&#x8868;/</td></tr></tbody></table><h2 id="&#x4FDD;&#x5B58;&#x548C;&#x9000;&#x51FA;"><a href="#&#x4FDD;&#x5B58;&#x548C;&#x9000;&#x51FA;" class="headerlink" title="&#x4FDD;&#x5B58;&#x548C;&#x9000;&#x51FA;"></a><font size="4">&#x4FDD;&#x5B58;&#x548C;&#x9000;&#x51FA;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B;</font></p><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>:w</td><td>&#x4FDD;&#x5B58;&#x4FEE;&#x6539;</td></tr><tr><td>:w filename</td><td>&#x53E6;&#x5B58;&#x4E3A;filename&#x6587;&#x4EF6;</td></tr><tr><td>:Wq&#x6216;:wq!&#x6216;ZZ</td><td>&#x4FDD;&#x5B58;&#x4FEE;&#x6539;&#x5E76;&#x9000;&#x51FA;</td></tr><tr><td>:q!</td><td>&#x4E0D;&#x4FDD;&#x5B58;&#x4FEE;&#x6539;&#x5E76;&#x9000;&#x51FA;</td></tr></tbody></table><h1 id="Vim&#x5C0F;&#x7ED3;"><a href="#Vim&#x5C0F;&#x7ED3;" class="headerlink" title="Vim&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Vim&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;Vim&#x4F5C;&#x4E3A;&#x4E00;&#x6B3E;&#x53E4;&#x8001;&#x7684;&#x6587;&#x672C;&#x7F16;&#x8F91;&#x5668;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x5177;&#x6709;&#x8BB8;&#x591A;&#x6709;&#x7528;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x4F7F;&#x5176;&#x53EF;&#x4EE5;&#x4E0E;&#x73B0;&#x4EE3;&#x6587;&#x672C;&#x7F16;&#x8F91;&#x5668;&#x7ADE;&#x4E89;&#xFF0C;&#x4E5F;&#x662F;&#x4F5C;&#x4E3A;Linux&#x7CFB;&#x7EDF;&#x81EA;&#x5E26;&#x7684;&#x6587;&#x672C;&#x7F16;&#x8F91;&#x5668;Vi&#x7684;&#x5347;&#x7EA7;&#x7248;&#xFF0C;&#x53EF;&#x4EE5;&#x5B8C;&#x5168;&#x89E3;&#x653E;&#x53CC;&#x624B;&#xFF0C;&#x5BF9;&#x4E8E;&#x7A0B;&#x5E8F;&#x5458;&#x6765;&#x8BF4;&#xFF0C;Vim&#x662F;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x7684;&#x6280;&#x80FD;&#x4E4B;&#x4E00;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Vim&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="程序员必备技能" scheme="https://USTCcoder.github.io/categories/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>Markdown</title>
    <link href="https://USTCcoder.github.io/2019/09/21/skill%20Markdown/"/>
    <id>https://USTCcoder.github.io/2019/09/21/skill Markdown/</id>
    <published>2019-09-21T06:58:40.000Z</published>
    <updated>2019-09-25T08:25:16.431Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">Markdown</font></strong></center><p></p><h1 id="Markdown&#x4ECB;&#x7ECD;"><a href="#Markdown&#x4ECB;&#x7ECD;" class="headerlink" title="Markdown&#x4ECB;&#x7ECD;"></a><font size="5" color="red">Markdown&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>Markdown</strong>:&#x662F;&#x4E00;&#x79CD;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;<strong>&#x666E;&#x901A;&#x6587;&#x672C;&#x7F16;&#x8F91;&#x5668;</strong>&#x7F16;&#x5199;&#x7684;<strong>&#x6807;&#x8BB0;&#x8BED;&#x8A00;</strong>&#xFF0C;&#x901A;&#x8FC7;&#x7B80;&#x5355;&#x7684;<strong>&#x6807;&#x8BB0;&#x8BED;&#x6CD5;</strong>&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x4F7F;&#x666E;&#x901A;&#x6587;&#x672C;&#x5185;&#x5BB9;<strong>&#x5177;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x683C;&#x5F0F;</strong>&#x3002;<br><a id="more"></a></p><h1 id="Markdown&#x8BED;&#x6CD5;"><a href="#Markdown&#x8BED;&#x6CD5;" class="headerlink" title="Markdown&#x8BED;&#x6CD5;"></a><font size="5" color="red">Markdown&#x8BED;&#x6CD5;</font></h1><h2 id="&#x6807;&#x9898;"><a href="#&#x6807;&#x9898;" class="headerlink" title="&#x6807;&#x9898;"></a><font size="4">&#x6807;&#x9898;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x7528;#&#x8868;&#x793A;&#x6807;&#x9898;&#xFF0C;&#x51E0;&#x7EA7;&#x6807;&#x9898;&#x5BF9;&#x5E94;&#x51E0;&#x4E2A;#&#xFF0C;&#x6700;&#x591A;6&#x4E2A;&#xFF0C;&#x6CE8;&#x610F;#&#x548C;&#x6807;&#x9898;&#x76F4;&#x63A5;&#x6709;&#x7A7A;&#x683C;</font><br>&#x2003;&#x2003;<font size="3"># &#x4E00;&#x7EA7;&#x6807;&#x9898;</font><br>&#x2003;&#x2003;<font size="3">## &#x4E8C;&#x7EA7;&#x6807;&#x9898;</font><br>&#x2003;&#x2003;<font size="3">### &#x4E09;&#x7EA7;&#x6807;&#x9898;</font><br>&#x2003;&#x2003;<font size="3">#### &#x56DB;&#x7EA7;&#x6807;&#x9898;</font><br>&#x2003;&#x2003;<font size="3">##### &#x4E94;&#x7EA7;&#x6807;&#x9898;</font><br>&#x2003;&#x2003;<font size="3">###### &#x516D;&#x7EA7;&#x6807;&#x9898;</font><br><img src="/images/SKILL/markdown1.png" alt="1"></p><h2 id="&#x5B57;&#x4F53;"><a href="#&#x5B57;&#x4F53;" class="headerlink" title="&#x5B57;&#x4F53;"></a><font size="4">&#x5B57;&#x4F53;</font></h2><table><thead><tr><th>&#x7B26;&#x53F7;</th><th>&#x6548;&#x679C;</th></tr></thead><tbody><tr><td>*&#x659C;&#x4F53;&#x6587;&#x672C;*</td><td><em>&#x659C;&#x4F53;&#x6587;&#x672C;</em></td></tr><tr><td>_&#x659C;&#x4F53;&#x6587;&#x672C;_</td><td><em>&#x659C;&#x4F53;&#x6587;&#x672C;</em></td></tr><tr><td>**&#x7C97;&#x4F53;&#x6587;&#x672C;**</td><td><strong>&#x7C97;&#x4F53;&#x6587;&#x672C;</strong></td></tr><tr><td>__&#x7C97;&#x4F53;&#x6587;&#x672C;__</td><td><strong>&#x7C97;&#x4F53;&#x6587;&#x672C;</strong></td></tr><tr><td>***&#x7C97;&#x659C;&#x4F53;&#x6587;&#x672C;***</td><td><strong><em>&#x7C97;&#x659C;&#x4F53;&#x6587;&#x672C;</em></strong></td></tr><tr><td>___&#x7C97;&#x659C;&#x4F53;&#x6587;&#x672C;___</td><td><strong><em>&#x7C97;&#x659C;&#x4F53;&#x6587;&#x672C;</em></strong></td></tr></tbody></table><h2 id="&#x5206;&#x5272;&#x7EBF;"><a href="#&#x5206;&#x5272;&#x7EBF;" class="headerlink" title="&#x5206;&#x5272;&#x7EBF;"></a><font size="4">&#x5206;&#x5272;&#x7EBF;</font></h2><p>&#x2003;&#x2003;<font size="3">***</font></p><hr><p>&#x2003;&#x2003;<font size="3">&#x661F;&#x53F7;&#x4E2D;&#x95F4;&#x53EF;&#x4EE5;&#x6709;&#x7A7A;&#x683C;&#x4E5F;&#x53EF;&#x4EE5;&#x6CA1;&#x6709;&#x7A7A;&#x683C;</font></p><p>&#x2003;&#x2003;<font size="3">- - -</font></p><hr><p>&#x2003;&#x2003;<font size="3">&#x51CF;&#x53F7;&#x4E2D;&#x95F4;&#x5FC5;&#x987B;&#x6709;&#x7A7A;&#x683C;</font></p><h2 id="&#x5220;&#x9664;&#x7EBF;"><a href="#&#x5220;&#x9664;&#x7EBF;" class="headerlink" title="&#x5220;&#x9664;&#x7EBF;"></a><font size="4">&#x5220;&#x9664;&#x7EBF;</font></h2><p>&#x2003;&#x2003;<font size="3">&lt;u&gt;&#x8FD9;&#x662F;&#x4E00;&#x6761;&#x5220;&#x9664;&#x7EBF;&lt;\u&gt;</font><br>&#x2003;&#x2003;<u>&#x8FD9;&#x662F;&#x4E00;&#x6761;&#x5220;&#x9664;&#x7EBF;</u></p><h2 id="&#x811A;&#x6CE8;"><a href="#&#x811A;&#x6CE8;" class="headerlink" title="&#x811A;&#x6CE8;"></a><font size="4">&#x811A;&#x6CE8;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x7528;&#x4E2D;&#x62EC;&#x53F7;&#x521B;&#x5EFA;[&#x811A;&#x6CE8;]&#x3002;</font><br>&#x2003;&#x2003;<font size="3">[&#x811A;&#x6CE8;]: &#x811A;&#x6CE8;&#x4E2D;&#x7684;&#x5185;&#x5BB9;</font></p><p>&#x2003;&#x2003;&#x7528;&#x4E2D;&#x62EC;&#x53F7;&#x521B;&#x5EFA;[&#x811A;&#x6CE8;]&#x3002;<br>[&#x811A;&#x6CE8;]: &#x811A;&#x6CE8;&#x4E2D;&#x7684;&#x5185;&#x5BB9;</p><h2 id="&#x65E0;&#x5E8F;&#x5217;&#x8868;"><a href="#&#x65E0;&#x5E8F;&#x5217;&#x8868;" class="headerlink" title="&#x65E0;&#x5E8F;&#x5217;&#x8868;"></a><font size="4">&#x65E0;&#x5E8F;&#x5217;&#x8868;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x65E0;&#x5E8F;&#x5217;&#x8868;&#x4F7F;&#x7528;*&#x6216;+&#x6216;-&#x4F5C;&#x4E3A;&#x5217;&#x8868;&#x6807;&#x8BB0;</font><br>&#x2003;&#x2003;<font size="3">&#x7B26;&#x53F7;&#x548C;&#x5185;&#x5BB9;&#x4E4B;&#x95F4;&#x8981;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;</font></p><p>&#x2003;&#x2003;- &#x7B2C;&#x4E00;&#x9879;<br>&#x2003;&#x2003;* &#x7B2C;&#x4E8C;&#x9879;<br>&#x2003;&#x2003;+ &#x7B2C;&#x4E09;&#x9879; </p><ul><li>&#x7B2C;&#x4E00;&#x9879;</li></ul><ul><li>&#x7B2C;&#x4E8C;&#x9879;</li></ul><ul><li>&#x7B2C;&#x4E09;&#x9879; </li></ul><h2 id="&#x6709;&#x5E8F;&#x5217;&#x8868;"><a href="#&#x6709;&#x5E8F;&#x5217;&#x8868;" class="headerlink" title="&#x6709;&#x5E8F;&#x5217;&#x8868;"></a><font size="4">&#x6709;&#x5E8F;&#x5217;&#x8868;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x65E0;&#x5E8F;&#x5217;&#x8868;&#x4F7F;&#x7528;&#x6570;&#x5B57;&#x52A0;&#x4E0A;.&#x4F5C;&#x4E3A;&#x5217;&#x8868;&#x6807;&#x8BB0;</font><br>&#x2003;&#x2003;<font size="3">&#x7B26;&#x53F7;&#x548C;&#x5185;&#x5BB9;&#x4E4B;&#x95F4;&#x8981;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;</font></p><ol><li>&#x7B2C;&#x4E00;&#x9879;</li><li>&#x7B2C;&#x4E8C;&#x9879;</li><li>&#x7B2C;&#x4E09;&#x9879; </li></ol><h2 id="&#x5217;&#x8868;&#x5D4C;&#x5957;"><a href="#&#x5217;&#x8868;&#x5D4C;&#x5957;" class="headerlink" title="&#x5217;&#x8868;&#x5D4C;&#x5957;"></a><font size="4">&#x5217;&#x8868;&#x5D4C;&#x5957;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5217;&#x8868;&#x5D4C;&#x5957;&#x53EA;&#x8981;&#x5728;&#x5B50;&#x5217;&#x8868;&#x4E2D;&#x6DFB;&#x52A0;&#x56DB;&#x4E2A;&#x7A7A;&#x683C;&#x5373;&#x4E3A;&#x4E0B;&#x4E00;&#x5C42;&#x5217;&#x8868;</font></p><p>&#x2003;&#x2003;1. &#x7B2C;&#x4E00;&#x5C42;&#xFF1A;<br>&#x2003;&#x2003;&#x2002;&#x2002;&#x2002;&#x2002;- &#x7B2C;&#x4E00;&#x5C42;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5185;&#x5BB9;<br>&#x2003;&#x2003;&#x2002;&#x2002;&#x2002;&#x2002;- &#x7B2C;&#x4E00;&#x5C42;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x5185;&#x5BB9;<br>&#x2003;&#x2003;2. &#x7B2C;&#x4E8C;&#x5C42;&#xFF1A;<br>&#x2003;&#x2003;&#x2002;&#x2002;&#x2002;&#x2002;- &#x7B2C;&#x4E8C;&#x5C42;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5185;&#x5BB9;<br>&#x2003;&#x2003;&#x2002;&#x2002;&#x2002;&#x2002;- &#x7B2C;&#x4E8C;&#x5C42;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x5185;&#x5BB9;</p><ol><li>&#x7B2C;&#x4E00;&#x5C42;&#xFF1A;<ul><li>&#x7B2C;&#x4E00;&#x5C42;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5185;&#x5BB9;</li><li>&#x7B2C;&#x4E00;&#x5C42;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x5185;&#x5BB9;</li></ul></li><li>&#x7B2C;&#x4E8C;&#x5C42;&#xFF1A;<ul><li>&#x7B2C;&#x4E8C;&#x5C42;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5185;&#x5BB9;</li><li>&#x7B2C;&#x4E8C;&#x5C42;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x5185;&#x5BB9;</li></ul></li></ol><h2 id="&#x533A;&#x5757;"><a href="#&#x533A;&#x5757;" class="headerlink" title="&#x533A;&#x5757;"></a><font size="4">&#x533A;&#x5757;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x533A;&#x5757;&#x4F7F;&#x7528;&#x5927;&#x4E8E;&#x53F7;&gt;&#x4F5C;&#x4E3A;&#x6807;&#x8BB0;</font><br>&#x2003;&#x2003;<font size="3">&#x7B26;&#x53F7;&#x548C;&#x5185;&#x5BB9;&#x4E4B;&#x95F4;&#x8981;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;</font></p><p>&#x2003;&#x2003;&gt; &#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x533A;&#x5757;<br>&#x2003;&#x2003;&gt; &gt; &#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x5B50;&#x533A;&#x5757;</p><blockquote><p>&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x533A;&#x5757;</p><blockquote><p>&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x5B50;&#x533A;&#x5757;</p></blockquote></blockquote><h2 id="&#x4EE3;&#x7801;&#x5F15;&#x7528;"><a href="#&#x4EE3;&#x7801;&#x5F15;&#x7528;" class="headerlink" title="&#x4EE3;&#x7801;&#x5F15;&#x7528;"></a><font size="4">&#x4EE3;&#x7801;&#x5F15;&#x7528;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x4EE3;&#x7801;&#x5F15;&#x7528;&#x4F7F;&#x7528;&#x53CD;&#x5F15;&#x53F7;`&#x4F5C;&#x4E3A;&#x6807;&#x8BB0;</font><br>&#x2003;&#x2003;<font size="3">&#x8FD8;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x53CD;&#x5F15;&#x53F7;```&#x5927;&#x6BB5;&#x4EE3;&#x7801;```</font></p><p>&#x2003;&#x2003;`print(&#x2018;Hello Markdown&#x2019;)`<br>&#x2003;&#x2003;<code>print(&apos;Hello Markdown&apos;)</code></p><p>&#x2003;&#x2003;```<br>&#x2003;&#x2003;def my_print():<br>&#x2003;&#x2003;&#x2002;&#x2002;&#x2002;&#x2002;print(&#x2018;Hello&#x2019;)<br>&#x2003;&#x2003;&#x2002;&#x2002;&#x2002;&#x2002;print(&#x2018;Markdown&#x2019;)<br>&#x2003;&#x2003;```<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def my_print():</span><br><span class="line">    print(&apos;Hello&apos;)</span><br><span class="line">    print(&apos;Markdown&apos;)</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="&#x94FE;&#x63A5;"><a href="#&#x94FE;&#x63A5;" class="headerlink" title="&#x94FE;&#x63A5;"></a><font size="4">&#x94FE;&#x63A5;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5F15;&#x7528;&#x94FE;&#x63A5;&#x7684;&#x683C;&#x5F0F;&#x4E3A;&#xFF1A;[&#x94FE;&#x63A5;&#x540D;&#x79F0;](&#x94FE;&#x63A5;&#x5730;&#x5740;)</font></p><p>&#x2003;&#x2003;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x641C;&#x7D22;&#x5F15;&#x64CE;[&#x767E;&#x5EA6;](<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>)</p><p>&#x2003;&#x2003;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x641C;&#x7D22;&#x5F15;&#x64CE;<a href="www.baidu.com">&#x767E;&#x5EA6;</a></p><h2 id="&#x56FE;&#x7247;"><a href="#&#x56FE;&#x7247;" class="headerlink" title="&#x56FE;&#x7247;"></a><font size="4">&#x56FE;&#x7247;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x653E;&#x7F6E;&#x56FE;&#x7247;&#x7684;&#x683C;&#x5F0F;&#x4E3A;&#xFF1A;![&#x56FE;&#x7247;&#x6587;&#x5B57;](&#x56FE;&#x7247;&#x5730;&#x5740;)</font></p><p>&#x2003;&#x2003;![&#x672C;&#x5730;&#x56FE;&#x7247;](/images/SKILL/markdown1.jpg)<br><img src="/images/SKILL/markdown.jpg" alt="&#x672C;&#x5730;&#x56FE;&#x7247;"></p><h2 id="&#x8868;&#x683C;"><a href="#&#x8868;&#x683C;" class="headerlink" title="&#x8868;&#x683C;"></a><font size="4">&#x8868;&#x683C;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x8868;&#x683C;&#x7684;&#x683C;&#x5F0F;&#x4E3A;&#xFF1A;</font><br>&#x2003;&#x2003;<font size="3">| &#x8868;&#x5934;1 | &#x8868;&#x5934;2 |</font><br>&#x2003;&#x2003;<font size="3">| --- | --- |</font><br>&#x2003;&#x2003;<font size="3">| &#x5355;&#x5143;&#x683C;1 | &#x5355;&#x5143;&#x683C;2 |</font><br>&#x2003;&#x2003;<font size="3">| &#x5355;&#x5143;&#x683C;3 | &#x5355;&#x5143;&#x683C;4 |</font></p><table><thead><tr><th>&#x8868;&#x5934;1</th><th>&#x8868;&#x5934;2</th></tr></thead><tbody><tr><td>&#x5355;&#x5143;&#x683C;1</td><td>&#x5355;&#x5143;&#x683C;2</td></tr><tr><td>&#x5355;&#x5143;&#x683C;3</td><td>&#x5355;&#x5143;&#x683C;4</td></tr></tbody></table><h2 id="HTML&#x5143;&#x7D20;"><a href="#HTML&#x5143;&#x7D20;" class="headerlink" title="HTML&#x5143;&#x7D20;"></a><font size="4">HTML&#x5143;&#x7D20;</font></h2><p>&#x2003;&#x2003;<font size="3">Markdown&#x652F;&#x6301;&#x5F88;&#x591A;HTML&#x5143;&#x7D20;&#xFF0C;&#x4E0D;&#x9010;&#x4E00;&#x4ECB;&#x7ECD;&#xFF0C;&#x611F;&#x5174;&#x8DA3;&#x53EF;&#x4EE5;&#x67E5;&#x9605;HTML&#x5143;&#x7D20;</font></p><p>&#x2003;&#x2003;5&lt;sup&gt;2&lt;/sup&gt; + x&lt;sub&gt;n&lt;/sub&gt;</p><p>&#x2003;&#x2003;5<sup>2</sup> + x<sub>n</sub></p><h2 id="&#x516C;&#x5F0F;"><a href="#&#x516C;&#x5F0F;" class="headerlink" title="&#x516C;&#x5F0F;"></a><font size="4">&#x516C;&#x5F0F;</font></h2><p>&#x2003;&#x2003;<font size="3">Markdown&#x4F7F;&#x7528;TeX&#x6216;LaTeX&#x683C;&#x5F0F;&#x7684;&#x6570;&#x5B66;&#x516C;&#x5F0F;&#x6765;&#x5B9E;&#x73B0;&#xFF0C;&#x4F1A;&#x6839;&#x636E;&#x9700;&#x8981;&#x52A0;&#x8F7D; Mathjax &#x5BF9;&#x6570;&#x5B66;&#x516C;&#x5F0F;&#x8FDB;&#x884C;&#x6E32;&#x67D3;&#x3002;</font></p><p>&#x2003;&#x2003;<font size="3">Markdown&#x5728;&#x516C;&#x5F0F;&#x4E24;&#x7AEF;&#x52A0;&#x4E0A;\$&#x8F93;&#x5165;&#x6587;&#x4E2D;&#x516C;&#x5F0F;</font></p><p>&#x2003;&#x2003;&#x5E73;&#x65B9;&#x548C;&#x516C;&#x5F0F;&#xFF1A;$(a + b)^2 = a^2 + 2ab + b^2$</p><p>&#x2003;&#x2003;<font size="3">Markdown&#x5728;&#x516C;&#x5F0F;&#x4E24;&#x7AEF;&#x52A0;&#x4E0A;$\$&#x53E6;&#x8D77;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x516C;&#x5F0F;</font></p><p>&#x2003;&#x2003;&#x5E73;&#x65B9;&#x5DEE;&#x516C;&#x5F0F;&#xFF1A;<br>$$(a - b)^2 = a^2 - 2ab + b^2$$</p><h2 id="&#x8F6C;&#x4E49;&#x5B57;&#x7B26;"><a href="#&#x8F6C;&#x4E49;&#x5B57;&#x7B26;" class="headerlink" title="&#x8F6C;&#x4E49;&#x5B57;&#x7B26;"></a><font size="4">&#x8F6C;&#x4E49;&#x5B57;&#x7B26;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x7EDD;&#x5927;&#x591A;&#x6570;&#x5B57;&#x7B26;&#x90FD;&#x53EF;&#x4EE5;&#x7528;\&#x8F6C;&#x4E49;&#xFF0C;&#x4F46;&#x662F;&#x4E0B;&#x8868;&#x5B57;&#x7B26;&#x8981;&#x7528;&#x6307;&#x5B9A;&#x7684;&#x7F16;&#x53F7;&#x8F6C;&#x4E49;</font></p><table><thead><tr><th>&#x540D;&#x79F0;</th><th>&#x7B26;&#x53F7;</th><th>&#x6548;&#x679C;</th></tr></thead><tbody><tr><td>&#x7A7A;&#x683C;</td><td>&amp;nbsp;</td><td>&#xA0;</td></tr><tr><td>&#x5C0F;&#x4E8E;&#x53F7;</td><td>&amp;lt;</td><td>&lt;</td></tr><tr><td>&#x5927;&#x4E8E;&#x53F7;</td><td>&amp;gt;</td><td>&gt;</td></tr><tr><td>&#x4E0E;&#x7B26;&#x53F7;</td><td>&amp;amp;</td><td>&amp;</td></tr><tr><td>&#x5355;&#x5F15;&#x53F7;</td><td>&amp;apos;</td><td>&apos;</td></tr><tr><td>&#x53CC;&#x5F15;&#x53F7;</td><td>&amp;quot;</td><td>&quot;</td></tr></tbody></table><h1 id="Markdown&#x5C0F;&#x7ED3;"><a href="#Markdown&#x5C0F;&#x7ED3;" class="headerlink" title="Markdown&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Markdown&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;Markdown&#x7684;&#x8BED;&#x6CD5;&#x7B80;&#x6D01;&#x660E;&#x4E86;&#xFF0C;&#x5B66;&#x4E60;&#x5BB9;&#x6613;&#xFF0C;&#x800C;&#x4E14;&#x529F;&#x80FD;&#x5F3A;&#x5927;&#xFF0C;&#x56E0;&#x6B64;&#x5F88;&#x591A;&#x4EBA;&#x7528;&#x5B83;&#x5199;&#x535A;&#x5BA2;&#xFF0C;&#x6211;&#x7684;&#x6240;&#x6709;&#x535A;&#x5BA2;&#x90FD;&#x662F;&#x91C7;&#x7528;Markdown&#x6765;&#x5199;&#x7684;&#xFF0C;&#x4E5F;&#x662F;&#x4E3A;&#x4E86;&#x67E5;&#x8BE2;&#x7684;&#x65B9;&#x4FBF;&#xFF0C;&#x6545;&#x5199;&#x4E0B;&#x4E86;&#x8FD9;&#x7BC7;&#x6587;&#x5B57;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Markdown&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="程序员必备技能" scheme="https://USTCcoder.github.io/categories/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>LaTeX</title>
    <link href="https://USTCcoder.github.io/2019/09/20/skill%20Latex/"/>
    <id>https://USTCcoder.github.io/2019/09/20/skill Latex/</id>
    <published>2019-09-20T04:19:40.000Z</published>
    <updated>2020-05-08T11:37:04.006Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">LaTeX</font></strong></center><p></p><h1 id="LaTeX&#x4ECB;&#x7ECD;"><a href="#LaTeX&#x4ECB;&#x7ECD;" class="headerlink" title="LaTeX&#x4ECB;&#x7ECD;"></a><font size="5" color="red">LaTeX&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>LaTeX</strong>:&#x662F;&#x4E00;&#x79CD;&#x57FA;&#x4E8E;<strong>TEX&#x7684;&#x6392;&#x7248;&#x7CFB;&#x7EDF;</strong>&#xFF0C;&#x7531;&#x7F8E;&#x56FD;&#x8BA1;&#x7B97;&#x673A;&#x5B66;&#x5BB6;&#x83B1;&#x65AF;&#x5229;&#xB7;&#x5170;&#x4F2F;&#x7279;(Leslie Lamport)&#x5728;20&#x4E16;&#x7EAA;80&#x5E74;&#x4EE3;&#x521D;&#x671F;&#x5F00;&#x53D1;&#xFF0C;&#x5229;&#x7528;&#x8FD9;&#x79CD;&#x683C;&#x5F0F;&#xFF0C;&#x5BF9;&#x4E8E;<strong>&#x751F;&#x6210;&#x590D;&#x6742;&#x8868;&#x683C;&#x548C;&#x6570;&#x5B66;&#x516C;&#x5F0F;</strong>&#xFF0C;&#x8868;&#x73B0;&#x5F97;&#x5C24;&#x4E3A;&#x7A81;&#x51FA;&#x3002;<br><a id="more"></a></p><h1 id="LaTeX&#x6570;&#x5B66;&#x516C;&#x5F0F;"><a href="#LaTeX&#x6570;&#x5B66;&#x516C;&#x5F0F;" class="headerlink" title="LaTeX&#x6570;&#x5B66;&#x516C;&#x5F0F;"></a><font size="5" color="red">LaTeX&#x6570;&#x5B66;&#x516C;&#x5F0F;</font></h1><h2 id="&#x683C;&#x5F0F;&#x8BF4;&#x660E;"><a href="#&#x683C;&#x5F0F;&#x8BF4;&#x660E;" class="headerlink" title="&#x683C;&#x5F0F;&#x8BF4;&#x660E;"></a><font size="4">&#x683C;&#x5F0F;&#x8BF4;&#x660E;</font></h2><p><img src="/images/SKILL/latex1.png" alt="LaTeX"></p><h2 id="&#x5E38;&#x89C1;&#x5E0C;&#x814A;&#x5B57;&#x6BCD;"><a href="#&#x5E38;&#x89C1;&#x5E0C;&#x814A;&#x5B57;&#x6BCD;" class="headerlink" title="&#x5E38;&#x89C1;&#x5E0C;&#x814A;&#x5B57;&#x6BCD;"></a><font size="4">&#x5E38;&#x89C1;&#x5E0C;&#x814A;&#x5B57;&#x6BCD;</font></h2><p><img src="/images/SKILL/latex2.png" alt="LaTeX"></p><h2 id="&#x9876;&#x90E8;&#x7B26;&#x53F7;"><a href="#&#x9876;&#x90E8;&#x7B26;&#x53F7;" class="headerlink" title="&#x9876;&#x90E8;&#x7B26;&#x53F7;"></a><font size="4">&#x9876;&#x90E8;&#x7B26;&#x53F7;</font></h2><p><img src="/images/SKILL/latex3.png" alt="LaTeX"></p><h2 id="&#x5E38;&#x7528;&#x51FD;&#x6570;"><a href="#&#x5E38;&#x7528;&#x51FD;&#x6570;" class="headerlink" title="&#x5E38;&#x7528;&#x51FD;&#x6570;"></a><font size="4">&#x5E38;&#x7528;&#x51FD;&#x6570;</font></h2><p><img src="/images/SKILL/latex4.png" alt="LaTeX"></p><h2 id="&#x7B97;&#x672F;&#x8FD0;&#x7B97;"><a href="#&#x7B97;&#x672F;&#x8FD0;&#x7B97;" class="headerlink" title="&#x7B97;&#x672F;&#x8FD0;&#x7B97;"></a><font size="4">&#x7B97;&#x672F;&#x8FD0;&#x7B97;</font></h2><p><img src="/images/SKILL/latex5.png" alt="LaTeX"></p><h2 id="&#x5FAE;&#x5206;&#x8FD0;&#x7B97;"><a href="#&#x5FAE;&#x5206;&#x8FD0;&#x7B97;" class="headerlink" title="&#x5FAE;&#x5206;&#x8FD0;&#x7B97;"></a><font size="4">&#x5FAE;&#x5206;&#x8FD0;&#x7B97;</font></h2><p><img src="/images/SKILL/latex6.png" alt="LaTeX"></p><h2 id="&#x5173;&#x7CFB;&#x8FD0;&#x7B97;"><a href="#&#x5173;&#x7CFB;&#x8FD0;&#x7B97;" class="headerlink" title="&#x5173;&#x7CFB;&#x8FD0;&#x7B97;"></a><font size="4">&#x5173;&#x7CFB;&#x8FD0;&#x7B97;</font></h2><p><img src="/images/SKILL/latex7.png" alt="LaTeX"></p><h2 id="&#x903B;&#x8F91;&#x8FD0;&#x7B97;"><a href="#&#x903B;&#x8F91;&#x8FD0;&#x7B97;" class="headerlink" title="&#x903B;&#x8F91;&#x8FD0;&#x7B97;"></a><font size="4">&#x903B;&#x8F91;&#x8FD0;&#x7B97;</font></h2><p><img src="/images/SKILL/latex8.png" alt="LaTeX"></p><h2 id="&#x96C6;&#x5408;&#x8FD0;&#x7B97;"><a href="#&#x96C6;&#x5408;&#x8FD0;&#x7B97;" class="headerlink" title="&#x96C6;&#x5408;&#x8FD0;&#x7B97;"></a><font size="4">&#x96C6;&#x5408;&#x8FD0;&#x7B97;</font></h2><p><img src="/images/SKILL/latex9.png" alt="LaTeX"></p><h2 id="&#x7279;&#x6B8A;&#x7B26;&#x53F7;"><a href="#&#x7279;&#x6B8A;&#x7B26;&#x53F7;" class="headerlink" title="&#x7279;&#x6B8A;&#x7B26;&#x53F7;"></a><font size="4">&#x7279;&#x6B8A;&#x7B26;&#x53F7;</font></h2><p><img src="/images/SKILL/latex10.png" alt="LaTeX"></p><h2 id="&#x7A7A;&#x683C;"><a href="#&#x7A7A;&#x683C;" class="headerlink" title="&#x7A7A;&#x683C;"></a><font size="4">&#x7A7A;&#x683C;</font></h2><p><img src="/images/SKILL/latex11.png" alt="LaTeX"></p><h2 id="&#x5B57;&#x4F53;&#x989C;&#x8272;"><a href="#&#x5B57;&#x4F53;&#x989C;&#x8272;" class="headerlink" title="&#x5B57;&#x4F53;&#x989C;&#x8272;"></a><font size="4">&#x5B57;&#x4F53;&#x989C;&#x8272;</font></h2><p><img src="/images/SKILL/latex12.png" alt="LaTeX"></p><h2 id="&#x5E38;&#x7528;&#x6570;&#x5B66;&#x7B26;&#x53F7;"><a href="#&#x5E38;&#x7528;&#x6570;&#x5B66;&#x7B26;&#x53F7;" class="headerlink" title="&#x5E38;&#x7528;&#x6570;&#x5B66;&#x7B26;&#x53F7;"></a><font size="4">&#x5E38;&#x7528;&#x6570;&#x5B66;&#x7B26;&#x53F7;</font></h2><p><img src="/images/SKILL/latex13.png" alt="LaTeX"></p><p><img src="/images/SKILL/latex14.png" alt="LaTeX"></p><h2 id="&#x591A;&#x884C;&#x7B26;&#x53F7;"><a href="#&#x591A;&#x884C;&#x7B26;&#x53F7;" class="headerlink" title="&#x591A;&#x884C;&#x7B26;&#x53F7;"></a><font size="4">&#x591A;&#x884C;&#x7B26;&#x53F7;</font></h2><p><img src="/images/SKILL/latex15.png" alt="LaTeX"></p><h1 id="LaTeX&#x5C0F;&#x7ED3;"><a href="#LaTeX&#x5C0F;&#x7ED3;" class="headerlink" title="LaTeX&#x5C0F;&#x7ED3;"></a><font size="5" color="red">LaTeX&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;LaTeX&#x4F5C;&#x4E3A;&#x5F53;&#x4E0B;&#x6D41;&#x884C;&#x7684;&#x6392;&#x7248;&#x7CFB;&#x7EDF;&#xFF0C;&#x8BB8;&#x591A;&#x6587;&#x6863;&#x90FD;&#x662F;&#x4EE5;LaTeX&#x6392;&#x7248;&#x7684;&#xFF0C;&#x5BF9;&#x4E8E;&#x516C;&#x5F0F;&#x8F83;&#x591A;&#x7684;&#x5B66;&#x672F;&#x6587;&#x6863;&#xFF0C;LaTeX&#x662F;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x7684;&#x3002;&#x6B64;&#x7F51;&#x9875;&#x4E0A;&#x7684;&#x6240;&#x6709;&#x516C;&#x5F0F;&#x90FD;&#x662F;&#x4F7F;&#x7528;LaTeX&#x7F16;&#x8F91;&#x7684;&#xFF0C;&#x4E5F;&#x662F;&#x4E3A;&#x4E86;&#x67E5;&#x8BE2;&#x7684;&#x65B9;&#x4FBF;&#xFF0C;&#x6545;&#x5199;&#x4E0B;&#x4E86;&#x8FD9;&#x7BC7;&#x6587;&#x5B57;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;LaTeX&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="程序员必备技能" scheme="https://USTCcoder.github.io/categories/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>Object-Oriented(面向对象)</title>
    <link href="https://USTCcoder.github.io/2019/09/18/python_class/"/>
    <id>https://USTCcoder.github.io/2019/09/18/python_class/</id>
    <published>2019-09-18T08:14:15.000Z</published>
    <updated>2019-09-20T02:05:07.839Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/LANGUAGE/python14.jpg" alt="14"></p><h1 id="Object-Oriented&#x4ECB;&#x7ECD;"><a href="#Object-Oriented&#x4ECB;&#x7ECD;" class="headerlink" title="Object-Oriented&#x4ECB;&#x7ECD;"></a><font size="5" color="red">Object-Oriented&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x662F;&#x4E00;&#x79CD;&#x975E;&#x5E38;&#x91CD;&#x8981;&#x7684;&#x7F16;&#x7A0B;&#x601D;&#x60F3;&#xFF0C;&#x628A;&#x6570;&#x636E;&#x548C;&#x64CD;&#x4F5C;&#x653E;&#x5728;&#x4E00;&#x8D77;&#xFF0C;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x6574;&#x4F53;&#xFF0C;&#x79F0;&#x4E3A;&#x5BF9;&#x8C61;&#x3002;Python&#x7684;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x548C;C++&#x7C7B;&#x4F3C;&#xFF0C;&#x4E5F;&#x5177;&#x6709;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7684;&#x4E09;&#x5927;&#x7279;&#x70B9;&#xFF0C;&#x5C01;&#x88C5;&#xFF0C;&#x7EE7;&#x627F;&#x548C;&#x591A;&#x6001;&#x3002;<br><a id="more"></a></p><h1 id="&#x9762;&#x5411;&#x8FC7;&#x7A0B;&#x4E0E;&#x9762;&#x5411;&#x5BF9;&#x8C61;"><a href="#&#x9762;&#x5411;&#x8FC7;&#x7A0B;&#x4E0E;&#x9762;&#x5411;&#x5BF9;&#x8C61;" class="headerlink" title="&#x9762;&#x5411;&#x8FC7;&#x7A0B;&#x4E0E;&#x9762;&#x5411;&#x5BF9;&#x8C61;"></a><font size="5" color="red">&#x9762;&#x5411;&#x8FC7;&#x7A0B;&#x4E0E;&#x9762;&#x5411;&#x5BF9;&#x8C61;</font></h1><h2 id="&#x9762;&#x5411;&#x8FC7;&#x7A0B;&#x7684;&#x7F16;&#x7A0B;&#x601D;&#x60F3;"><a href="#&#x9762;&#x5411;&#x8FC7;&#x7A0B;&#x7684;&#x7F16;&#x7A0B;&#x601D;&#x60F3;" class="headerlink" title="&#x9762;&#x5411;&#x8FC7;&#x7A0B;&#x7684;&#x7F16;&#x7A0B;&#x601D;&#x60F3;"></a><font size="4">&#x9762;&#x5411;&#x8FC7;&#x7A0B;&#x7684;&#x7F16;&#x7A0B;&#x601D;&#x60F3;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x81EA;&#x4E0A;&#x800C;&#x4E0B;&#x987A;&#x5E8F;&#x6267;&#x884C;&#xFF0C;&#x9010;&#x6B65;&#x6C42;&#x7CBE;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x7A0B;&#x5E8F;&#x7ED3;&#x6784;&#x6309;&#x7167;&#x529F;&#x80FD;&#x5206;&#x4E3A;&#x82E5;&#x5E72;&#x6A21;&#x5757;&#xFF0C;&#x5404;&#x90E8;&#x5206;&#x76F8;&#x5BF9;&#x72EC;&#x7ACB;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x6BCF;&#x4E00;&#x6A21;&#x5757;&#x5185;&#x90E8;&#x5747;&#x662F;&#x7531;&#x987A;&#x5E8F;&#xFF0C;&#x9009;&#x62E9;&#xFF0C;&#x5FAA;&#x73AF;&#x4E09;&#x79CD;&#x57FA;&#x672C;&#x7ED3;&#x6784;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x7A0B;&#x5E8F;&#x6D41;&#x7A0B;&#x5728;&#x5199;&#x7A0B;&#x5E8F;&#x65F6;&#x5C31;&#x5DF2;&#x7ECF;&#x786E;&#x5B9A;&#x3002;</font></p><h2 id="&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7684;&#x7F16;&#x7A0B;&#x601D;&#x60F3;"><a href="#&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7684;&#x7F16;&#x7A0B;&#x601D;&#x60F3;" class="headerlink" title="&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7684;&#x7F16;&#x7A0B;&#x601D;&#x60F3;"></a><font size="4">&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7684;&#x7F16;&#x7A0B;&#x601D;&#x60F3;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x628A;&#x6570;&#x636E;&#x548C;&#x64CD;&#x4F5C;&#x653E;&#x5728;&#x4E00;&#x8D77;&#xFF0C;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x6574;&#x4F53;&#xFF0C;&#x79F0;&#x4E3A;&#x5BF9;&#x8C61;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x5BF9;&#x540C;&#x7C7B;&#x5BF9;&#x8C61;&#x62BD;&#x8C61;&#x51FA;&#x5176;&#x5171;&#x6027;&#xFF0C;&#x5F62;&#x6210;&#x7C7B;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x7C7B;&#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x5916;&#x90E8;&#x63A5;&#x53E3;&#x4E0E;&#x5916;&#x754C;&#x64CD;&#x4F5C;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x7A0B;&#x5E8F;&#x6D41;&#x7A0B;&#x5728;&#x7528;&#x6237;&#x4F7F;&#x7528;&#x65F6;&#x51B3;&#x5B9A;&#x3002;</font></p><h1 id="Python&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x5E94;&#x7528;"><a href="#Python&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x5E94;&#x7528;" class="headerlink" title="Python&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x5E94;&#x7528;"></a><font size="5" color="red">Python&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x5E94;&#x7528;</font></h1><h2 id="Python&#x521B;&#x5EFA;&#x7C7B;"><a href="#Python&#x521B;&#x5EFA;&#x7C7B;" class="headerlink" title="Python&#x521B;&#x5EFA;&#x7C7B;"></a><font size="4">Python&#x521B;&#x5EFA;&#x7C7B;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># &#x7C7B;&#x5C31;&#x662F;&#x4E00;&#x79CD;&#x7269;&#x4F53;&#x7684;&#x603B;&#x79F0;&#xFF0C;&#x5177;&#x6709;&#x5C5E;&#x6027;(&#x6210;&#x5458;&#x53D8;&#x91CF;)&#x548C;&#x884C;&#x4E3A;(&#x6210;&#x5458;&#x65B9;&#x6CD5;)&#x4E24;&#x4E2A;&#x7279;&#x5F81;&#x3002;&#x5176;&#x672C;&#x8EAB;&#x5E76;&#x4E0D;&#x5360;&#x7528;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#xFF0C;&#x5176;&#x5B9E;&#x4F8B;&#x5316;&#x7684;&#x5BF9;&#x8C61;&#x5360;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#x3002;</span><br><span class="line"># class &#x7C7B;&#x540D;(&#x7236;&#x7C7B;): </span><br><span class="line">#     &#x5C5E;&#x6027;</span><br><span class="line">#     &#x884C;&#x4E3A;</span><br><span class="line"></span><br><span class="line"># &#x7C7B;&#x540D;&#x4E00;&#x822C;&#x9996;&#x5B57;&#x6BCD;&#x5927;&#x5199;&#xFF0C;object&#x662F;&#x6240;&#x6709;&#x7C7B;&#x7684;&#x7236;&#x7C7B;&#xFF0C;&#x4E00;&#x822C;&#x6CA1;&#x6709;&#x5408;&#x9002;&#x7684;&#x7236;&#x7C7B;&#x5C31;&#x5199;object&#x3002;</span><br><span class="line">class Person(object):</span><br><span class="line"># &#x5B9A;&#x4E49;&#x5C5E;&#x6027;</span><br><span class="line">    name = &apos;&apos;</span><br><span class="line">    age = 0</span><br><span class="line">    height = 0</span><br><span class="line">    weight = 0</span><br><span class="line"></span><br><span class="line"># &#x5B9A;&#x4E49;&#x884C;&#x4E3A;&#xFF0C;&#x6CE8;&#x610F;&#x6210;&#x5458;&#x65B9;&#x6CD5;&#x7684;&#x53C2;&#x6570;&#x4E00;&#x822C;&#x4EE5;self&#x5F53;&#x4F5C;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;(&#x53EF;&#x4EE5;&#x4E3A;&#x5176;&#x4ED6;&#x7684;&#x5355;&#x8BCD;&#xFF0C;&#x4F46;&#x662F;&#x51E0;&#x4E4E;&#x90FD;&#x4F7F;&#x7528;self)&#xFF0C;&#x5176;&#x4E2D;self&#x5C31;&#x4EE3;&#x8868;&#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#xFF0C;&#x54EA;&#x4E2A;&#x5BF9;&#x8C61;&#x8C03;&#x7528;&#x65B9;&#x6CD5;&#x54EA;&#x4E2A;&#x5BF9;&#x8C61;&#x5C31;&#x662F;self&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;C/C++&#x4E2D;&#x7684;this&#x6307;&#x9488;&#x3002;</span><br><span class="line">    def eat(self, food):</span><br><span class="line">        print(&apos;eat&apos; + food)</span><br><span class="line"></span><br><span class="line">    def sleep(self):</span><br><span class="line">        print(&apos;I need sleep&apos;)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python88.png" alt="88"></p><h2 id="Python&#x5B9E;&#x4F8B;&#x5316;&#x5BF9;&#x8C61;"><a href="#Python&#x5B9E;&#x4F8B;&#x5316;&#x5BF9;&#x8C61;" class="headerlink" title="Python&#x5B9E;&#x4F8B;&#x5316;&#x5BF9;&#x8C61;"></a><font size="4">Python&#x5B9E;&#x4F8B;&#x5316;&#x5BF9;&#x8C61;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    name = &apos;&apos;</span><br><span class="line">    age = 0</span><br><span class="line">    height = 0</span><br><span class="line">    weight = 0</span><br><span class="line"></span><br><span class="line">    def eat(self, food):</span><br><span class="line">        print(&apos;eat&apos; + food)</span><br><span class="line"></span><br><span class="line">    def sleep(self):</span><br><span class="line">        print(&apos;I need sleep&apos;)</span><br><span class="line"></span><br><span class="line"># &#x7C7B;&#x4F3C;&#x4E8E;&#x5973;&#x5A32;&#x9020;&#x4EBA;&#x4E00;&#x6837;&#xFF0C;&#x6709;&#x4E86;&#x4EBA;&#x578B;&#x6A21;&#x5177;&#xFF0C;&#x5973;&#x5A32;&#x53EF;&#x4EE5;&#x6309;&#x7167;&#x6A21;&#x5177;&#x521B;&#x5EFA;&#x4EBA;&#x7C7B;&#x5BF9;&#x8C61;</span><br><span class="line"># &#x5BF9;&#x8C61;&#x540D; = &#x7C7B;&#x540D;(&#x53C2;&#x6570;&#x5217;&#x8868;) &#x7528;&#x7C7B;&#x540D;&#x5B9E;&#x4F8B;&#x5316;&#x5BF9;&#x8C61;&#xFF0C;&#x6CE8;&#x610F;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#xFF0C;&#x4E5F;&#x4E0D;&#x80FD;&#x7701;&#x7565;&#x62EC;&#x53F7;&#x3002;</span><br><span class="line">per = Person()</span><br><span class="line">print(per)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python89.png" alt="89"></p><h2 id="Python&#x8BBF;&#x95EE;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;"><a href="#Python&#x8BBF;&#x95EE;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;" class="headerlink" title="Python&#x8BBF;&#x95EE;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;"></a><font size="4">Python&#x8BBF;&#x95EE;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    name = &apos;&apos;</span><br><span class="line">    age = 0</span><br><span class="line">    height = 0</span><br><span class="line">    weight = 0</span><br><span class="line"></span><br><span class="line">    def eat(self, food):</span><br><span class="line">        print(&apos;eat &apos; + food)</span><br><span class="line"></span><br><span class="line">    def sleep(self):</span><br><span class="line">        print(&apos;I need sleep&apos;)</span><br><span class="line"></span><br><span class="line"># &#x5BF9;&#x8C61;&#x540D;.&#x5C5E;&#x6027;&#x540D; &#x8BBF;&#x95EE;&#x8BE5;&#x5BF9;&#x8C61;&#x7684;&#x67D0;&#x4E00;&#x4E2A;&#x5C5E;&#x6027;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x5BF9;&#x8BE5;&#x5BF9;&#x8C61;&#x7684;&#x67D0;&#x4E00;&#x5C5E;&#x6027;&#x8D4B;&#x503C;</span><br><span class="line">per = Person()</span><br><span class="line">print(per.name + &apos;&#x7684;&#x5E74;&#x9F84;&#x4E3A;&#xFF1A;&apos; + str(per.age))</span><br><span class="line">per.name, per.age = &apos;&#x5F20;&#x4E09;&apos;, 18</span><br><span class="line">print(per.name + &apos;&#x7684;&#x5E74;&#x9F84;&#x4E3A;&#xFF1A;&apos; + str(per.age))</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python90.png" alt="90"></p><h2 id="Python&#x8BBF;&#x95EE;&#x5BF9;&#x8C61;&#x65B9;&#x6CD5;"><a href="#Python&#x8BBF;&#x95EE;&#x5BF9;&#x8C61;&#x65B9;&#x6CD5;" class="headerlink" title="Python&#x8BBF;&#x95EE;&#x5BF9;&#x8C61;&#x65B9;&#x6CD5;"></a><font size="4">Python&#x8BBF;&#x95EE;&#x5BF9;&#x8C61;&#x65B9;&#x6CD5;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    name = &apos;&apos;</span><br><span class="line">    age = 0</span><br><span class="line">    height = 0</span><br><span class="line">    weight = 0</span><br><span class="line"></span><br><span class="line">    def eat(self, food):</span><br><span class="line">        print(&apos;eat &apos; + food)</span><br><span class="line"></span><br><span class="line">    def sleep(self):</span><br><span class="line">        print(&apos;I need sleep&apos;)</span><br><span class="line"></span><br><span class="line"># &#x5BF9;&#x8C61;&#x540D;.&#x65B9;&#x6CD5;&#x540D;(&#x53C2;&#x6570;&#x5217;&#x8868;) &#x8BBF;&#x95EE;&#x8BE5;&#x5BF9;&#x8C61;&#x7684;&#x67D0;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x6CE8;&#x610F;self&#x53C2;&#x6570;&#x4E0D;&#x9700;&#x8981;&#x4F20;&#x503C;</span><br><span class="line">per = Person()</span><br><span class="line">per.eat(&apos;apple&apos;)</span><br><span class="line">per.sleep()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python91.png" alt="91"></p><h2 id="Python&#x7C7B;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;"><a href="#Python&#x7C7B;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;" class="headerlink" title="Python&#x7C7B;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;"></a><font size="4">Python&#x7C7B;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># def __init__(self, &#x53C2;&#x6570;&#x5217;&#x8868;): &#x6784;&#x9020;&#x51FD;&#x6570;&#x5728;&#x4F7F;&#x7528;&#x7C7B;&#x521B;&#x5EFA;&#x5BF9;&#x8C61;&#x7684;&#x65F6;&#x5019;&#x81EA;&#x52A8;&#x8C03;&#x7528;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x663E;&#x793A;&#x7684;&#x5199;&#x51FA;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x9ED8;&#x8BA4;&#x81EA;&#x52A8;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x7A7A;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;</span><br><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, name, age, height, weight):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.height = height</span><br><span class="line">        self.weight = weight</span><br><span class="line"></span><br><span class="line">    def eat(self, food):</span><br><span class="line">        print(&apos;eat &apos; + food)</span><br><span class="line"></span><br><span class="line">    def sleep(self):</span><br><span class="line">        print(&apos;I need sleep&apos;)</span><br><span class="line"></span><br><span class="line"># &#x7C7B;&#x540D;&#x5B9E;&#x4F8B;&#x5316;&#x5BF9;&#x8C61;&#x65F6;&#x7ED9;&#x5BF9;&#x8C61;&#x7684;&#x5C5E;&#x6027;&#x8D4B;&#x503C;</span><br><span class="line">per = Person(&apos;&#x674E;&#x56DB;&apos;, 20, 180, 140)</span><br><span class="line">print(per.name + &apos;&#x7684;&#x5E74;&#x9F84;&#x4E3A;&#xFF1A;&apos; + str(per.age))</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python92.png" alt="92"></p><h2 id="Python&#x7C7B;&#x7684;&#x6790;&#x6784;&#x51FD;&#x6570;"><a href="#Python&#x7C7B;&#x7684;&#x6790;&#x6784;&#x51FD;&#x6570;" class="headerlink" title="Python&#x7C7B;&#x7684;&#x6790;&#x6784;&#x51FD;&#x6570;"></a><font size="4">Python&#x7C7B;&#x7684;&#x6790;&#x6784;&#x51FD;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># def __del__(self): &#x6790;&#x6784;&#x51FD;&#x6570;&#x5728;&#x91CA;&#x653E;&#x5BF9;&#x8C61;&#x7684;&#x65F6;&#x5019;&#x81EA;&#x52A8;&#x8C03;&#x7528;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x663E;&#x793A;&#x7684;&#x5199;&#x51FA;&#x6790;&#x6784;&#x51FD;&#x6570;&#xFF0C;&#x9ED8;&#x8BA4;&#x81EA;&#x52A8;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x7A7A;&#x7684;&#x6790;&#x6784;&#x51FD;&#x6570;</span><br><span class="line">class Person(object):</span><br><span class="line">    def __del__(self):</span><br><span class="line">        print(&apos;Destroy the object&apos;)</span><br><span class="line"></span><br><span class="line">    def eat(self, food):</span><br><span class="line">        print(&apos;eat &apos; + food)</span><br><span class="line"></span><br><span class="line">    def sleep(self):</span><br><span class="line">        print(&apos;I need sleep&apos;)</span><br><span class="line"></span><br><span class="line"># &#x7C7B;&#x540D;&#x5B9E;&#x4F8B;&#x5316;&#x5BF9;&#x8C61;&#x65F6;&#x7ED9;&#x5BF9;&#x8C61;&#x7684;&#x5C5E;&#x6027;&#x8D4B;&#x503C;</span><br><span class="line">per = Person()</span><br><span class="line">del per</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python93.png" alt="93"></p><h2 id="Python&#x4E2D;&#x7C7B;&#x5C5E;&#x6027;&#x548C;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;"><a href="#Python&#x4E2D;&#x7C7B;&#x5C5E;&#x6027;&#x548C;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;" class="headerlink" title="Python&#x4E2D;&#x7C7B;&#x5C5E;&#x6027;&#x548C;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;"></a><font size="4">Python&#x4E2D;&#x7C7B;&#x5C5E;&#x6027;&#x548C;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    talent = None</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"># &#x7C7B;&#x5C5E;&#x6027;&#x662F;&#x5199;&#x5728;&#x7C7B;&#x5185;&#x90E8;&#x7684;&#x5C5E;&#x6027;&#xFF0C;&#x800C;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;&#x662F;&#x7528;self&#x5B9A;&#x4E49;&#x6216;&#x8005;&#x5728;&#x5916;&#x90E8;&#x52A8;&#x6001;&#x5B9A;&#x4E49;&#x7684;&#x3002;</span><br><span class="line"># &#x5BF9;&#x8C61;&#x5C5E;&#x6027;&#x7684;&#x4F18;&#x5148;&#x7EA7;&#x9AD8;&#x4E8E;&#x7C7B;&#x5C5E;&#x6027;&#xFF0C;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x6CA1;&#x6709;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;&#xFF0C;&#x5219;&#x4F7F;&#x7528;&#x5176;&#x7C7B;&#x5C5E;&#x6027;&#xFF0C;&#x5982;&#x679C;&#x6DFB;&#x52A0;&#x4E86;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;&#xFF0C;&#x5219;&#x4F7F;&#x7528;&#x5176;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;&#x3002;</span><br><span class="line"># &#x5728;&#x6B64;&#x4EE3;&#x7801;&#x4E2D;talent&#x5C5E;&#x4E8E;&#x7C7B;&#x5C5E;&#x6027;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x7C7B;&#x540D;.&#x5C5E;&#x6027;&#x8C03;&#x7528;&#xFF0C;name&#x548C;age&#x5C5E;&#x4E8E;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;&#xFF0C;&#x901A;&#x8FC7;&#x5BF9;&#x8C61;&#x540D;.&#x5C5E;&#x6027;&#x8C03;&#x7528;&#x3002;</span><br><span class="line"># &#x6CE8;&#x610F;&#xFF1A;&#x5C3D;&#x91CF;&#x4E0D;&#x8981;&#x5C06;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;&#x4E0E;&#x7C7B;&#x5C5E;&#x6027;&#x540C;&#x540D;&#xFF0C;&#x56E0;&#x4E3A;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;&#x4F1A;&#x5C4F;&#x853D;&#x7C7B;&#x5C5E;&#x6027;&#xFF0C;&#x5F53;&#x5220;&#x9664;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;&#x540E;&#xFF0C;&#x53C8;&#x80FD;&#x4F7F;&#x7528;&#x7C7B;&#x5C5E;&#x6027;&#x4E86;&#x3002;</span><br><span class="line">per = Person(&apos;&#x5F20;&#x4E09;&apos;, 18)</span><br><span class="line">print(Person.talent)</span><br><span class="line">print(per.talent)</span><br><span class="line">per.talent = &apos;Python&apos;</span><br><span class="line">print(Person.talent)</span><br><span class="line">print(per.talent)</span><br><span class="line"></span><br><span class="line"># &#x7C7B;&#x65B9;&#x6CD5;&#x548C;&#x5BF9;&#x8C61;&#x65B9;&#x6CD5;&#x7C7B;&#x4F3C;&#xFF0C;&#x7C7B;&#x65B9;&#x6CD5;&#x662F;&#x5728;&#x7C7B;&#x5185;&#x90E8;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x800C;&#x5BF9;&#x8C61;&#x65B9;&#x5F0F;&#x662F;&#x5728;&#x5916;&#x90E8;&#x52A8;&#x6001;&#x5B9A;&#x4E49;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x4E00;&#x822C;&#x4E0D;&#x5E38;&#x7528;&#xFF0C;&#x4F5C;&#x4E3A;&#x4E86;&#x89E3;&#x5373;&#x53EF;&#x3002;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python100.png" alt="100"></p><h2 id="Python&#x7C7B;&#x6253;&#x5370;&#x51FD;&#x6570;"><a href="#Python&#x7C7B;&#x6253;&#x5370;&#x51FD;&#x6570;" class="headerlink" title="Python&#x7C7B;&#x6253;&#x5370;&#x51FD;&#x6570;"></a><font size="4">Python&#x7C7B;&#x6253;&#x5370;&#x51FD;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># def __str__(self): &#x5728;&#x8C03;&#x7528;print&#x6253;&#x5370;&#x5BF9;&#x8C61;&#x65F6;&#x81EA;&#x52A8;&#x8C03;&#x7528;&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x7ED9;&#x7528;&#x6237;&#x4F7F;&#x7528;&#x7684;&#x63CF;&#x8FF0;&#x5BF9;&#x8C61;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x663E;&#x793A;&#x7684;&#x5199;&#x51FA;&#xFF0C;&#x9ED8;&#x8BA4;&#x8FD4;&#x56DE;&#x7C7B;&#x7684;&#x540D;&#x79F0;&#x548C;&#x6240;&#x5904;&#x7684;&#x5185;&#x5B58;&#x5730;&#x5740;</span><br><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, name, age, height, weight):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.height = height</span><br><span class="line">        self.weight = weight</span><br><span class="line"> </span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &quot;&#x59D3;&#x540D;&#xFF1A;%s  &#x5E74;&#x9F84;&#xFF1A;%d&#xFF0C;&#x8EAB;&#x9AD8;&#xFF1A;%.1f&#xFF0C;&#x4F53;&#x91CD;&#xFF1A;%.1f&quot; %(self.name, self.age, self.height, self.weight)</span><br><span class="line"></span><br><span class="line">per = Person(&apos;&#x738B;&#x4E94;&apos;, 21, 178, 160)</span><br><span class="line">print(per)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python94.png" alt="94"></p><h2 id="Python&#x52A8;&#x6001;&#x8BED;&#x8A00;"><a href="#Python&#x52A8;&#x6001;&#x8BED;&#x8A00;" class="headerlink" title="Python&#x52A8;&#x6001;&#x8BED;&#x8A00;"></a><font size="4">Python&#x52A8;&#x6001;&#x8BED;&#x8A00;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, name, age, height, weight):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.height = height</span><br><span class="line">        self.weight = weight</span><br><span class="line"></span><br><span class="line">per = Person(&apos;&#x8D75;&#x516D;&apos;, 22, 186, 170)</span><br><span class="line">print(per.name + &apos;&#x7684;&#x5B58;&#x6B3E;&#x4E3A;&#xFF1A;&apos; + str(per.money))</span><br><span class="line"></span><br><span class="line"># per&#x672C;&#x6765;&#x6CA1;&#x6709;money&#x5C5E;&#x6027;&#xFF0C;&#x53EF;&#x4EE5;&#x52A8;&#x6001;&#x6DFB;&#x52A0;money&#x5C5E;&#x6027;</span><br><span class="line">per.money = 10000</span><br><span class="line">print(per.name + &apos;&#x7684;&#x5B58;&#x6B3E;&#x4E3A;&#xFF1A;&apos; + str(per.money))</span><br><span class="line"></span><br><span class="line"># &#x8FD8;&#x53EF;&#x4EE5;&#x52A8;&#x6001;&#x6DFB;&#x52A0;&#x65B9;&#x6CD5;&#xFF0C;&#x9700;&#x8981;&#x4ECE;types&#x4E2D;&#x5BFC;&#x5165;Method&#x7C7B;</span><br><span class="line">from types import MethodType </span><br><span class="line"></span><br><span class="line">def say(self):</span><br><span class="line">    print(&apos;my name is &apos; + self.name)</span><br><span class="line"></span><br><span class="line">per.say()</span><br><span class="line"></span><br><span class="line"># &#x5BF9;&#x8C61;&#x540D;.&#x65B9;&#x6CD5;&#x540D; = MethodType(&#x6DFB;&#x52A0;&#x7684;&#x51FD;&#x6570;&#x540D;, &#x5BF9;&#x8C61;&#x540D;)</span><br><span class="line">per.say = MethodType(say, per)</span><br><span class="line">per.say()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python95.png" alt="95"></p><h2 id="Python&#x4E2D;&#x52A8;&#x6001;&#x6DFB;&#x52A0;&#x9650;&#x5236;"><a href="#Python&#x4E2D;&#x52A8;&#x6001;&#x6DFB;&#x52A0;&#x9650;&#x5236;" class="headerlink" title="Python&#x4E2D;&#x52A8;&#x6001;&#x6DFB;&#x52A0;&#x9650;&#x5236;"></a><font size="4">Python&#x4E2D;&#x52A8;&#x6001;&#x6DFB;&#x52A0;&#x9650;&#x5236;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from types import MethodType </span><br><span class="line"></span><br><span class="line"># &#x901A;&#x8FC7;&#x5B9A;&#x4E49;__slots__ = (&#x6210;&#x5458;&#x5C5E;&#x6027;&#x6216;&#x8005;&#x6210;&#x5458;&#x65B9;&#x6CD5;&#x540D;) &#x4F7F;&#x5BF9;&#x8C61;&#x4E2D;&#x7684;&#x6210;&#x5458;&#x5FC5;&#x987B;&#x5B58;&#x5728;&#x4E8E;&#x5143;&#x7EC4;&#x4E4B;&#x4E2D;&#xFF0C;&#x53EF;&#x4EE5;&#x9650;&#x5236;&#x5BF9;&#x8C61;&#x968F;&#x610F;&#x52A8;&#x6001;&#x6DFB;&#x52A0;&#x6210;&#x5458;</span><br><span class="line">class Person(object):</span><br><span class="line">    __slots__ = (&apos;name&apos;, &apos;age&apos;, &apos;money&apos;)</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">per = Person(&apos;&#x8D75;&#x516D;&apos;, 22)</span><br><span class="line">per.money = 10000</span><br><span class="line">print(per.name + &apos;&#x7684;&#x5B58;&#x6B3E;&#x4E3A;&#xFF1A;&apos; + str(per.money))</span><br><span class="line">per.weight = 160</span><br><span class="line"></span><br><span class="line">def say(self):</span><br><span class="line">    print(&apos;my name is &apos; + self.name)</span><br><span class="line"></span><br><span class="line">per.say = MethodType(say, per)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python101.png" alt="101"></p><h2 id="Python&#x7C7B;&#x4E2D;&#x7684;&#x5171;&#x6709;&#x548C;&#x79C1;&#x6709;"><a href="#Python&#x7C7B;&#x4E2D;&#x7684;&#x5171;&#x6709;&#x548C;&#x79C1;&#x6709;" class="headerlink" title="Python&#x7C7B;&#x4E2D;&#x7684;&#x5171;&#x6709;&#x548C;&#x79C1;&#x6709;"></a><font size="4">Python&#x7C7B;&#x4E2D;&#x7684;&#x5171;&#x6709;&#x548C;&#x79C1;&#x6709;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># __&#x5C5E;&#x6027;&#x540D;/&#x51FD;&#x6570;&#x540D; &#x5982;&#x679C;&#x60F3;&#x8BA9;&#x5185;&#x90E8;&#x6210;&#x5458;&#x4E0D;&#x88AB;&#x5916;&#x90E8;&#x76F4;&#x63A5;&#x8BBF;&#x95EE;&#xFF0C;&#x5728;&#x6210;&#x5458;&#x5C5E;&#x6027;&#x6216;&#x65B9;&#x6CD5;&#x524D;&#x52A0;__(&#x4E24;&#x4E2A;&#x4E0B;&#x5212;&#x7EBF;)&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x5185;&#x90E8;&#x662F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x7684;</span><br><span class="line"># &#x5982;&#x679C;&#x60F3;&#x4FEE;&#x6539;&#x5176;&#x503C;&#x53EA;&#x80FD;&#x901A;&#x8FC7;&#x81EA;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x5B9E;&#x73B0;&#x5BF9;&#x67D0;&#x4E9B;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x8FDB;&#x884C;&#x4FEE;&#x6539;&#x64CD;&#x4F5C;&#xFF0C;&#x8FD9;&#x6837;&#x4E5F;&#x8FBE;&#x5230;&#x4E86;&#x4E00;&#x79CD;&#x4FDD;&#x62A4;&#x4F5C;&#x7528;</span><br><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, name, age, height, weight):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.height = height</span><br><span class="line">        self.__weight = weight</span><br><span class="line"></span><br><span class="line">    def set_weight(self, weight):</span><br><span class="line">        self.__weight = weight</span><br><span class="line"></span><br><span class="line">    def enquire(self):</span><br><span class="line">        print(&apos;&#x4F53;&#x91CD;&#x4E3A;&#xFF1A;&apos; + str(self.__weight))</span><br><span class="line"></span><br><span class="line">per = Person(&apos;&#x738B;&#x4E94;&apos;, 21, 178, 160)</span><br><span class="line">per.enquire()</span><br><span class="line">print(per.__weight)</span><br><span class="line">per.set_weight(150)</span><br><span class="line">per.enquire()</span><br><span class="line"></span><br><span class="line"># &#x539F;&#x56E0;&#x662F;Python&#x89E3;&#x91CA;&#x5668;&#x5C06;__&#x6210;&#x5458;&#x53D8;&#x6210;&#x4E86;_(&#x4E00;&#x4E2A;&#x4E0B;&#x5212;&#x7EBF;)&#x7C7B;&#x540D;__(&#x4E24;&#x4E2A;&#x4E0B;&#x5212;&#x7EBF;)&#x6210;&#x5458;&#x540D;(&#x5373;&#x5728;&#x6B64;&#x5C06;__weight&#x6539;&#x6210;&#x4E86;_Person__weight)&#xFF0C;&#x56E0;&#x6B64;&#x4E0D;&#x662F;&#x7EDD;&#x5BF9;&#x79C1;&#x6709;&#x7684;</span><br><span class="line">print(per._Person__weight)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python96.png" alt="96"></p><h2 id="Python&#x7C7B;&#x4E2D;&#x7684;-property&#x88C5;&#x9970;&#x5668;"><a href="#Python&#x7C7B;&#x4E2D;&#x7684;-property&#x88C5;&#x9970;&#x5668;" class="headerlink" title="Python&#x7C7B;&#x4E2D;&#x7684;@property&#x88C5;&#x9970;&#x5668;"></a><font size="4">Python&#x7C7B;&#x4E2D;&#x7684;@property&#x88C5;&#x9970;&#x5668;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># &#x5BF9;&#x79C1;&#x6709;&#x6210;&#x5458;&#x60F3;&#x8981;&#x4FBF;&#x6377;&#x7684;&#x8BBF;&#x95EE;&#x548C;&#x4FEE;&#x6539;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;@property&#x88C5;&#x9970;&#x5668;&#xFF0C;&#x76F8;&#x5F53;&#x4E8E;&#x8C03;&#x7528;&#x4E86;get&#x548C;set&#x65B9;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x8BA9;&#x53D7;&#x9650;&#x5236;&#x7684;&#x6210;&#x5458;&#x4E5F;&#x80FD;&#x591F;&#x76F4;&#x63A5;&#x4F7F;&#x7528;.&#x8BED;&#x6CD5;</span><br><span class="line"># @property </span><br><span class="line"># def &#x53D8;&#x91CF;&#x540D;(self):</span><br><span class="line">#     return self.__&#x53D8;&#x91CF;&#x540D;</span><br><span class="line"># @&#x53D8;&#x91CF;&#x540D;.setter</span><br><span class="line"># def &#x53D8;&#x91CF;&#x540D;(self, &#x53D8;&#x91CF;&#x540D;):</span><br><span class="line">#    xxx</span><br><span class="line"># &#x4EE5;&#x4E0A;&#x53D8;&#x91CF;&#x540D;&#x90FD;&#x662F;&#x672A;&#x52A0;&#x4E0B;&#x5212;&#x7EBF;&#x7684;&#x53D8;&#x91CF;&#x540D;&#xFF0C;@property&#x4E0B;&#x9762;&#x7684;&#x5185;&#x5BB9;&#x76F8;&#x5F53;&#x4E8E;get&#x65B9;&#x6CD5;&#xFF0C;@&#x53D8;&#x91CF;&#x540D;.setter&#x4E0B;&#x9762;&#x7684;&#x5185;&#x5BB9;&#x76F8;&#x5F53;&#x4E8E;set&#x65B9;&#x6CD5;&#x3002;</span><br><span class="line"></span><br><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, name, age, height, weight):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.height = height</span><br><span class="line">        self.__weight = weight</span><br><span class="line"></span><br><span class="line">    def set_weight(self, weight):</span><br><span class="line">        self.__weight = weight</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def weight(self):</span><br><span class="line">        return self.__weight</span><br><span class="line">    @weight.setter</span><br><span class="line">    def weight(self, weight):</span><br><span class="line">        self.__weight = weight</span><br><span class="line"></span><br><span class="line">per = Person(&apos;&#x738B;&#x4E94;&apos;, 21, 178, 160)</span><br><span class="line"></span><br><span class="line"># &#x8C03;&#x7528;&#x65F6;&#x4E5F;&#x662F;&#x76F4;&#x63A5;&#x8C03;&#x7528;&#x5BF9;&#x8C61;&#x540D;.&#x539F;&#x540D;&#x5373;&#x53EF;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x52A0;&#x53CC;&#x4E0B;&#x5212;&#x7EBF;__</span><br><span class="line">print(per.weight)</span><br><span class="line">per.weight = 150</span><br><span class="line">print(per.weight)</span><br><span class="line"></span><br><span class="line"># &#x539F;&#x56E0;&#x662F;Python&#x89E3;&#x91CA;&#x5668;&#x5C06;__&#x6210;&#x5458;&#x53D8;&#x6210;&#x4E86;_(&#x4E00;&#x4E2A;&#x4E0B;&#x5212;&#x7EBF;)&#x7C7B;&#x540D;__(&#x4E24;&#x4E2A;&#x4E0B;&#x5212;&#x7EBF;)&#x6210;&#x5458;&#x540D;(&#x5373;&#x5728;&#x6B64;&#x5C06;__weight&#x6539;&#x6210;&#x4E86;_Person__weight)&#xFF0C;&#x56E0;&#x6B64;&#x4E0D;&#x662F;&#x7EDD;&#x5BF9;&#x79C1;&#x6709;&#x7684;</span><br><span class="line">print(per._Person__weight)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python96.png" alt="96"></p><h2 id="Python&#x7C7B;&#x7684;&#x5355;&#x7EE7;&#x627F;"><a href="#Python&#x7C7B;&#x7684;&#x5355;&#x7EE7;&#x627F;" class="headerlink" title="Python&#x7C7B;&#x7684;&#x5355;&#x7EE7;&#x627F;"></a><font size="4">Python&#x7C7B;&#x7684;&#x5355;&#x7EE7;&#x627F;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, name, age, height, weight):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.height = height</span><br><span class="line">        self.weight = weight</span><br><span class="line"></span><br><span class="line">    def eat(self, food):</span><br><span class="line">        print(&apos;eat &apos; + food)</span><br><span class="line"></span><br><span class="line">    def sleep(self):</span><br><span class="line">        print(&apos;I need sleep&apos;)</span><br><span class="line"></span><br><span class="line"># &#x5BF9;&#x4E8E;&#x4E16;&#x95F4;&#x4E07;&#x7269;&#xFF0C;&#x5927;&#x591A;&#x6570;&#x90FD;&#x6709;&#x8FD9;&#x4E00;&#x822C;&#x548C;&#x7279;&#x6B8A;&#x7684;&#x5173;&#x7CFB;&#xFF0C;&#x5982;&#x4EBA;&#x548C;&#x7A0B;&#x5E8F;&#x5458;&#x4E4B;&#x95F4;&#x7684;&#x5173;&#x7CFB;&#xFF0C;&#x7A0B;&#x5E8F;&#x5458;&#x7EE7;&#x627F;&#x4E86;&#x4EBA;&#x7684;&#x6240;&#x6709;&#x7279;&#x70B9;&#xFF0C;&#x4F46;&#x662F;&#x53C8;&#x6709;&#x4E00;&#x4E9B;&#x7279;&#x6B8A;&#x7684;&#x7279;&#x70B9;&#x3002;&#x5C06;&#x4EBA;&#x8FD9;&#x4E2A;&#x7C7B;&#x522B;&#x79F0;&#x4E3A;&#x5B50;&#x7C7B;(&#x57FA;&#x7C7B;)&#xFF0C;&#x5C06;&#x7A0B;&#x5E8F;&#x5458;&#x8FD9;&#x4E2A;&#x7C7B;&#x522B;&#x79F0;&#x4E3A;&#x7236;&#x7C7B;(&#x8D85;&#x7C7B;)&#x3002;</span><br><span class="line"># &#x6240;&#x6709;&#x7684;&#x7C7B;&#x90FD;&#x662F;&#x7EE7;&#x627F;&#x4E8E;object&#x7C7B;&#xFF0C;&#x7EE7;&#x627F;&#x53EF;&#x4EE5;&#x5927;&#x5927;&#x7B80;&#x5316;&#x4EE3;&#x7801;&#xFF0C;&#x63D0;&#x9AD8;&#x4EE3;&#x7801;&#x7684;&#x5065;&#x58EE;&#x6027;&#x548C;&#x5B89;&#x5168;&#x6027;&#x3002;</span><br><span class="line"># class &#x7C7B;&#x540D;(&#x7236;&#x7C7B;): &#x5B50;&#x7C7B;&#x7EE7;&#x627F;&#x7236;&#x7C7B;&#xFF0C;&#x9700;&#x8981;&#x5728;&#x7C7B;&#x540D;&#x540E;&#x9762;&#x7684;&#x62EC;&#x53F7;&#x4E2D;&#x5199;&#x5165;&#x7236;&#x7C7B;&#x540D;&#xFF0C;&#x7EE7;&#x627F;&#x65F6;&#x8C03;&#x7528;&#x7236;&#x7C7B;&#x7684;__init__&#x53EA;&#x9700;&#x8981;&#x5199;super(&#x5B50;&#x7C7B;&#x540D;, self).__init__(&#x53C2;&#x6570;&#x5217;&#x8868;)&#x5373;&#x53EF;&#xFF0C;&#x53C2;&#x6570;&#x5217;&#x8868;&#x4E2D;&#x4E0D;&#x9700;&#x8981;&#x5199;self</span><br><span class="line"># &#x6CE8;&#x610F;&#x7236;&#x7C7B;&#x7684;&#x79C1;&#x6709;&#x6210;&#x5458;&#x5B50;&#x7C7B;&#x53EF;&#x4EE5;&#x7EE7;&#x627F;&#x8FC7;&#x6765;&#xFF0C;&#x4F46;&#x662F;&#x65E0;&#x6CD5;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#xFF0C;&#x53EA;&#x80FD;&#x901A;&#x8FC7;&#x7236;&#x7C7B;&#x7684;&#x81EA;&#x5B9A;&#x4E49;&#x51FD;&#x6570;&#x8BBF;&#x95EE;&#x3002;</span><br><span class="line"># &#x5B50;&#x7C7B;&#x7279;&#x6709;&#x7684;&#x6210;&#x5458;&#x548C;&#x4E4B;&#x524D;&#x5B9A;&#x4E49;&#x666E;&#x901A;&#x7C7B;&#x65F6;&#x76F8;&#x540C;</span><br><span class="line">class Programmer(Person):</span><br><span class="line">    def __init__(self, name, age, height, weight, language):</span><br><span class="line">        super(Programmer, self).__init__(name, age, height, weight)</span><br><span class="line">        self.language = language</span><br><span class="line"></span><br><span class="line">pro = Programmer(&apos;&#x94B1;&#x4E03;&apos;, 23, 181, 135, &apos;Python&apos;)</span><br><span class="line">pro.eat(&apos;watermelon&apos;)</span><br><span class="line">print(pro.language)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python97.png" alt="97"></p><h2 id="Python&#x7C7B;&#x7684;&#x591A;&#x7EE7;&#x627F;"><a href="#Python&#x7C7B;&#x7684;&#x591A;&#x7EE7;&#x627F;" class="headerlink" title="Python&#x7C7B;&#x7684;&#x591A;&#x7EE7;&#x627F;"></a><font size="4">Python&#x7C7B;&#x7684;&#x591A;&#x7EE7;&#x627F;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">class Father(object):</span><br><span class="line">    def __init__(self, name, age, talent):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.talent = talent</span><br><span class="line"></span><br><span class="line">    def play(self):</span><br><span class="line">        print(&apos;play computer games&apos;)</span><br><span class="line"></span><br><span class="line">    def sleep(self):</span><br><span class="line">        print(&apos;Father need sleep&apos;)</span><br><span class="line"></span><br><span class="line">class Mother(object):</span><br><span class="line">    def __init__(self, name, age, beauty):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.beauty = beauty</span><br><span class="line"></span><br><span class="line">    def shopping(self):</span><br><span class="line">        print(&apos;go shopping&apos;)</span><br><span class="line"></span><br><span class="line">    def sleep(self):</span><br><span class="line">        print(&apos;Mother need sleep&apos;)</span><br><span class="line"></span><br><span class="line"># &#x9664;&#x4E86;&#x5355;&#x7EE7;&#x627F;&#x5916;&#x4E5F;&#x6709;&#x591A;&#x7EE7;&#x627F;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x6BD4;&#x5982;&#x9057;&#x4F20;&#x5C31;&#x662F;&#x4E00;&#x79CD;&#x5178;&#x578B;&#x7684;&#x591A;&#x7EE7;&#x627F;&#xFF0C;&#x5B69;&#x5B50;&#x8981;&#x7EE7;&#x627F;&#x7236;&#x4EB2;&#x548C;&#x6BCD;&#x4EB2;&#x7684;&#x7279;&#x70B9;</span><br><span class="line"># class &#x7C7B;&#x540D;(&#x7236;&#x7C7B;): &#x5B50;&#x7C7B;&#x7EE7;&#x627F;&#x7236;&#x7C7B;&#xFF0C;&#x5982;&#x679C;&#x9700;&#x8981;&#x591A;&#x7EE7;&#x627F;&#xFF0C;&#x5219;&#x5728;&#x7C7B;&#x540D;&#x540E;&#x9762;&#x7684;&#x62EC;&#x53F7;&#x4E2D;&#x5199;&#x5165;&#x591A;&#x4E2A;&#x7236;&#x7C7B;&#x540D;</span><br><span class="line"># &#x7EE7;&#x627F;&#x65F6;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E2D;&#x8C03;&#x7528;&#x7236;&#x7C7B;&#x7684;__init__&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x5199;&#x7236;&#x7C7B;&#x540D;.__init__(self, &#x53C2;&#x6570;&#x5217;&#x8868;)&#x5373;&#x53EF;&#x4F7F;&#x7528;&#xFF0C;&#x6CE8;&#x610F;&#x8981;&#x5199;self</span><br><span class="line"># &#x6CE8;&#x610F;&#x7236;&#x7C7B;&#x4E2D;&#x65B9;&#x6CD5;&#x540D;&#x76F8;&#x540C;&#xFF0C;&#x9ED8;&#x8BA4;&#x8C03;&#x7528;&#x7684;&#x662F;&#x5728;&#x62EC;&#x53F7;&#x4E2D;&#x6392;&#x5728;&#x524D;&#x9762;&#x7684;&#x7236;&#x7C7B;&#x4E2D;&#x7684;&#x65B9;&#x6CD5;</span><br><span class="line">class Child(Father, Mother):</span><br><span class="line">    def __init__(self, name, age, talent, beauty):</span><br><span class="line">        Father.__init__(self, name, age, talent)</span><br><span class="line">        Mother.__init__(self, name, age, beauty)</span><br><span class="line"></span><br><span class="line">chi = Child(&apos;&#x8F9B;&#x5DF4;&apos;, 22, &apos;Python&apos;, 99)</span><br><span class="line">print(chi.name + &apos;&#x7684;&#x5E74;&#x9F84;&#x4E3A;&#xFF1A;&apos; + str(chi.age))</span><br><span class="line">print(&apos;&#x6211;&#x7684;&#x624D;&#x80FD;&#x662F;&#xFF1A;&apos; + chi.talent)</span><br><span class="line">print(&apos;&#x6211;&#x7684;&#x989C;&#x503C;&#x662F;&#xFF1A;&apos; + str(chi.beauty))</span><br><span class="line">chi.play()</span><br><span class="line">chi.shopping()</span><br><span class="line">chi.sleep()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python98.png" alt="98"></p><h2 id="Python&#x7C7B;&#x7684;&#x591A;&#x6001;"><a href="#Python&#x7C7B;&#x7684;&#x591A;&#x6001;" class="headerlink" title="Python&#x7C7B;&#x7684;&#x591A;&#x6001;"></a><font size="4">Python&#x7C7B;&#x7684;&#x591A;&#x6001;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Animal(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    def eat(self, food):</span><br><span class="line">        print(self.name + &apos; eat &apos; + food)</span><br><span class="line"></span><br><span class="line">class Cat(Animal):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        super(Cat, self).__init__(name)</span><br><span class="line"></span><br><span class="line">class Mouse(Animal):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        super(Mouse, self).__init__(name)</span><br><span class="line"></span><br><span class="line">class Person(object):</span><br><span class="line">    def feed(self, animal, food):</span><br><span class="line">        animal.eat(food)</span><br><span class="line"></span><br><span class="line"># &#x5BF9;&#x4E8E;&#x7EE7;&#x627F;&#x81EA;&#x540C;&#x4E00;&#x7C7B;&#x7684;&#x591A;&#x4E2A;&#x7C7B;&#x5177;&#x6709;&#x591A;&#x6001;&#x7684;&#x6027;&#x8D28;&#xFF0C;&#x5373;&#x5B50;&#x7C7B;&#x6709;&#x591A;&#x79CD;&#x8868;&#x73B0;&#x5F62;&#x6001;</span><br><span class="line"># &#x6B64;&#x4EE3;&#x7801;&#x4E2D;&#x52A8;&#x7269;&#x7C7B;&#x5C31;&#x662F;&#x7236;&#x7C7B;&#xFF0C;&#x732B;&#x7C7B;&#x548C;&#x8001;&#x9F20;&#x7C7B;&#x90FD;&#x7EE7;&#x627F;&#x81EA;&#x52A8;&#x7269;&#x7C7B;&#xFF0C;&#x6240;&#x4EE5;&#x732B;&#x7C7B;&#x548C;&#x9F20;&#x7C7B;&#x90FD;&#x6709;&#x7236;&#x7C7B;&#x7684;&#x65B9;&#x6CD5;</span><br><span class="line"># &#x56E0;&#x6B64;&#x4F20;&#x5165;&#x4E0D;&#x540C;&#x7684;&#x5B50;&#x7C7B;&#x5BF9;&#x8C61;&#x5177;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x8868;&#x73B0;&#x5F62;&#x6001;</span><br><span class="line"></span><br><span class="line">per = Person()</span><br><span class="line">tom = Cat(&apos;Tom&apos;)</span><br><span class="line">jerry = Mouse(&apos;Jerry&apos;)</span><br><span class="line">per.feed(tom, &apos;fish&apos;)</span><br><span class="line">per.feed(jerry, &apos;rice&apos;)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python99.png" alt="99"></p><h2 id="Python&#x8FD0;&#x7B97;&#x7B26;&#x91CD;&#x8F7D;"><a href="#Python&#x8FD0;&#x7B97;&#x7B26;&#x91CD;&#x8F7D;" class="headerlink" title="Python&#x8FD0;&#x7B97;&#x7B26;&#x91CD;&#x8F7D;"></a><font size="4">Python&#x8FD0;&#x7B97;&#x7B26;&#x91CD;&#x8F7D;</font></h2><p>$$ \begin{array}{|c|c|c|} &#x7279;&#x6B8A;&#x51FD;&#x6570; &amp; &#x63CF;&#x8FF0; &amp; &#x8C03;&#x7528;&#x65B9;&#x6CD5; \  __init__ &amp; &#x6784;&#x9020;&#x51FD;&#x6570; &amp; X = Class(args) \ __del__ &amp; &#x6790;&#x6784;&#x51FD;&#x6570; &amp; del X \ __call__ &amp; &#x51FD;&#x6570;&#x8C03;&#x7528; &amp; X(*args) \ __getitem__ &amp; &#x7D22;&#x5F15;&#x8FD0;&#x7B97; &amp; X[key] \ __setitem__ &amp; &#x7D22;&#x5F15;&#x8D4B;&#x503C; &amp; X[key] = Y \ __len__ &amp; &#x83B7;&#x5F97;&#x957F;&#x5EA6; &amp; len(X) \ __add/sub/mul/truediv__ &amp; &#x52A0;/&#x51CF;/&#x4E58;/&#x9664;&#x8FD0;&#x7B97;&#x7B26; &amp; X +/-/\times/\div Y \ __and/or__ &amp; &#x4E0E;&#x6216;&#x8FD0;&#x7B97;&#x7B26; &amp; X \&amp; / | Y \ __lt/gt/eq/ne__ &amp; &#x5C0F;&#x4E8E;/&#x5927;&#x4E8E;/&#x7B49;&#x4E8E;/&#x4E0D;&#x7B49;&#x4E8E; &amp; X&lt;/&gt;/==/!=Y \ \end{array} $$<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># &#x4E3A;&#x4E86;&#x4F7F;&#x8FD0;&#x7B97;&#x65B9;&#x4FBF;&#xFF0C;&#x6709;&#x65F6;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x8FD0;&#x7B97;&#x7B26;&#x91CD;&#x8F7D;&#xFF0C;&#x5178;&#x578B;&#x7684;&#x5C31;&#x662F;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x76F8;&#x52A0;&#xFF0C;1 + 2 = 3&#xFF0C;&#x4F46;&#x662F;&#x5B57;&#x7B26;&#x4E32;&#x76F8;&#x52A0;&#x5C31;&#x662F;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x8FDE;&#x63A5;&#x3002;</span><br><span class="line"># &#x8BF4;&#x660E;&#x5BF9;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x52A0;&#x6CD5;&#x8FDB;&#x884C;&#x4E86;&#x91CD;&#x65B0;&#x5B9A;&#x4E49;&#xFF0C;&#x4F7F;&#x5176;&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x76F8;&#x52A0;&#x64CD;&#x4F5C;&#x3002;&#x540C;&#x7406;&#xFF0C;&#x5BF9;&#x81EA;&#x5DF1;&#x5199;&#x7684;&#x7C7B;&#x4E5F;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x8FD0;&#x7B97;&#x7B26;&#x91CD;&#x8F7D;&#xFF0C;&#x4F7F;&#x4E24;&#x4E2A;&#x7C7B;&#x53EF;&#x4EE5;&#x505A;&#x8FD0;&#x7B97;&#x3002;</span><br><span class="line"># &#x8981;&#x91CD;&#x8F7D;&#x4EC0;&#x4E48;&#x64CD;&#x4F5C;&#x5C31;&#x67E5;&#x64CD;&#x4F5C;&#x5BF9;&#x5E94;&#x7684;&#x7279;&#x6B8A;&#x51FD;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x5176;&#x91CD;&#x8F7D;&#x5373;&#x53EF;&#x3002;</span><br><span class="line"></span><br><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, money):</span><br><span class="line">        self.money = money</span><br><span class="line"></span><br><span class="line">    def __add__(self, other):</span><br><span class="line">        return Person(self.money + other.money)</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &apos;money&#xFF1A;&apos; + str(self.money)</span><br><span class="line"></span><br><span class="line"># &#x6B64;&#x4EE3;&#x7801;&#x91CD;&#x8F7D;&#x4E86;&#x52A0;&#x6CD5;&#x8FD0;&#x7B97;&#x7B26;&#x548C;&#x6253;&#x5370;&#x64CD;&#x4F5C;</span><br><span class="line">per1 = Person(100)</span><br><span class="line">print(per1)</span><br><span class="line">per2 = Person(200)</span><br><span class="line">print(per2)</span><br><span class="line">per3 = per1 + per2</span><br><span class="line">print(per3)</span><br></pre></td></tr></tbody></table></figure><p></p><p><img src="/images/LANGUAGE/python103.png" alt="103"></p><h1 id="Object-Oriented&#x5C0F;&#x7ED3;"><a href="#Object-Oriented&#x5C0F;&#x7ED3;" class="headerlink" title="Object-Oriented&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Object-Oriented&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;Object-Oriented&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x8BED;&#x8A00;&#x4E2D;&#x4E00;&#x79CD;&#x91CD;&#x8981;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x5B83;&#x7684;&#x51FA;&#x73B0;&#x5C06;&#x7A0B;&#x5E8F;&#x5458;&#x4ECE;&#x4E00;&#x4E2A;&#x6267;&#x884C;&#x8005;&#x53D8;&#x6210;&#x4E86;&#x4E00;&#x4E2A;&#x7BA1;&#x7406;&#x8005;&#xFF0C;&#x7A0B;&#x5E8F;&#x5458;&#x5728;&#x4F7F;&#x7528;&#x65F6;&#x53EA;&#x9700;&#x8981;&#x77E5;&#x9053;&#x80FD;&#x505A;&#x4EC0;&#x4E48;&#xFF0C;&#x800C;&#x4E0D;&#x9700;&#x8981;&#x77E5;&#x9053;&#x5177;&#x4F53;&#x5982;&#x4F55;&#x5B9E;&#x73B0;&#xFF0C;&#x800C;&#x4E14;&#x6BCF;&#x6B21;&#x521B;&#x5EFA;&#x5BF9;&#x8C61;&#x65F6;&#x53EA;&#x9700;&#x8981;&#x4E00;&#x884C;&#x4EE3;&#x7801;&#xFF0C;&#x8C03;&#x7528;&#x67D0;&#x4E00;&#x51FD;&#x6570;&#x65F6;&#x4E5F;&#x4E0D;&#x9700;&#x8981;&#x5173;&#x5FC3;&#x5185;&#x90E8;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x5927;&#x5927;&#x51CF;&#x5C11;&#x4E86;&#x9605;&#x8BFB;&#x4EE3;&#x7801;&#x7684;&#x65F6;&#x95F4;&#x548C;&#x5185;&#x5B58;&#x7684;&#x5360;&#x7528;&#x60C5;&#x51B5;&#x3002;&#x56E0;&#x6B64;&#x9762;&#x5411;&#x8FC7;&#x7A0B;&#x662F;&#x7A0B;&#x5E8F;&#x5458;&#x7684;&#x5FC5;&#x7ECF;&#x4E4B;&#x8DEF;&#xFF0C;&#x9700;&#x8981;&#x719F;&#x7EC3;&#x7684;&#x638C;&#x63E1;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Object-Oriented(面向对象)&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="python" scheme="https://USTCcoder.github.io/categories/python/"/>
    
      <category term="语言学习" scheme="https://USTCcoder.github.io/categories/python/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Import(导入模块)</title>
    <link href="https://USTCcoder.github.io/2019/09/17/python_import/"/>
    <id>https://USTCcoder.github.io/2019/09/17/python_import/</id>
    <published>2019-09-17T08:28:45.000Z</published>
    <updated>2019-09-20T02:09:46.216Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/LANGUAGE/python13.jpg" alt="13"></p><h1 id="Import&#x4ECB;&#x7ECD;"><a href="#Import&#x4ECB;&#x7ECD;" class="headerlink" title="Import&#x4ECB;&#x7ECD;"></a><font size="5" color="red">Import&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;Python&#x4E2D;&#x4F7F;&#x7528;Import&#x5BFC;&#x5165;&#x6A21;&#x5757;&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;C/C++&#x4E2D;&#x7684;include&#xFF0C;&#x4F46;&#x662F;&#x4F7F;&#x7528;&#x8D77;&#x6765;&#x66F4;&#x52A0;&#x7075;&#x6D3B;&#x548C;&#x65B9;&#x4FBF;&#xFF0C;&#x53EF;&#x4EE5;&#x5BFC;&#x5165;&#x6574;&#x4E2A;&#x6A21;&#x5757;&#x6216;&#x8005;&#x5BFC;&#x5165;&#x6A21;&#x5757;&#x7684;&#x67D0;&#x4E00;&#x90E8;&#x5206;&#x3002;<br><a id="more"></a></p><h1 id="Import&#x5E94;&#x7528;"><a href="#Import&#x5E94;&#x7528;" class="headerlink" title="Import&#x5E94;&#x7528;"></a><font size="5" color="red">Import&#x5E94;&#x7528;</font></h1><h2 id="&#x5BFC;&#x5165;&#x8DEF;&#x5F84;"><a href="#&#x5BFC;&#x5165;&#x8DEF;&#x5F84;" class="headerlink" title="&#x5BFC;&#x5165;&#x8DEF;&#x5F84;"></a><font size="4">&#x5BFC;&#x5165;&#x8DEF;&#x5F84;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line"># sys.path &#x67E5;&#x8BE2;&#x5BFC;&#x5305;&#x65F6;&#x7684;&#x8DEF;&#x5F84;&#x987A;&#x5E8F;&#xFF0C;&#x5F53;&#x6709;&#x76F8;&#x540C;&#x540D;&#x5B57;&#x7684;&#x5305;&#x51FA;&#x73B0;&#x65F6;&#xFF0C;&#x5219;&#x6309;&#x7167;&#x987A;&#x5E8F;&#x67E5;&#x8BE2;&#x662F;&#x5426;&#x5728;&#x6B64;&#x8DEF;&#x5F84;&#xFF0C;&#x8DEF;&#x5F84;&#x4E2D;&#x5982;&#x679C;&#x542B;&#x6709;&#x4E24;&#x4E2A;&#x6587;&#x4EF6;&#x5939;&#x5373;&#x4E24;&#x4E2A;&#x5305;&#xFF0C;&#x90FD;&#x542B;&#x6709;&#x76F8;&#x540C;&#x540D;&#x5B57;&#x7684;.py&#x6587;&#x4EF6;&#xFF0C;&#x5F53;&#x5BFC;&#x5165;&#x8BE5;.py&#x6587;&#x4EF6;&#x65F6;&#xFF0C;&#x9700;&#x8981;&#x5199;&#x6E05;&#x695A;&#x5305;&#x540D;.&#x6587;&#x4EF6;&#x540D;</span><br><span class="line">print(sys.path)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python78.png" alt="78"></p><h2 id="&#x5B89;&#x88C5;&#x7B2C;&#x4E09;&#x65B9;&#x6A21;&#x5757;"><a href="#&#x5B89;&#x88C5;&#x7B2C;&#x4E09;&#x65B9;&#x6A21;&#x5757;" class="headerlink" title="&#x5B89;&#x88C5;&#x7B2C;&#x4E09;&#x65B9;&#x6A21;&#x5757;"></a><font size="4">&#x5B89;&#x88C5;&#x7B2C;&#x4E09;&#x65B9;&#x6A21;&#x5757;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#x5728;&#x865A;&#x62DF;&#x73AF;&#x5883;&#x4E2D;&#x8F93;&#x5165;pip install xxx  &#x5B89;&#x88C5;xxx&#x6A21;&#x5757;</span><br></pre></td></tr></tbody></table></figure><h2 id="import&#x8BED;&#x53E5;"><a href="#import&#x8BED;&#x53E5;" class="headerlink" title="import&#x8BED;&#x53E5;"></a><font size="4">import&#x8BED;&#x53E5;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># import module1, module2, ... &#x4E00;&#x6B21;&#x6027;&#x5F15;&#x5165;&#x591A;&#x4E2A;&#x6A21;&#x5757;&#xFF0C;&#x4F7F;&#x7528;&#x6A21;&#x5757;&#x65F6;&#x683C;&#x5F0F;&#x4E3A;&#xFF1A;&#x6A21;&#x5757;&#x540D;.&#x51FD;&#x6570;&#x540D;/&#x53D8;&#x91CF;&#x540D;</span><br><span class="line">import sys, time</span><br><span class="line"></span><br><span class="line">start = time.clock()</span><br><span class="line">end = time.clock()</span><br><span class="line">res = end - start</span><br><span class="line"></span><br><span class="line"># import module as module_name &#x4E00;&#x4E2A;&#x6A21;&#x5757;&#x540D;&#x5982;&#x679C;&#x8F83;&#x957F;&#xFF0C;&#x4E66;&#x5199;&#x4E0D;&#x65B9;&#x4FBF;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x5176;&#x6539;&#x540D;&#x4E3A;module_name</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.array([1, 2, 3])</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python79.png" alt="79"></p><h2 id="from-&#x2026;-import&#x8BED;&#x53E5;"><a href="#from-&#x2026;-import&#x8BED;&#x53E5;" class="headerlink" title="from &#x2026; import&#x8BED;&#x53E5;"></a><font size="4">from &#x2026; import&#x8BED;&#x53E5;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># from module import name1, name2, ... &#x4ECE;module&#x6A21;&#x5757;&#x4E2D;&#x5F15;&#x5165;&#x4E00;&#x4E2A;&#x6307;&#x5B9A;&#x7684;&#x90E8;&#x5206;&#x5230;&#x5F53;&#x524D;&#x547D;&#x540D;&#x7A7A;&#x95F4;&#xFF0C;&#x4F7F;&#x7528;&#x65F6;&#x4E0D;&#x9700;&#x8981;&#x52A0;&#x6A21;&#x5757;&#x540D;</span><br><span class="line">from numpy import array, arange</span><br><span class="line"></span><br><span class="line">a = array([1, 2, 3])</span><br><span class="line">b = arange(5) </span><br><span class="line"></span><br><span class="line"># from module import name as new_name &#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x540D;&#x6216;&#x53D8;&#x91CF;&#x540D;&#x5982;&#x679C;&#x8F83;&#x957F;&#xFF0C;&#x4E66;&#x5199;&#x4E0D;&#x65B9;&#x4FBF;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x5176;&#x6539;&#x540D;&#x4E3A;new_name</span><br><span class="line">from numpy import linspace as lsp</span><br><span class="line"></span><br><span class="line">c = lsp(0, 10, 6)</span><br><span class="line"></span><br><span class="line"># from module import * &#x628A;module&#x6A21;&#x5757;&#x4E2D;&#x6240;&#x6709;&#x7684;&#x5185;&#x5BB9;&#x5168;&#x90E8;&#x5BFC;&#x5165;&#x5F53;&#x524D;&#x6A21;&#x5757;</span><br><span class="line">from numpy import *</span><br><span class="line"></span><br><span class="line">d = zeros((3, 3))</span><br><span class="line"></span><br><span class="line"># from .... import&#x8BED;&#x53E5;&#x5B58;&#x5728;&#x7740;&#x5371;&#x9669;&#x6027;&#xFF0C;&#x5982;&#x679C;&#x4E0B;&#x9762;&#x5B9A;&#x4E49;&#x4E86;&#x540C;&#x540D;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x5219;&#x4F1A;&#x8986;&#x76D6;&#x5F15;&#x5165;&#x7684;&#x51FD;&#x6570;</span><br><span class="line">from numpy import *</span><br><span class="line"></span><br><span class="line">def zeros(* par):</span><br><span class="line">    return 0</span><br><span class="line"></span><br><span class="line">e = zeros((3, 3))</span><br><span class="line"></span><br><span class="line"># &#x5982;&#x679C;&#x6709;&#x4E00;&#x4E2A;.py&#x6587;&#x4EF6;&#x9700;&#x8981;&#x88AB;&#x5BFC;&#x5165;&#xFF0C;&#x4E5F;&#x9700;&#x8981;&#x5355;&#x72EC;&#x7684;&#x8FD0;&#x884C;&#x6B64;&#x6587;&#x4EF6;&#x3002;&#x4F46;&#x662F;&#x5982;&#x679C;&#x76F4;&#x63A5;&#x5BFC;&#x5165;&#x8BE5;&#x6587;&#x4EF6;&#xFF0C;&#x4F1A;&#x81EA;&#x52A8;&#x6267;&#x884C;&#x8BE5;&#x6587;&#x4EF6;&#xFF0C;&#x5982;&#x679C;&#x5E0C;&#x671B;&#x8FD0;&#x884C;&#x65F6;&#x4E0D;&#x6267;&#x884C;&#x8BE5;&#x6587;&#x4EF6;&#x9700;&#x8981;&#x5728;.py&#x6587;&#x4EF6;&#x4E2D;&#x5199;&#x5165;</span><br><span class="line"># if __name__ == &quot;__main__&quot;: &#x7136;&#x540E;&#x4E3B;&#x7A0B;&#x5E8F;&#x7A0B;&#x5E8F;&#x5199;&#x5728;&#x4E0B;&#x9762;&#xFF0C;&#x8FD9;&#x6837;&#x5355;&#x72EC;&#x8FD0;&#x884C;&#x8BE5;&#x6587;&#x4EF6;&#x65F6;&#x4F1A;&#x6267;&#x884C;&#x4E3B;&#x7A0B;&#x5E8F;&#xFF0C;&#x88AB;&#x5BFC;&#x5165;&#x65F6;&#x4E0D;&#x4F1A;&#x6267;&#x884C;&#x4E3B;&#x7A0B;&#x5E8F;&#x3002;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python80.png" alt="80"></p><h1 id="Import&#x5C0F;&#x7ED3;"><a href="#Import&#x5C0F;&#x7ED3;" class="headerlink" title="Import&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Import&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;Python&#x4E4B;&#x6240;&#x4EE5;&#x88AB;&#x79F0;&#x4E3A;&#x80F6;&#x6C34;&#x8BED;&#x8A00;&#xFF0C;&#x4E3B;&#x8981;&#x5F52;&#x529F;&#x4E8E;Import&#x7684;&#x5F3A;&#x5927;&#x529F;&#x80FD;&#x3002;&#x968F;&#x7740;Python&#x7684;&#x706B;&#x70ED;&#xFF0C;&#x5404;&#x4E2A;&#x9886;&#x57DF;&#x90FD;&#x4E3A;Python&#x63D0;&#x4F9B;&#x529F;&#x80FD;&#x5F3A;&#x5927;&#x7684;&#x63A5;&#x53E3;&#xFF0C;&#x5982;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x9886;&#x57DF;&#x6709;opencv&#x5E93;&#xFF0C;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x9886;&#x57DF;&#x6709;sklearn&#x5E93;&#xFF0C;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x9886;&#x57DF;&#x6709;TensorFlow, Torch&#x5E93;&#xFF0C;&#x6570;&#x636E;&#x5206;&#x6790;&#x9886;&#x57DF;&#x6709;Numpy, Matplotlib&#x5E93;&#x7B49;&#x7B49;&#xFF0C;&#x8FD9;&#x4E3A;Python&#x7684;&#x4F7F;&#x7528;&#x8005;&#x63D0;&#x4F9B;&#x975E;&#x5E38;&#x5927;&#x7684;&#x4FBF;&#x6377;&#x3002;&#x800C;&#x4E14;&#x5728;&#x5927;&#x578B;&#x7684;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x5F80;&#x5F80;&#x9700;&#x8981;&#x5199;&#x5F88;&#x591A;&#x7684;&#x5B50;&#x6587;&#x4EF6;&#xFF0C;&#x4E5F;&#x9700;&#x8981;Import&#x7684;&#x5E2E;&#x52A9;&#xFF0C;&#x56E0;&#x6B64;&#x8981;&#x719F;&#x7EC3;&#x638C;&#x63E1;&#x8FD9;&#x4E9B;&#x5BFC;&#x5165;&#x6A21;&#x5757;&#x7684;&#x5E94;&#x7528;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Import(导入模块)&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="python" scheme="https://USTCcoder.github.io/categories/python/"/>
    
      <category term="语言学习" scheme="https://USTCcoder.github.io/categories/python/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Function(函数)</title>
    <link href="https://USTCcoder.github.io/2019/09/16/python_function/"/>
    <id>https://USTCcoder.github.io/2019/09/16/python_function/</id>
    <published>2019-09-16T08:14:15.000Z</published>
    <updated>2019-09-19T12:02:44.345Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/LANGUAGE/python10.jpg" alt="10"></p><h1 id="Function&#x4ECB;&#x7ECD;"><a href="#Function&#x4ECB;&#x7ECD;" class="headerlink" title="Function&#x4ECB;&#x7ECD;"></a><font size="5" color="red">Function&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;Python&#x4E2D;&#x7684;Function&#x4E00;&#x79CD;&#x91CD;&#x8981;&#x7684;&#x8C03;&#x7528;&#x65B9;&#x5F0F;&#xFF0C;&#x548C;C/C++&#x7C7B;&#x4F3C;&#xFF0C;&#x901A;&#x8FC7;&#x53C2;&#x6570;&#x7684;&#x4F20;&#x9012;&#x548C;&#x6570;&#x636E;&#x7684;&#x8FD4;&#x56DE;&#x5B8C;&#x6210;&#x6240;&#x9884;&#x671F;&#x7684;&#x76EE;&#x7684;&#x3002;<br><a id="more"></a></p><h1 id="Python&#x5185;&#x7F6E;Function"><a href="#Python&#x5185;&#x7F6E;Function" class="headerlink" title="Python&#x5185;&#x7F6E;Function"></a><font size="5" color="red">Python&#x5185;&#x7F6E;Function</font></h1><h2 id="Python&#x6C42;&#x548C;&#x51FD;&#x6570;&#xFF0C;&#x6700;&#x5927;&#x503C;&#x6700;&#x5C0F;&#x503C;&#x51FD;&#x6570;"><a href="#Python&#x6C42;&#x548C;&#x51FD;&#x6570;&#xFF0C;&#x6700;&#x5927;&#x503C;&#x6700;&#x5C0F;&#x503C;&#x51FD;&#x6570;" class="headerlink" title="Python&#x6C42;&#x548C;&#x51FD;&#x6570;&#xFF0C;&#x6700;&#x5927;&#x503C;&#x6700;&#x5C0F;&#x503C;&#x51FD;&#x6570;"></a><font size="4">Python&#x6C42;&#x548C;&#x51FD;&#x6570;&#xFF0C;&#x6700;&#x5927;&#x503C;&#x6700;&#x5C0F;&#x503C;&#x51FD;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># sum(iterable) &#x5BF9;&#x4E8E;&#x5217;&#x8868;&#xFF0C;&#x5143;&#x7EC4;&#xFF0C; &#x96C6;&#x5408;&#x6765;&#x8BF4;sum&#x662F;&#x6307;&#x6240;&#x6709;&#x5143;&#x7D20;&#x4E4B;&#x548C;&#xFF0C;&#x524D;&#x63D0;&#x662F;&#x5143;&#x7D20;&#x53EF;&#x4EE5;&#x6C42;&#x548C;&#xFF0C;&#x5BF9;&#x4E8E;&#x5B57;&#x5178;&#x6765;&#x8BF4;sum&#x662F;&#x6307;&#x5173;&#x952E;&#x5B57;Key&#x6C42;&#x548C;</span><br><span class="line">sum({1, 2, 3, 4})</span><br><span class="line">sum({1:11, 2:22, 3:33, 4:44})</span><br><span class="line"></span><br><span class="line"># max(iterable) &#x7528;&#x6CD5;&#x540C;sum&#xFF0C;&#x6C42;&#x5143;&#x7D20;&#x7684;&#x6700;&#x5927;&#x503C;</span><br><span class="line">max({1, 2, 3, 4})</span><br><span class="line">max({1:11, 2:22, 3:33, 4:44})</span><br><span class="line"></span><br><span class="line"># min(iterable) &#x7528;&#x6CD5;&#x540C;sum&#xFF0C;&#x6C42;&#x5143;&#x7D20;&#x7684;&#x6700;&#x5C0F;&#x503C;</span><br><span class="line">min({1, 2, 3, 4})</span><br><span class="line">min({1:11, 2:22, 3:33, 4:44})</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python60.png" alt="60"></p><h2 id="Python&#x957F;&#x5EA6;&#x51FD;&#x6570;"><a href="#Python&#x957F;&#x5EA6;&#x51FD;&#x6570;" class="headerlink" title="Python&#x957F;&#x5EA6;&#x51FD;&#x6570;"></a><font size="4">Python&#x957F;&#x5EA6;&#x51FD;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># len(iterable) &#x6C42;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#x7684;&#x957F;&#x5EA6;&#xFF0C;&#x5373;&#x5176;&#x4E2D;&#x5305;&#x542B;&#x7684;&#x5143;&#x7D20;&#x4E2A;&#x6570;</span><br><span class="line">len([1, 2, 3, 4])</span><br><span class="line">len((1, 2, (3, [4, 5]), 6))</span><br><span class="line">len({1:11, 2:22, 3:33, 4:44})</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python61.png" alt="61"></p><h2 id="Python&#x6392;&#x5E8F;&#x51FD;&#x6570;"><a href="#Python&#x6392;&#x5E8F;&#x51FD;&#x6570;" class="headerlink" title="Python&#x6392;&#x5E8F;&#x51FD;&#x6570;"></a><font size="4">Python&#x6392;&#x5E8F;&#x51FD;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = [1,5,3,2,4]</span><br><span class="line">b = {1:11, 5:55, 3:33, 2:22, 4:44}</span><br><span class="line">c = [(1, 5), (4, 8), (3, 7), (2, 9)]</span><br><span class="line"></span><br><span class="line"># sorted(iterable, key, reverse=False) &#x5BF9;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#x6309;&#x7167;key&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x5982;&#x679C;&#x5BF9;&#x5B57;&#x5178;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x5219;&#x5BF9;&#x5176;&#x5173;&#x952E;&#x5B57;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;reverse&#x4E3A;True&#x6307;&#x4ECE;&#x5927;&#x5230;&#x5C0F;&#x6392;&#x5E8F;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;</span><br><span class="line">sorted(a)</span><br><span class="line">sorted(b)</span><br><span class="line">sorted(c)</span><br><span class="line">sorted(c, key=lambda x:(x[1], x[0]))</span><br><span class="line">sorted(c, key=lambda x:(x[1], x[0]), reverse=True)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python62.png" alt="62"></p><h2 id="Python&#x7FFB;&#x8F6C;&#x51FD;&#x6570;"><a href="#Python&#x7FFB;&#x8F6C;&#x51FD;&#x6570;" class="headerlink" title="Python&#x7FFB;&#x8F6C;&#x51FD;&#x6570;"></a><font size="4">Python&#x7FFB;&#x8F6C;&#x51FD;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [1,5,3,2,4]</span><br><span class="line">b = [(1, 5), (4, 8), (3, 7), (2, 9)]</span><br><span class="line"></span><br><span class="line"># reversed(iterable) &#x8FD4;&#x56DE;&#x7FFB;&#x8F6C;&#x540E;&#x7684;&#x8FED;&#x4EE3;&#x5668;&#x5BF9;&#x8C61;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;list&#xFF0C;tuple&#x7B49;&#x8FDB;&#x884C;&#x8F6C;&#x6362;&#xFF0C;&#x5B57;&#x5178;&#x65E0;&#x6CD5;&#x8FDB;&#x884C;&#x7FFB;&#x8F6C;&#x64CD;&#x4F5C;</span><br><span class="line">reversed(a)</span><br><span class="line">list(reversed(a))</span><br><span class="line">tuple(reversed(b))</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python63.png" alt="63"></p><h2 id="Python&#x679A;&#x4E3E;&#x51FD;&#x6570;"><a href="#Python&#x679A;&#x4E3E;&#x51FD;&#x6570;" class="headerlink" title="Python&#x679A;&#x4E3E;&#x51FD;&#x6570;"></a><font size="4">Python&#x679A;&#x4E3E;&#x51FD;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = [1,5,3,2,4]</span><br><span class="line">b = {1:11, 5:55, 3:33, 2:22, 4:44}</span><br><span class="line">c = [(1, 5), (4, 8), (3, 7), (2, 9)]</span><br><span class="line"></span><br><span class="line"># enumerate(iterable) &#x8FD4;&#x56DE;&#x4ECE;0&#x5F00;&#x59CB;&#x679A;&#x4E3E;&#x7684;&#x8FED;&#x4EE3;&#x5668;&#x5BF9;&#x8C61;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;list&#xFF0C;tuple&#x7B49;&#x8FDB;&#x884C;&#x8F6C;&#x6362;&#xFF0C;&#x5BF9;&#x5B57;&#x5178;&#x679A;&#x4E3E;&#x5219;&#x5BF9;&#x5176;&#x5173;&#x952E;&#x5B57;&#x8FDB;&#x884C;&#x679A;&#x4E3E;</span><br><span class="line">reversed(a)</span><br><span class="line">enumerate(a)</span><br><span class="line">list(enumerate(a))</span><br><span class="line">list(enumerate(b))</span><br><span class="line">tuple(enumerate(c))</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python64.png" alt="64"></p><h2 id="Python&#x6253;&#x5305;&#x51FD;&#x6570;"><a href="#Python&#x6253;&#x5305;&#x51FD;&#x6570;" class="headerlink" title="Python&#x6253;&#x5305;&#x51FD;&#x6570;"></a><font size="4">Python&#x6253;&#x5305;&#x51FD;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [1,5,3,2,4]</span><br><span class="line">b = {1:11, 5:55, 3:33, 2:22, 4:44}</span><br><span class="line">c = [(1, 5), (4, 8), (3, 7), (2, 9)]</span><br><span class="line"></span><br><span class="line"># zip(iterable1, iterable2) &#x5C06;&#x4E24;&#x4E2A;&#x8FED;&#x4EE3;&#x5668;&#x5BF9;&#x8C61;&#x6253;&#x5305;&#xFF0C;&#x5408;&#x5E76;&#x6210;&#x4E00;&#x4E2A;&#x8FED;&#x4EE3;&#x5668;&#x5BF9;&#x8C61;&#xFF0C;&#x6253;&#x5305;&#x5143;&#x7D20;&#x6309;&#x7167;&#x5143;&#x7D20;&#x6570;&#x91CF;&#x5C11;&#x7684;&#x8FDB;&#x884C;&#x6253;&#x5305;&#xFF0C;&#x5BF9;&#x5B57;&#x5178;&#x6253;&#x5305;&#x5219;&#x5BF9;&#x5176;&#x5173;&#x952E;&#x5B57;&#x8FDB;&#x884C;&#x6253;&#x5305;</span><br><span class="line">zip(a, b)</span><br><span class="line">list(zip(a, b))</span><br><span class="line">tuple(zip(a, c))</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python65.png" alt="65"></p><h2 id="Python&#x5220;&#x9664;&#x51FD;&#x6570;"><a href="#Python&#x5220;&#x9664;&#x51FD;&#x6570;" class="headerlink" title="Python&#x5220;&#x9664;&#x51FD;&#x6570;"></a><font size="4">Python&#x5220;&#x9664;&#x51FD;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = True</span><br><span class="line">b = [1,5,3,2,4]</span><br><span class="line"></span><br><span class="line"># del obj &#x5C06;obj&#x5220;&#x9664;&#xFF0C;&#x4E0D;&#x5B58;&#x5728;&#x8BE5;&#x5BF9;&#x8C61;</span><br><span class="line">del a</span><br><span class="line">del b</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python66.png" alt="66"></p><h2 id="Python&#x4E2D;input&#x51FD;&#x6570;"><a href="#Python&#x4E2D;input&#x51FD;&#x6570;" class="headerlink" title="Python&#x4E2D;input&#x51FD;&#x6570;"></a><font size="4">Python&#x4E2D;input&#x51FD;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># input() &#x4ECE;&#x6807;&#x51C6;&#x8F93;&#x5165;&#x4E2D;&#x8BFB;&#x53D6;&#x4E00;&#x884C;&#x6587;&#x672C;&#xFF0C;&#x8FD4;&#x56DE;&#x8BE5;&#x5185;&#x5BB9;&#x7684;&#x5B57;&#x7B26;&#x4E32;</span><br><span class="line">str = input(&apos;&#x8BF7;&#x8F93;&#x5165;:&apos;)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python87.png" alt="87"></p><h2 id="Python&#x4E2D;print&#x51FD;&#x6570;"><a href="#Python&#x4E2D;print&#x51FD;&#x6570;" class="headerlink" title="Python&#x4E2D;print&#x51FD;&#x6570;"></a><font size="4">Python&#x4E2D;print&#x51FD;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># print(obj1, obj2, ..., end=&apos;\n&apos;) &#x5C06;obj1, obj2, ...&#x6309;&#x987A;&#x5E8F;&#x8F93;&#x51FA;&#xFF0C;&#x4EE5;&#x7A7A;&#x683C;&#x5206;&#x5F00;&#xFF0C;end&#x662F;&#x8F93;&#x51FA;&#x540E;&#x7684;&#x7ED3;&#x5C3E;&#x5B57;&#x7B26;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x6362;&#x884C;&#x7B26;</span><br><span class="line">print([1, 2, 3], (4, 5, 6))</span><br><span class="line">print(&apos;hello world&apos; + &apos;\n&apos; + &apos;hello python &apos;, end=&apos;end&apos;)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python84.png" alt="84"></p><h2 id="Python&#x63A8;&#x5BFC;&#x5F0F;"><a href="#Python&#x63A8;&#x5BFC;&#x5F0F;" class="headerlink" title="Python&#x63A8;&#x5BFC;&#x5F0F;"></a><font size="4">Python&#x63A8;&#x5BFC;&#x5F0F;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = [1, 2, 3, 4, 5]</span><br><span class="line"></span><br><span class="line"># [x for x in iterable] &#x4ECE;iterable&#x4E2D;&#x9010;&#x4E00;&#x83B7;&#x53D6;&#x5143;&#x7D20;&#xFF0C;&#x5E76;&#x751F;&#x6210;&#x5217;&#x8868;</span><br><span class="line">[2 ** x for x in a]</span><br><span class="line">[[i + j * 3 for i in range(3)] for j in range(3)]</span><br><span class="line"></span><br><span class="line"># {x for x in iterable} &#x4ECE;iterable&#x4E2D;&#x9010;&#x4E00;&#x83B7;&#x53D6;&#x5143;&#x7D20;&#xFF0C;&#x5E76;&#x751F;&#x6210;&#x96C6;&#x5408;</span><br><span class="line">{2 ** x for x in a}</span><br><span class="line"></span><br><span class="line"># {x: y for x in iterable} &#x4ECE;iterable&#x4E2D;&#x9010;&#x4E00;&#x83B7;&#x53D6;&#x5143;&#x7D20;&#xFF0C;&#x5E76;&#x751F;&#x6210;&#x5B57;&#x5178;</span><br><span class="line">{x: 2 ** x for x in a}</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python67.png" alt="67"></p><h2 id="Python&#x4E2D;lambda&#x8868;&#x8FBE;&#x5F0F;"><a href="#Python&#x4E2D;lambda&#x8868;&#x8FBE;&#x5F0F;" class="headerlink" title="Python&#x4E2D;lambda&#x8868;&#x8FBE;&#x5F0F;"></a><font size="4">Python&#x4E2D;lambda&#x8868;&#x8FBE;&#x5F0F;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># lambda arg1, arg2: function &#x4E00;&#x884C;&#x8868;&#x8FBE;&#x5F0F;&#x7B80;&#x5355;&#x5B9E;&#x73B0;&#x51FD;&#x6570;&#xFF0C;&#x53C2;&#x6570;&#x4E3A;arg1, arg2, ...&#xFF0C;&#x51FD;&#x6570;&#x4F53;&#x4E3A;function</span><br><span class="line">f = lambda x, y: x * y</span><br><span class="line">f(3, 4)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python68.png" alt="68"></p><h2 id="Python&#x4E2D;filter&#x51FD;&#x6570;"><a href="#Python&#x4E2D;filter&#x51FD;&#x6570;" class="headerlink" title="Python&#x4E2D;filter&#x51FD;&#x6570;"></a><font size="4">Python&#x4E2D;filter&#x51FD;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># filter(function or None, iterable) &#x82E5;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x4E3A;None&#x5219;&#x8FD4;&#x56DE;iterable&#x4E2D;&#x4E3A;&#x771F;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x5E76;&#x751F;&#x6210;&#x8FED;&#x4EE3;&#x5668;&#x5BF9;&#x8C61;&#xFF0C;&#x82E5;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x4E3A;function&#xFF0C;&#x5219;&#x5C06;iterable&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x5E26;&#x5165;&#x51FD;&#x6570;&#xFF0C;&#x5C06;&#x4E3A;&#x771F;&#x7684;&#x5143;&#x7D20;&#x751F;&#x6210;&#x8FED;&#x4EE3;&#x5668;&#x5BF9;&#x8C61;</span><br><span class="line">filter(None, [x % 3 for x in range(10)])</span><br><span class="line">list(filter(None, [x % 3 for x in range(10)]))</span><br><span class="line"></span><br><span class="line">filter(lambda x: x % 3, range(10))</span><br><span class="line">list(filter(lambda x: x % 3, range(10)))</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python69.png" alt="69"></p><h2 id="Python&#x4E2D;map&#x51FD;&#x6570;"><a href="#Python&#x4E2D;map&#x51FD;&#x6570;" class="headerlink" title="Python&#x4E2D;map&#x51FD;&#x6570;"></a><font size="4">Python&#x4E2D;map&#x51FD;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;12345&apos;</span><br><span class="line">f = lambda x: 2 ** x</span><br><span class="line"></span><br><span class="line"># map(function, iterable) &#x5C06;iterable&#x4E2D;&#x7684;&#x5143;&#x7D20;&#x5E26;&#x5165;&#x51FD;&#x6570;&#xFF0C;&#x8FD4;&#x56DE;&#x51FD;&#x6570;&#x751F;&#x6210;&#x7684;&#x8FED;&#x4EE3;&#x5668;&#x5BF9;&#x8C61;</span><br><span class="line">map(int, a)</span><br><span class="line">list(map(int, a))</span><br><span class="line"></span><br><span class="line">map(f, range(5))</span><br><span class="line">tuple(map(f, range(5)))</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python70.png" alt="70"></p><h1 id="Python&#x81EA;&#x5B9A;&#x4E49;Function"><a href="#Python&#x81EA;&#x5B9A;&#x4E49;Function" class="headerlink" title="Python&#x81EA;&#x5B9A;&#x4E49;Function"></a><font size="5" color="red">Python&#x81EA;&#x5B9A;&#x4E49;Function</font></h1><h2 id="Python&#x4E2D;def&#x5B9A;&#x4E49;&#x51FD;&#x6570;"><a href="#Python&#x4E2D;def&#x5B9A;&#x4E49;&#x51FD;&#x6570;" class="headerlink" title="Python&#x4E2D;def&#x5B9A;&#x4E49;&#x51FD;&#x6570;"></a><font size="4">Python&#x4E2D;def&#x5B9A;&#x4E49;&#x51FD;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># &#x5B9A;&#x4E49;&#x540D;&#x4E3A;function_name&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x5F62;&#x5F0F;&#x53C2;&#x6570;&#x4E3A;arg1, arg2, ...&#xFF0C;&#x51FD;&#x6570;&#x4F53;&#x4E3A;function&#xFF0C;&#x8FD4;&#x56DE;&#x503C;&#x4E3A;value(&#x53EF;&#x4EE5;&#x65E0;&#x8FD4;&#x56DE;&#x503C;)&#xFF0C;&#x4E0E;C/C++&#x4E0D;&#x540C;&#xFF0C;&#x53EF;&#x4EE5;&#x6709;&#x591A;&#x4E2A;&#x8FD4;&#x56DE;&#x503C;</span><br><span class="line"># def function_name(arg1, arg2, ...): </span><br><span class="line">#     function</span><br><span class="line">#     return value</span><br><span class="line"></span><br><span class="line">def my_pow(a, b):</span><br><span class="line">    return a ** b, b ** a</span><br><span class="line"></span><br><span class="line"># function_name(x1, x2, ...) &#x8C03;&#x7528;&#x540D;&#x4E3A;function_name&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x5B9E;&#x9645;&#x53C2;&#x6570;&#x4E3A;x1, x2, ...&#xFF0C;&#x8C03;&#x7528;&#x65F6;&#x5C06;&#x5B9E;&#x53C2;&#x672C;&#x8EAB;&#x4F20;&#x9012;&#x5230;&#x5F62;&#x53C2;&#xFF0C;&#x53EF;&#x4EE5;&#x6309;&#x987A;&#x5E8F;&#x4F20;&#x5165;&#x53C2;&#x6570;&#x6216;&#x8005;&#x624B;&#x52A8;&#x6307;&#x5B9A;&#x53C2;&#x6570;</span><br><span class="line">c, d = my_pow(3, 4)</span><br><span class="line">e, f = my_pow(b=4, a=3)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python71.png" alt="71"></p><h2 id="Python&#x51FD;&#x6570;&#x7684;&#x9ED8;&#x8BA4;&#x53C2;&#x6570;"><a href="#Python&#x51FD;&#x6570;&#x7684;&#x9ED8;&#x8BA4;&#x53C2;&#x6570;" class="headerlink" title="Python&#x51FD;&#x6570;&#x7684;&#x9ED8;&#x8BA4;&#x53C2;&#x6570;"></a><font size="4">Python&#x51FD;&#x6570;&#x7684;&#x9ED8;&#x8BA4;&#x53C2;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># def function_name(arg1, arg2=x) &#x8BBE;&#x7F6E;&#x51FD;&#x6570;&#x7684;&#x9ED8;&#x8BA4;&#x53C2;&#x6570;&#x4E3A;arg2&#xFF0C;&#x5176;&#x503C;&#x4E3A;x&#xFF0C;&#x8C03;&#x7528;&#x65F6;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x8D4B;&#x503C;&#x5219;&#x8D4B;&#x503C;&#x4E3A;x&#xFF0C;&#x6CE8;&#x610F;&#x9ED8;&#x8BA4;&#x53C2;&#x6570;&#x53EA;&#x80FD;&#x653E;&#x5728;&#x975E;&#x9ED8;&#x8BA4;&#x53C2;&#x6570;&#x4E4B;&#x540E;</span><br><span class="line">def my_pow(a, b=2):</span><br><span class="line">    return b ** a</span><br><span class="line"></span><br><span class="line">a = my_pow(5)</span><br><span class="line">b = my_pow(3, 3)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python81.png" alt="81"></p><h2 id="Python&#x51FD;&#x6570;&#x7684;&#x6536;&#x96C6;&#x53C2;&#x6570;"><a href="#Python&#x51FD;&#x6570;&#x7684;&#x6536;&#x96C6;&#x53C2;&#x6570;" class="headerlink" title="Python&#x51FD;&#x6570;&#x7684;&#x6536;&#x96C6;&#x53C2;&#x6570;"></a><font size="4">Python&#x51FD;&#x6570;&#x7684;&#x6536;&#x96C6;&#x53C2;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># def function_name(*args) &#x5C06;&#x6240;&#x6709;&#x7684;&#x53C2;&#x6570;&#x90FD;&#x6253;&#x5305;&#x8D77;&#x6765;&#xFF0C;&#x8C03;&#x7528;&#x65F6;&#x4F20;&#x5165;&#x591A;&#x5C11;&#x4E2A;&#x90FD;&#x53EF;&#x4EE5;&#xFF0C;&#x90FD;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x5143;&#x7EC4;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x4F20;&#x5165;&#x53C2;&#x6570;&#x5219;&#x662F;&#x4E00;&#x4E2A;&#x7A7A;&#x5143;&#x7EC4;&#x3002;</span><br><span class="line"></span><br><span class="line">def my_func(*par):</span><br><span class="line">    print(par)</span><br><span class="line">    print(&apos;&#x53C2;&#x6570;&#x7684;&#x4E2A;&#x6570;&#x4E3A;:&apos;, len(par))</span><br><span class="line"></span><br><span class="line">my_func(1, 2, [3, 4], &apos;56&apos;, {7, 8, 9})</span><br><span class="line"></span><br><span class="line"># def function_name(**kwargs) &#x5C06;&#x6240;&#x6709;&#x7684;&#x53C2;&#x6570;&#x90FD;&#x6253;&#x5305;&#x8D77;&#x6765;&#xFF0C;&#x8C03;&#x7528;&#x65F6;&#x4F20;&#x5165;&#x591A;&#x5C11;&#x4E2A;&#x90FD;&#x53EF;&#x4EE5;&#xFF0C;&#x90FD;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x5B57;&#x5178;&#xFF0C;&#x4F20;&#x5165;&#x53C2;&#x6570;&#x65F6;&#x5FC5;&#x987B;&#x4F7F;&#x7528;&#x952E;&#x503C;&#x5BF9;&#x7684;&#x5F62;&#x5F0F;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x4F20;&#x5165;&#x53C2;&#x6570;&#x5219;&#x662F;&#x4E00;&#x4E2A;&#x7A7A;&#x5B57;&#x5178;&#x3002;</span><br><span class="line"></span><br><span class="line">def my_func(**par):</span><br><span class="line">    print(par)</span><br><span class="line">    print(&apos;&#x53C2;&#x6570;&#x7684;&#x4E2A;&#x6570;&#x4E3A;:&apos;, len(par))</span><br><span class="line"></span><br><span class="line">my_func(a=1, b=2, c=[1, 2])</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python82.png" alt="82"></p><h2 id="Python&#x51FD;&#x6570;&#x7684;&#x5168;&#x5C40;&#x53D8;&#x91CF;"><a href="#Python&#x51FD;&#x6570;&#x7684;&#x5168;&#x5C40;&#x53D8;&#x91CF;" class="headerlink" title="Python&#x51FD;&#x6570;&#x7684;&#x5168;&#x5C40;&#x53D8;&#x91CF;"></a><font size="4">Python&#x51FD;&#x6570;&#x7684;&#x5168;&#x5C40;&#x53D8;&#x91CF;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># &#x5728;&#x51FD;&#x6570;&#x4E2D;&#x4F7F;&#x7528;&#x548C;&#x5916;&#x90E8;&#x540D;&#x79F0;&#x76F8;&#x540C;&#x7684;&#x53D8;&#x91CF;&#x65F6;&#xFF0C;&#x4F1A;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x540C;&#x540D;&#x7684;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#xFF0C;&#x5373;&#x4F7F;&#x4FEE;&#x6539;&#x4E86;&#x5176;&#x503C;&#xFF0C;&#x4E5F;&#x53EA;&#x662F;&#x4FEE;&#x6539;&#x4E86;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x989D;&#x503C;&#xFF0C;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x5B8C;&#x6BD5;&#x540E;&#xFF0C;&#x5916;&#x90E8;&#x7684;&#x53D8;&#x91CF;&#x4ECD;&#x7136;&#x6CA1;&#x6709;&#x88AB;&#x4FEE;&#x6539;</span><br><span class="line">a = 10</span><br><span class="line"></span><br><span class="line">def my_func():</span><br><span class="line">    a = 5</span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">my_func()</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"># &#x5982;&#x679C;&#x60F3;&#x5728;&#x51FD;&#x6570;&#x4E2D;&#x4FEE;&#x6539;&#x5916;&#x90E8;&#x53D8;&#x91CF;&#x7684;&#x503C;&#xFF0C;&#x5219;&#x9700;&#x8981;&#x5C06;&#x5176;&#x58F0;&#x660E;&#x4E3A;&#x5168;&#x5C40;&#x53D8;&#x91CF;&#xFF0C;&#x548C;C/C++&#x4E0D;&#x540C;&#xFF0C;C/C++&#x662F;&#x5728;&#x5B9A;&#x4E49;&#x65F6;&#x5C06;&#x53D8;&#x91CF;&#x58F0;&#x660E;&#x4E3A;&#x5168;&#x5C40;&#xFF0C;&#x800C;Python&#x4E2D;&#x662F;&#x5728;&#x5916;&#x90E8;&#x5148;&#x5B9A;&#x4E49;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x51FD;&#x6570;&#x5185;&#x90E8;&#x4F7F;&#x7528;&#x5173;&#x952E;&#x5B57;global&#x5C06;&#x5176;&#x58F0;&#x660E;&#x4E3A;&#x5168;&#x5C40;</span><br><span class="line">a = 10</span><br><span class="line"></span><br><span class="line">def my_func():</span><br><span class="line">    global a</span><br><span class="line">    a = 5</span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">my_func()</span><br><span class="line">print(a)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python83.png" alt="83"></p><h2 id="Python&#x5185;&#x5D4C;&#x51FD;&#x6570;"><a href="#Python&#x5185;&#x5D4C;&#x51FD;&#x6570;" class="headerlink" title="Python&#x5185;&#x5D4C;&#x51FD;&#x6570;"></a><font size="4">Python&#x5185;&#x5D4C;&#x51FD;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># &#x5728;&#x51FD;&#x6570;&#x5185;&#x90E8;&#x53EF;&#x4EE5;&#x5B9A;&#x4E49;&#x53E6;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x8FD9;&#x6837;&#x5916;&#x90E8;&#x51FD;&#x6570;&#x65E0;&#x6CD5;&#x8C03;&#x7528;&#x8BE5;&#x51FD;&#x6570;&#xFF0C;&#x4EC5;&#x4EC5;&#x80FD;&#x5728;&#x5B9A;&#x4E49;&#x8BE5;&#x51FD;&#x6570;&#x7684;&#x51FD;&#x6570;&#x4E2D;&#x4F7F;&#x7528;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x4F7F;&#x4E3B;&#x7A0B;&#x5E8F;&#x66F4;&#x52A0;&#x6E05;&#x6670;&#x3002;&#x5185;&#x5D4C;&#x51FD;&#x6570;&#x7684;&#x4F7F;&#x7528;&#x9891;&#x7387;&#x8F83;&#x4F4E;&#xFF0C;&#x4E86;&#x89E3;&#x5373;&#x53EF;&#x3002;</span><br><span class="line">def test1():</span><br><span class="line">    print(&apos;This is test1&apos;)</span><br><span class="line">    def test2():</span><br><span class="line">        print(&apos;This is test2&apos;)</span><br><span class="line">    test2()</span><br><span class="line"></span><br><span class="line">test1()</span><br><span class="line">test2()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python104.png" alt="104"></p><h2 id="Python&#x51FD;&#x6570;&#x95ED;&#x5305;"><a href="#Python&#x51FD;&#x6570;&#x95ED;&#x5305;" class="headerlink" title="Python&#x51FD;&#x6570;&#x95ED;&#x5305;"></a><font size="4">Python&#x51FD;&#x6570;&#x95ED;&#x5305;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># &#x6307;&#x51FD;&#x6570;&#x5D4C;&#x5957;&#x65F6;&#x5C06;&#x5D4C;&#x5957;&#x51FD;&#x6570;&#x89C6;&#x4E3A;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x4F5C;&#x4E3A;&#x5B9A;&#x4E49;&#x5176;&#x51FD;&#x6570;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#xFF0C;&#x6B64;&#x65F6;&#x8FD4;&#x56DE;&#x503C;&#x662F;&#x4E00;&#x4E2A;&#x51FD;&#x6570;(&#x5B9A;&#x4E49;&#x7684;&#x5185;&#x5D4C;&#x51FD;&#x6570;)&#xFF0C;&#x4F7F;&#x7528;&#x8BE5;&#x51FD;&#x6570;&#x7684;&#x4F7F;&#x7528;&#x65B9;&#x5F0F;&#x548C;&#x666E;&#x901A;&#x51FD;&#x6570;&#x76F8;&#x540C;&#xFF0C;&#x95ED;&#x5305;&#x7684;&#x4F7F;&#x7528;&#x9891;&#x7387;&#x8F83;&#x4F4E;&#xFF0C;&#x4E86;&#x89E3;&#x5373;&#x53EF;&#x3002;</span><br><span class="line">def func1(x):</span><br><span class="line">    def func2(y):</span><br><span class="line">        return x * y</span><br><span class="line">    return func2</span><br><span class="line"></span><br><span class="line">f = func1(8)</span><br><span class="line">print(f)</span><br><span class="line">print(f(5))</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python105.png" alt="105"></p><h2 id="Python&#x51FD;&#x6570;&#x88C5;&#x9970;&#x5668;"><a href="#Python&#x51FD;&#x6570;&#x88C5;&#x9970;&#x5668;" class="headerlink" title="Python&#x51FD;&#x6570;&#x88C5;&#x9970;&#x5668;"></a><font size="4">Python&#x51FD;&#x6570;&#x88C5;&#x9970;&#x5668;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># &#x88C5;&#x9970;&#x5668;&#x5B9E;&#x9645;&#x4E0A;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x95ED;&#x5305;&#xFF0C;&#x628A;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#xFF0C;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x66FF;&#x4EE3;&#x7248;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x5176;&#x672C;&#x8D28;&#x5C31;&#x8BF4;&#x4E00;&#x4E2A;&#x8FD4;&#x56DE;&#x51FD;&#x6570;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x539F;&#x51FD;&#x6570;&#x4E4B;&#x524D;&#x6216;&#x4E4B;&#x540E;&#x589E;&#x52A0;&#x5185;&#x5BB9;&#x3002;</span><br><span class="line"># &#x4EE5;&#x6B64;&#x4EE3;&#x7801;&#x4E3E;&#x4F8B;&#xFF0C;&#x6709;&#x4E00;&#x4E2A;say&#x51FD;&#x6570;&#xFF0C;&#x8F93;&#x51FA;Hello Python !&#xFF0C;&#x4F46;&#x662F;&#x60F3;&#x5728;&#x4E4B;&#x524D;&#x8FD8;&#x6253;&#x5370;&#x522B;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x4FEE;&#x6539;say&#x51FD;&#x6570;&#x3002;</span><br><span class="line"># &#x53EF;&#x4EE5;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x95ED;&#x5305;outer&#xFF0C;&#x7136;&#x540E;&#x5199;say = outer(say)&#xFF0C;inner&#x91CC;&#x9762;&#x53EF;&#x4EE5;&#x5199;&#x5165;&#x9700;&#x8981;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x5373;&#x53EF;&#x5B8C;&#x6210;&#x76F8;&#x5E94;&#x7684;&#x529F;&#x80FD;&#x3002;</span><br><span class="line"># &#x5728;Python&#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x5199;&#x6CD5;&#xFF0C;&#x5728;&#x8981;&#x4FEE;&#x6539;&#x7684;&#x51FD;&#x6570;&#x540D;&#x4E0A;&#x9762;&#x5199;@&#x95ED;&#x5305;&#x540D;&#xFF0C;&#x7B49;&#x4EF7;&#x4E8E;&#x51FD;&#x6570;&#x540D; = &#x95ED;&#x5305;&#x540D;(&#x51FD;&#x6570;&#x540D;)&#x3002;</span><br><span class="line">def outer(func):</span><br><span class="line">    def inner():</span><br><span class="line">        print(&apos;&#x8BF4;&#x70B9;&#x4EC0;&#x4E48;&#x5427;&#xFF01;&apos;)</span><br><span class="line">        func()</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line"># @outer &#x7B49;&#x4EF7;&#x4E8E; say = outer(say)</span><br><span class="line">@outer</span><br><span class="line">def say():</span><br><span class="line">    print(&apos;Hello Python !&apos;)</span><br><span class="line"></span><br><span class="line"># &#x6CE8;&#x610F;&#x987A;&#x5E8F;&#x5E94;&#x8BE5;&#x5148;&#x5199;&#x95ED;&#x5305;&#x518D;&#x5199;&#x8981;&#x4FEE;&#x6539;&#x7684;&#x51FD;&#x6570;</span><br><span class="line">say()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python106.png" alt="106"></p><h2 id="Python&#x504F;&#x51FD;&#x6570;"><a href="#Python&#x504F;&#x51FD;&#x6570;" class="headerlink" title="Python&#x504F;&#x51FD;&#x6570;"></a><font size="4">Python&#x504F;&#x51FD;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># &#x504F;&#x51FD;&#x6570;&#x662F;&#x6307;&#x5BF9;&#x51FD;&#x6570;&#x53C2;&#x6570;&#x4E2D;&#x9ED8;&#x8BA4;&#x503C;&#x7684;&#x63A7;&#x5236;</span><br><span class="line"># functools&#x6A21;&#x5757;&#x4E2D;&#x6709;&#x4E00;&#x4E2A;partial&#x65B9;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x5BF9;&#x9ED8;&#x8BA4;&#x503C;&#x7684;&#x63A7;&#x5236;</span><br><span class="line"># new_func = functools.partial(old_func, para=x) &#x5C06;&#x539F;&#x51FD;&#x6570;old_func&#x4E2D;&#x7684;para&#x53C2;&#x6570;&#x56FA;&#x5B9A;&#x4E3A;x</span><br><span class="line">import functools</span><br><span class="line"></span><br><span class="line">a = int(&apos;1010&apos;, base=2)</span><br><span class="line"></span><br><span class="line">int2 = functools.partial(int, base=2)</span><br><span class="line">b = int2(&apos;1010&apos;)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python107.png" alt="107"></p><h1 id="Function&#x5C0F;&#x7ED3;"><a href="#Function&#x5C0F;&#x7ED3;" class="headerlink" title="Function&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Function&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;Function&#x51FD;&#x6570;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x8BED;&#x8A00;&#x4E2D;&#x4E00;&#x79CD;&#x91CD;&#x8981;&#x7684;&#x8C03;&#x7528;&#x65B9;&#x5F0F;&#xFF0C;&#x65E0;&#x8BBA;&#x662F;&#x5728;&#x4F55;&#x79CD;&#x8BED;&#x8A00;&#x4E2D;&#xFF0C;&#x51FD;&#x6570;&#x7684;&#x4F7F;&#x7528;&#x90FD;&#x662F;&#x81F3;&#x5173;&#x91CD;&#x8981;&#x7684;&#xFF0C;&#x6709;&#x4E86;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x4F7F;&#x4EE3;&#x7801;&#x66F4;&#x52A0;&#x6574;&#x6D01;&#x548C;&#x6E05;&#x6670;&#xFF0C;&#x6A21;&#x5757;&#x4E0E;&#x6A21;&#x5757;&#x4E4B;&#x95F4;&#x8FBE;&#x5230;&#x9AD8;&#x5185;&#x805A;&#x4F4E;&#x8026;&#x5408;&#xFF0C;&#x5927;&#x5927;&#x63D0;&#x9AD8;&#x4EE3;&#x7801;&#x7684;&#x53EF;&#x8BFB;&#x6027;&#x3002;&#x53EF;&#x4EE5;&#x8282;&#x7701;&#x5927;&#x56E0;&#x6B64;&#x4F7F;&#x7528;&#x7684;&#x9891;&#x7387;&#x975E;&#x5E38;&#x9AD8;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x7075;&#x6D3B;&#x638C;&#x63E1;Function&#x7684;&#x5E94;&#x7528;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Function(函数)&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="python" scheme="https://USTCcoder.github.io/categories/python/"/>
    
      <category term="语言学习" scheme="https://USTCcoder.github.io/categories/python/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Special Structure(特殊结构)</title>
    <link href="https://USTCcoder.github.io/2019/09/15/python_special/"/>
    <id>https://USTCcoder.github.io/2019/09/15/python_special/</id>
    <published>2019-09-15T11:14:27.000Z</published>
    <updated>2019-09-19T12:13:09.183Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/LANGUAGE/python11.jpg" alt="11"></p><h1 id="Special-Structure&#x4ECB;&#x7ECD;"><a href="#Special-Structure&#x4ECB;&#x7ECD;" class="headerlink" title="Special Structure&#x4ECB;&#x7ECD;"></a><font size="5" color="red">Special Structure&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;Python&#x4E2D;&#x7684;&#x7279;&#x6B8A;&#x7ED3;&#x6784;&#x6307;&#x9664;&#x4E86;&#x6761;&#x4EF6;&#xFF0C;&#x5FAA;&#x73AF;&#x4E4B;&#x5916;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x5982;&#x5F02;&#x5E38;&#x5904;&#x7406;&#x7ED3;&#x6784;&#xFF0C;else&#x8BED;&#x53E5;&#xFF0C;with&#x8BED;&#x53E5;&#x4EE5;&#x53CA;assert&#x8BED;&#x53E5;&#x3002;<br><a id="more"></a></p><h1 id="Special-Structure&#x5206;&#x7C7B;"><a href="#Special-Structure&#x5206;&#x7C7B;" class="headerlink" title="Special Structure&#x5206;&#x7C7B;"></a><font size="5" color="red">Special Structure&#x5206;&#x7C7B;</font></h1><h2 id="&#x5F02;&#x5E38;&#x5904;&#x7406;"><a href="#&#x5F02;&#x5E38;&#x5904;&#x7406;" class="headerlink" title="&#x5F02;&#x5E38;&#x5904;&#x7406;"></a><font size="4">&#x5F02;&#x5E38;&#x5904;&#x7406;</font></h2><p>$$ \begin{array}{|c|c|} &#x540D;&#x79F0; &amp; &#x63CF;&#x8FF0; \  AssertionError &amp; &#x65AD;&#x8A00;&#x5931;&#x8D25; \ AttributeError &amp; &#x8BBF;&#x95EE;&#x4F4D;&#x7F6E;&#x7684;&#x5BF9;&#x8C61;&#x5C5E;&#x6027; \ IndexError &amp; &#x7D22;&#x5F15;&#x9519;&#x8BEF; \ KeyError &amp; &#x5173;&#x952E;&#x5B57;&#x9519;&#x8BEF; \ NameError &amp; &#x8BBF;&#x95EE;&#x4E0D;&#x5B58;&#x5728;&#x7684;&#x53D8;&#x91CF; \ OSError &amp; &#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x5F02;&#x5E38; \ OverflowError &amp; &#x6570;&#x503C;&#x8FD0;&#x7B97;&#x8D85;&#x8FC7;&#x9650;&#x5236; \ SyntaxError &amp; &#x8BED;&#x6CD5;&#x9519;&#x8BEF; \ TypeError &amp; &#x4E0D;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x65E0;&#x6548;&#x64CD;&#x4F5C; \ ZeroDivisionError &amp; &#x9664;&#x6570;&#x4E3A;0 \ \end{array} $$<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># try: &#x8BED;&#x53E5;1 except: &#x8BED;&#x53E5;2 (finally: &#x8BED;&#x53E5;3) &#x6267;&#x884C;&#x8BED;&#x53E5;1&#x5982;&#x679C;&#x53D1;&#x751F;&#x5F02;&#x5E38;&#x5219;&#x76F4;&#x63A5;&#x8DF3;&#x5230;except&#x4E2D;&#x6267;&#x884C;&#x8BED;&#x53E5;2&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x5F02;&#x5E38;&#x5219;&#x4E0D;&#x6267;&#x884C;&#x8BED;&#x53E5;2&#xFF0C;&#x6700;&#x7EC8;&#x90FD;&#x8981;&#x6267;&#x884C;finally&#x4E2D;&#x7684;&#x8BED;&#x53E5;3&#xFF0C;finally&#x53EF;&#x7701;&#x7565;</span><br><span class="line"># try:</span><br><span class="line">#     &#x8BED;&#x53E5;1(&#x53EF;&#x80FD;&#x51FA;&#x9519;&#x7684;&#x6B65;&#x9AA4;)</span><br><span class="line"># except ErrorName(&#x9ED8;&#x8BA4;&#x4E3A;&#x6240;&#x6709;&#x5F02;&#x5E38;&#x90FD;&#x629B;&#x5F03;):</span><br><span class="line">#     &#x8BED;&#x53E5;2(&#x51FA;&#x73B0;&#x9519;&#x8BEF;&#x7684;&#x5904;&#x7406;&#x8FC7;&#x7A0B;)</span><br><span class="line"># finally:</span><br><span class="line">#     &#x8BED;&#x53E5;3(&#x6700;&#x7EC8;&#x90FD;&#x8981;&#x6267;&#x884C;&#x7684;&#x4EE3;&#x7801;)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    print(&apos;&#x9664;&#x4EE5;0&#x4E4B;&#x524D;&apos;)</span><br><span class="line">    a = 5 / 0</span><br><span class="line">    print(&apos;&#x9664;&#x4EE5;0&#x4E4B;&#x540E;&apos;)</span><br><span class="line">except ZeroDivisionError:</span><br><span class="line">    a = 5</span><br><span class="line">    print(&apos;except&apos;)</span><br><span class="line">finally:</span><br><span class="line">    print(&apos;finally&apos;)</span><br><span class="line">print(a)</span><br></pre></td></tr></tbody></table></figure><p></p><p><img src="/images/LANGUAGE/python72.png" alt="72"></p><h2 id="else&#x8BED;&#x53E5;"><a href="#else&#x8BED;&#x53E5;" class="headerlink" title="else&#x8BED;&#x53E5;"></a><font size="4">else&#x8BED;&#x53E5;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># else&#x8BED;&#x53E5;&#x6709;4&#x79CD;&#x7EC4;&#x5408;&#x65B9;&#x5F0F;&#xFF0C;&#x53EF;&#x4EE5;&#x548C;if&#x7EC4;&#x5408;&#x6210;if condition: &#x8BED;&#x53E5;1 else: &#x8BED;&#x53E5;2&#xFF0C;&#x53EF;&#x4EE5;&#x548C;while&#x7EC4;&#x5408;&#x6210;while condition: &#x5FAA;&#x73AF;&#x8BED;&#x53E5; else &#x8BED;&#x53E5;&#xFF0C;&#x53EF;&#x4EE5;&#x548C;for&#x7EC4;&#x5408;&#x6210;for target in iterable: &#x5FAA;&#x73AF;&#x8BED;&#x53E5; else: &#x8BED;&#x53E5;&#xFF0C;&#x53EF;&#x4EE5;&#x548C;try&#x7EC4;&#x5408;&#x6210;try: &#x8BED;&#x53E5;1 except: &#x8BED;&#x53E5;2 else: &#x8BED;&#x53E5;3</span><br><span class="line"></span><br><span class="line"># if condition: &#x8BED;&#x53E5;1 else: &#x8BED;&#x53E5;2&#xFF0C;&#x5982;&#x679C;condition&#x6B63;&#x786E;&#x5219;&#x6267;&#x884C;&#x8BED;&#x53E5;1&#xFF0C;&#x5426;&#x5219;&#x6267;&#x884C;&#x8BED;&#x53E5;2</span><br><span class="line"># if condition:</span><br><span class="line">#     &#x8BED;&#x53E5;1</span><br><span class="line"># else:</span><br><span class="line">#     &#x8BED;&#x53E5;2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># while condition: &#x5FAA;&#x73AF;&#x8BED;&#x53E5; else &#x8BED;&#x53E5;&#xFF0C;&#x5982;&#x679C;&#x5FAA;&#x73AF;&#x6267;&#x884C;&#x5B8C;&#x6BD5;&#x5219;&#x6267;&#x884C;else&#x4E2D;&#x7684;&#x8BED;&#x53E5;&#xFF0C;&#x5982;&#x679C;&#x4E2D;&#x95F4;&#x8DF3;&#x51FA;&#x5FAA;&#x73AF;&#x5219;&#x4E0D;&#x6267;&#x884C;else&#x4E2D;&#x7684;&#x8BED;&#x53E5;</span><br><span class="line"># while condition:</span><br><span class="line">#     &#x5FAA;&#x73AF;&#x8BED;&#x53E5;</span><br><span class="line"># else:</span><br><span class="line">#     &#x8BED;&#x53E5;</span><br><span class="line">a = 3</span><br><span class="line">while a &gt; 0:</span><br><span class="line">    a -= 1</span><br><span class="line">else:</span><br><span class="line">    print(&apos;else&apos;)</span><br><span class="line"></span><br><span class="line"># for target in iterable: &#x5FAA;&#x73AF;&#x8BED;&#x53E5; else: &#x8BED;&#x53E5;&#xFF0C;&#x5982;&#x679C;&#x5FAA;&#x73AF;&#x6267;&#x884C;&#x5B8C;&#x6BD5;&#x5219;&#x6267;&#x884C;else&#x4E2D;&#x7684;&#x8BED;&#x53E5;&#xFF0C;&#x5982;&#x679C;&#x4E2D;&#x95F4;&#x8DF3;&#x51FA;&#x5FAA;&#x73AF;&#x5219;&#x4E0D;&#x6267;&#x884C;else&#x4E2D;&#x7684;&#x8BED;&#x53E5;</span><br><span class="line"># for target in iterable: </span><br><span class="line">#     &#x5FAA;&#x73AF;&#x8BED;&#x53E5;</span><br><span class="line"># else:</span><br><span class="line">#     &#x8BED;&#x53E5;</span><br><span class="line">a = 3</span><br><span class="line">for i in range(3):</span><br><span class="line">    a -= 1</span><br><span class="line">else:</span><br><span class="line">    print(&apos;else&apos;)</span><br><span class="line"></span><br><span class="line"># try: &#x8BED;&#x53E5;1 except: &#x8BED;&#x53E5;2 else: &#x8BED;&#x53E5;3&#xFF0C;&#x5982;&#x679C;&#x53D1;&#x751F;&#x5F02;&#x5E38;&#x5219;&#x4E0D;&#x6267;&#x884C;else&#x540E;&#x9762;&#x7684;&#x8BED;&#x53E5;3&#xFF0C;&#x6CA1;&#x6709;&#x5F02;&#x5E38;&#x5219;&#x6267;&#x884C;else&#x540E;&#x9762;&#x7684;&#x8BED;&#x53E5;3</span><br><span class="line"># try:</span><br><span class="line">#     &#x8BED;&#x53E5;1</span><br><span class="line"># except:</span><br><span class="line">#     &#x8BED;&#x53E5;2</span><br><span class="line"># else: </span><br><span class="line">#     &#x8BED;&#x53E5;3</span><br><span class="line">try:</span><br><span class="line">    a = 4 / 0</span><br><span class="line">except:</span><br><span class="line">    a = 4 / 1</span><br><span class="line">else:</span><br><span class="line">    print(&apos;else&apos;)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python73.png" alt="73"></p><h2 id="with&#x8BED;&#x53E5;"><a href="#with&#x8BED;&#x53E5;" class="headerlink" title="with&#x8BED;&#x53E5;"></a><font size="4">with&#x8BED;&#x53E5;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># with &#x8BED;&#x53E5;1: &#x8BED;&#x53E5;2 &#x7528;&#x4E8E;&#x6587;&#x4EF6;&#x64CD;&#x4F5C;&#x6216;&#x8005;&#x8FDB;&#x7A0B;&#x7EBF;&#x7A0B;&#x4E92;&#x65A5;&#x65F6;&#xFF0C;&#x8BED;&#x53E5;2&#x6267;&#x884C;&#x5B8C;&#x4E4B;&#x540E;&#x4F1A;&#x81EA;&#x52A8;&#x91CA;&#x653E;&#x8BED;&#x53E5;1&#x6240;&#x4EA7;&#x751F;&#x7684;&#x8D44;&#x6E90;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x518D;&#x624B;&#x52A8;&#x5B8C;&#x6210;&#x540E;&#x7EED;&#x5904;&#x7406;</span><br><span class="line"># with &#x8BED;&#x53E5;1:</span><br><span class="line">#     &#x8BED;&#x53E5;2</span><br><span class="line">with open(&apos;dm01.txt&apos;) as f:</span><br><span class="line">    print(f.read())</span><br><span class="line">print(f.closed)</span><br><span class="line">``` </span><br><span class="line">![74](/images/LANGUAGE/python74.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## &lt;font size=4&gt;assert&#x8BED;&#x53E5;&lt;/font&gt;</span><br></pre></td></tr></tbody></table></figure><h1 id="assert-condition-&#x5F53;condition&#x4E3A;&#x5047;&#xFF0C;&#x7A0B;&#x5E8F;&#x81EA;&#x52A8;&#x5D29;&#x6E83;&#xFF0C;&#x5E76;&#x4E14;&#x629B;&#x51FA;AssertError&#x5F02;&#x5E38;&#xFF0C;condition&#x4E3A;&#x771F;&#xFF0C;&#x4E0D;&#x505A;&#x4EFB;&#x4F55;&#x64CD;&#x4F5C;"><a href="#assert-condition-&#x5F53;condition&#x4E3A;&#x5047;&#xFF0C;&#x7A0B;&#x5E8F;&#x81EA;&#x52A8;&#x5D29;&#x6E83;&#xFF0C;&#x5E76;&#x4E14;&#x629B;&#x51FA;AssertError&#x5F02;&#x5E38;&#xFF0C;condition&#x4E3A;&#x771F;&#xFF0C;&#x4E0D;&#x505A;&#x4EFB;&#x4F55;&#x64CD;&#x4F5C;" class="headerlink" title="assert condition &#x5F53;condition&#x4E3A;&#x5047;&#xFF0C;&#x7A0B;&#x5E8F;&#x81EA;&#x52A8;&#x5D29;&#x6E83;&#xFF0C;&#x5E76;&#x4E14;&#x629B;&#x51FA;AssertError&#x5F02;&#x5E38;&#xFF0C;condition&#x4E3A;&#x771F;&#xFF0C;&#x4E0D;&#x505A;&#x4EFB;&#x4F55;&#x64CD;&#x4F5C;"></a>assert condition &#x5F53;condition&#x4E3A;&#x5047;&#xFF0C;&#x7A0B;&#x5E8F;&#x81EA;&#x52A8;&#x5D29;&#x6E83;&#xFF0C;&#x5E76;&#x4E14;&#x629B;&#x51FA;AssertError&#x5F02;&#x5E38;&#xFF0C;condition&#x4E3A;&#x771F;&#xFF0C;&#x4E0D;&#x505A;&#x4EFB;&#x4F55;&#x64CD;&#x4F5C;</h1><h1 id="assert-condition"><a href="#assert-condition" class="headerlink" title="assert condition"></a>assert condition</h1><p>assert 3 &lt; 0<br>print(f.closed)<br><code>`</code><br><img src="/images/LANGUAGE/python75.png" alt="75"></p><h1 id="Special-Structure&#x5C0F;&#x7ED3;"><a href="#Special-Structure&#x5C0F;&#x7ED3;" class="headerlink" title="Special Structure&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Special Structure&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;Special Structure&#x7279;&#x6B8A;&#x7ED3;&#x6784;&#x4F7F;&#x7528;&#x9891;&#x7387;&#x76F8;&#x5BF9;&#x8F83;&#x4F4E;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x7EF4;&#x62A4;&#x4EE3;&#x7801;&#x7A33;&#x5B9A;&#x6027;&#x65B9;&#x9762;&#x6709;&#x7740;&#x91CD;&#x8981;&#x7684;&#x5E94;&#x7528;&#xFF0C;&#x5F53;&#x51FA;&#x73B0;&#x5F02;&#x5E38;&#x65F6;&#x4E0D;&#x4F1A;&#x7EC8;&#x6B62;&#x7A0B;&#x5E8F;&#xFF0C;&#x800C;&#x662F;&#x5177;&#x6709;&#x53CB;&#x5584;&#x7684;&#x63D0;&#x793A;&#x754C;&#x9762;&#xFF0C;&#x9002;&#x5408;&#x4E8E;&#x4F01;&#x4E1A;&#x7EA7;&#x5E94;&#x7528;&#x5F00;&#x53D1;&#xFF0C;&#x56E0;&#x6B64;&#x8981;&#x719F;&#x7EC3;&#x638C;&#x63E1;&#x8FD9;&#x4E9B;&#x7279;&#x6B8A;&#x7ED3;&#x6784;&#x7684;&#x5E94;&#x7528;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Special Structure(特殊结构)&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="python" scheme="https://USTCcoder.github.io/categories/python/"/>
    
      <category term="语言学习" scheme="https://USTCcoder.github.io/categories/python/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>File(文件)</title>
    <link href="https://USTCcoder.github.io/2019/09/15/python_file/"/>
    <id>https://USTCcoder.github.io/2019/09/15/python_file/</id>
    <published>2019-09-15T01:36:45.000Z</published>
    <updated>2019-09-20T02:12:44.153Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/LANGUAGE/python12.jpg" alt="12"></p><h1 id="File&#x4ECB;&#x7ECD;"><a href="#File&#x4ECB;&#x7ECD;" class="headerlink" title="File&#x4ECB;&#x7ECD;"></a><font size="5" color="red">File&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;&#x5B66;&#x4E60;&#x4E00;&#x95E8;&#x8BED;&#x8A00;&#xFF0C;&#x6700;&#x7EC8;&#x76EE;&#x7684;&#x662F;&#x89E3;&#x51B3;&#x5B9E;&#x9645;&#x7684;&#x751F;&#x6D3B;&#x95EE;&#x9898;&#xFF0C;&#x5C24;&#x5176;&#x662F;Python&#x8BED;&#x8A00;&#xFF0C;&#x51FA;&#x8272;&#x7684;&#x5E94;&#x7528;&#x5728;&#x4EBA;&#x5DE5;&#x667A;&#x80FD;&#x9886;&#x57DF;&#x3002;&#x4F46;&#x662F;&#x9762;&#x5BF9;&#x5927;&#x6570;&#x636E;&#x7684;&#x6D6A;&#x6F6E;&#xFF0C;&#x6570;&#x636E;&#x7684;&#x8BFB;&#x53D6;&#x662F;&#x4E00;&#x4E2A;&#x5173;&#x952E;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x56E0;&#x6B64;&#x6587;&#x4EF6;&#x64CD;&#x4F5C;&#x662F;&#x6211;&#x4EEC;&#x5FC5;&#x987B;&#x8981;&#x638C;&#x63E1;&#x7684;&#x5185;&#x5BB9;&#x3002;<br><a id="more"></a></p><h1 id="File&#x5E94;&#x7528;"><a href="#File&#x5E94;&#x7528;" class="headerlink" title="File&#x5E94;&#x7528;"></a><font size="5" color="red">File&#x5E94;&#x7528;</font></h1><h2 id="File&#x6253;&#x5F00;"><a href="#File&#x6253;&#x5F00;" class="headerlink" title="File&#x6253;&#x5F00;"></a><font size="4">File&#x6253;&#x5F00;</font></h2><p>$$ \begin{array}{|c|c|} &#x6A21;&#x5F0F; &amp; &#x63CF;&#x8FF0; \ x &amp; &#x5199;&#x6A21;&#x5F0F;&#xFF0C;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#xFF0C;&#x5982;&#x679C;&#x8BE5;&#x6587;&#x4EF6;&#x5DF2;&#x5B58;&#x5728;&#x5219;&#x4F1A;&#x62A5;&#x9519;&#x3002; \ b &amp; &#x4E8C;&#x8FDB;&#x5236;&#x6A21;&#x5F0F;&#x3002; \ + &amp; &#x6253;&#x5F00;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#x8FDB;&#x884C;&#x66F4;&#x65B0;(&#x53EF;&#x8BFB;&#x53EF;&#x5199;)&#x3002; \ r &amp; &#x4EE5;&#x53EA;&#x8BFB;&#x65B9;&#x5F0F;&#x6253;&#x5F00;&#x6587;&#x4EF6;&#x3002;&#x6587;&#x4EF6;&#x7684;&#x6307;&#x9488;&#x5C06;&#x4F1A;&#x653E;&#x5728;&#x6587;&#x4EF6;&#x7684;&#x5F00;&#x5934;&#x3002; \ w &amp; &#x4EE5;&#x5199;&#x5165;&#x65B9;&#x5F0F;&#x6253;&#x5F00;&#x6587;&#x4EF6;&#x3002;&#x5982;&#x679C;&#x8BE5;&#x6587;&#x4EF6;&#x5DF2;&#x5B58;&#x5728;&#x5219;&#x4ECE;&#x5F00;&#x5934;&#x5F00;&#x59CB;&#x7F16;&#x8F91;&#x3002;&#x5426;&#x5219;&#x521B;&#x5EFA;&#x65B0;&#x6587;&#x4EF6;&#x3002; \ a &amp; &#x4EE5;&#x8FFD;&#x52A0;&#x65B9;&#x5F0F;&#x6253;&#x5F00;&#x6587;&#x4EF6;&#xFF0C;&#x5982;&#x679C;&#x8BE5;&#x6587;&#x4EF6;&#x4E0D;&#x5B58;&#x5728;&#x5219;&#x521B;&#x5EFA;&#x65B0;&#x6587;&#x4EF6;&#x5199;&#x5165;&#x3002; \ \end{array} $$<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># open(file, mode=&apos;r&apos;, buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None) &#x6700;&#x91CD;&#x8981;&#x7684;</span><br><span class="line">f = open(&apos;dm01.txt&apos;, mode=&apos;a+&apos;) &#x4EE5;&#x8BFB;&#x5199;&#x7684;&#x65B9;&#x5F0F;&#x6253;&#x5F00;&#x6587;&#x4EF6;dm01.txt&#xFF0C;&#x7528;&#x4E8E;&#x5728;&#x6587;&#x4EF6;&#x540E;&#x8FFD;&#x52A0;&#x5185;&#x5BB9;</span><br></pre></td></tr></tbody></table></figure><p></p><p><img src="/images/LANGUAGE/python76.png" alt="76"></p><h2 id="File&#x64CD;&#x4F5C;"><a href="#File&#x64CD;&#x4F5C;" class="headerlink" title="File&#x64CD;&#x4F5C;"></a><font size="4">File&#x64CD;&#x4F5C;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># file.flush() &#x5237;&#x65B0;&#x5185;&#x90E8;&#x7F13;&#x5B58;&#xFF0C;&#x5C06;&#x7F13;&#x5B58;&#x533A;&#x7684;&#x6570;&#x636E;&#x5199;&#x5165;&#x6587;&#x4EF6;</span><br><span class="line"></span><br><span class="line"># file.read(size) &#x4ECE;&#x6587;&#x4EF6;&#x8BFB;&#x53D6;size&#x5927;&#x5C0F;&#x7684;&#x5B57;&#x8282;&#xFF0C;&#x9ED8;&#x8BA4;&#x8BFB;&#x53D6;&#x6240;&#x6709;&#x5B57;&#x8282; </span><br><span class="line"></span><br><span class="line"># file.readline() &#x8BFB;&#x53D6;&#x6574;&#x884C;&#xFF0C;&#x5305;&#x62EC;&#x6362;&#x884C;&#x7B26;</span><br><span class="line"></span><br><span class="line"># file.readlines() &#x8BFB;&#x53D6;&#x6240;&#x6709;&#x884C;&#xFF0C;&#x5E76;&#x4EE5;&#x5217;&#x8868;&#x5F62;&#x5F0F;&#x8FD4;&#x56DE;</span><br><span class="line"></span><br><span class="line"># file.seek(n) &#x8BBE;&#x7F6E;&#x6587;&#x4EF6;&#x6307;&#x9488;&#x5F53;&#x524D;&#x4F4D;&#x7F6E;&#x6307;&#x5411;n</span><br><span class="line"></span><br><span class="line"># file.tell() &#x8FD4;&#x56DE;&#x6587;&#x4EF6;&#x6307;&#x9488;&#x5F53;&#x524D;&#x4F4D;&#x7F6E; </span><br><span class="line"></span><br><span class="line"># file.write() &#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x5199;&#x5165;&#x6587;&#x4EF6;&#xFF0C;&#x8FD4;&#x56DE;&#x5199;&#x5165;&#x7684;&#x5B57;&#x7B26;&#x957F;&#x5EA6;</span><br><span class="line"></span><br><span class="line"># file.writelines() &#x5411;&#x6587;&#x4EF6;&#x5199;&#x5165;&#x4E00;&#x4E2A;&#x5E8F;&#x5217;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x5217;&#x8868;&#xFF0C;&#x5982;&#x679C;&#x9700;&#x8981;&#x6362;&#x884C;&#x5219;&#x52A0;&#x5165;&#x6BCF;&#x884C;&#x7684;&#x6362;&#x884C;&#x7B26;</span><br><span class="line"></span><br><span class="line"># flie.close() &#x5173;&#x95ED;&#x6587;&#x4EF6;&#xFF0C;&#x5173;&#x95ED;&#x540E;&#x65E0;&#x6CD5;&#x8FDB;&#x884C;&#x8BFB;&#x5199;&#x64CD;&#x4F5C;</span><br><span class="line">f = open(&apos;dm01.txt&apos;, mode=&apos;r+&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">f</span><br><span class="line">f.tell()</span><br><span class="line">f.seek(0)</span><br><span class="line">f.readlines()</span><br><span class="line">f.writelines([&apos;\nfile append1\nfile append2&apos;])</span><br><span class="line">f.seek(0)</span><br><span class="line">f.readlines()</span><br><span class="line">f.close()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python77.png" alt="77"></p><h1 id="File&#x5C0F;&#x7ED3;"><a href="#File&#x5C0F;&#x7ED3;" class="headerlink" title="File&#x5C0F;&#x7ED3;"></a><font size="5" color="red">File&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x5BF9;&#x6587;&#x4EF6;&#x7684;&#x64CD;&#x4F5C;&#x7ECF;&#x5E38;&#x4F7F;&#x7528;&#x4E8E;&#x6587;&#x672C;&#x7684;&#x6279;&#x91CF;&#x5316;&#x4FEE;&#x6539;&#xFF0C;&#x5927;&#x6570;&#x636E;&#x7684;&#x8BFB;&#x53D6;&#x6216;&#x8005;&#x7F51;&#x9875;&#x722C;&#x866B;&#x7684;&#x5E94;&#x7528;&#x3002;&#x8FD9;&#x4E9B;&#x90FD;&#x5C5E;&#x4E8E;&#x8F83;&#x9AD8;&#x7EA7;&#x522B;&#x7684;&#x5E94;&#x7528;&#x9886;&#x57DF;&#xFF0C;&#x56E0;&#x6B64;&#x521D;&#x5B66;&#x8005;&#x5F88;&#x5C11;&#x4F7F;&#x7528;&#x5230;File&#x6587;&#x4EF6;&#x64CD;&#x4F5C;&#xFF0C;&#x4F46;&#x662F;&#x4E3A;&#x4E86;&#x4EE5;&#x540E;&#x5E94;&#x7528;&#x7684;&#x65B9;&#x4FBF;&#xFF0C;&#x5B66;&#x597D;&#x6587;&#x4EF6;&#x64CD;&#x4F5C;&#x662F;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x7684;&#xFF01;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;File(文件)&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="python" scheme="https://USTCcoder.github.io/categories/python/"/>
    
      <category term="语言学习" scheme="https://USTCcoder.github.io/categories/python/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Set(集合)</title>
    <link href="https://USTCcoder.github.io/2019/09/14/python_set/"/>
    <id>https://USTCcoder.github.io/2019/09/14/python_set/</id>
    <published>2019-09-14T11:36:45.000Z</published>
    <updated>2019-09-20T02:13:35.869Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/LANGUAGE/python9.jpg" alt="9"></p><h1 id="Set&#x4ECB;&#x7ECD;"><a href="#Set&#x4ECB;&#x7ECD;" class="headerlink" title="Set&#x4ECB;&#x7ECD;"></a><font size="5" color="red">Set&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;Python&#x4E2D;&#x7684;Set&#x662F;&#x96C6;&#x5408;&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x5176;&#x548C;&#x5217;&#x8868;&#xFF0C;&#x5143;&#x7EC4;&#x6700;&#x5927;&#x7684;&#x533A;&#x522B;&#x662F;&#x96C6;&#x5408;&#x4E2D;&#x4E0D;&#x5B58;&#x5728;&#x76F8;&#x540C;&#x7684;&#x5143;&#x7D20;&#x3002;<br><a id="more"></a></p><h1 id="Set&#x64CD;&#x4F5C;"><a href="#Set&#x64CD;&#x4F5C;" class="headerlink" title="Set&#x64CD;&#x4F5C;"></a><font size="5" color="red">Set&#x64CD;&#x4F5C;</font></h1><h2 id="Python&#x521B;&#x5EFA;&#x96C6;&#x5408;"><a href="#Python&#x521B;&#x5EFA;&#x96C6;&#x5408;" class="headerlink" title="Python&#x521B;&#x5EFA;&#x96C6;&#x5408;"></a><font size="4">Python&#x521B;&#x5EFA;&#x96C6;&#x5408;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># set(iterable) &#x5C06;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#x8F6C;&#x6362;&#x4E3A;set&#x7C7B;&#x578B;</span><br><span class="line">a = set(range(5))</span><br><span class="line"></span><br><span class="line"># {a, b, c, ...} &#x521B;&#x5EFA;&#x5143;&#x7D20;&#x4E3A;a, b, c, ...&#x7684;&#x96C6;&#x5408;&#xFF0C;&#x6CE8;&#x610F;&#x7A7A;&#x96C6;&#x5408;&#x4E0D;&#x80FD;&#x5199;{}&#xFF0C;&#x8981;&#x7528;set()&#x5B9A;&#x4E49;&#xFF0C;{}&#x9ED8;&#x8BA4;&#x4E3A;&#x5B57;&#x5178;&#x7C7B;&#x578B;</span><br><span class="line">b = {1, 2, 3, 4, 5}</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python56.png" alt="56"></p><h2 id="Python&#x96C6;&#x5408;&#x8FD0;&#x7B97;"><a href="#Python&#x96C6;&#x5408;&#x8FD0;&#x7B97;" class="headerlink" title="Python&#x96C6;&#x5408;&#x8FD0;&#x7B97;"></a><font size="4">Python&#x96C6;&#x5408;&#x8FD0;&#x7B97;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = {1, 2, 3, 4, 5}</span><br><span class="line">b = {3, 4, 5, 6, 7}</span><br><span class="line"></span><br><span class="line"># |(&#x6C42;&#x5E76;&#x96C6;)&#xFF0C;&amp;(&#x6C42;&#x4EA4;&#x96C6;)&#xFF0C;-(&#x6C42;&#x5DEE;&#x96C6;)&#xFF0C;^(&#x6C42;&#x5BF9;&#x79F0;&#x5DEE;&#x96C6;)&#xFF0C;==(&#x6BD4;&#x8F83;&#x662F;&#x5426;&#x76F8;&#x7B49;)&#xFF0C;!=(&#x6BD4;&#x8F83;&#x662F;&#x5426;&#x4E0D;&#x7B49;)&#xFF0C;&lt;(&#x6BD4;&#x8F83;&#x662F;&#x5426;&#x4E3A;&#x771F;&#x5B50;&#x96C6;)&#xFF0C;&lt;=(&#x6BD4;&#x8F83;&#x662F;&#x5426;&#x4E3A;&#x5B50;&#x96C6;)&#xFF0C;&gt;(&#x6BD4;&#x8F83;&#x662F;&#x5426;&#x4E3A;&#x771F;&#x8D85;&#x96C6;)&#xFF0C;&gt;=(&#x6BD4;&#x8F83;&#x662F;&#x5426;&#x4E3A;&#x8D85;&#x96C6;)</span><br><span class="line">a | b</span><br><span class="line">a &amp; b</span><br><span class="line">a - b</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python57.png" alt="57"></p><h2 id="Python&#x5411;&#x96C6;&#x5408;&#x4E2D;&#x589E;&#x52A0;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x4FEE;&#x6539;&#x5143;&#x7D20;"><a href="#Python&#x5411;&#x96C6;&#x5408;&#x4E2D;&#x589E;&#x52A0;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x4FEE;&#x6539;&#x5143;&#x7D20;" class="headerlink" title="Python&#x5411;&#x96C6;&#x5408;&#x4E2D;&#x589E;&#x52A0;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x4FEE;&#x6539;&#x5143;&#x7D20;"></a><font size="4">Python&#x5411;&#x96C6;&#x5408;&#x4E2D;&#x589E;&#x52A0;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x4FEE;&#x6539;&#x5143;&#x7D20;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = {1, 2, 3, 4, 5}</span><br><span class="line"></span><br><span class="line"># obj.add(ele) &#x5411;&#x96C6;&#x5408;&#x4E2D;&#x6DFB;&#x52A0;&#x5143;&#x7D20;&#xFF0C;&#x4E0D;&#x80FD;&#x6DFB;&#x52A0;&#x96C6;&#x5408;&#xFF0C;&#x5217;&#x8868;&#xFF0C;&#x5B57;&#x5178;&#x7C7B;&#x578B;&#xFF0C;&#x53EF;&#x4EE5;&#x6DFB;&#x52A0;&#x6570;&#x5B57;&#xFF0C;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x5143;&#x7EC4;&#x7C7B;&#x578B;&#xFF0C;&#x5982;&#x679C;&#x5DF2;&#x7ECF;&#x5B58;&#x5728;&#x4E8E;&#x96C6;&#x5408;&#x4E2D;&#xFF0C;&#x5219;&#x4E0D;&#x505A;&#x4EFB;&#x4F55;&#x64CD;&#x4F5C;</span><br><span class="line">a.add(6)</span><br><span class="line">a.add(3)</span><br><span class="line"></span><br><span class="line"># obj.remove(ele) &#x4ECE;&#x96C6;&#x5408;&#x4E2D;&#x5220;&#x9664;&#x5143;&#x7D20;ele&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x8BE5;&#x5143;&#x7D20;&#x4F1A;&#x62A5;&#x9519;</span><br><span class="line">a.remove(1)</span><br><span class="line"></span><br><span class="line"># obj.discard(ele) &#x4ECE;&#x96C6;&#x5408;&#x4E2D;&#x5220;&#x9664;&#x5143;&#x7D20;ele&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x8BE5;&#x5143;&#x7D20;&#x4E0D;&#x4F1A;&#x62A5;&#x9519;</span><br><span class="line">a.discard(2)</span><br><span class="line"></span><br><span class="line"># obj.pop() &#x4ECE;&#x96C6;&#x5408;&#x4E2D;&#x5220;&#x9664;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5E76;&#x8FD4;&#x56DE;&#x8BE5;&#x5143;&#x7D20;</span><br><span class="line">a.pop()</span><br><span class="line"></span><br><span class="line"># obj.clear() &#x5220;&#x9664;&#x6240;&#x6709;&#x5143;&#x7D20;</span><br><span class="line">a.clear()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python59.png" alt="59"></p><h1 id="Set&#x5C0F;&#x7ED3;"><a href="#Set&#x5C0F;&#x7ED3;" class="headerlink" title="Set&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Set&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;Set&#x96C6;&#x5408;&#x662F;&#x4F7F;&#x7528;&#x9891;&#x7387;&#x76F8;&#x5BF9;&#x8F83;&#x4F4E;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x4F7F;&#x7528;&#x5219;&#x4F1A;&#x5927;&#x5927;&#x63D0;&#x9AD8;&#x6548;&#x7387;&#xFF0C;&#x5728;&#x7EDF;&#x8BA1;&#x7C7B;&#x522B;&#x65F6;&#xFF0C;&#x5F88;&#x591A;&#x7269;&#x54C1;&#x5C5E;&#x4E8E;&#x540C;&#x4E00;&#x7C7B;&#xFF0C;&#x6B64;&#x65F6;&#x4E0D;&#x9700;&#x8981;&#x5173;&#x5FC3;&#x8BE5;&#x7269;&#x54C1;&#xFF0C;&#x5EFA;&#x7ACB;&#x96C6;&#x5408;&#x65F6;&#xFF0C;&#x53EF;&#x4EE5;&#x8282;&#x7701;&#x5927;&#x91CF;&#x7684;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#x548C;&#x7528;&#x6237;&#x67E5;&#x8BE2;&#x65F6;&#x95F4;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x67D0;&#x4E9B;&#x7279;&#x5B9A;&#x60C5;&#x51B5;&#x4E0B;&#x80FD;&#x53D1;&#x6325;&#x72EC;&#x7279;&#x7684;&#x4F18;&#x52BF;&#xFF0C;&#x6240;&#x4EE5;&#x4E5F;&#x8981;&#x719F;&#x7EC3;&#x638C;&#x63E1;Set&#x7684;&#x5E94;&#x7528;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Set(集合)&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="python" scheme="https://USTCcoder.github.io/categories/python/"/>
    
      <category term="语言学习" scheme="https://USTCcoder.github.io/categories/python/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Dict(字典)</title>
    <link href="https://USTCcoder.github.io/2019/09/14/python_dict/"/>
    <id>https://USTCcoder.github.io/2019/09/14/python_dict/</id>
    <published>2019-09-14T08:14:15.000Z</published>
    <updated>2019-09-19T12:12:26.726Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/LANGUAGE/python8.jpg" alt="8"></p><h1 id="Dict&#x4ECB;&#x7ECD;"><a href="#Dict&#x4ECB;&#x7ECD;" class="headerlink" title="Dict&#x4ECB;&#x7ECD;"></a><font size="5" color="red">Dict&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;Python&#x4E2D;&#x7684;Dict&#x662F;&#x4E00;&#x79CD;&#x54C8;&#x5E0C;&#x8868;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x662F;&#x7531;&#x952E;&#x503C;&#x5BF9;&#x6784;&#x6210;&#x7684;&#xFF0C;&#x4E00;&#x4E2A;Key&#x5BF9;&#x5E94;&#x4E00;&#x4E2A;Value&#xFF0C;&#x65B9;&#x4FBF;&#x6570;&#x636E;&#x7684;&#x67E5;&#x627E;&#x3002;<br><a id="more"></a></p><h1 id="Dict&#x64CD;&#x4F5C;"><a href="#Dict&#x64CD;&#x4F5C;" class="headerlink" title="Dict&#x64CD;&#x4F5C;"></a><font size="5" color="red">Dict&#x64CD;&#x4F5C;</font></h1><h2 id="Python&#x521B;&#x5EFA;&#x5B57;&#x5178;"><a href="#Python&#x521B;&#x5EFA;&#x5B57;&#x5178;" class="headerlink" title="Python&#x521B;&#x5EFA;&#x5B57;&#x5178;"></a><font size="4">Python&#x521B;&#x5EFA;&#x5B57;&#x5178;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># dict.fromkeys(key, value) &#x751F;&#x6210;&#x4EE5;key&#x4E3A;&#x5173;&#x952E;&#x5B57;&#xFF0C;value&#x4E3A;&#x503C;&#x7684;&#x5B57;&#x5178;&#xFF0C;&#x521D;&#x59CB;&#x65F6;&#x6240;&#x6709;&#x7684;key&#x5BF9;&#x5E94;&#x7684;&#x503C;&#x90FD;&#x76F8;&#x540C;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;None</span><br><span class="line">a = dict.fromkeys([1, 2, 3])</span><br><span class="line"></span><br><span class="line"># {a:aa, b:bb, ...}&#x521B;&#x5EFA;Key&#x4E3A;a, b, ...&#xFF0C;Value&#x4E3A;aa, bb, ...&#x7684;&#x5B57;&#x5178;</span><br><span class="line">b = {1:None, 2:None, 3:None}</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python50.png" alt="50"></p><h2 id="Python&#x7D22;&#x5F15;&#x5B57;&#x5178;&#x5143;&#x7D20;"><a href="#Python&#x7D22;&#x5F15;&#x5B57;&#x5178;&#x5143;&#x7D20;" class="headerlink" title="Python&#x7D22;&#x5F15;&#x5B57;&#x5178;&#x5143;&#x7D20;"></a><font size="4">Python&#x7D22;&#x5F15;&#x5B57;&#x5178;&#x5143;&#x7D20;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = {1:&apos;one&apos;, 2:2, 3:True}</span><br><span class="line"></span><br><span class="line"># &#x548C;&#x5217;&#x8868;&#xFF0C;&#x5143;&#x7EC4;&#xFF0C;&#x5B57;&#x7B26;&#x4E32;&#x4E0D;&#x540C;&#xFF0C;&#x5B57;&#x5178;&#x7684;&#x7D22;&#x5F15;&#x662F;&#x65E0;&#x5E8F;&#x7684;&#xFF0C;&#x53EA;&#x80FD;&#x6839;&#x636E;Key&#x6765;&#x7D22;&#x5F15;</span><br><span class="line">a[1]</span><br><span class="line"></span><br><span class="line"># obj.get(key, value) &#x82E5;key&#x5728;&#x5173;&#x952E;&#x5B57;&#x4E2D;&#xFF0C;&#x5219;&#x8FD4;&#x56DE;&#x5176;&#x503C;&#xFF0C;&#x5426;&#x5219;&#x8FD4;&#x56DE;value&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;None</span><br><span class="line">a.get(1)</span><br><span class="line"></span><br><span class="line"># obj.setdefault(key, value) &#x82E5;key&#x5728;&#x5173;&#x952E;&#x5B57;&#x4E2D;&#xFF0C;&#x5219;&#x8FD4;&#x56DE;&#x5176;&#x503C;&#xFF0C;&#x5426;&#x5219;&#x7ED9;&#x5B57;&#x5178;&#x6DFB;&#x52A0;(key, value)value&#x9ED8;&#x8BA4;&#x4E3A;None</span><br><span class="line">a.setdefault(4, &apos;four&apos;)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python51.png" alt="51"></p><h2 id="Python&#x83B7;&#x5F97;&#x6240;&#x6709;&#x7684;&#x952E;&#xFF0C;&#x503C;&#x4FE1;&#x606F;"><a href="#Python&#x83B7;&#x5F97;&#x6240;&#x6709;&#x7684;&#x952E;&#xFF0C;&#x503C;&#x4FE1;&#x606F;" class="headerlink" title="Python&#x83B7;&#x5F97;&#x6240;&#x6709;&#x7684;&#x952E;&#xFF0C;&#x503C;&#x4FE1;&#x606F;"></a><font size="4">Python&#x83B7;&#x5F97;&#x6240;&#x6709;&#x7684;&#x952E;&#xFF0C;&#x503C;&#x4FE1;&#x606F;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = {1:&apos;one&apos;, 2:2, 3:True}</span><br><span class="line"></span><br><span class="line"># obj.keys() &#x83B7;&#x53D6;&#x5B57;&#x5178;&#x7684;&#x6240;&#x6709;&#x952E;</span><br><span class="line">a.keys()</span><br><span class="line"></span><br><span class="line"># obj.values() &#x83B7;&#x53D6;&#x5B57;&#x5178;&#x7684;&#x6240;&#x6709;&#x503C;</span><br><span class="line">a.values()</span><br><span class="line"></span><br><span class="line"># obj.items() &#x83B7;&#x53D6;&#x5B57;&#x5178;&#x7684;&#x6240;&#x6709;&#x952E;&#x503C;&#x5BF9;</span><br><span class="line">a.items()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python52.png" alt="52"></p><h2 id="Python&#x589E;&#x52A0;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x4FEE;&#x6539;&#x5B57;&#x5178;&#x5143;&#x7D20;"><a href="#Python&#x589E;&#x52A0;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x4FEE;&#x6539;&#x5B57;&#x5178;&#x5143;&#x7D20;" class="headerlink" title="Python&#x589E;&#x52A0;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x4FEE;&#x6539;&#x5B57;&#x5178;&#x5143;&#x7D20;"></a><font size="4">Python&#x589E;&#x52A0;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x4FEE;&#x6539;&#x5B57;&#x5178;&#x5143;&#x7D20;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = {1:&apos;one&apos;, 2:2, 3:True}</span><br><span class="line"></span><br><span class="line"># obj[key] = value &#x5C06;&#x5B57;&#x5178;&#x7684;key&#x5BF9;&#x5E94;&#x7684;&#x503C;&#x6539;&#x4E3A;value&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x5B58;&#x5728;&#x5219;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x952E;&#x503C;&#x5BF9;(key, value)</span><br><span class="line">a[3] = False</span><br><span class="line">a[4] = &apos;FOUR&apos;</span><br><span class="line"></span><br><span class="line"># del obj[key] &#x5C06;&#x5B57;&#x5178;&#x4E2D;&#x7684;key&#x5BF9;&#x5E94;&#x7684;&#x952E;&#x503C;&#x5BF9;&#x5220;&#x9664;</span><br><span class="line">del a[4]</span><br><span class="line"></span><br><span class="line"># obj.pop(key) &#x5F39;&#x51FA;&#x5173;&#x952E;&#x5B57;&#x4F4D;key&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x5176;Value</span><br><span class="line">a.pop(1)</span><br><span class="line"></span><br><span class="line"># obj.popitem() &#x5F39;&#x51FA;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x5176;&#x952E;&#x503C;&#x5BF9;</span><br><span class="line">a.popitem()</span><br><span class="line"></span><br><span class="line"># obj.clear() &#x5220;&#x9664;&#x6240;&#x6709;&#x5143;&#x7D20;</span><br><span class="line">a.clear()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python53.png" alt="53"></p><h2 id="Python&#x5B57;&#x5178;&#x5408;&#x5E76;"><a href="#Python&#x5B57;&#x5178;&#x5408;&#x5E76;" class="headerlink" title="Python&#x5B57;&#x5178;&#x5408;&#x5E76;"></a><font size="4">Python&#x5B57;&#x5178;&#x5408;&#x5E76;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = {1:&apos;one&apos;, 2:2, 3:True}</span><br><span class="line">b = {1:&apos;ONE&apos;, 4:4, 5:False}</span><br><span class="line"></span><br><span class="line"># obj.update(obj1) &#x7ED9;&#x5B57;&#x5178;obj&#x6DFB;&#x52A0;&#x53E6;&#x4E00;&#x4E2A;&#x5B57;&#x5178;obj1&#xFF0C;&#x4E24;&#x4E2A;&#x5B57;&#x5178;&#x53D6;&#x5E76;&#x96C6;&#xFF0C;&#x5982;&#x679C;&#x5177;&#x6709;&#x76F8;&#x540C;&#x7684;Key&#x5219;&#x503C;&#x4E3A;obj1&#x4E2D;key&#x5BF9;&#x5E94;&#x7684;&#x503C;</span><br><span class="line">a.update(b)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python54.png" alt="54"></p><h2 id="Python&#x5224;&#x65AD;&#x5173;&#x952E;&#x5B57;&#x662F;&#x5426;&#x5728;&#x5B57;&#x5178;&#x4E2D;"><a href="#Python&#x5224;&#x65AD;&#x5173;&#x952E;&#x5B57;&#x662F;&#x5426;&#x5728;&#x5B57;&#x5178;&#x4E2D;" class="headerlink" title="Python&#x5224;&#x65AD;&#x5173;&#x952E;&#x5B57;&#x662F;&#x5426;&#x5728;&#x5B57;&#x5178;&#x4E2D;"></a><font size="4">Python&#x5224;&#x65AD;&#x5173;&#x952E;&#x5B57;&#x662F;&#x5426;&#x5728;&#x5B57;&#x5178;&#x4E2D;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = {1:&apos;one&apos;, 2:2, 3:True}</span><br><span class="line"></span><br><span class="line"># key in obj&#xFF0C;&#x5224;&#x65AD;key&#x662F;&#x5426;&#x5728;obj&#x7684;&#x5173;&#x952E;&#x5B57;&#x4E2D;&#xFF0C;key not in obj&#xFF0C;&#x5224;&#x65AD;key&#x662F;&#x5426;&#x4E0D;&#x5728;obj&#x7684;&#x5173;&#x952E;&#x5B57;&#x4E2D;</span><br><span class="line">b = 2 in a</span><br><span class="line">c = 4 not in a</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python55.png" alt="55"></p><h1 id="Dict&#x5C0F;&#x7ED3;"><a href="#Dict&#x5C0F;&#x7ED3;" class="headerlink" title="Dict&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Dict&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;Dict&#x5B57;&#x5178;&#x662F;Python&#x4E2D;&#x4E00;&#x79CD;&#x91CD;&#x8981;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x5728;&#x5927;&#x6570;&#x636E;&#x7684;&#x5B58;&#x50A8;&#x6216;&#x8005;&#x7EDF;&#x8BA1;&#x5404;&#x5206;&#x6570;&#x6BB5;&#x4EBA;&#x6570;&#x65F6;&#xFF0C;&#x6709;&#x65F6;&#x4E3A;&#x4E86;&#x4FBF;&#x4E8E;&#x67E5;&#x8BE2;&#xFF0C;&#x9700;&#x8981;&#x5EFA;&#x7ACB;&#x5B57;&#x5178;&#xFF0C;&#x7D22;&#x5F15;&#x65F6;&#x53EA;&#x9700;&#x8981;&#x5173;&#x952E;&#x5B57;Key&#xFF0C;&#x53EF;&#x4EE5;&#x8282;&#x7701;&#x5927;&#x91CF;&#x7684;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#x548C;&#x7528;&#x6237;&#x67E5;&#x8BE2;&#x65F6;&#x95F4;&#xFF0C;&#x56E0;&#x6B64;&#x4F7F;&#x7528;&#x7684;&#x9891;&#x7387;&#x975E;&#x5E38;&#x9AD8;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x7075;&#x6D3B;&#x638C;&#x63E1;Dict&#x7684;&#x5E94;&#x7528;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Dict(字典)&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="python" scheme="https://USTCcoder.github.io/categories/python/"/>
    
      <category term="语言学习" scheme="https://USTCcoder.github.io/categories/python/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Str(字符串)</title>
    <link href="https://USTCcoder.github.io/2019/09/13/python_str/"/>
    <id>https://USTCcoder.github.io/2019/09/13/python_str/</id>
    <published>2019-09-13T02:44:24.000Z</published>
    <updated>2019-09-27T02:22:16.956Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/LANGUAGE/python7.jpg" alt="7"></p><h1 id="Str&#x4ECB;&#x7ECD;"><a href="#Str&#x4ECB;&#x7ECD;" class="headerlink" title="Str&#x4ECB;&#x7ECD;"></a><font size="5" color="red">Str&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;Python&#x4E2D;&#x7684;Str&#x662F;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;C/C++&#x4E2D;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x4F46;&#x662F;&#x66F4;&#x52A0;&#x7075;&#x6D3B;&#xFF0C;&#x5177;&#x6709;&#x5F88;&#x591A;&#x5185;&#x7F6E;&#x7684;API&#x3002;<br><a id="more"></a></p><h1 id="Str&#x64CD;&#x4F5C;"><a href="#Str&#x64CD;&#x4F5C;" class="headerlink" title="Str&#x64CD;&#x4F5C;"></a><font size="5" color="red">Str&#x64CD;&#x4F5C;</font></h1><h2 id="Python&#x521B;&#x5EFA;&#x5B57;&#x7B26;&#x4E32;"><a href="#Python&#x521B;&#x5EFA;&#x5B57;&#x7B26;&#x4E32;" class="headerlink" title="Python&#x521B;&#x5EFA;&#x5B57;&#x7B26;&#x4E32;"></a><font size="4">Python&#x521B;&#x5EFA;&#x5B57;&#x7B26;&#x4E32;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># str(obj) &#x5C06;obj&#x8F6C;&#x6362;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x4E00;&#x822C;&#x7528;&#x6765;&#x5C06;&#x6570;&#x5B57;&#x8F6C;&#x6362;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;</span><br><span class="line">a = str(123)</span><br><span class="line"></span><br><span class="line"># &apos;abc...&apos;&#x6216;&#x8005;&quot;abc...&quot; &#x521B;&#x5EFA;&#x503C;&#x4E3A;abc...&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x5982;&#x679C;&#x5B57;&#x7B26;&#x4E32;&#x672C;&#x8EAB;&#x5177;&#x6709;&#x5355;&#x5F15;&#x53F7;&#x5219;&#x521B;&#x5EFA;&#x65F6;&#x8981;&#x7528;&#x53CC;&#x5F15;&#x53F7;&#xFF0C;&#x5982;&#x679C;&#x5B57;&#x7B26;&#x4E32;&#x672C;&#x8EAB;&#x5177;&#x6709;&#x53CC;&#x5F15;&#x53F7;&#xFF0C;&#x5219;&#x521B;&#x5EFA;&#x65F6;&#x8981;&#x7528;&#x5355;&#x5F15;&#x53F7;</span><br><span class="line">b = &apos;Hello Python&apos;</span><br><span class="line">c = &quot;Hello World&quot;</span><br><span class="line">d = &apos;I love &quot;Python&quot;&apos;</span><br><span class="line">e = &quot;I love &apos;coding&apos;&quot;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python30.png" alt="30"></p><h2 id="Python&#x7D22;&#x5F15;&#x5B57;&#x7B26;&#x4E32;&#x5143;&#x7D20;"><a href="#Python&#x7D22;&#x5F15;&#x5B57;&#x7B26;&#x4E32;&#x5143;&#x7D20;" class="headerlink" title="Python&#x7D22;&#x5F15;&#x5B57;&#x7B26;&#x4E32;&#x5143;&#x7D20;"></a><font size="4">Python&#x7D22;&#x5F15;&#x5B57;&#x7B26;&#x4E32;&#x5143;&#x7D20;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># &#x548C;C/C++&#x76F8;&#x540C;&#xFF0C;&#x901A;&#x8FC7;&#x4E2D;&#x62EC;&#x53F7;[]&#x7D22;&#x5F15;&#x5B57;&#x7B26;&#x4E32;&#x5143;&#x7D20;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;:&#x8FD0;&#x7B97;&#x7B26;&#x83B7;&#x53D6;&#x8FDE;&#x7EED;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x8D1F;&#x6570;&#x7D22;&#x5F15;&#x4E3A;&#x4ECE;&#x540E;&#x5411;&#x524D;&#x7D22;&#x5F15;&#xFF0C;-1&#x4EE3;&#x8868;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;-2&#x4EE3;&#x8868;&#x5012;&#x6570;&#x7B2C;&#x4E8C;&#x4E2A;&#x5143;&#x7D20;</span><br><span class="line">a = &apos;Hello Python&apos;</span><br><span class="line">b = a[:2]</span><br><span class="line">c = a[4]</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python31.png" alt="31"></p><h2 id="Python&#x5411;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x589E;&#x52A0;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x4FEE;&#x6539;&#x5143;&#x7D20;"><a href="#Python&#x5411;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x589E;&#x52A0;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x4FEE;&#x6539;&#x5143;&#x7D20;" class="headerlink" title="Python&#x5411;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x589E;&#x52A0;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x4FEE;&#x6539;&#x5143;&#x7D20;"></a><font size="4">Python&#x5411;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x589E;&#x52A0;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x4FEE;&#x6539;&#x5143;&#x7D20;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Python&#x4E2D;&#x5B57;&#x7B26;&#x4E32;&#x6CA1;&#x6709;append&#xFF0C;pop&#x7B49;API&#xFF0C;&#x5982;&#x679C;&#x60F3;&#x4FEE;&#x6539;&#x5143;&#x7D20;&#x5FC5;&#x987B;&#x91C7;&#x7528;&#x7B97;&#x672F;&#x8FD0;&#x7B97;&#x4FEE;&#x6539;&#x5143;&#x7D20;</span><br><span class="line">a = &apos;Hello pythan&apos;</span><br><span class="line">a = a[:-2] + &apos;o&apos; + a[-1]</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python32.png" alt="32"></p><h2 id="Python&#x5B57;&#x7B26;&#x4E32;&#x5927;&#x5C0F;&#x5199;&#x8F6C;&#x6362;"><a href="#Python&#x5B57;&#x7B26;&#x4E32;&#x5927;&#x5C0F;&#x5199;&#x8F6C;&#x6362;" class="headerlink" title="Python&#x5B57;&#x7B26;&#x4E32;&#x5927;&#x5C0F;&#x5199;&#x8F6C;&#x6362;"></a><font size="4">Python&#x5B57;&#x7B26;&#x4E32;&#x5927;&#x5C0F;&#x5199;&#x8F6C;&#x6362;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;heLLo pythOn&apos;</span><br><span class="line"></span><br><span class="line"># obj.capitalize() &#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x6539;&#x4E3A;&#x5927;&#x5199;&#xFF0C;&#x5176;&#x4ED6;&#x5B57;&#x7B26;&#x6539;&#x4E3A;&#x5C0F;&#x5199;&#x5E76;&#x8FD4;&#x56DE;</span><br><span class="line">b = a.capitalize()</span><br><span class="line"></span><br><span class="line"># obj.title() &#x5C06;&#x6BCF;&#x4E2A;&#x5355;&#x8BCD;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x6539;&#x4E3A;&#x5927;&#x5199;&#xFF0C;&#x5176;&#x4ED6;&#x5B57;&#x7B26;&#x6539;&#x4E3A;&#x5C0F;&#x5199;&#x5E76;&#x8FD4;&#x56DE;</span><br><span class="line">c = a.title()</span><br><span class="line"></span><br><span class="line"># obj.lower() &#x5C06;&#x5927;&#x5199;&#x8F6C;&#x6362;&#x4E3A;&#x5C0F;&#x5199;</span><br><span class="line">d =a.lower()</span><br><span class="line"></span><br><span class="line"># obj.upper() &#x5C06;&#x5C0F;&#x5199;&#x8F6C;&#x6362;&#x4E3A;&#x5927;&#x5199;</span><br><span class="line">e = a.upper()</span><br><span class="line"></span><br><span class="line"># obj.swapcase() &#x5C06;&#x5927;&#x5C0F;&#x5199;&#x5B57;&#x7B26;&#x7FFB;&#x8F6C;&#xFF0C;&#x5927;&#x5199;&#x53D8;&#x5C0F;&#x5199;&#xFF0C;&#x5C0F;&#x5199;&#x53D8;&#x5927;&#x5199;</span><br><span class="line">f = a.swapcase()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python33.png" alt="33"></p><h2 id="Python&#x5B57;&#x7B26;&#x4E32;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;"><a href="#Python&#x5B57;&#x7B26;&#x4E32;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;" class="headerlink" title="Python&#x5B57;&#x7B26;&#x4E32;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;"></a><font size="4">Python&#x5B57;&#x7B26;&#x4E32;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># obj1 op obj2 &#x5C06;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x8FDB;&#x884C;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;&#xFF0C;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5F00;&#x59CB;&#x6BD4;&#x8F83;&#xFF0C;&#x5982;&#x679C;&#x76F8;&#x540C;&#x7EE7;&#x7EED;&#x6BD4;&#x8F83;</span><br><span class="line">a = &apos;hello world&apos;</span><br><span class="line">b = &apos;hello python&apos;</span><br><span class="line">a &gt; b</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python34.png" alt="34"></p><h2 id="Python&#x5B57;&#x7B26;&#x4E32;&#x4E58;&#x6CD5;"><a href="#Python&#x5B57;&#x7B26;&#x4E32;&#x4E58;&#x6CD5;" class="headerlink" title="Python&#x5B57;&#x7B26;&#x4E32;&#x4E58;&#x6CD5;"></a><font size="4">Python&#x5B57;&#x7B26;&#x4E32;&#x4E58;&#x6CD5;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># obj * n&#xFF0C;n&#x4E3A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x5C06;obj&#x590D;&#x5236;n&#x6B21;</span><br><span class="line">a = &apos;hello world &apos;</span><br><span class="line">b = a * 3</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python35.png" alt="35"></p><h2 id="Python&#x5224;&#x65AD;&#x5143;&#x7D20;&#x662F;&#x5426;&#x5728;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;"><a href="#Python&#x5224;&#x65AD;&#x5143;&#x7D20;&#x662F;&#x5426;&#x5728;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;" class="headerlink" title="Python&#x5224;&#x65AD;&#x5143;&#x7D20;&#x662F;&#x5426;&#x5728;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;"></a><font size="4">Python&#x5224;&#x65AD;&#x5143;&#x7D20;&#x662F;&#x5426;&#x5728;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># data in obj&#xFF0C;&#x5224;&#x65AD;data&#x662F;&#x5426;&#x5728;obj&#x4E2D;&#xFF0C;data not in obj&#xFF0C;&#x5224;&#x65AD;data&#x662F;&#x5426;&#x4E0D;&#x5728;obj&#x4E2D;</span><br><span class="line">a = &apos;hello world&apos;</span><br><span class="line">b = &apos;he&apos; in a</span><br><span class="line">c = &apos;she&apos; not in a</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python36.png" alt="36"></p><h2 id="Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;"><a href="#Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;" class="headerlink" title="Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;"></a><font size="4">Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># obj.count(data) &#x6C42;data&#x5728;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;</span><br><span class="line">a = &apos;hello world&apos;</span><br><span class="line">a.count(&apos;l&apos;)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python37.png" alt="37"></p><h2 id="Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;"><a href="#Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;" class="headerlink" title="Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;"></a><font size="4">Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># obj.index(data, begin, end) &#x4ECE;begin&#x5230;end-1&#x4E2D;&#x7D22;&#x5F15;&#x7B2C;&#x4E00;&#x6B21;&#x51FA;&#x73B0;data&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x9ED8;&#x8BA4;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;</span><br><span class="line">a = &apos;hello world&apos;</span><br><span class="line">a.index(&apos;l&apos;)</span><br><span class="line">a.index(&apos;l&apos;, 4)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python38.png" alt="38"></p><h2 id="Python&#x5B57;&#x7B26;&#x4E32;&#x4E0E;&#x5217;&#x8868;&#x6216;&#x5143;&#x7EC4;&#x7684;&#x8F6C;&#x6362;"><a href="#Python&#x5B57;&#x7B26;&#x4E32;&#x4E0E;&#x5217;&#x8868;&#x6216;&#x5143;&#x7EC4;&#x7684;&#x8F6C;&#x6362;" class="headerlink" title="Python&#x5B57;&#x7B26;&#x4E32;&#x4E0E;&#x5217;&#x8868;&#x6216;&#x5143;&#x7EC4;&#x7684;&#x8F6C;&#x6362;"></a><font size="4">Python&#x5B57;&#x7B26;&#x4E32;&#x4E0E;&#x5217;&#x8868;&#x6216;&#x5143;&#x7EC4;&#x7684;&#x8F6C;&#x6362;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;string&apos;</span><br><span class="line">b = [&apos;L&apos;, &apos;i&apos;, &apos;s&apos;, &apos;t&apos;]</span><br><span class="line">c = (&apos;T&apos;, &apos;u&apos;, &apos;p&apos;, &apos;l&apos;, &apos;e&apos;)</span><br><span class="line"></span><br><span class="line"># list(obj)&#x6216;&#x8005;tuple(obj) &#x5B57;&#x7B26;&#x4E32;&#x8F6C;&#x6362;&#x6210;&#x5217;&#x8868;&#x6216;&#x8005;&#x5143;&#x7EC4;&#xFF0C;&#x8F6C;&#x6362;&#x540E;&#x5217;&#x8868;&#x6216;&#x8005;&#x5143;&#x7EC4;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x4E3A;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;</span><br><span class="line">d = list(a)</span><br><span class="line">e = tuple(a)</span><br><span class="line"></span><br><span class="line"># &apos;&apos;.join(obj) &#x5C06;obj&#x8F6C;&#x6362;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;</span><br><span class="line">f = &apos;&apos;.join(b)</span><br><span class="line">g = &apos;&apos;.join(c)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python39.png" alt="39"></p><h2 id="Python&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x7FFB;&#x8F6C;"><a href="#Python&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x7FFB;&#x8F6C;" class="headerlink" title="Python&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x7FFB;&#x8F6C;"></a><font size="4">Python&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x7FFB;&#x8F6C;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;hello python&apos;</span><br><span class="line"></span><br><span class="line"># &#x901A;&#x8FC7;&#x7D22;&#x5F15;&#x7FFB;&#x8F6C;[::-1]</span><br><span class="line">a[::-1]</span><br><span class="line"></span><br><span class="line"># Python&#x4E0D;&#x5141;&#x8BB8;&#x5B57;&#x7B26;&#x4E32;&#x8FDB;&#x884C;&#x7FFB;&#x8F6C;&#xFF0C;&#x4F46;&#x662F;&#x53EF;&#x4EE5;&#x501F;&#x52A9;&#x5217;&#x8868;&#x8FDB;&#x884C;&#x7FFB;&#x8F6C;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8F6C;&#x6362;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#x5373;&#x53EF;</span><br><span class="line">a = list(a)</span><br><span class="line">a.reverse()</span><br><span class="line">a = &apos;&apos;.join(a)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python40.png" alt="40"></p><h2 id="Python&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x6392;&#x5E8F;"><a href="#Python&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x6392;&#x5E8F;" class="headerlink" title="Python&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x6392;&#x5E8F;"></a><font size="4">Python&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x6392;&#x5E8F;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;abcabbc&apos;</span><br><span class="line"></span><br><span class="line"># Python&#x4E0D;&#x5141;&#x8BB8;&#x5B57;&#x7B26;&#x4E32;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x4F46;&#x662F;&#x53EF;&#x4EE5;&#x501F;&#x52A9;&#x5217;&#x8868;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8F6C;&#x6362;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#x5373;&#x53EF;</span><br><span class="line">a = list(a)</span><br><span class="line">a.sort()</span><br><span class="line">a = &apos;&apos;.join(a)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python41.png" alt="41"></p><h2 id="Python&#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x7C7B;&#x578B;"><a href="#Python&#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x7C7B;&#x578B;" class="headerlink" title="Python&#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x7C7B;&#x578B;"></a><font size="4">Python&#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x7C7B;&#x578B;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;1a2b3c&apos;</span><br><span class="line">b = &apos;abcdef&apos;</span><br><span class="line">c = &apos;123456&apos;</span><br><span class="line"></span><br><span class="line"># obj.isalnum() &#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x5168;&#x662F;&#x5B57;&#x6BCD;&#x6216;&#x6570;&#x5B57;</span><br><span class="line">a.isalnum()</span><br><span class="line"></span><br><span class="line"># obj.isalpha() &#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x5168;&#x662F;&#x5B57;&#x7B26;</span><br><span class="line">b.isalpha()</span><br><span class="line"></span><br><span class="line"># obj.isdigit() &#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x5168;&#x662F;&#x6570;&#x5B57;</span><br><span class="line">c.isdigit()</span><br><span class="line"></span><br><span class="line"># obj.islower() &#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x5168;&#x662F;&#x5C0F;&#x5199;&#x5B57;&#x6BCD;</span><br><span class="line">b.islower()</span><br><span class="line"></span><br><span class="line"># obj.isupper() &#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x5168;&#x662F;&#x5927;&#x5199;&#x5B57;&#x6BCD;</span><br><span class="line">b.isupper()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python42.png" alt="42"></p><h2 id="Python&#x5B57;&#x7B26;&#x4E32;&#x5C45;&#x4E2D;"><a href="#Python&#x5B57;&#x7B26;&#x4E32;&#x5C45;&#x4E2D;" class="headerlink" title="Python&#x5B57;&#x7B26;&#x4E32;&#x5C45;&#x4E2D;"></a><font size="4">Python&#x5B57;&#x7B26;&#x4E32;&#x5C45;&#x4E2D;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;----------&apos;</span><br><span class="line"></span><br><span class="line"># obj.center(width, fillchar) &#x5B57;&#x7B26;&#x4E32;&#x5C45;&#x4E2D;&#xFF0C;&#x603B;&#x957F;&#x5EA6;&#x4E3A;width&#xFF0C;&#x4E24;&#x8FB9;&#x586B;&#x5145;&#x7684;&#x5B57;&#x7B26;&#x4E3A;fillchar&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x7A7A;&#x683C;</span><br><span class="line">a.center(20)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python43.png" alt="43"></p><h2 id="Python&#x67E5;&#x627E;&#x5B50;&#x4E32;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;"><a href="#Python&#x67E5;&#x627E;&#x5B50;&#x4E32;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;" class="headerlink" title="Python&#x67E5;&#x627E;&#x5B50;&#x4E32;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;"></a><font size="4">Python&#x67E5;&#x627E;&#x5B50;&#x4E32;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;abcabbc&apos;</span><br><span class="line"></span><br><span class="line"># obj.count(str, begin, end) &#x67E5;&#x627E;&#x5B50;&#x4E32;str&#x4ECE;begin&#x5230;end-1&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x9ED8;&#x8BA4;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;</span><br><span class="line">a.count(&apos;ab&apos;)</span><br><span class="line">a.count(&apos;ab&apos;, 1)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python44.png" alt="44"></p><h2 id="Python&#x67E5;&#x8BE2;&#x5B57;&#x7B26;&#x4E32;&#x5F00;&#x5934;&#x6216;&#x8005;&#x7ED3;&#x5C3E;&#x662F;&#x5426;&#x4E3A;&#x67D0;&#x4E00;&#x5B50;&#x4E32;"><a href="#Python&#x67E5;&#x8BE2;&#x5B57;&#x7B26;&#x4E32;&#x5F00;&#x5934;&#x6216;&#x8005;&#x7ED3;&#x5C3E;&#x662F;&#x5426;&#x4E3A;&#x67D0;&#x4E00;&#x5B50;&#x4E32;" class="headerlink" title="Python&#x67E5;&#x8BE2;&#x5B57;&#x7B26;&#x4E32;&#x5F00;&#x5934;&#x6216;&#x8005;&#x7ED3;&#x5C3E;&#x662F;&#x5426;&#x4E3A;&#x67D0;&#x4E00;&#x5B50;&#x4E32;"></a><font size="4">Python&#x67E5;&#x8BE2;&#x5B57;&#x7B26;&#x4E32;&#x5F00;&#x5934;&#x6216;&#x8005;&#x7ED3;&#x5C3E;&#x662F;&#x5426;&#x4E3A;&#x67D0;&#x4E00;&#x5B50;&#x4E32;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;abcabbc&apos;</span><br><span class="line"></span><br><span class="line"># obj.startswith(str, begin, end) &#x5224;&#x65AD;obj&#x4ECE;begin&#x5230;end-1&#x662F;&#x5426;&#x4EE5;str&#x5F00;&#x5934;</span><br><span class="line">a.startswith(&apos;abc&apos;)</span><br><span class="line"></span><br><span class="line"># obj.endswith(str, begin, end) &#x5224;&#x65AD;obj&#x4ECE;begin&#x5230;end-1&#x662F;&#x5426;&#x4EE5;str&#x7ED3;&#x5C3E;</span><br><span class="line">a.endswith(&apos;bc&apos;)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python45.png" alt="45"></p><h2 id="Python&#x6C42;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x5B50;&#x4E32;&#x7684;&#x7D22;&#x5F15;"><a href="#Python&#x6C42;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x5B50;&#x4E32;&#x7684;&#x7D22;&#x5F15;" class="headerlink" title="Python&#x6C42;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x5B50;&#x4E32;&#x7684;&#x7D22;&#x5F15;"></a><font size="4">Python&#x6C42;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x5B50;&#x4E32;&#x7684;&#x7D22;&#x5F15;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;abcabbc&apos;</span><br><span class="line"></span><br><span class="line"># obj.find(str, begin, end) &#x4ECE;&#x5DE6;&#x8FB9;&#x67E5;&#x627E;&#x5B50;&#x4E32;str&#x4ECE;begin&#x5230;end-1&#x51FA;&#x73B0;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x9ED8;&#x8BA4;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;</span><br><span class="line">a.find(&apos;abb&apos;)</span><br><span class="line">a.find(&apos;abbds&apos;)</span><br><span class="line"></span><br><span class="line"># obj.rfind(str, begin, end) &#x4ECE;&#x53F3;&#x8FB9;&#x67E5;&#x627E;&#x5B50;&#x4E32;str&#x4ECE;begin&#x5230;end-1&#x51FA;&#x73B0;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x9ED8;&#x8BA4;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;</span><br><span class="line">a.rfind(&apos;abb&apos;)</span><br><span class="line">a.rfind(&apos;abbds&apos;)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python46.png" alt="46"></p><h2 id="Python&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x5DE6;&#x8FB9;&#x6216;&#x53F3;&#x8FB9;&#x7684;&#x5B57;&#x7B26;&#x5220;&#x53BB;"><a href="#Python&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x5DE6;&#x8FB9;&#x6216;&#x53F3;&#x8FB9;&#x7684;&#x5B57;&#x7B26;&#x5220;&#x53BB;" class="headerlink" title="Python&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x5DE6;&#x8FB9;&#x6216;&#x53F3;&#x8FB9;&#x7684;&#x5B57;&#x7B26;&#x5220;&#x53BB;"></a><font size="4">Python&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x5DE6;&#x8FB9;&#x6216;&#x53F3;&#x8FB9;&#x7684;&#x5B57;&#x7B26;&#x5220;&#x53BB;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;abcabba&apos;</span><br><span class="line"></span><br><span class="line"># obj.lstrip(str) &#x5C06;&#x5DE6;&#x8FB9;&#x7684;str&#x5B57;&#x7B26;&#x5220;&#x53BB;&#xFF0C;&#x5982;&#x679C;str&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#x5219;&#x4EE3;&#x8868;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x5B57;&#x7B26;&#x90FD;&#x5220;&#x53BB;</span><br><span class="line">a.lstrip(&apos;a&apos;)</span><br><span class="line"></span><br><span class="line"># obj.rstrip(str) &#x5C06;&#x53F3;&#x8FB9;&#x7684;str&#x5B57;&#x7B26;&#x5220;&#x53BB;&#xFF0C;&#x5982;&#x679C;str&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#x5219;&#x4EE3;&#x8868;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x5B57;&#x7B26;&#x90FD;&#x5220;&#x53BB;</span><br><span class="line">a.rstrip(&apos;a&apos;)</span><br><span class="line"></span><br><span class="line"># obj.strip(str) &#x5C06;&#x5DE6;&#x8FB9;&#x548C;&#x53F3;&#x8FB9;&#x7684;str&#x5B57;&#x7B26;&#x5220;&#x53BB;&#xFF0C;&#x5982;&#x679C;str&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#x5219;&#x4EE3;&#x8868;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x5B57;&#x7B26;&#x90FD;&#x5220;&#x53BB;</span><br><span class="line">a.strip(&apos;a&apos;)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python47.png" alt="47"></p><h2 id="Python&#x66FF;&#x6362;&#x5B57;&#x7B26;&#x4E32;"><a href="#Python&#x66FF;&#x6362;&#x5B57;&#x7B26;&#x4E32;" class="headerlink" title="Python&#x66FF;&#x6362;&#x5B57;&#x7B26;&#x4E32;"></a><font size="4">Python&#x66FF;&#x6362;&#x5B57;&#x7B26;&#x4E32;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;abcabbc&apos;</span><br><span class="line"></span><br><span class="line"># obj.replace(old, new) &#x5C06;old&#x5B50;&#x4E32;&#x7528;new&#x66FF;&#x4EE3;</span><br><span class="line">a.replace(&apos;abb&apos;, &apos;cdd&apos;)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python48.png" alt="48"></p><h2 id="Python&#x62C6;&#x5206;&#x5B57;&#x7B26;&#x4E32;"><a href="#Python&#x62C6;&#x5206;&#x5B57;&#x7B26;&#x4E32;" class="headerlink" title="Python&#x62C6;&#x5206;&#x5B57;&#x7B26;&#x4E32;"></a><font size="4">Python&#x62C6;&#x5206;&#x5B57;&#x7B26;&#x4E32;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;abcabbc&apos;</span><br><span class="line"></span><br><span class="line"># obj.partition(str) &#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x62C6;&#x5206;&#x4E3A;3&#x90E8;&#x5206;&#xFF0C;str&#x4E4B;&#x524D;&#x7684;&#x90E8;&#x5206;&#xFF0C;str&#xFF0C;str&#x4E4B;&#x540E;&#x7684;&#x90E8;&#x5206;</span><br><span class="line"></span><br><span class="line"># obj.split(str) &#x5C06;obj&#x6309;&#x7167;str&#x62C6;&#x5206;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x7A7A;&#x683C;&#x62C6;&#x5206;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python49.png" alt="49"></p><h2 id="Python&#x5B57;&#x7B26;&#x4E32;&#x683C;&#x5F0F;&#x5316;"><a href="#Python&#x5B57;&#x7B26;&#x4E32;&#x683C;&#x5F0F;&#x5316;" class="headerlink" title="Python&#x5B57;&#x7B26;&#x4E32;&#x683C;&#x5F0F;&#x5316;"></a><font size="4">Python&#x5B57;&#x7B26;&#x4E32;&#x683C;&#x5F0F;&#x5316;</font></h2><p>$$ \begin{array}{|c|c|} &#x683C;&#x5F0F; &amp; &#x63CF;&#x8FF0; \  \%c &amp; &#x4EE5;ASCII&#x7801;&#x683C;&#x5F0F;&#x5316;&#x5B57;&#x7B26; \ \%s &amp; &#x683C;&#x5F0F;&#x5316;&#x5B57;&#x7B26;&#x4E32; \ \%d &amp; &#x683C;&#x5F0F;&#x5316;&#x6574;&#x6570; \ \%m.nf &amp; &#x683C;&#x5F0F;&#x5316;&#x6D6E;&#x70B9;&#x6570;&#xFF0C;m&#x6307;&#x603B;&#x957F;&#x5EA6;&#xFF0C;n&#x6307;&#x5C0F;&#x6570;&#x70B9;&#x540E;&#x9762;&#x7684;&#x7CBE;&#x5EA6;&#xFF0C;&#x4E0D;&#x591F;&#x5728;&#x5DE6;&#x4FA7;&#x8865;&#x7A7A;&#x683C; \ \%-m.nf &amp; &#x683C;&#x5F0F;&#x5316;&#x6D6E;&#x70B9;&#x6570;&#xFF0C;m&#x6307;&#x603B;&#x957F;&#x5EA6;&#xFF0C;n&#x6307;&#x5C0F;&#x6570;&#x70B9;&#x540E;&#x9762;&#x7684;&#x7CBE;&#x5EA6;&#xFF0C;&#x4E0D;&#x591F;&#x5728;&#x53F3;&#x4FA7;&#x8865;&#x7A7A;&#x683C; \ \end{array} $$<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># &apos;{}...{}...&apos;.format(&apos;xxx&apos;, &apos;yyy&apos;, ...) &#x5C06;xxx&#xFF0C;yyy&#x586B;&#x5165;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x82B1;&#x62EC;&#x53F7;&#x4E2D;</span><br><span class="line">s1 = &apos;{}&#x7684;&#x7F51;&#x5740;&#x662F;&quot;{}&quot;&apos;.format(&apos;&#x963F;&#x91CC;&#x5DF4;&#x5DF4;&apos;, &apos;www.alibabagroup.com&apos;)</span><br><span class="line">s2 = &apos;{0}&#x7684;&#x7F51;&#x5740;&#x662F;&quot;{1}&quot;&apos;.format(&apos;&#x817E;&#x8BAF;&apos;, &apos;www.tencent.com&apos;)</span><br><span class="line">s3 = &apos;{name}&#x7684;&#x7F51;&#x5740;&#x662F;&quot;{site}&quot;&apos;.format(name=&apos;&#x767E;&#x5EA6;&apos;, site=&apos;www.baidu.com&apos;)</span><br><span class="line"></span><br><span class="line"># &apos;{0:x}...{1:y}...&apos;.format(&apos;xxx&apos;, &apos;yyy&apos;, ...) &#x5C06;xxx&#xFF0C;yyy&#x586B;&#x5165;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x82B1;&#x62EC;&#x53F7;&#x4E2D;&#xFF0C;x&#x548C;y&#x6307;&#x8F93;&#x5165;&#x7684;&#x683C;&#x5F0F;&#xFF0C;&#x53EF;&#x4EE5;&#x8FBE;&#x5230;&#x7F8E;&#x5316;&#x6548;&#x679C;</span><br><span class="line">s4 = &apos;{name:10s}==&gt;{id:10d}&apos;.format(name=&apos;&#x5F20;&#x4E09;&apos;, id=1)</span><br><span class="line"></span><br><span class="line"># &apos;&#x683C;&#x5F0F;1, &#x683C;&#x5F0F;2, &#x683C;&#x5F0F;3&apos; %(&#x6570;&#x636E;1, &#x6570;&#x636E;2, &#x6570;&#x636E;3) &#x5C06;&#x6570;&#x636E;1&#x4EE5;&#x683C;&#x5F0F;1&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x6570;&#x636E;2&#x4EE5;&#x683C;&#x5F0F;2&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x6570;&#x636E;3&#x4EE5;&#x683C;&#x5F0F;3&#x7684;&#x65B9;&#x5F0F;&#x653E;&#x5165;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#xFF0C;&#x6CE8;&#x610F;&#x683C;&#x5F0F;&#x4E0E;&#x6570;&#x636E;&#x76F4;&#x63A5;&#x6CA1;&#x6709;&#x9017;&#x53F7;&#x8FDE;&#x63A5;</span><br><span class="line">s5 = &apos;%s&#xFF1A;%d/%d/%d&apos; %(&apos;&#x4ECA;&#x5929;&#x7684;&#x65E5;&#x671F;&#x4E3A;&apos;, 2019, 9, 18)</span><br></pre></td></tr></tbody></table></figure><p></p><p><img src="/images/LANGUAGE/python86.png" alt="86"></p><h1 id="Str&#x5C0F;&#x7ED3;"><a href="#Str&#x5C0F;&#x7ED3;" class="headerlink" title="Str&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Str&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;Str&#x5B57;&#x7B26;&#x4E32;&#x662F;Python&#x4E2D;&#x4E00;&#x79CD;&#x5E38;&#x89C1;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x5728;&#x5B9E;&#x9645;&#x7684;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x7ECF;&#x5E38;&#x6709;&#x8BB8;&#x591A;&#x6570;&#x636E;&#x65E0;&#x6CD5;&#x7528;&#x6570;&#x5B57;&#x8868;&#x793A;&#xFF0C;&#x5982;&#x59D3;&#x540D;&#xFF0C;&#x5730;&#x5740;&#x7B49;&#x4FE1;&#x606F;&#xFF0C;&#x56E0;&#x6B64;&#x4F7F;&#x7528;&#x7684;&#x9891;&#x7387;&#x4E5F;&#x662F;&#x975E;&#x5E38;&#x9AD8;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x7075;&#x6D3B;&#x638C;&#x63E1;Str&#x7684;&#x5E94;&#x7528;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Str(字符串)&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="python" scheme="https://USTCcoder.github.io/categories/python/"/>
    
      <category term="语言学习" scheme="https://USTCcoder.github.io/categories/python/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Tuple(元组)</title>
    <link href="https://USTCcoder.github.io/2019/09/12/python_tuple/"/>
    <id>https://USTCcoder.github.io/2019/09/12/python_tuple/</id>
    <published>2019-09-12T01:46:15.000Z</published>
    <updated>2019-09-19T12:12:06.565Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/LANGUAGE/python6.jpg" alt="5"></p><h1 id="Tuple&#x4ECB;&#x7ECD;"><a href="#Tuple&#x4ECB;&#x7ECD;" class="headerlink" title="Tuple&#x4ECB;&#x7ECD;"></a><font size="5" color="red">Tuple&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;Python&#x4E2D;&#x7684;Tuple&#x7C7B;&#x4F3C;&#x4E8E;&#x4E00;&#x79CD;&#x5E26;&#x4E0A;&#x67B7;&#x9501;&#x7684;&#x5217;&#x8868;&#xFF0C;&#x529F;&#x80FD;&#x548C;List&#x7C7B;&#x4F3C;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x80FD;&#x591F;&#x4FEE;&#x6539;&#x5176;&#x4E2D;&#x7684;&#x5143;&#x7D20;&#x548C;&#x987A;&#x5E8F;&#x3002;<br><a id="more"></a></p><h1 id="Tuple&#x64CD;&#x4F5C;"><a href="#Tuple&#x64CD;&#x4F5C;" class="headerlink" title="Tuple&#x64CD;&#x4F5C;"></a><font size="5" color="red">Tuple&#x64CD;&#x4F5C;</font></h1><h2 id="Python&#x521B;&#x5EFA;&#x5143;&#x7EC4;"><a href="#Python&#x521B;&#x5EFA;&#x5143;&#x7EC4;" class="headerlink" title="Python&#x521B;&#x5EFA;&#x5143;&#x7EC4;"></a><font size="4">Python&#x521B;&#x5EFA;&#x5143;&#x7EC4;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># tuple(iterable) &#x5C06;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#x8F6C;&#x6362;&#x4E3A;tuple&#x7C7B;&#x578B;</span><br><span class="line">a = tuple(range(5))</span><br><span class="line"></span><br><span class="line"># (a, b, c, ...) &#x6216;&#x8005; a, b, c, ...&#x521B;&#x5EFA;&#x5143;&#x7D20;&#x4E3A;a, b, c, ...&#x7684;&#x5143;&#x7EC4;&#xFF0C;&#x521B;&#x5EFA;&#x5355;&#x5143;&#x7D20;&#x5143;&#x7EC4;&#x65F6;&#xFF0C;&#x9700;&#x8981;&#x52A0;&#x9017;&#x53F7;,</span><br><span class="line">b = (1, 3.14, &apos;hello world&apos;, True, [1, 2, 3])</span><br><span class="line">c = 1, 2, 3</span><br><span class="line">d = (2,)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python20.png" alt="20"></p><h2 id="Python&#x7D22;&#x5F15;&#x5143;&#x7EC4;&#x5143;&#x7D20;"><a href="#Python&#x7D22;&#x5F15;&#x5143;&#x7EC4;&#x5143;&#x7D20;" class="headerlink" title="Python&#x7D22;&#x5F15;&#x5143;&#x7EC4;&#x5143;&#x7D20;"></a><font size="4">Python&#x7D22;&#x5F15;&#x5143;&#x7EC4;&#x5143;&#x7D20;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># &#x901A;&#x8FC7;&#x4E2D;&#x62EC;&#x53F7;[]&#x7D22;&#x5F15;&#x5143;&#x7EC4;&#x5143;&#x7D20;&#xFF0C;&#x548C;List&#x76F8;&#x540C;</span><br><span class="line">a = (1, 3.14, &apos;hello world&apos;, True, (1, 2, 3)) </span><br><span class="line">b = a[1:3]</span><br><span class="line">c = a[4]</span><br><span class="line">d = a[4][1]</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python21.png" alt="21"></p><h2 id="Python&#x5411;&#x5143;&#x7EC4;&#x4E2D;&#x589E;&#x52A0;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x4FEE;&#x6539;&#x5143;&#x7D20;"><a href="#Python&#x5411;&#x5143;&#x7EC4;&#x4E2D;&#x589E;&#x52A0;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x4FEE;&#x6539;&#x5143;&#x7D20;" class="headerlink" title="Python&#x5411;&#x5143;&#x7EC4;&#x4E2D;&#x589E;&#x52A0;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x4FEE;&#x6539;&#x5143;&#x7D20;"></a><font size="4">Python&#x5411;&#x5143;&#x7EC4;&#x4E2D;&#x589E;&#x52A0;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x4FEE;&#x6539;&#x5143;&#x7D20;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = (1, 3, 6, 7, 9)</span><br><span class="line"></span><br><span class="line"># Python&#x4E2D;&#x4E0D;&#x5141;&#x8BB8;&#x5728;&#x539F;&#x6765;&#x7684;&#x5143;&#x7EC4;&#x4E0A;&#x4FEE;&#x6539;&#x4EFB;&#x4F55;&#x5143;&#x7D20;&#xFF0C;List&#x4E2D;&#x7684;append&#xFF0C;pop&#xFF0C;&#x90FD;&#x65E0;&#x6CD5;&#x4F7F;&#x7528;&#xFF0C;&#x5982;&#x679C;&#x60F3;&#x4FEE;&#x6539;&#x5143;&#x7D20;&#x5FC5;&#x987B;&#x91C7;&#x7528;&#x7B97;&#x672F;&#x8FD0;&#x7B97;&#x4FEE;&#x6539;&#x5143;&#x7D20;</span><br><span class="line">b = a[:2] + (5,) + a[3:]</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python22.png" alt="22"></p><h2 id="Python&#x5143;&#x7EC4;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;"><a href="#Python&#x5143;&#x7EC4;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;" class="headerlink" title="Python&#x5143;&#x7EC4;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;"></a><font size="4">Python&#x5143;&#x7EC4;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># obj1 op obj2 &#x5C06;&#x4E24;&#x4E2A;&#x5143;&#x7EC4;&#x8FDB;&#x884C;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;&#xFF0C;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5F00;&#x59CB;&#x6BD4;&#x8F83;&#xFF0C;&#x5982;&#x679C;&#x76F8;&#x540C;&#x7EE7;&#x7EED;&#x6BD4;&#x8F83;</span><br><span class="line">a = (1, 3.14, &apos;hello world&apos;, True, [1, 2, 3])</span><br><span class="line">b = (1, 2.71, &apos;hello world&apos;, True, [1, 2, 3]) </span><br><span class="line">a &gt; b</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python23.png" alt="23"></p><h2 id="Python&#x5143;&#x7EC4;&#x4E58;&#x6CD5;"><a href="#Python&#x5143;&#x7EC4;&#x4E58;&#x6CD5;" class="headerlink" title="Python&#x5143;&#x7EC4;&#x4E58;&#x6CD5;"></a><font size="4">Python&#x5143;&#x7EC4;&#x4E58;&#x6CD5;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># obj * n&#xFF0C;n&#x4E3A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x5C06;obj&#x590D;&#x5236;n&#x6B21;</span><br><span class="line">a = (1, 3.14, True, [1, 2, 3])</span><br><span class="line">b = a * 3</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python24.png" alt="24"></p><h2 id="Python&#x5224;&#x65AD;&#x5143;&#x7D20;&#x662F;&#x5426;&#x5728;&#x5143;&#x7EC4;&#x4E2D;"><a href="#Python&#x5224;&#x65AD;&#x5143;&#x7D20;&#x662F;&#x5426;&#x5728;&#x5143;&#x7EC4;&#x4E2D;" class="headerlink" title="Python&#x5224;&#x65AD;&#x5143;&#x7D20;&#x662F;&#x5426;&#x5728;&#x5143;&#x7EC4;&#x4E2D;"></a><font size="4">Python&#x5224;&#x65AD;&#x5143;&#x7D20;&#x662F;&#x5426;&#x5728;&#x5143;&#x7EC4;&#x4E2D;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># data in obj&#xFF0C;&#x5224;&#x65AD;data&#x662F;&#x5426;&#x5728;obj&#x4E2D;&#xFF0C;data not in obj&#xFF0C;&#x5224;&#x65AD;data&#x662F;&#x5426;&#x4E0D;&#x5728;obj&#x4E2D;</span><br><span class="line">a = (1, 3.14, True, [1, 2, 3])</span><br><span class="line">b = 3.14 in a</span><br><span class="line">c = True not in a</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python25.png" alt="25"></p><h2 id="Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;"><a href="#Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;" class="headerlink" title="Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;"></a><font size="4">Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># obj.count(data) &#x6C42;data&#x5728;&#x5143;&#x7EC4;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;</span><br><span class="line">a = (1, 3, 1, 2, 5)</span><br><span class="line">a.count(1)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python26.png" alt="26"></p><h2 id="Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;"><a href="#Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;" class="headerlink" title="Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;"></a><font size="4">Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># obj.index(data, begin, end) &#x4ECE;begin&#x5230;end-1&#x4E2D;&#x7D22;&#x5F15;&#x7B2C;&#x4E00;&#x6B21;&#x51FA;&#x73B0;data&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x9ED8;&#x8BA4;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;</span><br><span class="line">a = (1, 3, 1, 2, 5)</span><br><span class="line">a.index(1)</span><br><span class="line">a.index(1, 1, 3)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python27.png" alt="27"></p><h2 id="Python&#x5C06;&#x5143;&#x7EC4;&#x7FFB;&#x8F6C;"><a href="#Python&#x5C06;&#x5143;&#x7EC4;&#x7FFB;&#x8F6C;" class="headerlink" title="Python&#x5C06;&#x5143;&#x7EC4;&#x7FFB;&#x8F6C;"></a><font size="4">Python&#x5C06;&#x5143;&#x7EC4;&#x7FFB;&#x8F6C;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = (1, 3, 1, 2, 5)</span><br><span class="line"></span><br><span class="line"># &#x901A;&#x8FC7;&#x7D22;&#x5F15;&#x7FFB;&#x8F6C;[::-1]</span><br><span class="line">a[::-1]</span><br><span class="line"></span><br><span class="line"># Python&#x4E0D;&#x5141;&#x8BB8;&#x5143;&#x7EC4;&#x8FDB;&#x884C;&#x7FFB;&#x8F6C;&#xFF0C;&#x4F46;&#x662F;&#x5143;&#x7EC4;&#x548C;&#x5217;&#x8868;&#x90FD;&#x662F;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#xFF0C;&#x53EF;&#x4EE5;&#x4E92;&#x76F8;&#x8F6C;&#x6362;&#xFF0C;&#x4E8E;&#x662F;&#x53EF;&#x4EE5;&#x5148;&#x8F6C;&#x6362;&#x4E3A;&#x5217;&#x8868;&#x8FDB;&#x884C;&#x7FFB;&#x8F6C;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8F6C;&#x6362;&#x4E3A;&#x5143;&#x7EC4;&#x5373;&#x53EF;</span><br><span class="line">a = list(a)</span><br><span class="line">a.reverse()</span><br><span class="line">a = tuple(a)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python28.png" alt="28"></p><h2 id="Python&#x5C06;&#x5217;&#x8868;&#x6392;&#x5E8F;"><a href="#Python&#x5C06;&#x5217;&#x8868;&#x6392;&#x5E8F;" class="headerlink" title="Python&#x5C06;&#x5217;&#x8868;&#x6392;&#x5E8F;"></a><font size="4">Python&#x5C06;&#x5217;&#x8868;&#x6392;&#x5E8F;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Python&#x4E0D;&#x5141;&#x8BB8;&#x5143;&#x7EC4;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x4F46;&#x662F;&#x5143;&#x7EC4;&#x548C;&#x5217;&#x8868;&#x90FD;&#x662F;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#xFF0C;&#x53EF;&#x4EE5;&#x4E92;&#x76F8;&#x8F6C;&#x6362;&#xFF0C;&#x4E8E;&#x662F;&#x53EF;&#x4EE5;&#x5148;&#x8F6C;&#x6362;&#x4E3A;&#x5217;&#x8868;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8F6C;&#x6362;&#x4E3A;&#x5143;&#x7EC4;&#x5373;&#x53EF;</span><br><span class="line">a = (1, 3, 1, 2, 5)</span><br><span class="line">a = list(a)</span><br><span class="line">a.sort()</span><br><span class="line">a = tuple(a)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python29.png" alt="29"></p><h1 id="Tuple&#x5C0F;&#x7ED3;"><a href="#Tuple&#x5C0F;&#x7ED3;" class="headerlink" title="Tuple&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Tuple&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;Tuple&#x5143;&#x7EC4;&#x662F;Python&#x4E2D;&#x4E00;&#x79CD;&#x5E38;&#x89C1;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x7531;&#x4E8E;&#x5143;&#x7EC4;&#x7684;&#x5143;&#x7D20;&#x64CD;&#x4F5C;&#x5B58;&#x5728;&#x9650;&#x5236;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x5B58;&#x50A8;&#x56FA;&#x5B9A;&#x4E0D;&#x53D8;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x9632;&#x6B62;&#x51FA;&#x73B0;&#x8BEF;&#x64CD;&#x4F5C;&#x4F7F;&#x6570;&#x636E;&#x4FEE;&#x6539;&#xFF0C;&#x5982;&#x5B58;&#x653E;&#x4E2A;&#x4EBA;&#x51FA;&#x751F;&#x5E74;&#x6708;&#xFF0C;&#x8EAB;&#x4EFD;&#x8BC1;&#x53F7;&#x7B49;&#x4FE1;&#x606F;&#xFF0C;&#x56E0;&#x6B64;&#x4F7F;&#x7528;&#x7684;&#x9891;&#x7387;&#x4E5F;&#x662F;&#x975E;&#x5E38;&#x9AD8;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x7075;&#x6D3B;&#x638C;&#x63E1;Tuple&#x7684;&#x5E94;&#x7528;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Tuple(元组)&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="python" scheme="https://USTCcoder.github.io/categories/python/"/>
    
      <category term="语言学习" scheme="https://USTCcoder.github.io/categories/python/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>List(列表)</title>
    <link href="https://USTCcoder.github.io/2019/09/11/python_list/"/>
    <id>https://USTCcoder.github.io/2019/09/11/python_list/</id>
    <published>2019-09-11T07:39:15.000Z</published>
    <updated>2019-09-16T12:23:05.285Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/LANGUAGE/python5.jpg" alt="5"></p><h1 id="List&#x4ECB;&#x7ECD;"><a href="#List&#x4ECB;&#x7ECD;" class="headerlink" title="List&#x4ECB;&#x7ECD;"></a><font size="5" color="red">List&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;Python&#x4E2D;&#x7684;List&#x662F;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;C/C++&#x4E2D;&#x7684;&#x6570;&#x7EC4;&#xFF0C;&#x4F46;&#x662F;&#x6BD4;&#x6570;&#x7EC4;&#x66F4;&#x52A0;&#x7075;&#x6D3B;&#xFF0C;&#x53EF;&#x4EE5;&#x52A8;&#x6001;&#x7684;&#x968F;&#x610F;&#x589E;&#x52A0;&#x548C;&#x5220;&#x9664;&#x5143;&#x7D20;&#xFF0C;&#x8FD8;&#x53EF;&#x4EE5;&#x5B58;&#x50A8;&#x4E0D;&#x540C;&#x7684;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x3002;<br><a id="more"></a></p><h1 id="List&#x64CD;&#x4F5C;"><a href="#List&#x64CD;&#x4F5C;" class="headerlink" title="List&#x64CD;&#x4F5C;"></a><font size="5" color="red">List&#x64CD;&#x4F5C;</font></h1><h2 id="Python&#x521B;&#x5EFA;&#x5217;&#x8868;"><a href="#Python&#x521B;&#x5EFA;&#x5217;&#x8868;" class="headerlink" title="Python&#x521B;&#x5EFA;&#x5217;&#x8868;"></a><font size="4">Python&#x521B;&#x5EFA;&#x5217;&#x8868;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># list(iterable) &#x5C06;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#x8F6C;&#x6362;&#x4E3A;list&#x7C7B;&#x578B;</span><br><span class="line">a = list(range(5))</span><br><span class="line"></span><br><span class="line"># [a, b, c, ...] &#x521B;&#x5EFA;&#x5143;&#x7D20;&#x4E3A;a, b, c, ...&#x7684;&#x5217;&#x8868;</span><br><span class="line">b = [1, 3.14, &apos;hello world&apos;, True, [1, 2, 3]]</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python9.png" alt="9"></p><h2 id="Python&#x7D22;&#x5F15;&#x5217;&#x8868;&#x5143;&#x7D20;"><a href="#Python&#x7D22;&#x5F15;&#x5217;&#x8868;&#x5143;&#x7D20;" class="headerlink" title="Python&#x7D22;&#x5F15;&#x5217;&#x8868;&#x5143;&#x7D20;"></a><font size="4">Python&#x7D22;&#x5F15;&#x5217;&#x8868;&#x5143;&#x7D20;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># &#x548C;C/C++&#x76F8;&#x540C;&#xFF0C;&#x901A;&#x8FC7;&#x4E2D;&#x62EC;&#x53F7;[]&#x7D22;&#x5F15;&#x5217;&#x8868;&#x5143;&#x7D20;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;:&#x8FD0;&#x7B97;&#x7B26;&#x83B7;&#x53D6;&#x8FDE;&#x7EED;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x8D1F;&#x6570;&#x7D22;&#x5F15;&#x4E3A;&#x4ECE;&#x540E;&#x5411;&#x524D;&#x7D22;&#x5F15;&#xFF0C;-1&#x4EE3;&#x8868;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;-2&#x4EE3;&#x8868;&#x5012;&#x6570;&#x7B2C;&#x4E8C;&#x4E2A;&#x5143;&#x7D20;</span><br><span class="line">a = [1, 3.14, &apos;hello world&apos;, True, [1, 2, 3]] </span><br><span class="line">b = a[1:3]</span><br><span class="line">c = a[4]</span><br><span class="line">d = a[4][1]</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python10.png" alt="10"></p><h2 id="Python&#x5411;&#x5217;&#x8868;&#x4E2D;&#x589E;&#x52A0;&#x5143;&#x7D20;"><a href="#Python&#x5411;&#x5217;&#x8868;&#x4E2D;&#x589E;&#x52A0;&#x5143;&#x7D20;" class="headerlink" title="Python&#x5411;&#x5217;&#x8868;&#x4E2D;&#x589E;&#x52A0;&#x5143;&#x7D20;"></a><font size="4">Python&#x5411;&#x5217;&#x8868;&#x4E2D;&#x589E;&#x52A0;&#x5143;&#x7D20;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># obj.append(obj1) &#x5728;obj&#x672B;&#x5C3E;&#x8FFD;&#x52A0;obj1&#xFF0C;&#x53EF;&#x4EE5;&#x8FFD;&#x52A0;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x8FFD;&#x52A0;&#x4E00;&#x4E2A;&#x5217;&#x8868;</span><br><span class="line">a = [1, 3.14, &apos;hello world&apos;, True, [1, 2, 3]] </span><br><span class="line">a.append(-1)</span><br><span class="line">a.append([1, 2, 3])</span><br><span class="line"></span><br><span class="line"># obj1 + obj2 &#x5C06;&#x4E24;&#x4E2A;&#x5217;&#x8868;&#x76F8;&#x52A0;&#xFF0C;obj2&#x4F1A;&#x8FFD;&#x52A0;&#x5728;obj1&#x7684;&#x540E;&#x9762;</span><br><span class="line">b = a + [[1, 2, 3]] # &#x5F97;&#x5230;&#x7684;&#x503C;&#x7B49;&#x4EF7;&#x4E8E;a.append([1, 2, 3])&#xFF0C;&#x4F46;&#x662F;a.append()&#x53EA;&#x80FD;&#x5728;a&#x540E;&#x9762;&#x8FFD;&#x52A0;&#xFF0C;&#x5982;&#x679C;&#x60F3;&#x8D4B;&#x503C;&#x7ED9;b&#x800C;&#x4E0D;&#x60F3;&#x6539;&#x53D8;a&#x5C31;&#x8981;&#x901A;&#x8FC7;&#x52A0;&#x6CD5;&#x8FD0;&#x7B97;</span><br><span class="line">c = a + [1] # &#x5F97;&#x5230;&#x7684;&#x503C;&#x7B49;&#x4EF7;&#x4E8E;a.append(1)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python11.png" alt="11"></p><h2 id="Python&#x4ECE;&#x5217;&#x8868;&#x4E2D;&#x5220;&#x9664;&#x5143;&#x7D20;"><a href="#Python&#x4ECE;&#x5217;&#x8868;&#x4E2D;&#x5220;&#x9664;&#x5143;&#x7D20;" class="headerlink" title="Python&#x4ECE;&#x5217;&#x8868;&#x4E2D;&#x5220;&#x9664;&#x5143;&#x7D20;"></a><font size="4">Python&#x4ECE;&#x5217;&#x8868;&#x4E2D;&#x5220;&#x9664;&#x5143;&#x7D20;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = [1, 3.14, &apos;hello world&apos;, True, [1, 2, 3]] </span><br><span class="line"></span><br><span class="line"># obj.remove(data) &#x4ECE;obj&#x4E2D;&#x5220;&#x9664;&#x9996;&#x6B21;&#x51FA;&#x73B0;&#x503C;&#x4E3A;data&#x7684;&#x5143;&#x7D20;</span><br><span class="line">a.remove(3.14)</span><br><span class="line"></span><br><span class="line"># del obj &#x5220;&#x9664;obj&#x6570;&#x636E;&#xFF0C;&#x662F;&#x7528;&#x6765;&#x5220;&#x9664;&#x4E0D;&#x7528;&#x7684;&#x53D8;&#x91CF;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x5220;&#x9664;&#x5217;&#x8868;&#x4E2D;&#x7684;&#x67D0;&#x4E2A;&#x5143;&#x7D20;</span><br><span class="line">del a[1]</span><br><span class="line"></span><br><span class="line"># obj.pop(n) &#x5F39;&#x51FA;&#x7B2C;n&#x4E2A;&#x5143;&#x7D20;&#x5E76;&#x8FD4;&#x56DE;&#x8BE5;&#x5143;&#x7D20;</span><br><span class="line">b = a.pop(-1)</span><br><span class="line"></span><br><span class="line"># obj.clear() &#x5220;&#x9664;&#x6240;&#x6709;&#x5143;&#x7D20;</span><br><span class="line">a.clear()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python12.png" alt="12"></p><h2 id="Python&#x5217;&#x8868;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;"><a href="#Python&#x5217;&#x8868;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;" class="headerlink" title="Python&#x5217;&#x8868;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;"></a><font size="4">Python&#x5217;&#x8868;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># obj1 op obj2 &#x5C06;&#x4E24;&#x4E2A;&#x5217;&#x8868;&#x8FDB;&#x884C;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;&#xFF0C;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5F00;&#x59CB;&#x6BD4;&#x8F83;&#xFF0C;&#x5982;&#x679C;&#x76F8;&#x540C;&#x7EE7;&#x7EED;&#x6BD4;&#x8F83;</span><br><span class="line">a = [1, 3.14, &apos;hello world&apos;, True, [1, 2, 3]] </span><br><span class="line">b = [1, 2.71, &apos;hello world&apos;, True, [1, 2, 3]] </span><br><span class="line">a &gt; b</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python13.png" alt="13"></p><h2 id="Python&#x5217;&#x8868;&#x4E58;&#x6CD5;"><a href="#Python&#x5217;&#x8868;&#x4E58;&#x6CD5;" class="headerlink" title="Python&#x5217;&#x8868;&#x4E58;&#x6CD5;"></a><font size="4">Python&#x5217;&#x8868;&#x4E58;&#x6CD5;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># obj * n&#xFF0C;n&#x4E3A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x5C06;obj&#x590D;&#x5236;n&#x6B21;</span><br><span class="line">a = [1, 3.14, True, [1, 2, 3]] </span><br><span class="line">b = a * 3</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python14.png" alt="14"></p><h2 id="Python&#x5224;&#x65AD;&#x5143;&#x7D20;&#x662F;&#x5426;&#x5728;&#x5217;&#x8868;&#x4E2D;"><a href="#Python&#x5224;&#x65AD;&#x5143;&#x7D20;&#x662F;&#x5426;&#x5728;&#x5217;&#x8868;&#x4E2D;" class="headerlink" title="Python&#x5224;&#x65AD;&#x5143;&#x7D20;&#x662F;&#x5426;&#x5728;&#x5217;&#x8868;&#x4E2D;"></a><font size="4">Python&#x5224;&#x65AD;&#x5143;&#x7D20;&#x662F;&#x5426;&#x5728;&#x5217;&#x8868;&#x4E2D;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># data in obj&#xFF0C;&#x5224;&#x65AD;data&#x662F;&#x5426;&#x5728;obj&#x4E2D;&#xFF0C;data not in obj&#xFF0C;&#x5224;&#x65AD;data&#x662F;&#x5426;&#x4E0D;&#x5728;obj&#x4E2D;</span><br><span class="line">a = [1, 3.14, True, [1, 2, 3]]</span><br><span class="line">b = 3.14 in a</span><br><span class="line">c = True not in a</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python15.png" alt="15"></p><h2 id="Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;"><a href="#Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;" class="headerlink" title="Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;"></a><font size="4">Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># obj.count(data) &#x6C42;data&#x5728;&#x5217;&#x8868;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;</span><br><span class="line">a = [1, 3, 1, 2, 5]</span><br><span class="line">a.count(1)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python16.png" alt="16"></p><h2 id="Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;"><a href="#Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;" class="headerlink" title="Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;"></a><font size="4">Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># obj.index(data, begin, end) &#x4ECE;begin&#x5230;end-1&#x4E2D;&#x7D22;&#x5F15;&#x7B2C;&#x4E00;&#x6B21;&#x51FA;&#x73B0;data&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x9ED8;&#x8BA4;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;</span><br><span class="line">a = [1, 3, 1, 2, 5]</span><br><span class="line">a.index(1)</span><br><span class="line">a.index(1, 1, 3)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python17.png" alt="17"></p><h2 id="Python&#x5C06;&#x5217;&#x8868;&#x7FFB;&#x8F6C;"><a href="#Python&#x5C06;&#x5217;&#x8868;&#x7FFB;&#x8F6C;" class="headerlink" title="Python&#x5C06;&#x5217;&#x8868;&#x7FFB;&#x8F6C;"></a><font size="4">Python&#x5C06;&#x5217;&#x8868;&#x7FFB;&#x8F6C;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [1, 3, 1, 2, 5]</span><br><span class="line"></span><br><span class="line"># &#x901A;&#x8FC7;&#x7D22;&#x5F15;&#x7FFB;&#x8F6C;[::-1]</span><br><span class="line">a[::-1]</span><br><span class="line"></span><br><span class="line"># obj.reverse() &#x5C06;&#x5217;&#x8868;&#x53CD;&#x8F6C;</span><br><span class="line">a.reverse()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python18.png" alt="18"></p><h2 id="Python&#x5C06;&#x5217;&#x8868;&#x6392;&#x5E8F;"><a href="#Python&#x5C06;&#x5217;&#x8868;&#x6392;&#x5E8F;" class="headerlink" title="Python&#x5C06;&#x5217;&#x8868;&#x6392;&#x5E8F;"></a><font size="4">Python&#x5C06;&#x5217;&#x8868;&#x6392;&#x5E8F;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># obj.sort(key, reverse=False) &#x5C06;obj&#x6309;&#x7167;&#x5173;&#x952E;&#x5B57;key&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;reverse=False&#x9ED8;&#x8BA4;&#x4E3A;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;&#xFF0C;reverse=True&#x4E3A;&#x4ECE;&#x5927;&#x5230;&#x5C0F;&#x6392;&#x5E8F;</span><br><span class="line">a = [1, 3, 1, 2, 5]</span><br><span class="line">a.sort()</span><br><span class="line">a.sort(reverse=True)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python19.png" alt="19"></p><h1 id="List&#x5C0F;&#x7ED3;"><a href="#List&#x5C0F;&#x7ED3;" class="headerlink" title="List&#x5C0F;&#x7ED3;"></a><font size="5" color="red">List&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;List&#x5217;&#x8868;&#x662F;Python&#x4E2D;&#x6700;&#x7075;&#x6D3B;&#x7684;&#x4E00;&#x79CD;&#x7ED3;&#x6784;&#xFF0C;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x7684;&#x9650;&#x5236;&#xFF0C;&#x53EF;&#x4EE5;&#x4EE3;&#x66FF;&#x6808;&#x548C;&#x961F;&#x5217;&#x7684;&#x5404;&#x79CD;&#x64CD;&#x4F5C;&#xFF0C;&#x56E0;&#x6B64;&#x4F7F;&#x7528;&#x7684;&#x9891;&#x7387;&#x4E5F;&#x662F;&#x975E;&#x5E38;&#x9AD8;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x7075;&#x6D3B;&#x638C;&#x63E1;List&#x7684;&#x5E94;&#x7528;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;List(列表)&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="python" scheme="https://USTCcoder.github.io/categories/python/"/>
    
      <category term="语言学习" scheme="https://USTCcoder.github.io/categories/python/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Python基础</title>
    <link href="https://USTCcoder.github.io/2019/09/10/python_foundation/"/>
    <id>https://USTCcoder.github.io/2019/09/10/python_foundation/</id>
    <published>2019-09-10T10:39:15.000Z</published>
    <updated>2019-09-22T02:16:14.669Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/LANGUAGE/python2.jpg" alt="2"></p><h1 id="Python&#x4ECB;&#x7ECD;"><a href="#Python&#x4ECB;&#x7ECD;" class="headerlink" title="Python&#x4ECB;&#x7ECD;"></a><font size="5" color="red">Python&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;&#x5728;&#x524D;&#x9762;&#x5DF2;&#x7ECF;&#x4ECB;&#x7ECD;&#x4E86;Python&#x7684;&#x7531;&#x6765;&#xFF0C;&#x8FD9;&#x91CC;&#x4E3B;&#x8981;&#x4ECB;&#x7ECD;Python&#x7684;&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#xFF0C;&#x5305;&#x62EC;Python&#x8FD0;&#x7B97;&#x548C;Python&#x7ED3;&#x6784;&#x3002;<br><a id="more"></a></p><h1 id="Python&#x8FD0;&#x7B97;"><a href="#Python&#x8FD0;&#x7B97;" class="headerlink" title="Python&#x8FD0;&#x7B97;"></a><font size="5" color="red">Python&#x8FD0;&#x7B97;</font></h1><p><img src="/images/LANGUAGE/python3.jpg" alt="3"></p><h2 id="Python&#x521B;&#x5EFA;&#x53D8;&#x91CF;"><a href="#Python&#x521B;&#x5EFA;&#x53D8;&#x91CF;" class="headerlink" title="Python&#x521B;&#x5EFA;&#x53D8;&#x91CF;"></a><font size="4">Python&#x521B;&#x5EFA;&#x53D8;&#x91CF;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Python&#x4E2D;&#x7684;&#x5E38;&#x7528;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x8D4B;&#x503C;&#x5373;&#x5B9A;&#x4E49;&#xFF0C;&#x548C;C&#xFF0C;Java&#x7B49;&#x8BED;&#x8A00;&#x4E0D;&#x540C;&#xFF0C;&#x4E14;&#x53EF;&#x4EE5;&#x540C;&#x65F6;&#x8D4B;&#x503C;&#x591A;&#x4E2A;&#x53D8;&#x91CF;</span><br><span class="line">a = 10</span><br><span class="line">b = 3.14</span><br><span class="line">c, d = &apos;Hello Python&apos;, True</span><br><span class="line"></span><br><span class="line"># &#x53EF;&#x4EE5;&#x7528;type(obj) &#x67E5;&#x770B;&#x521B;&#x5EFA;&#x7684;&#x53D8;&#x91CF;&#x7C7B;&#x578B;&#xFF0C;isinstance(obj, type)&#x67E5;&#x770B;&#x53D8;&#x91CF;obj&#x548C;type&#x662F;&#x5426;&#x4E3A;&#x76F8;&#x540C;&#x7C7B;&#x578B;</span><br><span class="line">type(a)</span><br><span class="line">type(b)</span><br><span class="line">isinstance(c, str)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python1.png" alt="1"></p><h2 id="Python&#x7B97;&#x672F;&#x8FD0;&#x7B97;"><a href="#Python&#x7B97;&#x672F;&#x8FD0;&#x7B97;" class="headerlink" title="Python&#x7B97;&#x672F;&#x8FD0;&#x7B97;"></a><font size="4">Python&#x7B97;&#x672F;&#x8FD0;&#x7B97;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># +(&#x52A0;)&#xFF0C;-(&#x51CF;)&#xFF0C;*(&#x4E58;)&#xFF0C;/(&#x9664;)&#xFF0C;//(&#x5730;&#x677F;&#x9664;)&#xFF0C;**(&#x4E58;&#x65B9;)&#xFF0C;%(&#x6C42;&#x4F59;)&#xFF0C;&#x6574;&#x6570;&#x9664;&#x6CD5;/&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x5C0F;&#x6570;&#xFF0C;&#x548C;C&#xFF0C;Java&#x7B49;&#x8BED;&#x8A00;&#x4E0D;&#x540C;</span><br><span class="line">a, b = 9, 4</span><br><span class="line">a / b</span><br><span class="line">a // b</span><br><span class="line">a ** b</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python2.png" alt="2"></p><h2 id="Python&#x5173;&#x7CFB;&#x8FD0;&#x7B97;"><a href="#Python&#x5173;&#x7CFB;&#x8FD0;&#x7B97;" class="headerlink" title="Python&#x5173;&#x7CFB;&#x8FD0;&#x7B97;"></a><font size="4">Python&#x5173;&#x7CFB;&#x8FD0;&#x7B97;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># &gt;(&#x5927;&#x4E8E;)&#xFF0C;&lt;(&#x5C0F;&#x4E8E;)&#xFF0C;&gt;=(&#x5927;&#x4E8E;&#x7B49;&#x4E8E;)&#xFF0C;&lt;=(&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;)&#xFF0C;==(&#x7B49;&#x4E8E;)&#xFF0C;!=(&#x4E0D;&#x7B49;&#x4E8E;)&#xFF0C;&#x548C;C&#xFF0C;Java&#x7B49;&#x8BED;&#x8A00;&#x4E0D;&#x540C;&#xFF0C;&#x5B57;&#x7B26;&#x4E32;&#x4E5F;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x6BD4;&#x8F83;&#x5927;&#x5C0F;&#xFF0C;&#x5B57;&#x7B26;&#x4E32;&#x4E4B;&#x95F4;&#x6839;&#x636E;ASCII&#x7801;&#x503C;&#x8D8A;&#x5927;&#x5219;&#x5B57;&#x7B26;&#x4E32;&#x8D8A;&#x5927;&#xFF0C;&#x5148;&#x6BD4;&#x8F83;&#x7B2C;&#x4E00;&#x4E2A;&#xFF0C;&#x5982;&#x679C;&#x76F8;&#x540C;&#x7EE7;&#x7EED;&#x5411;&#x4E0B;&#x6BD4;&#x8F83;</span><br><span class="line">a, b = 3.14, 1.414</span><br><span class="line">c, d = &apos;Hello&apos;, &apos;Python&apos;</span><br><span class="line">a &gt; b</span><br><span class="line">c &gt; d</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python108.png" alt="108"></p><h2 id="Python&#x903B;&#x8F91;&#x8FD0;&#x7B97;"><a href="#Python&#x903B;&#x8F91;&#x8FD0;&#x7B97;" class="headerlink" title="Python&#x903B;&#x8F91;&#x8FD0;&#x7B97;"></a><font size="4">Python&#x903B;&#x8F91;&#x8FD0;&#x7B97;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># and(&#x4E0E;)&#xFF0C;or(&#x6216;)&#xFF0C;not(&#x975E;)&#xFF0C;&#x548C;C&#xFF0C;Java&#x7B49;&#x8BED;&#x8A00;&#x4E0D;&#x540C;&#xFF0C;&#x7528;&amp;&amp;&#xFF0C;||&#xFF0C;!&#x8868;&#x793A;&#x4E0E;&#x6216;&#x975E;</span><br><span class="line">a, b = True, False</span><br><span class="line">a and b</span><br><span class="line">a or b</span><br><span class="line">not a</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python3.png" alt="3"></p><h2 id="Python&#x6761;&#x4EF6;&#x8868;&#x8FBE;&#x5F0F;"><a href="#Python&#x6761;&#x4EF6;&#x8868;&#x8FBE;&#x5F0F;" class="headerlink" title="Python&#x6761;&#x4EF6;&#x8868;&#x8FBE;&#x5F0F;"></a><font size="4">Python&#x6761;&#x4EF6;&#x8868;&#x8FBE;&#x5F0F;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># x if condition else y &#x5224;&#x65AD;condition&#xFF0C;&#x4E3A;&#x771F;&#x5219;x&#xFF0C;&#x4E3A;&#x5047;&#x5219;y&#xFF0C;&#x548C;C&#xFF0C;Java&#x7B49;&#x8BED;&#x8A00;&#x4E0D;&#x540C;(b?x:y)</span><br><span class="line">a, b, c, d = 1, 2, 3, 4</span><br><span class="line">x = a if c &gt; d else b</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python4.png" alt="4"></p><h1 id="Python&#x7ED3;&#x6784;"><a href="#Python&#x7ED3;&#x6784;" class="headerlink" title="Python&#x7ED3;&#x6784;"></a><font size="5" color="red">Python&#x7ED3;&#x6784;</font></h1><p><img src="/images/LANGUAGE/python4.jpg" alt="4"></p><h2 id="Python&#x6761;&#x4EF6;&#x7ED3;&#x6784;"><a href="#Python&#x6761;&#x4EF6;&#x7ED3;&#x6784;" class="headerlink" title="Python&#x6761;&#x4EF6;&#x7ED3;&#x6784;"></a><font size="4">Python&#x6761;&#x4EF6;&#x7ED3;&#x6784;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Python&#x6761;&#x4EF6;&#x7ED3;&#x6784;if condition1: &#x8BED;&#x53E5;1 elif condition2: &#x8BED;&#x53E5;2 else &#x8BED;&#x53E5;3 &#x5148;&#x5224;&#x65AD;if&#x540E;&#x9762;&#x7684;condition1&#x662F;&#x5426;&#x6210;&#x7ACB;&#xFF0C;&#x5982;&#x679C;&#x6210;&#x7ACB;&#x5219;&#x6267;&#x884C;&#x8BED;&#x53E5;1&#x5E76;&#x7ED3;&#x675F;&#x5224;&#x65AD;&#xFF0C;&#x5426;&#x5219;&#x5224;&#x65AD;elif&#x540E;&#x9762;&#x7684;condition2&#x662F;&#x5426;&#x6210;&#x7ACB;&#xFF0C;&#x5982;&#x679C;&#x6210;&#x7ACB;&#x5219;&#x6267;&#x884C;&#x8BED;&#x53E5;2&#x5E76;&#x7ED3;&#x675F;&#x5224;&#x65AD;&#xFF0C;&#x5426;&#x5219;&#x6267;&#x884C;&#x8BED;&#x53E5;3&#xFF0C;&#x548C;C&#xFF0C;Java&#x7B49;&#x8BED;&#x8A00;&#x4E0D;&#x540C;(if ... else if ... else ...)</span><br><span class="line"># if condition1:</span><br><span class="line">#     &#x8BED;&#x53E5;1</span><br><span class="line"># elif condition2:</span><br><span class="line">#     &#x8BED;&#x53E5;2</span><br><span class="line"># else:</span><br><span class="line">#     &#x8BED;&#x53E5;3</span><br><span class="line">if 3 &gt; 5:</span><br><span class="line">    a = 1</span><br><span class="line">elif 3 &lt; 5:</span><br><span class="line">    a = 2</span><br><span class="line">else:</span><br><span class="line">    a = 3</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python5.png" alt="5"></p><h2 id="Python&#x5FAA;&#x73AF;&#x7ED3;&#x6784;-while"><a href="#Python&#x5FAA;&#x73AF;&#x7ED3;&#x6784;-while" class="headerlink" title="Python&#x5FAA;&#x73AF;&#x7ED3;&#x6784;(while)"></a><font size="4">Python&#x5FAA;&#x73AF;&#x7ED3;&#x6784;(while)</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># while condition: &#x5FAA;&#x73AF;&#x8BED;&#x53E5; while&#x5FAA;&#x73AF;&#xFF0C;&#x5148;&#x5224;&#x65AD;condition&#x662F;&#x5426;&#x6EE1;&#x8DB3;&#xFF0C;&#x5982;&#x679C;&#x6EE1;&#x8DB3;&#x5219;&#x8FDB;&#x5165;&#x5FAA;&#x73AF;&#x6267;&#x884C;&#x5FAA;&#x73AF;&#x8BED;&#x53E5;&#xFF0C;&#x5426;&#x5219;&#x5FAA;&#x73AF;&#x7ED3;&#x675F;&#xFF0C;&#x548C;C&#xFF0C;Java&#x7B49;&#x8BED;&#x8A00;&#x4E0D;&#x540C;(&#x8FD8;&#x6709;do ... while)</span><br><span class="line"># while condition:</span><br><span class="line">#     &#x5FAA;&#x73AF;&#x8BED;&#x53E5;</span><br><span class="line">res, i = 0, 1</span><br><span class="line">while i &lt; 10:</span><br><span class="line">    res, i = res + i, i + 1</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python6.png" alt="6"></p><h2 id="Python&#x5FAA;&#x73AF;&#x7ED3;&#x6784;-for"><a href="#Python&#x5FAA;&#x73AF;&#x7ED3;&#x6784;-for" class="headerlink" title="Python&#x5FAA;&#x73AF;&#x7ED3;&#x6784;(for)"></a><font size="4">Python&#x5FAA;&#x73AF;&#x7ED3;&#x6784;(for)</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># range(start=0, end, step=1) &#x4ECE;start&#x5F00;&#x59CB;&#x5230;end-1&#xFF0C;start&#x9ED8;&#x8BA4;&#x4E3A;0&#xFF0C;step&#x9ED8;&#x8BA4;&#x4E3A;1&#xFF0C;&#x8FD4;&#x56DE;&#x6B65;&#x957F;&#x4E3A;step&#x7684;&#x6240;&#x6709;&#x6570;&#x5B57;&#x7EC4;&#x6210;&#x7684;&#x8FED;&#x4EE3;&#x5668;</span><br><span class="line"></span><br><span class="line"># for target in iterable: &#x5FAA;&#x73AF;&#x8BED;&#x53E5; for&#x5FAA;&#x73AF;&#xFF0C;target&#x4ECE;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;iterable&#x4E2D;&#x9010;&#x6B21;&#x53D6;&#x51FA;&#x7136;&#x540E;&#x6267;&#x884C;&#x5FAA;&#x73AF;&#x8BED;&#x53E5;&#xFF0C;&#x548C;C&#xFF0C;Java&#x7B49;&#x8BED;&#x8A00;&#x4E0D;&#x540C;(for(&#x521D;&#x59CB;&#x6761;&#x4EF6;;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;;&#x81EA;&#x53D8;&#x91CF;&#x53D8;&#x5316;&#x64CD;&#x4F5C;))</span><br><span class="line"># for target in iterable:</span><br><span class="line">#     &#x5FAA;&#x73AF;&#x8BED;&#x53E5;</span><br><span class="line">res = 0</span><br><span class="line">for i in range(1, 10):</span><br><span class="line">    res += i</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python7.png" alt="7"></p><h2 id="break&#xFF0C;continue&#x8BED;&#x53E5;"><a href="#break&#xFF0C;continue&#x8BED;&#x53E5;" class="headerlink" title="break&#xFF0C;continue&#x8BED;&#x53E5;"></a><font size="4">break&#xFF0C;continue&#x8BED;&#x53E5;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># &#x5BF9;&#x4E8E;&#x5FAA;&#x73AF;&#x7ED3;&#x6784;&#x6765;&#x8BF4;&#xFF0C;break&#x548C;continue&#x8BED;&#x53E5;&#x975E;&#x5E38;&#x91CD;&#x8981;&#xFF0C;&#x7528;&#x6CD5;&#x548C;C&#xFF0C;Java&#x7B49;&#x8BED;&#x8A00;&#x76F8;&#x540C;</span><br><span class="line"># break&#xFF1A;&#x7EC8;&#x6B62;&#x5E76;&#x8DF3;&#x51FA;&#x5FAA;&#x73AF;</span><br><span class="line"># continue&#xFF1A;&#x7EC8;&#x6B62;&#x672C;&#x6B21;&#x5FAA;&#x73AF;&#xFF0C;&#x8FDB;&#x5165;&#x4E0B;&#x4E00;&#x6B21;&#x5FAA;&#x73AF;</span><br><span class="line"></span><br><span class="line">res_break, res_continue = 0, 0</span><br><span class="line"></span><br><span class="line"># 1 + 2 + 3 + 4 = 10</span><br><span class="line">for i in range(1, 10):</span><br><span class="line">    if i == 5:</span><br><span class="line">        break </span><br><span class="line">    res_break += i</span><br><span class="line"></span><br><span class="line"># 1 + 2 + 3 + 4 + 6 + 7 + 8 + 9 = 40</span><br><span class="line">for i in range(1, 10):</span><br><span class="line">    if i == 5:</span><br><span class="line">        continue</span><br><span class="line">    res_continue += i</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LANGUAGE/python8.png" alt="8"></p><h1 id="Python&#x5C0F;&#x7ED3;"><a href="#Python&#x5C0F;&#x7ED3;" class="headerlink" title="Python&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Python&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x57FA;&#x7840;&#x90E8;&#x5206;&#x6BCF;&#x79CD;&#x8BED;&#x8A00;&#x90FD;&#x5927;&#x540C;&#x5C0F;&#x5F02;&#xFF0C;&#x56E0;&#x4E3A;&#x57FA;&#x7840;&#x90E8;&#x5206;&#x662F;&#x6240;&#x6709;&#x8BED;&#x8A00;&#x7684;&#x57FA;&#x7840;&#xFF0C;&#x5B66;&#x4E60;&#x6BCF;&#x4E00;&#x79CD;&#x8BED;&#x8A00;&#x90FD;&#x79BB;&#x4E0D;&#x5F00;&#x8FD0;&#x7B97;&#x64CD;&#x4F5C;&#x548C;&#x7B97;&#x6CD5;&#x7ED3;&#x6784;&#xFF0C;&#x867D;&#x7136;&#x96BE;&#x5EA6;&#x8F83;&#x5C0F;&#xFF0C;&#x4F46;&#x662F;&#x975E;&#x5E38;&#x91CD;&#x8981;&#xFF0C;&#x65E0;&#x8BBA;&#x4EE5;&#x540E;&#x4ECE;&#x4E8B;&#x4EC0;&#x4E48;&#x6837;&#x7684;&#x7814;&#x7A76;&#xFF0C;&#x57FA;&#x7840;&#x80FD;&#x529B;&#x90FD;&#x662F;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x719F;&#x7EC3;&#x638C;&#x63E1;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Python基础&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="python" scheme="https://USTCcoder.github.io/categories/python/"/>
    
      <category term="语言学习" scheme="https://USTCcoder.github.io/categories/python/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Git(分布式版本控制系统)</title>
    <link href="https://USTCcoder.github.io/2019/09/10/skill%20Git/"/>
    <id>https://USTCcoder.github.io/2019/09/10/skill Git/</id>
    <published>2019-09-10T09:10:40.000Z</published>
    <updated>2019-09-25T08:28:00.693Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">Git</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"><a href="#&#x539F;&#x7406;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x539F;&#x7406;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>Git:&#x662F;&#x4E00;&#x4E2A;&#x5F00;&#x6E90;&#x7684;&#x5206;&#x5E03;&#x5F0F;&#x7248;&#x672C;&#x63A7;&#x5236;&#x7CFB;&#x7EDF;</strong>&#xFF0C;&#x53EF;&#x4EE5;&#x6709;&#x6548;&#x3001;&#x9AD8;&#x901F;&#x5730;&#x5904;&#x7406;<strong>&#x4ECE;&#x5F88;&#x5C0F;&#x5230;&#x975E;&#x5E38;&#x5927;&#x7684;&#x9879;&#x76EE;</strong>&#x7248;&#x672C;&#x7BA1;&#x7406;&#x3002;&#x7279;&#x522B;&#x9002;&#x5408;&#x4E8E;<strong>&#x4F01;&#x4E1A;&#x7EA7;&#x9879;&#x76EE;</strong>&#x7684;&#x4F7F;&#x7528;&#xFF0C;&#x56E0;&#x6B64;&#x4E5F;&#x6210;&#x4E3A;&#x4E86;<strong>&#x7A0B;&#x5E8F;&#x5458;&#x5FC5;&#x5907;&#x6280;&#x80FD;</strong>&#x4E4B;&#x4E00;&#x3002;Git&#x4E2D;&#x7684;&#x5927;&#x591A;&#x6570;&#x8BED;&#x53E5;&#x662F;Linux&#x8BED;&#x53E5;&#xFF0C;&#x56E0;&#x4E3A;&#x6700;&#x521D;&#x5B83;&#x5C31;&#x662F;&#x7531;Linux&#x4E4B;&#x7236;Linus Torvalds&#x5E2E;&#x52A9;&#x7BA1;&#x7406; Linux &#x5185;&#x6838;&#x5F00;&#x53D1;&#x800C;&#x5F00;&#x53D1;&#x7684;&#x3002;<br><a id="more"></a></p><h1 id="Git&#x7279;&#x70B9;"><a href="#Git&#x7279;&#x70B9;" class="headerlink" title="Git&#x7279;&#x70B9;"></a><font size="5" color="red">Git&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">&#x76F4;&#x63A5;&#x8BB0;&#x5F55;&#x5FEB;&#x7167;&#xFF0C;&#x800C;&#x975E;&#x5DEE;&#x5F02;&#x6BD4;&#x8F83;&#xFF0C;&#x901F;&#x5EA6;&#x975E;&#x5E38;&#x5FEB;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x51E0;&#x4E4E;&#x6240;&#x6709;&#x64CD;&#x4F5C;&#x90FD;&#x662F;&#x672C;&#x5730;&#x6267;&#x884C;&#xFF0C;&#x65B9;&#x4FBF;&#x7BA1;&#x7406;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x65F6;&#x523B;&#x4FDD;&#x5B58;&#x6570;&#x636E;&#x5B8C;&#x6574;&#x6027;&#xFF0C;&#x4FDD;&#x8BC1;&#x4FE1;&#x606F;&#x7684;&#x4E0D;&#x4E22;&#x5931;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x9002;&#x5408;&#x4E8E;&#x5206;&#x5E03;&#x5F0F;&#x5F00;&#x53D1;&#xFF0C;&#x670D;&#x52A1;&#x5668;&#x538B;&#x529B;&#x5C0F;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x5F00;&#x53D1;&#x8005;&#x4E4B;&#x95F4;&#x53EF;&#x4EE5;&#x5BB9;&#x6613;&#x7684;&#x89E3;&#x51B3;&#x51B2;&#x7A81;&#x3002;</font></p><h1 id="Git&#x5173;&#x7CFB;&#x56FE;"><a href="#Git&#x5173;&#x7CFB;&#x56FE;" class="headerlink" title="Git&#x5173;&#x7CFB;&#x56FE;"></a><font size="5" color="red">Git&#x5173;&#x7CFB;&#x56FE;</font></h1><p>&#x2003;&#x2003;<font size="3">Git&#x7684;&#x903B;&#x8F91;&#x8F83;&#x4E3A;&#x590D;&#x6742;&#xFF0C;&#x4E00;&#x5B9A;&#x8981;&#x7406;&#x89E3;&#x903B;&#x8F91;&#x56FE;&#xFF0C;&#x5E76;&#x8BB0;&#x4F4F;&#x72B6;&#x6001;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x4E92;&#x8F6C;&#x6362;&#x3002;</font><br><img src="/images/SKILL/git.png" alt="0"></p><h1 id="Git&#x5E94;&#x7528;"><a href="#Git&#x5E94;&#x7528;" class="headerlink" title="Git&#x5E94;&#x7528;"></a><font size="5" color="red">Git&#x5E94;&#x7528;</font></h1><h2 id="&#x521B;&#x5EFA;&#x7BA1;&#x7406;&#x5458;&#x8EAB;&#x4EFD;"><a href="#&#x521B;&#x5EFA;&#x7BA1;&#x7406;&#x5458;&#x8EAB;&#x4EFD;" class="headerlink" title="&#x521B;&#x5EFA;&#x7BA1;&#x7406;&#x5458;&#x8EAB;&#x4EFD;"></a><font size="4">&#x521B;&#x5EFA;&#x7BA1;&#x7406;&#x5458;&#x8EAB;&#x4EFD;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># git config --global user.name XXX &#x521B;&#x5EFA;&#x7BA1;&#x7406;&#x5458;&#x7528;&#x6237;&#x540D;XXX</span><br><span class="line"></span><br><span class="line"># git config --global user.email YYY &#x521B;&#x5EFA;&#x7BA1;&#x7406;&#x5458;&#x90AE;&#x7BB1;YYY</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x5C06;&#x6587;&#x4EF6;&#x5939;&#x53D8;&#x6210;&#x7BA1;&#x7406;&#x5E93;&#x6587;&#x4EF6;&#x5939;"><a href="#&#x5C06;&#x6587;&#x4EF6;&#x5939;&#x53D8;&#x6210;&#x7BA1;&#x7406;&#x5E93;&#x6587;&#x4EF6;&#x5939;" class="headerlink" title="&#x5C06;&#x6587;&#x4EF6;&#x5939;&#x53D8;&#x6210;&#x7BA1;&#x7406;&#x5E93;&#x6587;&#x4EF6;&#x5939;"></a><font size="4">&#x5C06;&#x6587;&#x4EF6;&#x5939;&#x53D8;&#x6210;&#x7BA1;&#x7406;&#x5E93;&#x6587;&#x4EF6;&#x5939;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># git init &#x521B;&#x5EFA;&#x7BA1;&#x7406;&#x5E93;&#x6587;&#x4EF6;&#x5939;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/git1.png" alt="1"></p><h2 id="&#x5728;&#x6587;&#x4EF6;&#x5939;&#x4E2D;&#x6DFB;&#x52A0;&#x6587;&#x4EF6;"><a href="#&#x5728;&#x6587;&#x4EF6;&#x5939;&#x4E2D;&#x6DFB;&#x52A0;&#x6587;&#x4EF6;" class="headerlink" title="&#x5728;&#x6587;&#x4EF6;&#x5939;&#x4E2D;&#x6DFB;&#x52A0;&#x6587;&#x4EF6;"></a><font size="4">&#x5728;&#x6587;&#x4EF6;&#x5939;&#x4E2D;&#x6DFB;&#x52A0;&#x6587;&#x4EF6;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># touch xxx &#x6DFB;&#x52A0;&#x6587;&#x4EF6;xxx</span><br><span class="line">touch dm01.py</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/git2.png" alt="2"></p><h2 id="&#x67E5;&#x770B;&#x6587;&#x4EF6;&#x7684;&#x72B6;&#x6001;"><a href="#&#x67E5;&#x770B;&#x6587;&#x4EF6;&#x7684;&#x72B6;&#x6001;" class="headerlink" title="&#x67E5;&#x770B;&#x6587;&#x4EF6;&#x7684;&#x72B6;&#x6001;"></a><font size="4">&#x67E5;&#x770B;&#x6587;&#x4EF6;&#x7684;&#x72B6;&#x6001;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># git status &#x67E5;&#x770B;&#x6587;&#x4EF6;&#x72B6;&#x6001;(&#x8BE6;&#x7EC6;&#x53D9;&#x8FF0;)</span><br><span class="line"></span><br><span class="line"># git status -s &#x67E5;&#x770B;&#x6587;&#x4EF6;&#x72B6;&#x6001;(&#x7B80;&#x5199;)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/git3.png" alt="3"></p><h2 id="&#x5C06;&#x6587;&#x4EF6;&#x52A0;&#x5165;&#x6587;&#x4EF6;&#x7BA1;&#x7406;&#x5E93;"><a href="#&#x5C06;&#x6587;&#x4EF6;&#x52A0;&#x5165;&#x6587;&#x4EF6;&#x7BA1;&#x7406;&#x5E93;" class="headerlink" title="&#x5C06;&#x6587;&#x4EF6;&#x52A0;&#x5165;&#x6587;&#x4EF6;&#x7BA1;&#x7406;&#x5E93;"></a><font size="4">&#x5C06;&#x6587;&#x4EF6;&#x52A0;&#x5165;&#x6587;&#x4EF6;&#x7BA1;&#x7406;&#x5E93;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># git add xxx &#x5C06;xxx&#x6587;&#x4EF6;&#x52A0;&#x5165;&#x6587;&#x4EF6;&#x7BA1;&#x7406;&#x5E93;</span><br><span class="line">git add dm01.py</span><br><span class="line"></span><br><span class="line"># git add . &#x5C06;&#x6240;&#x6709;&#x6587;&#x4EF6;&#x52A0;&#x5165;&#x6587;&#x4EF6;&#x7BA1;&#x7406;&#x5E93;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/git4.png" alt="4"></p><h2 id="&#x63D0;&#x4EA4;&#x6587;&#x4EF6;"><a href="#&#x63D0;&#x4EA4;&#x6587;&#x4EF6;" class="headerlink" title="&#x63D0;&#x4EA4;&#x6587;&#x4EF6;"></a><font size="4">&#x63D0;&#x4EA4;&#x6587;&#x4EF6;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># git commit -m xxx yyy &#x63D0;&#x4EA4;yyy&#x6587;&#x4EF6;&#x5230;xxx&#x7248;&#x672C;&#x4E2D;&#xFF0C;&#x5982;&#x679C;&#x53EA;&#x6709;xxx&#xFF0C;&#x5219;&#x63D0;&#x4EA4;&#x5F53;&#x524D;&#x6240;&#x6709;&#x53EF;&#x63D0;&#x4EA4;&#x6587;&#x4EF6;&#x81F3;xxx&#x7248;&#x672C;</span><br><span class="line">git commit -m dm01.py</span><br><span class="line"></span><br><span class="line"># git commit --amend --no-edit xxx &#x5C06;xxx&#x6587;&#x4EF6;&#x6DFB;&#x52A0;&#x5230;&#x6700;&#x65B0;&#x7684;&#x7248;&#x672C;</span><br><span class="line"></span><br><span class="line"># git commit --amend -m xxx &#x4E3A;&#x6700;&#x540E;&#x7684;&#x7248;&#x672C;&#x6DFB;&#x52A0;xxx&#x8BF4;&#x660E;</span><br><span class="line"></span><br><span class="line"># git commit --amend &#x7F16;&#x8F91;&#x6587;&#x672C;&#x8BF4;&#x660E;</span><br><span class="line"></span><br><span class="line"># git commit -am xxx &#x5C06;&#x6240;&#x6709;&#x6587;&#x4EF6;&#x5148;&#x6DFB;&#x52A0;&#x4E3A;Staged&#x72B6;&#x6001;&#xFF0C;&#x518D;&#x8FDB;&#x884C;&#x63D0;&#x4EA4;&#xFF0C;&#x7B49;&#x4EF7;&#x4E8E;git add . + git commit -m xxx</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/git5.png" alt="5"></p><h2 id="&#x7F16;&#x8F91;&#x6587;&#x4EF6;"><a href="#&#x7F16;&#x8F91;&#x6587;&#x4EF6;" class="headerlink" title="&#x7F16;&#x8F91;&#x6587;&#x4EF6;"></a><font size="4">&#x7F16;&#x8F91;&#x6587;&#x4EF6;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># vim xxx &#x7528;vim&#x7F16;&#x8F91;xxx&#x6587;&#x4EF6;&#xFF0C;&#x6587;&#x4EF6;&#x72B6;&#x6001;&#x7531;Unmodified&#x53D8;&#x4E3A;Modified&#xFF0C;&#x518D;&#x6B21;&#x63D0;&#x4EA4;&#x65F6;&#x9700;&#x8981;&#x5148;add&#x53D8;&#x6210;Staged&#x72B6;&#x6001;</span><br><span class="line">vim dm01.py</span><br><span class="line"></span><br><span class="line">print(&apos;First addition!&apos;)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/git6.png" alt="6"></p><h2 id="&#x67E5;&#x770B;&#x4E4B;&#x524D;&#x5DF2;&#x63D0;&#x4EA4;&#x7684;&#x66F4;&#x6539;"><a href="#&#x67E5;&#x770B;&#x4E4B;&#x524D;&#x5DF2;&#x63D0;&#x4EA4;&#x7684;&#x66F4;&#x6539;" class="headerlink" title="&#x67E5;&#x770B;&#x4E4B;&#x524D;&#x5DF2;&#x63D0;&#x4EA4;&#x7684;&#x66F4;&#x6539;"></a><font size="4">&#x67E5;&#x770B;&#x4E4B;&#x524D;&#x5DF2;&#x63D0;&#x4EA4;&#x7684;&#x66F4;&#x6539;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># git log &#x67E5;&#x770B;&#x6587;&#x4EF6;&#x7684;&#x5177;&#x4F53;&#x4FE1;&#x606F;</span><br><span class="line"></span><br><span class="line"># git log --oneline &#x67E5;&#x770B;&#x6587;&#x4EF6;&#x7684;&#x7B80;&#x8981;&#x4FE1;&#x606F;</span><br><span class="line"></span><br><span class="line"># git log --graph &#x4EE5;&#x56FE;&#x7684;&#x5F62;&#x5F0F;&#x67E5;&#x770B;&#x6587;&#x4EF6;&#x7684;&#x5177;&#x4F53;&#x4FE1;&#x606F;</span><br><span class="line"></span><br><span class="line"># git log --graph --oneline &#x4EE5;&#x56FE;&#x7684;&#x5F62;&#x5F0F;&#x67E5;&#x770B;&#x6587;&#x4EF6;&#x7684;&#x7B80;&#x8981;&#x4FE1;&#x606F;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/git7.png" alt="7"></p><h2 id="&#x67E5;&#x770B;&#x4E4B;&#x524D;&#x66F4;&#x6539;&#x7684;&#x5185;&#x5BB9;"><a href="#&#x67E5;&#x770B;&#x4E4B;&#x524D;&#x66F4;&#x6539;&#x7684;&#x5185;&#x5BB9;" class="headerlink" title="&#x67E5;&#x770B;&#x4E4B;&#x524D;&#x66F4;&#x6539;&#x7684;&#x5185;&#x5BB9;"></a><font size="4">&#x67E5;&#x770B;&#x4E4B;&#x524D;&#x66F4;&#x6539;&#x7684;&#x5185;&#x5BB9;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># git diff &#x67E5;&#x770B;Modified&#x4E0E;&#x4E4B;&#x524D;&#x63D0;&#x4EA4;&#x7684;&#x533A;&#x522B;</span><br><span class="line"></span><br><span class="line"># git diff --cached &#x67E5;&#x770B;Stage&#x4E0E;&#x4E4B;&#x524D;&#x63D0;&#x4EA4;&#x7684;&#x533A;&#x522B;</span><br><span class="line"></span><br><span class="line"># git diff HEAD &#x540C;&#x65F6;&#x6709;Modified&#x548C;Stage&#x72B6;&#x6001;&#xFF0C;&#x67E5;&#x770B;&#x603B;&#x533A;&#x522B;</span><br><span class="line"></span><br><span class="line"># git diff ID1, ID2 &#x67E5;&#x770B;&#x4E24;&#x4E2A;&#x5386;&#x53F2;&#x5FEB;&#x7167;&#x7684;&#x533A;&#x522B;&#xFF0C;ID1&#x4E3A;&#x4E4B;&#x524D;&#x7684;&#xFF0C;ID2&#x662F;&#x540E;&#x9762;&#x7684;&#xFF0C;&#x5176;&#x4E2D;&#x8F93;&#x5165;git log --oneline&#x4E2D;&#x663E;&#x793A;&#x5728;&#x6700;&#x524D;&#x9762;&#x7684;&#x7F16;&#x53F7;&#x5373;&#x4E3A;ID</span><br><span class="line">git diff 84cefee 521a873</span><br><span class="line"></span><br><span class="line"># git diff ID &#x6BD4;&#x8F83;ID&#x4E0E;&#x5F53;&#x524D;&#x76EE;&#x5F55;&#x5185;&#x5BB9;</span><br><span class="line">git diff 84cefee</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/git8.png" alt="8"></p><h2 id="&#x5C06;&#x6587;&#x4EF6;&#x4ECE;Staged&#x72B6;&#x6001;&#x8FD4;&#x56DE;&#x81F3;Modified&#x72B6;&#x6001;"><a href="#&#x5C06;&#x6587;&#x4EF6;&#x4ECE;Staged&#x72B6;&#x6001;&#x8FD4;&#x56DE;&#x81F3;Modified&#x72B6;&#x6001;" class="headerlink" title="&#x5C06;&#x6587;&#x4EF6;&#x4ECE;Staged&#x72B6;&#x6001;&#x8FD4;&#x56DE;&#x81F3;Modified&#x72B6;&#x6001;"></a><font size="4">&#x5C06;&#x6587;&#x4EF6;&#x4ECE;Staged&#x72B6;&#x6001;&#x8FD4;&#x56DE;&#x81F3;Modified&#x72B6;&#x6001;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim dm01.py # &#x5C06;dm01&#x72B6;&#x6001;&#x53D8;&#x4E3A;&#x7EA2;&#x8272;&#x7684;M&#xFF0C;&#x5373;&#x4E3A;Modified&#x72B6;&#x6001;</span><br><span class="line"></span><br><span class="line">git add dm01.py #&#x5C06;dm01&#x4ECE;&#x7EA2;&#x8272;&#x7684;M&#x53D8;&#x6210;&#x7EFF;&#x8272;&#x7684;M&#xFF0C;&#x5373;&#x4E3A;Staged&#x72B6;&#x6001;</span><br><span class="line"></span><br><span class="line"># git reset xxx &#x5C06;xxx&#x4ECE;Staged&#x72B6;&#x6001;&#x8FD4;&#x56DE;&#x81F3;Modified&#x72B6;&#x6001;</span><br><span class="line">git reset dm01.py</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/git9.png" alt="9"></p><h2 id="&#x67E5;&#x770B;&#x6BCF;&#x4E00;&#x6B65;&#x7684;&#x53D8;&#x5316;"><a href="#&#x67E5;&#x770B;&#x6BCF;&#x4E00;&#x6B65;&#x7684;&#x53D8;&#x5316;" class="headerlink" title="&#x67E5;&#x770B;&#x6BCF;&#x4E00;&#x6B65;&#x7684;&#x53D8;&#x5316;"></a><font size="4">&#x67E5;&#x770B;&#x6BCF;&#x4E00;&#x6B65;&#x7684;&#x53D8;&#x5316;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># git reflog &#x67E5;&#x770B;&#x5BF9;&#x6587;&#x4EF6;&#x5939;&#x8FDB;&#x884C;&#x7684;&#x6240;&#x6709;&#x64CD;&#x4F5C;&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;&#x5F97;&#x5230;ID&#x53F7;&#x548C;&#x5BF9;&#x5E94;&#x7684;&#x6307;&#x9488;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/git10.png" alt="10"></p><h2 id="&#x56DE;&#x5230;&#x8FC7;&#x53BB;"><a href="#&#x56DE;&#x5230;&#x8FC7;&#x53BB;" class="headerlink" title="&#x56DE;&#x5230;&#x8FC7;&#x53BB;"></a><font size="4">&#x56DE;&#x5230;&#x8FC7;&#x53BB;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># git reset --method HEAD~n &#x56DE;&#x5230;&#x524D;n&#x4E2A;&#x7248;&#x672C;&#xFF0C;method=soft&#x4E3A;&#x56DE;&#x6EDA;&#x5FEB;&#x7167;&#xFF0C;&#x79FB;&#x52A8;HEAD&#x6307;&#x5411;(&#x4ED3;&#x5E93;&#x533A;&#x57DF;)&#xFF0C;method=mixed(&#x9ED8;&#x8BA4;)&#x4E3A;&#x5C06;&#x5FEB;&#x7167;&#x56DE;&#x6EDA;&#x5230;&#x4E34;&#x65F6;&#x533A;&#x57DF;&#xFF0C;method=hard&#x5C06;&#x5FEB;&#x7167;&#x8FD8;&#x539F;&#x5230;&#x5DE5;&#x4F5C;&#x533A;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x6253;&#x5F00;&#x6587;&#x4EF6;&#x770B;&#x5230;</span><br><span class="line"></span><br><span class="line"># git reset --method ID/point &#x56DE;&#x5230;&#x6307;&#x5B9A;&#x7684;&#x6587;&#x4EF6;&#x53F7;/&#x6307;&#x9488;&#xFF0C;method&#x540C;&#x4E0A;</span><br><span class="line"></span><br><span class="line"># git checkout ID -- xxx &#x5BF9;xxx&#x6587;&#x4EF6;&#x56DE;&#x5230;ID&#x72B6;&#x6001;&#xFF0C;&#x5185;&#x5BB9;&#x4E5F;&#x4F1A;&#x6539;&#x53D8;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/git11.png" alt="11"></p><h2 id="&#x521B;&#x5EFA;&#x5206;&#x652F;"><a href="#&#x521B;&#x5EFA;&#x5206;&#x652F;" class="headerlink" title="&#x521B;&#x5EFA;&#x5206;&#x652F;"></a><font size="4">&#x521B;&#x5EFA;&#x5206;&#x652F;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># git branch &#x67E5;&#x770B;&#x6240;&#x6709;&#x5206;&#x652F;&#x548C;&#x5F53;&#x524D;&#x6240;&#x5904;&#x5206;&#x652F;</span><br><span class="line"></span><br><span class="line"># git branch xxx &#x521B;&#x5EFA;xxx&#x5206;&#x652F;</span><br><span class="line">git branch br01</span><br><span class="line"></span><br><span class="line"># git checkout -b xxx &#x521B;&#x5EFA;xxx&#x5206;&#x652F;</span><br><span class="line">git checkout -b br02</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/git12.png" alt="12"></p><h2 id="&#x5207;&#x6362;&#x5206;&#x652F;"><a href="#&#x5207;&#x6362;&#x5206;&#x652F;" class="headerlink" title="&#x5207;&#x6362;&#x5206;&#x652F;"></a><font size="4">&#x5207;&#x6362;&#x5206;&#x652F;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># git checkout xxx &#x5207;&#x6362;&#x5230;xxx&#x5206;&#x652F;</span><br><span class="line">git checkout br01</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/git13.png" alt="13"></p><h2 id="&#x5220;&#x9664;&#x5206;&#x652F;"><a href="#&#x5220;&#x9664;&#x5206;&#x652F;" class="headerlink" title="&#x5220;&#x9664;&#x5206;&#x652F;"></a><font size="4">&#x5220;&#x9664;&#x5206;&#x652F;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># git branch -d xxx &#x5220;&#x9664;xxx&#x5206;&#x652F;&#xFF0C;&#x5220;&#x9664;&#x65F6;&#x4E0D;&#x80FD;&#x4F4D;&#x4E8E;&#x8BE5;&#x5206;&#x652F;&#xFF0C;&#x8BE5;&#x65B9;&#x6CD5;&#x4E0D;&#x80FD;&#x5220;&#x9664;&#x672A;&#x5408;&#x5E76;&#x7684;&#x5206;&#x652F;</span><br><span class="line">git branch -d br02</span><br><span class="line"></span><br><span class="line"># git branch -D xxx &#x5220;&#x9664;&#x672A;&#x5408;&#x5E76;&#x7684;xxx&#x5206;&#x652F;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/git14.png" alt="14"></p><h2 id="&#x5408;&#x5E76;&#x5206;&#x652F;"><a href="#&#x5408;&#x5E76;&#x5206;&#x652F;" class="headerlink" title="&#x5408;&#x5E76;&#x5206;&#x652F;"></a><font size="4">&#x5408;&#x5E76;&#x5206;&#x652F;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># git merge xxx &#x5728;&#x5F53;&#x524D;&#x5206;&#x652F;&#x4E0B;&#xFF0C;&#x5408;&#x5E76;xxx&#x5206;&#x652F;</span><br><span class="line">git merge br01</span><br><span class="line"></span><br><span class="line"># &#x5982;&#x679C;&#x5728;&#x65B0;&#x5206;&#x652F;&#x91CC;&#x9762;&#x4FEE;&#x6539;&#x63D0;&#x4EA4;&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x5728;&#x539F;&#x5206;&#x652F;&#x4E5F;&#x7ECF;&#x8FC7;&#x4E86;&#x4FEE;&#x6539;&#x63D0;&#x4EA4;&#xFF0C;&#x5219;&#x4F1A;&#x51FA;&#x73B0;&#x62A5;&#x9519;&#xFF0C;&#x9700;&#x8981;&#x624B;&#x52A8;&#x4FEE;&#x6539;&#x6587;&#x4EF6;&#x5185;&#x5BB9;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x6DFB;&#x52A0;&#x63D0;&#x4EA4;&#x5373;&#x53EF;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/git15.png" alt="15"></p><h2 id="&#x67E5;&#x770B;&#x5DF2;&#x5408;&#x5E76;&#x7684;&#x5206;&#x652F;&#x548C;&#x672A;&#x5408;&#x5E76;&#x7684;&#x5206;&#x652F;"><a href="#&#x67E5;&#x770B;&#x5DF2;&#x5408;&#x5E76;&#x7684;&#x5206;&#x652F;&#x548C;&#x672A;&#x5408;&#x5E76;&#x7684;&#x5206;&#x652F;" class="headerlink" title="&#x67E5;&#x770B;&#x5DF2;&#x5408;&#x5E76;&#x7684;&#x5206;&#x652F;&#x548C;&#x672A;&#x5408;&#x5E76;&#x7684;&#x5206;&#x652F;"></a><font size="4">&#x67E5;&#x770B;&#x5DF2;&#x5408;&#x5E76;&#x7684;&#x5206;&#x652F;&#x548C;&#x672A;&#x5408;&#x5E76;&#x7684;&#x5206;&#x652F;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># git branch --merged &#x67E5;&#x770B;&#x5DF2;&#x5408;&#x5E76;&#x7684;&#x5206;&#x652F;</span><br><span class="line"></span><br><span class="line">#git branch --no-merged &#x67E5;&#x770B;&#x672A;&#x5408;&#x5E76;&#x7684;&#x5206;&#x652F;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/git16.png" alt="16"></p><h2 id="&#x6362;&#x57FA;&#x64CD;&#x4F5C;"><a href="#&#x6362;&#x57FA;&#x64CD;&#x4F5C;" class="headerlink" title="&#x6362;&#x57FA;&#x64CD;&#x4F5C;"></a><font size="4">&#x6362;&#x57FA;&#x64CD;&#x4F5C;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># git rebase xxx &#x5F53;&#x4E00;&#x4E2A;&#x5206;&#x652F;&#x6DFB;&#x52A0;&#x529F;&#x80FD;&#x65F6;&#xFF0C;&#x6B64;&#x65F6;&#x5982;&#x679C;&#x4E3B;&#x5206;&#x652F;&#x53D1;&#x751F;&#x4FEE;&#x6539;&#xFF0C;&#x5F00;&#x53D1;&#x4EBA;&#x5458;&#x60F3;&#x57FA;&#x4E8E;&#x4FEE;&#x6539;&#x8FC7;&#x7684;&#x4E3B;&#x5206;&#x652F;&#x63A5;&#x7740;&#x6DFB;&#x52A0;&#x529F;&#x80FD;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x6362;&#x57FA;&#x64CD;&#x4F5C;&#xFF0C;&#x7D27;&#x63A5;&#x7740;xxx&#x4E4B;&#x540E;&#x8FDB;&#x884C;&#x4FEE;&#x6539;</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x6682;&#x5B58;&#x533A;"><a href="#&#x6682;&#x5B58;&#x533A;" class="headerlink" title="&#x6682;&#x5B58;&#x533A;"></a><font size="4">&#x6682;&#x5B58;&#x533A;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># git stash &#x5C06;&#x73B0;&#x5728;&#x7684;&#x6587;&#x4EF6;&#x653E;&#x5230;&#x6682;&#x5B58;&#x533A;&#x4E2D;(&#x5206;&#x652F;&#x4E2D;&#x5B58;&#x5728;&#x672A;&#x63D0;&#x4EA4;&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x65E0;&#x6CD5;&#x5207;&#x6362;&#x5206;&#x652F;&#x3002;&#x6B64;&#x65F6;&#x53EF;&#x4EE5;&#x5C06;&#x73B0;&#x5728;&#x7684;&#x6587;&#x4EF6;&#x653E;&#x5230;&#x6682;&#x5B58;&#x533A;&#x4E2D;&#xFF0C;&#x7136;&#x540E;&#x5207;&#x6362;&#x5206;&#x652F;)&#x3002;</span><br><span class="line"></span><br><span class="line"># git stash list &#x67E5;&#x770B;&#x6682;&#x5B58;&#x533A;&#x7684;&#x6587;&#x4EF6;</span><br><span class="line"></span><br><span class="line"># git stash apply stash@{n} &#x4ECE;&#x6682;&#x5B58;&#x533A;&#x4E2D;&#x6062;&#x590D;&#x7F16;&#x53F7;&#x4E3A;n&#x7684;&#x6587;&#x4EF6;(&#x9ED8;&#x8BA4;&#x4E3A;&#x6700;&#x8FD1;&#x4E00;&#x4E2A;)&#xFF0C;&#x6682;&#x5B58;&#x533A;&#x6587;&#x4EF6;&#x4E0D;&#x53D8;</span><br><span class="line"></span><br><span class="line"># git stash drop stash@{n} &#x4ECE;&#x6682;&#x5B58;&#x533A;&#x4E2D;&#x5220;&#x9664;&#x7F16;&#x53F7;&#x4E3A;n&#x7684;&#x6587;&#x4EF6;(&#x9ED8;&#x8BA4;&#x4E3A;&#x6700;&#x8FD1;&#x4E00;&#x4E2A;)</span><br><span class="line"></span><br><span class="line"># git stash pop &#x4ECE;&#x6682;&#x5B58;&#x533A;&#x4E2D;&#x53D6;&#x51FA;&#x6700;&#x8FD1;&#x7684;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#xFF0C;&#x6682;&#x5B58;&#x533A;&#x4E2D;&#x5C11;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;&#x6808;&#x7684;pop&#xFF0C;&#x7B49;&#x4EF7;&#x4E8E;git stash apply + git stash drop</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/git17.png" alt="17"></p><h2 id="&#x94FE;&#x63A5;&#x5230;GitHub"><a href="#&#x94FE;&#x63A5;&#x5230;GitHub" class="headerlink" title="&#x94FE;&#x63A5;&#x5230;GitHub"></a><font size="4">&#x94FE;&#x63A5;&#x5230;GitHub</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># &#x6253;&#x5F00;GitHub&#xFF0C;&#x5E76;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x4ED3;&#x5E93;</span><br><span class="line"></span><br><span class="line"># git remote add origin xxx &#x94FE;&#x63A5;&#x5230;&#x8FDC;&#x7A0B;xxx&#x5730;&#x5740;&#xFF0C;&#x5373;&#x4E3A;GitHub&#x4ED3;&#x5E93;&#x5730;&#x5740;</span><br><span class="line"></span><br><span class="line"># git push -u origin yyy &#x5C06;yyy&#x5206;&#x652F;&#x63A8;&#x4E0A;&#x53BB;&#xFF0C;&#x4E00;&#x822C;&#x662F;master&#x5206;&#x652F;</span><br></pre></td></tr></tbody></table></figure><h2 id="Git&#x4E09;&#x4E2A;&#x533A;&#x57DF;"><a href="#Git&#x4E09;&#x4E2A;&#x533A;&#x57DF;" class="headerlink" title="Git&#x4E09;&#x4E2A;&#x533A;&#x57DF;"></a><font size="4">Git&#x4E09;&#x4E2A;&#x533A;&#x57DF;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># &#x5DE5;&#x4F5C;&#x533A;&#x57DF;&#xFF1A;&#x5B58;&#x653E;&#x9879;&#x76EE;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x53EF;&#x4EE5;&#x89C2;&#x5BDF;&#x5230;&#x7684;&#x6587;&#x4EF6;&#x5939;&#x5373;&#x4E3A;&#x5DE5;&#x4F5C;&#x533A;&#x57DF;&#xFF0C;&#x4FEE;&#x6539;&#x7684;&#x5185;&#x5BB9;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x6253;&#x5F00;&#x6587;&#x4EF6;&#x770B;&#x5230;</span><br><span class="line"></span><br><span class="line"># &#x4E34;&#x65F6;&#x533A;&#x57DF;&#xFF1A;stage&#x533A;&#x57DF;&#xFF0C;&#x7528;&#x4E8E;&#x4E34;&#x65F6;&#x5B58;&#x653E;&#x6539;&#x52A8;&#xFF0C;&#x5373;&#x5C06;&#x63D0;&#x4EA4;&#x7684;&#x533A;&#x57DF;</span><br><span class="line"></span><br><span class="line"># &#x4ED3;&#x5E93;&#x533A;&#x57DF;&#xFF1A;&#x6700;&#x7EC8;&#x5B58;&#x653E;&#x7684;&#x7248;&#x672C;&#x6570;&#x636E;&#xFF0C;HEAD&#x6307;&#x5411;&#x6700;&#x7EC8;&#x63D0;&#x4EA4;&#x7684;&#x5185;&#x5BB9;</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x5220;&#x9664;&#x6587;&#x4EF6;"><a href="#&#x5220;&#x9664;&#x6587;&#x4EF6;" class="headerlink" title="&#x5220;&#x9664;&#x6587;&#x4EF6;"></a><font size="4">&#x5220;&#x9664;&#x6587;&#x4EF6;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># git rm &#x5220;&#x9664;&#x5DE5;&#x4F5C;&#x533A;&#x57DF;&#x548C;&#x4E34;&#x65F6;&#x533A;&#x57DF;&#x4E2D;&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x4F46;&#x662F;&#x4ED3;&#x5E93;&#x533A;&#x57DF;&#x4F9D;&#x7136;&#x53EF;&#x4EE5;&#x770B;&#x5230;</span><br><span class="line"></span><br><span class="line"># git rm -f &#x5F3A;&#x884C;&#x5220;&#x9664;&#x5DE5;&#x4F5C;&#x533A;&#x57DF;&#x548C;&#x4E34;&#x65F6;&#x533A;&#x57DF;&#x4E2D;&#x7684;&#x6587;&#x4EF6;</span><br><span class="line">git rm -f dm01.py</span><br><span class="line"></span><br><span class="line"># git rm --cached &#x5220;&#x9664;&#x4E34;&#x65F6;&#x533A;&#x7684;&#x6587;&#x4EF6;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/git18.png" alt="18"></p><h2 id="&#x4FEE;&#x6539;&#x6587;&#x4EF6;&#x540D;"><a href="#&#x4FEE;&#x6539;&#x6587;&#x4EF6;&#x540D;" class="headerlink" title="&#x4FEE;&#x6539;&#x6587;&#x4EF6;&#x540D;"></a><font size="4">&#x4FEE;&#x6539;&#x6587;&#x4EF6;&#x540D;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># git mv old_name new_name &#x5C06;&#x539F;&#x6587;&#x4EF6;&#x540D;old_name&#x6362;&#x4E3A;new_name</span><br><span class="line">git mv dm02.py dm03.py</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/SKILL/git19.png" alt="19"></p><h1 id="Git&#x5C0F;&#x7ED3;"><a href="#Git&#x5C0F;&#x7ED3;" class="headerlink" title="Git&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Git&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;Git&#x4F5C;&#x4E3A;&#x5F53;&#x4E0B;&#x6700;&#x7EA2;&#x7684;&#x5206;&#x5E03;&#x5F0F;&#x7248;&#x672C;&#x63A7;&#x5236;&#x7CFB;&#x7EDF;&#xFF0C;&#x4F7F;&#x5F97;&#x7A0B;&#x5E8F;&#x5458;&#x4E4B;&#x95F4;&#x7684;&#x534F;&#x4F5C;&#x66F4;&#x4E3A;&#x65B9;&#x4FBF;&#xFF0C;&#x56E0;&#x6B64;&#x5404;&#x5927;&#x516C;&#x53F8;&#x90FD;&#x4F7F;&#x7528;Git&#x4F5C;&#x4E3A;&#x4E00;&#x9879;&#x5FC5;&#x5907;&#x6280;&#x80FD;&#x3002;&#x56E0;&#x4E3A;Git&#x7684;&#x547D;&#x4EE4;&#x5927;&#x591A;&#x4E3A;Linux&#x8BED;&#x8A00;&#xFF0C;&#x6240;&#x4EE5;&#x4E60;&#x60EF;&#x4E8E;Windows&#x5E73;&#x53F0;&#x7684;&#x7528;&#x6237;&#x9700;&#x8981;&#x591A;&#x591A;&#x7EC3;&#x4E60;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Git&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="程序员必备技能" scheme="https://USTCcoder.github.io/categories/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>Python介绍</title>
    <link href="https://USTCcoder.github.io/2019/09/10/python_introduction/"/>
    <id>https://USTCcoder.github.io/2019/09/10/python_introduction/</id>
    <published>2019-09-10T00:17:15.000Z</published>
    <updated>2019-09-19T12:13:54.328Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/LANGUAGE/python.jpg" alt="0"></p><h1 id="python&#x7531;&#x6765;"><a href="#python&#x7531;&#x6765;" class="headerlink" title="python&#x7531;&#x6765;"></a><font size="5" color="red">python&#x7531;&#x6765;</font></h1><p>&#x2003;&#x2003;python&#x662F;&#x7531;&#x8377;&#x5170;&#x4EBA;Python&#x7684;&#x521B;&#x59CB;&#x4EBA;&#x4E3A;&#x8377;&#x5170;&#x4EBA;&#x5409;&#x591A;&#xB7;&#x8303;&#x7F57;&#x82CF;&#x59C6;(Guido van Rossum)&#x3002;1989&#x5E74;&#x5723;&#x8BDE;&#x8282;&#x671F;&#x95F4;&#xFF0C;&#x5728;&#x963F;&#x59C6;&#x65AF;&#x7279;&#x4E39;&#xFF0C;Guido&#x4E3A;&#x4E86;&#x6253;&#x53D1;&#x5723;&#x8BDE;&#x8282;&#x7684;&#x65E0;&#x8DA3;&#xFF0C;&#x51B3;&#x5FC3;&#x5F00;&#x53D1;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x811A;&#x672C;&#x89E3;&#x91CA;&#x7A0B;&#x5E8F;&#x3002;&#x9009;&#x4E2D;Python&#x4F5C;&#x4E3A;&#x8BE5;&#x7F16;&#x7A0B;&#x8BED;&#x8A00;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x662F;&#x53D6;&#x81EA;&#x82F1;&#x56FD;20&#x4E16;&#x7EAA;70&#x5E74;&#x4EE3;&#x9996;&#x64AD;&#x7684;&#x7535;&#x89C6;&#x559C;&#x5267;(Monty Python&#x2019;s Flying Circus)<br><a id="more"></a></p><h1 id="&#x8BED;&#x8A00;&#x7684;&#x6BD4;&#x8F83;"><a href="#&#x8BED;&#x8A00;&#x7684;&#x6BD4;&#x8F83;" class="headerlink" title="&#x8BED;&#x8A00;&#x7684;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x8BED;&#x8A00;&#x7684;&#x6BD4;&#x8F83;</font></h1><p>&#x2003;&#x2003;<font size="3">&#x5C06;&#x5176;&#x4ED6;&#x8BED;&#x8A00;&#x7FFB;&#x8BD1;&#x6210;&#x673A;&#x5668;&#x8BED;&#x8A00;&#x7684;&#x5DE5;&#x5177;&#x79F0;&#x4E3A;&#x7F16;&#x8BD1;&#x5668;&#xFF0C;&#x7F16;&#x8BD1;&#x7684;&#x65B9;&#x5F0F;&#x6709;&#x4E24;&#x79CD;&#xFF0C;&#x4E00;&#x79CD;&#x662F;&#x7F16;&#x8BD1;&#xFF0C;&#x4E00;&#x79CD;&#x662F;&#x89E3;&#x91CA;</font><br>&#x2003;&#x2003;<font size="3">&#x7F16;&#x8BD1;&#x578B;&#x8BED;&#x8A00;&#xFF1A;C/C++&#xFF0C;Pascal&#x7B49;&#x8BED;&#x8A00;&#x90FD;&#x5C5E;&#x4E8E;&#x7F16;&#x8BD1;&#x578B;&#x8BED;&#x8A00;&#xFF0C;&#x5148;&#x7531;&#x7F16;&#x8BD1;&#x5668;&#x751F;&#x6210;&#x53EF;&#x6267;&#x884C;&#x6587;&#x4EF6;&#xFF0C;&#x8FD0;&#x884C;&#x65F6;&#x4E0D;&#x9700;&#x8981;&#x91CD;&#x65B0;&#x7F16;&#x8BD1;&#xFF0C;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#x7F16;&#x8BD1;&#x7684;&#x7ED3;&#x679C;&#x5373;&#x53EF;&#xFF0C;&#x56E0;&#x6B64;&#x7A0B;&#x5E8F;&#x6267;&#x884C;&#x6548;&#x7387;&#x9AD8;&#xFF0C;&#x8DE8;&#x5E73;&#x53F0;&#x80FD;&#x529B;&#x5DEE;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x89E3;&#x91CA;&#x578B;&#x8BED;&#x8A00;&#xFF1A;Java&#xFF0C;Python&#x7B49;&#x8BED;&#x8A00;&#x90FD;&#x5C5E;&#x4E8E;&#x89E3;&#x91CA;&#x578B;&#x8BED;&#x8A00;&#xFF0C;&#x8FD0;&#x884C;&#x65F6;&#x7531;&#x89E3;&#x91CA;&#x5668;&#x9010;&#x884C;&#x89E3;&#x91CA;&#x6BCF;&#x4E00;&#x53E5;&#x6E90;&#x4EE3;&#x7801;&#xFF0C;&#x6BCF;&#x6B21;&#x8FD0;&#x884C;&#x90FD;&#x9700;&#x8981;&#x89E3;&#x91CA;&#x4E00;&#x6B21;&#xFF0C;&#x56E0;&#x6B64;&#x7A0B;&#x5E8F;&#x6267;&#x884C;&#x6548;&#x7387;&#x4F4E;&#xFF0C;&#x8DE8;&#x5E73;&#x53F0;&#x80FD;&#x529B;&#x5F3A;&#x3002;</font><br><img src="/images/LANGUAGE/python1.jpg" alt="1"></p><h1 id="Python&#x4E0E;C-C-&#x7684;&#x5177;&#x4F53;&#x533A;&#x522B;"><a href="#Python&#x4E0E;C-C-&#x7684;&#x5177;&#x4F53;&#x533A;&#x522B;" class="headerlink" title="Python&#x4E0E;C/C++&#x7684;&#x5177;&#x4F53;&#x533A;&#x522B;"></a><font size="5" color="red">Python&#x4E0E;C/C++&#x7684;&#x5177;&#x4F53;&#x533A;&#x522B;</font></h1><p>&#x2003;&#x2003;<font size="3">&#xFF08;1&#xFF09;&#x4EE3;&#x7801;&#x683C;&#x5F0F;&#xFF0C;Python&#x4E2D;&#x7684;&#x4EE3;&#x7801;&#x5757;&#x4EE5;&#x7F29;&#x8FDB;&#x6807;&#x5FD7;&#xFF0C;&#x5177;&#x6709;&#x76F8;&#x540C;&#x7F29;&#x8FDB;&#x7684;&#x5904;&#x4E8E;&#x540C;&#x4E00;&#x4EE3;&#x7801;&#x5757;&#xFF0C;&#x800C;C/C++&#x4EE5;&#x82B1;&#x62EC;&#x53F7;&#x5BF9;{}&#x6807;&#x5FD7;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;2&#xFF09;&#x6CE8;&#x91CA;&#x5F62;&#x5F0F;&#xFF0C;Python&#x4E2D;&#x7684;&#x6CE8;&#x91CA;&#x4EE5;#&#x5F00;&#x59CB;&#x6216;&#x8005;&#x4EE5;&#x2019;&#x2019;&#x2019;xxx&#x2019;&#x2019;&#x2019;&#x5B8C;&#x6210;&#x5927;&#x6BB5;&#x6CE8;&#x91CA;&#xFF0C;&#x800C;C/C++&#x4EE5;&#x53CC;&#x659C;&#x6760;//&#x6807;&#x5FD7;&#x6216;&#x8005;/<em>xxx</em>/&#x5B8C;&#x6210;&#x5927;&#x6BB5;&#x6CE8;&#x91CA;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;3&#xFF09;&#x5B9A;&#x4E49;&#x53D8;&#x91CF;&#xFF0C;Python&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x8D4B;&#x503C;a=5&#xFF0C;&#x800C;C/C++&#x5FC5;&#x987B;&#x5199;int a=5&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;4&#xFF09;&#x8D4B;&#x503C;&#x64CD;&#x4F5C;&#xFF0C;Python&#x53EF;&#x4EE5;&#x540C;&#x65F6;&#x8D4B;&#x503C;&#x591A;&#x4E2A;a, b=5, 6&#xFF0C;&#x800C;C/C++&#x53EA;&#x80FD;&#x5355;&#x72EC;&#x8D4B;&#x503C;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;5&#xFF09;&#x9664;&#x6CD5;&#x64CD;&#x4F5C;&#xFF0C;Python&#x4E2D;&#x5BF9;&#x4E24;&#x4E2A;&#x6574;&#x6570;&#x8FDB;&#x884C;&#x9664;&#x6CD5;&#x65F6;&#xFF0C;&#x7ED3;&#x679C;&#x53EF;&#x4EE5;&#x4E3A;&#x5C0F;&#x6570;&#xFF0C;3 / 5 =0.6&#xFF0C;&#x800C;C/C++&#x7ED3;&#x679C;&#x4E3A;0&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;6&#xFF09;&#x4E58;&#x65B9;&#x64CD;&#x4F5C;&#xFF0C;Python&#x4E2D;**&#x8868;&#x793A;&#x4E58;&#x65B9;&#xFF0C;&#x800C;C/C++&#x6CA1;&#x6709;&#x4E58;&#x65B9;&#x64CD;&#x4F5C;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;7&#xFF09;&#x903B;&#x8F91;&#x64CD;&#x4F5C;&#xFF0C;Python&#x4E2D;and&#xFF0C;or&#xFF0C;not&#x8868;&#x793A;&#x4E0E;&#x6216;&#x975E;&#xFF0C;&#x800C;C/C++&#x7528;&amp;&amp;&#xFF0C;||&#xFF0C;!&#x8868;&#x793A;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;8&#xFF09;&#x6761;&#x4EF6;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;Python&#x4E2D;x if condition else y &#x5224;&#x65AD;condition&#x4E3A;&#x6761;&#x4EF6;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x800C;C/C++&#x7528;condition?x:y&#x8868;&#x793A;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;9&#xFF09;&#x6761;&#x4EF6;&#x8BED;&#x53E5;&#xFF0C;Python&#x4E2D;if &#x2026; elif&#x2026; else &#x2026;&#xFF0C;&#x800C;C/C++&#x7528;if &#x2026; else if &#x2026; else &#x2026;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;10&#xFF09;&#x81EA;&#x52A0;&#x81EA;&#x51CF;&#xFF0C;Python&#x4E2D;&#x6CA1;&#x6709;i++&#x6216;&#x8005;++i&#xFF0C;&#x800C;C/C++&#x6709;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;11&#xFF09;do &#x2026; while&#x8BED;&#x53E5;&#xFF0C;Python&#x4E2D;&#x6CA1;&#x6709;do &#x2026; while&#x8BED;&#x53E5;&#xFF0C;&#x800C;C/C++&#x6709;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;12&#xFF09;&#x5927;&#x6570;&#x5B57;&#x8FD0;&#x7B97;&#xFF0C;Python&#x4E2D;&#x652F;&#x6301;&#x5927;&#x6574;&#x6570;&#x7684;&#x8FD0;&#x7B97;&#xFF0C;&#x800C;C/C++&#x6709;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x7684;&#x9650;&#x5236;&#xFF0C;&#x4E00;&#x65E6;&#x8D85;&#x8FC7;&#x8303;&#x56F4;&#x4F1A;&#x51FA;&#x73B0;&#x95EE;&#x9898;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;13&#xFF09;&#xFF1A;&#x8FD0;&#x7B97;&#xFF0C;Python&#x4E2D;&#x652F;&#x6301;&#x5192;&#x53F7;&#x8FD0;&#x7B97;&#x83B7;&#x53D6;&#x8FDE;&#x7EED;&#x7D22;&#x5F15;&#xFF0C;&#x800C;C/C++&#x5192;&#x53F7;&#x548C;&#x95EE;&#x53F7;&#x4E00;&#x8D77;&#x4F5C;&#x4E3A;&#x4E09;&#x76EE;&#x8FD0;&#x7B97;&#x7B26;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;14&#xFF09;&#x7D22;&#x5F15;&#x64CD;&#x4F5C;&#xFF0C;Python&#x4E2D;&#x652F;&#x6301;&#x8D1F;&#x6570;&#x7D22;&#x5F15;&#xFF0C;-1&#x4EE3;&#x8868;&#x6700;&#x597D;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x800C;C/C++&#x4E0D;&#x652F;&#x6301;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;15&#xFF09;&#x5185;&#x7F6E;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;Python&#x4E2D;&#x5177;&#x6709;&#x5F88;&#x591A;&#x975E;&#x5E38;&#x597D;&#x7528;&#x7684;&#x5185;&#x7F6E;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x5982;&#x5217;&#x8868;&#xFF0C;&#x5143;&#x7EC4;&#xFF0C;&#x5B57;&#x5178;&#x7B49;&#xFF0C;&#x800C;C/C++&#x6CA1;&#x6709;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;16&#xFF09;&#x5185;&#x7F6E;&#x51FD;&#x6570;&#xFF0C;Python&#x4E2D;&#x5177;&#x6709;&#x5F88;&#x591A;&#x975E;&#x5E38;&#x597D;&#x7528;&#x7684;&#x5185;&#x7F6E;&#x51FD;&#x6570;&#xFF0C;&#x5982;len(), sorted()&#x7B49;&#xFF0C;&#x800C;C/C++&#x6CA1;&#x6709;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;17&#xFF09;&#x5185;&#x7F6E;&#x8BED;&#x6CD5;&#x7ED3;&#x6784;&#xFF0C;Python&#x4E2D;&#x5177;&#x6709;&#x5F88;&#x591A;&#x975E;&#x5E38;&#x597D;&#x7528;&#x7684;&#x5185;&#x7F6E;&#x8BED;&#x6CD5;&#x7ED3;&#x6784;&#xFF0C;&#x5982;with&#x8BED;&#x6CD5;&#xFF0C;lambda&#x8868;&#x8FBE;&#x5F0F;&#x7B49;&#xFF0C;&#x800C;C/C++&#x6CA1;&#x6709;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;18&#xFF09;&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x503C;&#xFF0C;Python&#x4E2D;&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x503C;&#x53EF;&#x4EE5;&#x540C;&#x65F6;&#x8FD4;&#x56DE;&#x591A;&#x4E2A;&#x503C;&#xFF0C;&#x800C;C/C++&#x53EA;&#x80FD;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;19&#xFF09;&#x51FD;&#x6570;&#x5B9A;&#x4E49;&#xFF0C;Python&#x4E2D;&#x7528;def&#x52A0;&#x51FD;&#x6570;&#x540D;&#x5B9A;&#x4E49;&#xFF0C;&#x4E14;&#x8F93;&#x5165;&#x53C2;&#x6570;&#x6CA1;&#x6709;&#x7C7B;&#x578B;&#x540D;&#xFF0C;&#x800C;C/C++&#x5FC5;&#x987B;&#x5148;&#x5199;&#x8FD4;&#x56DE;&#x503C;&#x7684;&#x7C7B;&#x578B;&#x540D;&#x52A0;&#x51FD;&#x6570;&#x540D;&#xFF0C;&#x4E14;&#x8F93;&#x5165;&#x53C2;&#x6570;&#x4E5F;&#x5FC5;&#x987B;&#x6709;&#x7C7B;&#x578B;&#x540D;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;20&#xFF09;&#x5B8F;&#x5B9A;&#x4E49;&#xFF0C;Python&#x4E2D;&#x6CA1;&#x6709;&#x5B8F;&#x5B9A;&#x4E49;&#xFF0C;&#x800C;C/C++&#x53EF;&#x4EE5;&#x4F7F;&#x7528;define&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;21&#xFF09;&#x6307;&#x9488;&#xFF0C;Python&#x4E2D;&#x6CA1;&#x6709;&#x6307;&#x9488;&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x800C;C/C++&#x6307;&#x9488;&#x662F;&#x6700;&#x91CD;&#x8981;&#x4E5F;&#x662F;&#x6700;&#x590D;&#x6742;&#x7684;&#x5185;&#x5BB9;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;22&#xFF09;else&#xFF0C;Python&#x4E2D;else&#x53EF;&#x4EE5;&#x548C;if, while, for, try&#x7ED3;&#x5408;&#xFF0C;&#x800C;C/C++else&#x4E00;&#x822C;&#x548C;if&#x7ED3;&#x5408;&#x5728;&#x4E00;&#x8D77;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;23&#xFF09;pass&#xFF0C;Python&#x4E2D;pass&#x4EE3;&#x8868;&#x540E;&#x9762;&#x6CA1;&#x6709;&#x5185;&#x5BB9;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x7528;&#x4E09;&#x4E2A;&#x5C0F;&#x6570;&#x70B9;(&#x2026;)&#x8868;&#x793A;&#xFF0C;&#x800C;C/C++&#x6CA1;&#x6709;pass&#xFF0C;&#x540E;&#x9762;&#x6CA1;&#x6709;&#x4EE3;&#x7801;&#x4EE3;&#x8868;&#x6CA1;&#x6709;&#x5185;&#x5BB9;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;24&#xFF09;&#x5BFC;&#x5165;&#x6A21;&#x5757;&#xFF0C;Python&#x4E2D;&#x4F7F;&#x7528;import&#x5BFC;&#x5165;&#x6A21;&#x5757;&#xFF0C;&#x800C;C/C++&#x4F7F;&#x7528;include&#x5BFC;&#x5165;&#x6A21;&#x5757;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#xFF08;25&#xFF09;&#x5168;&#x5C40;&#x53D8;&#x91CF;&#xFF0C;Python&#x4E2D;&#x4F7F;&#x7528;global&#x5728;&#x4F7F;&#x7528;&#x5904;&#x58F0;&#x660E;&#xFF0C;&#x800C;&#x4E14;&#x5728;&#x5916;&#x90E8;&#x4E5F;&#x8981;&#x5148;&#x5B9A;&#x4E49;&#x8BE5;&#x53D8;&#x91CF;&#xFF0C;&#x800C;C/C++&#x7528;extern&#x6216;&#x8005;&#x5728;&#x51FD;&#x6570;&#x5916;&#x90E8;&#x76F4;&#x63A5;&#x5B9A;&#x4E49;&#x3002;<br>&#x2003;&#x2003;<font size="3">&#xFF08;26&#xFF09;&#x5BF9;&#x8C61;&#x6307;&#x9488;&#xFF0C;Python&#x4E2D;&#x7C7B;&#x5BF9;&#x8C61;&#x7684;&#x6307;&#x9488;&#x4E3A;&#x51FD;&#x6570;&#x5217;&#x8868;&#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x4E00;&#x822C;&#x4E3A;self&#xFF0C;&#x800C;C/C++&#x7528;this&#x6307;&#x9488;&#x8868;&#x793A;&#x3002;<br>&#x2003;&#x2003;<font size="3">&#xFF08;27&#xFF09;&#x79C1;&#x6709;&#x53D8;&#x91CF;&#xFF0C;Python&#x4E2D;&#x5728;&#x5C5E;&#x6027;&#x524D;&#x52A0;(__)&#x4E24;&#x4E2A;&#x4E0B;&#x5212;&#x7EBF;&#xFF0C;&#x800C;C/C++&#x7528;private&#x5B9A;&#x4E49;&#x3002;<br>&#x2003;&#x2003;<font size="3">&#xFF08;28&#xFF09;&#x52A8;&#x6001;&#x8BED;&#x8A00;&#xFF0C;Python&#x4E2D;&#x53EF;&#x4EE5;&#x52A8;&#x6001;&#x7ED9;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x6DFB;&#x52A0;&#x5C5E;&#x6027;&#x6216;&#x65B9;&#x6CD5;&#xFF0C;&#x800C;C/C++&#x5FC5;&#x987B;&#x63D0;&#x524D;&#x5B9A;&#x4E49;&#xFF0C;&#x65E0;&#x6CD5;&#x52A8;&#x6001;&#x6DFB;&#x52A0;&#x3002;</font></font></font></font></p><p>&#xFF0C;Python&#x4E2D;&#x4F7F;&#x7528;import&#x5BFC;&#x5165;&#x6A21;&#x5757;&#xFF0C;&#x800C;C/C++&#x4F7F;&#x7528;include&#x5BFC;&#x5165;&#x6A21;&#x5757;&#x3002;</p><h1 id="Python&#x7279;&#x70B9;"><a href="#Python&#x7279;&#x70B9;" class="headerlink" title="Python&#x7279;&#x70B9;"></a><font size="5" color="red">Python&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">&#x7B80;&#x5355;&#x6027;&#xFF1A;Python&#x8BED;&#x6CD5;&#x975E;&#x5E38;&#x7B80;&#x5355;&#xFF0C;&#x76F8;&#x6BD4;&#x4E8E;&#x5927;&#x5B66;&#x901A;&#x7528;&#x8BFE;&#x7A0B;&#x7684;C&#x7701;&#x53BB;&#x4E86;&#x6700;&#x6666;&#x6DA9;&#x7684;&#x6307;&#x9488;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x7B80;&#x6D01;&#x6027;&#xFF1A;Python&#x4EE3;&#x7801;&#x91CF;&#x7EA6;&#x4E3A;Java&#x7684;&#x4E94;&#x5206;&#x4E4B;&#x4E00;&#xFF0C;&#x6545;&#x6709;&#x201D;&#x4EBA;&#x751F;&#x82E6;&#x77ED;&#xFF0C;&#x6211;&#x7528;Python&#x201D;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x6807;&#x51C6;&#x5E93;&#xFF1A;Python&#x62E5;&#x6709;&#x5F3A;&#x5927;&#x7684;&#x6807;&#x51C6;&#x5E93;&#xFF0C;&#x80FD;&#x89E3;&#x51B3;&#x5927;&#x591A;&#x6570;&#x4F7F;&#x7528;&#x8005;&#x7684;&#x9700;&#x6C42;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x793E;&#x533A;&#x5F3A;&#xFF1A;Python&#x793E;&#x533A;&#x975E;&#x5E38;&#x5F3A;&#x5927;&#xFF0C;&#x80FD;&#x591F;&#x63D0;&#x4F9B;&#x5927;&#x91CF;&#x7684;&#x7B2C;&#x4E09;&#x65B9;&#x6A21;&#x5757;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x53EF;&#x79FB;&#x690D;&#xFF1A;Python&#x7531;&#x4E8E;&#x5176;&#x5F00;&#x6E90;&#x672C;&#x8D28;&#xFF0C;&#x5DF2;&#x7ECF;&#x88AB;&#x79FB;&#x690D;&#x5728;&#x5F88;&#x591A;&#x5E73;&#x53F0;&#x3002;</font></p><h1 id="Python&#x5C0F;&#x7ED3;"><a href="#Python&#x5C0F;&#x7ED3;" class="headerlink" title="Python&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Python&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;Python&#x88AB;&#x79F0;&#x4E3A;&#x80F6;&#x6C34;&#x8BED;&#x8A00;&#xFF0C;&#x4E3B;&#x8981;&#x5F52;&#x529F;&#x4E8E;python&#x5E93;&#x7684;&#x5F3A;&#x5927;&#xFF0C;&#x4F7F;&#x5F97;&#x5728;&#x673A;&#x5668;&#x5B66;&#x4E60;&#xFF0C;&#x6570;&#x636E;&#x6316;&#x6398;&#x7B49;&#x65B9;&#x5411;&#x706B;&#x70ED;&#x7684;&#x4ECA;&#x5929;&#x53D7;&#x5230;&#x4E86;&#x5E7F;&#x6CDB;&#x7684;&#x5173;&#x6CE8;&#xFF0C;&#x5728;&#x5404;&#x4E2A;&#x8F6F;&#x4EF6;&#x6392;&#x884C;&#x699C;&#x4E2D;&#xFF0C;Python&#x90FD;&#x4EE5;&#x6700;&#x5FEB;&#x7684;&#x901F;&#x5EA6;&#x4E0A;&#x5347;&#xFF0C;&#x7531;&#x4E8E;&#x5176;&#x7B80;&#x5355;&#x6613;&#x5B66;&#xFF0C;&#x8BB8;&#x591A;&#x9AD8;&#x6821;&#x4E5F;&#x5C06;&#x4F20;&#x7EDF;&#x7684;&#x5165;&#x95E8;&#x8BED;&#x8A00;&#x4ECE;C&#x8F6C;&#x5411;&#x4E86;Python&#xFF0C;&#x56E0;&#x6B64;&#x5728;AI&#x76DB;&#x884C;&#x7684;&#x65F6;&#x4EE3;&#xFF0C;&#x62E5;&#x62B1;Python&#x5427;&#xFF01;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Python介绍&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="python" scheme="https://USTCcoder.github.io/categories/python/"/>
    
      <category term="语言学习" scheme="https://USTCcoder.github.io/categories/python/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>PyTorch</title>
    <link href="https://USTCcoder.github.io/2019/09/08/frame%20pytorch/"/>
    <id>https://USTCcoder.github.io/2019/09/08/frame pytorch/</id>
    <published>2019-09-08T05:13:15.000Z</published>
    <updated>2020-04-30T07:41:45.183Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">PyTorch</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>PyTorch:</strong>&#x662F;Facebook&#x516C;&#x53F8;&#x4E8E;2017&#x5E74;1&#x6708;&#x53D1;&#x5E03;&#x7684;<strong>&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x5F00;&#x53D1;&#x5E73;&#x53F0;</strong>&#x3002;&#x4F46;&#x662F;PyTorch&#x7684;&#x5386;&#x53F2;&#x53EF;&#x4EE5;&#x8FFD;&#x6EAF;&#x5230;2002&#x5E74;&#xFF0C;&#x5F53;&#x65F6;Torch&#x4F7F;&#x7528;&#x4E86;&#x4E00;&#x79CD;&#x5C0F;&#x4F17;&#x8BED;&#x8A00;Lua&#x4F5C;&#x4E3A;&#x501F;&#x53E3;&#xFF0C;&#x4F7F;&#x7528;&#x4EBA;&#x6570;&#x8F83;&#x5C11;&#xFF0C;&#x5728;2017&#x5E74;&#x63A8;&#x51FA;&#x4E86;Python&#x63A5;&#x53E3;&#x7684;Torch&#xFF0C;&#x6545;&#x79F0;&#x4E3A;PyTorch&#xFF0C;&#x73B0;&#x5728;&#x4E5F;&#x79F0;&#x4E3A;&#x4E86;&#x5F53;&#x4E0B;&#x6700;&#x6D41;&#x884C;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x6846;&#x67B6;&#x4E4B;&#x4E00;&#x3002;<br><a id="more"></a></p><h1 id="PyTorch&#x7279;&#x70B9;"><a href="#PyTorch&#x7279;&#x70B9;" class="headerlink" title="PyTorch&#x7279;&#x70B9;"></a><font size="5" color="red">PyTorch&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">PyTorch&#x5177;&#x6709;&#x9AD8;&#x5EA6;&#x7684;&#x7B80;&#x6D01;&#x6027;&#xFF1A;&#x548C;TensorFlow1.x&#x7248;&#x672C;&#x6709;&#x8F83;&#x5927;&#x5DEE;&#x8DDD;&#xFF0C;&#x4FBF;&#x4E8E;&#x7528;&#x6237;&#x4F7F;&#x7528;&#x548C;&#x7406;&#x89E3;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">PyTorch&#x5177;&#x6709;&#x8F83;&#x5FEB;&#x7684;&#x901F;&#x5EA6;&#xFF1A;PyTorch&#x7684;&#x901F;&#x5EA6;&#x8868;&#x73B0;&#x80DC;&#x8FC7;TensorFlow&#x548C;Keras&#x7B49;&#x6846;&#x67B6;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">PyTorch&#x4F7F;&#x7528;&#x65B9;&#x4FBF;&#xFF1A;PyTorch&#x5199;&#x4EE3;&#x7801;&#x975E;&#x5E38;&#x7684;&#x4F18;&#x96C5;&#xFF0C;&#x6240;&#x601D;&#x5373;&#x6240;&#x5199;&#xFF0C;&#x4E0D;&#x7528;&#x8003;&#x8651;&#x592A;&#x591A;&#x5173;&#x4E8E;&#x6846;&#x67B6;&#x672C;&#x8EAB;&#x7684;&#x675F;&#x7F1A;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">PyTorch&#x5177;&#x6709;&#x6D3B;&#x8DC3;&#x7684;&#x793E;&#x533A;&#xFF0C;&#x76EE;&#x524D;&#x7531;&#x4F5C;&#x8005;&#x4EB2;&#x81EA;&#x7EF4;&#x62A4;&#xFF0C;&#x4F9B;&#x5E7F;&#x5927;&#x7528;&#x6237;&#x7684;&#x5B66;&#x4E60;&#x548C;&#x4EA4;&#x6D41;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">PyTorch&#x5177;&#x6709;&#x529F;&#x80FD;&#x5F3A;&#x5927;&#x7684;&#x53EF;&#x89C6;&#x5316;&#x7EC4;&#x5EFA;Visdom&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x8BAD;&#x7EC3;&#x65F6;&#x76D1;&#x63A7;&#x8BAD;&#x7EC3;&#x8FC7;&#x7A0B;&#x3002;</font></p><h1 id="PyTorch&#x5E94;&#x7528;"><a href="#PyTorch&#x5E94;&#x7528;" class="headerlink" title="PyTorch&#x5E94;&#x7528;"></a><font size="5" color="red">PyTorch&#x5E94;&#x7528;</font></h1><h2 id="PyTorch&#x521B;&#x5EFA;tensor"><a href="#PyTorch&#x521B;&#x5EFA;tensor" class="headerlink" title="PyTorch&#x521B;&#x5EFA;tensor"></a><font size="4">PyTorch&#x521B;&#x5EFA;tensor</font></h2><h3 id="tensor&#xFF0C;arange&#x65B9;&#x6CD5;"><a href="#tensor&#xFF0C;arange&#x65B9;&#x6CD5;" class="headerlink" title="tensor&#xFF0C;arange&#x65B9;&#x6CD5;"></a><font size="3">tensor&#xFF0C;arange&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line"># torch.tensor(data, dtype) &#x5C06;data&#x8F6C;&#x6362;&#x4E3A;tensor&#xFF0C;&#x7C7B;&#x578B;&#x4E3A;dtype</span><br><span class="line">a = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)</span><br><span class="line"></span><br><span class="line"># torch.arange(start, end, steps, dtype) &#x4EA7;&#x751F;&#x8FDE;&#x7EED;&#x7684;tensor&#xFF0C;&#x4ECE;start&#x5F00;&#x59CB;&#x5230;end&#x7ED3;&#x675F;&#xFF0C;&#x6B65;&#x957F;&#x4E3A;step</span><br><span class="line">b = torch.arange(1, 10, 2)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch1.png" alt="1"></p><h3 id="zeros&#xFF0C;zeros-like&#xFF0C;ones&#xFF0C;ones-like&#xFF0C;eye&#x65B9;&#x6CD5;"><a href="#zeros&#xFF0C;zeros-like&#xFF0C;ones&#xFF0C;ones-like&#xFF0C;eye&#x65B9;&#x6CD5;" class="headerlink" title="zeros&#xFF0C;zeros_like&#xFF0C;ones&#xFF0C;ones_like&#xFF0C;eye&#x65B9;&#x6CD5;"></a><font size="3">zeros&#xFF0C;zeros_like&#xFF0C;ones&#xFF0C;ones_like&#xFF0C;eye&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line"># torch.zeros(size, dtype=None) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E3A;shape&#x503C;&#x5168;&#x4E3A;0&#x7684;tensor</span><br><span class="line">a = torch.zeros((2,3))</span><br><span class="line"></span><br><span class="line"># torch.ones(size, dtype=None) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E3A;shape&#x503C;&#x5168;&#x4E3A;1&#x7684;tensor</span><br><span class="line">b = torch.ones((2,3))</span><br><span class="line"></span><br><span class="line"># torch.zeros_like(obj, dtype) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E0E;array&#x76F8;&#x540C;&#xFF0C;&#x503C;&#x5168;&#x4E3A;0&#x7684;tensor</span><br><span class="line">c = torch.zeros_like(b)</span><br><span class="line"></span><br><span class="line"># torch.ones_like(obj, dtype) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E0E;array&#x76F8;&#x540C;&#xFF0C;&#x503C;&#x5168;&#x4E3A;1&#x7684;tensor</span><br><span class="line">d = torch.ones_like(a)</span><br><span class="line"></span><br><span class="line"># torch.eye(n, m) &#x751F;&#x6210;n&#x884C;m&#x5217;&#x7684;&#x5355;&#x4F4D;&#x77E9;&#x9635;&#xFF0C;m&#x9ED8;&#x8BA4;&#x7B49;&#x4E8E;n</span><br><span class="line">e = torch.eye(3, 4)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch2.png" alt="2"></p><h3 id="rand&#xFF0C;randn&#xFF0C;randperm&#xFF0C;randint&#x65B9;&#x6CD5;"><a href="#rand&#xFF0C;randn&#xFF0C;randperm&#xFF0C;randint&#x65B9;&#x6CD5;" class="headerlink" title="rand&#xFF0C;randn&#xFF0C;randperm&#xFF0C;randint&#x65B9;&#x6CD5;"></a><font size="3">rand&#xFF0C;randn&#xFF0C;randperm&#xFF0C;randint&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line"># torch.rand(size) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E3A;size&#x7684;(0-1)&#x5747;&#x5300;&#x5206;&#x5E03;&#x968F;&#x673A;&#x6570;</span><br><span class="line">a = torch.rand((2,3))</span><br><span class="line"></span><br><span class="line"># torch.randn(size) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E3A;size&#x7684;&#x6807;&#x51C6;&#x9AD8;&#x65AF;&#x5206;&#x5E03;&#x968F;&#x673A;&#x6570;</span><br><span class="line">b = torch.randn((2,3))</span><br><span class="line"></span><br><span class="line"># torch.randperm(n) &#x751F;&#x6210;0&#x5230;n-1&#x6574;&#x6570;&#x7684;&#x968F;&#x673A;&#x6392;&#x5217;</span><br><span class="line">c = torch.randperm(10)</span><br><span class="line"></span><br><span class="line"># torch.randint(low, high, size) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E3A;size&#xFF0C;&#x6700;&#x5C0F;&#x503C;&#x4E3A;low&#xFF0C;&#x6700;&#x5927;&#x503C;&#x4E3A;high-1&#x7684;&#x968F;&#x673A;&#x6574;&#x6570;</span><br><span class="line">d = torch.randint(1, 10, (3, 3))</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch3.png" alt="3"></p><h3 id="linspace&#xFF0C;logspace&#x65B9;&#x6CD5;"><a href="#linspace&#xFF0C;logspace&#x65B9;&#x6CD5;" class="headerlink" title="linspace&#xFF0C;logspace&#x65B9;&#x6CD5;"></a><font size="3">linspace&#xFF0C;logspace&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line"># torch.linspace(start, end, steps=100, dtype=None) &#x5C06;start&#x5230;stop&#x7B49;&#x5206;&#x6210;steps&#x4E2A;&#x70B9;(&#x9ED8;&#x8BA4;&#x4E3A;100&#x4E2A;&#x70B9;)&#xFF0C;&#x5305;&#x62EC;end&#x70B9;</span><br><span class="line">a = torch.linspace(10, 20, 6)</span><br><span class="line"></span><br><span class="line"># torch.logspace(start, stop, steps=100, base=10.0, dtype=None) &#x5C06;start&#x5230;stop&#x7B49;&#x5206;&#x6210;steps&#x4E2A;&#x70B9;(&#x9ED8;&#x8BA4;&#x4E3A;100&#x4E2A;&#x70B9;)&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x70B9;i&#x7684;&#x503C;&#x4E3A;base&#x7684;i&#x6B21;&#x5E42;</span><br><span class="line">b = torch.logspace(1, 2, 10)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch4.png" alt="4"></p><h3 id="is-tensor&#xFF0C;numel&#xFF0C;from-numpy&#xFF0C;numpy&#x65B9;&#x6CD5;"><a href="#is-tensor&#xFF0C;numel&#xFF0C;from-numpy&#xFF0C;numpy&#x65B9;&#x6CD5;" class="headerlink" title="is_tensor&#xFF0C;numel&#xFF0C;from_numpy&#xFF0C;numpy&#x65B9;&#x6CD5;"></a><font size="3">is_tensor&#xFF0C;numel&#xFF0C;from_numpy&#xFF0C;numpy&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = torch.arange(10, 20, 2)</span><br><span class="line">b = np.arange(10, 20, 2)</span><br><span class="line"></span><br><span class="line"># torch.is_tensor(obj) &#x5224;&#x65AD;obj&#x662F;&#x5426;&#x4E3A;tensor</span><br><span class="line">torch.is_tensor(a)</span><br><span class="line"></span><br><span class="line"># torch.numel(obj) &#x8BA1;&#x7B97;obj&#x4E2D;&#x7684;&#x5143;&#x7D20;&#x4E2A;&#x6570;</span><br><span class="line">torch.numel(a)</span><br><span class="line"></span><br><span class="line"># torch.from_numpy(ndarray) &#x5C06;ndarray&#x6570;&#x7EC4;&#x7C7B;&#x578B;&#x8F6C;&#x6362;&#x4E3A;tensor</span><br><span class="line">c = torch.from_numpy(b)</span><br><span class="line"></span><br><span class="line"># obj.numpy() &#x8FD4;&#x56DE;obj&#x7684;ndarray&#x6570;&#x7EC4;&#x7C7B;&#x578B;</span><br><span class="line">d = c.numpy()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch5.png" alt="5"></p><h3 id="shape&#xFF0C;dtype&#x65B9;&#x6CD5;"><a href="#shape&#xFF0C;dtype&#x65B9;&#x6CD5;" class="headerlink" title="shape&#xFF0C;dtype&#x65B9;&#x6CD5;"></a><font size="3">shape&#xFF0C;dtype&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.randint(1, 9, (3, 3))</span><br><span class="line"></span><br><span class="line"># obj.shape &#x67E5;&#x770B;obj&#x7684;&#x5F62;&#x72B6;</span><br><span class="line">a.shape</span><br><span class="line"></span><br><span class="line"># obj.dtype &#x67E5;&#x770B;obj&#x7684;&#x5143;&#x7D20;&#x7C7B;&#x578B;</span><br><span class="line">a.dtype</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch8.png" alt="8"></p><h2 id="PyTorch&#x5207;&#x7247;&#x4E0E;&#x7D22;&#x5F15;"><a href="#PyTorch&#x5207;&#x7247;&#x4E0E;&#x7D22;&#x5F15;" class="headerlink" title="PyTorch&#x5207;&#x7247;&#x4E0E;&#x7D22;&#x5F15;"></a><font size="4">PyTorch&#x5207;&#x7247;&#x4E0E;&#x7D22;&#x5F15;</font></h2><h3 id="&#x7D22;&#x5F15;"><a href="#&#x7D22;&#x5F15;" class="headerlink" title="[]&#x7D22;&#x5F15;"></a><font size="3">[]&#x7D22;&#x5F15;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.arange(27).reshape((3, 3, 3))</span><br><span class="line"></span><br><span class="line"># obj[index0][index1]...&#x7B49;&#x4EF7;&#x4E8E;obj[index0, index1, ...] &#x7D22;&#x5F15;</span><br><span class="line">a[1][1][1]</span><br><span class="line">a[1, 1, 1]</span><br><span class="line"></span><br><span class="line"># obj[start, end, step] &#x5207;&#x7247;&#x7D22;&#x5F15;</span><br><span class="line">a[0:2, 0:2, 0:2]</span><br><span class="line"></span><br><span class="line"># obj[...] ...&#x53EF;&#x4EE5;&#x4EE3;&#x66FF;&#x8FDE;&#x7EED;&#x7684;:</span><br><span class="line">a[..., 0]</span><br><span class="line">a[0, ...]</span><br><span class="line">a[0, ..., 0]</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch6.png" alt="6"></p><h3 id="gather&#x65B9;&#x6CD5;"><a href="#gather&#x65B9;&#x6CD5;" class="headerlink" title="gather&#x65B9;&#x6CD5;"></a><font size="3">gather&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.arange(9).reshape((3, 3))</span><br><span class="line"></span><br><span class="line"># torch.gather(tensor, dim, index) &#x6309;&#x7167;dim&#x548C;index&#x5BF9;tensor&#x8FDB;&#x884C;&#x7D22;&#x5F15;</span><br><span class="line">b = torch.gather(a, dim=0, index=torch.tensor([[0, 1, 2], [1, 2, 0], [2, 0, 1]])) &#x6309;&#x7167;&#x7B2C;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;&#x884C;&#x5F00;&#x59CB;&#x7D22;&#x5F15;&#xFF0C;[0, 1, 2]&#x4EE3;&#x8868;&#x7B2C;&#x4E00;&#x884C;&#x7684;&#x4E09;&#x4E2A;&#x5143;&#x7D20;&#x6765;&#x81EA;&#x4E8E;a&#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x884C;&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#xFF0C;&#x7B2C;&#x4E09;&#x884C;&#xFF0C;&#x5217;&#x6309;&#x987A;&#x5E8F;&#x7B2C;&#x4E00;&#x5217;&#xFF0C;&#x7B2C;&#x4E8C;&#x5217;&#xFF0C;&#x7B2C;&#x4E09;&#x5217;&#xFF0C;&#x5373;&#x7B2C;&#x4E00;&#x884C;&#x7684;&#x5143;&#x7D20;&#x4E3A;a[0][0]&#xFF0C;a[1][1]&#xFF0C;a[2][2]</span><br><span class="line">c = torch.gather(a, dim=1, index=torch.tensor([[0, 1, 2], [1, 2, 0], [2, 0, 1]])) &#x6309;&#x7167;&#x7B2C;&#x4E8C;&#x4E2A;&#x7EF4;&#x5EA6;&#x5217;&#x5F00;&#x59CB;&#x7D22;&#x5F15;&#xFF0C;[0, 1, 2]&#x4EE3;&#x8868;&#x7B2C;&#x4E00;&#x884C;&#x7684;&#x4E09;&#x4E2A;&#x5143;&#x7D20;&#x6765;&#x81EA;&#x4E8E;a&#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x5217;&#xFF0C;&#x7B2C;&#x4E8C;&#x5217;&#xFF0C;&#x7B2C;&#x4E09;&#x5217;&#xFF0C;&#x90FD;&#x5C5E;&#x4E8E;&#x7B2C;&#x4E00;&#x884C;&#xFF0C;&#x5373;&#x7B2C;&#x4E00;&#x884C;&#x7684;&#x5143;&#x7D20;&#x4E3A;a[0][0]&#xFF0C;a[0][1]&#xFF0C;a[0][2]</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch2.png" alt="2"></p><h2 id="PyTorch&#x7EF4;&#x5EA6;&#x53D8;&#x6362;"><a href="#PyTorch&#x7EF4;&#x5EA6;&#x53D8;&#x6362;" class="headerlink" title="PyTorch&#x7EF4;&#x5EA6;&#x53D8;&#x6362;"></a><font size="4">PyTorch&#x7EF4;&#x5EA6;&#x53D8;&#x6362;</font></h2><h3 id="reshape&#xFF0C;squeeze&#xFF0C;unsqueeze&#xFF0C;transpose&#x65B9;&#x6CD5;"><a href="#reshape&#xFF0C;squeeze&#xFF0C;unsqueeze&#xFF0C;transpose&#x65B9;&#x6CD5;" class="headerlink" title="reshape&#xFF0C;squeeze&#xFF0C;unsqueeze&#xFF0C;transpose&#x65B9;&#x6CD5;"></a><font size="3">reshape&#xFF0C;squeeze&#xFF0C;unsqueeze&#xFF0C;transpose&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.arange(12)</span><br><span class="line"></span><br><span class="line"># obj.reshape(shape) &#x5C06;obj&#x7684;&#x5F62;&#x72B6;&#x53D8;&#x4E3A;shape</span><br><span class="line">b = a.reshape((3, 4))</span><br><span class="line"></span><br><span class="line"># obj.unsqueeze(dim) &#x5728;dim&#x4E0A;&#x63D2;&#x5165;&#x4E00;&#x4E2A;&#x5927;&#x5C0F;&#x4E3A;1&#x7684;&#x8F74;</span><br><span class="line">c = b.unsqueeze(1)</span><br><span class="line"></span><br><span class="line"># obj.squeeze(dim) &#x5C06;&#x5927;&#x5C0F;&#x4E3A;1&#x7684;&#x8F74;dim&#x5220;&#x53BB;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x6240;&#x6709;&#x5927;&#x5C0F;&#x4E3A;1&#x7684;&#x8F74;&#xFF0C;&#x5982;&#x679C;&#x5927;&#x5C0F;&#x4E0D;&#x4E3A;1&#x5219;&#x4E0D;&#x5220;&#x53BB;</span><br><span class="line">d = c.squeeze()</span><br><span class="line"></span><br><span class="line"># obj.transpose(dim0, dim1) &#x5C06;obj&#x7684;&#x8F74;0&#x548C;&#x8F74;1&#x8C03;&#x6362;&#xFF0C;obj.t()&#x5C06;&#x4E8C;&#x7EF4;obj&#x8F6C;&#x7F6E;</span><br><span class="line">e = b.transpose(0, 1)</span><br><span class="line">f = b.t()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch9.png" alt="9"></p><h3 id="torch-broadcast-tensors&#x65B9;&#x6CD5;"><a href="#torch-broadcast-tensors&#x65B9;&#x6CD5;" class="headerlink" title="torch.broadcast_tensors&#x65B9;&#x6CD5;"></a><font size="3">torch.broadcast_tensors&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.arange(3)</span><br><span class="line">b = torch.ones((3, 3, 3))</span><br><span class="line"></span><br><span class="line"># torch.broadcast_tensors(a, b) &#x5C06;a&#x5E7F;&#x64AD;&#x4E3A;b&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x8FD4;&#x56DE;a&#x5E7F;&#x64AD;&#x540E;&#x7684;tensor&#x548C;b</span><br><span class="line">c, d = torch.broadcast_tensors(a, b)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch10.png" alt="10"></p><h2 id="PyTorch&#x5408;&#x5E76;&#x4E0E;&#x5206;&#x5272;"><a href="#PyTorch&#x5408;&#x5E76;&#x4E0E;&#x5206;&#x5272;" class="headerlink" title="PyTorch&#x5408;&#x5E76;&#x4E0E;&#x5206;&#x5272;"></a><font size="4">PyTorch&#x5408;&#x5E76;&#x4E0E;&#x5206;&#x5272;</font></h2><h3 id="cat&#xFF0C;stack&#xFF0C;chunk&#xFF0C;split&#x65B9;&#x6CD5;"><a href="#cat&#xFF0C;stack&#xFF0C;chunk&#xFF0C;split&#x65B9;&#x6CD5;" class="headerlink" title="cat&#xFF0C;stack&#xFF0C;chunk&#xFF0C;split&#x65B9;&#x6CD5;"></a><font size="3">cat&#xFF0C;stack&#xFF0C;chunk&#xFF0C;split&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.arange(6).reshape((2, 3))</span><br><span class="line">b = torch.arange(7,13).reshape((2, 3))</span><br><span class="line"></span><br><span class="line"># torch.cat(tensors, dim) &#x5C06;&#x591A;&#x4E2A;tensors&#x6309;&#x7167;dim&#x8FDB;&#x884C;&#x5408;&#x5E76;</span><br><span class="line">c = torch.cat([a, b], dim=1)</span><br><span class="line"></span><br><span class="line"># tf.stack(tensors, dim) &#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x65B0;&#x7EF4;&#x5EA6;&#xFF0C;&#x5E76;&#x5408;&#x5E76;&#x5230;&#x8BE5;&#x7EF4;&#x5EA6;</span><br><span class="line">d = torch.stack([a, b], dim=0)</span><br><span class="line"></span><br><span class="line"># torch.chunk(tensor, chunks, dim) &#x5BF9;tensor&#x6309;&#x7167;dim&#x8F74;&#x8FDB;&#x884C;&#x62C6;&#x5206;&#x6210;chunks&#x4EFD;</span><br><span class="line">e, f = torch.chunk(d, 2, dim=0)</span><br><span class="line"></span><br><span class="line"># torch.split(tensor, split_size_or_sections, dim) &#x5BF9;tensor&#x6309;&#x7167;dim&#x8F74;&#x8FDB;&#x884C;&#x62C6;&#x5206;&#xFF0C;&#x5982;&#x679C;&#x5E0C;&#x671B;&#x5747;&#x5300;&#x62C6;&#x5206;&#x5219;num_or_size_splits&#x4E3A;&#x5E38;&#x6570;&#xFF0C;&#x4EE3;&#x8868;&#x6BCF;&#x90E8;&#x5206;&#x7684;&#x4E2A;&#x6570;(&#x4E0D;&#x540C;&#x4E8E;TensorFlow&#xFF0C;&#x4EE3;&#x8868;&#x5206;&#x6210;&#x591A;&#x5C11;&#x4E2A;&#x90E8;&#x5206;)&#xFF0C;&#x5426;&#x5219;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x5217;&#x8868;&#xFF0C;&#x4EE3;&#x8868;&#x6BCF;&#x4E00;&#x90E8;&#x5206;&#x7684;&#x6570;&#x91CF;</span><br><span class="line">h = torch.split(d, 1, dim=2)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch11.png" alt="11"></p><h2 id="PyTorch&#x6570;&#x636E;&#x7EDF;&#x8BA1;"><a href="#PyTorch&#x6570;&#x636E;&#x7EDF;&#x8BA1;" class="headerlink" title="PyTorch&#x6570;&#x636E;&#x7EDF;&#x8BA1;"></a><font size="4">PyTorch&#x6570;&#x636E;&#x7EDF;&#x8BA1;</font></h2><h3 id="max&#xFF0C;min&#x65B9;&#x6CD5;"><a href="#max&#xFF0C;min&#x65B9;&#x6CD5;" class="headerlink" title="max&#xFF0C;min&#x65B9;&#x6CD5;"></a><font size="3">max&#xFF0C;min&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.randperm(9).reshape((3, 3))</span><br><span class="line"></span><br><span class="line"># torch.max(obj, dim) &#x6C42;&#x5728;&#x6307;&#x5B9A;&#x8F74;dim&#x7684;&#x6700;&#x5927;&#x503C;&#x53CA;&#x5176;&#x7D22;&#x5F15;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x6C42;&#x5168;&#x5C40;&#x6700;&#x5927;&#x503C;</span><br><span class="line">b = torch.max(a, dim=0)</span><br><span class="line"></span><br><span class="line"># torch.min(obj, dim) &#x6C42;&#x5728;&#x6307;&#x5B9A;&#x8F74;dim&#x7684;&#x6700;&#x5C0F;&#x503C;&#x53CA;&#x5176;&#x7D22;&#x5F15;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x6C42;&#x5168;&#x5C40;&#x6700;&#x5C0F;&#x503C;</span><br><span class="line">c = torch.min(a, dim=0)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch12.png" alt="12"></p><h3 id="dist&#xFF0C;mean&#xFF0C;median&#xFF0C;mode&#x65B9;&#x6CD5;"><a href="#dist&#xFF0C;mean&#xFF0C;median&#xFF0C;mode&#x65B9;&#x6CD5;" class="headerlink" title="dist&#xFF0C;mean&#xFF0C;median&#xFF0C;mode&#x65B9;&#x6CD5;"></a><font size="3">dist&#xFF0C;mean&#xFF0C;median&#xFF0C;mode&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.randint(3, 7, (3, 3), dtype=torch.float32).reshape((3, 3))</span><br><span class="line">b = torch.randint(3, 7, (3, 3), dtype=torch.float32).reshape((3, 3))</span><br><span class="line"></span><br><span class="line"># torch.dist(tensor1, tensor2, p) &#x8BA1;&#x7B97;tensor1-tensor2&#x7684;p&#x8303;&#x6570;&#xFF0C;&#x8981;&#x5148;&#x8F6C;&#x6362;&#x6210;float32&#x683C;&#x5F0F;&#x8FDB;&#x884C;&#x8BA1;&#x7B97;</span><br><span class="line">c = torch.dist(a, b, 2)</span><br><span class="line"></span><br><span class="line"># torch.mean(tensor, dim) &#x8BA1;&#x7B97;tensor&#x7684;&#x5E73;&#x5747;&#x503C;</span><br><span class="line">d = torch.mean(a, dim=0)</span><br><span class="line"></span><br><span class="line"># torch.median(tensor, dim) &#x8BA1;&#x7B97;tensor&#x7684;&#x4E2D;&#x4F4D;&#x6570;&#x53CA;&#x5176;&#x7D22;&#x5F15;</span><br><span class="line">e = torch.median(a, dim=0)</span><br><span class="line"></span><br><span class="line"># torch.mode(tensor, dim) &#x8BA1;&#x7B97;tensor&#x7684;&#x4F17;&#x6570;&#x53CA;&#x5176;&#x7D22;&#x5F15;</span><br><span class="line">f = torch.mode(a, dim=0)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch13.png" alt="13"></p><h3 id="sort&#xFF0C;topk&#x65B9;&#x6CD5;"><a href="#sort&#xFF0C;topk&#x65B9;&#x6CD5;" class="headerlink" title="sort&#xFF0C;topk&#x65B9;&#x6CD5;"></a><font size="3">sort&#xFF0C;topk&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.randperm(9).reshape((3, 3))</span><br><span class="line"></span><br><span class="line"># torch.sort(tensor, dim=None, descending=False) &#x5C06;tensor&#x6309;&#x7167;dim&#x7EF4;&#x5EA6;&#x8FDB;&#x884C;&#x6392;&#x5E8F;(&#x9ED8;&#x8BA4;&#x4E3A;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;)&#xFF0C;descending=False&#x9ED8;&#x8BA4;&#x9012;&#x589E;&#x6392;&#x5E8F;&#xFF0C;descending=True&#x4E3A;&#x9012;&#x51CF;&#x6392;&#x5E8F;</span><br><span class="line">b = torch.sort(a)</span><br><span class="line"></span><br><span class="line"># torch.topk(tensor, k, dim=None, largest=True, sorted=True) &#x6C42;tensor&#x6700;&#x5927;&#x6216;&#x6700;&#x5C0F;&#x7684;k&#x4E2A;&#x503C;&#xFF0C;dim&#x9ED8;&#x8BA4;&#x4E3A;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;&#xFF0C;largest=True&#x8868;&#x793A;&#x6700;&#x5927;k&#x4E2A;&#x503C;&#xFF0C;largest=False&#x8868;&#x793A;&#x6700;&#x5C0F;k&#x4E2A;&#x503C;&#xFF0C;sorted=True&#x8868;&#x793A;&#x9ED8;&#x8BA4;&#x6392;&#x5E8F;&#xFF0C;sorted=False&#x8868;&#x793A;&#x4E0D;&#x6392;&#x5E8F;</span><br><span class="line">c = torch.topk(a, 2)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch14.png" alt="14"></p><h2 id="PyTorch&#x5F20;&#x91CF;&#x9650;&#x5E45;"><a href="#PyTorch&#x5F20;&#x91CF;&#x9650;&#x5E45;" class="headerlink" title="PyTorch&#x5F20;&#x91CF;&#x9650;&#x5E45;"></a><font size="4">PyTorch&#x5F20;&#x91CF;&#x9650;&#x5E45;</font></h2><h3 id="clamp&#x65B9;&#x6CD5;"><a href="#clamp&#x65B9;&#x6CD5;" class="headerlink" title="clamp&#x65B9;&#x6CD5;"></a><font size="3">clamp&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.randperm(9, dtype=torch.float32).reshape((3, 3))</span><br><span class="line"></span><br><span class="line"># torch.clamp(tensor, min, max) &#x5C06;tensor&#x4E2D;&#xFF0C;&#x5C0F;&#x4E8E;min&#x7684;&#x503C;&#x8D4B;&#x503C;&#x4E3A;min&#xFF0C;&#x5927;&#x4E8E;max&#x7684;&#x503C;&#x8D4B;&#x503C;&#x4E3A;max</span><br><span class="line">b = torch.clamp(a, 3, 6)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch16.png" alt="16"></p><h2 id="PyTorch&#x6570;&#x5B66;&#x8FD0;&#x7B97;"><a href="#PyTorch&#x6570;&#x5B66;&#x8FD0;&#x7B97;" class="headerlink" title="PyTorch&#x6570;&#x5B66;&#x8FD0;&#x7B97;"></a><font size="4">PyTorch&#x6570;&#x5B66;&#x8FD0;&#x7B97;</font></h2><h3 id="&#x5E38;&#x89C4;&#x8FD0;&#x7B97;&#x65B9;&#x6CD5;"><a href="#&#x5E38;&#x89C4;&#x8FD0;&#x7B97;&#x65B9;&#x6CD5;" class="headerlink" title="&#x5E38;&#x89C4;&#x8FD0;&#x7B97;&#x65B9;&#x6CD5;"></a><font size="3">&#x5E38;&#x89C4;&#x8FD0;&#x7B97;&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.randint(-4, 5, (3, 3), dtype=torch.float32)</span><br><span class="line">b = torch.randperm(9, dtype=torch.float32).reshape((3, 3))</span><br><span class="line"></span><br><span class="line"># tensor1 op tensor2 &#x5C06;tensor1&#x4E0E;tensor2&#x8FDB;&#x884C;&#x5E38;&#x89C4;&#x7684;&#x6570;&#x5B66;&#x8FD0;&#x7B97;&#xFF0C;&#x5982;&#x679C;&#x7EF4;&#x5EA6;&#x5927;&#x5C0F;&#x4E0D;&#x540C;&#xFF0C;&#x5219;&#x8FDB;&#x884C;&#x5E7F;&#x64AD;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x80FD;&#x5E7F;&#x64AD;&#x5219;&#x62A5;&#x9519;</span><br><span class="line">a + b</span><br><span class="line">a * b</span><br><span class="line"></span><br><span class="line"># torch.abs(tensor) &#x6C42;tensor&#x7684;&#x7EDD;&#x5BF9;&#x503C;</span><br><span class="line">torch.abs(a)</span><br><span class="line"></span><br><span class="line"># torch.sqrt(tensor) &#x6C42;tensor&#x7684;&#x5E73;&#x65B9;&#x6839;</span><br><span class="line">torch.sqrt(b)</span><br><span class="line"></span><br><span class="line"># torch.sin(tensor) &#x6C42;tensor&#x7684;&#x6B63;&#x5F26;&#x503C;</span><br><span class="line">torch.sin(a)</span><br><span class="line"></span><br><span class="line"># torch.exp(tensor) &#x6C42;e&#x7684;tensor&#x6B21;&#x5E42;</span><br><span class="line">torch.exp(a)</span><br><span class="line"></span><br><span class="line"># torch.log(tensor) &#x6C42;tensor&#x4EE5;&#x81EA;&#x7136;&#x5BF9;&#x6570;&#x4E3A;&#x5E95;&#x7684;&#x503C;</span><br><span class="line">torch.log(b)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch15.png" alt="15"></p><h3 id="ceil&#xFF0C;floor&#xFF0C;round&#xFF0C;frac&#xFF0C;trunc&#x65B9;&#x6CD5;"><a href="#ceil&#xFF0C;floor&#xFF0C;round&#xFF0C;frac&#xFF0C;trunc&#x65B9;&#x6CD5;" class="headerlink" title="ceil&#xFF0C;floor&#xFF0C;round&#xFF0C;frac&#xFF0C;trunc&#x65B9;&#x6CD5;"></a><font size="3">ceil&#xFF0C;floor&#xFF0C;round&#xFF0C;frac&#xFF0C;trunc&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.rand((3, 3)) * 10</span><br><span class="line"></span><br><span class="line"># torch.ceil(tensor) &#x5C06;tensor&#x7684;&#x5C0F;&#x6570;&#x90E8;&#x5206;&#x4E0A;&#x53D6;&#x6574;</span><br><span class="line">b = torch.ceil(a)</span><br><span class="line"></span><br><span class="line"># torch.floor(tensor) &#x5C06;tensor&#x7684;&#x5C0F;&#x6570;&#x90E8;&#x5206;&#x4E0B;&#x53D6;&#x6574;</span><br><span class="line">c = torch.floor(a)</span><br><span class="line"></span><br><span class="line"># torch.round(tensor) &#x5C06;tensor&#x7684;&#x5C0F;&#x6570;&#x90E8;&#x5206;&#x56DB;&#x820D;&#x4E94;&#x5165;</span><br><span class="line">d = torch.round(a)</span><br><span class="line"></span><br><span class="line"># torch.frac(tensor) &#x4FDD;&#x7559;tensor&#x7684;&#x5C0F;&#x6570;&#x90E8;&#x5206;</span><br><span class="line">e = torch.frac(a)</span><br><span class="line"></span><br><span class="line"># torch.trunc(tensor) &#x4FDD;&#x7559;tensor&#x7684;&#x6574;&#x6570;&#x90E8;&#x5206;</span><br><span class="line">f = torch.trunc(a)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch17.png" alt="17"></p><h3 id="sign&#xFF0C;sigmoid&#xFF0C;kthvalue&#x65B9;&#x6CD5;"><a href="#sign&#xFF0C;sigmoid&#xFF0C;kthvalue&#x65B9;&#x6CD5;" class="headerlink" title="sign&#xFF0C;sigmoid&#xFF0C;kthvalue&#x65B9;&#x6CD5;"></a><font size="3">sign&#xFF0C;sigmoid&#xFF0C;kthvalue&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.randn((3, 3))</span><br><span class="line"></span><br><span class="line"># torch.sign(tensor) &#x6C42;tensor&#x4F5C;&#x7528;&#x5728;&#x7B26;&#x53F7;&#x51FD;&#x6570;&#x4E0A;&#x7684;&#x503C;</span><br><span class="line">b = torch.sign(a)</span><br><span class="line"></span><br><span class="line"># torch.sigmoid(tensor) &#x6C42;tensor&#x4F5C;&#x7528;&#x5728;sigmoid&#x51FD;&#x6570;&#x4E0A;&#x7684;&#x503C;</span><br><span class="line">c = torch.sigmoid(a)</span><br><span class="line"></span><br><span class="line"># torch.kthvalue(tensor, k, dim=None) &#x6C42;tensor&#x7B2C;k&#x5C0F;&#x7684;&#x503C;&#xFF0C;dim&#x9ED8;&#x8BA4;&#x4E3A;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;</span><br><span class="line">d = torch.kthvalue(a, 2)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch18.png" alt="18"></p><h3 id="eq&#xFF0C;equal&#x65B9;&#x6CD5;"><a href="#eq&#xFF0C;equal&#x65B9;&#x6CD5;" class="headerlink" title="eq&#xFF0C;equal&#x65B9;&#x6CD5;"></a><font size="3">eq&#xFF0C;equal&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.randint(1, 5, (3, 3))</span><br><span class="line">b = torch.randint(1, 5, (3, 3))</span><br><span class="line"></span><br><span class="line"># torch.eq(tensor1, tensor2) &#x7B49;&#x4EF7;&#x4E8E;tensor1 == tensor2&#xFF0C;&#x6BD4;&#x8F83;tensor1&#x548C;tensor2&#x662F;&#x5426;&#x76F8;&#x7B49;&#xFF0C;&#x5728;&#x5982;&#x679C;&#x76F8;&#x7B49;&#x5219;&#x5BF9;&#x5E94;&#x4F4D;&#x7F6E;&#x4E3A;True&#xFF0C;&#x5426;&#x5219;&#x4E3A;False</span><br><span class="line">torch.eq(a, b)</span><br><span class="line"></span><br><span class="line"># torch.equal(tensor1, tensor2) &#x6BD4;&#x8F83;tensor1&#x548C;tensor2&#x662F;&#x5426;&#x76F8;&#x7B49;&#xFF0C;&#x5982;&#x679C;&#x76F8;&#x7B49;&#x5219;&#x8FD4;&#x56DE;True&#xFF0C;&#x5426;&#x5219;&#x4E3A;False</span><br><span class="line">torch.equal(a, b)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch19.png" alt="19"></p><h2 id="PyTorch&#x7EBF;&#x6027;&#x4EE3;&#x6570;"><a href="#PyTorch&#x7EBF;&#x6027;&#x4EE3;&#x6570;" class="headerlink" title="PyTorch&#x7EBF;&#x6027;&#x4EE3;&#x6570;"></a><font size="4">PyTorch&#x7EBF;&#x6027;&#x4EE3;&#x6570;</font></h2><h3 id="diag&#xFF0C;trace&#xFF0C;tril&#xFF0C;triu&#x65B9;&#x6CD5;"><a href="#diag&#xFF0C;trace&#xFF0C;tril&#xFF0C;triu&#x65B9;&#x6CD5;" class="headerlink" title="diag&#xFF0C;trace&#xFF0C;tril&#xFF0C;triu&#x65B9;&#x6CD5;"></a><font size="3">diag&#xFF0C;trace&#xFF0C;tril&#xFF0C;triu&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.randperm(9).reshape((3, 3))</span><br><span class="line"></span><br><span class="line"># torch.diag(tensor, diagonal=0) &#x5982;&#x679C;tensor&#x4E3A;&#x4E00;&#x7EF4;&#x5F20;&#x91CF;&#xFF0C;&#x8FD4;&#x56DE;&#x4E8C;&#x7EF4;&#x5F20;&#x91CF;&#xFF0C;&#x5982;&#x679C;tensor&#x4E3A;&#x4E8C;&#x7EF4;&#x5F20;&#x91CF;&#xFF0C;&#x8FD4;&#x56DE;&#x5BF9;&#x89D2;&#x7EBF;&#x5F20;&#x91CF;&#xFF0C;diagonal&#x4EE3;&#x8868;&#x5BF9;&#x89D2;&#x7EBF;&#x7684;&#x504F;&#x79FB;&#x91CF;</span><br><span class="line">b = torch.diag(a)</span><br><span class="line"></span><br><span class="line"># torch.trace(tensor) &#x6C42;tensor&#x7684;&#x8FF9;</span><br><span class="line">c = torch.trace(a)</span><br><span class="line"></span><br><span class="line"># torch.tril(tensor, k=0) &#x8FD4;&#x56DE;tensor&#x7684;&#x4E0B;&#x4E09;&#x89D2;&#x5F20;&#x91CF;&#xFF0C;&#x504F;&#x79FB;&#x4E3A;k</span><br><span class="line">d = torch.tril(a)</span><br><span class="line"></span><br><span class="line"># torch.triu(tensor, k=0) &#x8FD4;&#x56DE;tensor&#x7684;&#x4E0A;&#x4E09;&#x89D2;&#x5F20;&#x91CF;&#xFF0C;&#x504F;&#x79FB;&#x4E3A;k</span><br><span class="line">e = torch.triu(a)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch20.png" alt="20"></p><h3 id="inverse&#xFF0C;eig&#xFF0C;svd&#x65B9;&#x6CD5;"><a href="#inverse&#xFF0C;eig&#xFF0C;svd&#x65B9;&#x6CD5;" class="headerlink" title="inverse&#xFF0C;eig&#xFF0C;svd&#x65B9;&#x6CD5;"></a><font size="3">inverse&#xFF0C;eig&#xFF0C;svd&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.randperm(9, dtype=torch.float32).reshape((3, 3))</span><br><span class="line"></span><br><span class="line"># torch.inverse(tensor) &#x6C42;tensor&#x7684;&#x9006;&#x77E9;&#x9635;</span><br><span class="line">b = torch.inverse(a)</span><br><span class="line"></span><br><span class="line"># torch.eig(tensor, eigenvectors=False) &#x6C42;tensor&#x7684;&#x7279;&#x5F81;&#x503C;&#xFF0C;eigenvectors=False&#x9ED8;&#x8BA4;&#x4E0D;&#x8BA1;&#x7B97;&#x7279;&#x5F81;&#x5411;&#x91CF;&#xFF0C;eigenvectors=True&#x8BA1;&#x7B97;&#x7279;&#x5F81;&#x5411;&#x91CF;</span><br><span class="line">c = torch.eig(a, True)</span><br><span class="line"></span><br><span class="line"># torch.svd(tensor) &#x6C42;tensor&#x7684;&#x5947;&#x5F02;&#x503C;&#x5206;&#x89E3;</span><br><span class="line">U, S, V = torch.svd(a)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch21.png" alt="21"></p><h3 id="dot&#xFF0C;mm&#xFF0C;mv&#x65B9;&#x6CD5;"><a href="#dot&#xFF0C;mm&#xFF0C;mv&#x65B9;&#x6CD5;" class="headerlink" title="dot&#xFF0C;mm&#xFF0C;mv&#x65B9;&#x6CD5;"></a><font size="3">dot&#xFF0C;mm&#xFF0C;mv&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.randperm(9).reshape((3, 3))</span><br><span class="line">b = torch.tensor([1, 2, 3])</span><br><span class="line"></span><br><span class="line"># torch.dot(tensor1, tensor2) &#x4E24;&#x4E2A;&#x4E00;&#x7EF4;&#x5411;&#x91CF;&#x70B9;&#x4E58;</span><br><span class="line">c = torch.dot(b, b)</span><br><span class="line"></span><br><span class="line"># torch.mm(tensor1, tensor2) &#x77E9;&#x9635;&#x4E58;&#x6CD5;</span><br><span class="line">d = torch.mm(a, a)</span><br><span class="line"></span><br><span class="line"># torch.mv(tensor1, tensor2) &#x77E9;&#x9635;tensor1&#x4E58;&#x5411;&#x91CF;tensor2</span><br><span class="line">e = torch.mv(a, b)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pytorch22.png" alt="22"></p><h2 id="PyTorch&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;"><a href="#PyTorch&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;" class="headerlink" title="PyTorch&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;"></a><font size="4">PyTorch&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;</font></h2><h3 id="functional-&#x51FD;&#x6570;-&#x6A21;&#x5757;"><a href="#functional-&#x51FD;&#x6570;-&#x6A21;&#x5757;" class="headerlink" title="functional(&#x51FD;&#x6570;)&#x6A21;&#x5757;"></a><font size="3">functional(&#x51FD;&#x6570;)&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from torch.nn import functional as f</span><br><span class="line"></span><br><span class="line"># f.relu(input) ReLu&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</span><br><span class="line"></span><br><span class="line"># f.sigmoid(input) Sigmoid&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</span><br><span class="line"></span><br><span class="line"># f.tanh(input) tanh&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</span><br><span class="line"></span><br><span class="line"># f.softmax(input) softmax&#x5C42;</span><br><span class="line"></span><br><span class="line"># f.mse_loss(input, target) &#x8BA1;&#x7B97;input&#x548C;target&#x7684;&#x5747;&#x65B9;&#x5DEE;</span><br><span class="line"></span><br><span class="line"># f.binary_cross_entropy(input, target) &#x8BA1;&#x7B97;input&#x548C;target&#x4E8C;&#x5206;&#x7C7B;&#x4EA4;&#x53C9;&#x71B5;</span><br><span class="line"></span><br><span class="line"># f.cross_entropy(input, target)&#x8BA1;&#x7B97;input&#x548C;target&#x7684;&#x4EA4;&#x53C9;&#x71B5;&#xFF0C;&#x91CC;&#x9762;&#x5185;&#x7F6E;&#x4E86;softmax&#x5C42;&#xFF0C;&#x56E0;&#x6B64;&#x4E0D;&#x9700;&#x8981;&#x5148;&#x7ECF;&#x8FC7;softmax</span><br></pre></td></tr></tbody></table></figure><h3 id="autograd-&#x81EA;&#x52A8;&#x6C42;&#x5BFC;-&#x6A21;&#x5757;"><a href="#autograd-&#x81EA;&#x52A8;&#x6C42;&#x5BFC;-&#x6A21;&#x5757;" class="headerlink" title="autograd(&#x81EA;&#x52A8;&#x6C42;&#x5BFC;)&#x6A21;&#x5757;"></a><font size="3">autograd(&#x81EA;&#x52A8;&#x6C42;&#x5BFC;)&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line"># torch.tensor(data ,requires_grad=True) &#x521B;&#x5EFA;&#x65F6;&#x4F7F;&#x5176;&#x5177;&#x6709;&#x53EF;&#x5BFC;&#x5C5E;&#x6027;</span><br><span class="line"></span><br><span class="line"># obj.requires_grad_() &#x4F7F;&#x5DF2;&#x7ECF;&#x521B;&#x5EFA;&#x7684;obj&#x5177;&#x6709;&#x53EF;&#x5BFC;&#x5C5E;&#x6027;</span><br><span class="line"></span><br><span class="line"># torch.autograd.grad(outputs, inputs) outputs&#x5BF9;inputs&#x8FDB;&#x884C;&#x81EA;&#x52A8;&#x6C42;&#x5BFC;&#xFF0C;&#x524D;&#x63D0;&#x662F;&#x4FDD;&#x8BC1;inputs&#x5177;&#x6709;&#x53EF;&#x5BFC;&#x5C5E;&#x6027;</span><br><span class="line">torch.autograd.grad(res, w)</span><br><span class="line"></span><br><span class="line"># obj.backward() &#x5BF9;obj&#x8FDB;&#x884C;&#x4ECE;&#x540E;&#x5411;&#x524D;&#x81EA;&#x52A8;&#x6C42;&#x5BFC;&#xFF0C;&#x7136;&#x540E;&#x8C03;&#x7528;&#x53D8;&#x91CF;&#x7684;grad&#x6210;&#x5458;&#x53D8;&#x91CF;&#x5373;&#x53EF;&#x5F97;&#x5230;&#x5176;&#x5BFC;&#x6570;</span><br><span class="line">res.backward()</span><br><span class="line">w.grad</span><br></pre></td></tr></tbody></table></figure><h3 id="optim-&#x4F18;&#x5316;&#x5668;-&#x6A21;&#x5757;"><a href="#optim-&#x4F18;&#x5316;&#x5668;-&#x6A21;&#x5757;" class="headerlink" title="optim(&#x4F18;&#x5316;&#x5668;)&#x6A21;&#x5757;"></a><font size="3">optim(&#x4F18;&#x5316;&#x5668;)&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line"># torch.optim.SGD(lr=0.01, momentum=0.0, dampending=0, weight_decay=0.0, nesterov=False) &#x968F;&#x673A;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x4F18;&#x5316;&#x5668;&#xFF0C;&#x5B66;&#x4E60;&#x7387;lr&#x9ED8;&#x8BA4;&#x4E3A;0.01&#xFF0C;&#x52A8;&#x91CF;momentum&#x9ED8;&#x8BA4;&#x4E3A;0&#xFF0C;&#x52A8;&#x91CF;&#x6291;&#x5236;&#x56E0;&#x5B50;&#x4E3A;0&#xFF0C;&#x5B66;&#x4E60;&#x7387;&#x8870;&#x51CF;decay&#x9ED8;&#x8BA4;&#x4E3A;0&#xFF0C;&#x9ED8;&#x8BA4;&#x4E0D;&#x4F7F;&#x7528;nesterov&#x52A8;&#x91CF;</span><br><span class="line"></span><br><span class="line"># torch.optim.RMSprop(lr=0.001, alpha=0.9, eps=None, weight_decay=0.0, momentum=0.0) RMSProp&#x4F18;&#x5316;&#x5668;&#xFF0C;&#x5B66;&#x4E60;&#x7387;lr&#x9ED8;&#x8BA4;&#x4E3A;0.001&#xFF0C;&#x53C2;&#x6570;alpha&#x9ED8;&#x8BA4;&#x4E3A;0.99&#xFF0C;&#x6A21;&#x7CCA;&#x56E0;&#x5B50;epsilon&#x9ED8;&#x8BA4;&#x4E3A;None&#xFF0C;&#x5B66;&#x4E60;&#x7387;&#x8870;&#x51CF;weight_decay&#x9ED8;&#x8BA4;&#x4E3A;0&#xFF0C;&#x52A8;&#x91CF;momentum&#x9ED8;&#x8BA4;&#x4E3A;0</span><br><span class="line"></span><br><span class="line"># torch.optim.Adam(lr=0.001, betas=(0.9, 0.999), eps=None, weight_decay=0.0) Adam&#x4F18;&#x5316;&#x5668;&#xFF0C;&#x5B66;&#x4E60;&#x7387;lr&#x9ED8;&#x8BA4;&#x4E3A;0.001&#xFF0C;&#x53C2;&#x6570;beta_1&#x9ED8;&#x8BA4;&#x4E3A;0.9, &#x53C2;&#x6570;beta_2&#x9ED8;&#x8BA4;&#x4E3A;0.999&#xFF0C;&#x6A21;&#x7CCA;&#x56E0;&#x5B50;epsilon&#x9ED8;&#x8BA4;&#x4E3A;None&#xFF0C;&#x5B66;&#x4E60;&#x7387;&#x8870;&#x51CF;weight_decay&#x9ED8;&#x8BA4;&#x4E3A;0</span><br></pre></td></tr></tbody></table></figure><h3 id="CPU&#x4E0E;GPU&#x6A21;&#x5757;"><a href="#CPU&#x4E0E;GPU&#x6A21;&#x5757;" class="headerlink" title="CPU&#x4E0E;GPU&#x6A21;&#x5757;"></a><font size="3">CPU&#x4E0E;GPU&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line"># torch.device(device) &#x8FD4;&#x56DE;&#x8BBE;&#x5907;&#x5BF9;&#x8C61;</span><br><span class="line">device = torch.device(&apos;cuda:0&apos;)</span><br><span class="line"></span><br><span class="line"># obj.to(device) &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;device&#x8BBE;&#x5907;&#x4E0A;&#x7684;&#x5BF9;&#x8C61;</span><br><span class="line">a = a.to(device)</span><br><span class="line"></span><br><span class="line"># obj.cpu() &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;CPU&#x5BF9;&#x8C61;</span><br><span class="line"></span><br><span class="line"># obj.cuda() &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;GPU&#x5BF9;&#x8C61;</span><br></pre></td></tr></tbody></table></figure><h3 id="datasets-&#x6570;&#x636E;&#x96C6;-&#x6A21;&#x5757;"><a href="#datasets-&#x6570;&#x636E;&#x96C6;-&#x6A21;&#x5757;" class="headerlink" title="datasets(&#x6570;&#x636E;&#x96C6;)&#x6A21;&#x5757;"></a><font size="3">datasets(&#x6570;&#x636E;&#x96C6;)&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import torchvision.datasets as dsets</span><br><span class="line">import torchvision</span><br><span class="line"></span><br><span class="line"># dsets.XXX(root, train=True, transform, download=False) &#x4ECE;root&#x4E3A;&#x6253;&#x5F00;&#x672C;&#x5730;&#x76EE;&#x5F55;&#x4E0B;&#x8F7D;XXX&#x6570;&#x636E;&#x96C6;&#xFF0C;train=True&#x9ED8;&#x8BA4;&#x4E3A;&#x8BAD;&#x7EC3;&#x96C6;&#xFF0C;train=False&#x4E3A;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;download=False&#x9ED8;&#x8BA4;&#x4E3A;&#x4E0D;&#x4ECE;&#x7F51;&#x4E0A;&#x4E0B;&#x8F7D;&#xFF0C;download=True&#x4E3A;&#x4ECE;&#x7F51;&#x7AD9;&#x4E0A;&#x4E0B;&#x8F7D;&#xFF0C;&#x6570;&#x636E;&#x9884;&#x5904;&#x7406;&#x7684;&#x90E8;&#x5206;&#x4E3A;transform</span><br><span class="line">train = dsets.MNIST(root=&apos;mnist&apos;, train=True, transform=torchvision.transforms.ToTensor(), download=False)</span><br></pre></td></tr></tbody></table></figure><h3 id="data-&#x6570;&#x636E;-&#x6A21;&#x5757;"><a href="#data-&#x6570;&#x636E;-&#x6A21;&#x5757;" class="headerlink" title="data(&#x6570;&#x636E;)&#x6A21;&#x5757;"></a><font size="3">data(&#x6570;&#x636E;)&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import torch.utils.data as Data</span><br><span class="line"></span><br><span class="line"># Data.DataLoader(datasets, batch_size, shuffle=False) &#x8BFB;&#x53D6;&#x5DF2;&#x7ECF;&#x52A0;&#x8F7D;&#x7684;&#x6570;&#x636E;&#x96C6;datasets&#xFF0C;&#x5E76;&#x4E14;&#x5206;&#x6210;batch&#xFF0C;&#x6BCF;&#x4E2A;batch&#x7684;&#x5927;&#x5C0F;&#x4E3A;batch_size&#xFF0C;shuffle=False&#x9ED8;&#x8BA4;&#x4E0D;&#x6253;&#x4E71;&#x987A;&#x5E8F;&#xFF0C;shuffle=True&#x4E3A;&#x6253;&#x4E71;batch&#x7684;&#x987A;&#x5E8F;</span><br><span class="line"></span><br><span class="line"># Data.random.split(data, [train_size, test_size]) &#x5C06;data&#x5206;&#x6210;&#x8BAD;&#x7EC3;&#x96C6;&#x548C;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;&#x6BCF;&#x90E8;&#x5206;&#x5927;&#x5C0F;&#x4E3A;[train_size, test_size]</span><br></pre></td></tr></tbody></table></figure><h3 id="nn-&#x795E;&#x7ECF;&#x7F51;&#x7EDC;-&#x6A21;&#x5757;"><a href="#nn-&#x795E;&#x7ECF;&#x7F51;&#x7EDC;-&#x6A21;&#x5757;" class="headerlink" title="nn(&#x795E;&#x7ECF;&#x7F51;&#x7EDC;)&#x6A21;&#x5757;"></a><font size="3">nn(&#x795E;&#x7ECF;&#x7F51;&#x7EDC;)&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import torch.nn as nn</span><br><span class="line"></span><br><span class="line"># nn.Sequential() &#x65F6;&#x5E8F;&#x5BB9;&#x5668;&#xFF0C;&#x53EF;&#x4EE5;&#x4F20;&#x5165;&#x591A;&#x4E2A;&#x7F51;&#x7EDC;&#xFF0C;&#x548C;TensorFlow&#x4E0D;&#x540C;&#xFF0C;&#x53EA;&#x80FD;&#x4E00;&#x4E2A;&#x4E00;&#x4E2A;&#x4F20;&#x5165;&#xFF0C;&#x5E76;&#x7528;&#x9017;&#x53F7;&#x5206;&#x9694;</span><br><span class="line"></span><br><span class="line"># nn.Linear(in_features, out_features) &#x521B;&#x5EFA;&#x7EBF;&#x6027;&#x5C42;&#xFF0C;&#x8F93;&#x5165;&#x7EF4;&#x5EA6;&#x4E3A;in_features&#xFF0C;&#x8F93;&#x51FA;&#x7EF4;&#x5EA6;&#x4E3A;out_features</span><br><span class="line"></span><br><span class="line"># nn.Conv2d(in_channels, out_channels, kernel_size, stride=1, padding=0) &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x5377;&#x79EF;&#x5C42;&#xFF0C;&#x8F93;&#x5165;&#x4FE1;&#x53F7;&#x901A;&#x9053;&#x4E3A;in_channels&#xFF0C;&#x8F93;&#x51FA;&#x4FE1;&#x53F7;&#x901A;&#x9053;&#x4E3A;out_channels&#xFF0C;&#x5377;&#x79EF;&#x6838;&#x5927;&#x5C0F;&#x4E3A;kernel_size&#xFF0C;&#x6838;&#x79FB;&#x52A8;&#x7684;&#x6B65;&#x957F;&#x4E3A;stride&#xFF0C;padding&#x4E3A;&#x8865;0&#x7684;&#x5C42;&#x6570;</span><br><span class="line"></span><br><span class="line"># nn.MaxPool2d(kernel_size, stride=None, padding=0) &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x6700;&#x5927;&#x503C;&#x6C60;&#x5316;&#x5C42;(&#x5E73;&#x5747;&#x503C;&#x6C60;&#x5316;&#x4E3A;AvgPool2d)&#xFF0C;&#x6838;&#x5927;&#x5C0F;&#x4E3A;kernel_size&#xFF0C;&#x6838;&#x79FB;&#x52A8;&#x7684;&#x6B65;&#x957F;&#x9ED8;&#x8BA4;&#x4E3A;&#x6838;&#x7684;&#x5927;&#x5C0F;&#xFF0C;padding&#x4E3A;&#x8865;0&#x7684;&#x5C42;&#x6570;</span><br><span class="line"></span><br><span class="line"># nn.BatchNorm1d(num_features, eps=1e-5, momentum=0.1, affine=True) &#x521B;&#x5EFA;&#x6807;&#x51C6;&#x5316;&#x5C42;(&#x4E8C;&#x7EF4;&#x4E3A;BatchNorm2d)&#xFF0C;num_features&#x4E3A;&#x8981;&#x8BAD;&#x7EC3;&#x7684;&#x6570;&#x636E;&#x91CF;&#xFF0C;</span><br><span class="line"></span><br><span class="line"># nn.RNN(input_size, hidden_size, num_layers, nonlinearity=&apos;tanh&apos;) &#x521B;&#x5EFA;RNN&#x5C42;&#xFF0C;&#x8F93;&#x5165;&#x7279;&#x5F81;&#x6570;&#x91CF;input_size&#xFF0C;&#x9690;&#x5C42;&#x7ED3;&#x70B9;&#x6570;hidden_size&#xFF0C;RNN&#x5C42;&#x6570;num_layers&#xFF0C;&#x975E;&#x7EBF;&#x6027;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;nonlinearity&#x9ED8;&#x8BA4;&#x4E3A;tanh </span><br><span class="line"></span><br><span class="line"># nn.LSTM(input_size, hidden_size, num_layers, nonlinearity=&apos;tanh&apos;) &#x521B;&#x5EFA;&#x957F;&#x77ED;&#x671F;&#x8BB0;&#x5FC6;&#x7F51;&#x7EDC;&#x5C42;&#xFF0C;&#x8F93;&#x5165;&#x7279;&#x5F81;&#x6570;&#x91CF;input_size&#xFF0C;&#x9690;&#x5C42;&#x7ED3;&#x70B9;&#x6570;hidden_size&#xFF0C;RNN&#x5C42;&#x6570;num_layers&#xFF0C;&#x975E;&#x7EBF;&#x6027;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;nonlinearity&#x9ED8;&#x8BA4;&#x4E3A;tanh </span><br><span class="line"></span><br><span class="line"># nn.Dropout(p=0.5) &#x521B;&#x5EFA;dropout&#x5C42;(&#x4E8C;&#x7EF4;&#x4E3A;Dropout2d)&#xFF0C;&#x968F;&#x673A;&#x4E22;&#x5F03;&#x7ED3;&#x70B9;&#x7684;&#x6982;&#x7387;&#x4E3A;p&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;0.5</span><br><span class="line"></span><br><span class="line"># nn.Module &#x81EA;&#x5B9A;&#x4E49;&#x7F51;&#x7EDC;&#x5C42;&#x7684;&#x57FA;&#x7C7B;</span><br><span class="line">class MyLayer(nn.Module):</span><br><span class="line">    def __init__(self, input_dim, output_dim):</span><br><span class="line">        super(MyLayer, self).__init__()</span><br><span class="line">        </span><br><span class="line">        self.kernel = nn.Parameter(torch.randn(input_dim, output_dim))</span><br><span class="line">        self.bias = nn.Parameter(torch.randn(output_dim))</span><br><span class="line"></span><br><span class="line">    def forward(self, inputs):</span><br><span class="line">        out = inputs @ self.kernel + self.bias</span><br><span class="line">        return out</span><br></pre></td></tr></tbody></table></figure><h3 id="transforms-&#x6570;&#x636E;&#x53D8;&#x6362;-&#x6A21;&#x5757;"><a href="#transforms-&#x6570;&#x636E;&#x53D8;&#x6362;-&#x6A21;&#x5757;" class="headerlink" title="transforms(&#x6570;&#x636E;&#x53D8;&#x6362;)&#x6A21;&#x5757;"></a><font size="3">transforms(&#x6570;&#x636E;&#x53D8;&#x6362;)&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import torchvision.transforms as transforms</span><br><span class="line"></span><br><span class="line"># transforms.Normalize(mean, std) &#x6807;&#x51C6;&#x5316;&#x64CD;&#x4F5C;(&#x7C7B;&#x65B9;&#x6CD5;)</span><br><span class="line"></span><br><span class="line"># transforms.RandomRotation(n) &#x5C06;&#x56FE;&#x7247;&#x65CB;&#x8F6C;-n&#x5230;n&#x5EA6;</span><br><span class="line"></span><br><span class="line"># transforms.ToTensor() &#x5C06;numpy&#x56FE;&#x7247;&#x8F6C;&#x6362;&#x4E3A;tensor</span><br><span class="line"></span><br><span class="line"># transforms.ToPILImage() &#x5C06;tensor&#x8F6C;&#x6362;&#x4E3A;numpy&#x56FE;&#x7247;&#x5F62;&#x5F0F;</span><br></pre></td></tr></tbody></table></figure><h3 id="models-&#x6A21;&#x578B;-&#x6A21;&#x5757;"><a href="#models-&#x6A21;&#x578B;-&#x6A21;&#x5757;" class="headerlink" title="models(&#x6A21;&#x578B;)&#x6A21;&#x5757;"></a><font size="3">models(&#x6A21;&#x578B;)&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import torchvision.models as models</span><br><span class="line"></span><br><span class="line"># models.resnet18(pretrained=False) &#x83B7;&#x5F97;resnet18&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#xFF0C;&#x9ED8;&#x8BA4;&#x662F;&#x6CA1;&#x6709;&#x7ECF;&#x8FC7;&#x8BAD;&#x7EC3;&#x7684;&#xFF0C;pretrained=True&#x662F;&#x83B7;&#x5F97;&#x7ECF;&#x8FC7;&#x8BAD;&#x7EC3;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x4FBF;&#x4E8E;&#x5728;&#x5C11;&#x6837;&#x672C;&#x65F6;&#x8FDB;&#x884C;&#x8FC1;&#x79FB;&#x5B66;&#x4E60;</span><br><span class="line"></span><br><span class="line"># models.AlexNet(pretrained=False) &#x83B7;&#x5F97;AlexNet&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#xFF0C;&#x9ED8;&#x8BA4;&#x662F;&#x6CA1;&#x6709;&#x7ECF;&#x8FC7;&#x8BAD;&#x7EC3;&#x7684;&#xFF0C;pretrained=True&#x662F;&#x83B7;&#x5F97;&#x7ECF;&#x8FC7;&#x8BAD;&#x7EC3;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x4FBF;&#x4E8E;&#x5728;&#x5C11;&#x6837;&#x672C;&#x65F6;&#x8FDB;&#x884C;&#x8FC1;&#x79FB;&#x5B66;&#x4E60;</span><br><span class="line"></span><br><span class="line"># models.VGG16(pretrained=False) &#x83B7;&#x5F97;VGG16&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#xFF0C;&#x9ED8;&#x8BA4;&#x662F;&#x6CA1;&#x6709;&#x7ECF;&#x8FC7;&#x8BAD;&#x7EC3;&#x7684;&#xFF0C;pretrained=True&#x662F;&#x83B7;&#x5F97;&#x7ECF;&#x8FC7;&#x8BAD;&#x7EC3;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x4FBF;&#x4E8E;&#x5728;&#x5C11;&#x6837;&#x672C;&#x65F6;&#x8FDB;&#x884C;&#x8FC1;&#x79FB;&#x5B66;&#x4E60;</span><br></pre></td></tr></tbody></table></figure><h3 id="save-&#x4FDD;&#x6301;-&#x6A21;&#x5757;"><a href="#save-&#x4FDD;&#x6301;-&#x6A21;&#x5757;" class="headerlink" title="save(&#x4FDD;&#x6301;)&#x6A21;&#x5757;"></a><font size="3">save(&#x4FDD;&#x6301;)&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line"># torch.save(obj, filename) &#x5C06;obj&#x4FDD;&#x5B58;&#x5728;&#x4EE5;.pkl&#x7ED3;&#x5C3E;&#x7684;filename&#x6587;&#x4EF6;&#x4E2D;</span><br><span class="line"></span><br><span class="line"># torch.load(filename) &#x8BFB;&#x53D6;filename&#x6587;&#x4EF6;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x4FE1;&#x606F;</span><br></pre></td></tr></tbody></table></figure><h1 id="PyTorch&#x5C0F;&#x7ED3;"><a href="#PyTorch&#x5C0F;&#x7ED3;" class="headerlink" title="PyTorch&#x5C0F;&#x7ED3;"></a><font size="5" color="red">PyTorch&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x7531;&#x4E8E;PyTorch&#x7684;&#x7B80;&#x6D01;&#x6027;&#x548C;&#x4F18;&#x96C5;&#x6027;&#xFF0C;&#x4F7F;&#x5F97;PyTorch&#x5BF9;&#x4E8E;&#x5165;&#x95E8;&#x5B66;&#x4E60;&#x7684;&#x4EBA;&#x6765;&#x8BF4;&#x975E;&#x5E38;&#x7684;&#x53CB;&#x597D;&#xFF0C;&#x73B0;&#x5728;PyTorch&#x4E5F;&#x662F;&#x6700;&#x70ED;&#x95E8;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x6846;&#x67B6;&#x4E4B;&#x4E00;&#xFF0C;&#x5177;&#x6709;&#x8F83;&#x5927;&#x7684;&#x6F5C;&#x529B;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;PyTorch&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="深度学习框架" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>TensorFlow</title>
    <link href="https://USTCcoder.github.io/2019/09/06/frame%20TensorFlow/"/>
    <id>https://USTCcoder.github.io/2019/09/06/frame TensorFlow/</id>
    <published>2019-09-06T04:16:40.000Z</published>
    <updated>2020-05-01T05:49:56.021Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">TensorFlow</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;<strong>TensorFlow:</strong>&#x662F;&#x8C37;&#x6B4C;&#x516C;&#x53F8;&#x4E8E;2015&#x5E74;11&#x6708;9&#x65E5;&#x63A8;&#x51FA;&#x7684;&#x4E00;&#x4E2A;&#x5212;&#x65F6;&#x4EE3;&#x7684;<strong>&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x5F00;&#x53D1;&#x5E73;&#x53F0;</strong>&#x3002;TensorFlow&#x662F;&#x4E00;&#x4E2A;&#x5E9E;&#x5927;&#x7684;&#x7CFB;&#x7EDF;&#xFF0C;&#x7ED3;&#x6784;&#x590D;&#x6742;&#xFF0C;&#x529F;&#x80FD;&#x5F3A;&#x5927;&#xFF0C;&#x5229;&#x7528;<strong>&#x6570;&#x636E;&#x6D41;&#x56FE;(Data Flow Graphs)</strong>&#x8FDB;&#x884C;&#x6570;&#x503C;&#x8BA1;&#x7B97;&#x7684;&#x5F00;&#x6E90;&#x8F6F;&#x4EF6;&#x5E93;&#xFF0C;&#x6570;&#x636E;&#x6D41;&#x56FE;&#x4E2D;&#x7684;<strong>&#x7ED3;&#x70B9;(Node)</strong>&#x4EE3;&#x8868;&#x6570;&#x5B66;&#x8FD0;&#x7B97;&#x64CD;&#x4F5C;&#xFF0C;<strong>&#x8FB9;(Edge)</strong>&#x4EE3;&#x8868;&#x8282;&#x70B9;&#x4E4B;&#x95F4;&#x6D41;&#x901A;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x5373;&#x5F20;&#x91CF;(Tensor)&#x3002;<br><a id="more"></a></p><h1 id="TensorFlow&#x7279;&#x70B9;"><a href="#TensorFlow&#x7279;&#x70B9;" class="headerlink" title="TensorFlow&#x7279;&#x70B9;"></a><font size="5" color="red">TensorFlow&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">TensorFlow&#x5177;&#x6709;&#x9AD8;&#x5EA6;&#x7684;&#x7075;&#x6D3B;&#x6027;&#xFF1A;&#x53EA;&#x8981;&#x80FD;&#x591F;&#x5C06;&#x8BA1;&#x7B97;&#x8868;&#x793A;&#x4E3A;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x6D41;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;TensorFlow&#x8FDB;&#x884C;&#x8FD0;&#x7B97;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">TensorFlow&#x5177;&#x6709;&#x5F3A;&#x7684;&#x53EF;&#x79FB;&#x690D;&#x6027;&#xFF1A;TensorFlow&#x652F;&#x6301;CPU&#x548C;GPU&#x8FD0;&#x7B97;&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;&#x8FD0;&#x884C;&#x5728;&#x4E2A;&#x4EBA;&#x7535;&#x8111;&#xFF0C;&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x79FB;&#x52A8;&#x8BBE;&#x5907;&#x7B49;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">TensorFlow&#x8FD0;&#x7B97;&#x7B80;&#x5355;&#xFF1A;&#x5185;&#x90E8;&#x5B9E;&#x73B0;&#x4E86;&#x81EA;&#x52A8;&#x6C42;&#x5BFC;&#x65B9;&#x5F0F;&#xFF0C;&#x50CF;&#x642D;&#x79EF;&#x6728;&#x4E00;&#x6837;&#xFF0C;&#x53EA;&#x8981;&#x5EFA;&#x597D;&#x8FD0;&#x7B97;&#x56FE;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x5173;&#x5FC3;&#x6C42;&#x5BFC;&#x7684;&#x590D;&#x6742;&#x7A0B;&#x5EA6;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">TensorFlow&#x5177;&#x6709;&#x529F;&#x80FD;&#x5F3A;&#x5927;&#x7684;&#x53EF;&#x89C6;&#x5316;&#x7EC4;&#x5EFA;TensorBoard&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x8BAD;&#x7EC3;&#x65F6;&#x76D1;&#x63A7;&#x8BAD;&#x7EC3;&#x8FC7;&#x7A0B;&#x3002;</font></p><h1 id="TensorFlow&#x5E94;&#x7528;"><a href="#TensorFlow&#x5E94;&#x7528;" class="headerlink" title="TensorFlow&#x5E94;&#x7528;"></a><font size="5" color="red">TensorFlow&#x5E94;&#x7528;</font></h1><h2 id="TensorFlow&#x521B;&#x5EFA;tensor"><a href="#TensorFlow&#x521B;&#x5EFA;tensor" class="headerlink" title="TensorFlow&#x521B;&#x5EFA;tensor"></a><font size="4">TensorFlow&#x521B;&#x5EFA;tensor</font></h2><h3 id="constant&#x65B9;&#x6CD5;"><a href="#constant&#x65B9;&#x6CD5;" class="headerlink" title="constant&#x65B9;&#x6CD5;"></a><font size="3">constant&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line"># tf.constant(value, dtype=None, shape=None) &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x5F62;&#x72B6;&#x4E3A;shape&#xFF0C;&#x7C7B;&#x578B;&#x4E3A;dtype&#xFF0C;&#x503C;&#x4E3A;value&#x7684;&#x5F20;&#x91CF;</span><br><span class="line">a = tf.constant([[1, 2, 3], [4, 5, 6]])</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow1.png" alt="1"></p><h3 id="CPU&#xFF0C;GPU&#x65B9;&#x6CD5;"><a href="#CPU&#xFF0C;GPU&#x65B9;&#x6CD5;" class="headerlink" title="CPU&#xFF0C;GPU&#x65B9;&#x6CD5;"></a><font size="3">CPU&#xFF0C;GPU&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line">a = tf.constant([[1, 2, 3], [4, 5, 6]])</span><br><span class="line"></span><br><span class="line"># obj.device() &#x67E5;&#x770B;tensor&#x7684;&#x73AF;&#x5883;&#x662F;CPU&#x8FD8;&#x662F;GPU</span><br><span class="line">a.device</span><br><span class="line"></span><br><span class="line"># obj.gpu() &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x65B0;tensor&#x4F4D;&#x4E8E;GPU </span><br><span class="line">b = a.gpu()</span><br><span class="line"></span><br><span class="line"># obj.cpu() &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x65B0;tensor&#x4F4D;&#x4E8E;CPU</span><br><span class="line">c = b.cpu()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow2.png" alt="3"></p><h3 id="numpy&#xFF0C;shape&#xFF0C;ndim&#xFF0C;dtype&#x65B9;&#x6CD5;"><a href="#numpy&#xFF0C;shape&#xFF0C;ndim&#xFF0C;dtype&#x65B9;&#x6CD5;" class="headerlink" title="numpy&#xFF0C;shape&#xFF0C;ndim&#xFF0C;dtype&#x65B9;&#x6CD5;"></a><font size="3">numpy&#xFF0C;shape&#xFF0C;ndim&#xFF0C;dtype&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line">a = tf.constant([[1, 2, 3], [4, 5, 6]])</span><br><span class="line"></span><br><span class="line"># obj.numpy() &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x65B0;&#x7684;ndarray&#xFF0C;&#x5373;&#x5C06;tensor&#x53D8;&#x6210;numpy&#x6570;&#x7EC4;</span><br><span class="line">b = a.numpy</span><br><span class="line"></span><br><span class="line"># obj.shape &#x67E5;&#x770B;tensor&#x7684;&#x7EF4;&#x5EA6;&#x4FE1;&#x606F;</span><br><span class="line">a.shape</span><br><span class="line"></span><br><span class="line"># obj.ndim &#x67E5;&#x770B;tensor&#x7684;&#x7EF4;&#x5EA6;&#x6570;</span><br><span class="line">a.ndim</span><br><span class="line"></span><br><span class="line"># obj.dtype &#x67E5;&#x770B;tensor&#x7684;&#x7C7B;&#x578B;</span><br><span class="line">a.dtype</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow3.png" alt="3"></p><h3 id="convert-to-tensor&#xFF0C;cast&#x65B9;&#x6CD5;"><a href="#convert-to-tensor&#xFF0C;cast&#x65B9;&#x6CD5;" class="headerlink" title="convert_to_tensor&#xFF0C;cast&#x65B9;&#x6CD5;"></a><font size="3">convert_to_tensor&#xFF0C;cast&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.array([[1, 2, 3], [4, 5, 6]])</span><br><span class="line"></span><br><span class="line"># tf.convert_to_tensor(value, dtype=None) &#x5C06;value&#x8F6C;&#x6362;&#x4E3A;tensor&#x5F62;&#x5F0F;&#xFF0C;&#x5E38;&#x7528;&#x6765;&#x5C06;numpy&#x683C;&#x5F0F;&#x8F6C;&#x6362;&#x4E3A;tensor&#x683C;&#x5F0F;</span><br><span class="line">b = tf.convert_to_tensor(a)</span><br><span class="line"></span><br><span class="line"># tf.cast(value, dtype) &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x503C;&#x4E3A;value&#xFF0C;&#x7C7B;&#x578B;&#x4E3A;dtype&#x7684;tensor&#xFF0C;&#x5E38;&#x7528;&#x6765;&#x4FEE;&#x6539;tensor&#x7684;&#x7C7B;&#x578B;</span><br><span class="line">c = tf.cast(b, dtype=tf.float32)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow4.png" alt="4"></p><h3 id="zeros&#xFF0C;ones&#xFF0C;fill&#xFF0C;random&#x65B9;&#x6CD5;"><a href="#zeros&#xFF0C;ones&#xFF0C;fill&#xFF0C;random&#x65B9;&#x6CD5;" class="headerlink" title="zeros&#xFF0C;ones&#xFF0C;fill&#xFF0C;random&#x65B9;&#x6CD5;"></a><font size="3">zeros&#xFF0C;ones&#xFF0C;fill&#xFF0C;random&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line"># tf.zeros(shape) &#x4EA7;&#x751F;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x503C;&#x5168;&#x4E3A;0&#x7684;tensor</span><br><span class="line">a = tf.zeros((3, 3))</span><br><span class="line"></span><br><span class="line"># tf.ones(shape) &#x4EA7;&#x751F;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x503C;&#x5168;&#x4E3A;1&#x7684;tensor</span><br><span class="line">b = tf.ones((3, 3))</span><br><span class="line"></span><br><span class="line"># tf.fill(shape, value) &#x4EA7;&#x751F;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x503C;&#x5168;&#x4E3A;value&#x7684;tensor</span><br><span class="line">c = tf.fill((3, 3), -1) </span><br><span class="line"></span><br><span class="line"># tf.random.normal(shape, mean=0, stddev=1) &#x4EA7;&#x751F;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x9AD8;&#x65AF;&#x5206;&#x5E03;&#xFF0C;&#x5747;&#x503C;&#x9ED8;&#x8BA4;&#x4E3A;0&#xFF0C;&#x6807;&#x51C6;&#x5DEE;&#x9ED8;&#x8BA4;&#x4E3A;1</span><br><span class="line">d = tf.random.normal((3, 3)) </span><br><span class="line"></span><br><span class="line"># tf.random.uniform(shape, mean=0, stddev=1) &#x4EA7;&#x751F;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x5747;&#x5300;&#x5206;&#x5E03;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;(0-1)&#x5747;&#x5300;&#x5206;&#x5E03;</span><br><span class="line">e = tf.random.uniform((3, 3)) </span><br><span class="line"></span><br><span class="line"># tf.random.shuffle(value, seed) &#x5C06;value&#x6309;&#x7167;&#x79CD;&#x5B50;seed&#x6253;&#x6563;</span><br><span class="line">f = tf.random.shuffle(d)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow5.png" alt="5"></p><h3 id="zeros-like&#xFF0C;ones-like&#xFF0C;one-hot&#xFF0C;range&#x65B9;&#x6CD5;"><a href="#zeros-like&#xFF0C;ones-like&#xFF0C;one-hot&#xFF0C;range&#x65B9;&#x6CD5;" class="headerlink" title="zeros_like&#xFF0C;ones_like&#xFF0C;one_hot&#xFF0C;range&#x65B9;&#x6CD5;"></a><font size="3">zeros_like&#xFF0C;ones_like&#xFF0C;one_hot&#xFF0C;range&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line">a = tf.random.normal((3, 3))</span><br><span class="line"></span><br><span class="line"># tf.zeros_like(input, dtype) &#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x5927;&#x5C0F;&#x548C;input&#x76F8;&#x540C;&#x503C;&#x4E3A;&#x5168;0&#x7684;tensor</span><br><span class="line">b = tf.zeros_like(a)</span><br><span class="line"></span><br><span class="line"># tf.ones_like(input, dtype) &#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x5927;&#x5C0F;&#x548C;input&#x76F8;&#x540C;&#x503C;&#x4E3A;&#x5168;1&#x7684;tensor</span><br><span class="line">c = tf.ones_like(a)</span><br><span class="line"></span><br><span class="line"># tf.range(start, end, interval, dtype) &#x4EA7;&#x751F;&#x4ECE;start&#x5230;end&#xFF0C;&#x6B65;&#x957F;&#x4E3A;interval&#x7684;&#x8FDE;&#x7EED;&#x5F20;&#x91CF;&#xFF0C;&#x7528;&#x6CD5;&#x540C;numpy&#x4E2D;&#x7684;arange</span><br><span class="line">d = tf.range(10)</span><br><span class="line"></span><br><span class="line"># tf.one_hot(indices, depth) &#x5C06;indices&#x8F6C;&#x6362;&#x4E3A;&#x72EC;&#x70ED;&#x7F16;&#x7801;&#xFF0C;&#x6DF1;&#x5EA6;&#x4E3A;depth</span><br><span class="line">e = tf.one_hot(d, depth=10)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow6.png" alt="6"></p><h2 id="TensorFlow&#x5207;&#x7247;&#x4E0E;&#x7D22;&#x5F15;"><a href="#TensorFlow&#x5207;&#x7247;&#x4E0E;&#x7D22;&#x5F15;" class="headerlink" title="TensorFlow&#x5207;&#x7247;&#x4E0E;&#x7D22;&#x5F15;"></a><font size="4">TensorFlow&#x5207;&#x7247;&#x4E0E;&#x7D22;&#x5F15;</font></h2><h3 id="&#x7D22;&#x5F15;"><a href="#&#x7D22;&#x5F15;" class="headerlink" title="[]&#x7D22;&#x5F15;"></a><font size="3">[]&#x7D22;&#x5F15;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(27).reshape((3, 3, 3))</span><br><span class="line">b = tf.convert_to_tensor(a)</span><br><span class="line"></span><br><span class="line"># obj[index0][index1]...&#x7B49;&#x4EF7;&#x4E8E;obj[index0, index1, ...] &#x7D22;&#x5F15;</span><br><span class="line">b[1][1][1]</span><br><span class="line">b[1, 1, 1]</span><br><span class="line"></span><br><span class="line"># obj[start, end, step] &#x5207;&#x7247;&#x7D22;&#x5F15;</span><br><span class="line">b[0:2, 0:2, 0:2]</span><br><span class="line"></span><br><span class="line"># obj[...] ...&#x53EF;&#x4EE5;&#x4EE3;&#x66FF;&#x8FDE;&#x7EED;&#x7684;:</span><br><span class="line">b[..., 0]</span><br><span class="line">b[0, ...]</span><br><span class="line">b[0, ..., 0]</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow7.png" alt="7"></p><h3 id="gather&#xFF0C;gather-nd&#xFF0C;boolean-mask&#x65B9;&#x6CD5;"><a href="#gather&#xFF0C;gather-nd&#xFF0C;boolean-mask&#x65B9;&#x6CD5;" class="headerlink" title="gather&#xFF0C;gather_nd&#xFF0C;boolean_mask&#x65B9;&#x6CD5;"></a><font size="3">gather&#xFF0C;gather_nd&#xFF0C;boolean_mask&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(27).reshape((3, 3, 3))</span><br><span class="line">b = tf.convert_to_tensor(a)</span><br><span class="line"></span><br><span class="line"># tf.gather(obj, axis, indices) &#x5728;&#x7EF4;&#x5EA6;axis&#x4E0A;&#x7D22;&#x5F15;indices&#xFF0C;&#x5E76;&#x4E14;&#x8FDE;&#x63A5;&#x6210;&#x4E00;&#x4E2A;&#x65B0;&#x7684;tensor</span><br><span class="line">c = tf.gather(b, axis=0, indices=[1, 0]) # &#x5728;&#x7B2C;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;&#x4E0A;&#x9009;&#x62E9;&#x524D;&#x4E24;&#x4E2A;&#xFF0C;&#x5E76;&#x4E14;&#x5C06;&#x987A;&#x5E8F;&#x8C03;&#x6362;</span><br><span class="line">d = tf.gather(b, axis=1, indices=[1, 0]) # &#x5728;&#x7B2C;&#x4E8C;&#x4E2A;&#x7EF4;&#x5EA6;&#x4E0A;&#x9009;&#x62E9;&#x524D;&#x4E24;&#x4E2A;&#xFF0C;&#x5E76;&#x4E14;&#x5C06;&#x987A;&#x5E8F;&#x8C03;&#x6362;</span><br><span class="line"></span><br><span class="line"># tf.gather_nd(obj, indices) &#x5728;&#x591A;&#x7EF4;&#x5EA6;&#x4E0A;&#x7D22;&#x5F15;indices&#xFF0C;&#x5E76;&#x4E14;&#x8FDE;&#x63A5;&#x6210;&#x4E00;&#x4E2A;&#x65B0;&#x7684;tensor</span><br><span class="line">e = tf.gather_nd(b, indices=[[0, 0], [1, 1]]) # &#x7D22;&#x5F15;&#x7B2C;1&#x4E2A;&#x7EF4;&#x5EA6;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x548C;&#x7B2C;2&#x4E2A;&#x7EF4;&#x5EA6;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x6570;&#x636E;</span><br><span class="line">f = tf.gather_nd(b, indices=[[0, 0, 0], [0, 0, 1], [0, 0, 2]]) # &#x7D22;&#x5F15;&#x7B2C;1&#x4E2A;&#x7EF4;&#x5EA6;&#x7684;&#x7B2C;1&#x884C;&#x7684;&#x7B2C;1&#x5217;&#xFF0C;&#x7B2C;1&#x4E2A;&#x7EF4;&#x5EA6;&#x7684;&#x7B2C;1&#x884C;&#x7684;&#x7B2C;2&#x5217;&#xFF0C;&#x7B2C;1&#x4E2A;&#x7EF4;&#x5EA6;&#x7684;&#x7B2C;1&#x884C;&#x7684;&#x7B2C;3&#x5217;</span><br><span class="line"></span><br><span class="line"># tf.boolean_mask(obj, mask, axis) &#x5728;axis&#x8F74;&#x4E0A;&#x63A9;&#x6A21;&#x7D22;&#x5F15;</span><br><span class="line">g = tf.boolean_mask(b, [[True,True,False],[True,False,False],[False,False,False]], axis=0) # &#x5728;&#x7B2C;&#x4E00;&#x7EF4;&#x5EA6;&#x4E0A;&#x9009;&#x62E9;&#x524D;&#x4E24;&#x884C;&#xFF0C;&#x5728;&#x7B2C;&#x4E8C;&#x7EF4;&#x5EA6;&#x4E0A;&#x9009;&#x62E9;&#x7B2C;&#x4E00;&#x884C;&#xFF0C;&#x4E00;&#x5171;&#x4E09;&#x884C;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow8.png" alt="8"></p><h2 id="TensorFlow&#x7EF4;&#x5EA6;&#x53D8;&#x5316;"><a href="#TensorFlow&#x7EF4;&#x5EA6;&#x53D8;&#x5316;" class="headerlink" title="TensorFlow&#x7EF4;&#x5EA6;&#x53D8;&#x5316;"></a><font size="4">TensorFlow&#x7EF4;&#x5EA6;&#x53D8;&#x5316;</font></h2><h3 id="reshape&#xFF0C;transpose&#xFF0C;expand-dims&#xFF0C;squeeze&#x65B9;&#x6CD5;"><a href="#reshape&#xFF0C;transpose&#xFF0C;expand-dims&#xFF0C;squeeze&#x65B9;&#x6CD5;" class="headerlink" title="reshape&#xFF0C;transpose&#xFF0C;expand_dims&#xFF0C;squeeze&#x65B9;&#x6CD5;"></a><font size="3">reshape&#xFF0C;transpose&#xFF0C;expand_dims&#xFF0C;squeeze&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(4).reshape((2, 1, 2))</span><br><span class="line">b = tf.constant(a)</span><br><span class="line"></span><br><span class="line"># tf.reshape(tensor, shape) &#x8FD4;&#x56DE;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;tensor</span><br><span class="line">c = tf.reshape(a, (2, 2))</span><br><span class="line"></span><br><span class="line"># tf.transpose(tensor, perm=None) &#x5C06;&#x8F74;&#x8FDB;&#x884C;&#x8C03;&#x6362;&#xFF0C;&#x9ED8;&#x8BA4;&#x7FFB;&#x8F6C;&#x8F74;</span><br><span class="line">d = tf.transpose(b, (1, 2, 0))</span><br><span class="line"></span><br><span class="line"># tf.expand_dims(tensor, axis) &#x5728;axis&#x4E0A;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;</span><br><span class="line">e = tf.expand_dims(b, axis=3)</span><br><span class="line"></span><br><span class="line"># tf.squeeze(tensor, axis=None) &#x5C06;axis&#x4E0A;&#x4E3A;1&#x7684;&#x7EF4;&#x5EA6;&#x5220;&#x53BB;&#xFF0C;&#x9ED8;&#x8BA4;&#x5220;&#x9664;&#x6240;&#x6709;&#x4E3A;1&#x7684;&#x7EF4;&#x5EA6;</span><br><span class="line">f = tf.squeeze(e)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow9.png" alt="9"></p><h3 id="broadcast-to&#xFF0C;tile&#x65B9;&#x6CD5;"><a href="#broadcast-to&#xFF0C;tile&#x65B9;&#x6CD5;" class="headerlink" title="broadcast_to&#xFF0C;tile&#x65B9;&#x6CD5;"></a><font size="3">broadcast_to&#xFF0C;tile&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line">a = tf.range(3)</span><br><span class="line">b = tf.reshape(a, (1, 3))</span><br><span class="line"></span><br><span class="line"># tf.broadcast_to(input, shape) &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x5E7F;&#x64AD;&#x540E;&#x7684;tensor</span><br><span class="line">c = tf.broadcast_to(a, (3, 3))</span><br><span class="line"></span><br><span class="line"># tf.tile(input, multiples) &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x7ECF;&#x8FC7;&#x590D;&#x5236;&#x7684;tensor</span><br><span class="line">d = tf.tile(b, [2, 2])</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow10.png" alt="10"></p><h2 id="TensorFlow&#x5408;&#x5E76;&#x4E0E;&#x5206;&#x5272;"><a href="#TensorFlow&#x5408;&#x5E76;&#x4E0E;&#x5206;&#x5272;" class="headerlink" title="TensorFlow&#x5408;&#x5E76;&#x4E0E;&#x5206;&#x5272;"></a><font size="4">TensorFlow&#x5408;&#x5E76;&#x4E0E;&#x5206;&#x5272;</font></h2><h3 id="concat&#xFF0C;stack&#xFF0C;unstack&#xFF0C;split&#x65B9;&#x6CD5;"><a href="#concat&#xFF0C;stack&#xFF0C;unstack&#xFF0C;split&#x65B9;&#x6CD5;" class="headerlink" title="concat&#xFF0C;stack&#xFF0C;unstack&#xFF0C;split&#x65B9;&#x6CD5;"></a><font size="3">concat&#xFF0C;stack&#xFF0C;unstack&#xFF0C;split&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(6).reshape((2, 3))</span><br><span class="line">b = np.arange(3, 9).reshape((2, 3))</span><br><span class="line">c = tf.constant(a)</span><br><span class="line">d = tf.constant(b)</span><br><span class="line"></span><br><span class="line"># tf.concat(values, axis) &#x5C06;&#x591A;&#x4E2A;values&#x6309;&#x7167;axis&#x8F74;&#x8FDB;&#x884C;&#x5408;&#x5E76;</span><br><span class="line">e = tf.concat([c, d], axis=1)</span><br><span class="line"></span><br><span class="line"># tf.stack(values, axis) &#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x65B0;&#x7EF4;&#x5EA6;&#xFF0C;&#x5E76;&#x5408;&#x5E76;&#x5230;&#x8BE5;&#x7EF4;&#x5EA6;</span><br><span class="line">f = tf.stack([c, d], axis=1)</span><br><span class="line"></span><br><span class="line"># tf.unstack(value, axis) &#x5BF9;value&#x6309;&#x7167;axis&#x8F74;&#x8FDB;&#x884C;&#x62C6;&#x5206;</span><br><span class="line">g = tf.unstack(f, axis=1)</span><br><span class="line"></span><br><span class="line"># tf.split(value, num_or_size_splits, axis) &#x5BF9;value&#x6309;&#x7167;axis&#x8F74;&#x8FDB;&#x884C;&#x62C6;&#x5206;&#xFF0C;&#x5982;&#x679C;&#x5E0C;&#x671B;&#x5747;&#x5300;&#x62C6;&#x5206;&#x5219;num_or_size_splits&#x4E3A;&#x5E38;&#x6570;&#xFF0C;&#x5426;&#x5219;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x5217;&#x8868;&#xFF0C;&#x4EE3;&#x8868;&#x6BCF;&#x4E00;&#x90E8;&#x5206;&#x7684;&#x6570;&#x91CF;</span><br><span class="line">h = tf.split(e, 3, axis=1)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow11.png" alt="11"></p><h2 id="tensorflow&#x6570;&#x636E;&#x7EDF;&#x8BA1;"><a href="#tensorflow&#x6570;&#x636E;&#x7EDF;&#x8BA1;" class="headerlink" title="tensorflow&#x6570;&#x636E;&#x7EDF;&#x8BA1;"></a><font size="4">tensorflow&#x6570;&#x636E;&#x7EDF;&#x8BA1;</font></h2><h3 id="reduce-min&#xFF0C;reduce-max&#xFF0C;reduce-mean&#x65B9;&#x6CD5;"><a href="#reduce-min&#xFF0C;reduce-max&#xFF0C;reduce-mean&#x65B9;&#x6CD5;" class="headerlink" title="reduce_min&#xFF0C;reduce_max&#xFF0C;reduce_mean&#x65B9;&#x6CD5;"></a><font size="3">reduce_min&#xFF0C;reduce_max&#xFF0C;reduce_mean&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line">a = tf.reshape(tf.random.shuffle(tf.range(1, 13)), (3, 4))</span><br><span class="line"></span><br><span class="line"># tf.reduce_min(input_tensor, axis=None) &#x6C42;input_tensor&#x5728;axis&#x4E0A;&#x7684;&#x6700;&#x5C0F;&#x503C;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x5168;&#x5C40;&#x6700;&#x5C0F;&#x503C;</span><br><span class="line">b = tf.reduce_min(a)</span><br><span class="line"></span><br><span class="line"># tf.reduce_max(input_tensor, axis=None) &#x6C42;input_tensor&#x5728;axis&#x4E0A;&#x7684;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x5168;&#x5C40;&#x6700;&#x5927;&#x503C;</span><br><span class="line">c = tf.reduce_max(a, axis=0)</span><br><span class="line"></span><br><span class="line"># tf.reduce_mean(input_tensor, axis=None) &#x6C42;input_tensor&#x5728;axis&#x4E0A;&#x7684;&#x5E73;&#x5747;&#x503C;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x5168;&#x5C40;&#x5E73;&#x5747;&#x503C;</span><br><span class="line">d = tf.reduce_mean(a, axis=1)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow12.png" alt="12"></p><h3 id="argmax&#xFF0C;argmin&#x65B9;&#x6CD5;"><a href="#argmax&#xFF0C;argmin&#x65B9;&#x6CD5;" class="headerlink" title="argmax&#xFF0C;argmin&#x65B9;&#x6CD5;"></a><font size="3">argmax&#xFF0C;argmin&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line">a = tf.reshape(tf.random.shuffle(tf.range(1, 13)), (3, 4))</span><br><span class="line"></span><br><span class="line"># tf.argmax(input, axis=0) &#x6C42;input&#x5728;axis&#x8F74;&#x7684;&#x6700;&#x5927;&#x503C;&#x7D22;&#x5F15;&#xFF0C;&#x9ED8;&#x8BA4;&#x5728;&#x7B2C;&#x4E00;&#x4E2A;&#x8F74;</span><br><span class="line">b = tf.argmax(a, axis=0)</span><br><span class="line"></span><br><span class="line"># tf.argmin(input, axis=0) &#x6C42;input&#x5728;axis&#x8F74;&#x7684;&#x6700;&#x5C0F;&#x503C;&#x7D22;&#x5F15;&#xFF0C;&#x9ED8;&#x8BA4;&#x5728;&#x7B2C;&#x4E00;&#x4E2A;&#x8F74;</span><br><span class="line">c = tf.argmin(a, axis=1)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow13.png" alt="13"></p><h3 id="equal&#xFF0C;unique&#x65B9;&#x6CD5;"><a href="#equal&#xFF0C;unique&#x65B9;&#x6CD5;" class="headerlink" title="equal&#xFF0C;unique&#x65B9;&#x6CD5;"></a><font size="3">equal&#xFF0C;unique&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line">a = tf.constant([[1, 1], [0, 0]])</span><br><span class="line">b = tf.constant([[1, 0], [1, 0]])</span><br><span class="line">c = tf.constant([1,2,3,2,1])</span><br><span class="line"></span><br><span class="line"># tf.equal(x, y) &#x6BD4;&#x8F83;x&#x548C;y&#x662F;&#x5426;&#x76F8;&#x7B49;&#xFF0C;&#x5728;&#x5982;&#x679C;&#x76F8;&#x7B49;&#x5219;&#x5BF9;&#x5E94;&#x4F4D;&#x7F6E;&#x4E3A;True&#xFF0C;&#x5426;&#x5219;&#x4E3A;False</span><br><span class="line">d = tf.equal(a, b)</span><br><span class="line"></span><br><span class="line"># tf.unique(x) &#x627E;&#x51FA;x&#x4E2D;&#x6709;&#x591A;&#x5C11;&#x4E0D;&#x540C;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x5176;&#x7D22;&#x5F15;</span><br><span class="line">e = tf.unique(c)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow14.png" alt="14"></p><h3 id="norm&#xFF0C;top-k&#x65B9;&#x6CD5;"><a href="#norm&#xFF0C;top-k&#x65B9;&#x6CD5;" class="headerlink" title="norm&#xFF0C;top_k&#x65B9;&#x6CD5;"></a><font size="3">norm&#xFF0C;top_k&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line">a = tf.reshape(tf.random.shuffle(tf.range(1, 13, dtype=tf.float32)), (3, 4))</span><br><span class="line"></span><br><span class="line"># tf.norm(tensor, str, axis=-1) &#x6C42;tensor&#x7684;p&#x8303;&#x6570;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x5168;&#x5C40;p&#x8303;&#x6570;</span><br><span class="line">b = tf.norm(a, 2, axis=0)</span><br><span class="line"></span><br><span class="line"># tf.math.top_k(input, k, bool=True) &#x5728;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;&#x6C42;input&#x4E2D;&#x524D;k&#x4E2A;&#x6700;&#x5927;&#x503C;&#x6216;&#x6700;&#x5C0F;&#x503C;&#x53CA;&#x5176;&#x7D22;&#x5F15;&#xFF0C;bool=True&#x4E3A;&#x6700;&#x5927;&#x503C;&#xFF0C;bool=False&#x4E3A;&#x6700;&#x5C0F;&#x503C;&#x3002;</span><br><span class="line">c = tf.math.top_k(a, 2, True)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow15.png" alt="15"></p><h2 id="tensorflow&#x6392;&#x5E8F;"><a href="#tensorflow&#x6392;&#x5E8F;" class="headerlink" title="tensorflow&#x6392;&#x5E8F;"></a><font size="4">tensorflow&#x6392;&#x5E8F;</font></h2><h3 id="sort&#xFF0C;argsort&#x65B9;&#x6CD5;"><a href="#sort&#xFF0C;argsort&#x65B9;&#x6CD5;" class="headerlink" title="sort&#xFF0C;argsort&#x65B9;&#x6CD5;"></a><font size="3">sort&#xFF0C;argsort&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line">a = tf.reshape(tf.random.shuffle(tf.range(1, 13)), (3, 4))</span><br><span class="line"></span><br><span class="line"># tf.sort(values, direction=&apos;ASCENDING&apos;, axis=-1) &#x6309;axis&#x8F74;&#x5BF9;values&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x8FD4;&#x56DE;&#x6392;&#x5E8F;&#x540E;&#x7684;&#x7ED3;&#x679C;&#xFF0C;direction=&apos;ASCENDING&apos;&#x4EE3;&#x8868;&#x9012;&#x589E;&#x6392;&#x5E8F;&#xFF0C;&apos;DESCENDING&apos;&#x4EE3;&#x8868;&#x9012;&#x51CF;&#x6392;&#x5E8F;</span><br><span class="line">b = tf.sort(a, axis=0)</span><br><span class="line"></span><br><span class="line"># tf.argsort(values, direction=&apos;ASCENDING&apos;, axis=-1) &#x6309;axis&#x8F74;&#x5BF9;values&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x8FD4;&#x56DE;&#x6392;&#x5E8F;&#x540E;&#x7684;&#x7D22;&#x5F15;&#xFF0C;direction=&apos;ASCENDING&apos;&#x4EE3;&#x8868;&#x9012;&#x589E;&#x6392;&#x5E8F;&#xFF0C;&apos;DESCENDING&apos;&#x4EE3;&#x8868;&#x9012;&#x51CF;&#x6392;&#x5E8F;</span><br><span class="line">c = tf.argsort(a, axis=1)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow16.png" alt="16"></p><h2 id="tensorflow&#x5F20;&#x91CF;&#x9650;&#x5E45;"><a href="#tensorflow&#x5F20;&#x91CF;&#x9650;&#x5E45;" class="headerlink" title="tensorflow&#x5F20;&#x91CF;&#x9650;&#x5E45;"></a><font size="4">tensorflow&#x5F20;&#x91CF;&#x9650;&#x5E45;</font></h2><h3 id="maximun&#xFF0C;minimum&#x65B9;&#x6CD5;"><a href="#maximun&#xFF0C;minimum&#x65B9;&#x6CD5;" class="headerlink" title="maximun&#xFF0C;minimum&#x65B9;&#x6CD5;"></a><font size="3">maximun&#xFF0C;minimum&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line">a = tf.reshape(tf.random.shuffle(tf.range(1, 13)), (3, 4))</span><br><span class="line">b = tf.reshape(tf.random.shuffle(tf.range(1, 13)), (3, 4))</span><br><span class="line"></span><br><span class="line"># tf.maximun(x, y) &#x53D6;x&#xFF0C;y&#x4E2D;&#x7684;&#x5927;&#x6570;&#x5E76;&#x8FD4;&#x56DE;</span><br><span class="line">c = tf.maximum(a, b)</span><br><span class="line"></span><br><span class="line"># tf.minimun(x, y) &#x53D6;x&#xFF0C;y&#x4E2D;&#x7684;&#x5C0F;&#x6570;&#x5E76;&#x8FD4;&#x56DE;</span><br><span class="line">d = tf.minimum(a, b)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow17.png" alt="17"></p><h3 id="clip-by-value&#x65B9;&#x6CD5;"><a href="#clip-by-value&#x65B9;&#x6CD5;" class="headerlink" title="clip_by_value&#x65B9;&#x6CD5;"></a><font size="3">clip_by_value&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line">a = tf.reshape(tf.random.shuffle(tf.range(1, 13)), (3, 4))</span><br><span class="line"></span><br><span class="line"># tf.clip_by_value(t, clip_value_min, clip_value_max) &#x5C06;t&#x4E2D;&#x5C0F;&#x4E8E;clip_value_min&#x7684;&#x503C;&#x8D4B;&#x503C;&#x4E3A;clip_value_min&#xFF0C;&#x5927;&#x4E8E;clip_value_max&#x7684;&#x503C;&#x8D4B;&#x503C;&#x4E3A;clip_value_max</span><br><span class="line">b = tf.clip_by_value(a, 3, 7)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow18.png" alt="18"></p><h2 id="tensorflow&#x6570;&#x5B66;&#x8FD0;&#x7B97;"><a href="#tensorflow&#x6570;&#x5B66;&#x8FD0;&#x7B97;" class="headerlink" title="tensorflow&#x6570;&#x5B66;&#x8FD0;&#x7B97;"></a><font size="4">tensorflow&#x6570;&#x5B66;&#x8FD0;&#x7B97;</font></h2><h3 id="&#x5E38;&#x89C4;&#x8FD0;&#x7B97;&#x65B9;&#x6CD5;"><a href="#&#x5E38;&#x89C4;&#x8FD0;&#x7B97;&#x65B9;&#x6CD5;" class="headerlink" title="&#x5E38;&#x89C4;&#x8FD0;&#x7B97;&#x65B9;&#x6CD5;"></a><font size="3">&#x5E38;&#x89C4;&#x8FD0;&#x7B97;&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line">a = tf.reshape(tf.random.shuffle(tf.range(1, 5, dtype=tf.float32)), (2, 2))</span><br><span class="line">b = tf.reshape(tf.random.shuffle(tf.range(1, 5, dtype=tf.float32)), (2, 2))</span><br><span class="line"></span><br><span class="line"># tensor1 op tensor2 &#x5C06;tensor1&#x4E0E;tensor2&#x8FDB;&#x884C;&#x5E38;&#x89C4;&#x7684;&#x6570;&#x5B66;&#x8FD0;&#x7B97;&#xFF0C;&#x5982;&#x679C;&#x7EF4;&#x5EA6;&#x5927;&#x5C0F;&#x4E0D;&#x540C;&#xFF0C;&#x5219;&#x8FDB;&#x884C;&#x5E7F;&#x64AD;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x80FD;&#x5E7F;&#x64AD;&#x5219;&#x62A5;&#x9519;</span><br><span class="line">c = a + b</span><br><span class="line">d = a ** b</span><br><span class="line"></span><br><span class="line"># tf.sqrt(x) &#x5C06;x&#x8FDB;&#x884C;&#x5F00;&#x65B9;&#x8FD0;&#x7B97;</span><br><span class="line">e = tf.sqrt(a)</span><br><span class="line"></span><br><span class="line"># tf.exp(x) &#x6C42;e&#x7684;x&#x6B21;&#x5E42;</span><br><span class="line">f = tf.exp(a)</span><br><span class="line"></span><br><span class="line"># tf.math.log(x) &#x6C42;x&#x4EE5;e&#x4E3A;&#x5E95;&#x7684;&#x5BF9;&#x6570;</span><br><span class="line">g = tf.math.log(a)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow19.png" alt="19"></p><h3 id="matmul&#x65B9;&#x6CD5;"><a href="#matmul&#x65B9;&#x6CD5;" class="headerlink" title="matmul&#x65B9;&#x6CD5;"></a><font size="3">matmul&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line">a = tf.reshape(tf.random.shuffle(tf.range(1, 5, dtype=tf.float32)), (2, 2))</span><br><span class="line">b = tf.reshape(tf.random.shuffle(tf.range(1, 5, dtype=tf.float32)), (2, 2))</span><br><span class="line"></span><br><span class="line"># tf.matmul(a, b) a&#x548C;b&#x7684;&#x77E9;&#x9635;&#x4E58;&#x6CD5;&#xFF0C;&#x7B49;&#x4EF7;&#x4E8E;a @ b</span><br><span class="line">c = tf.matmul(a, b)</span><br><span class="line">d = a @ b</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow20.png" alt="20"></p><h3 id="where&#x65B9;&#x6CD5;"><a href="#where&#x65B9;&#x6CD5;" class="headerlink" title="where&#x65B9;&#x6CD5;"></a><font size="3">where&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line">a = tf.constant([[False, True], [True, False]])</span><br><span class="line">b = tf.constant([[1, 2], [3, 4]])</span><br><span class="line">c = tf.constant([[-1, -2], [-3, -4]])</span><br><span class="line"></span><br><span class="line"># tf.where(obj) &#x8FD4;&#x56DE;obj&#x4E2D;True&#x7684;&#x4F4D;&#x7F6E;&#x7684;&#x7D22;&#x5F15;</span><br><span class="line">d = tf.where(a)</span><br><span class="line"></span><br><span class="line"># tf.where(tensor1, tensor2, tensor3) &#x5982;&#x679C;tensor1&#x5BF9;&#x5E94;&#x4F4D;&#x7F6E;&#x4E3A;True&#x5219;&#x4ECE;tensor2&#x4E2D;&#x53D6;&#x5F97;&#x76F8;&#x5E94;&#x5143;&#x7D20;&#xFF0C;&#x5426;&#x5219;&#x4ECE;tensor3&#x4E2D;&#x53D6;&#x5F97;&#x76F8;&#x5E94;&#x5143;&#x7D20;</span><br><span class="line">e = tf.where(a, b, c)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow21.png" alt="21"></p><h2 id="tensorflow&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;"><a href="#tensorflow&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;" class="headerlink" title="tensorflow&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;"></a><font size="4">tensorflow&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;</font></h2><h3 id="datasets-&#x6570;&#x636E;&#x96C6;-&#x6A21;&#x5757;"><a href="#datasets-&#x6570;&#x636E;&#x96C6;-&#x6A21;&#x5757;" class="headerlink" title="datasets(&#x6570;&#x636E;&#x96C6;)&#x6A21;&#x5757;"></a><font size="3">datasets(&#x6570;&#x636E;&#x96C6;)&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">from tensorflow.keras import datasets</span><br><span class="line"></span><br><span class="line"># datasets.XXX.load_data() # &#x4E0B;&#x8F7D;XXX&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x5E38;&#x7528;&#x7684;&#x6709;mnist&#xFF0C;cifar10&#xFF0C;cifar100&#x7B49;&#x7B49;&#xFF0C;&#x6B64;&#x65F6;&#x6570;&#x636E;&#x4E3A;numpy&#x683C;&#x5F0F;&#xFF0C;&#x5E76;&#x4E0D;&#x662F;tensor</span><br><span class="line">(x_train, y_train), (x_test, y_test) = datasets.mnist.load_data() # &#x4E0B;&#x8F7D;mnist&#x624B;&#x5199;&#x6570;&#x5B57;&#x6570;&#x636E;&#x96C6;</span><br><span class="line"></span><br><span class="line">x_train.shape</span><br><span class="line">y_train.shape</span><br><span class="line"></span><br><span class="line">x_test.shape</span><br><span class="line">y_test.shape</span><br><span class="line"></span><br><span class="line">y_train[:6]</span><br><span class="line">y_train_onehot = tf.one_hot(y_train[:6], depth=10)</span><br><span class="line">y_train_onehot</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow22.png" alt="22"></p><h3 id="data-&#x6570;&#x636E;&#x64CD;&#x4F5C;-&#x6A21;&#x5757;"><a href="#data-&#x6570;&#x636E;&#x64CD;&#x4F5C;-&#x6A21;&#x5757;" class="headerlink" title="data(&#x6570;&#x636E;&#x64CD;&#x4F5C;)&#x6A21;&#x5757;"></a><font size="3">data(&#x6570;&#x636E;&#x64CD;&#x4F5C;)&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line"># tf.data.Dataset.from_tensor_slices(tensor) &#x5C06;tensor&#x6570;&#x636E;&#x8F6C;&#x6362;&#x6210;&#x4E00;&#x4E2A;&#x53EF;&#x8FED;&#x4EE3;&#x7684;&#x5BF9;&#x8C61;</span><br><span class="line">db = tf.data.Dataset.from_tensor_slices(x_train)</span><br><span class="line"></span><br><span class="line"># next(iter(db)) &#x8FD4;&#x56DE;&#x4E0B;&#x4E00;&#x4E2A;&#x8FED;&#x4EE3;&#x5668;&#x7684;&#x5185;&#x5BB9;</span><br><span class="line"></span><br><span class="line"># db.shuffle(n) &#x5C06;0-n&#x7684;&#x8FED;&#x4EE3;&#x5668;&#x5185;&#x5BB9;&#x6253;&#x6563;&#xFF0C;&#x4F7F;&#x5176;&#x8BAD;&#x7EC3;&#x66F4;&#x52A0;&#x5408;&#x7406;</span><br><span class="line"></span><br><span class="line"># db.map(function) &#x5C06;&#x8FED;&#x4EE3;&#x5668;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x5168;&#x90E8;&#x7ECF;&#x8FC7;function&#x5904;&#x7406;&#xFF0C;&#x5E38;&#x7528;&#x4E8E;&#x56FE;&#x7247;&#x7684;&#x9884;&#x5904;&#x7406;&#x7B49;&#x529F;&#x80FD;</span><br><span class="line"></span><br><span class="line">#db.batch(n) &#x5C06;&#x8FED;&#x4EE3;&#x5668;&#x4E2D;&#x7684;&#x5185;&#x5BB9;&#x5206;&#x6210;&#x5F88;&#x591A;&#x4E2A;batch&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;batch&#x4E2D;&#x6709;n&#x4E2A;&#x6570;&#x636E;</span><br><span class="line"></span><br><span class="line"># db.repeat(n) &#x5C06;db&#x5BF9;&#x8C61;&#x8FED;&#x4EE3;n&#x6B21;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x65E0;&#x9650;&#x8FED;&#x4EE3;</span><br></pre></td></tr></tbody></table></figure><h3 id="nn-&#x795E;&#x7ECF;&#x7F51;&#x7EDC;-&#x6A21;&#x5757;"><a href="#nn-&#x795E;&#x7ECF;&#x7F51;&#x7EDC;-&#x6A21;&#x5757;" class="headerlink" title="nn(&#x795E;&#x7ECF;&#x7F51;&#x7EDC;)&#x6A21;&#x5757;"></a><font size="3">nn(&#x795E;&#x7ECF;&#x7F51;&#x7EDC;)&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line"># tf.nn.relu(features) ReLu&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</span><br><span class="line"></span><br><span class="line"># tf.nn.sigmoid(features) Sigmoid&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</span><br><span class="line"></span><br><span class="line"># tf.nn.tanh(features) tanh&#x6FC0;&#x6D3B;&#x51FD;&#x6570;</span><br><span class="line"></span><br><span class="line"># tf.nn.softmax(logits) softmax&#x5C42;</span><br></pre></td></tr></tbody></table></figure><h3 id="optimizers-&#x4F18;&#x5316;&#x5668;-&#x6A21;&#x5757;"><a href="#optimizers-&#x4F18;&#x5316;&#x5668;-&#x6A21;&#x5757;" class="headerlink" title="optimizers(&#x4F18;&#x5316;&#x5668;)&#x6A21;&#x5757;"></a><font size="3">optimizers(&#x4F18;&#x5316;&#x5668;)&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from tensorflow.keras import optimizers</span><br><span class="line"></span><br><span class="line"># optimizers.SGD(lr=0.01, momentum=0.0, decay=0.0, nesterov=False) &#x968F;&#x673A;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x4F18;&#x5316;&#x5668;&#xFF0C;&#x5B66;&#x4E60;&#x7387;lr&#x9ED8;&#x8BA4;&#x4E3A;0.01&#xFF0C;&#x52A8;&#x91CF;momentum&#x9ED8;&#x8BA4;&#x4E3A;0&#xFF0C;&#x5B66;&#x4E60;&#x7387;&#x8870;&#x51CF;decay&#x9ED8;&#x8BA4;&#x4E3A;0&#xFF0C;&#x9ED8;&#x8BA4;&#x4E0D;&#x4F7F;&#x7528;nesterov&#x52A8;&#x91CF;</span><br><span class="line"></span><br><span class="line"># optimizers.RMSprop(lr=0.001, rho=0.9, epsilon=None, decay=0.0) RMSprop&#x4F18;&#x5316;&#x5668;&#xFF0C;&#x5B66;&#x4E60;&#x7387;lr&#x9ED8;&#x8BA4;&#x4E3A;0.001&#xFF0C;&#x53C2;&#x6570;rho&#x9ED8;&#x8BA4;&#x4E3A;0.9&#xFF0C;&#x6A21;&#x7CCA;&#x56E0;&#x5B50;epsilon&#x9ED8;&#x8BA4;&#x4E3A;None&#xFF0C;&#x5B66;&#x4E60;&#x7387;&#x8870;&#x51CF;decay&#x9ED8;&#x8BA4;&#x4E3A;0.0</span><br><span class="line"></span><br><span class="line"># optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0) Adam&#x4F18;&#x5316;&#x5668;&#xFF0C;&#x5B66;&#x4E60;&#x7387;lr&#x9ED8;&#x8BA4;&#x4E3A;0.001&#xFF0C;&#x53C2;&#x6570;beta_1&#x9ED8;&#x8BA4;&#x4E3A;0.9, &#x53C2;&#x6570;beta_2&#x9ED8;&#x8BA4;&#x4E3A;0.999&#xFF0C;&#x6A21;&#x7CCA;&#x56E0;&#x5B50;epsilon&#x9ED8;&#x8BA4;&#x4E3A;None&#xFF0C;&#x5B66;&#x4E60;&#x7387;&#x8870;&#x51CF;decay&#x9ED8;&#x8BA4;&#x4E3A;0</span><br></pre></td></tr></tbody></table></figure><h3 id="layers-&#x7F51;&#x7EDC;&#x5C42;-&#x6A21;&#x5757;"><a href="#layers-&#x7F51;&#x7EDC;&#x5C42;-&#x6A21;&#x5757;" class="headerlink" title="layers(&#x7F51;&#x7EDC;&#x5C42;)&#x6A21;&#x5757;"></a><font size="3">layers(&#x7F51;&#x7EDC;&#x5C42;)&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">from tensorflow.keras import layers</span><br><span class="line"></span><br><span class="line"># layers.Dense(out_dim) &#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x5168;&#x8FDE;&#x63A5;&#x5C42;&#xFF0C;&#x7ED3;&#x70B9;&#x6570;&#x4E3A;out_dim&#x4E2A;</span><br><span class="line"></span><br><span class="line"># layers.Layer &#x81EA;&#x5B9A;&#x4E49;&#x7F51;&#x7EDC;&#x5C42;&#x7684;&#x57FA;&#x7C7B;</span><br><span class="line">class MyDense(layers.Layer):</span><br><span class="line">    def __init__(self, input_dim, output_dim):</span><br><span class="line">        super(MyDense, self).__init__()</span><br><span class="line">        </span><br><span class="line">        self.kernel = self.add_variable(&apos;w&apos;, [input_dim, output_dim])</span><br><span class="line">        self.bias = self.add_variable(&apos;b&apos;, [output_dim])</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None):</span><br><span class="line">        out = inputs @ self.kernel + self.bias</span><br><span class="line">        return out</span><br><span class="line"></span><br><span class="line"># layers.Dropout(rate) &#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;Dropout&#x5C42;&#xFF0C;&#x5931;&#x6D3B;&#x7684;&#x6BD4;&#x7387;&#x4E3A;rate&#xFF0C;&#x4FDD;&#x6301;&#x8FDE;&#x63A5;&#x7684;&#x6BD4;&#x7387;&#x4E3A;1-rate&#xFF0C;&#x548C;PyTorch&#x76F8;&#x540C;</span><br><span class="line"></span><br><span class="line"># layers.Flatten() &#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;Flatten&#x5C42;&#xFF0C;&#x5C06;&#x6570;&#x636E;&#x5C55;&#x5E73;&#x6210;&#x4E00;&#x7EF4;</span><br><span class="line"></span><br><span class="line"># layers.Conv2D(filters, kernel_size, strides=(1, 1), padding=&apos;valid&apos;) &#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x5377;&#x79EF;&#x5C42;&#xFF0C;&#x5377;&#x79EF;&#x6838;&#x7684;&#x4E2A;&#x6570;&#x4E3A;filters&#xFF0C;&#x6838;&#x7684;&#x5927;&#x5C0F;&#x4E3A;kernel_size&#xFF0C;strides&#x4E3A;&#x6A21;&#x677F;&#x79FB;&#x52A8;&#x7684;&#x6B65;&#x957F;&#xFF0C;padding&#x4E3A;&#x662F;&#x5426;&#x5728;&#x5468;&#x56F4;&#x8865;0&#xFF0C;valid&#x4E3A;&#x4E0D;&#x8865;0&#xFF0C;same&#x4E3A;&#x8865;0&#x4FDD;&#x8BC1;&#x5927;&#x5C0F;&#x4E0D;&#x53D8;</span><br><span class="line"></span><br><span class="line"># layers.MaxPool2D(pool_size=(2, 2), strides=None, padding=&apos;valid&apos;) &#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x6700;&#x5927;&#x503C;&#x6C60;&#x5316;&#x5C42;(&#x5E73;&#x5747;&#x503C;&#x6C60;&#x5316;&#x4E3A;AveragePooling2D)&#xFF0C;&#x6C60;&#x5316;&#x5C42;&#x6A21;&#x677F;&#x4E3A;pool_size&#xFF0C;strides&#x4E3A;&#x6A21;&#x677F;&#x79FB;&#x52A8;&#x7684;&#x6B65;&#x957F;&#xFF0C;padding&#x4E3A;&#x662F;&#x5426;&#x5728;&#x5468;&#x56F4;&#x8865;0&#xFF0C;valid&#x4E3A;&#x4E0D;&#x8865;0&#xFF0C;same&#x4E3A;&#x8865;0&#x4FDD;&#x8BC1;&#x5927;&#x5C0F;&#x4E0D;&#x53D8;</span><br><span class="line"></span><br><span class="line"># layers.SimpleRNNCell(units, activation=&apos;tanh&apos;, dropout=0.0, return_sequences=False, unroll=False) &#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x5FAA;&#x73AF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x5C42;&#xFF0C;&#x5355;&#x5143;&#x6570;&#x4E3A;units&#xFF0C;dropout&#x4E22;&#x5F03;&#x767E;&#x5206;&#x767E;&#x4E3A;0.0&#xFF0C;return_sequences=False&#x8FD4;&#x56DE;&#x5E8F;&#x5217;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x8F93;&#x51FA;&#xFF0C;return_sequences=True&#x8FD4;&#x56DE;&#x5168;&#x90E8;&#x5E8F;&#x5217;&#xFF0C;unroll=True&#xFF0C;&#x5219;&#x7F51;&#x7EDC;&#x5C06;&#x5C55;&#x5F00;&#xFF0C;&#x5426;&#x5219;&#x5C06;&#x4F7F;&#x7528;&#x7B26;&#x53F7;&#x5FAA;&#x73AF;&#x3002;</span><br><span class="line"></span><br><span class="line"># layers.LSTM(units, activation=&apos;tanh&apos;, dropout=0.0, return_sequences=False, unroll=False) &#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x957F;&#x77ED;&#x671F;&#x8BB0;&#x5FC6;&#x7F51;&#x7EDC;&#xFF0C;&#x5355;&#x5143;&#x6570;&#x4E3A;units&#xFF0C;dropout&#x4E22;&#x5F03;&#x767E;&#x5206;&#x767E;&#x4E3A;0.0&#xFF0C;return_sequences=False&#x8FD4;&#x56DE;&#x5E8F;&#x5217;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x8F93;&#x51FA;&#xFF0C;return_sequences=True&#x8FD4;&#x56DE;&#x5168;&#x90E8;&#x5E8F;&#x5217;&#xFF0C;unroll=True&#xFF0C;&#x5219;&#x7F51;&#x7EDC;&#x5C06;&#x5C55;&#x5F00;&#xFF0C;&#x5426;&#x5219;&#x5C06;&#x4F7F;&#x7528;&#x7B26;&#x53F7;&#x5FAA;&#x73AF;&#x3002;</span><br></pre></td></tr></tbody></table></figure><h3 id="losses-&#x8BEF;&#x5DEE;&#x8BA1;&#x7B97;-&#x6A21;&#x5757;"><a href="#losses-&#x8BEF;&#x5DEE;&#x8BA1;&#x7B97;-&#x6A21;&#x5757;" class="headerlink" title="losses(&#x8BEF;&#x5DEE;&#x8BA1;&#x7B97;)&#x6A21;&#x5757;"></a><font size="3">losses(&#x8BEF;&#x5DEE;&#x8BA1;&#x7B97;)&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line"># tf.losses.MSE(y, logits) &#x8BA1;&#x7B97;&#x771F;&#x5B9E;&#x503C;y&#x4E0E;&#x9884;&#x6D4B;&#x503C;logits&#x7684;&#x5747;&#x65B9;&#x5DEE;</span><br><span class="line"></span><br><span class="line"># tf.losses.categorical_crossentropy(y, logits) &#x8BA1;&#x7B97;&#x771F;&#x5B9E;&#x503C;y&#x4E0E;&#x9884;&#x6D4B;&#x503C;logits&#x7684;&#x4EA4;&#x53C9;&#x71B5;</span><br><span class="line"></span><br><span class="line"># tf.losses.binary_crossentropy(label, prob) &#x6839;&#x636E;&#x6807;&#x7B7E;&#x548C;&#x6982;&#x7387;&#x8BA1;&#x7B97;&#x4E8C;&#x5206;&#x7C7B;&#x95EE;&#x9898;&#x7684;&#x4EA4;&#x53C9;&#x71B5;</span><br></pre></td></tr></tbody></table></figure><h3 id="Gradient-&#x68AF;&#x5EA6;&#x4E0B;&#x964D;-&#x6A21;&#x5757;"><a href="#Gradient-&#x68AF;&#x5EA6;&#x4E0B;&#x964D;-&#x6A21;&#x5757;" class="headerlink" title="Gradient(&#x68AF;&#x5EA6;&#x4E0B;&#x964D;)&#x6A21;&#x5757;"></a><font size="3">Gradient(&#x68AF;&#x5EA6;&#x4E0B;&#x964D;)&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line"># tf.Variable(tensor) &#x5C06;tensor&#x8D4B;&#x6709;&#x53EF;&#x6C42;&#x5BFC;&#x5C5E;&#x6027;</span><br><span class="line"></span><br><span class="line"># &#x5C06;&#x524D;&#x5411;&#x8FD0;&#x7B97;&#x8FC7;&#x7A0B;&#x653E;&#x5728;tf.GradientTape()&#x4E2D;&#xFF0C;&#x5373;&#x53EF;&#x5B9E;&#x73B0;&#x81EA;&#x52A8;&#x6C42;&#x5BFC;&#xFF0C;&#x524D;&#x63D0;&#x662F;&#x53D8;&#x91CF;&#x5177;&#x6709;&#x53EF;&#x5BFC;&#x5C5E;&#x6027;</span><br><span class="line">with tf.GradientTape() as tape&#xFF1A;</span><br><span class="line">    XXX</span><br></pre></td></tr></tbody></table></figure><h3 id="TensorBoard&#x6A21;&#x5757;"><a href="#TensorBoard&#x6A21;&#x5757;" class="headerlink" title="TensorBoard&#x6A21;&#x5757;"></a><font size="3">TensorBoard&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># &#x9996;&#x5148;&#x8981;&#x5B89;&#x88C5;TensorBoard&#xFF0C;pip install tensorboard</span><br><span class="line"># &#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#x5939;&#xFF0C;&#x547D;&#x540D;&#x4E3A;logs&#xFF0C;&#x5728;&#x8BE5;&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x4E0B;&#x5E76;&#x8F93;&#x5165;tensorboard --logdir logs  &#x4F1A;&#x663E;&#x793A;TensorBoard 1.14.0 at http://DESKTOP-1NSILG1:6006/ (Press CTRL+C to quit)</span><br><span class="line"># &#x5EFA;&#x7ACB;&#x65E5;&#x5FD7;&#x6587;&#x4EF6;tf.summary.create_file_writer(filename)</span><br><span class="line"># &#x7ED9;&#x65E5;&#x5FD7;&#x5199;&#x6570;&#x636E;</span><br><span class="line">with summary_writer.as_default():</span><br><span class="line">    tf.summary.scalar(label, data, step) # &#x7ED9;label&#x6DFB;&#x52A0;&#x6570;&#x636E;data&#xFF0C;&#x4EE5;step&#x4F5C;&#x4E3A;x&#x8F74;</span><br><span class="line">    tf.summary.image(label, img, step) # &#x7ED9;label&#x6DFB;&#x52A0;&#x56FE;&#x7247;img</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow24.png" alt="24"></p><h3 id="visdom&#x6A21;&#x5757;"><a href="#visdom&#x6A21;&#x5757;" class="headerlink" title="visdom&#x6A21;&#x5757;"></a><font size="3">visdom&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># &#x9996;&#x5148;&#x8981;&#x5B89;&#x88C5;visdom&#xFF0C;pip install visdom</span><br><span class="line"># &#x5728;&#x8BE5;&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x4E0B;&#x5E76;&#x8F93;&#x5165;python -m visdom.server&#xFF0C;&#x4F1A;&#x51FA;&#x73B0;&#x4E0B;&#x9762;&#x7684;&#x63D0;&#x793A;</span><br><span class="line">Checking for scripts.</span><br><span class="line">It&apos;s Alive!</span><br><span class="line">INFO:root:Application Started</span><br><span class="line">You can navigate to http://localhost:8097</span><br><span class="line"># &#x5728;python&#x6587;&#x4EF6;&#x4E2D;&#x5199;&#x5165;</span><br><span class="line">from visdom import Visdom</span><br><span class="line"></span><br><span class="line">vis = Visdom()</span><br><span class="line"></span><br><span class="line"># vis.line(Y, X, win, updata) &#x5728;win&#x7A97;&#x53E3;&#x4E0B;&#x521B;&#x5EFA;&#x6A2A;&#x5750;&#x6807;&#x4E3A;X&#xFF0C;&#x7EB5;&#x5750;&#x6807;&#x4E3A;Y&#x7684;&#x6298;&#x7EBF;&#xFF0C;updata&#x4E3A;&#x6298;&#x7EBF;&#x7684;&#x66F4;&#x65B0;&#x65B9;&#x5F0F;</span><br><span class="line"></span><br><span class="line"># vis.images(tensor, win) &#x5728;win&#x7A97;&#x53E3;&#x4E0B;&#x663E;&#x793A;&#x56FE;&#x7247;tensor</span><br><span class="line"></span><br><span class="line"># vis.text(text, win) &#x5728;win&#x7A97;&#x53E3;&#x4E0B;&#x663E;&#x793A;text&#x6587;&#x672C;&#x6587;&#x5B57;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow24.png" alt="24"></p><h3 id="metrics-&#x8861;&#x91CF;&#x6307;&#x6807;-&#x6A21;&#x5757;"><a href="#metrics-&#x8861;&#x91CF;&#x6307;&#x6807;-&#x6A21;&#x5757;" class="headerlink" title="metrics(&#x8861;&#x91CF;&#x6307;&#x6807;)&#x6A21;&#x5757;"></a><font size="3">metrics(&#x8861;&#x91CF;&#x6307;&#x6807;)&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from tensorflow.keras import metrics</span><br><span class="line"></span><br><span class="line"># metrics.Accuracy() &#x8FD4;&#x56DE;&#x51C6;&#x786E;&#x5EA6;&#x8861;&#x91CF;&#x6307;&#x6807;&#x5BF9;&#x8C61;</span><br><span class="line">acc_metrics = metrics.Accuracy()</span><br><span class="line"></span><br><span class="line"># metrics.Mean() &#x8FD4;&#x56DE;&#x5E73;&#x5747;&#x503C;&#x8861;&#x91CF;&#x6307;&#x6807;&#x5BF9;&#x8C61;</span><br><span class="line">mean_metrics = metrics.Mean()</span><br><span class="line"></span><br><span class="line"># obj.updata_state() &#x5411;metrics&#x5BF9;&#x8C61;&#x4E2D;&#x6DFB;&#x52A0;&#x6570;&#x636E;</span><br><span class="line">acc_metrics.updata_state(loss)</span><br><span class="line">mean_metrics.updata_state(y, pred)</span><br><span class="line"></span><br><span class="line"># obj.result() &#x5C06;metrics&#x4E2D;&#x7684;&#x6570;&#x636E;&#x53D6;&#x51FA;</span><br><span class="line">acc_metrics.result()</span><br><span class="line">mean_metrics.result()</span><br><span class="line"></span><br><span class="line"># obj.reset_states() &#x6E05;&#x9664;metrics&#x4E2D;&#x7684;&#x6570;&#x636E;</span><br><span class="line">acc_metrics.reset_states()</span><br><span class="line">mean_metrics.reset_states()</span><br></pre></td></tr></tbody></table></figure><h3 id="Model-&#x6A21;&#x578B;-&#x6A21;&#x5757;"><a href="#Model-&#x6A21;&#x578B;-&#x6A21;&#x5757;" class="headerlink" title="Model(&#x6A21;&#x578B;)&#x6A21;&#x5757;"></a><font size="3">Model(&#x6A21;&#x578B;)&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">from tensorflow.keras import Sequential, layers</span><br><span class="line">from tensorflow import keras</span><br><span class="line"></span><br><span class="line"># model = Sequential([layer1, layer2, ...]) &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#xFF0C;&#x7B2C;&#x4E00;&#x5C42;&#x4E3A;layer1&#xFF0C;&#x7B2C;&#x4E8C;&#x5C42;&#x4E3A;layer2&#xFF0C;&#x2026;&#x2026;</span><br><span class="line">model = Sequential([layers.Dense(512), layers.Dense(128), layers.Dense(10)])</span><br><span class="line"></span><br><span class="line"># keras.Model &#x81EA;&#x5B9A;&#x4E49;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x7684;&#x57FA;&#x7C7B;</span><br><span class="line">class MyModel(keras.Model):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(MyModel, self).__init__()</span><br><span class="line">        </span><br><span class="line">        self.fc1 = MyDense(28 * 28, 256)</span><br><span class="line">        self.fc2 = MyDense(256, 64)</span><br><span class="line">        self.fc3 = MyDense(64, 10)</span><br><span class="line"></span><br><span class="line">    def call(self, inputs, training=None):</span><br><span class="line">        x = self.fc1(inputs)</span><br><span class="line">        x = tf.nn.relu(x)</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        x = tf.nn.relu(x)</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        return x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># model.build(input_shape) &#x5B9A;&#x4E49;&#x7F51;&#x7EDC;&#x8F93;&#x5165;&#x7684;&#x5F62;&#x72B6;</span><br><span class="line">model.build(input_shape=(None, 784))</span><br><span class="line"></span><br><span class="line"># model.summary() &#x67E5;&#x770B;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;</span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"># model.trainable_variables &#x67E5;&#x770B;&#x7F51;&#x7EDC;&#x6240;&#x6709;&#x53EF;&#x8BAD;&#x7EC3;&#x53C2;&#x6570;</span><br><span class="line">model.trainable_variables</span><br><span class="line"></span><br><span class="line"># model.compile(optimizer, loss, metrics) &#x914D;&#x7F6E;&#x8BAD;&#x7EC3;&#x6A21;&#x578B;&#xFF0C;&#x8BBE;&#x7F6E;&#x4F18;&#x5316;&#x5668;&#x4E3A;optimizer&#xFF0C;&#x635F;&#x5931;&#x51FD;&#x6570;&#x4E3A;loss&#xFF0C;&#x8861;&#x91CF;&#x6307;&#x6807;&#x4E3A;metrics</span><br><span class="line"></span><br><span class="line"># model.fit(db, epoch, validation_data, validation_freq) &#x8BAD;&#x7EC3;&#x6A21;&#x578B;&#xFF0C;&#x8BAD;&#x7EC3;&#x96C6;&#x4E3A;db&#xFF0C;&#x8BAD;&#x7EC3;epoch&#x6B21;&#xFF0C;validation_freq&#x6B21;&#x5BF9;validation_data&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x6D4B;&#x8BD5;&#xFF0C;&#x9632;&#x6B62;&#x8FC7;&#x62DF;&#x5408;</span><br><span class="line"></span><br><span class="line"># model.evaluate(db_test) &#x5BF9;&#x6D4B;&#x8BD5;&#x96C6;&#x8FDB;&#x884C;&#x6D4B;&#x8BD5;</span><br><span class="line"></span><br><span class="line"># model.predict(x) &#x5BF9;&#x672A;&#x77E5;&#x7684;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x9884;&#x6D4B;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/FRAME/tensorflow23.png" alt="23"></p><h3 id="save-&#x4FDD;&#x5B58;-&#x6A21;&#x5757;"><a href="#save-&#x4FDD;&#x5B58;-&#x6A21;&#x5757;" class="headerlink" title="save(&#x4FDD;&#x5B58;)&#x6A21;&#x5757;"></a><font size="3">save(&#x4FDD;&#x5B58;)&#x6A21;&#x5757;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line"># model.save_weights(filename) &#x5C06;&#x7F51;&#x7EDC;&#x7684;&#x8BAD;&#x7EC3;&#x53C2;&#x6570;&#x4FDD;&#x5B58;&#x5728;filename&#x4E2D;&#xFF0C;&#x4EC5;&#x4EC5;&#x4FDD;&#x5B58;&#x6743;&#x503C;</span><br><span class="line"># model.load_weights(filename) &#x8BFB;&#x53D6;filename&#x4E2D;&#x7684;&#x8BAD;&#x7EC3;&#x53C2;&#x6570;&#xFF0C;&#x524D;&#x63D0;&#x662F;&#x8981;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x76F8;&#x540C;&#x7ED3;&#x6784;&#x7684;&#x7F51;&#x7EDC;</span><br><span class="line"></span><br><span class="line"># model.save(filename) &#x4FDD;&#x5B58;&#x7F51;&#x7EDC;&#x7684;&#x6240;&#x6709;&#x7ED3;&#x6784;&#x548C;&#x53C2;&#x6570;</span><br><span class="line"># tf.keras.models.load_model(filename) &#x8BFB;&#x53D6;&#x6A21;&#x578B;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x521B;&#x5EFA;&#x7F51;&#x7EDC;&#xFF0C;&#x4F1A;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x76F8;&#x540C;&#x7684;&#x7F51;&#x7EDC;</span><br><span class="line"></span><br><span class="line"># tf.saved_model.save(model, filename) &#x4FDD;&#x5B58;&#x7F51;&#x7EDC;&#x7684;&#x6240;&#x6709;&#x7ED3;&#x6784;&#x548C;&#x53C2;&#x6570;&#xFF0C;&#x4FBF;&#x4E8E;&#x7ED9;&#x5176;&#x4ED6;&#x8BED;&#x8A00;&#x63D0;&#x4F9B;&#x8C03;&#x7528;</span><br></pre></td></tr></tbody></table></figure><h1 id="TensorFlow&#x5C0F;&#x7ED3;"><a href="#TensorFlow&#x5C0F;&#x7ED3;" class="headerlink" title="TensorFlow&#x5C0F;&#x7ED3;"></a><font size="5" color="red">TensorFlow&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x7531;&#x4E8E;TensorFlow&#x80CC;&#x9760;&#x8C37;&#x6B4C;&#xFF0C;&#x5177;&#x6709;&#x6700;&#x5168;&#x7684;&#x6587;&#x6863;&#x548C;&#x8D44;&#x6E90;&#xFF0C;&#x800C;&#x4E14;&#x5F88;&#x591A;&#x6A21;&#x578B;&#x90FD;&#x6709;TensorFlow&#x7684;&#x6E90;&#x7801;&#x5B9E;&#x73B0;&#xFF0C;&#x6240;&#x4EE5;&#x62E5;&#x6709;&#x8F83;&#x5927;&#x7684;&#x7528;&#x6237;&#x57FA;&#x6570;&#xFF0C;&#x8FD9;&#x6837;&#x4F7F;&#x7528;&#x6237;&#x51FA;&#x73B0;&#x95EE;&#x9898;&#x65F6;&#x80FD;&#x8F83;&#x5BB9;&#x6613;&#x5730;&#x627E;&#x5230;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#xFF0C;&#x8FD9;&#x4F7F;TensorFlow&#x76EE;&#x524D;&#x4F5C;&#x4E3A;&#x6700;&#x6D41;&#x884C;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x6846;&#x67B6;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;TensorFlow&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="深度学习框架" scheme="https://USTCcoder.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>网络流(Network Flows)</title>
    <link href="https://USTCcoder.github.io/2019/09/02/algorithm%20network_flows/"/>
    <id>https://USTCcoder.github.io/2019/09/02/algorithm network_flows/</id>
    <published>2019-09-02T04:55:58.000Z</published>
    <updated>2019-09-06T03:41:17.176Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x7F51;&#x7EDC;&#x6D41;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"><a href="#&#x539F;&#x7406;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x539F;&#x7406;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003; <strong>Network Flows:&#x7F51;&#x7EDC;&#x6D41;</strong>&#xFF0C;&#x662F;&#x8FD0;&#x7B79;&#x5B66;&#x4E2D;&#x7684;&#x6700;&#x4F18;&#x5316;&#x95EE;&#x9898;&#xFF0C;&#x4E5F;&#x662F;&#x56FE;&#x8BBA;&#x4E2D;&#x7684;&#x4E00;&#x79CD;&#x7406;&#x8BBA;&#x65B9;&#x6CD5;&#x3002;&#x7C7B;&#x6BD4;&#x6C34;&#x6D41;&#x7684;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#xFF0C;&#x4E0E;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x5BC6;&#x5207;&#x76F8;&#x5173;&#xFF0C;&#x5E38;&#x5E38;&#x7528;&#x6765;&#x89E3;&#x51B3;&#x5B9E;&#x9645;&#x7684;&#x751F;&#x6D3B;&#x95EE;&#x9898;&#x3002;<br><a id="more"></a></p><p><img src="/images/ALGORITHM/union1.jpg" alt="1"></p><h1 id="&#x7B97;&#x6CD5;&#x57FA;&#x7840;"><a href="#&#x7B97;&#x6CD5;&#x57FA;&#x7840;" class="headerlink" title="&#x7B97;&#x6CD5;&#x57FA;&#x7840;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x57FA;&#x7840;</font></h1><h2 id="&#x56FE;&#x7684;&#x57FA;&#x672C;&#x672F;&#x8BED;"><a href="#&#x56FE;&#x7684;&#x57FA;&#x672C;&#x672F;&#x8BED;" class="headerlink" title="&#x56FE;&#x7684;&#x57FA;&#x672C;&#x672F;&#x8BED;"></a><font size="4">&#x56FE;&#x7684;&#x57FA;&#x672C;&#x672F;&#x8BED;</font></h2><p>&#x2003;&#x2003;<font size="3">(1)&#x65E0;&#x5411;&#x56FE;&#xFF1A;G&#x4E2D;&#x7684;&#x6BCF;&#x6761;&#x8FB9;&#x90FD;&#x662F;&#x6CA1;&#x6709;&#x65B9;&#x5411;&#x7684;&#xFF0C;&#x9876;&#x70B9;v1&#x548C;v2&#x4E4B;&#x95F4;&#x7684;&#x8FB9;&#x8BB0;&#x4E3A;(v1,v2)&#x6216;(v2,v1)&#x3002;</font><br><img src="/images/ALGORITHM/network1.jpg" alt="2"><br>&#x2003;&#x2003;<font size="3">(2)&#x6709;&#x5411;&#x56FE;&#xFF1A;G&#x4E2D;&#x7684;&#x6BCF;&#x6761;&#x8FB9;&#x90FD;&#x662F;&#x6709;&#x65B9;&#x5411;&#x7684;&#xFF0C;&#x9876;&#x70B9;v1&#x548C;v2&#x4E4B;&#x95F4;&#x7684;&#x8FB9;&#x8BB0;&#x4E3A;&lt;v1,v2&gt;&#xFF0C;&#x4E0D;&#x80FD;&#x5199;&#x6210;&lt;v2,v1&gt;&#x3002;</font><br><img src="/images/ALGORITHM/network2.jpg" alt="3"><br>&#x2003;&#x2003;<font size="3">(3)&#x7F51;&#xFF1A;&#x5728;&#x8FB9;&#x4E0A;&#x6807;&#x6CE8;&#x8DDD;&#x79BB;&#xFF0C;&#x65F6;&#x95F4;&#xFF0C;&#x82B1;&#x8D39;&#x7B49;&#x7B49;&#x6570;&#x503C;&#xFF0C;&#x79F0;&#x4E3A;&#x8FB9;&#x7684;&#x6743;&#x503C;&#xFF0C;&#x5E26;&#x6709;&#x6743;&#x503C;&#x7684;&#x56FE;&#x79F0;&#x4E3A;&#x7F51;&#x3002;</font><br><img src="/images/ALGORITHM/network3.jpg" alt="4"><br>&#x2003;&#x2003;<font size="3">(4)&#x4E8C;&#x5206;&#x56FE;&#xFF1A;&#x5982;&#x679C;&#x9876;&#x70B9;&#x96C6;V&#x53EF;&#x5206;&#x5272;&#x4E3A;&#x4E24;&#x4E2A;&#x4E92;&#x4E0D;&#x76F8;&#x4EA4;&#x7684;&#x5B50;&#x96C6;V1,V2&#xFF0C;&#x5E76;&#x4E14;&#x56FE;&#x4E2D;&#x7684;&#x6BCF;&#x6761;&#x8FB9;&#x6240;&#x5BF9;&#x5E94;&#x7684;&#x4E24;&#x4E2A;&#x9876;&#x70B9;&#x5206;&#x522B;&#x5C5E;&#x4E8E;&#x8FD9;&#x4E24;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x9876;&#x70B9;&#x96C6;&#xFF0C;&#x79F0;G&#x4E3A;&#x4E8C;&#x5206;&#x56FE;&#x3002;</font><br><img src="/images/ALGORITHM/network4.jpg" alt="5"></p><h2 id="&#x7F51;&#x7EDC;&#x7684;&#x57FA;&#x672C;&#x672F;&#x8BED;"><a href="#&#x7F51;&#x7EDC;&#x7684;&#x57FA;&#x672C;&#x672F;&#x8BED;" class="headerlink" title="&#x7F51;&#x7EDC;&#x7684;&#x57FA;&#x672C;&#x672F;&#x8BED;"></a><font size="4">&#x7F51;&#x7EDC;&#x7684;&#x57FA;&#x672C;&#x672F;&#x8BED;</font></h2><p>&#x2003;&#x2003;<font size="3">(1)&#x7F51;&#x7EDC;&#xFF1A;&#x5728;&#x6709;&#x5411;&#x7F51;&#x4E2D;&#xFF0C;&#x6709;&#x4E24;&#x4E2A;&#x7279;&#x6B8A;&#x7684;&#x70B9;&#xFF0C;&#x6E90;&#x70B9;s&#x548C;&#x6C47;&#x70B9;t&#xFF0C;&#x56FE;&#x4E2D;&#x5404;&#x8FB9;&#x7684;&#x65B9;&#x5411;&#x8868;&#x793A;&#x5141;&#x8BB8;&#x7684;&#x6D41;&#x5411;&#xFF0C;&#x8FB9;&#x4E0A;&#x7684;&#x6743;&#x503C;&#x8868;&#x793A;&#x53EF;&#x5141;&#x8BB8;&#x7684;&#x6700;&#x5927;&#x6D41;&#x91CF;&#xFF0C;&#x4E14;&#x4E24;&#x4E2A;&#x7ED3;&#x70B9;&#x4E4B;&#x95F4;&#x6700;&#x591A;&#x53EA;&#x6709;&#x4E00;&#x6761;&#x8FB9;&#xFF0C;&#x79F0;&#x8FD9;&#x6837;&#x7684;&#x56FE;&#x4E3A;&#x7F51;&#x7EDC;&#x3002;</font><br><img src="/images/ALGORITHM/network1.png" alt="6"><br>&#x2003;&#x2003;<font size="3">(2)&#x7F51;&#x7EDC;&#x6D41;&#xFF1A;&#x7F51;&#x7EDC;&#x4E0A;&#x7684;&#x6D41;&#xFF0C;&#x5373;&#x5B9A;&#x4E49;&#x5728;&#x8FB9;&#x96C6;E&#x4E0A;&#x7684;&#x975E;&#x8D1F;&#x51FD;&#x6570;flow&#x79F0;&#x4E3A;&#x7F51;&#x7EDC;&#x6D41;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">(3)&#x53EF;&#x884C;&#x6D41;&#xFF1A;&#x6EE1;&#x8DB3;&#x5BB9;&#x91CF;&#x7EA6;&#x675F;&#xFF08;&#x6BCF;&#x4E2A;&#x8FB9;&#x7684;&#x5B9E;&#x9645;&#x6D41;&#x91CF;&#x4E0D;&#x5927;&#x4E8E;&#x6700;&#x5927;&#x5BB9;&#x91CF;&#xFF09;&#x548C;&#x6D41;&#x91CF;&#x5B88;&#x6052;&#xFF08;&#x9664;&#x4E86;&#x6E90;&#x70B9;s&#x548C;&#x6C47;&#x70B9;t&#x5916;&#xFF0C;&#x6240;&#x6709;&#x5185;&#x90E8;&#x7ED3;&#x70B9;&#x6D41;&#x5165;&#x91CF;&#x7B49;&#x4E8E;&#x6D41;&#x51FA;&#x91CF;&#xFF09;&#x4E24;&#x4E2A;&#x6027;&#x8D28;&#x7684;&#x7F51;&#x7EDC;&#x6D41;&#x79F0;&#x4E3A;&#x53EF;&#x884C;&#x6D41;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">(4)&#x6700;&#x5927;&#x6D41;&#xFF1A;&#x5728;&#x6EE1;&#x8DB3;&#x53EF;&#x884C;&#x6D41;&#x7684;&#x6761;&#x4EF6;&#x4E0B;&#xFF0C;&#x5728;&#x7F51;&#x7EDC;&#x4E2D;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x51C0;&#x8F93;&#x51FA;&#x6700;&#x5927;&#x7684;&#x7F51;&#x7EDC;&#x6D41;&#x79F0;&#x4E3A;&#x6700;&#x5927;&#x6D41;&#x3002;</font></p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x6700;&#x5927;&#x7F51;&#x7EDC;&#x6D41;&#xFF0C;&#x6700;&#x77ED;&#x589E;&#x5E7F;&#x8DEF;&#x7B97;&#x6CD5;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x6700;&#x5927;&#x7F51;&#x7EDC;&#x6D41;&#xFF0C;&#x6700;&#x77ED;&#x589E;&#x5E7F;&#x8DEF;&#x7B97;&#x6CD5;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6700;&#x5927;&#x7F51;&#x7EDC;&#x6D41;&#xFF0C;&#x6700;&#x77ED;&#x589E;&#x5E7F;&#x8DEF;&#x7B97;&#x6CD5;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6700;&#x5927;&#x7F51;&#x7EDC;&#x6D41;&#xFF0C;&#x6700;&#x77ED;&#x589E;&#x5E7F;&#x8DEF;&#x7B97;&#x6CD5;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x4E00;&#x5BB6;&#x516C;&#x53F8;&#x8981;&#x628A;&#x4E00;&#x6279;&#x8D27;&#x7269;&#x4ECE;&#x5DE5;&#x5382;&#x8FD0;&#x5230;&#x5317;&#x4EAC;&#xFF0C;&#x4E2D;&#x95F4;&#x7ECF;&#x8FC7;&#x82E5;&#x5E72;&#x4E2A;&#x57CE;&#x5E02;&#xFF0C;&#x5DF2;&#x77E5;&#x57CE;&#x5E02;&#x6570;&#xFF0C;&#x8FDE;&#x63A5;&#x6570;&#x548C;&#x57CE;&#x5E02;&#x4E4B;&#x95F4;&#x7684;&#x6700;&#x5927;&#x8FD0;&#x8F93;&#x91CF;&#xFF0C;&#x6C42;&#x5982;&#x4F55;&#x8FD0;&#x8F93;&#x4F7F;&#x8FD0;&#x8F93;&#x91CF;&#x6700;&#x5927;&#x3002;<br>&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x4E2A;&#x6570;&#x548C;&#x8FB9;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x884C;&#x8F93;&#x5165;&#x8FDE;&#x901A;&#x7684;&#x4E24;&#x4E2A;&#x57CE;&#x5E02;&#x4EE5;&#x53CA;&#x6700;&#x5927;&#x8FD0;&#x8F93;&#x91CF;&#xFF0C;&#x4F7F;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x9694;&#x3002;<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">6 9 # &#x7ED3;&#x70B9;&#x4E2A;&#x6570;n&#x548C;&#x8FB9;&#x6570;m</span><br><span class="line">1 2 12 # &#x8BF4;&#x660E;1&#x53F7;&#x57CE;&#x5E02;&#x548C;2&#x53F7;&#x57CE;&#x5E02;&#x4E4B;&#x95F4;&#x7684;&#x6700;&#x5927;&#x8FD0;&#x8F93;&#x91CF;&#x4E3A;12</span><br><span class="line">1 3 10</span><br><span class="line">2 4 8</span><br><span class="line">3 2 2</span><br><span class="line">3 5 13</span><br><span class="line">4 3 5</span><br><span class="line">4 6 18</span><br><span class="line">5 4 6</span><br><span class="line">5 6 4</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;&#x5982;&#x679C;&#x4E00;&#x6761;&#x8FB9;&#x7684;&#x5BB9;&#x91CF;&#x4E3A;n&#xFF0C;&#x5DF2;&#x7ECF;&#x6D41;&#x51FA;&#x4E86;m&#x5219;&#x8BE5;&#x70B9;&#x6700;&#x591A;&#x53EF;&#x4EE5;&#x6B63;&#x5411;&#x6D41;&#x51FA;(n-m)&#x6216;&#x8005;&#x53CD;&#x5411;&#x6D41;&#x5165;m&#xFF0C;&#x56E0;&#x6B64;&#x5F15;&#x5165;&#x4E00;&#x4E2A;&#x6B8B;&#x4F59;&#x7F51;&#x7EDC;&#xFF0C;&#x6B63;&#x5411;&#x4EE3;&#x8868;&#x53EF;&#x589E;&#x91CF;&#xFF0C;&#x5373;&#x8FD8;&#x53EF;&#x4EE5;&#x6D41;&#x51FA;&#x7684;&#x5BB9;&#x91CF;&#xFF0C;&#x53CD;&#x5411;&#x4EE3;&#x8868;&#x6D41;&#x91CF;&#xFF0C;&#x5373;&#x5DF2;&#x7ECF;&#x6D41;&#x51FA;&#x7684;&#x5BB9;&#x91CF;&#xFF0C;&#x7B49;&#x4E8E;&#x53EF;&#x4EE5;&#x6D41;&#x5165;&#x7684;&#x6D41;&#x91CF;&#x3002;<br><img src="/images/ALGORITHM/network2.png" alt="12"><br>&#x2003;&#x2003;&#x5229;&#x7528;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x6216;&#x8005;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x4ECE;&#x6E90;&#x70B9;s&#x5BF9;&#x8BE5;&#x56FE;&#x8FDB;&#x884C;&#x904D;&#x5386;&#xFF0C;&#x5982;&#x679C;&#x4ECE;i&#x70B9;&#x5230;&#x8FBE;j&#x70B9;&#x7684;&#x503C;&#x5927;&#x4E8E;0&#xFF0C;&#x8BF4;&#x660E;&#x53EF;&#x4EE5;&#x6D41;&#x901A;&#xFF0C;&#x5219;&#x7EE7;&#x7EED;&#x3002;&#x5F53;&#x641C;&#x7D22;&#x5230;t&#x70B9;&#x65F6;&#xFF0C;&#x8BF4;&#x660E;&#x8BE5;&#x8DEF;&#x5F84;&#x662F;&#x4E00;&#x6761;&#x53EF;&#x884C;&#x6D41;&#xFF0C;&#x627E;&#x5230;&#x8BE5;&#x8DEF;&#x5F84;&#x4E0A;&#x8FB9;&#x7684;&#x6700;&#x5C0F;&#x503C;&#xFF0C;&#x6700;&#x5927;&#x6D41;&#x52A0;&#x4E0A;&#x8BE5;&#x503C;&#xFF0C;&#x7136;&#x540E;&#x4FEE;&#x6539;&#x7F51;&#x7EDC;&#xFF0C;&#x5C06;&#x8DEF;&#x5F84;&#x4E0A;&#x7684;&#x8FB9;&#x6B63;&#x5411;&#x51CF;&#x53BB;&#x8BE5;&#x503C;&#xFF0C;&#x53CD;&#x5411;&#x52A0;&#x4E0A;&#x8BE5;&#x503C;&#x3002;&#x91CD;&#x65B0;&#x641C;&#x7D22;&#xFF0C;&#x76F4;&#x5230;&#x65E0;&#x6CD5;&#x5230;&#x8FBE;t&#x70B9;&#x7B97;&#x6CD5;&#x7ED3;&#x675F;&#x3002;</p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">def sap(connect_map, n):</span><br><span class="line">    real_map = [[0 for i in range(n + 1)] for j in range(n + 1)]</span><br><span class="line">    residue_map = [[x for x in row] for row in connect_map]</span><br><span class="line">    max_flow, find_flag = 0, True</span><br><span class="line">    while find_flag:</span><br><span class="line">        queue, find_flag = [[1, [1]]], False</span><br><span class="line">        while queue:</span><br><span class="line">            i, route = queue.pop(0)</span><br><span class="line">            for j in range(1, n + 1):</span><br><span class="line">                if residue_map[i][j] &gt; 0 and j not in route:</span><br><span class="line">                    if j == n:</span><br><span class="line">                        flow, route, queue, find_flag = [], route + [j], [], True</span><br><span class="line">                        for k in range(len(route) - 1):</span><br><span class="line">                            flow.append(residue_map[route[k]][route[k + 1]])</span><br><span class="line">                        min_flow = min(flow)</span><br><span class="line">                        max_flow += min_flow</span><br><span class="line">                        for p in range(len(route) - 1):</span><br><span class="line">                            real_map[route[p]][route[p + 1]] += min_flow</span><br><span class="line">                            residue_map[route[p]][route[p + 1]] -= min_flow</span><br><span class="line">                            residue_map[route[p + 1]][route[p]] += min_flow</span><br><span class="line">                        break</span><br><span class="line">                    else:</span><br><span class="line">                        queue.append([j, route + [j]])</span><br><span class="line">    return real_map, max_flow</span><br><span class="line"></span><br><span class="line">print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x4E2A;&#x6570;n&#x548C;&#x8FB9;&#x6570;m:&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    n, m = [int(x) for x in line.strip().split()]</span><br><span class="line">    connect_map, label, direction = [[0 for i in range(n + 1)] for j in range(n + 1)], [&apos;v&apos; + str(i) for i in range(1, n + 1)], []</span><br><span class="line">    print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x4E2A;&#x6570;u,v&#x53CA;&#x8FB9;u-v&#x7684;&#x5BB9;&#x91CF;w:&apos;)</span><br><span class="line">    for i in range(m):</span><br><span class="line">        u, v, w = [int(x) for x in sys.stdin.readline().strip().split()]</span><br><span class="line">        connect_map[u][v] = w</span><br><span class="line">        direction.append([u, v])</span><br><span class="line">    real_map, max_flow = sap(connect_map, n)</span><br><span class="line">    for k in direction:</span><br><span class="line">        real_map[k[0]][k[1]] -= real_map[k[1]][k[0]]</span><br><span class="line">        real_map[k[1]][k[0]] = 0</span><br><span class="line">    net_work = pd.DataFrame([[x for x in row[1:]] for row in real_map[1:]], index=label, columns=label)</span><br><span class="line">    print(&apos;&#x7F51;&#x7EDC;&#x7684;&#x6700;&#x5927;&#x6D41;&#x503C;&#x4E3A;:&apos;, max_flow, &apos;\n---------&#x5B9E;&#x6D41;&#x7F51;&#x7EDC;&#x5982;&#x4E0B;:---------\n&apos;, net_work)</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/network4.png" alt="14"></p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x6700;&#x5927;&#x7F51;&#x7EDC;&#x6D41;&#xFF0C;&#x91CD;&#x8D34;&#x6807;&#x7B7E;&#x7B97;&#x6CD5;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x6700;&#x5927;&#x7F51;&#x7EDC;&#x6D41;&#xFF0C;&#x91CD;&#x8D34;&#x6807;&#x7B7E;&#x7B97;&#x6CD5;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6700;&#x5927;&#x7F51;&#x7EDC;&#x6D41;&#xFF0C;&#x91CD;&#x8D34;&#x6807;&#x7B7E;&#x7B97;&#x6CD5;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6700;&#x5927;&#x7F51;&#x7EDC;&#x6D41;&#xFF0C;&#x91CD;&#x8D34;&#x6807;&#x7B7E;&#x7B97;&#x6CD5;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;-1"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;-1" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x4E00;&#x5BB6;&#x516C;&#x53F8;&#x8981;&#x628A;&#x4E00;&#x6279;&#x8D27;&#x7269;&#x4ECE;&#x5DE5;&#x5382;&#x8FD0;&#x5230;&#x5317;&#x4EAC;&#xFF0C;&#x4E2D;&#x95F4;&#x7ECF;&#x8FC7;&#x82E5;&#x5E72;&#x4E2A;&#x57CE;&#x5E02;&#xFF0C;&#x5DF2;&#x77E5;&#x57CE;&#x5E02;&#x6570;&#xFF0C;&#x8FDE;&#x63A5;&#x6570;&#x548C;&#x57CE;&#x5E02;&#x4E4B;&#x95F4;&#x7684;&#x6700;&#x5927;&#x8FD0;&#x8F93;&#x91CF;&#xFF0C;&#x6C42;&#x5982;&#x4F55;&#x8FD0;&#x8F93;&#x4F7F;&#x8FD0;&#x8F93;&#x91CF;&#x6700;&#x5927;&#x3002;<br>&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x4E2A;&#x6570;&#x548C;&#x8FB9;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x884C;&#x8F93;&#x5165;&#x8FDE;&#x901A;&#x7684;&#x4E24;&#x4E2A;&#x57CE;&#x5E02;&#x4EE5;&#x53CA;&#x6700;&#x5927;&#x8FD0;&#x8F93;&#x91CF;&#xFF0C;&#x4F7F;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x9694;&#x3002;<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">6 9 # &#x7ED3;&#x70B9;&#x4E2A;&#x6570;n&#x548C;&#x8FB9;&#x6570;m</span><br><span class="line">1 2 12 # &#x8BF4;&#x660E;1&#x53F7;&#x57CE;&#x5E02;&#x548C;2&#x53F7;&#x57CE;&#x5E02;&#x4E4B;&#x95F4;&#x7684;&#x6700;&#x5927;&#x8FD0;&#x8F93;&#x91CF;&#x4E3A;12</span><br><span class="line">1 3 10</span><br><span class="line">2 4 8</span><br><span class="line">3 2 2</span><br><span class="line">3 5 13</span><br><span class="line">4 3 5</span><br><span class="line">4 6 18</span><br><span class="line">5 4 6</span><br><span class="line">5 6 4</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;-1"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;-1" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;&#x5728;&#x4E0A;&#x4F8B;&#x7B97;&#x6CD5;&#x4E2D;&#xFF0C;&#x6D6A;&#x8D39;&#x4E86;&#x8BB8;&#x591A;&#x65F6;&#x95F4;&#xFF0C;&#x56E0;&#x4E3A;&#x8981;&#x4ECE;&#x6E90;&#x70B9;&#x91CD;&#x590D;&#x8FDB;&#x884C;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x904D;&#x5386;&#x6216;&#x8005;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x904D;&#x5386;&#xFF0C;&#x56E0;&#x6B64;&#x6709;&#x91CD;&#x590D;&#x7684;&#x5927;&#x91CF;&#x8BA1;&#x7B97;&#x3002;<br>&#x2003;&#x2003;&#x5F15;&#x5165;&#x6DF7;&#x5408;&#x7F51;&#x7EDC;&#xFF0C;&#x5C06;&#x6B8B;&#x4F59;&#x7F51;&#x7EDC;&#x8FDB;&#x884C;&#x4F18;&#x5316;&#xFF0C;&#x540C;&#x5411;&#x8FB9;&#x4E3A;&#x4E00;&#x4E2A;&#x5143;&#x7EC4;(cap, flow)&#x8BB0;&#x5F55;&#x5BB9;&#x91CF;&#x548C;&#x5F53;&#x524D;&#x6D41;&#x91CF;&#xFF0C;&#x53CD;&#x5411;&#x8FB9;&#x4E5F;&#x662F;&#x4E00;&#x4E2A;&#x5143;&#x7EC4;(0, -flow)&#x8BB0;&#x5F55;&#x5BB9;&#x91CF;&#x4E2A;&#x5F53;&#x524D;&#x6D41;&#x91CF;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8BE5;&#x7F51;&#x7EDC;&#x76F4;&#x63A5;&#x770B;&#x51FA;&#x65B9;&#x5411;&#x548C;&#x6D41;&#x91CF;&#x3002;<br><img src="/images/ALGORITHM/network3.png" alt="13"><br>&#x2003;&#x2003;(1)&#x4ECE;&#x6C47;&#x70B9;&#x5F00;&#x59CB;&#xFF0C;&#x5229;&#x7528;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x7B97;&#x6CD5;&#x5BF9;&#x7ED3;&#x70B9;&#x6DFB;&#x52A0;&#x6807;&#x7B7E;&#xFF0C;&#x4ECE;0&#x5F00;&#x59CB;&#xFF0C;&#x7B2C;&#x4E00;&#x6B21;&#x76F4;&#x63A5;&#x8BBF;&#x95EE;&#x5230;&#x7684;&#x70B9;&#x6807;&#x8BB0;&#x4E3A;1&#xFF0C;&#x7B2C;&#x4E8C;&#x6B21;&#x95F4;&#x63A5;&#x8BBF;&#x95EE;&#x5230;&#x7684;&#x70B9;&#x6807;&#x8BB0;&#x4E3A;2&#xFF0C;&#x4F9D;&#x6B21;&#x8D34;&#x6807;&#x7B7E;&#x3002;<br>&#x2003;&#x2003;(2)&#x5982;&#x679C;&#x6E90;&#x70B9;&#x9AD8;&#x5EA6;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;&#x7ED3;&#x70B9;&#x6570;&#xFF0C;&#x8BF4;&#x660E;&#x5DF2;&#x7ECF;&#x627E;&#x5230;&#x4E86;&#x6700;&#x5927;&#x6D41;&#xFF0C;&#x7B97;&#x6CD5;&#x7ED3;&#x675F;&#xFF0C;&#x5426;&#x5219;&#x4ECE;&#x6E90;&#x70B9;&#x5F00;&#x59CB;&#xFF0C;&#x641C;&#x7D22;&#x6E90;&#x70B9;&#x9AD8;&#x5EA6;-1&#x7684;&#x70B9;&#xFF0C;&#x89C2;&#x5BDF;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x524D;&#x8FDB;&#xFF0C;&#x5982;&#x679C;&#x53EF;&#x4EE5;&#xFF0C;&#x5F53;&#x7ED3;&#x70B9;&#x4E3A;&#x6C47;&#x70B9;&#x65F6;&#xFF0C;&#x8FDB;&#x884C;&#x589E;&#x6D41;&#x51CF;&#x6D41;&#x64CD;&#x4F5C;(&#x540C;&#x5411;&#x8FB9;&#x589E;&#x6D41;&#xFF0C;&#x53CD;&#x5411;&#x8FB9;&#x51CF;&#x6D41;)&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x53EF;&#x4EE5;&#x5219;&#x9700;&#x8981;&#x91CD;&#x8D34;&#x6807;&#x7B7E;&#x3002;<br>&#x2003;&#x2003;(3)&#x91CD;&#x8D34;&#x6807;&#x7B7E;&#xFF1A;&#x5982;&#x679C;&#x62E5;&#x6709;&#x5F53;&#x524D;&#x7ED3;&#x70B9;&#x9AD8;&#x5EA6;&#x7684;&#x7ED3;&#x70B9;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#xFF0C;&#x5219;&#x7B97;&#x6CD5;&#x7ED3;&#x675F;&#xFF0C;&#x5426;&#x5219;&#x5BFB;&#x627E;&#x662F;&#x5426;&#x6709;&#x53EF;&#x884C;&#x90BB;&#x63A5;&#x8FB9;(&#x5BB9;&#x91CF;&#x5927;&#x4E8E;&#x6D41;&#x91CF;)&#xFF0C;&#x5982;&#x679C;&#x6709;&#x5219;&#x4EE4;&#x5F53;&#x524D;&#x7ED3;&#x70B9;&#x9AD8;&#x5EA6;&#x7B49;&#x4E8E;&#x90BB;&#x63A5;&#x70B9;&#x9AD8;&#x5EA6;&#x7684;&#x6700;&#x5C0F;&#x503C;+1&#xFF0C;&#x5426;&#x5219;&#x4EE4;&#x5F53;&#x524D;&#x7ED3;&#x70B9;&#x7684;&#x9AD8;&#x5EA6;&#x7B49;&#x4E8E;&#x7ED3;&#x70B9;&#x6570;&#x3002;&#x91CD;&#x65B0;&#x56DE;&#x5230;(2)</p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-1"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-1" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">def isap(mix_net, height_table, n):</span><br><span class="line">    max_flow, real_map = 0, [[0 for i in range(n + 1)] for j in range(n + 1)]</span><br><span class="line">    while height_table[1] &lt; n:</span><br><span class="line">        current_node, stack = 1, []</span><br><span class="line">        while current_node != n:</span><br><span class="line">            next_height, flag, index = height_table[current_node] - 1, False, 0</span><br><span class="line">            for i in range(1, n + 1):</span><br><span class="line">                if height_table[i] == next_height and mix_net[current_node][i][0] &gt; mix_net[current_node][i][1]:</span><br><span class="line">                    flag, index = True, i</span><br><span class="line">                    break</span><br><span class="line">            if flag:</span><br><span class="line">                stack.append(current_node)</span><br><span class="line">                current_node = index</span><br><span class="line">                if current_node == n:</span><br><span class="line">                    stack.append(current_node)</span><br><span class="line">                    flow = []</span><br><span class="line">                    for k in range(len(stack) - 1):</span><br><span class="line">                        flow.append(mix_net[stack[k]][stack[k + 1]][0] - mix_net[stack[k]][stack[k + 1]][1])</span><br><span class="line">                    min_flow = min(flow)</span><br><span class="line">                    max_flow += min_flow</span><br><span class="line">                    for p in range(len(stack) - 1):</span><br><span class="line">                        real_map[stack[p]][stack[p + 1]] += min_flow</span><br><span class="line">                        mix_net[stack[p]][stack[p + 1]][1] += min_flow</span><br><span class="line">                        mix_net[stack[p + 1]][stack[p]][1] -= min_flow</span><br><span class="line">            else:</span><br><span class="line">                if height_table.count(height_table[current_node]) == 1:</span><br><span class="line">                    return real_map, max_flow</span><br><span class="line">                min_neibor, no_neibor = n, True</span><br><span class="line">                for i in range(1, n + 1):</span><br><span class="line">                    if mix_net[current_node][i][0] &gt; mix_net[current_node][i][1]:</span><br><span class="line">                        no_neibor, min_neibor = False, min(min_neibor, height_table[i])</span><br><span class="line">                height_table[current_node] = n if no_neibor else min_neibor + 1</span><br><span class="line">                if stack:</span><br><span class="line">                    current_node = stack[-1]</span><br><span class="line">                    stack.pop()</span><br><span class="line">                else:</span><br><span class="line">                    current_node = 1</span><br><span class="line">    return real_map, max_flow</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def init_height(queue):</span><br><span class="line">    global height_table</span><br><span class="line">    while queue:</span><br><span class="line">        j, height = queue.pop(0)</span><br><span class="line">        for i in range(1, n + 1):</span><br><span class="line">            if mix_net[i][j][0] &gt; 0 and height_table[i] == -1:</span><br><span class="line">                height_table[i] = height + 1</span><br><span class="line">                queue.append([i, height + 1])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x4E2A;&#x6570;n&#x548C;&#x8FB9;&#x6570;m:&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    n, m = [int(x) for x in line.strip().split()]</span><br><span class="line">    mix_net, label, height_table, direction = [[[0, 0] for i in range(n + 1)] for j in range(n + 1)], [&apos;v&apos; + str(i) for i in range(1, n + 1)], [-1] * n + [0], []</span><br><span class="line">    print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x4E2A;&#x6570;u,v&#x53CA;&#x8FB9;u-v&#x7684;&#x5BB9;&#x91CF;w:&apos;)</span><br><span class="line">    for i in range(m):</span><br><span class="line">        u, v, w = [int(x) for x in sys.stdin.readline().strip().split()]</span><br><span class="line">        mix_net[u][v], mix_net[v][u] = [w, 0], [0, 0]</span><br><span class="line">        direction.append([u, v])</span><br><span class="line">    init_height([[n, 0]])</span><br><span class="line">    real_map, max_flow = isap(mix_net, height_table, n)</span><br><span class="line">    for k in direction:</span><br><span class="line">        real_map[k[0]][k[1]] -= real_map[k[1]][k[0]]</span><br><span class="line">        real_map[k[1]][k[0]] = 0</span><br><span class="line">    net_work = pd.DataFrame([[x for x in row[1:]] for row in real_map[1:]], index=label, columns=label)</span><br><span class="line">    print(&apos;&#x7F51;&#x7EDC;&#x7684;&#x6700;&#x5927;&#x6D41;&#x503C;&#x4E3A;:&apos;, max_flow, &apos;\n---------&#x5B9E;&#x6D41;&#x7F51;&#x7EDC;&#x5982;&#x4E0B;:---------\n&apos;, net_work)</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-1"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-1" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/network5.png" alt="15"></p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x6700;&#x5C0F;&#x8D39;&#x7528;&#x6700;&#x5927;&#x6D41;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x6700;&#x5C0F;&#x8D39;&#x7528;&#x6700;&#x5927;&#x6D41;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6700;&#x5C0F;&#x8D39;&#x7528;&#x6700;&#x5927;&#x6D41;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6700;&#x5C0F;&#x8D39;&#x7528;&#x6700;&#x5927;&#x6D41;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;-2"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;-2" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x4E00;&#x5BB6;&#x516C;&#x53F8;&#x8981;&#x628A;&#x4E00;&#x6279;&#x8D27;&#x7269;&#x4ECE;&#x5DE5;&#x5382;&#x8FD0;&#x5230;&#x5317;&#x4EAC;&#xFF0C;&#x4E2D;&#x95F4;&#x7ECF;&#x8FC7;&#x82E5;&#x5E72;&#x4E2A;&#x57CE;&#x5E02;&#xFF0C;&#x5DF2;&#x77E5;&#x57CE;&#x5E02;&#x6570;&#xFF0C;&#x8FDE;&#x63A5;&#x6570;&#x548C;&#x57CE;&#x5E02;&#x4E4B;&#x95F4;&#x7684;&#x6700;&#x5927;&#x8FD0;&#x8F93;&#x91CF;&#xFF0C;&#x4EE5;&#x53CA;&#x5355;&#x4F4D;&#x8D27;&#x7269;&#x7684;&#x8FD0;&#x9001;&#x8D39;&#x7528;&#xFF0C;&#x5982;&#x4F55;&#x627E;&#x5230;&#x4E00;&#x79CD;&#x6D41;&#x91CF;&#x6700;&#x5927;&#x8D39;&#x7528;&#x5C3D;&#x53EF;&#x80FD;&#x5C0F;&#x7684;&#x65B9;&#x6CD5;&#x3002;<br>&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x4E2A;&#x6570;&#x548C;&#x8FB9;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x884C;&#x8F93;&#x5165;&#x8FDE;&#x901A;&#x7684;&#x4E24;&#x4E2A;&#x57CE;&#x5E02;&#x4EE5;&#x53CA;&#x6700;&#x5927;&#x8FD0;&#x8F93;&#x91CF;&#xFF0C;&#x548C;&#x5355;&#x4F4D;&#x8D27;&#x7269;&#x8FD0;&#x8F93;&#x8D39;&#x7528;&#xFF0C;&#x4F7F;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x9694;&#x3002;<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">6 10 # &#x7ED3;&#x70B9;&#x4E2A;&#x6570;n&#x548C;&#x8FB9;&#x6570;m</span><br><span class="line">1 2 3 1 # &#x8BF4;&#x660E;1&#x53F7;&#x57CE;&#x5E02;&#x548C;2&#x53F7;&#x57CE;&#x5E02;&#x4E4B;&#x95F4;&#x7684;&#x6700;&#x5927;&#x8FD0;&#x8F93;&#x91CF;&#x4E3A;3&#xFF0C;&#x5355;&#x4F4D;&#x8FD0;&#x8F93;&#x91CF;&#x8D39;&#x7528;&#x4E3A;1</span><br><span class="line">1 3 4 7</span><br><span class="line">2 3 1 1</span><br><span class="line">2 4 6 4</span><br><span class="line">2 5 4 5</span><br><span class="line">3 4 5 3</span><br><span class="line">3 5 3 6</span><br><span class="line">4 6 7 6</span><br><span class="line">5 4 3 3</span><br><span class="line">5 6 3 2</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;-2"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;-2" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;(1)&#x6700;&#x77ED;&#x589E;&#x5E7F;&#x8DEF;&#x7B97;&#x6CD5;&#x7C7B;&#x4F3C;&#xFF0C;&#x5148;&#x5EFA;&#x7ACB;&#x6DF7;&#x5408;&#x7F51;&#x7EDC;&#x3002;<br>&#x2003;&#x2003;(2)&#x4ECE;&#x6E90;&#x70B9;&#x5F00;&#x59CB;&#x641C;&#x7D22;&#xFF0C;&#x627E;&#x5230;&#x4E00;&#x6761;&#x6700;&#x77ED;&#x8D39;&#x7528;&#x8DEF;&#xFF0C;&#x5982;&#x679C;&#x65E0;&#x6CD5;&#x641C;&#x7D22;&#x5230;&#x6C47;&#x70B9;&#xFF0C;&#x5219;&#x7B97;&#x6CD5;&#x7ED3;&#x675F;&#xFF0C;&#x5DF2;&#x7ECF;&#x627E;&#x5230;&#x6700;&#x5C0F;&#x8D39;&#x7528;&#x6700;&#x5927;&#x6D41;&#xFF0C;&#x5426;&#x5219;&#x603B;&#x82B1;&#x8D39;&#x52A0;&#x4E0A;&#x8BE5;&#x8DEF;&#x5F84;&#x8FB9;&#x4E0A;&#x7684;&#x6700;&#x5C0F;&#x503C;&#x4E58;&#x8DEF;&#x5F84;&#x4E0A;&#x7684;&#x6240;&#x6709;&#x82B1;&#x8D39;&#x4E4B;&#x548C;&#x4F5C;&#x4E3A;&#x76EE;&#x524D;&#x7684;&#x603B;&#x82B1;&#x8D39;&#x3002;<br>&#x2003;&#x2003;(3)&#x7136;&#x540E;&#x66F4;&#x65B0;&#x6DF7;&#x5408;&#x7F51;&#x7EDC;&#xFF0C;&#x6B63;&#x5411;&#x589E;&#x6D41;&#xFF0C;&#x53CD;&#x5411;&#x51CF;&#x6D41;&#x3002;&#x56DE;&#x5230;&#x6B65;&#x9AA4;(2)</p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-2"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-2" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">def spfa(mix_net, n):</span><br><span class="line">    real_map = [[0 for i in range(n + 1)] for j in range(n + 1)]</span><br><span class="line">    max_flow, total_cost, find_flag, min_cost, min_route = 0, 0, True, 65535, [1]</span><br><span class="line">    while min_route:</span><br><span class="line">        queue, find_flag, min_cost, min_route = [[1, [1], 0]], False, 65535, []</span><br><span class="line">        while queue:</span><br><span class="line">            i, route, cost = queue.pop(0)</span><br><span class="line">            if i == n and min_cost &gt; cost:</span><br><span class="line">                min_cost, min_route = cost, route</span><br><span class="line">            for j in range(1, n + 1):</span><br><span class="line">                if mix_net[i][j][0] &gt; mix_net[i][j][1] and j not in route:</span><br><span class="line">                    queue.append([j, route + [j], cost + mix_net[i][j][2]])</span><br><span class="line">        if min_route:</span><br><span class="line">            flow = []</span><br><span class="line">            for k in range(len(min_route) - 1):</span><br><span class="line">                flow.append(mix_net[min_route[k]][min_route[k + 1]][0] - mix_net[min_route[k]][min_route[k + 1]][1])</span><br><span class="line">            min_flow = min(flow)</span><br><span class="line">            max_flow += min_flow</span><br><span class="line">            total_cost += min_cost * min_flow</span><br><span class="line">            for p in range(len(min_route) - 1):</span><br><span class="line">                real_map[min_route[p]][min_route[p + 1]] += min_flow</span><br><span class="line">                mix_net[min_route[p]][min_route[p + 1]][1] += min_flow</span><br><span class="line">                mix_net[min_route[p + 1]][min_route[p]][1] -= min_flow</span><br><span class="line">    return real_map, max_flow, total_cost</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x4E2A;&#x6570;n&#x548C;&#x8FB9;&#x6570;m:&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    n, m = [int(x) for x in line.strip().split()]</span><br><span class="line">    mix_net, label, direction = [[[0, 0, 0] for i in range(n + 1)] for j in range(n + 1)], [&apos;v&apos; + str(i) for i in range(1, n + 1)], []</span><br><span class="line">    print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x4E2A;&#x6570;u&#xFF0C;v&#x53CA;&#x8FB9;u-v&#x7684;&#x5BB9;&#x91CF;w&#xFF0C;&#x5355;&#x4F4D;&#x5BB9;&#x91CF;&#x8D39;&#x7528;c:&apos;)</span><br><span class="line">    for i in range(m):</span><br><span class="line">        u, v, w, c = [int(x) for x in sys.stdin.readline().strip().split()]</span><br><span class="line">        mix_net[u][v], mix_net[v][u] = [w, 0, c], [0, 0, -c]</span><br><span class="line">        direction.append([u, v])</span><br><span class="line">    real_map, max_flow, total_cost = spfa(mix_net, n)</span><br><span class="line">    for k in direction:</span><br><span class="line">        real_map[k[0]][k[1]] -= real_map[k[1]][k[0]]</span><br><span class="line">        real_map[k[1]][k[0]] = 0</span><br><span class="line">    net_work = pd.DataFrame([[x for x in row[1:]] for row in real_map[1:]], index=label, columns=label)</span><br><span class="line">    print(&apos;&#x7F51;&#x7EDC;&#x7684;&#x6700;&#x5927;&#x6D41;&#x503C;&#x4E3A;:&apos;, max_flow, &apos;\n&#x7F51;&#x7EDC;&#x7684;&#x6700;&#x5C0F;&#x8D39;&#x7528;&#x4E3A;:&apos;, total_cost, &apos;\n---------&#x5B9E;&#x6D41;&#x7F51;&#x7EDC;&#x5982;&#x4E0B;:---------\n&apos;, net_work)</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-2"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-2" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/network6.png" alt="16"></p><h1 id="&#x7B97;&#x6CD5;&#x603B;&#x7ED3;"><a href="#&#x7B97;&#x6CD5;&#x603B;&#x7ED3;" class="headerlink" title="&#x7B97;&#x6CD5;&#x603B;&#x7ED3;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x603B;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x7F51;&#x7EDC;&#x6D41;&#x662F;&#x4E00;&#x79CD;&#x8F83;&#x4E3A;&#x590D;&#x6742;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x901A;&#x5E38;&#x7528;&#x6765;&#x89E3;&#x51B3;&#x5B9E;&#x9645;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x5176;&#x6A21;&#x677F;&#x56FA;&#x5B9A;&#xFF0C;&#x96BE;&#x70B9;&#x5728;&#x4E8E;&#x5982;&#x4F55;&#x5C06;&#x95EE;&#x9898;&#x8F6C;&#x5316;&#x4E3A;&#x4E00;&#x4E2A;&#x7F51;&#x7EDC;&#x6D41;&#x8868;&#x793A;&#x7684;&#x5F62;&#x5F0F;&#xFF0C;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x591A;&#x52A0;&#x7EC3;&#x4E60;&#xFF0C;&#x505A;&#x5230;&#x719F;&#x7EC3;&#x638C;&#x63E1;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Network Flows&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="计算机基础知识" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="常用算法" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>OpenCV</title>
    <link href="https://USTCcoder.github.io/2019/08/20/library%20opencv/"/>
    <id>https://USTCcoder.github.io/2019/08/20/library opencv/</id>
    <published>2019-08-20T09:14:28.000Z</published>
    <updated>2020-03-14T05:01:06.934Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/LIBRARY/cv.jpg" alt="0"></p><h1 id="OpenCV&#x4ECB;&#x7ECD;"><a href="#OpenCV&#x4ECB;&#x7ECD;" class="headerlink" title="OpenCV&#x4ECB;&#x7ECD;"></a><font size="5" color="red">OpenCV&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;OpenCV&#x662F;&#x4E00;&#x4E2A;&#x57FA;&#x4E8E;BSD&#x8BB8;&#x53EF;&#xFF08;&#x5F00;&#x6E90;&#xFF09;&#x53D1;&#x884C;&#x7684;&#x8DE8;&#x5E73;&#x53F0;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x5E93;&#xFF0C;&#x53EF;&#x4EE5;&#x8FD0;&#x884C;&#x5728;Linux&#x3001;Windows&#x3001;Android&#x548C;Mac OS&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x4E0A;&#x3002;&#x5B83;&#x8F7B;&#x91CF;&#x7EA7;&#x800C;&#x4E14;&#x9AD8;&#x6548;&#xFF0C;&#x7531;&#x4E00;&#x7CFB;&#x5217; C &#x51FD;&#x6570;&#x548C;&#x5C11;&#x91CF; C++ &#x7C7B;&#x6784;&#x6210;&#xFF0C;&#x540C;&#x65F6;&#x63D0;&#x4F9B;&#x4E86;Python&#x3001;Ruby&#x3001;MATLAB&#x7B49;&#x8BED;&#x8A00;&#x7684;&#x63A5;&#x53E3;&#xFF0C;&#x5B9E;&#x73B0;&#x4E86;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x548C;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x65B9;&#x9762;&#x7684;&#x5F88;&#x591A;&#x901A;&#x7528;&#x7B97;&#x6CD5;&#x3002;<br><a id="more"></a></p><h1 id="OpenCV&#x7279;&#x70B9;"><a href="#OpenCV&#x7279;&#x70B9;" class="headerlink" title="OpenCV&#x7279;&#x70B9;"></a><font size="5" color="red">OpenCV&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">OpenCV&#x662F;&#x5F00;&#x6E90;&#x7684;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x5E93;&#xFF0C;&#x91C7;&#x7528;C / C++&#x7F16;&#x5199;&#xFF0C;&#x5904;&#x7406;&#x901F;&#x5EA6;&#x5F88;&#x5FEB;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">OpenCV&#x53EF;&#x4EE5;&#x63D0;&#x4F9B;&#x4E3B;&#x6D41;&#x8BED;&#x8A00;&#x7684;&#x63A5;&#x53E3;&#xFF0C;&#x65B9;&#x4FBF;&#x5F00;&#x53D1;&#x8005;&#x8C03;&#x7528;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">OpenCV&#x5177;&#x6709;&#x901A;&#x7528;&#x7684;&#x56FE;&#x50CF;/&#x89C6;&#x9891;&#x8F7D;&#xFF0C;&#x4FDD;&#x5B58;&#x548C;&#x83B7;&#x53D6;&#x6A21;&#x5757;&#xFF0C;&#x5177;&#x6709;&#x5E95;&#x5C42;&#x548C;&#x9AD8;&#x5C42;&#x7684;&#x5E94;&#x7528;&#x5F00;&#x53D1;&#x5305;&#x3002;</font></p><h1 id="OpenCV&#x5E94;&#x7528;"><a href="#OpenCV&#x5E94;&#x7528;" class="headerlink" title="OpenCV&#x5E94;&#x7528;"></a><font size="5" color="red">OpenCV&#x5E94;&#x7528;</font></h1><h2 id="OpenCV&#x8BFB;&#x53D6;&#xFF0C;&#x663E;&#x793A;&#x4E0E;&#x4FDD;&#x5B58;"><a href="#OpenCV&#x8BFB;&#x53D6;&#xFF0C;&#x663E;&#x793A;&#x4E0E;&#x4FDD;&#x5B58;" class="headerlink" title="OpenCV&#x8BFB;&#x53D6;&#xFF0C;&#x663E;&#x793A;&#x4E0E;&#x4FDD;&#x5B58;"></a><font size="4">OpenCV&#x8BFB;&#x53D6;&#xFF0C;&#x663E;&#x793A;&#x4E0E;&#x4FDD;&#x5B58;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line"></span><br><span class="line"># cv.imread(filename, code) &#x4EE5;code&#x683C;&#x5F0F;&#x8BFB;&#x53D6;&#x4E00;&#x5F20;&#x56FE;&#x7247;&#xFF0C;code&#x53EF;&#x4EE5;&#x4E3A;cv.IMREAD_GRAYSCALE&#x8BFB;&#x53D6;&#x4E00;&#x5F20;&#x7070;&#x5EA6;&#x56FE;&#x50CF;</span><br><span class="line">img = cv.imread(&apos;lena.jpg&apos;)</span><br><span class="line"></span><br><span class="line"># cv.namedWindow(windowname) &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x540D;&#x4E3A;windowname&#x7684;&#x7A97;&#x53E3;</span><br><span class="line">cv.namedWindow(&apos;lena&apos;)</span><br><span class="line"></span><br><span class="line"># cv.imshow(window_name, img) &#x5C06;img&#x56FE;&#x7247;&#x663E;&#x793A;&#x5728;&#x7A97;&#x53E3;&#x5904;</span><br><span class="line">cv.imshow(&apos;lena&apos;, img)</span><br><span class="line"></span><br><span class="line"># cv.waitkey(n) &#x7B49;&#x5F85;&#x7528;&#x6237;&#x6309;&#x952E;n&#x6BEB;&#x79D2;&#xFF0C;0&#x4EE3;&#x8868;&#x6C38;&#x8FDC;&#x7B49;&#x5F85;</span><br><span class="line">cv.waitkey(0)</span><br><span class="line"></span><br><span class="line"># cv.destroyAllWindows() &#x5173;&#x95ED;&#x6240;&#x6709;&#x7A97;&#x53E3;</span><br><span class="line">cv.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"># cv.VideoCapture(n) &#x83B7;&#x53D6;&#x7B2C;n&#x4E2A;&#x6444;&#x50CF;&#x5934;&#xFF0C;&#x4ECE;0&#x5F00;&#x59CB;&#x7F16;&#x53F7;</span><br><span class="line">cv.VideoCapture(0)</span><br><span class="line"></span><br><span class="line"># cv.imwrite(filename, img) &#x5C06;img&#x56FE;&#x7247;&#x4FDD;&#x5B58;&#x5728;filename&#x6587;&#x4EF6;&#x4E2D;</span><br><span class="line">cv.imwrite(&apos;lena1.png&apos;, img)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/cv1.png" alt="1"></p><h2 id="OpenCV&#x56FE;&#x50CF;&#x683C;&#x5F0F;&#x8F6C;&#x6362;"><a href="#OpenCV&#x56FE;&#x50CF;&#x683C;&#x5F0F;&#x8F6C;&#x6362;" class="headerlink" title="OpenCV&#x56FE;&#x50CF;&#x683C;&#x5F0F;&#x8F6C;&#x6362;"></a><font size="4">OpenCV&#x56FE;&#x50CF;&#x683C;&#x5F0F;&#x8F6C;&#x6362;</font></h2><h3 id="cvtColor&#x65B9;&#x6CD5;"><a href="#cvtColor&#x65B9;&#x6CD5;" class="headerlink" title="cvtColor&#x65B9;&#x6CD5;"></a><font size="3">cvtColor&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line"></span><br><span class="line">img = cv.imread(&apos;lena.jpg&apos;)</span><br><span class="line"></span><br><span class="line"># cv.cvtColor(img, code) &#x5C06;img&#x8F6C;&#x6362;&#x4E3A;code&#x683C;&#x5F0F;&#xFF0C;code&#x53EF;&#x4EE5;&#x4E3A;cv.COLOR_BGR2GRAY&#x5C06;RGB&#x4E09;&#x901A;&#x9053;&#x5F69;&#x8272;&#x56FE;&#x50CF;&#x8F6C;&#x6362;&#x4E3A;&#x7070;&#x5EA6;&#x56FE;&#x50CF;&#xFF0C;cv.COLOR_BGR2HSV&#x5C06;RGB&#x989C;&#x8272;&#x901A;&#x9053;&#x8F6C;&#x6362;&#x4E3A;HSV&#x989C;&#x8272;&#x901A;&#x9053;</span><br><span class="line">img_gray=cv.cvtColor(img,cv.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">cv.namedWindow(&apos;gray&apos;)</span><br><span class="line">cv.imshow(&apos;gray&apos;, img_gray)</span><br><span class="line">cv.waitKey(0)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/cv2.png" alt="2"></p><h2 id="OpenCV&#x56FE;&#x50CF;&#x5F62;&#x6001;&#x5B66;&#x53D8;&#x6362;"><a href="#OpenCV&#x56FE;&#x50CF;&#x5F62;&#x6001;&#x5B66;&#x53D8;&#x6362;" class="headerlink" title="OpenCV&#x56FE;&#x50CF;&#x5F62;&#x6001;&#x5B66;&#x53D8;&#x6362;"></a><font size="4">OpenCV&#x56FE;&#x50CF;&#x5F62;&#x6001;&#x5B66;&#x53D8;&#x6362;</font></h2><h3 id="morphologyEx&#x65B9;&#x6CD5;"><a href="#morphologyEx&#x65B9;&#x6CD5;" class="headerlink" title="morphologyEx&#x65B9;&#x6CD5;"></a><font size="3">morphologyEx&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">kernel = np.ones((3, 3), np.uint8)</span><br><span class="line">img = cv.imread(&apos;lena.jpg&apos;, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"></span><br><span class="line"># cv.morphologyEx(img, op, kernel) &#x5C06;img&#x8FDB;&#x884C;&#x6A21;&#x677F;&#x4E3A;kernel&#x7684;op&#x64CD;&#x4F5C;&#xFF0C;&#x5176;&#x4E2D;op&#x53EF;&#x4EE5;&#x4E3A;cv.MORPH_DILATE&#x81A8;&#x80C0;&#x64CD;&#x4F5C;&#xFF0C;cv.MORPH_ERODE&#x8150;&#x8680;&#x64CD;&#x4F5C;&#xFF0C;cv.MORPH_OPEN&#x5F00;&#x64CD;&#x4F5C;&#xFF0C;cv.MORPH_CLOSE&#x95ED;&#x64CD;&#x4F5C;&#xFF0C;cv.MORPH_GRADIENT&#x68AF;&#x5EA6;&#x64CD;&#x4F5C;(&#x81A8;&#x80C0;+&#x8150;&#x8680;)&#x627E;&#x51FA;&#x8FB9;&#x7F18;</span><br><span class="line">img_gradient = cv.morphologyEx(img, cv2.MORPH_GRADIENT, kernel)</span><br><span class="line"></span><br><span class="line">cv.namedWindow(&apos;gradient&apos;)</span><br><span class="line">cv.imshow(&apos;gradient&apos;, img_gradient)</span><br><span class="line">cv.waitKey(0)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/cv3.png" alt="3"></p><h2 id="OpenCV&#x56FE;&#x50CF;&#x5F62;&#x72B6;&#x53D8;&#x6362;"><a href="#OpenCV&#x56FE;&#x50CF;&#x5F62;&#x72B6;&#x53D8;&#x6362;" class="headerlink" title="OpenCV&#x56FE;&#x50CF;&#x5F62;&#x72B6;&#x53D8;&#x6362;"></a><font size="4">OpenCV&#x56FE;&#x50CF;&#x5F62;&#x72B6;&#x53D8;&#x6362;</font></h2><h3 id="resize&#x65B9;&#x6CD5;"><a href="#resize&#x65B9;&#x6CD5;" class="headerlink" title="resize&#x65B9;&#x6CD5;"></a><font size="3">resize&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line"></span><br><span class="line">img = cv.imread(&apos;lena.jpg&apos;)</span><br><span class="line">cv.namedWindow(&apos;origin&apos;)</span><br><span class="line">cv.imshow(&apos;origin&apos;, img)</span><br><span class="line"></span><br><span class="line"># cv.resize(img, shape) &#x5C06;img&#x7684;&#x5927;&#x5C0F;&#x8C03;&#x6574;&#x4E3A;shape</span><br><span class="line">img_resize = cv.resize(img, (500, 500))</span><br><span class="line">cv.namedWindow(&apos;resize&apos;)</span><br><span class="line">cv.imshow(&apos;resize&apos;,img_resize)</span><br><span class="line"></span><br><span class="line">cv.waitKey(0)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/cv7.png" alt="7"></p><h3 id="flip&#x65B9;&#x6CD5;"><a href="#flip&#x65B9;&#x6CD5;" class="headerlink" title="flip&#x65B9;&#x6CD5;"></a><font size="3">flip&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line"></span><br><span class="line">img = cv.imread(&apos;lena.jpg&apos;)</span><br><span class="line">cv.namedWindow(&apos;origin&apos;)</span><br><span class="line">cv.imshow(&apos;origin&apos;, img)</span><br><span class="line"></span><br><span class="line"># cv.flip(img, n) &#x5C06;img&#x7FFB;&#x8F6C;&#xFF0C;n&gt;0&#x6CBF;y&#x8F74;&#x5BF9;&#x79F0;&#x7FFB;&#x8F6C;&#xFF0C;n=0&#x6CBF;x&#x8F74;&#x5BF9;&#x79F0;&#x7FFB;&#x8F6C;&#xFF0C;n&lt;0&#x6CBF;x&#x8F74;y&#x8F74;&#x540C;&#x65F6;&#x5BF9;&#x79F0;&#x7FFB;&#x8F6C;</span><br><span class="line">img_flip_x = cv.flip(img, 0)</span><br><span class="line">cv.namedWindow(&apos;flip_x&apos;)</span><br><span class="line">cv.imshow(&apos;flip_x&apos;,img_flip_x)</span><br><span class="line"></span><br><span class="line">img_flip_y = cv.flip(img, 1)</span><br><span class="line">cv.namedWindow(&apos;flip_y&apos;)</span><br><span class="line">cv.imshow(&apos;flip_y&apos;,img_flip_y)</span><br><span class="line"></span><br><span class="line">img_flip_xy = cv.flip(img, -1)</span><br><span class="line">cv.namedWindow(&apos;flip_xy&apos;)</span><br><span class="line">cv.imshow(&apos;flip_xy&apos;,img_flip_xy)</span><br><span class="line"></span><br><span class="line">cv.waitKey(0)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/cv4.png" alt="4"></p><h3 id="warpAffine&#x65B9;&#x6CD5;"><a href="#warpAffine&#x65B9;&#x6CD5;" class="headerlink" title="warpAffine&#x65B9;&#x6CD5;"></a><font size="3">warpAffine&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv </span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">np.random.seed(5)</span><br><span class="line"></span><br><span class="line">m = np.random.rand(2,3)</span><br><span class="line">img = cv.imread(&apos;lena.jpg&apos;)</span><br><span class="line">cv.namedWindow(&apos;origin&apos;)</span><br><span class="line">cv.imshow(&apos;origin&apos;, img)</span><br><span class="line"></span><br><span class="line"># cv.warpAffine(img, m, dsize) &#x5C06;img&#x8FDB;&#x884C;&#x4EFF;&#x5C04;&#x53D8;&#x6362;&#xFF0C;&#x53D8;&#x6362;&#x77E9;&#x9635;&#x4E3A;m&#xFF0C;&#x53D8;&#x6362;&#x540E;&#x7684;&#x5927;&#x5C0F;&#x4E3A;dsize</span><br><span class="line">img_affine = cv.warpAffine(img, m, (img.shape[0], img.shape[1]))</span><br><span class="line">cv.namedWindow(&apos;affine&apos;)</span><br><span class="line">cv.imshow(&apos;affine&apos;,img_affine)</span><br><span class="line"></span><br><span class="line">cv.waitKey(0)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/cv5.png" alt="5"></p><h2 id="OpenCV&#x56FE;&#x50CF;&#x64CD;&#x4F5C;"><a href="#OpenCV&#x56FE;&#x50CF;&#x64CD;&#x4F5C;" class="headerlink" title="OpenCV&#x56FE;&#x50CF;&#x64CD;&#x4F5C;"></a><font size="4">OpenCV&#x56FE;&#x50CF;&#x64CD;&#x4F5C;</font></h2><h3 id="bitwise&#x65B9;&#x6CD5;"><a href="#bitwise&#x65B9;&#x6CD5;" class="headerlink" title="bitwise&#x65B9;&#x6CD5;"></a><font size="3">bitwise&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">np.random.seed(1)</span><br><span class="line"></span><br><span class="line">img = cv.imread(&apos;lena.jpg&apos;)</span><br><span class="line">img_random = np.random.randint(0, 256, img.shape, dtype=np.uint8)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># cv.bitwise_not(img) &#x6309;&#x4F4D;&#x53D6;&#x53CD;&#xFF0C;&#x7B49;&#x4EF7;&#x4E8E;~img</span><br><span class="line">img_not = cv.bitwise_not(img)</span><br><span class="line">cv.namedWindow(&apos;not&apos;)</span><br><span class="line">cv.imshow(&apos;not&apos;, img_not)</span><br><span class="line"></span><br><span class="line"># cv.bitwise_and(img1, img2) &#x6309;&#x4F4D;&#x4E0E;&#xFF0C;&#x7B49;&#x4EF7;&#x4E8E;img1 &amp; img2</span><br><span class="line">img_and = cv.bitwise_and(img, img_random)</span><br><span class="line">cv.namedWindow(&apos;and&apos;)</span><br><span class="line">cv.imshow(&apos;and&apos;, img_and)</span><br><span class="line"></span><br><span class="line"># cv.bitwise_or(img1, img2) &#x6309;&#x4F4D;&#x6216;&#xFF0C;&#x7B49;&#x4EF7;&#x4E8E;img1 | img2</span><br><span class="line">img_or = cv.bitwise_or(img, img_random)</span><br><span class="line">cv.namedWindow(&apos;or&apos;)</span><br><span class="line">cv.imshow(&apos;or&apos;, img_or)</span><br><span class="line"></span><br><span class="line"># cv.bitwise_xor(img1, img2) &#x6309;&#x4F4D;&#x5F02;&#x6216;&#xFF0C;&#x7B49;&#x4EF7;&#x4E8E;img1 ^ img2</span><br><span class="line">img_xor = cv.bitwise_xor(img, img_random)</span><br><span class="line">cv.namedWindow(&apos;xor&apos;)</span><br><span class="line">cv.imshow(&apos;xor&apos;, img_xor)</span><br><span class="line"></span><br><span class="line">cv.waitKey(0)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/cv6.png" alt="6"></p><h3 id="add&#xFF0C;subtract&#xFF0C;multiply&#xFF0C;divide&#xFF0C;addweight&#x65B9;&#x6CD5;"><a href="#add&#xFF0C;subtract&#xFF0C;multiply&#xFF0C;divide&#xFF0C;addweight&#x65B9;&#x6CD5;" class="headerlink" title="add&#xFF0C;subtract&#xFF0C;multiply&#xFF0C;divide&#xFF0C;addweight&#x65B9;&#x6CD5;"></a><font size="3">add&#xFF0C;subtract&#xFF0C;multiply&#xFF0C;divide&#xFF0C;addweight&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">np.random.seed(1)</span><br><span class="line"></span><br><span class="line">img = cv.imread(&apos;lena.jpg&apos;)</span><br><span class="line">img_random = np.random.randint(0, 256, img.shape, dtype=np.uint8)</span><br><span class="line"></span><br><span class="line"># cv.add(img1, img2) &#x5C06;&#x4E24;&#x5F20;&#x56FE;&#x7247;&#x76F8;&#x52A0;&#xFF0C;&#x5982;&#x679C;&#x52A0;&#x548C;&#x5927;&#x4E8E;&#x4E0A;&#x9650;&#x5219;&#x8D4B;&#x503C;&#x4E3A;&#x4E0A;&#x9650;(200+200=255)&#xFF0C;&#x548C;img1+img2&#x4E0D;&#x540C;&#xFF0C;img1+img2&#x5982;&#x679C;&#x5927;&#x4E8E;&#x4E0A;&#x9650;&#x5219;&#x4ECE;&#x4E0B;&#x9650;&#x5F00;&#x59CB;&#x8BA1;&#x7B97;(200+200=400-256=144)</span><br><span class="line">img_add = cv.add(img, img_random)</span><br><span class="line">cv.namedWindow(&apos;add&apos;)</span><br><span class="line">cv.imshow(&apos;add&apos;, img_add)</span><br><span class="line"></span><br><span class="line">img_plus = img + img_random</span><br><span class="line">cv.namedWindow(&apos;plus&apos;)</span><br><span class="line">cv.imshow(&apos;plus&apos;, img_plus)</span><br><span class="line"></span><br><span class="line"># cv.subtract(img1, img2) &#x5C06;&#x4E24;&#x5F20;&#x56FE;&#x7247;&#x76F8;&#x51CF;&#xFF0C;&#x7528;&#x6CD5;&#x540C;add</span><br><span class="line"></span><br><span class="line"># cv.multiply(img1, img2) &#x5C06;&#x4E24;&#x5F20;&#x56FE;&#x7247;&#x76F8;&#x4E58;&#xFF0C;&#x7528;&#x6CD5;&#x540C;add</span><br><span class="line"></span><br><span class="line"># cv.divide(img1, img2) &#x5C06;&#x4E24;&#x5F20;&#x56FE;&#x7247;&#x76F8;&#x9664;&#xFF0C;&#x7528;&#x6CD5;&#x540C;add</span><br><span class="line"></span><br><span class="line"># cv.addweight(img1, x, img2, y, z) &#x5C06;&#x4E24;&#x5F20;&#x56FE;&#x7247;&#x76F8;&#x52A0;&#xFF0C;&#x7ED3;&#x679C;&#x4E3A;img1 * x + img2 * y + z</span><br><span class="line">cv.waitKey(0)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/cv8.png" alt="8"></p><h3 id="blur&#xFF0C;medianBlur&#xFF0C;GaussianBlur&#xFF0C;filter2D&#x65B9;&#x6CD5;"><a href="#blur&#xFF0C;medianBlur&#xFF0C;GaussianBlur&#xFF0C;filter2D&#x65B9;&#x6CD5;" class="headerlink" title="blur&#xFF0C;medianBlur&#xFF0C;GaussianBlur&#xFF0C;filter2D&#x65B9;&#x6CD5;"></a><font size="3">blur&#xFF0C;medianBlur&#xFF0C;GaussianBlur&#xFF0C;filter2D&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">img = cv.imread(&apos;lena.jpg&apos;)</span><br><span class="line"></span><br><span class="line">cv.namedWindow(&apos;origin&apos;)</span><br><span class="line">cv.imshow(&apos;origin&apos;, img)</span><br><span class="line"></span><br><span class="line"># cv.blur(img, ksize) &#x5C06;img&#x505A;&#x5747;&#x503C;&#x6A21;&#x7CCA;&#x64CD;&#x4F5C;&#xFF0C;&#x6838;&#x5927;&#x5C0F;&#x4E3A;ksize</span><br><span class="line">img_blur = cv.blur(img, (5, 5))</span><br><span class="line"></span><br><span class="line">cv.namedWindow(&apos;blur&apos;)</span><br><span class="line">cv.imshow(&apos;blur&apos;, img_blur)</span><br><span class="line"></span><br><span class="line"># cv.medianBlur(img, ksize) &#x5C06;img&#x505A;&#x4E2D;&#x503C;&#x6A21;&#x7CCA;&#x64CD;&#x4F5C;&#xFF0C;&#x6838;&#x5927;&#x5C0F;&#x4E3A;ksize</span><br><span class="line">img_median_blur = cv.medianBlur(img, 5)</span><br><span class="line"></span><br><span class="line">cv.namedWindow(&apos;median_blur&apos;)</span><br><span class="line">cv.imshow(&apos;median_blur&apos;, img_median_blur)</span><br><span class="line"></span><br><span class="line"># cv.GaussianBlur(img, ksize, sigmaX) &#x5C06;img&#x505A;&#x9AD8;&#x65AF;&#x6A21;&#x7CCA;&#x64CD;&#x4F5C;&#xFF0C;&#x6838;&#x5927;&#x5C0F;&#x4E3A;ksize&#xFF0C;&#x3C3;&#x4E3A;sigmaX</span><br><span class="line">img_gauss_blur = cv.GaussianBlur(img, (5, 5), sigmaX=1)</span><br><span class="line"></span><br><span class="line">cv.namedWindow(&apos;gauss_blur&apos;)</span><br><span class="line">cv.imshow(&apos;gauss_blur&apos;, img_gauss_blur)</span><br><span class="line"></span><br><span class="line"># cv.filter2D(img, ddepth, kernel) &#x5C06;img&#x505A;&#x4E8C;&#x4F4D;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#xFF0C;&#x5377;&#x79EF;&#x6838;&#x4E3A;kernel&#xFF0C;&#x5982;&#x679C;&#x8981;&#x4FDD;&#x6301;&#x5927;&#x5C0F;&#x5219;ddepth&#x4E3A;-1</span><br><span class="line">img_edge = cv.filter2D(img, -1, np.array([[0, -1, 0], [-1, 4, -1], [0, -1, 0]]))</span><br><span class="line"></span><br><span class="line">cv.namedWindow(&apos;edge&apos;)</span><br><span class="line">cv.imshow(&apos;edge&apos;, img_edge)</span><br><span class="line">cv.waitKey(0)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/cv9.png" alt="9"></p><h2 id="OpenCV&#x7EDF;&#x8BA1;"><a href="#OpenCV&#x7EDF;&#x8BA1;" class="headerlink" title="OpenCV&#x7EDF;&#x8BA1;"></a><font size="4">OpenCV&#x7EDF;&#x8BA1;</font></h2><h3 id="getTickCount&#xFF0C;getTickFrequency&#x65B9;&#x6CD5;"><a href="#getTickCount&#xFF0C;getTickFrequency&#x65B9;&#x6CD5;" class="headerlink" title="getTickCount&#xFF0C;getTickFrequency&#x65B9;&#x6CD5;"></a><font size="3">getTickCount&#xFF0C;getTickFrequency&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line"></span><br><span class="line"># cv.getTickCount() &#x8BA1;&#x7B97;&#x4ECE;&#x5F00;&#x673A;&#x5230;&#x5F53;&#x524D;&#x65F6;&#x95F4;&#x7684;&#x65F6;&#x949F;&#x5468;&#x671F;&#x6570;</span><br><span class="line">t1 = cv.getTickCount()</span><br><span class="line">t2 = cv.getTickCount()</span><br><span class="line"></span><br><span class="line"># cv.getTickFrequency() &#x83B7;&#x5F97;&#x4E00;&#x79D2;&#x7684;&#x65F6;&#x949F;&#x5468;&#x671F;&#x6570;&#xFF0C;&#x5E38;&#x5E38;&#x7528;&#x65F6;&#x949F;&#x5468;&#x671F;&#x6570;&#x9664;&#x4EE5;&#x8BE5;&#x6570;&#x83B7;&#x5F97;&#x6240;&#x7528;&#x65F6;&#x95F4;</span><br><span class="line">f = cv.getTickFrequency()</span><br><span class="line"></span><br><span class="line">print(&apos;&#x6240;&#x7528;&#x65F6;&#x95F4;&#x4E3A;:&apos;, (t2-t1) / f)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/cv10.png" alt="10"></p><h3 id="mean&#xFF0C;meanStdDev&#x65B9;&#x6CD5;"><a href="#mean&#xFF0C;meanStdDev&#x65B9;&#x6CD5;" class="headerlink" title="mean&#xFF0C;meanStdDev&#x65B9;&#x6CD5;"></a><font size="3">mean&#xFF0C;meanStdDev&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line">img = cv.imread(&apos;lena.jpg&apos;)</span><br><span class="line"></span><br><span class="line"># cv.mean(img) &#x8BA1;&#x7B97;img&#x6BCF;&#x4E2A;&#x901A;&#x9053;&#x7684;&#x5747;&#x503C;</span><br><span class="line">mean = cv.mean(img)</span><br><span class="line"></span><br><span class="line"># cv.mean(img) &#x8BA1;&#x7B97;img&#x6BCF;&#x4E2A;&#x901A;&#x9053;&#x7684;&#x5747;&#x503C;&#x548C;&#x65B9;&#x5DEE;</span><br><span class="line">mean1, std1 = cv.meanStdDev(img)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/cv11.png" alt="11"></p><h3 id="calcHist&#x65B9;&#x6CD5;"><a href="#calcHist&#x65B9;&#x6CD5;" class="headerlink" title="calcHist&#x65B9;&#x6CD5;"></a><font size="3">calcHist&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">img = cv.imread(&apos;lena.jpg&apos;)</span><br><span class="line">color=[&apos;blue&apos;,&apos;green&apos;,&apos;red&apos;]</span><br><span class="line"></span><br><span class="line"># cv.calcHist(img, channels, mask, histSize, ranges) &#x7ED8;&#x5236;img&#x4E2D;channels&#x901A;&#x9053;&#x7684;&#x76F4;&#x65B9;&#x56FE;&#xFF0C;histSize&#x4E3A;&#x76F4;&#x65B9;&#x56FE;&#x5927;&#x5C0F;&#xFF0C;ranges&#x4E3A;&#x76F4;&#x65B9;&#x56FE;&#x7684;&#x8303;&#x56F4;</span><br><span class="line">for i,color_i in enumerate(color):</span><br><span class="line">    hist = cv.calcHist([img],[i],None,[256],[0,255])</span><br><span class="line">    plt.plot(hist,color_i)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/cv12.png" alt="12"></p><h2 id="OpenCV&#x5E38;&#x7528;&#x56FE;&#x50CF;&#x64CD;&#x4F5C;"><a href="#OpenCV&#x5E38;&#x7528;&#x56FE;&#x50CF;&#x64CD;&#x4F5C;" class="headerlink" title="OpenCV&#x5E38;&#x7528;&#x56FE;&#x50CF;&#x64CD;&#x4F5C;"></a><font size="4">OpenCV&#x5E38;&#x7528;&#x56FE;&#x50CF;&#x64CD;&#x4F5C;</font></h2><h3 id="inRange&#x65B9;&#x6CD5;"><a href="#inRange&#x65B9;&#x6CD5;" class="headerlink" title="inRange&#x65B9;&#x6CD5;"></a><font size="3">inRange&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">img = cv.imread(&apos;lena.jpg&apos;)</span><br><span class="line">cv.namedWindow(&apos;origin&apos;)</span><br><span class="line">cv.imshow(&apos;origin&apos;, img)</span><br><span class="line"></span><br><span class="line">img_hsv = cv.cvtColor(img, cv.COLOR_BGR2HSV)</span><br><span class="line"></span><br><span class="line"># cv.inRange(img, lowerb, upperb) &#x5C06;HSV&#x8272;&#x5F69;&#x7A7A;&#x95F4;&#x4E2D;&#x7684;&#x989C;&#x8272;&#x8FC7;&#x6EE4;&#xFF0C;img&#x989C;&#x8272;&#x901A;&#x9053;&#x5148;&#x8F6C;&#x6362;&#x4E3A;HSV&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8FDB;&#x884C;&#x989C;&#x8272;&#x8FC7;&#x6EE4;</span><br><span class="line">res = cv.inRange(img_hsv, np.array([125, 43, 46]), np.array([155, 255, 255]))</span><br><span class="line"></span><br><span class="line">cv.namedWindow(&apos;purple&apos;)</span><br><span class="line">cv.imshow(&apos;purple&apos;, res)</span><br><span class="line">cv.waitKey(0)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></tbody></table></figure><font size="3">HSV&#x7A7A;&#x95F4;&#x989C;&#x8272;&#x5206;&#x5E03;&#x8868;&#xFF1A;</font><p>$$\begin{array}{|c|c|c|c|c|c|c|c|c|c|c|} &#x989C;&#x8272; &amp; &#x9ED1; &amp; &#x7070; &amp; &#x767D; &amp; &#x7EA2; &amp; &#x6A59; &amp; &#x9EC4; &amp; &#x7EFF; &amp; &#x9752; &amp; &#x84DD; &amp; &#x7D2B; \ \hline h_{min} &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 11 &amp; 26 &amp; 35 &amp; 78 &amp; 100 &amp; 125\ h_{max} &amp; 180 &amp; 180 &amp; 180 &amp; 10 &amp; 25 &amp; 34 &amp; 77 &amp; 99 &amp; 124 &amp; 155\ s_{min} &amp; 0 &amp; 0 &amp; 0 &amp; 43 &amp; 43 &amp; 43 &amp; 43 &amp; 43 &amp; 43 &amp; 43\ s_{max} &amp; 255 &amp; 43 &amp; 30 &amp; 255 &amp; 255 &amp; 255 &amp; 255 &amp; 255 &amp; 255 &amp; 255\ v_{min} &amp; 0 &amp; 46 &amp; 221 &amp; 46 &amp; 46 &amp; 46 &amp; 46 &amp; 46 &amp; 46 &amp; 46\ v_{max} &amp; 46 &amp; 220 &amp; 255 &amp; 255 &amp; 255 &amp; 255 &amp; 255 &amp; 255 &amp; 255 &amp; 255\ \end{array}$$<br><img src="/images/LIBRARY/cv13.png" alt="13"></p><h3 id="equalizeHist&#x65B9;&#x6CD5;"><a href="#equalizeHist&#x65B9;&#x6CD5;" class="headerlink" title="equalizeHist&#x65B9;&#x6CD5;"></a><font size="4">equalizeHist&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line"></span><br><span class="line">img = cv.imread(&apos;lena.jpg&apos;)</span><br><span class="line">img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">cv.namedWindow(&apos;origin&apos;)</span><br><span class="line">cv.imshow(&apos;origin&apos;, img)</span><br><span class="line"></span><br><span class="line"># cv.equalizeHist(img) &#x5BF9;img&#x56FE;&#x50CF;&#x8FDB;&#x884C;&#x76F4;&#x65B9;&#x56FE;&#x5747;&#x8861;&#x5316;</span><br><span class="line">img_equal = cv.equalizeHist(img)</span><br><span class="line"></span><br><span class="line">cv.namedWindow(&apos;euqal&apos;)</span><br><span class="line">cv.imshow(&apos;equal&apos;, img_equal)</span><br><span class="line">cv.waitKey(0)</span><br><span class="line">cv.destoryAllWindows()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/cv14.png" alt="14"></p><h3 id="compareHist&#xFF0C;calcBackProject&#xFF0C;matchTemplate&#x65B9;&#x6CD5;"><a href="#compareHist&#xFF0C;calcBackProject&#xFF0C;matchTemplate&#x65B9;&#x6CD5;" class="headerlink" title="compareHist&#xFF0C;calcBackProject&#xFF0C;matchTemplate&#x65B9;&#x6CD5;"></a><font size="3">compareHist&#xFF0C;calcBackProject&#xFF0C;matchTemplate&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># cv.compareHist(hist1, hist2, method) &#x5BF9;&#x4E24;&#x4E2A;&#x76F4;&#x65B9;&#x56FE;&#x8FDB;&#x884C;&#x6BD4;&#x8F83;&#xFF0C;method&#x53EF;&#x4EE5;&#x4E3A;cv.HISTCMP_BHATTACHARYYA&#xFF0C;cv.HISTCMP_CORREL&#x7B49;&#x7B49;</span><br><span class="line"></span><br><span class="line"># cv.calcBackProject(target, channel, hsv_hist, range) &#x4ECE;target&#x4E2D;&#x5BFB;&#x627E;&#x5904;&#x4E0E;&#x6A21;&#x677F;&#x76F8;&#x4F3C;&#x7684;&#x533A;&#x57DF;&#xFF0C;&#x5176;&#x4E2D;&#x6A21;&#x677F;&#x4E3A;HSV&#x56FE;&#x50CF;&#x7684;&#x76F4;&#x65B9;&#x56FE;&#xFF0C;channel&#x4E3A;&#x901A;&#x9053;&#x6570;&#xFF0C;range&#x4E3A;&#x76F4;&#x65B9;&#x56FE;&#x7684;&#x957F;&#x548C;&#x5BBD;</span><br><span class="line"></span><br><span class="line"># cv.matchTemplate(target, mask, method) &#x8BA1;&#x7B97;&#x56FE;&#x7247;&#x4E4B;&#x95F4;&#x7684;&#x5339;&#x914D;&#x7A0B;&#x5EA6;&#xFF0C;method&#x53EF;&#x4EE5;&#x4E3A;cv.TM_SQDIFF_NORMED&#xFF0C;cv.TM_CCOERR_NORMED&#xFF0C;cv.TM_CCOEFF_NORMED&#x7B49;&#x7B49;</span><br></pre></td></tr></tbody></table></figure><h3 id="line&#xFF0C;rectangle&#xFF0C;circle&#x65B9;&#x6CD5;"><a href="#line&#xFF0C;rectangle&#xFF0C;circle&#x65B9;&#x6CD5;" class="headerlink" title="line&#xFF0C;rectangle&#xFF0C;circle&#x65B9;&#x6CD5;"></a><font size="3">line&#xFF0C;rectangle&#xFF0C;circle&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># cv.line(img, pt1, pt2, color, thickness) &#x5728;img&#x56FE;&#x50CF;&#x4E0A;&#x753B;&#x4E00;&#x6761;&#x76F4;&#x7EBF;&#xFF0C;&#x8D77;&#x70B9;&#x5750;&#x6807;&#x4E3A;pt1&#xFF0C;&#x7EC8;&#x70B9;&#x5750;&#x6807;&#x4E3A;pt2&#xFF0C;&#x989C;&#x8272;&#x4E3A;color&#xFF0C;&#x7EBF;&#x5BBD;&#x4E3A;thickness</span><br><span class="line"></span><br><span class="line"># cv.rectangle(img, pt1, pt2, color, thickness) &#x5728;img&#x56FE;&#x50CF;&#x4E0A;&#x753B;&#x4E00;&#x4E2A;&#x77E9;&#x5F62;&#xFF0C;&#x5DE6;&#x4E0A;&#x70B9;&#x5750;&#x6807;&#x4E3A;pt1&#xFF0C;&#x53F3;&#x4E0B;&#x70B9;&#x5750;&#x6807;&#x4E3A;pt2&#xFF0C;&#x989C;&#x8272;&#x4E3A;color&#xFF0C;&#x7EBF;&#x5BBD;&#x4E3A;thickness</span><br><span class="line"></span><br><span class="line"># cv.circle(img, center, radius, color, thickness) &#x5728;img&#x56FE;&#x50CF;&#x4E0A;&#x753B;&#x4E00;&#x4E2A;&#x5706;&#xFF0C;&#x5706;&#x5FC3;&#x5750;&#x6807;&#x4E3A;center&#xFF0C;&#x534A;&#x5F84;&#x4E3A;radius&#xFF0C;&#x989C;&#x8272;&#x4E3A;color&#xFF0C;&#x7EBF;&#x5BBD;&#x4E3A;thickness</span><br></pre></td></tr></tbody></table></figure><h3 id="threshold&#x65B9;&#x6CD5;"><a href="#threshold&#x65B9;&#x6CD5;" class="headerlink" title="threshold&#x65B9;&#x6CD5;"></a><font size="3">threshold&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line"></span><br><span class="line">img = cv.imread(&apos;lena.jpg&apos;)</span><br><span class="line">img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line">cv.namedWindow(&apos;origin&apos;)</span><br><span class="line">cv.imshow(&apos;origin&apos;, img)</span><br><span class="line"></span><br><span class="line"># cv.threshold(img, thresh, maxval, type) &#x5BF9;&#x7070;&#x5EA6;&#x56FE;&#x50CF;img&#x8FDB;&#x884C;&#x9608;&#x503C;&#x5206;&#x5272;&#xFF0C;thresh&#x4E3A;&#x6307;&#x5B9A;&#x6309;&#x7167;&#x9608;&#x503C;&#x5927;&#x5C0F;&#x5206;&#x5272;&#xFF0C;&#x6700;&#x5927;&#x7684;&#x7070;&#x5EA6;&#x503C;&#x4E3A;maxval&#xFF0C;&#x5206;&#x5272;&#x65B9;&#x6CD5;&#x4E3A;type&#xFF0C;&#x53EF;&#x4EE5;&#x4E3A;cv.THRESH_OTSU&#x7B49;&#x7B49;&#xFF0C;&#x5982;&#x679C;&#x6307;&#x5B9A;type&#x5219;thresh&#x5931;&#x6548;</span><br><span class="line">thresh, img_thresh = cv.threshold(img, 0, 255, cv.THRESH_OTSU)</span><br><span class="line"></span><br><span class="line">cv.namedWindow(&apos;thresh&apos;)</span><br><span class="line">cv.imshow(&apos;thresh&apos;, img_thresh)</span><br><span class="line">cv.waitKey(0)</span><br><span class="line">cv.destoryAllWindows()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/cv15.png" alt="15"></p><h3 id="pyrDown&#xFF0C;pyrUp&#x65B9;&#x6CD5;"><a href="#pyrDown&#xFF0C;pyrUp&#x65B9;&#x6CD5;" class="headerlink" title="pyrDown&#xFF0C;pyrUp&#x65B9;&#x6CD5;"></a><font size="3">pyrDown&#xFF0C;pyrUp&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line"></span><br><span class="line">img = cv.imread(&apos;lena.jpg&apos;)</span><br><span class="line">cv.namedWindow(&apos;origin&apos;)</span><br><span class="line">cv.imshow(&apos;origin&apos;, img)</span><br><span class="line"></span><br><span class="line"># cv.pyrDown(img) &#x5BF9;img&#x8FDB;&#x884C;&#x4E0B;&#x91C7;&#x6837;</span><br><span class="line">img_down = cv.pyrDown(img)</span><br><span class="line"></span><br><span class="line">cv.namedWindow(&apos;down&apos;)</span><br><span class="line">cv.imshow(&apos;down&apos;, img_down)</span><br><span class="line"></span><br><span class="line"># cv.pyrUp(img) &#x5BF9;img&#x8FDB;&#x884C;&#x4E0A;&#x91C7;&#x6837;</span><br><span class="line">img_up = cv.pyrUp(img)</span><br><span class="line"></span><br><span class="line">cv.namedWindow(&apos;up&apos;)</span><br><span class="line">cv.imshow(&apos;up&apos;, img_up)</span><br><span class="line">cv.waitKey(0)</span><br><span class="line">cv.destoryAllWindows()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/cv16.png" alt="16"></p><h2 id="OpenCV&#x7B97;&#x5B50;"><a href="#OpenCV&#x7B97;&#x5B50;" class="headerlink" title="OpenCV&#x7B97;&#x5B50;"></a><font size="4">OpenCV&#x7B97;&#x5B50;</font></h2><h3 id="Sobel&#xFF0C;Laplacian&#xFF0C;Canny&#x65B9;&#x6CD5;"><a href="#Sobel&#xFF0C;Laplacian&#xFF0C;Canny&#x65B9;&#x6CD5;" class="headerlink" title="Sobel&#xFF0C;Laplacian&#xFF0C;Canny&#x65B9;&#x6CD5;"></a><font size="3">Sobel&#xFF0C;Laplacian&#xFF0C;Canny&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line"></span><br><span class="line">img = cv.imread(&apos;lena.jpg&apos;)</span><br><span class="line">img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">cv.namedWindow(&apos;origin&apos;)</span><br><span class="line">cv.imshow(&apos;origin&apos;, img)</span><br><span class="line"></span><br><span class="line"># cv.Sobel(img, ddepth, dx, dy) &#x5BF9;img&#x8FDB;&#x884C;Sobel&#x7B97;&#x5B50;&#x6EE4;&#x6CE2;&#xFF0C;dx=1,dy=0&#x4EE3;&#x8868;&#x6C34;&#x5E73;&#x65B9;&#x5411;&#xFF0C;dx=0,dy=1&#x4EE3;&#x8868;&#x5782;&#x76F4;&#x65B9;&#x5411;</span><br><span class="line">img_sobel = cv.Sobel(img, -1, dx=0, dy=1)</span><br><span class="line"></span><br><span class="line">cv.namedWindow(&apos;sobel&apos;)</span><br><span class="line">cv.imshow(&apos;sobel&apos;, img_sobel)</span><br><span class="line"></span><br><span class="line"># cv.Laplacian(img, ddepth) &#x5C06;img&#x8FDB;&#x884C;Laplacian&#x7B97;&#x5B50;&#x6EE4;&#x6CE2;</span><br><span class="line">img_laplacian = cv.Laplacian(img, -1)</span><br><span class="line"></span><br><span class="line">cv.namedWindow(&apos;laplacian&apos;)</span><br><span class="line">cv.imshow(&apos;laplacian&apos;, img_laplacian)</span><br><span class="line"></span><br><span class="line"># cv.Canny(img, threshold1, threshold2) &#x5C06;img&#x8FDB;&#x884C;Canny&#x7B97;&#x5B50;&#x6EE4;&#x6CE2;&#xFF0C;&#x4F4E;&#x9608;&#x503C;&#x4E3A;threshold1&#xFF0C;&#x9AD8;&#x9608;&#x503C;&#x4E3A;threshold2</span><br><span class="line">img_canny = cv.Canny(img, 50, 150)</span><br><span class="line"></span><br><span class="line">cv.namedWindow(&apos;canny&apos;)</span><br><span class="line">cv.imshow(&apos;canny&apos;, img_canny)</span><br><span class="line">cv.waitKey(0)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/cv17.png" alt="17"></p><h2 id="OpenCV&#x970D;&#x592B;&#x53D8;&#x6362;"><a href="#OpenCV&#x970D;&#x592B;&#x53D8;&#x6362;" class="headerlink" title="OpenCV&#x970D;&#x592B;&#x53D8;&#x6362;"></a><font size="4">OpenCV&#x970D;&#x592B;&#x53D8;&#x6362;</font></h2><h3 id="HoughLines&#xFF0C;HoughCircles&#x65B9;&#x6CD5;"><a href="#HoughLines&#xFF0C;HoughCircles&#x65B9;&#x6CD5;" class="headerlink" title="HoughLines&#xFF0C;HoughCircles&#x65B9;&#x6CD5;"></a><font size="3">HoughLines&#xFF0C;HoughCircles&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cv.HoughLines(img, rho, theta, threshold) &#x970D;&#x592B;&#x76F4;&#x7EBF;&#x68C0;&#x6D4B;&#xFF0C;&#x8FB9;&#x7F18;&#x63D0;&#x53D6;&#x540E;&#x7684;&#x56FE;&#x50CF;&#x4E3A;img&#xFF0C;&#x6B65;&#x957F;&#x4E3A;rho&#xFF0C;&#x89D2;&#x5EA6;&#x6B65;&#x957F;&#x4E3A;theta&#xFF0C;&#x9608;&#x503C;&#x4E3A;threshold&#xFF0C;&#x8FD4;&#x56DE;&#x6240;&#x6709;&#x76F4;&#x7EBF;&#x4FE1;&#x606F;</span><br><span class="line"></span><br><span class="line"># cv.HoughCircles(img, method, dp, minDist, param1, param2, minRadius, maxRadius) &#x970D;&#x592B;&#x5706;&#x68C0;&#x6D4B;&#xFF0C;&#x68C0;&#x6D4B;&#x65B9;&#x6CD5;method&#xFF0C;&#x53EF;&#x4EE5;&#x4E3A;cv.HOUGH_GRADIENT&#x7B49;&#x7B49;&#xFF0C;dp&#x4E3A;&#x7D2F;&#x52A0;&#x5668;&#x5206;&#x8FA8;&#x7387;&#x4E0E;&#x56FE;&#x50CF;&#x5206;&#x8FA8;&#x7387;&#x7684;&#x53CD;&#x6BD4;&#xFF0C;dp&#x8D8A;&#x5927;&#xFF0C;&#x7D2F;&#x52A0;&#x5668;&#x6570;&#x7EC4;&#x8D8A;&#x5C0F;&#xFF0C;minDist&#x4E3A;&#x68C0;&#x6D4B;&#x5230;&#x539F;&#x4E2D;&#x5FC3;&#x7684;&#x6700;&#x5C0F;&#x8DDD;&#x79BB;&#xFF0C;&#x5982;&#x679C;&#x592A;&#x9760;&#x8FD1;&#x5219;&#x68C0;&#x6D4B;&#x4E0D;&#x51FA;&#xFF0C;param1&#x7528;&#x4E8E;&#x8FB9;&#x7F18;&#x68C0;&#x6D4B;&#x7684;&#x9608;&#x503C;&#xFF0C;param2&#x4E3A;&#x7D2F;&#x52A0;&#x5668;&#x9608;&#x503C;&#xFF0C;&#x8D8A;&#x9AD8;&#x5219;&#x8D8A;&#x7CBE;&#x786E;&#xFF0C;&#x4F46;&#x662F;&#x5706;&#x8D8A;&#x5C11;&#xFF0C;minRadius&#x4E3A;&#x5706;&#x7684;&#x6700;&#x5C0F;&#x534A;&#x5F84;&#xFF0C;maxRadius&#x4E3A;&#x5706;&#x7684;&#x6700;&#x5927;&#x534A;&#x5F84;</span><br></pre></td></tr></tbody></table></figure><h2 id="OpenCV&#x8F6E;&#x5ED3;&#x5904;&#x7406;"><a href="#OpenCV&#x8F6E;&#x5ED3;&#x5904;&#x7406;" class="headerlink" title="OpenCV&#x8F6E;&#x5ED3;&#x5904;&#x7406;"></a><font size="4">OpenCV&#x8F6E;&#x5ED3;&#x5904;&#x7406;</font></h2><h3 id="findContour&#xFF0C;drawContour&#xFF0C;contourArea&#x65B9;&#x6CD5;"><a href="#findContour&#xFF0C;drawContour&#xFF0C;contourArea&#x65B9;&#x6CD5;" class="headerlink" title="findContour&#xFF0C;drawContour&#xFF0C;contourArea&#x65B9;&#x6CD5;"></a><font size="3">findContour&#xFF0C;drawContour&#xFF0C;contourArea&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># cv.findContour(img, mode, method) &#x5BFB;&#x627E;&#x8F6E;&#x5ED3;&#xFF0C;mode&#x8868;&#x793A;&#x8F6E;&#x5ED3;&#x7684;&#x68C0;&#x7D22;&#x6A21;&#x5F0F;&#xFF0C;&#x53EF;&#x4EE5;&#x4E3A;cv2.RETR_EXTERNAL&#xFF0C;cv2.RETR_TREE&#x7B49;&#x7B49;&#xFF0C;method&#x8868;&#x793A;&#x8F6E;&#x5ED3;&#x7684;&#x8FD1;&#x4F3C;&#x529E;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x4E3A;cv2.CHAIN_APPROX_NONE&#xFF0C;cv2.CHAIN_APPROX_SIMPLE&#x7B49;&#x7B49;</span><br><span class="line"></span><br><span class="line"># cv.drawContour(img, contours, contourIdx, color, thickness) &#x6839;&#x636E;&#x5BFB;&#x627E;&#x5230;&#x7684;&#x8F6E;&#x5ED3;&#xFF0C;&#x753B;&#x51FA;&#x7B2C;contourIdx&#x4E2A;&#x8F6E;&#x5ED3;&#xFF0C;&#x989C;&#x8272;&#x4E3A;color&#xFF0C;&#x7EBF;&#x5BBD;&#x4E3A;thickness</span><br><span class="line"></span><br><span class="line"># cv.contourArea(contour) &#x8BA1;&#x7B97;&#x8F6E;&#x5ED3;&#x7684;&#x9762;&#x79EF;</span><br></pre></td></tr></tbody></table></figure><h1 id="OpenCV&#x5C0F;&#x7ED3;"><a href="#OpenCV&#x5C0F;&#x7ED3;" class="headerlink" title="OpenCV&#x5C0F;&#x7ED3;"></a><font size="5" color="red">OpenCV&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x901A;&#x8FC7;OpenCV&#xFF0C;&#x4F7F;&#x7528;&#x8005;&#x53EF;&#x4EE5;&#x4EC5;&#x9700;&#x8981;&#x51E0;&#x884C;&#x4EE3;&#x7801;&#xFF0C;&#x4FBF;&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x4E00;&#x7CFB;&#x5217;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x4EFB;&#x52A1;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x4ECB;&#x7ECD;&#x7684;&#x53EA;&#x662F;&#x5C0F;&#x90E8;&#x5206;&#x5E38;&#x89C1;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x7684;&#x7814;&#x7A76;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;OpenCV&#x662F;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x7684;&#x5E2E;&#x624B;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;OpenCV&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="python" scheme="https://USTCcoder.github.io/categories/python/"/>
    
      <category term="常用库" scheme="https://USTCcoder.github.io/categories/python/%E5%B8%B8%E7%94%A8%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Scipy</title>
    <link href="https://USTCcoder.github.io/2019/08/16/library%20scipy/"/>
    <id>https://USTCcoder.github.io/2019/08/16/library scipy/</id>
    <published>2019-08-16T09:44:03.000Z</published>
    <updated>2019-08-20T02:46:30.354Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/LIBRARY/scipy.jpg" alt="0"></p><h1 id="Scipy&#x4ECB;&#x7ECD;"><a href="#Scipy&#x4ECB;&#x7ECD;" class="headerlink" title="Scipy&#x4ECB;&#x7ECD;"></a><font size="5" color="red">Scipy&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;Scipy&#x662F;&#x4E00;&#x4E2A;&#x7528;&#x4E8E;&#x6570;&#x5B66;&#x3001;&#x79D1;&#x5B66;&#x3001;&#x5DE5;&#x7A0B;&#x9886;&#x57DF;&#x7684;&#x5E38;&#x7528;&#x8F6F;&#x4EF6;&#x5305;&#xFF0C;&#x53EF;&#x4EE5;&#x5904;&#x7406;&#x63D2;&#x503C;&#x3001;&#x79EF;&#x5206;&#x3001;&#x4F18;&#x5316;&#x3001;&#x5E38;&#x5FAE;&#x5206;&#x65B9;&#x7A0B;&#x6570;&#x503C;&#x89E3;&#x7684;&#x6C42;&#x89E3;&#x3001;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x3001;&#x4FE1;&#x53F7;&#x5904;&#x7406;&#x7B49;&#x95EE;&#x9898;&#x3002;&#x5B83;&#x7528;&#x4E8E;&#x6709;&#x6548;&#x8BA1;&#x7B97;Numpy&#x77E9;&#x9635;&#xFF0C;&#x4F7F;Numpy&#x548C;Scipy&#x534F;&#x540C;&#x5DE5;&#x4F5C;&#xFF0C;&#x9AD8;&#x6548;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#x3002;<br><a id="more"></a></p><h1 id="Scipy&#x7279;&#x70B9;"><a href="#Scipy&#x7279;&#x70B9;" class="headerlink" title="Scipy&#x7279;&#x70B9;"></a><font size="5" color="red">Scipy&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">Scipy&#x652F;&#x6301;&#x5927;&#x591A;&#x6570;&#x5DE5;&#x7A0B;&#x6570;&#x5B66;&#x8FD0;&#x7B97;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">Scipy&#x6BCF;&#x4E00;&#x4E2A;&#x5B50;&#x6A21;&#x5757;&#x90FD;&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x4E00;&#x7C7B;&#x529F;&#x80FD;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">Scipy&#x4E2D;&#x7684;&#x51FD;&#x6570;&#x7C7B;&#x4F3C;&#x4E8E;MATLAB&#x4E2D;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x4F7F;&#x7528;&#x65B9;&#x4FBF;&#x3002;</font></p><h1 id="Scipy&#x5E94;&#x7528;"><a href="#Scipy&#x5E94;&#x7528;" class="headerlink" title="Scipy&#x5E94;&#x7528;"></a><font size="5" color="red">Scipy&#x5E94;&#x7528;</font></h1><h2 id="Scipy&#x5E38;&#x6570;&#x6A21;&#x5757;"><a href="#Scipy&#x5E38;&#x6570;&#x6A21;&#x5757;" class="headerlink" title="Scipy&#x5E38;&#x6570;&#x6A21;&#x5757;"></a><font size="4">Scipy&#x5E38;&#x6570;&#x6A21;&#x5757;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from scipy import constants as C</span><br><span class="line"></span><br><span class="line"># C.c &#x5149;&#x901F;&#x5E38;&#x6570;</span><br><span class="line">C.c</span><br><span class="line"></span><br><span class="line"># C.h &#x666E;&#x6717;&#x514B;&#x5E38;&#x6570;</span><br><span class="line">C.h</span><br><span class="line"></span><br><span class="line"># C.mile &#x82F1;&#x91CC;</span><br><span class="line">C.mile</span><br><span class="line"></span><br><span class="line"># C.pi &#x5706;&#x5468;&#x7387;&#x3C0;</span><br><span class="line">C.pi</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/scipy1.png" alt="1"></p><h2 id="Scipy&#x7279;&#x6B8A;&#x51FD;&#x6570;&#x6A21;&#x5757;"><a href="#Scipy&#x7279;&#x6B8A;&#x51FD;&#x6570;&#x6A21;&#x5757;" class="headerlink" title="Scipy&#x7279;&#x6B8A;&#x51FD;&#x6570;&#x6A21;&#x5757;"></a><font size="4">Scipy&#x7279;&#x6B8A;&#x51FD;&#x6570;&#x6A21;&#x5757;</font></h2><h3 id="gamma&#xFF0C;gammaln&#x65B9;&#x6CD5;"><a href="#gamma&#xFF0C;gammaln&#x65B9;&#x6CD5;" class="headerlink" title="gamma&#xFF0C;gammaln&#x65B9;&#x6CD5;"></a><font size="3">gamma&#xFF0C;gammaln&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from scipy import special as S</span><br><span class="line"></span><br><span class="line"># S.gamma(n) &#x8BA1;&#x7B97;&#x393;(n)&#x7684;&#x503C;</span><br><span class="line">S.gamma(4)</span><br><span class="line"></span><br><span class="line"># S.gammaln(n) &#x8BA1;&#x7B97;ln|&#x393;(n)|&#x7684;&#x503C;&#xFF0C;&#x907F;&#x514D;&#x393;(n)&#x8FC7;&#x5927;</span><br><span class="line">S.gammaln(4)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/scipy2.png" alt="2"></p><h3 id="log1p&#x65B9;&#x6CD5;"><a href="#log1p&#x65B9;&#x6CD5;" class="headerlink" title="log1p&#x65B9;&#x6CD5;"></a><font size="3">log1p&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from scipy import special as S</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># S.log1p(n) &#x8BA1;&#x7B97;ln(n+1)&#x7684;&#x503C;&#xFF0C;&#x4F7F;&#x5176;&#x53EF;&#x4EE5;&#x8BA1;&#x7B97;&#x5F88;&#x5C0F;&#x7684;&#x6570;</span><br><span class="line">S.log1p(np.e - 1)</span><br><span class="line">S.log1p(1e-10)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/scipy3.png" alt="3"></p><h2 id="Scipy&#x62DF;&#x5408;&#x4F18;&#x5316;&#x6A21;&#x5757;"><a href="#Scipy&#x62DF;&#x5408;&#x4F18;&#x5316;&#x6A21;&#x5757;" class="headerlink" title="Scipy&#x62DF;&#x5408;&#x4F18;&#x5316;&#x6A21;&#x5757;"></a><font size="4">Scipy&#x62DF;&#x5408;&#x4F18;&#x5316;&#x6A21;&#x5757;</font></h2><h3 id="fsolve&#x65B9;&#x6CD5;"><a href="#fsolve&#x65B9;&#x6CD5;" class="headerlink" title="fsolve&#x65B9;&#x6CD5;"></a><font size="3">fsolve&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from scipy import optimize as O</span><br><span class="line">import math</span><br><span class="line"></span><br><span class="line">def f(x):</span><br><span class="line">    x0, x1, x2 = x.tolist()</span><br><span class="line">    return [5 * x1 + 3, 4 * x0 ** 2 - 2 * math.sin(x1 * x2), x1 * x2 - 1.5]</span><br><span class="line"></span><br><span class="line"># O.fsolve(f, init) &#x6C42;&#x975E;&#x7EBF;&#x6027;&#x65B9;&#x7A0B;&#x7EC4;&#x7684;&#x89E3;&#xFF0C;f&#x4E3A;&#x65B9;&#x7A0B;&#x51FD;&#x6570;&#xFF0C;init&#x4E3A;&#x521D;&#x59CB;&#x8FED;&#x4EE3;&#x503C;</span><br><span class="line">result = O.fsolve(f, [1, 1, 1])</span><br></pre></td></tr></tbody></table></figure><p>$$ \left {\begin{aligned} 5x_1 + 3 &amp; = 0 \ 4{x_0}^2 -2\sin{x_1 \cdot x_2} &amp; = 0 \ x_1 \cdot x_2 -1.5 &amp;= 0 \end{aligned} \right.$$<br><img src="/images/LIBRARY/scipy4.png" alt="4"></p><h3 id="leastsq&#x65B9;&#x6CD5;"><a href="#leastsq&#x65B9;&#x6CD5;" class="headerlink" title="leastsq&#x65B9;&#x6CD5;"></a><font size="3">leastsq&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from scipy import optimize as O</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">x = np.array([8.19,2.72,6.39,8.71,4.7,2.66,3.78])</span><br><span class="line">y = np.array([7.01,2.78,6.47,6.71,4.1,4.23,4.05])</span><br><span class="line"></span><br><span class="line">def residuals(p):</span><br><span class="line">    k, b = p</span><br><span class="line">    return y - (k * x + b)</span><br><span class="line"></span><br><span class="line">r = O.leastsq(residuals, [1,0])</span><br><span class="line"></span><br><span class="line">k, b = r[0]</span><br><span class="line">y_new = x * k + b</span><br><span class="line">print(&apos;k=&apos;, k, &apos;b=&apos;, b)</span><br><span class="line"></span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.plot(x, y_new)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/scipy5.png" alt="5"></p><h2 id="Scipy&#x7EBF;&#x6027;&#x4EE3;&#x6570;&#x6A21;&#x5757;"><a href="#Scipy&#x7EBF;&#x6027;&#x4EE3;&#x6570;&#x6A21;&#x5757;" class="headerlink" title="Scipy&#x7EBF;&#x6027;&#x4EE3;&#x6570;&#x6A21;&#x5757;"></a><font size="4">Scipy&#x7EBF;&#x6027;&#x4EE3;&#x6570;&#x6A21;&#x5757;</font></h2><h3 id="solve&#x65B9;&#x6CD5;"><a href="#solve&#x65B9;&#x6CD5;" class="headerlink" title="solve&#x65B9;&#x6CD5;"></a><font size="3">solve&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from scipy import linalg as L</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.array([[2, 2, -1], [1, -2, 4], [5, 8, -1]])</span><br><span class="line">b = np.array([[6], [3], [27]])</span><br><span class="line"></span><br><span class="line"># L.solve(A, b) &#x6C42;&#x7EBF;&#x6027;&#x65B9;&#x7A0B;&#x7EC4;Ax = b&#x7684;&#x89E3;</span><br><span class="line">x = L.solve(a, b)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/scipy6.png" alt="6"></p><h3 id="eig&#xFF0C;svd&#x65B9;&#x6CD5;"><a href="#eig&#xFF0C;svd&#x65B9;&#x6CD5;" class="headerlink" title="eig&#xFF0C;svd&#x65B9;&#x6CD5;"></a><font size="3">eig&#xFF0C;svd&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from scipy import linalg as L</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.array([[-2, 1, 1], [0, 2, 0], [-4, 1, 3]])</span><br><span class="line"></span><br><span class="line"># L.eig(array) &#x6C42;array&#x7684;&#x7279;&#x5F81;&#x503C;&#x548C;&#x7279;&#x5F81;&#x5411;&#x91CF;</span><br><span class="line">m, x = L.eig(a)</span><br><span class="line"></span><br><span class="line"># L.svd(array) &#x6C42;array&#x7684;&#x5947;&#x5F02;&#x503C;&#x5206;&#x89E3;</span><br><span class="line">u, sigma, v = L.svd(a)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/scipy7.png" alt="7"></p><h2 id="Scipy&#x7EDF;&#x8BA1;&#x6A21;&#x5757;"><a href="#Scipy&#x7EDF;&#x8BA1;&#x6A21;&#x5757;" class="headerlink" title="Scipy&#x7EDF;&#x8BA1;&#x6A21;&#x5757;"></a><font size="4">Scipy&#x7EDF;&#x8BA1;&#x6A21;&#x5757;</font></h2><h3 id="norm&#x7C7B;&#xFF0C;stats&#xFF0C;rvs&#x65B9;&#x6CD5;"><a href="#norm&#x7C7B;&#xFF0C;stats&#xFF0C;rvs&#x65B9;&#x6CD5;" class="headerlink" title="norm&#x7C7B;&#xFF0C;stats&#xFF0C;rvs&#x65B9;&#x6CD5;"></a><font size="3">norm&#x7C7B;&#xFF0C;stats&#xFF0C;rvs&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from scipy import stats as ST</span><br><span class="line"></span><br><span class="line"># ST.norm(loc=0, scale=1) &#x83B7;&#x53D6;&#x504F;&#x79FB;&#x4E3A;loc(&#x9ED8;&#x8BA4;&#x4E3A;0)&#xFF0C;&#x6807;&#x51C6;&#x5DEE;&#x4E3A;scale(&#x9ED8;&#x8BA4;&#x4E3A;1)&#x7684;&#x6B63;&#x6001;&#x5206;&#x5E03;(&#x8FD8;&#x53EF;&#x4EE5;&#x5B9A;&#x4E49;&#x5176;&#x4ED6;&#x7684;&#x5206;&#x5E03;)</span><br><span class="line">norm_ = ST.norm(loc=1, scale=2)</span><br><span class="line"></span><br><span class="line"># obj.stats() &#x83B7;&#x53D6;obj&#x5206;&#x5E03;&#x7684;&#x671F;&#x671B;&#x548C;&#x65B9;&#x5DEE;</span><br><span class="line">mean_norm, var_norm = norm_.stats()</span><br><span class="line"></span><br><span class="line"># obj.rvs(size=shape) &#x83B7;&#x53D6;&#x5927;&#x5C0F;&#x4E3A;shape&#x7684;obj&#x5206;&#x5E03;&#x7684;&#x968F;&#x673A;&#x62BD;&#x6837;</span><br><span class="line">x = norm_.rvs(size=(100, 100))</span><br><span class="line">mean_x = np.mean(x)</span><br><span class="line">std_x = np.std(x)</span><br><span class="line"></span><br><span class="line"># obj.pdf(x) &#x83B7;&#x53D6;x&#x5904;&#x7684;&#x6982;&#x7387;&#x5BC6;&#x5EA6;&#x51FD;&#x6570;</span><br><span class="line">pdf_1 = norm_.pdf(1)</span><br><span class="line"></span><br><span class="line"># obj.cdf(x) &#x83B7;&#x53D6;x&#x5904;&#x7684;&#x5206;&#x5E03;&#x51FD;&#x6570;</span><br><span class="line">cdf_1 = norm_.cdf(1)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/scipy8.png" alt="8"></p><h3 id="rv-discrete&#x7C7B;&#xFF0C;stats&#xFF0C;rvs&#x65B9;&#x6CD5;"><a href="#rv-discrete&#x7C7B;&#xFF0C;stats&#xFF0C;rvs&#x65B9;&#x6CD5;" class="headerlink" title="rv_discrete&#x7C7B;&#xFF0C;stats&#xFF0C;rvs&#x65B9;&#x6CD5;"></a><font size="3">rv_discrete&#x7C7B;&#xFF0C;stats&#xFF0C;rvs&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from scipy import stats as ST</span><br><span class="line"></span><br><span class="line"># ST.rv_discrete(values=(x, p)) &#x81EA;&#x5B9A;&#x4E49;&#x79BB;&#x6563;&#x6982;&#x7387;&#x5206;&#x5E03;&#xFF0C;x&#x4E3A;&#x53EF;&#x80FD;&#x7684;&#x53D6;&#x503C;&#xFF0C;p&#x4E3A;&#x5BF9;&#x5E94;&#x7684;&#x6982;&#x7387;</span><br><span class="line">discrete_ = ST.rv_discrete(values=([1, 2, 3, 4, 5, 6], [0.75, 0.05, 0.05, 0.05, 0.05, 0.05]))</span><br><span class="line"></span><br><span class="line">discrete_.stats()</span><br><span class="line"></span><br><span class="line">x = discrete_.rvs(size=(100, 100))</span><br><span class="line">mean_x = np.mean(x)</span><br><span class="line">var_x = np.var(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line"># plt.annotate(formulation, xy, xytext, fontsize, arrowprops) &#x5728;xy&#x9644;&#x8FD1;&#x6DFB;&#x52A0;&#x6CE8;&#x89E3;formulation&#xFF0C;xytext&#x4E3A;&#x6CE8;&#x89E3;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;fontsize&#x4E3A;&#x6CE8;&#x89E3;&#x7684;&#x5927;&#x5C0F;&#xFF0C;arrowprops&#x4E3A;&#x7BAD;&#x5934;&#x7C7B;&#x578B;</span><br><span class="line">plt.annotate(r&apos;$x^2-0.5$&apos;, (0, -0.5), xytext=(+0.25, 0), arrowprops=dict(arrowstyle=&apos;-&gt;&apos;, connectionstyle=&apos;arc3, rad=0.2&apos;))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/scipy9.png" alt="9"></p><h3 id="binom-pmf&#x65B9;&#x6CD5;"><a href="#binom-pmf&#x65B9;&#x6CD5;" class="headerlink" title="binom.pmf&#x65B9;&#x6CD5;"></a><font size="3">binom.pmf&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from scipy import stats as ST</span><br><span class="line"></span><br><span class="line"># ST.binom.pmf(list, n, p) &#x8FDB;&#x884C;n&#x6B21;&#x4E8C;&#x9879;&#x5206;&#x5E03;&#x5B9E;&#x9A8C;&#xFF0C;&#x51FA;&#x73B0;&#x7684;&#x6982;&#x7387;&#x4E3A;p&#xFF0C;&#x8BA1;&#x7B97;&#x51FA;&#x73B0;list&#x4E2D;&#x5BF9;&#x5E94;&#x503C;&#x7684;&#x6982;&#x7387;</span><br><span class="line">x = ST.binom.pmf([0,1,2,3,4], 3, 0.8)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/scipy10.png" alt="10"></p><h2 id="Scipy&#x79EF;&#x5206;&#x6A21;&#x5757;"><a href="#Scipy&#x79EF;&#x5206;&#x6A21;&#x5757;" class="headerlink" title="Scipy&#x79EF;&#x5206;&#x6A21;&#x5757;"></a><font size="4">Scipy&#x79EF;&#x5206;&#x6A21;&#x5757;</font></h2><h3 id="quad&#x65B9;&#x6CD5;"><a href="#quad&#x65B9;&#x6CD5;" class="headerlink" title="quad&#x65B9;&#x6CD5;"></a><font size="3">quad&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from scipy import integrate as I</span><br><span class="line"></span><br><span class="line">I.quad(f, min_lim, max_lim) &#x8BA1;&#x7B97;&#x51FD;&#x6570;f&#x7684;&#x79EF;&#x5206;(f&#x53EF;&#x4EE5;&#x662F;&#x81EA;&#x5B9A;&#x4E49;&#x51FD;&#x6570;&#x4E5F;&#x53EF;&#x4EE5;&#x4E3A;lambda&#x8868;&#x8FBE;&#x5F0F;)&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x8BA1;&#x7B97;&#x4EA7;&#x751F;&#x7684;&#x8BEF;&#x5DEE;&#xFF0C;&#x79EF;&#x5206;&#x4E0B;&#x9650;&#x4E3A;min_lim&#xFF0C;&#x79EF;&#x5206;&#x4E0A;&#x9650;&#x4E3A;max_lim</span><br><span class="line"></span><br><span class="line">pi_half, err = I.quad(lambda x:(1 - x ** 2) ** 0.5, -1, 1)</span><br><span class="line">print(&apos;pi:&apos;, pi_half * 2, &apos;err:&apos;, err)</span><br></pre></td></tr></tbody></table></figure><p>$$\int_{-1}^{1} \sqrt{1-x^2}\, dx = \frac{\pi}{2}$$<br><img src="/images/LIBRARY/scipy11.png" alt="11"></p><h3 id="dblquad&#xFF0C;tplquad&#x65B9;&#x6CD5;"><a href="#dblquad&#xFF0C;tplquad&#x65B9;&#x6CD5;" class="headerlink" title="dblquad&#xFF0C;tplquad&#x65B9;&#x6CD5;"></a><font size="3">dblquad&#xFF0C;tplquad&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from scipy import integrate as I</span><br><span class="line"></span><br><span class="line">f = lambda x, y : (1 - x ** 2 - y ** 2) ** 0.5</span><br><span class="line">f_y = lambda x : (1 - x ** 2) ** 0.5</span><br><span class="line"></span><br><span class="line"># I.dblquad(f, x_min_lim, x_max_lim, y_min_lim, y_max_lim) &#x8BA1;&#x7B97;&#x51FD;&#x6570;f&#x7684;&#x4E8C;&#x91CD;&#x79EF;&#x5206;&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x8BA1;&#x7B97;&#x4EA7;&#x751F;&#x7684;&#x8BEF;&#x5DEE;&#xFF0C;x&#x79EF;&#x5206;&#x4E0B;&#x9650;&#x4E3A;x_min_lim&#xFF0C;&#x79EF;&#x5206;&#x4E0A;&#x9650;&#x4E3A;x_max_lim&#xFF0C;y&#x79EF;&#x5206;&#x4E0B;&#x9650;&#x4E3A;y_min_lim&#xFF0C;&#x79EF;&#x5206;&#x4E0A;&#x9650;&#x4E3A;y_max_lim</span><br><span class="line">res, err = I.dblquad(lambda x, y : (1 - x ** 2 - y ** 2) ** 0.5, -1, 1, lambda x : -1 * f_y(x), f_y)</span><br><span class="line">print(&apos;res:&apos;, res * 1.5, &apos;err:&apos;, err)</span><br><span class="line"></span><br><span class="line"># I.tplquad(f, x_min_lim, x_max_lim, y_min_lim, y_max_lim, z_min_lim, z_max_lim) &#x8BA1;&#x7B97;&#x51FD;&#x6570;f&#x7684;&#x4E09;&#x91CD;&#x79EF;&#x5206;&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x8BA1;&#x7B97;&#x4EA7;&#x751F;&#x7684;&#x8BEF;&#x5DEE;&#xFF0C;x&#x79EF;&#x5206;&#x4E0B;&#x9650;&#x4E3A;x_min_lim&#xFF0C;&#x79EF;&#x5206;&#x4E0A;&#x9650;&#x4E3A;x_max_lim&#xFF0C;y&#x79EF;&#x5206;&#x4E0B;&#x9650;&#x4E3A;y_min_lim&#xFF0C;&#x79EF;&#x5206;&#x4E0A;&#x9650;&#x4E3A;y_max_lim&#xFF0C;z&#x79EF;&#x5206;&#x4E0B;&#x9650;&#x4E3A;z_min_lim&#xFF0C;&#x79EF;&#x5206;&#x4E0A;&#x9650;&#x4E3A;z_max_lim</span><br></pre></td></tr></tbody></table></figure><p>$$\int_{-1}^{1} \int_{-\sqrt{1-x^2}}^{\sqrt{1-x^2}} \sqrt{1-x^2-y^2}\, dydx = \frac{2}{3}\pi$$<br><img src="/images/LIBRARY/scipy12.png" alt="12"></p><h2 id="Scipy&#x63D2;&#x503C;&#x6A21;&#x5757;"><a href="#Scipy&#x63D2;&#x503C;&#x6A21;&#x5757;" class="headerlink" title="Scipy&#x63D2;&#x503C;&#x6A21;&#x5757;"></a><font size="4">Scipy&#x63D2;&#x503C;&#x6A21;&#x5757;</font></h2><h3 id="interp1d&#xFF0C;interp2d&#x65B9;&#x6CD5;"><a href="#interp1d&#xFF0C;interp2d&#x65B9;&#x6CD5;" class="headerlink" title="interp1d&#xFF0C;interp2d&#x65B9;&#x6CD5;"></a><font size="3">interp1d&#xFF0C;interp2d&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from scipy import interpolate as IP</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">x = np.linspace(0, 2 * np.pi, 11)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">x_new = np.linspace(0, 2 * np.pi, 51)</span><br><span class="line"></span><br><span class="line"># IP.interp1d(x, y, kind) &#x5BF9;x&#xFF0C;y&#x8FDB;&#x884C;&#x4E00;&#x7EF4;&#x63D2;&#x503C;&#xFF0C;kind&#x4E3A;&#x63D2;&#x503C;&#x51FD;&#x6570;&#x7C7B;&#x578B;&#xFF0C;&#x53EF;&#x4EE5;&#x4E3A;&apos;nearest&apos;&#x6700;&#x8FD1;&#x90BB;&#x63D2;&#x503C;&#xFF0C;&apos;cubic&apos;&#x7ACB;&#x65B9;&#x63D2;&#x503C;&#x7B49;&#x7B49;</span><br><span class="line">f = IP.interp1d(x, y, kind=&apos;cubic&apos;)</span><br><span class="line">y_new = f(x_new)</span><br><span class="line"></span><br><span class="line">plt.subplot(121)</span><br><span class="line">plt.plot(x, y, label=&apos;origin&apos;)</span><br><span class="line">plt.subplot(122)</span><br><span class="line">plt.plot(x_new, y_new, label=&apos;new&apos;)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"># IP.interp2d(x, y, z, kind) &#x5BF9;x&#xFF0C;y&#xFF0C;z&#x8FDB;&#x884C;&#x4E8C;&#x7EF4;&#x63D2;&#x503C;&#xFF0C;kind&#x540C;interp2d</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/scipy13.png" alt="13"></p><h3 id="UnivariateSpline&#x65B9;&#x6CD5;"><a href="#UnivariateSpline&#x65B9;&#x6CD5;" class="headerlink" title="UnivariateSpline&#x65B9;&#x6CD5;"></a><font size="4">UnivariateSpline&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from scipy import interpolate as IP</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">x = np.linspace(0, 2 * np.pi, 11)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">x_new = np.linspace(-0.5 * np.pi, 2.5 * np.pi, 51)</span><br><span class="line"></span><br><span class="line"># IP.interp1d(x, y, w, k=3, s=None) &#x5BF9;x&#xFF0C;y&#x8FDB;&#x884C;&#x4E00;&#x7EF4;&#x63D2;&#x503C;&#xFF0C;w&#x4E3A;&#x6BCF;&#x4E2A;&#x6570;&#x636E;&#x7684;&#x6743;&#x503C;&#xFF0C;k&#x4E3A;&#x63D2;&#x503C;&#x7684;&#x9636;&#x6570;(&#x9ED8;&#x8BA4;&#x4E3A;3)&#xFF0C;s&#x4E3A;&#x66F2;&#x7EBF;&#x7684;&#x5E73;&#x6ED1;&#x7CFB;&#x6570;(&#x9ED8;&#x8BA4;&#x4E3A;None)&#xFF0C;&#x548C;interp1d&#x4E0D;&#x540C;&#x7684;&#x662F;&#xFF0C;&#x8BE5;&#x65B9;&#x6CD5;&#x652F;&#x6301;&#x5916;&#x63A8;&#x64CD;&#x4F5C;&#xFF0C;&#x5373;&#x53EF;&#x4EE5;&#x63D2;&#x503C;&#x8FB9;&#x7F18;&#x70B9;&#x4E4B;&#x5916;&#x7684;&#x90E8;&#x5206;&#x3002;</span><br><span class="line">y_new=ip.UnivariateSpline(x, y)(x_new)</span><br><span class="line">plt.subplot(121)</span><br><span class="line">plt.plot(x,y,label=&apos;origin&apos;)</span><br><span class="line">plt.subplot(122)</span><br><span class="line">plt.plot(x_new,y_new,label=&apos;new&apos;)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/scipy14.png" alt="14"></p><h2 id="Scipy&#x4FE1;&#x53F7;&#x5904;&#x7406;&#x6A21;&#x5757;"><a href="#Scipy&#x4FE1;&#x53F7;&#x5904;&#x7406;&#x6A21;&#x5757;" class="headerlink" title="Scipy&#x4FE1;&#x53F7;&#x5904;&#x7406;&#x6A21;&#x5757;"></a><font size="4">Scipy&#x4FE1;&#x53F7;&#x5904;&#x7406;&#x6A21;&#x5757;</font></h2><h3 id="medfilt&#x65B9;&#x6CD5;"><a href="#medfilt&#x65B9;&#x6CD5;" class="headerlink" title="medfilt&#x65B9;&#x6CD5;"></a><font size="3">medfilt&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from scipy import signal as SP</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">np.random.seed(1)</span><br><span class="line"></span><br><span class="line">x =np.random.randint(0, 9, (5, 5))</span><br><span class="line"></span><br><span class="line"># SP.medfilt(array, kernel_size) &#x5BF9;array&#x8FDB;&#x884C;&#x4E2D;&#x503C;&#x6EE4;&#x6CE2;&#xFF0C;&#x63A9;&#x6A21;&#x7684;&#x5927;&#x5C0F;&#x4E3A;kernel_size</span><br><span class="line">y = SP.medfilt(x, 3)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/scipy15.png" alt="15"></p><h3 id="order-filter&#x65B9;&#x6CD5;"><a href="#order-filter&#x65B9;&#x6CD5;" class="headerlink" title="order_filter&#x65B9;&#x6CD5;"></a><font size="3">order_filter&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from scipy import signal as SP</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">np.random.seed(1)</span><br><span class="line"></span><br><span class="line">x =np.random.randint(0, 9, (5, 5))</span><br><span class="line"></span><br><span class="line"># SP.order_filter(array, domain, rank) &#x5BF9;array&#x8FDB;&#x884C;&#x6A21;&#x677F;&#x4E3A;domain&#x7684;&#x6392;&#x5E8F;&#x6EE4;&#x6CE2;&#xFF0C;rank&#x4E3A;&#x7B2C;&#x51E0;&#x5C0F;&#x7684;&#x503C;&#xFF0C;rank=0&#x4EE3;&#x8868;&#x6700;&#x5C0F;&#x503C;&#x6EE4;&#x6CE2;&#xFF0C;rank=domain.size-1&#x4EE3;&#x8868;&#x6700;&#x5927;&#x503C;&#x6EE4;&#x6CE2;</span><br><span class="line">y_min = SP.order_filter(x, np.ones((5, 5)), 0)</span><br><span class="line">y_mid = SP.order_filter(x, np.ones((5, 5)), 12)</span><br><span class="line">y_max = SP.order_filter(x, np.ones((5, 5)), 24)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/scipy16.png" alt="16"></p><h3 id="iirdesign&#xFF0C;lfilter&#x65B9;&#x6CD5;"><a href="#iirdesign&#xFF0C;lfilter&#x65B9;&#x6CD5;" class="headerlink" title="iirdesign&#xFF0C;lfilter&#x65B9;&#x6CD5;"></a><font size="3">iirdesign&#xFF0C;lfilter&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">from scipy import signal as SP</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">fs = 100</span><br><span class="line">t = np.arange(0, 2, 1 / fs)</span><br><span class="line">y = np.sin(2 * np.pi * 2 * t) + np.sin(2 * np.pi * 4 * t) + np.sin(2 * np.pi * 6 * t)</span><br><span class="line"></span><br><span class="line"># SP.iirdesign([pass_low, pass_high], [stop_loss, stop_high], gp, gs) &#x8BBE;&#x8BA1;IIR&#x6EE4;&#x6CE2;&#x5668;&#xFF0C;&#x901A;&#x5E26;&#x9891;&#x7387;&#x4E3A;[pass_low &#xD7; f0, pass_high &#xD7; f0]&#xFF0C;&#x963B;&#x5E26;&#x9891;&#x7387;&#x4E3A;[0, stop_loss &#xD7; f0] &#x222A; [stop_high &#xD7; f0, &#x221E;]&#xFF0C;&#x5176;&#x4E2D;f0&#x4E3A;&#x91C7;&#x6837;&#x9891;&#x7387;&#x7684;&#x4E00;&#x534A;&#xFF0C;gp&#x4E3A;&#x901A;&#x5E26;&#x7684;&#x6700;&#x5927;&#x589E;&#x76CA;&#x8870;&#x51CF;&#xFF0C;gs&#x4E3A;&#x963B;&#x5E26;&#x7684;&#x6700;&#x5C0F;&#x589E;&#x76CA;&#x8870;&#x51CF;&#xFF0C;&#x8FD4;&#x56DE;&#x503C;&#x4E3A;&#x6EE4;&#x6CE2;&#x5668;&#x5206;&#x5B50;&#x548C;&#x5206;&#x6BCD;&#x7684;&#x7CFB;&#x6570;</span><br><span class="line">b_1, a_1 = SP.iirdesign([0.05, 0.2], [0.01, 0.5], 2, 40)</span><br><span class="line">b_2, a_2 = SP.iirdesign([0.1, 0.2], [0.01, 0.5], 2, 40)</span><br><span class="line"></span><br><span class="line"># SP.lfilter(b, a, x) &#x8BA1;&#x7B97;x&#x7ECF;&#x8FC7;b&#xFF0C;a&#x6EE4;&#x6CE2;&#x5668;&#x7684;&#x7ED3;&#x679C;</span><br><span class="line">out_1 = SP.lfilter(b_1, a_1, y)</span><br><span class="line">out_2 = SP.lfilter(b_2, a_2, y)</span><br><span class="line"></span><br><span class="line">plt.subplot(321)</span><br><span class="line">plt.plot(t, y, label=&apos;origin&apos;)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(322)</span><br><span class="line">plt.plot(np.abs(np.fft.fft(y)), label=&apos;origin fft&apos;)</span><br><span class="line">plt.xlim((0, fs / 2))</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(323)</span><br><span class="line">plt.plot(t, out_1, label=&apos;out_1&apos;)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(324)</span><br><span class="line">plt.plot(np.abs(np.fft.fft(out_1)), label=&apos;out_1 fft&apos;)</span><br><span class="line">plt.xlim((0, fs / 2))</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(325)</span><br><span class="line">plt.plot(t, out_2, label=&apos;out_2&apos;)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(326)</span><br><span class="line">plt.plot(np.abs(np.fft.fft(out_2)), label=&apos;out_2 fft&apos;)</span><br><span class="line">plt.xlim((0, fs / 2))</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/scipy17.png" alt="17"></p><h2 id="Scipy&#x56FE;&#x50CF;&#x5904;&#x7406;&#x6A21;&#x5757;"><a href="#Scipy&#x56FE;&#x50CF;&#x5904;&#x7406;&#x6A21;&#x5757;" class="headerlink" title="Scipy&#x56FE;&#x50CF;&#x5904;&#x7406;&#x6A21;&#x5757;"></a><font size="4">Scipy&#x56FE;&#x50CF;&#x5904;&#x7406;&#x6A21;&#x5757;</font></h2><p>&#x2003;&#x2003;<font size="4">Scipy.ndimage &#x662F;&#x4E00;&#x4E2A;&#x5904;&#x7406;&#x591A;&#x7EF4;&#x56FE;&#x50CF;&#x7684;&#x51FD;&#x6570;&#x5E93;&#xFF0C;&#x5176;&#x4E2D;&#x53C8;&#x5305;&#x62EC;&#x4EE5;&#x4E0B;&#x6A21;&#x5757;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">filters &#x56FE;&#x50CF;&#x6EE4;&#x6CE2;&#x5668;&#x51FD;&#x6570;&#x5E93;</font><br>&#x2003;&#x2003;<font size="3">fourier &#x5085;&#x91CC;&#x53F6;&#x53D8;&#x6362;&#x51FD;&#x6570;&#x5E93;</font><br>&#x2003;&#x2003;<font size="3">interpolation &#x56FE;&#x50CF;&#x53D8;&#x6362;&#x51FD;&#x6570;&#x5E93;</font><br>&#x2003;&#x2003;<font size="3">morphology &#x5F62;&#x6001;&#x5B66;&#x64CD;&#x4F5C;&#x51FD;&#x6570;&#x5E93;</font></p><p>&#x2003;&#x2003;<font size="4">&#x56FE;&#x50CF;&#x5904;&#x7406;&#x6709;&#x8BB8;&#x591A;&#x66F4;&#x5F3A;&#x5927;&#x7684;&#x5E93;&#xFF0C;&#x5982;opencv&#xFF0C;scikit-image&#x5E93;&#xFF0C;&#x5728;&#x6B64;&#x4E0D;&#x505A;&#x8FC7;&#x591A;&#x4ECB;&#x7ECD;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x8003;opencv&#x3002;</font></p><h1 id="Scipy&#x5C0F;&#x7ED3;"><a href="#Scipy&#x5C0F;&#x7ED3;" class="headerlink" title="Scipy&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Scipy&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x901A;&#x8FC7;Scipy&#xFF0C;&#x4F7F;&#x7528;&#x8005;&#x53EF;&#x4EE5;&#x4EC5;&#x9700;&#x8981;&#x51E0;&#x884C;&#x4EE3;&#x7801;&#xFF0C;&#x4FBF;&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x4E00;&#x7CFB;&#x5217;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x3002;&#x5728;&#x6570;&#x636E;&#x5206;&#x6790;&#xFF0C;&#x5B9E;&#x9645;&#x9879;&#x76EE;&#x4E2D;&#xFF0C;&#x5E38;&#x5E38;&#x9700;&#x8981;&#x5BF9;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x63D2;&#x503C;&#x3001;&#x62DF;&#x5408;&#x3001;&#x4F18;&#x5316;&#xFF0C;&#x9700;&#x8981;&#x501F;&#x52A9;Scipy&#x79D1;&#x5B66;&#x8BA1;&#x7B97;&#x5E93;&#x7684;&#x5E2E;&#x52A9;&#xFF0C;&#x56E0;&#x6B64;Scipy&#x662F;&#x5DE5;&#x7A0B;&#x7814;&#x7A76;&#x4E2D;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x7684;&#x5E2E;&#x624B;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Scipy&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="python" scheme="https://USTCcoder.github.io/categories/python/"/>
    
      <category term="常用库" scheme="https://USTCcoder.github.io/categories/python/%E5%B8%B8%E7%94%A8%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Matplotlib</title>
    <link href="https://USTCcoder.github.io/2019/08/15/library%20matplotlib/"/>
    <id>https://USTCcoder.github.io/2019/08/15/library matplotlib/</id>
    <published>2019-08-15T13:59:32.000Z</published>
    <updated>2019-08-19T03:29:51.854Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/LIBRARY/matplotlib.jpg" alt="0"></p><h1 id="Matplotlib&#x4ECB;&#x7ECD;"><a href="#Matplotlib&#x4ECB;&#x7ECD;" class="headerlink" title="Matplotlib&#x4ECB;&#x7ECD;"></a><font size="5" color="red">Matplotlib&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;Matplotlib&#x662F;python&#x7ED8;&#x56FE;&#x9886;&#x57DF;&#x4F7F;&#x7528;&#x6700;&#x5E7F;&#x6CDB;&#x7684;&#x5E93;&#x3002;&#x5B83;&#x80FD;&#x8BA9;&#x4F7F;&#x7528;&#x8005;&#x5F88;&#x8F7B;&#x677E;&#x5730;&#x5C06;&#x6570;&#x636E;&#x56FE;&#x5F62;&#x5316;&#xFF0C;&#x5E76;&#x4E14;&#x63D0;&#x4F9B;&#x591A;&#x6837;&#x5316;&#x7684;&#x8F93;&#x51FA;&#x683C;&#x5F0F;&#x3002;<br><a id="more"></a></p><h1 id="Matplotlib&#x7279;&#x70B9;"><a href="#Matplotlib&#x7279;&#x70B9;" class="headerlink" title="Matplotlib&#x7279;&#x70B9;"></a><font size="5" color="red">Matplotlib&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">Matplotlib&#x652F;&#x6301;LaTeX &#x7684;&#x516C;&#x5F0F;&#x63D2;&#x5165;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">Matplotlib&#x652F;&#x6301;&#x4EA4;&#x4E92;&#x5F0F;&#x548C;&#x975E;&#x4EA4;&#x4E92;&#x5F0F;&#x7ED8;&#x56FE;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">Matplotlib&#x53EF;&#x5C06;&#x56FE;&#x50CF;&#x4FDD;&#x5B58;&#x6210;PNG&#x7B49;&#x591A;&#x79CD;&#x5F62;&#x5F0F;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">Matplotlib&#x652F;&#x6301;&#x66F2;&#x7EBF;(&#x6298;&#x7EBF;)&#x56FE;&#x3001;&#x6761;&#x5F62;&#x56FE;&#x3001;&#x67F1;&#x72B6;&#x56FE;&#x3001;&#x997C;&#x56FE;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">Matplotlib&#x7C7B;&#x4F3C;&#x4E8E;MATLAB&#x7684;&#x7ED8;&#x56FE;&#x51FD;&#x6570;&#xFF0C;&#x4E0A;&#x624B;&#x8F83;&#x4E3A;&#x7B80;&#x5355;&#x3002;</font></p><h1 id="Matplotlib&#x5E94;&#x7528;"><a href="#Matplotlib&#x5E94;&#x7528;" class="headerlink" title="Matplotlib&#x5E94;&#x7528;"></a><font size="5" color="red">Matplotlib&#x5E94;&#x7528;</font></h1><h2 id="Matplotlib&#x7ED8;&#x5236;&#x4E8C;&#x7EF4;&#x76F4;&#x7EBF;"><a href="#Matplotlib&#x7ED8;&#x5236;&#x4E8C;&#x7EF4;&#x76F4;&#x7EBF;" class="headerlink" title="Matplotlib&#x7ED8;&#x5236;&#x4E8C;&#x7EF4;&#x76F4;&#x7EBF;"></a><font size="4">Matplotlib&#x7ED8;&#x5236;&#x4E8C;&#x7EF4;&#x76F4;&#x7EBF;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x = np.linspace(-1, 1, 21)</span><br><span class="line">y = np.power(x, 2) - 0.5</span><br><span class="line"></span><br><span class="line"># plt.plot(x, y, color, linewidth, linestyle, label, alpha, marker=None) &#x753B;&#x51FA;x-y&#x4E8C;&#x7EF4;&#x56FE;&#x5F62;&#xFF0C;color&#x6307;&#x989C;&#x8272;&#xFF0C;linewidth&#x6307;&#x7EBF;&#x5BBD;&#xFF0C;linestyle&#x6307;&#x7EBF;&#x7684;&#x5F62;&#x5F0F;&#xFF0C;label&#x6307;&#x56FE;&#x5F62;&#x7684;&#x6807;&#x7B7E;&#xFF0C;alpha&#x6307;&#x900F;&#x660E;&#x5EA6;&#xFF0C;marker&#x6307;&#x8BE5;&#x70B9;&#x7684;&#x5F62;&#x72B6;</span><br><span class="line">plt.plot(x, y, color=&apos;red&apos;, linewidth=0.5, alpha=0.8)</span><br><span class="line"></span><br><span class="line"># plt.show() &#x663E;&#x793A;&#x6240;&#x753B;&#x7684;&#x56FE;&#x5F62;</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib1.png" alt="1"></p><h2 id="matplotlib&#x4FEE;&#x9970;&#x56FE;&#x5F62;"><a href="#matplotlib&#x4FEE;&#x9970;&#x56FE;&#x5F62;" class="headerlink" title="matplotlib&#x4FEE;&#x9970;&#x56FE;&#x5F62;"></a><font size="4">matplotlib&#x4FEE;&#x9970;&#x56FE;&#x5F62;</font></h2><h3 id="style-use&#x65B9;&#x6CD5;"><a href="#style-use&#x65B9;&#x6CD5;" class="headerlink" title="style.use&#x65B9;&#x6CD5;"></a><font size="3">style.use&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># plt.style.use(option) &#x8BBE;&#x7F6E;&#x7A97;&#x53E3;&#x98CE;&#x683C;&#xFF0C;option&#x53EF;&#x9009;&apos;dark_background&apos;&#xFF0C;&apos;bmh&apos;&#xFF0C;&apos;grayscale&apos;&#xFF0C;&apos;ggplot&apos;&#xFF0C;&apos;fivethirtyeight&apos;</span><br><span class="line">plt.style.use(&apos;ggplot&apos;)</span><br><span class="line"></span><br><span class="line">x = np.linspace(-1, 1, 21)</span><br><span class="line">y = np.power(x, 2) - 0.5</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib24.png" alt="24"></p><h3 id="grid&#x65B9;&#x6CD5;"><a href="#grid&#x65B9;&#x6CD5;" class="headerlink" title="grid&#x65B9;&#x6CD5;"></a><font size="3">grid&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x = np.linspace(-1, 1, 21)</span><br><span class="line">y = np.power(x, 2) - 0.5</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line"># plt.grid(b=True, color, linewidth, linestyle) &#x8BBE;&#x7F6E;&#x5750;&#x6807;&#x7CFB;&#x7F51;&#x683C;&#xFF0C;b=True&#x8868;&#x793A;&#x663E;&#x793A;&#x7F51;&#x683C;(&#x9ED8;&#x8BA4;&#x4E3A;True)&#xFF0C;False&#x8868;&#x793A;&#x5173;&#x95ED;&#x7F51;&#x683C;&#xFF0C;color&#x6307;&#x7F51;&#x683C;&#x7684;&#x989C;&#x8272;&#xFF0C;linewidth&#x6307;&#x7F51;&#x683C;&#x7684;&#x5BBD;&#x5EA6;&#xFF0C;linestyle&#x6307;&#x7F51;&#x683C;&#x7684;&#x7C7B;&#x578B;</span><br><span class="line">plt.grid()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib20.png" alt="20"></p><h3 id="grid&#x65B9;&#x6CD5;-1"><a href="#grid&#x65B9;&#x6CD5;-1" class="headerlink" title="grid&#x65B9;&#x6CD5;"></a><font size="3">grid&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x = np.linspace(-1, 1, 21)</span><br><span class="line">y = np.power(x, 2) - 0.5</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line"># plt.grid(b=True, color, linewidth, linestyle) &#x8BBE;&#x7F6E;&#x5750;&#x6807;&#x7CFB;&#x7F51;&#x683C;&#xFF0C;b=True&#x8868;&#x793A;&#x663E;&#x793A;&#x7F51;&#x683C;(&#x9ED8;&#x8BA4;&#x4E3A;True)&#xFF0C;False&#x8868;&#x793A;&#x5173;&#x95ED;&#x7F51;&#x683C;&#xFF0C;color&#x6307;&#x7F51;&#x683C;&#x7684;&#x989C;&#x8272;&#xFF0C;linewidth&#x6307;&#x7F51;&#x683C;&#x7684;&#x5BBD;&#x5EA6;&#xFF0C;linestyle&#x6307;&#x7F51;&#x683C;&#x7684;&#x7C7B;&#x578B;</span><br><span class="line">plt.grid()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib20.png" alt="20"></p><h3 id="axis&#x65B9;&#x6CD5;"><a href="#axis&#x65B9;&#x6CD5;" class="headerlink" title="axis&#x65B9;&#x6CD5;"></a><font size="3">axis&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x = np.linspace(-3, 3, 31)</span><br><span class="line">y = x ** 2</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line"># plt.axis(b) &#x8BBE;&#x7F6E;&#x5750;&#x6807;&#x7CFB;&#x7F51;&#x683C;&#xFF0C;b=&apos;on&apos;&#x8868;&#x793A;&#x663E;&#x793A;&#x5750;&#x6807;&#x8F74;(&#x9ED8;&#x8BA4;&#x4E3A;&apos;on&apos;)&#xFF0C;&apos;off&apos;&#x8868;&#x793A;&#x5173;&#x95ED;&#x5750;&#x6807;&#x8F74;&#xFF0C;&apos;equal&apos;&#x6307;&#x5750;&#x6807;&#x8F74;&#x6BD4;&#x4F8B;&#x76F8;&#x540C;&#xFF0C;&apos;auto&apos;&#x81EA;&#x52A8;&#x8C03;&#x6574;&#x5750;&#x6807;&#x8F74;&#x6BD4;&#x4F8B;</span><br><span class="line">plt.axis(&apos;equal&apos;)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib21.png" alt="21"></p><h3 id="subplot&#x65B9;&#x6CD5;"><a href="#subplot&#x65B9;&#x6CD5;" class="headerlink" title="subplot&#x65B9;&#x6CD5;"></a><font size="3">subplot&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x = np.linspace(-3, 3, 31)</span><br><span class="line">y_1 = x</span><br><span class="line">y_2 = x ** 2</span><br><span class="line">y_3 = np.exp(x)</span><br><span class="line">y_4 = np.log(x)</span><br><span class="line"></span><br><span class="line"># plt.subplot(r, c, n) &#x5C06;&#x4E00;&#x4E2A;&#x7A97;&#x53E3;&#x5206;&#x6210;r&#x884C;c&#x5217;&#xFF0C;&#x5F53;&#x524D;&#x5B50;&#x7A97;&#x53E3;&#x5904;&#x4E8E;&#x7B2C;n&#x4E2A;</span><br><span class="line">plt.subplot(2,2,1)</span><br><span class="line">plt.plot(x, y_1, label=&apos;$x$&apos;)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(2,2,2)</span><br><span class="line">plt.plot(x, y_2, label=&apos;$x^2$&apos;)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(2,2,3)</span><br><span class="line">plt.plot(x, y_3, label=&apos;$e^x$&apos;)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(2,2,4)</span><br><span class="line">plt.plot(x, y_4, label=&apos;$log(x)$&apos;)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib22.png" alt="22"></p><h3 id="subplot2grid&#x65B9;&#x6CD5;"><a href="#subplot2grid&#x65B9;&#x6CD5;" class="headerlink" title="subplot2grid&#x65B9;&#x6CD5;"></a><font size="3">subplot2grid&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x = np.linspace(-3, 3, 31)</span><br><span class="line">y_1 = x</span><br><span class="line">y_2 = x ** 2</span><br><span class="line">y_3 = np.exp(x)</span><br><span class="line">y_4 = np.log(x)</span><br><span class="line"></span><br><span class="line"># plt.subplot2grid((r, c), (begin, end), colspan=1, rowspan=1) &#x5C06;&#x4E00;&#x4E2A;&#x7A97;&#x53E3;&#x5206;&#x6210;r&#x884C;c&#x5217;&#xFF0C;&#x5F53;&#x524D;&#x7A97;&#x53E3;&#x7684;&#x4F4D;&#x7F6E;&#x5728;(begin, end)&#xFF0C;&#x6A2A;&#x8DE8;m&#x4E2A;&#x5355;&#x4F4D;(&#x9ED8;&#x8BA4;&#x4E3A;1&#x4E2A;&#x5355;&#x4F4D;)&#xFF0C;&#x7EB5;&#x8DE8;n&#x4E2A;&#x5355;&#x4F4D;(&#x9ED8;&#x8BA4;&#x4E3A;1&#x4E2A;&#x5355;&#x4F4D;)</span><br><span class="line">plt.subplot2grid((3, 2),(0, 0), colspan=2, rowspan=1)</span><br><span class="line">plt.plot(x, y_1, label=&apos;$x$&apos;)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot2grid((3, 2), (1, 0))</span><br><span class="line">plt.plot(x, y_2, label=&apos;$x^2$&apos;)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot2grid((3, 2), (1, 1))</span><br><span class="line">plt.plot(x, y_3, label=&apos;$e^x$&apos;)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot2grid((3, 2), (2, 0), colspan=2, rowspan=1)</span><br><span class="line">plt.plot(x, y_4, label=&apos;$log(x)$&apos;)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib23.png" alt="23"></p><h3 id="xlim&#xFF0C;ylim&#x65B9;&#x6CD5;"><a href="#xlim&#xFF0C;ylim&#x65B9;&#x6CD5;" class="headerlink" title="xlim&#xFF0C;ylim&#x65B9;&#x6CD5;"></a><font size="3">xlim&#xFF0C;ylim&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x = np.linspace(-1, 1, 21)</span><br><span class="line">y = np.power(x, 2) - 0.5</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line"># plt.xlim((x_min, x_max))&#xFF0C;plt.ylim((y_min, y_max)) &#x9650;&#x5236;x&#xFF0C;y&#x5750;&#x6807;&#x8F74;&#x7684;&#x8303;&#x56F4;</span><br><span class="line">plt.xlim((-1.5, 1.5))</span><br><span class="line">plt.ylim((-1, 1))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib3.png" alt="3"></p><h3 id="xlabel&#xFF0C;ylabel&#x65B9;&#x6CD5;"><a href="#xlabel&#xFF0C;ylabel&#x65B9;&#x6CD5;" class="headerlink" title="xlabel&#xFF0C;ylabel&#x65B9;&#x6CD5;"></a><font size="3">xlabel&#xFF0C;ylabel&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x = np.linspace(-1, 1, 21)</span><br><span class="line">y = np.power(x, 2) - 0.5</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line"># plt.xlabel(x_describe)&#xFF0C;plt.ylabel(y_describe) &#x8BBE;&#x7F6E;x&#xFF0C;y&#x7684;&#x5750;&#x6807;&#x8F74;&#x6807;&#x7B7E;</span><br><span class="line">plt.xlabel(&apos;x&apos;)</span><br><span class="line">plt.ylabel(&apos;x^2-0.5&apos;)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib4.png" alt="4"></p><h3 id="xticks&#xFF0C;yticks&#x65B9;&#x6CD5;"><a href="#xticks&#xFF0C;yticks&#x65B9;&#x6CD5;" class="headerlink" title="xticks&#xFF0C;yticks&#x65B9;&#x6CD5;"></a><font size="3">xticks&#xFF0C;yticks&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">np.random.seed(2)</span><br><span class="line"></span><br><span class="line">x = np.arange(1,13)</span><br><span class="line">y = np.random.randint(50, 100, 12)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line"># plt.xticks(list_x)&#xFF0C;plt.yticks(list_y) &#x8BBE;&#x7F6E;x&#xFF0C;y&#x7684;&#x89D2;&#x6807;&#xFF0C;&#x652F;&#x6301;latex&#x683C;&#x5F0F;&#x3002;</span><br><span class="line">plt.xticks(x)</span><br><span class="line">plt.yticks([60, 80, 90, 100], [r&apos;$bad$&apos;, r&apos;$good$&apos;, r&apos;$nice$&apos;, r&apos;$excellent$&apos;])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib5.png" alt="5"></p><h3 id="gca&#x65B9;&#x6CD5;"><a href="#gca&#x65B9;&#x6CD5;" class="headerlink" title="gca&#x65B9;&#x6CD5;"></a><font size="3">gca&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x = np.linspace(-1, 1, 21)</span><br><span class="line">y = np.power(x, 2) - 0.5</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line"># plt.gca &#x83B7;&#x53D6;&#x5750;&#x6807;&#x810A;</span><br><span class="line">ax = plt.gca()</span><br><span class="line"></span><br><span class="line"># &#x5C06;&#x4E0A;&#x65B9;&#x548C;&#x53F3;&#x4FA7;&#x7684;&#x5750;&#x6807;&#x8F74;&#x5220;&#x9664;</span><br><span class="line">ax.spines[&apos;right&apos;].set_color(&apos;none&apos;)</span><br><span class="line">ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)</span><br><span class="line"></span><br><span class="line"># &#x8BBE;&#x7F6E;x&#xFF0C;y&#x8F74;&#x4E3A;&#x4E0B;&#x65B9;&#x548C;&#x5DE6;&#x4FA7;&#x7684;&#x810A;</span><br><span class="line">ax.xaxis.set_ticks_position(&apos;bottom&apos;)</span><br><span class="line">ax.yaxis.set_ticks_position(&apos;left&apos;)</span><br><span class="line"></span><br><span class="line"># &#x8BBE;&#x7F6E;&#x5750;&#x6807;&#x8F74;&#x539F;&#x70B9;&#x4E3A;(-0.1, -0.2)</span><br><span class="line">ax.spines[&apos;bottom&apos;].set_position((&apos;data&apos;, -0.2))</span><br><span class="line">ax.spines[&apos;left&apos;].set_position((&apos;data&apos;, -0.1))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib6.png" alt="6"></p><h3 id="legend&#x65B9;&#x6CD5;"><a href="#legend&#x65B9;&#x6CD5;" class="headerlink" title="legend&#x65B9;&#x6CD5;"></a><font size="3">legend&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x = np.linspace(-1, 1, 21)</span><br><span class="line">y = np.power(x, 2) + 1</span><br><span class="line">z = np.exp(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.plot(x, z)</span><br><span class="line"></span><br><span class="line"># plt.legend(handles, labels, loc=&apos;best&apos;) &#x8BBE;&#x7F6E;&#x56FE;&#x4F8B;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;handles&#x548C;labels&#x4E2D;&#x5199;&#x5165;&#x591A;&#x4E2A;&#xFF0C;handle&#x7701;&#x7565;&#x5219;&#x6309;&#x7167;&#x56FE;&#x5F62;&#x7684;&#x4EA7;&#x751F;&#x987A;&#x5E8F;&#x8BBE;&#x7F6E;&#x56FE;&#x4F8B;&#xFF0C;loc=&apos;best&apos;&#x6307;&#x9ED8;&#x8BA4;&#x653E;&#x5728;&#x7A7A;&#x767D;&#x6700;&#x597D;&#x7684;&#x4F4D;&#x7F6E;</span><br><span class="line">plt.legend(labels=[r&apos;$x^2+1$&apos;, r&apos;$e^x$&apos;])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib7.png" alt="7"></p><h3 id="annotate&#x65B9;&#x6CD5;"><a href="#annotate&#x65B9;&#x6CD5;" class="headerlink" title="annotate&#x65B9;&#x6CD5;"></a><font size="3">annotate&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x = np.linspace(-1, 1, 21)</span><br><span class="line">y = np.power(x, 2) - 0.5</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line"># plt.annotate(formulation, xy, xytext, fontsize, arrowprops) &#x5728;xy&#x9644;&#x8FD1;&#x6DFB;&#x52A0;&#x6CE8;&#x89E3;formulation&#xFF0C;xytext&#x4E3A;&#x6CE8;&#x89E3;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;fontsize&#x4E3A;&#x6CE8;&#x89E3;&#x7684;&#x5927;&#x5C0F;&#xFF0C;arrowprops&#x4E3A;&#x7BAD;&#x5934;&#x7C7B;&#x578B;</span><br><span class="line">plt.annotate(r&apos;$x^2-0.5$&apos;, (0, -0.5), xytext=(+0.25, 0), arrowprops=dict(arrowstyle=&apos;-&gt;&apos;, connectionstyle=&apos;arc3, rad=0.2&apos;))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib8.png" alt="8"></p><h3 id="text&#x65B9;&#x6CD5;"><a href="#text&#x65B9;&#x6CD5;" class="headerlink" title="text&#x65B9;&#x6CD5;"></a><font size="3">text&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x = np.linspace(-1, 1, 21)</span><br><span class="line">y = np.power(x, 2) - 0.5</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line"># plt.text(x, y, text, fontdict) &#x5728;(x&#xFF0C;y)&#x5904;&#x6DFB;&#x52A0;&#x6587;&#x672C;&#x6587;&#x5B57;text&#xFF0C;&#x6587;&#x5B57;&#x7684;&#x5927;&#x5C0F;&#x989C;&#x8272;&#x5728;fontdict&#x5B9A;&#x4E49;</span><br><span class="line">plt.text(0, -0.2, r&apos;$x^2-0.5$&apos;, fontdict={&apos;size&apos;:20, &apos;color&apos;:&apos;red&apos;})</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib9.png" alt="9"></p><h2 id="matplotlib&#x7ED8;&#x5236;&#x6563;&#x70B9;&#x56FE;"><a href="#matplotlib&#x7ED8;&#x5236;&#x6563;&#x70B9;&#x56FE;" class="headerlink" title="matplotlib&#x7ED8;&#x5236;&#x6563;&#x70B9;&#x56FE;"></a><font size="4">matplotlib&#x7ED8;&#x5236;&#x6563;&#x70B9;&#x56FE;</font></h2><h3 id="scatter&#x65B9;&#x6CD5;"><a href="#scatter&#x65B9;&#x6CD5;" class="headerlink" title="scatter&#x65B9;&#x6CD5;"></a><font size="3">scatter&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x = np.linspace(-1, 1, 21)</span><br><span class="line">y = np.power(x, 2) - 0.5</span><br><span class="line"></span><br><span class="line"># plt.scatter(x, y, color, s, label) &#x7ED8;&#x5236;x-y&#x6563;&#x70B9;&#x56FE;&#xFF0C;&#x989C;&#x8272;&#x4E3A;color&#xFF0C;&#x5927;&#x5C0F;&#x4E3A;s&#xFF0C;&#x6807;&#x7B7E;&#x4E3A;label</span><br><span class="line">plt.scatter(x, y, color=&apos;blue&apos;, s=3.0)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib10.png" alt="10"></p><h2 id="matplotlib&#x7ED8;&#x5236;&#x6761;&#x5F62;&#x56FE;"><a href="#matplotlib&#x7ED8;&#x5236;&#x6761;&#x5F62;&#x56FE;" class="headerlink" title="matplotlib&#x7ED8;&#x5236;&#x6761;&#x5F62;&#x56FE;"></a><font size="4">matplotlib&#x7ED8;&#x5236;&#x6761;&#x5F62;&#x56FE;</font></h2><h3 id="bar&#x65B9;&#x6CD5;"><a href="#bar&#x65B9;&#x6CD5;" class="headerlink" title="bar&#x65B9;&#x6CD5;"></a><font size="3">bar&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">np.random.seed(1)</span><br><span class="line"></span><br><span class="line">x = np.arange(10)</span><br><span class="line">y = np.random.rand(10)</span><br><span class="line"></span><br><span class="line"># plt.bar(x, y, facecolor, edgecolor) &#x7ED8;&#x5236;x-y&#x6761;&#x5F62;&#x56FE;&#xFF0C;facecolor&#x4E3A;&#x5185;&#x90E8;&#x989C;&#x8272;&#xFF0C;edgecolor&#x4E3A;&#x8FB9;&#x7F18;&#x989C;&#x8272;</span><br><span class="line">plt.bar(x, y)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib11.png" alt="11"></p><h2 id="matplotlib&#x7ED8;&#x5236;&#x7B49;&#x9AD8;&#x7EBF;&#x56FE;"><a href="#matplotlib&#x7ED8;&#x5236;&#x7B49;&#x9AD8;&#x7EBF;&#x56FE;" class="headerlink" title="matplotlib&#x7ED8;&#x5236;&#x7B49;&#x9AD8;&#x7EBF;&#x56FE;"></a><font size="4">matplotlib&#x7ED8;&#x5236;&#x7B49;&#x9AD8;&#x7EBF;&#x56FE;</font></h2><h3 id="contourf&#xFF0C;contour&#xFF0C;clabel&#x65B9;&#x6CD5;"><a href="#contourf&#xFF0C;contour&#xFF0C;clabel&#x65B9;&#x6CD5;" class="headerlink" title="contourf&#xFF0C;contour&#xFF0C;clabel&#x65B9;&#x6CD5;"></a><font size="3">contourf&#xFF0C;contour&#xFF0C;clabel&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x=np.linspace(-1,1,100)</span><br><span class="line">y=np.linspace(-1,1,100)</span><br><span class="line">x, y=np.meshgrid(x, y)</span><br><span class="line">z = np.power(x, 2) + np.power(y, 2)</span><br><span class="line"></span><br><span class="line"># plt.contourf(x, y, z, n, alpha, cmap) &#x7ED8;&#x5236;(x, y, z)&#x4E8C;&#x7EF4;&#x7B49;&#x9AD8;&#x7EBF;&#x56FE;&#xFF0C;n&#x6307;&#x7B49;&#x9AD8;&#x7EBF;&#x7684;&#x6761;&#x6570;&#xFF0C;alpha&#x4E3A;&#x900F;&#x660E;&#x5EA6;&#xFF0C;cmap=plt.hot()&#x7ED8;&#x5236;&#x70ED;&#x56FE;&#xFF0C;cmap=plt.cool()&#x7ED8;&#x5236;&#x51B7;&#x56FE;</span><br><span class="line">plt.contourf(x, y, z, 8, alpha=0.5, cmap=plt.hot())</span><br><span class="line"></span><br><span class="line"># plt.contour(x, y, z, n, colors) &#x7ED8;&#x5236;(x, y, z)&#x4E8C;&#x7EF4;&#x7B49;&#x9AD8;&#x7EBF;</span><br><span class="line">contour=plt.contour(x, y, z, 8, colors=&apos;black&apos;)</span><br><span class="line"></span><br><span class="line"># plt.clabel(contour, inline=True, fontsize) #&#x5728;&#x7B49;&#x9AD8;&#x7EBF;contour&#x4E2D;&#x6DFB;&#x52A0;&#x6570;&#x5B57;</span><br><span class="line">plt.clabel(contour)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib12.png" alt="12"></p><h2 id="matplotlib&#x7ED8;&#x5236;&#x76F4;&#x65B9;&#x56FE;"><a href="#matplotlib&#x7ED8;&#x5236;&#x76F4;&#x65B9;&#x56FE;" class="headerlink" title="matplotlib&#x7ED8;&#x5236;&#x76F4;&#x65B9;&#x56FE;"></a><font size="4">matplotlib&#x7ED8;&#x5236;&#x76F4;&#x65B9;&#x56FE;</font></h2><h3 id="hist&#x65B9;&#x6CD5;"><a href="#hist&#x65B9;&#x6CD5;" class="headerlink" title="hist&#x65B9;&#x6CD5;"></a><font size="3">hist&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">np.random.seed(1)</span><br><span class="line"></span><br><span class="line">x = np.random.randn(10000)</span><br><span class="line"></span><br><span class="line"># plt.hist(x, bins, color, normed=False) &#x5C06;x&#x7ED8;&#x5236;&#x76F4;&#x65B9;&#x56FE;&#xFF0C;bins&#x4E3A;&#x76F4;&#x65B9;&#x56FE;&#x5206;&#x7EC4;&#x7684;&#x4E2A;&#x6570;&#xFF0C;color&#x4E3A;&#x76F4;&#x65B9;&#x56FE;&#x7684;&#x989C;&#x8272;&#xFF0C;normed&#x4E3A;&#x662F;&#x5426;&#x6807;&#x51C6;&#x5316;</span><br><span class="line">plt.hist(x, 100)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib13.png" alt="13"></p><h2 id="matplotlib&#x7ED8;&#x5236;&#x997C;&#x72B6;&#x56FE;"><a href="#matplotlib&#x7ED8;&#x5236;&#x997C;&#x72B6;&#x56FE;" class="headerlink" title="matplotlib&#x7ED8;&#x5236;&#x997C;&#x72B6;&#x56FE;"></a><font size="4">matplotlib&#x7ED8;&#x5236;&#x997C;&#x72B6;&#x56FE;</font></h2><h3 id="pie&#x65B9;&#x6CD5;"><a href="#pie&#x65B9;&#x6CD5;" class="headerlink" title="pie&#x65B9;&#x6CD5;"></a><font size="4">pie&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">x = [0.2236, 0.2664, 0.3218, 0.1882]</span><br><span class="line">label = [&apos;first quarter&apos;, &apos;second quarter&apos;, &apos;third quarter&apos;, &apos;fourth quarter&apos;]</span><br><span class="line"></span><br><span class="line"># plt.pie(x, labels, autopct, explode, shadow=False) &#x5C06;x&#x7ED8;&#x5236;&#x997C;&#x72B6;&#x56FE;&#xFF0C;labels&#x4E3A;&#x6BCF;&#x4E2A;&#x90E8;&#x5206;&#x7684;&#x6807;&#x7B7E;&#xFF0C;autopct&#x4E3A;&#x767E;&#x5206;&#x6570;&#x7684;&#x683C;&#x5F0F;&#xFF0C;explode&#x6307;&#x662F;&#x5426;&#x7A81;&#x51FA;&#x663E;&#x793A;&#xFF0C;shadow&#x4E3A;&#x662F;&#x5426;&#x6DFB;&#x52A0;&#x9634;&#x5F71;</span><br><span class="line">plt.pie(x, labels=label, autopct=&apos;%.2f%%&apos;, explode=[0, 0, 0.1, 0], shadow=True)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib14.png" alt="14"></p><h2 id="matplotlib&#x586B;&#x5145;&#x56FE;&#x5F62;"><a href="#matplotlib&#x586B;&#x5145;&#x56FE;&#x5F62;" class="headerlink" title="matplotlib&#x586B;&#x5145;&#x56FE;&#x5F62;"></a><font size="4">matplotlib&#x586B;&#x5145;&#x56FE;&#x5F62;</font></h2><h3 id="fill&#xFF0C;fill-between&#x65B9;&#x6CD5;"><a href="#fill&#xFF0C;fill-between&#x65B9;&#x6CD5;" class="headerlink" title="fill&#xFF0C;fill_between&#x65B9;&#x6CD5;"></a><font size="3">fill&#xFF0C;fill_between&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x=np.linspace(0,4*np.pi,100)</span><br><span class="line">y_1 =np.sin(x)</span><br><span class="line">y_2 =np.sin(2 * x)</span><br><span class="line"></span><br><span class="line"># plt.fill(x, y, color, alpha, interpolate=False) &#x5BF9;x&#xFF0C;y&#x56FE;&#x5F62;&#x4E0E;x&#x8F74;&#x8FDB;&#x884C;&#x586B;&#x5145;&#xFF0C;&#x989C;&#x8272;&#x4E3A;color&#xFF0C;&#x900F;&#x660E;&#x5EA6;&#x4E3A;alpha&#xFF0C;interpolate&#x4E3A;&#x662F;&#x5426;&#x7CBE;&#x786E;&#x586B;&#x5145;</span><br><span class="line">plt.figure(1)</span><br><span class="line">plt.fill(x, y_1, color=&apos;r&apos;, alpha=0.5)</span><br><span class="line"></span><br><span class="line"># plt.fill_between(x, y_1, y_2, where, facecolor, interpolate=False) &#x5BF9;x&#xFF0C;y_1&#x56FE;&#x5F62;&#x4E0E;x&#xFF0C;y_2&#x56FE;&#x5F62;&#x8FDB;&#x884C;&#x586B;&#x5145;&#xFF0C;&#x586B;&#x5145;&#x65B9;&#x5F0F;&#x4E3A;where&#xFF0C;&#x989C;&#x8272;&#x4E3A;color&#xFF0C;&#x900F;&#x660E;&#x5EA6;&#x4E3A;alpha&#xFF0C;interpolate&#x4E3A;&#x662F;&#x5426;&#x7CBE;&#x786E;&#x586B;&#x5145;</span><br><span class="line">plt.figure(2)</span><br><span class="line">plt.plot(x, y_1)</span><br><span class="line">plt.plot(x, y_2)</span><br><span class="line">plt.fill_between(x, y_1, y_2, where=y_1 &gt; y_2, facecolor=&apos;red&apos;, interpolate=True)</span><br><span class="line">plt.fill_between(x, y_1, y_2, where=y_1 &lt; y_2, facecolor=&apos;blue&apos;, interpolate=True)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib15.png" alt="15"></p><h2 id="matplotlib&#x7ED8;&#x5236;&#x51E0;&#x4F55;&#x56FE;&#x5F62;"><a href="#matplotlib&#x7ED8;&#x5236;&#x51E0;&#x4F55;&#x56FE;&#x5F62;" class="headerlink" title="matplotlib&#x7ED8;&#x5236;&#x51E0;&#x4F55;&#x56FE;&#x5F62;"></a><font size="4">matplotlib&#x7ED8;&#x5236;&#x51E0;&#x4F55;&#x56FE;&#x5F62;</font></h2><h3 id="Cicle&#xFF0C;Rectangle&#xFF0C;Polygon&#xFF0C;Ellipse&#x65B9;&#x6CD5;"><a href="#Cicle&#xFF0C;Rectangle&#xFF0C;Polygon&#xFF0C;Ellipse&#x65B9;&#x6CD5;" class="headerlink" title="Cicle&#xFF0C;Rectangle&#xFF0C;Polygon&#xFF0C;Ellipse&#x65B9;&#x6CD5;"></a><font size="3">Cicle&#xFF0C;Rectangle&#xFF0C;Polygon&#xFF0C;Ellipse&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import matplotlib.patches as mpatches</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">fig, ax=plt.subplots()</span><br><span class="line"></span><br><span class="line">clc=[.2,.2]</span><br><span class="line">rec=[.2,.8]</span><br><span class="line">pol=np.array([0.7,0.1,0.8,0.3,0.9,0.3,0.6,0.5]).reshape(4,2)</span><br><span class="line">eli=[.8,.8]</span><br><span class="line"></span><br><span class="line"># mpatches.Circle(c, r, color) &#x4EA7;&#x751F;c&#x4E3A;&#x5706;&#x5FC3;&#xFF0C;r&#x4E3A;&#x534A;&#x5F84;&#xFF0C;&#x989C;&#x8272;&#x4E3A;color&#x7684;&#x5706;&#x5F62;</span><br><span class="line">cicle=mpatches.Circle(clc,0.1,color=&apos;blue&apos;)</span><br><span class="line">ax.add_patch(cicle)</span><br><span class="line"></span><br><span class="line"># mpatches.Rectangle(c, length, width, color) &#x4EA7;&#x751F;&#x5DE6;&#x4E0B;&#x89D2;&#x5750;&#x6807;&#x4E3A;c&#xFF0C;&#x957F;&#x4E3A;length&#xFF0C;&#x5BBD;&#x4E3A;width&#xFF0C;&#x989C;&#x8272;&#x4E3A;color&#x7684;&#x77E9;&#x5F62;</span><br><span class="line">rectangle=mpatches.Rectangle(rec,0.2,0.1,color=&apos;red&apos;)</span><br><span class="line">ax.add_patch(rectangle)</span><br><span class="line"></span><br><span class="line"># mpatches.Polygon(pol, color) &#x4EA7;&#x751F;&#x5404;&#x4E2A;&#x5B9A;&#x70B9;&#x4E3A;pol&#x7684;&#x591A;&#x8FB9;&#x5F62;</span><br><span class="line">polygon=mpatches.Polygon(pol,color=&apos;green&apos;)</span><br><span class="line">ax.add_patch(polygon)</span><br><span class="line"></span><br><span class="line"># mpatches.Ellipse(c, a, b,color) &#x4EA7;&#x751F;&#x5706;&#x5FC3;&#x4E3A;c&#xFF0C;&#x957F;&#x8F74;&#x4E3A;a&#xFF0C;&#x77ED;&#x8F74;&#x4E3A;b&#x7684;&#x692D;&#x5706;</span><br><span class="line">ellipse=mpatches.Ellipse(eli,0.4,0.2,color=&apos;yellow&apos;)</span><br><span class="line">ax.add_patch(ellipse)</span><br><span class="line"></span><br><span class="line">plt.axis(&apos;equal&apos;)</span><br><span class="line">plt.grid(True)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib16.png" alt="16"></p><h2 id="matplotlib&#x7ED8;&#x5236;&#x4E8C;&#x7EF4;&#x6570;&#x636E;"><a href="#matplotlib&#x7ED8;&#x5236;&#x4E8C;&#x7EF4;&#x6570;&#x636E;" class="headerlink" title="matplotlib&#x7ED8;&#x5236;&#x4E8C;&#x7EF4;&#x6570;&#x636E;"></a><font size="4">matplotlib&#x7ED8;&#x5236;&#x4E8C;&#x7EF4;&#x6570;&#x636E;</font></h2><h3 id="imshow&#xFF0C;colorbar&#x65B9;&#x6CD5;"><a href="#imshow&#xFF0C;colorbar&#x65B9;&#x6CD5;" class="headerlink" title="imshow&#xFF0C;colorbar&#x65B9;&#x6CD5;"></a><font size="3">imshow&#xFF0C;colorbar&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">np.random.seed(1)</span><br><span class="line"></span><br><span class="line">x = np.random.uniform(0, 255, (5,5))</span><br><span class="line">x</span><br><span class="line"># plt.imshow(array, interpolation=&apos;nearest&apos;, cmap=&apos;hot&apos;, origin=&apos;upper&apos;) &#x663E;&#x793A;&#x4E8C;&#x7EF4;&#x6570;&#x636E;&#xFF0C;interpolation&#x4E3A;&#x63D2;&#x503C;&#x65B9;&#x5F0F;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x6700;&#x8FD1;&#x90BB;&#xFF0C;cmap&#x4E3A;&#x989C;&#x8272;&#x663E;&#x793A;&#x65B9;&#x5F0F;(&#x9ED8;&#x8BA4;&#x4E3A;hot)&#xFF0C;&#x53EF;&#x4EE5;&#x4E3A;&apos;hot&apos;&#xFF0C;&apos;cool&apos;&#xFF0C;&apos;rainbow&apos;&#xFF0C;&apos;bone&apos;&#xFF0C;origin&#x4E3A;&#x56FE;&#x5F62;&#x7ED8;&#x5236;&#x7684;&#x65B9;&#x5411;&#xFF0C;upper&#x4ECE;&#x4E0A;&#x5230;&#x4E0B;&#xFF0C;lower&#x81EA;&#x4E0B;&#x800C;&#x4E0A;&#x3002;</span><br><span class="line">plt.imshow(x, cmap=&apos;bone&apos;)</span><br><span class="line"></span><br><span class="line"># plt.colorbar() &#x6DFB;&#x52A0;&#x989C;&#x8272;&#x68D2;</span><br><span class="line">plt.colorbar()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib17.png" alt="17"></p><h2 id="matplotlib&#x7ED8;&#x5236;3D&#x56FE;&#x5F62;"><a href="#matplotlib&#x7ED8;&#x5236;3D&#x56FE;&#x5F62;" class="headerlink" title="matplotlib&#x7ED8;&#x5236;3D&#x56FE;&#x5F62;"></a><font size="4">matplotlib&#x7ED8;&#x5236;3D&#x56FE;&#x5F62;</font></h2><h3 id="Axes3D&#xFF0C;plot-surface&#x65B9;&#x6CD5;"><a href="#Axes3D&#xFF0C;plot-surface&#x65B9;&#x6CD5;" class="headerlink" title="Axes3D&#xFF0C;plot_surface&#x65B9;&#x6CD5;"></a><font size="3">Axes3D&#xFF0C;plot_surface&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import mpl_toolkits.mplot3d as mp</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">x = np.arange(-4, 4, 0.25)</span><br><span class="line">y = np.arange(-4, 4, 0.25)</span><br><span class="line">x, y = np.meshgrid(x, y)</span><br><span class="line">z = np.sqrt(x**2 + y**2)</span><br><span class="line">z = np.sin(z)</span><br><span class="line"></span><br><span class="line"># mp.Axes3D(fig) &#x751F;&#x6210;3D&#x7A97;&#x53E3;</span><br><span class="line">ax = mp.Axes3D(fig)</span><br><span class="line"></span><br><span class="line"># obj.plot_surface(x, y, z, rstride=1, cstride=1, cmap=None) &#x753B;&#x51FA;3D&#x8868;&#x9762;&#x56FE;&#x5F62;&#xFF0C;rstride&#x4E3A;&#x884C;&#x8DE8;&#x5EA6;&#xFF0C;cstride&#x4E3A;&#x5217;&#x8DE8;&#x5EA6;&#xFF0C;cmap&#x4E3A;&#x989C;&#x8272;&#x663E;&#x793A;&#x65B9;&#x5F0F;&#x540C;plt.imshow</span><br><span class="line">ax.plot_surface(x, y, z, cmap=&apos;rainbow&apos;)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib18.png" alt="18"></p><h2 id="matplotlib&#x6781;&#x5750;&#x6807;&#x7CFB;"><a href="#matplotlib&#x6781;&#x5750;&#x6807;&#x7CFB;" class="headerlink" title="matplotlib&#x6781;&#x5750;&#x6807;&#x7CFB;"></a><font size="4">matplotlib&#x6781;&#x5750;&#x6807;&#x7CFB;</font></h2><h3 id="subplot&#x65B9;&#x6CD5;-1"><a href="#subplot&#x65B9;&#x6CD5;-1" class="headerlink" title="subplot&#x65B9;&#x6CD5;"></a><font size="3">subplot&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">theta = np.linspace(-np.pi, np.pi, 100)</span><br><span class="line">r = 0.5 * (1 + np.cos(theta))</span><br><span class="line"></span><br><span class="line"># plt.subplot(111, projection=&apos;polar&apos;) &#x7ED8;&#x5236;&#x6781;&#x5750;&#x6807;</span><br><span class="line">fig = plt.subplot(111, projection=&apos;polar&apos;)</span><br><span class="line"></span><br><span class="line">fig.plot(theta, r)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/matplotlib19.png" alt="19"></p><h1 id="Matplotlib&#x5C0F;&#x7ED3;"><a href="#Matplotlib&#x5C0F;&#x7ED3;" class="headerlink" title="Matplotlib&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Matplotlib&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x901A;&#x8FC7;Matplotlib&#xFF0C;&#x5F00;&#x53D1;&#x8005;&#x53EF;&#x4EE5;&#x4EC5;&#x9700;&#x8981;&#x51E0;&#x884C;&#x4EE3;&#x7801;&#xFF0C;&#x4FBF;&#x53EF;&#x4EE5;&#x751F;&#x6210;&#x7ED8;&#x56FE;&#x3002;&#x5728;&#x6570;&#x636E;&#x5206;&#x6790;&#xFF0C;&#x673A;&#x5668;&#x5B66;&#x4E60;&#xFF0C;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x4E2D;&#xFF0C;&#x8981;&#x5BF9;&#x5F53;&#x524D;&#x7684;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x5B9E;&#x65F6;&#x7684;&#x663E;&#x793A;&#x6216;&#x8005;&#x5BF9;&#x51C6;&#x786E;&#x7387;&#x6709;&#x76F4;&#x89C2;&#x7684;&#x5C55;&#x793A;&#xFF0C;&#x9700;&#x8981;&#x501F;&#x52A9;Matplotlib&#x7684;&#x5E2E;&#x52A9;&#xFF0C;&#x56E0;&#x6B64;Matplotlib&#x4E5F;&#x4F5C;&#x4E3A;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x4E09;&#x5251;&#x5BA2;&#x4E4B;&#x4E00;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Matplotlib&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="python" scheme="https://USTCcoder.github.io/categories/python/"/>
    
      <category term="常用库" scheme="https://USTCcoder.github.io/categories/python/%E5%B8%B8%E7%94%A8%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Pandas</title>
    <link href="https://USTCcoder.github.io/2019/08/13/library%20Pandas/"/>
    <id>https://USTCcoder.github.io/2019/08/13/library Pandas/</id>
    <published>2019-08-13T11:28:32.000Z</published>
    <updated>2019-08-16T08:52:45.270Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/LIBRARY/pandas.jpg" alt="0"></p><h1 id="Pandas&#x4ECB;&#x7ECD;"><a href="#Pandas&#x4ECB;&#x7ECD;" class="headerlink" title="Pandas&#x4ECB;&#x7ECD;"></a><font size="5" color="red">Pandas&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;pandas&#x662F;&#x57FA;&#x4E8E;Numpy&#x7684;&#x4E00;&#x79CD;&#x5DE5;&#x5177;&#xFF0C;&#x8BE5;&#x5DE5;&#x5177;&#x7EB3;&#x5165;&#x4E86;&#x5927;&#x91CF;&#x5E93;&#x548C;&#x4E00;&#x4E9B;&#x6807;&#x51C6;&#x7684;&#x6570;&#x636E;&#x6A21;&#x578B;&#xFF0C;&#x63D0;&#x4F9B;&#x4E86;&#x5927;&#x91CF;&#x80FD;&#x4F7F;&#x6211;&#x4EEC;&#x5FEB;&#x901F;&#x4FBF;&#x6377;&#x5730;&#x5904;&#x7406;&#x6570;&#x636E;&#x7684;&#x51FD;&#x6570;&#x548C;&#x65B9;&#x6CD5;&#x3002;<br><a id="more"></a></p><h1 id="Pandas&#x7279;&#x70B9;"><a href="#Pandas&#x7279;&#x70B9;" class="headerlink" title="Pandas&#x7279;&#x70B9;"></a><font size="5" color="red">Pandas&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">Pandas&#x89E3;&#x51B3;&#x4E86;Numpy&#x4E0D;&#x5229;&#x4E8E;&#x5904;&#x7406;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x7684;&#x95EE;&#x9898;</font><br>&#x2003;&#x2003;<font size="3">Pandas&#x80FD;&#x591F;&#x5408;&#x5E76;&#x5904;&#x7406;&#x5E38;&#x89C1;&#x6570;&#x636E;&#x5E93;&#x4E2D;&#x7684;&#x5173;&#x7CFB;&#x578B;&#x8FD0;&#x7B97;</font><br>&#x2003;&#x2003;<font size="3">Pandas&#x66F4;&#x8D34;&#x8FD1;&#x4E8E;&#x65E5;&#x5E38;&#x7684;&#x751F;&#x6D3B;&#x4F7F;&#x7528;&#xFF0C;&#x5373;&#x8868;&#x683C;&#x5316;&#x7684;&#x6570;&#x636E;&#x5F62;&#x5F0F;</font><br>&#x2003;&#x2003;<font size="3">Pandas&#x5177;&#x5907;&#x6570;&#x636E;&#x5BF9;&#x9F50;&#x529F;&#x80FD;&#xFF0C;&#x4E14;&#x96C6;&#x6210;&#x65F6;&#x95F4;&#x5E8F;&#x5217;&#xFF0C;&#x65E2;&#x80FD;&#x5904;&#x7406;&#x65F6;&#x95F4;&#x5E8F;&#x5217;&#x6570;&#x636E;&#xFF0C;&#x4E5F;&#x80FD;&#x5904;&#x7406;&#x975E;&#x65F6;&#x95F4;&#x5E8F;&#x5217;&#x6570;&#x636E;</font></p><h1 id="Pandas&#x5E94;&#x7528;"><a href="#Pandas&#x5E94;&#x7528;" class="headerlink" title="Pandas&#x5E94;&#x7528;"></a><font size="5" color="red">Pandas&#x5E94;&#x7528;</font></h1><h2 id="Pandas&#x521B;&#x5EFA;&#x8868;&#x683C;"><a href="#Pandas&#x521B;&#x5EFA;&#x8868;&#x683C;" class="headerlink" title="Pandas&#x521B;&#x5EFA;&#x8868;&#x683C;"></a><font size="4">Pandas&#x521B;&#x5EFA;&#x8868;&#x683C;</font></h2><h3 id="series&#x65B9;&#x6CD5;"><a href="#series&#x65B9;&#x6CD5;" class="headerlink" title="series&#x65B9;&#x6CD5;"></a><font size="3">series&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line"># pd.Series(list, index) &#x5C06;list&#x8F6C;&#x6362;&#x4E3A;&#x4E00;&#x7EF4;&#x8868;&#x683C;&#x578B;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;index&#x4E3A;&#x6807;&#x7B7E;&#x540D;&#x79F0;&#xFF0C;&#x9ED8;&#x8BA4;&#x4ECE;0&#x5F00;&#x59CB;0,1, ...</span><br><span class="line">a = pd.Series([1, &apos;hello&apos;, 3.1415, True])</span><br><span class="line">b = pd.Series([1, &apos;hello&apos;, 3.1415, True], index=[&apos;int&apos;, &apos;string&apos;, &apos;float&apos;, &apos;bool&apos;])</span><br><span class="line"></span><br><span class="line"># pd.Series(dict) &#x5C06;dict&#x8F6C;&#x6362;&#x4E3A;&#x4E00;&#x7EF4;&#x8868;&#x683C;&#x578B;&#x6570;&#x636E;&#x7ED3;&#x6784;</span><br><span class="line">c = pd.Series({&apos;int&apos;:1, &apos;string&apos;:&apos;hello&apos;, &apos;float&apos;:3.1415, &apos;bool&apos;:True})</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pandas1.png" alt="1"></p><h3 id="DataFrame&#x65B9;&#x6CD5;"><a href="#DataFrame&#x65B9;&#x6CD5;" class="headerlink" title="DataFrame&#x65B9;&#x6CD5;"></a><font size="3">DataFrame&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># pd.DataFrame(array, index, columns) &#x751F;&#x6210;&#x884C;&#x6807;&#x7B7E;&#x4E3A;index&#xFF0C;&#x5217;&#x6807;&#x7B7E;&#x4E3A;columns&#xFF0C;&#x6570;&#x636E;&#x4E3A;array&#x7684;&#x4E8C;&#x7EF4;&#x8868;&#x683C;&#x578B;&#x6570;&#x636E;&#x7ED3;&#x6784;</span><br><span class="line">a = pd.DataFrame(np.arange(12).reshape(3, 4), index=[&apos;row_0&apos;, &apos;row_1&apos;, &apos;row_2&apos;], columns=[&apos;columns_0&apos;, &apos;columns_1&apos;, &apos;columns_2&apos;, &apos;columns_3&apos;]) </span><br><span class="line"></span><br><span class="line"># pd.DataFrame(dict, index) &#x751F;&#x6210;&#x884C;&#x6807;&#x7B7E;&#x4E3A;index&#xFF0C;&#x6570;&#x636E;&#x4E3A;dict&#x7684;&#x4E8C;&#x7EF4;&#x8868;&#x683C;&#x578B;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;dict&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;key&#x662F;&#x6BCF;&#x4E00;&#x5217;&#x7684;&#x5217;&#x6807;&#x7B7E;&#xFF0C;value&#x662F;&#x6BCF;&#x4E00;&#x5217;&#x7684;&#x6570;&#x636E;</span><br><span class="line">b = pd.DataFrame({&apos;columns_0&apos;:[0, 4, 8], &apos;columns_1&apos;:[1, 5, 9], &apos;columns_2&apos;:[2, 6, 10], &apos;columns_3&apos;:[3, 7, 11]}, index=[&apos;row_0&apos;, &apos;row_1&apos;, &apos;row_2&apos;])</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pandas2.png" alt="2"></p><h2 id="Pandas&#x5C5E;&#x6027;"><a href="#Pandas&#x5C5E;&#x6027;" class="headerlink" title="Pandas&#x5C5E;&#x6027;"></a><font size="4">Pandas&#x5C5E;&#x6027;</font></h2><h3 id="dtypes&#xFF0C;index&#xFF0C;columns&#xFF0C;values&#x5C5E;&#x6027;"><a href="#dtypes&#xFF0C;index&#xFF0C;columns&#xFF0C;values&#x5C5E;&#x6027;" class="headerlink" title="dtypes&#xFF0C;index&#xFF0C;columns&#xFF0C;values&#x5C5E;&#x6027;"></a><font size="3">dtypes&#xFF0C;index&#xFF0C;columns&#xFF0C;values&#x5C5E;&#x6027;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">a = pd.DataFrame({&apos;col_0&apos;:[0, 4, 8], &apos;col_1&apos;:[2.71, 3.14, 5], &apos;col_2&apos;:[True, False, False]}, index=[&apos;row_0&apos;, &apos;row_1&apos;, &apos;row_2&apos;]) </span><br><span class="line"></span><br><span class="line"># obj.dtypes &#x67E5;&#x770B;&#x6BCF;&#x4E00;&#x5217;&#x7684;&#x6570;&#x636E;&#x5F62;&#x5F0F;</span><br><span class="line">a.dtypes</span><br><span class="line"></span><br><span class="line"># obj.index &#x67E5;&#x770B;&#x5217;&#x7684;&#x5E8F;&#x53F7;</span><br><span class="line">a.index</span><br><span class="line"></span><br><span class="line"># obj.columns &#x67E5;&#x770B;&#x884C;&#x7684;&#x5E8F;&#x53F7;</span><br><span class="line">a.columns</span><br><span class="line"></span><br><span class="line"># obj.values &#x67E5;&#x770B;&#x5217;&#x8868;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x5185;&#x5BB9;</span><br><span class="line">a.values</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pandas3.png" alt="3"></p><h3 id="describe&#xFF0C;head&#xFF0C;tail&#x5C5E;&#x6027;"><a href="#describe&#xFF0C;head&#xFF0C;tail&#x5C5E;&#x6027;" class="headerlink" title="describe&#xFF0C;head&#xFF0C;tail&#x5C5E;&#x6027;"></a><font size="3">describe&#xFF0C;head&#xFF0C;tail&#x5C5E;&#x6027;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">a = pd.DataFrame({&apos;col_0&apos;:[0, 4, 8], &apos;col_1&apos;:[2.71, 3.14, 5], &apos;col_2&apos;:[True, False, False]}, index=[&apos;row_0&apos;, &apos;row_1&apos;, &apos;row_2&apos;]) </span><br><span class="line"></span><br><span class="line"># obj.describe() &#x67E5;&#x770B;&#x5185;&#x5BB9;&#x7EDF;&#x8BA1;&#xFF0C;&#x53EA;&#x7EDF;&#x8BA1;&#x6570;&#x5B57;&#x5185;&#x5BB9;</span><br><span class="line">a.describe()</span><br><span class="line"></span><br><span class="line"># obj.head(n) &#x67E5;&#x770B;&#x524D;n&#x884C;</span><br><span class="line">a.head(2)</span><br><span class="line"></span><br><span class="line"># obj.tail(n) &#x67E5;&#x770B;&#x540E;n&#x884C;</span><br><span class="line">a.tail(2)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pandas4.png" alt="4"></p><h2 id="Pandas&#x8868;&#x683C;&#x6392;&#x5E8F;"><a href="#Pandas&#x8868;&#x683C;&#x6392;&#x5E8F;" class="headerlink" title="Pandas&#x8868;&#x683C;&#x6392;&#x5E8F;"></a><font size="4">Pandas&#x8868;&#x683C;&#x6392;&#x5E8F;</font></h2><h3 id="sort-index&#x65B9;&#x6CD5;"><a href="#sort-index&#x65B9;&#x6CD5;" class="headerlink" title="sort_index&#x65B9;&#x6CD5;"></a><font size="3">sort_index&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">np.random.seed(1)</span><br><span class="line"></span><br><span class="line">a = pd.DataFrame(np.random.randint(1, 6, (3, 4)), index=[&apos;row_2&apos;, &apos;row_1&apos;, &apos;row_3&apos;], columns=[&apos;col_2&apos;, &apos;col_0&apos;, &apos;col_3&apos;, &apos;col_1&apos;])</span><br><span class="line"></span><br><span class="line"># obj.sort_index(axis=0, ascending=True) &#x5BF9;obj&#x7684;&#x6807;&#x7B7E;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;axis=0(&#x9ED8;&#x8BA4;)&#x4E3A;&#x884C;&#x6807;&#x7B7E;&#xFF0C;axis=1&#x4E3A;&#x5217;&#x6807;&#x7B7E;&#xFF0C;ascending=True(&#x9ED8;&#x8BA4;)&#x4E3A;&#x9012;&#x589E;&#x987A;&#x5E8F;&#xFF0C;ascending=False&#x4E3A;&#x9012;&#x51CF;&#x987A;&#x5E8F;</span><br><span class="line">b = a.sort_index()</span><br><span class="line">c = a.sort_index(axis=1, ascending=False)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pandas5.png" alt="5"></p><h3 id="sort-values&#x65B9;&#x6CD5;"><a href="#sort-values&#x65B9;&#x6CD5;" class="headerlink" title="sort_values&#x65B9;&#x6CD5;"></a><font size="3">sort_values&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">np.random.seed(1)</span><br><span class="line"></span><br><span class="line">a = pd.DataFrame(np.random.randint(1, 6, (3, 4)), index=[&apos;row_2&apos;, &apos;row_1&apos;, &apos;row_3&apos;], columns=[&apos;col_2&apos;, &apos;col_0&apos;, &apos;col_3&apos;, &apos;col_1&apos;])</span><br><span class="line"></span><br><span class="line"># obj.sort_values(by, axis=0, ascending) &#x5BF9;obj&#x7684;&#x6570;&#x636E;&#x5185;&#x5BB9;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;by&#x6307;&#x5B9A;&#x8981;&#x6392;&#x5E8F;&#x7684;&#x884C;&#x6216;&#x8005;&#x5217;&#xFF0C;axis=0(&#x9ED8;&#x8BA4;)&#x4E3A;&#x884C;&#x6807;&#x7B7E;&#xFF0C;axis=1&#x4E3A;&#x5217;&#x6807;&#x7B7E;&#xFF0C;ascending=True(&#x9ED8;&#x8BA4;)&#x4E3A;&#x9012;&#x589E;&#x987A;&#x5E8F;&#xFF0C;ascending=False&#x4E3A;&#x9012;&#x51CF;&#x987A;&#x5E8F;</span><br><span class="line">b = a.sort_values(by=&apos;col_0&apos;)</span><br><span class="line">c = a.sort_values(by=&apos;row_1&apos;, axis=1, ascending=False)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pandas6.png" alt="6"></p><h2 id="pandas&#x5207;&#x7247;&#x4E0E;&#x7D22;&#x5F15;"><a href="#pandas&#x5207;&#x7247;&#x4E0E;&#x7D22;&#x5F15;" class="headerlink" title="pandas&#x5207;&#x7247;&#x4E0E;&#x7D22;&#x5F15;"></a><font size="4">pandas&#x5207;&#x7247;&#x4E0E;&#x7D22;&#x5F15;</font></h2><h3 id="&#x65B9;&#x6CD5;"><a href="#&#x65B9;&#x6CD5;" class="headerlink" title="[]&#x65B9;&#x6CD5;"></a><font size="3">[]&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = pd.DataFrame(np.arange(12).reshape(3, 4), index=[&apos;row_0&apos;, &apos;row_1&apos;, &apos;row_2&apos;], columns=[&apos;col_0&apos;, &apos;col_1&apos;, &apos;col_2&apos;, &apos;col_3&apos;]) </span><br><span class="line"></span><br><span class="line"># obj[col_name] &#x7D22;&#x5F15;obj&#x4E2D;&#x7684;col_name&#x5217;</span><br><span class="line">b = a[[&apos;col_3&apos;, &apos;col_0&apos;]]</span><br><span class="line"></span><br><span class="line"># obj[m:n] &#x7D22;&#x5F15;obj&#x4E2D;&#x7684;[m, n)&#x884C;</span><br><span class="line">c = a[1:3]</span><br><span class="line"></span><br><span class="line"># obj[obj.col_name op x] &#x7D22;&#x5F15;obj&#x7684;col_name&#x5217;&#x4E2D;&#x5BF9;x&#x64CD;&#x4F5C;&#x540E;&#x4E3A;True&#x7684;&#x884C;</span><br><span class="line">d = a[a.col_0  &gt; 3]</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pandas7.png" alt="7"></p><h3 id="loc&#xFF0C;iloc&#x65B9;&#x6CD5;"><a href="#loc&#xFF0C;iloc&#x65B9;&#x6CD5;" class="headerlink" title="loc&#xFF0C;iloc&#x65B9;&#x6CD5;"></a><font size="3">loc&#xFF0C;iloc&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = pd.DataFrame(np.arange(12).reshape(3, 4), index=[&apos;row_0&apos;, &apos;row_1&apos;, &apos;row_2&apos;], columns=[&apos;col_0&apos;, &apos;col_1&apos;, &apos;col_2&apos;, &apos;col_3&apos;]) </span><br><span class="line"></span><br><span class="line"># obj.loc[row_name&#xFF0C;col_name=None] &#x7D22;&#x5F15;obj&#x4E2D;&#x884C;&#x6807;&#x7B7E;&#x4E3A;row_name,&#x5217;&#x6807;&#x7B7E;&#x4E3A;col_name(&#x9ED8;&#x8BA4;&#x662F;&#x5168;&#x90E8;&#x5217;)&#x7684;&#x6240;&#x6709;&#x6570;&#x636E;</span><br><span class="line">b = a.loc[[&apos;row_1&apos;, &apos;row_2&apos;]]</span><br><span class="line"></span><br><span class="line"># obj.iloc[row_index, col_index] &#x7D22;&#x5F15;obj&#x4E2D;&#x7684;&#x7B2C;row_index&#x884C;&#x548C;&#x7B2C;col_index&#x5217;</span><br><span class="line">c = a.iloc[[1, 2], [1, 2]]</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pandas8.png" alt="8"></p><h2 id="pandas&#x4FEE;&#x6539;&#x5185;&#x5BB9;"><a href="#pandas&#x4FEE;&#x6539;&#x5185;&#x5BB9;" class="headerlink" title="pandas&#x4FEE;&#x6539;&#x5185;&#x5BB9;"></a><font size="4">pandas&#x4FEE;&#x6539;&#x5185;&#x5BB9;</font></h2><h3 id="&#x65B9;&#x6CD5;-1"><a href="#&#x65B9;&#x6CD5;-1" class="headerlink" title="[]&#x65B9;&#x6CD5;"></a><font size="3">[]&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = pd.DataFrame(np.arange(12).reshape(3, 4), index=[&apos;row_0&apos;, &apos;row_1&apos;, &apos;row_2&apos;], columns=[&apos;col_0&apos;, &apos;col_1&apos;, &apos;col_2&apos;, &apos;col_3&apos;]) </span><br><span class="line"></span><br><span class="line"># obj[col_name] &#x5C06;obj&#x4E2D;&#x7684;col_name&#x5217;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x6539;&#x4E3A;x</span><br><span class="line">a[[&apos;col_3&apos;,&apos;col_2&apos;]] = -1</span><br><span class="line"></span><br><span class="line"># obj[m:n] = x &#x5C06;obj&#x4E2D;&#x7684;[m, n)&#x884C;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x6570;&#x636E;&#x6539;&#x4E3A;x</span><br><span class="line">a[2:3] = -2</span><br><span class="line"></span><br><span class="line"># obj[obj[col_name] op x] = x &#x5C06;obj&#x7684;col_name&#x5217;&#x4E2D;&#x5BF9;x&#x64CD;&#x4F5C;&#x540E;&#x4E3A;True&#x7684;&#x884C;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x6570;&#x636E;&#x6539;&#x4E3A;x</span><br><span class="line">a[a[&apos;col_0&apos;]  &gt; 3] = -3</span><br><span class="line"></span><br><span class="line"># obj.col_name[obj.col_name op x] = x &#x5C06;obj&#x7684;col_name&#x5217;&#x4E2D;&#x5BF9;x&#x64CD;&#x4F5C;&#x540E;&#x4E3A;True&#x7684;&#x6240;&#x6709;&#x6570;&#x636E;&#x6539;&#x4E3A;x</span><br><span class="line">a.col_0[a[&apos;col_0&apos;]  != -3] =-4</span><br><span class="line"></span><br><span class="line"># obj[col_name] = x &#x5C06;obj&#x7684;col_name&#x5217;&#x4FEE;&#x6539;&#x4E3A;x&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x8BE5;&#x5217;&#x5219;&#x589E;&#x52A0;&#x4E00;&#x5217;</span><br><span class="line">a[&apos;col_4&apos;] =-5</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pandas9.png" alt="9"></p><h3 id="dropna&#xFF0C;fillna&#x65B9;&#x6CD5;"><a href="#dropna&#xFF0C;fillna&#x65B9;&#x6CD5;" class="headerlink" title="dropna&#xFF0C;fillna&#x65B9;&#x6CD5;"></a><font size="3">dropna&#xFF0C;fillna&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = pd.DataFrame({&apos;col_0&apos;:[0, 4, np.nan], &apos;col_1&apos;:[2.71, np.nan, np.nan], &apos;col_2&apos;:[np.nan, np.nan, np.nan]}, index=[&apos;row_0&apos;, &apos;row_1&apos;, &apos;row_2&apos;]) </span><br><span class="line">b = pd.DataFrame({&apos;col_0&apos;:[0, 4, 2.5], &apos;col_1&apos;:[2.71, np.nan, np.nan], &apos;col_2&apos;:[np.nan, np.nan, np.nan]}, index=[&apos;row_0&apos;, &apos;row_1&apos;, &apos;row_2&apos;]) </span><br><span class="line"></span><br><span class="line"># obj.dropna(axis=0, how=&apos;any&apos;) &#x5C06;obj&#x4E2D;&#x7684;nan&#x5220;&#x9664;&#xFF0C;axis=0(&#x9ED8;&#x8BA4;)&#x4E3A;&#x5220;&#x9664;&#x884C;&#xFF0C;axis=1&#x4E3A;&#x5220;&#x9664;&#x5217;&#xFF0C;how=&apos;any&apos;(&#x9ED8;&#x8BA4;)&#x4E3A;&#x53EA;&#x8981;&#x5B58;&#x5728;nan&#x5C31;&#x5220;&#x9664;&#xFF0C;how=&apos;all&apos;&#x4E3A;&#x5168;&#x90E8;&#x4E3A;nan&#x624D;&#x5220;&#x9664;</span><br><span class="line">c = a.dropna()</span><br><span class="line">d = b.dropna(1, &apos;all&apos;)</span><br><span class="line"></span><br><span class="line"># obj.fillna(value) &#x5C06;obj&#x4E2D;&#x7684;nan&#x7528;value&#x586B;&#x5145;,value&#x53EF;&#x4EE5;&#x4E3A;&#x6570;&#x5B57;&#x6216;&#x8005;&#x5B57;&#x5178;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x5B57;&#x5178;&#x5219;&#x6309;&#x7167;&#x5B57;&#x5178;&#x7684;&#x5BF9;&#x5E94;&#x5173;&#x7CFB;&#x6309;&#x5217;&#x586B;&#x5145;</span><br><span class="line">e = a.fillna(-1)</span><br><span class="line">f = a.fillna({&apos;col_0&apos;:-1, &apos;col_1&apos;:-2, &apos;col_2&apos;:-3})</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pandas10.png" alt="10"></p><h2 id="pandas&#x5408;&#x5E76;"><a href="#pandas&#x5408;&#x5E76;" class="headerlink" title="pandas&#x5408;&#x5E76;"></a><font size="4">pandas&#x5408;&#x5E76;</font></h2><h3 id="concat&#x65B9;&#x6CD5;"><a href="#concat&#x65B9;&#x6CD5;" class="headerlink" title="concat&#x65B9;&#x6CD5;"></a><font size="3">concat&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">index_a = [&apos;A&apos;, &apos;B&apos;]</span><br><span class="line">index_b = [&apos;B&apos;, &apos;C&apos;]</span><br><span class="line">col_a = [&apos;a&apos;, &apos;b&apos;]</span><br><span class="line">col_b = [&apos;b&apos;, &apos;c&apos;]</span><br><span class="line">a = pd.DataFrame(np.arange(4).reshape(2, 2), index=index_a, columns=col_a) </span><br><span class="line">b = pd.DataFrame(np.arange(4).reshape(2, 2), index=index_b, columns=col_b) </span><br><span class="line"></span><br><span class="line"># pd.concat([obj1, obj2, ...], axis=0, join=&apos;outer&apos;, ignore_index=False) &#x5C06;&#x591A;&#x4E2A;&#x5BF9;&#x8C61;&#x6309;&#x7167;&#x8F74;&#x8FDB;&#x884C;&#x8FDE;&#x63A5;&#xFF0C;join&#x4E3A;&#x8FDE;&#x63A5;&#x65B9;&#x5F0F;&#xFF0C;&apos;outer&apos;&#x4EE3;&#x8868;&#x5C06;&#x6CA1;&#x6709;&#x76F8;&#x5E94;&#x6807;&#x7B7E;&#x7684;&#x5BF9;&#x8C61;&#x8865;NaN&#xFF0C;&apos;inner&apos;&#x4EE3;&#x8868;&#x53EA;&#x4FDD;&#x7559;&#x5171;&#x6709;&#x7684;&#x6807;&#x7B7E;&#xFF0C;ignore_index&#x4E3A;&#x662F;&#x5426;&#x91CD;&#x65B0;&#x5F00;&#x59CB;&#x6392;&#x5217;&#x6807;&#x7B7E;</span><br><span class="line">c = pd.concat([a, b])</span><br><span class="line">d = pd.concat([a, b], axis=1)</span><br><span class="line">e = pd.concat([a, b], join=&apos;inner&apos;)</span><br><span class="line">f = pd.concat([a, b],ignore_index=True)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pandas11.png" alt="11"></p><h3 id="append&#x65B9;&#x6CD5;"><a href="#append&#x65B9;&#x6CD5;" class="headerlink" title="append&#x65B9;&#x6CD5;"></a><font size="3">append&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">index_a = [&apos;A&apos;, &apos;B&apos;]</span><br><span class="line">index_b = [&apos;B&apos;, &apos;C&apos;]</span><br><span class="line">col_a = [&apos;a&apos;, &apos;b&apos;]</span><br><span class="line">col_b = [&apos;b&apos;, &apos;c&apos;]</span><br><span class="line">a = pd.DataFrame(np.arange(4).reshape(2, 2), index=index_a, columns=col_a) </span><br><span class="line">b = pd.DataFrame(np.arange(4).reshape(2, 2), index=index_b, columns=col_b) </span><br><span class="line"></span><br><span class="line"># obj.append([obj1, obj2, ...], ignore_index=False) &#x5728;&#x7EB5;&#x5411;&#x5728;obj&#x540E;&#x8FFD;&#x52A0;obj1, obj2,......&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x5BF9;&#x5E94;&#x7684;&#x5217;&#x6807;&#x7B7E;&#xFF0C;&#x5219;&#x8865;NaN</span><br><span class="line">c = a.append([a])</span><br><span class="line">d = a.append([b])</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pandas12.png" alt="12"></p><h3 id="merge&#x65B9;&#x6CD5;"><a href="#merge&#x65B9;&#x6CD5;" class="headerlink" title="merge&#x65B9;&#x6CD5;"></a><font size="3">merge&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">index_a = [&apos;A&apos;, &apos;B&apos;]</span><br><span class="line">index_b = [&apos;B&apos;, &apos;C&apos;]</span><br><span class="line">col_a = [&apos;a&apos;, &apos;b&apos;]</span><br><span class="line">col_b = [&apos;b&apos;, &apos;c&apos;]</span><br><span class="line">a = pd.DataFrame(np.array([1, 3, 5, 7]).reshape(2, 2), index=index_a, columns=col_a) </span><br><span class="line">b = pd.DataFrame(np.array([3, 4, 5, 6]).reshape(2, 2), index=index_b, columns=col_b) </span><br><span class="line"></span><br><span class="line"># pd.merge(left, right, how=&apos;inner&apos;, on=&apos;col_name&apos;,left_index=False,right_index=False) &#x6309;&#x7167;on&#x8FDB;&#x884C;&#x5408;&#x5E76;&#x4E24;&#x4E2A;&#x8868;&#x683C;,how=&apos;inner&apos;&#xFF0C;&#x884C;&#x6807;&#x7B7E;&#x4E3A;&#x4E24;&#x4E2A;&#x8868;&#x683C;&#x884C;&#x6807;&#x7B7E;&#x7684;&#x4EA4;&#x96C6;&#xFF0C;&apos;outer&apos;&#xFF0C;&#x884C;&#x6807;&#x7B7E;&#x4E3A;&#x4E24;&#x4E2A;&#x8868;&#x683C;&#x884C;&#x6807;&#x7B7E;&#x7684;&#x5E76;&#x96C6;&#xFF0C;&#x5C06;&#x4E0D;&#x76F8;&#x4EA4;&#x7684;&#x90E8;&#x5206;&#x53D6;NaN&#xFF0C;&apos;left&apos;&#xFF0C;&#x884C;&#x6807;&#x7B7E;&#x4E3A;left&#x7684;&#x884C;&#x6807;&#x7B7E;&#xFF0C;&apos;right&apos;&#xFF0C;&#x884C;&#x6807;&#x7B7E;&#x4E3A;left&#x7684;&#x884C;&#x6807;&#x7B7E;&#x3002;left_index&#x548C;right_index&#x6307;&#x662F;&#x5426;&#x6309;&#x7167;&#x6807;&#x7B7E;&#x5408;&#x5E76;&#xFF0C;&#x4E3A;False&#x6839;&#x636E;&#x503C;&#x5408;&#x5E76;&#x8868;&#x683C;&#xFF0C;True&#x6839;&#x636E;&#x6807;&#x7B7E;&#x5408;&#x5E76;&#x8868;&#x683C;</span><br><span class="line">c = pd.merge(a, b, on=&apos;b&apos;)</span><br><span class="line">d = pd.merge(a, b, how=&apos;outer&apos;, on=&apos;b&apos;)</span><br><span class="line">e = pd.merge(a, b, how=&apos;left&apos;, on=&apos;b&apos;)</span><br><span class="line">f = pd.merge(a, b, how=&apos;right&apos;, on=&apos;b&apos;)</span><br><span class="line">g = pd.merge(a, b, how=&apos;outer&apos;, left_index=True,right_index=True)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pandas13.png" alt="13"></p><h2 id="Pandas&#x4FEE;&#x6539;&#x884C;&#x5217;&#x540D;"><a href="#Pandas&#x4FEE;&#x6539;&#x884C;&#x5217;&#x540D;" class="headerlink" title="Pandas&#x4FEE;&#x6539;&#x884C;&#x5217;&#x540D;"></a><font size="4">Pandas&#x4FEE;&#x6539;&#x884C;&#x5217;&#x540D;</font></h2><h3 id="replace&#xFF0C;rename&#x65B9;&#x6CD5;"><a href="#replace&#xFF0C;rename&#x65B9;&#x6CD5;" class="headerlink" title="replace&#xFF0C;rename&#x65B9;&#x6CD5;"></a><font size="4">replace&#xFF0C;rename&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">a = pd.DataFrame([[1, 3], [5, 7]], index=[&apos;row_0&apos;, &apos;row_1&apos;], columns=[&apos;col_0&apos;, &apos;col_1&apos;]) </span><br><span class="line"></span><br><span class="line"># obj.columns = list&#xFF0C;obj.index = list &#x5C06;&#x5217;&#x6807;&#x7B7E;&#x6539;&#x4E3A;list&#xFF0C;&#x5C06;&#x884C;&#x6807;&#x7B7E;&#x6539;&#x4E3A;list</span><br><span class="line">a.columns = [&apos;new_col_0&apos;, &apos;new_col_1&apos;]</span><br><span class="line">a.index = [&apos;new_row_0&apos;, &apos;new_row_1&apos;]</span><br><span class="line"></span><br><span class="line"># obj.replace(list1, list2) &#x5C06;obj&#x4E2D;list1&#x4E2D;&#x7684;&#x6570;&#x503C;&#x66FF;&#x6362;&#x4E3A;list2</span><br><span class="line">b = a.replace([1, 7], [2, 6])</span><br><span class="line"></span><br><span class="line"># obj.rename(columns=dict/func, index=dict/func) &#x7528;&#x5B57;&#x5178;&#x6216;&#x51FD;&#x6570;&#x6765;&#x66F4;&#x6539;&#x884C;&#x5217;&#x540D;</span><br><span class="line">c = a.rename(columns={&apos;new_col_0&apos;:&apos;A&apos;, &apos;new_col_1&apos;:&apos;B&apos;}, index={&apos;new_row_0&apos;:&apos;a&apos;, &apos;new_row_1&apos;:&apos;b&apos;})</span><br><span class="line">d = a.rename(columns=lambda x: x[-1], index=lambda x: x[-1])</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pandas14.png" alt="14"></p><h2 id="pandas&#x6570;&#x7406;&#x7EDF;&#x8BA1;"><a href="#pandas&#x6570;&#x7406;&#x7EDF;&#x8BA1;" class="headerlink" title="pandas&#x6570;&#x7406;&#x7EDF;&#x8BA1;"></a><font size="4">pandas&#x6570;&#x7406;&#x7EDF;&#x8BA1;</font></h2><h3 id="notnull&#xFF0C;isnull&#x65B9;&#x6CD5;"><a href="#notnull&#xFF0C;isnull&#x65B9;&#x6CD5;" class="headerlink" title="notnull&#xFF0C;isnull&#x65B9;&#x6CD5;"></a><font size="3">notnull&#xFF0C;isnull&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = pd.DataFrame([[1, np.nan], [5, 7]], index=[&apos;row_0&apos;, &apos;row_1&apos;], columns=[&apos;col_0&apos;, &apos;col_1&apos;]) </span><br><span class="line"></span><br><span class="line"># obj.isnull() &#x5224;&#x65AD;obj&#x4E2D;&#x6BCF;&#x4E00;&#x9879;&#x662F;&#x5426;&#x4E3A;NaN</span><br><span class="line">a.isnull()</span><br><span class="line"></span><br><span class="line"># obj.notnull() &#x5224;&#x65AD;obj&#x4E2D;&#x6BCF;&#x4E00;&#x9879;&#x662F;&#x5426;&#x4E0D;&#x4E3A;NaN</span><br><span class="line">a.notnull()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pandas15.png" alt="15"></p><h3 id="&#x7EDF;&#x8BA1;&#x65B9;&#x6CD5;"><a href="#&#x7EDF;&#x8BA1;&#x65B9;&#x6CD5;" class="headerlink" title="&#x7EDF;&#x8BA1;&#x65B9;&#x6CD5;"></a><font size="3">&#x7EDF;&#x8BA1;&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = pd.DataFrame([[1, 4, 7], [2, 5, 8], [5, 4, 1]], index=[&apos;r_0&apos;, &apos;r_1&apos;, &apos;r_2&apos;], columns=[&apos;c_0&apos;, &apos;c_1&apos;, &apos;c_2&apos;]) </span><br><span class="line">b = pd.DataFrame([[1, 4, 7], [2, np.nan, 8], [5, np.nan, np.nan]], index=[&apos;r_0&apos;, &apos;r_1&apos;, &apos;r_2&apos;], columns=[&apos;c_0&apos;, &apos;c_1&apos;, &apos;c_2&apos;]) </span><br><span class="line"></span><br><span class="line"># obj.max/min(axis=0) &#x7EDF;&#x8BA1;&#x6700;&#x5927;&#x503C;/&#x6700;&#x5C0F;&#x8005;&#xFF0C;axis=0&#x4E3A;&#x5217;&#xFF0C;axis=1&#x4E3A;&#x884C;</span><br><span class="line">a.max(0)</span><br><span class="line">a.min(1)</span><br><span class="line"></span><br><span class="line"># obj.count(axis=0) &#x7EDF;&#x8BA1;&#x975E;&#x7A7A;&#x4E2A;&#x6570;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;pd.max</span><br><span class="line">b.count()</span><br><span class="line"></span><br><span class="line"># obj.mean(axis=0) &#x7EDF;&#x8BA1;&#x5747;&#x503C;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;pd.max</span><br><span class="line">a.mean()</span><br><span class="line"></span><br><span class="line"># obj.median(axis=0) &#x7EDF;&#x8BA1;&#x4E2D;&#x4F4D;&#x6570;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;pd.max</span><br><span class="line">a.median()</span><br><span class="line"></span><br><span class="line"># obj.std(axis=0) &#x7EDF;&#x8BA1;&#x6807;&#x51C6;&#x5DEE;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;pd.max</span><br><span class="line">a.std()</span><br><span class="line"></span><br><span class="line"># obj.var(obj, axis=None) &#x7EDF;&#x8BA1;&#x65B9;&#x5DEE;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;pd.max</span><br><span class="line">a.var()</span><br><span class="line"></span><br><span class="line"># obj.corr(obj, axis=None) &#x7EDF;&#x8BA1;&#x76F8;&#x5173;&#x7CFB;&#x6570;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;pd.max</span><br><span class="line">a.corr()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pandas16.png" alt="16"></p><h2 id="pandas&#x6570;&#x636E;&#x4FDD;&#x5B58;"><a href="#pandas&#x6570;&#x636E;&#x4FDD;&#x5B58;" class="headerlink" title="pandas&#x6570;&#x636E;&#x4FDD;&#x5B58;"></a><font size="4">pandas&#x6570;&#x636E;&#x4FDD;&#x5B58;</font></h2><h3 id="to-csv&#xFF0C;read-csv&#x65B9;&#x6CD5;"><a href="#to-csv&#xFF0C;read-csv&#x65B9;&#x6CD5;" class="headerlink" title="to_csv&#xFF0C;read_csv&#x65B9;&#x6CD5;"></a><font size="3">to_csv&#xFF0C;read_csv&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = pd.DataFrame(np.arange(12).reshape(3, 4), index=[&apos;row_0&apos;, &apos;row_1&apos;, &apos;row_2&apos;], columns=[&apos;col_0&apos;, &apos;col_1&apos;, &apos;col_2&apos;, &apos;col_3&apos;]) </span><br><span class="line"></span><br><span class="line"># obj.to_csv/pickle(filename) &#x5C06;obj&#x4FDD;&#x5B58;&#x5728;&#x6587;&#x4EF6;&#x540D;&#x4E3A;filename&#x7684;.csv/pickle&#x6587;&#x4EF6;&#x4E2D;(&#x8981;&#x52A0;.csv/pickle&#x6269;&#x5C55;&#x540D;)</span><br><span class="line">a.to_csv(&apos;save1.csv&apos;)</span><br><span class="line">a.to_pickle(&apos;save2.pickle&apos;)</span><br><span class="line"></span><br><span class="line"># pd.read_csv(filename) &#x8BFB;&#x53D6;&#x6587;&#x4EF6;&#x540D;&#x4E3A;filename&#x7684;&#x6570;&#x7EC4;&#x6570;&#x636E;(&#x8981;&#x52A0;.csv/pickle&#x6269;&#x5C55;&#x540D;)</span><br><span class="line">b = pd.read_csv(&apos;save1.csv&apos;)</span><br><span class="line">c = pd.read_pickle(&apos;save2.pickle&apos;)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pandas17.png" alt="17"></p><h2 id="pandas&#x6570;&#x636E;&#x663E;&#x793A;"><a href="#pandas&#x6570;&#x636E;&#x663E;&#x793A;" class="headerlink" title="pandas&#x6570;&#x636E;&#x663E;&#x793A;"></a><font size="4">pandas&#x6570;&#x636E;&#x663E;&#x793A;</font></h2><h3 id="plot&#xFF0C;plot-scatter&#x65B9;&#x6CD5;"><a href="#plot&#xFF0C;plot-scatter&#x65B9;&#x6CD5;" class="headerlink" title="plot&#xFF0C;plot.scatter&#x65B9;&#x6CD5;"></a><font size="3">plot&#xFF0C;plot.scatter&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">x = np. arange(10)</span><br><span class="line">y = np.log(x)</span><br><span class="line">a = pd.DataFrame({&apos;x&apos;:x, &apos;y&apos;:y}) </span><br><span class="line"></span><br><span class="line"># obj.plot.scatter(x, y) &#x753B;&#x51FA;x-y&#x5BF9;&#x5E94;&#x7684;&#x6563;&#x70B9;&#x56FE;&#xFF0C;&#x53EF;&#x53C2;&#x8003;matplotlib</span><br><span class="line">a.plot.scatter(&apos;x&apos;, &apos;y&apos;)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/pandas18.png" alt="18"></p><h1 id="Pandas&#x5C0F;&#x7ED3;"><a href="#Pandas&#x5C0F;&#x7ED3;" class="headerlink" title="Pandas&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Pandas&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;Pandas&#x53EF;&#x5904;&#x7406;&#x7684;&#x6570;&#x636E;&#x66F4;&#x63A5;&#x8FD1;&#x6765;&#x6E90;&#x4E8E;&#x751F;&#x6D3B;&#x4E2D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x5728;&#x6570;&#x636E;&#x5206;&#x6790;&#xFF0C;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x4E2D;&#xFF0C;&#x5927;&#x91CF;&#x7684;&#x6570;&#x636E;&#x90FD;&#x662F;&#x5177;&#x6709;&#x6807;&#x7B7E;&#x7684;&#xFF0C;&#x4E0D;&#x53EA;&#x662F;&#x7EAF;&#x6570;&#x5B57;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x9700;&#x8981;&#x501F;&#x52A9;Pandas&#x7684;&#x5E2E;&#x52A9;&#xFF0C;&#x56E0;&#x6B64;pandas&#x4E5F;&#x4F5C;&#x4E3A;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x4E09;&#x5251;&#x5BA2;&#x4E4B;&#x4E00;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Pandas&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="python" scheme="https://USTCcoder.github.io/categories/python/"/>
    
      <category term="常用库" scheme="https://USTCcoder.github.io/categories/python/%E5%B8%B8%E7%94%A8%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Numpy</title>
    <link href="https://USTCcoder.github.io/2019/08/12/library%20Numpy/"/>
    <id>https://USTCcoder.github.io/2019/08/12/library Numpy/</id>
    <published>2019-08-12T12:29:15.000Z</published>
    <updated>2019-10-10T00:49:55.134Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/LIBRARY/numpy.jpg" alt="0"></p><h1 id="Numpy&#x4ECB;&#x7ECD;"><a href="#Numpy&#x4ECB;&#x7ECD;" class="headerlink" title="Numpy&#x4ECB;&#x7ECD;"></a><font size="5" color="red">Numpy&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;NumPy&#x662F;Python&#x7684;&#x4E00;&#x79CD;&#x5F00;&#x6E90;&#x7684;&#x6570;&#x503C;&#x8BA1;&#x7B97;&#x6269;&#x5C55;&#xFF0C;&#x8FD9;&#x79CD;&#x5DE5;&#x5177;&#x53EF;&#x7528;&#x6765;&#x5B58;&#x50A8;&#x548C;&#x5904;&#x7406;&#x5927;&#x578B;&#x77E9;&#x9635;&#xFF0C;&#x4E13;&#x4E3A;&#x8FDB;&#x884C;&#x4E25;&#x683C;&#x7684;&#x6570;&#x5B57;&#x5904;&#x7406;&#x800C;&#x4EA7;&#x751F;&#x3002;<br><a id="more"></a></p><h1 id="Numpy&#x7279;&#x70B9;"><a href="#Numpy&#x7279;&#x70B9;" class="headerlink" title="Numpy&#x7279;&#x70B9;"></a><font size="5" color="red">Numpy&#x7279;&#x70B9;</font></h1><p>&#x2003;&#x2003;<font size="3">NumPy&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E2A;N&#x7EF4;&#x6570;&#x7EC4;&#x7C7B;&#x578B;ndarray&#xFF0C;&#x5B83;&#x63CF;&#x8FF0;&#x4E86;&#x76F8;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x7684;&#x96C6;&#x5408;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">numpy&#x5185;&#x7F6E;&#x4E86;&#x5E76;&#x884C;&#x8FD0;&#x7B97;&#x529F;&#x80FD;&#xFF0C;&#x5F53;&#x7CFB;&#x7EDF;&#x6709;&#x591A;&#x4E2A;&#x6838;&#x5FC3;&#x65F6;&#xFF0C;&#x505A;&#x67D0;&#x79CD;&#x8BA1;&#x7B97;&#x65F6;&#xFF0C;numpy&#x4F1A;&#x81EA;&#x52A8;&#x505A;&#x5E76;&#x884C;&#x8BA1;&#x7B97;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">Numpy&#x5E95;&#x5C42;&#x4F7F;&#x7528;C&#x8BED;&#x8A00;&#x7F16;&#x5199;&#xFF0C;&#x5185;&#x90E8;&#x89E3;&#x9664;&#x4E86;GIL&#xFF08;&#x5168;&#x5C40;&#x89E3;&#x91CA;&#x5668;&#x9501;&#xFF09;&#xFF0C;&#x5176;&#x5BF9;&#x6570;&#x7EC4;&#x7684;&#x64CD;&#x4F5C;&#x901F;&#x5EA6;&#x4E0D;&#x53D7;Python&#x89E3;&#x91CA;&#x5668;&#x7684;&#x9650;&#x5236;&#xFF0C;&#x6548;&#x7387;&#x8FDC;&#x9AD8;&#x4E8E;&#x7EAF;Python&#x4EE3;&#x7801;&#x3002;</font></p><h1 id="Numpy&#x5E94;&#x7528;"><a href="#Numpy&#x5E94;&#x7528;" class="headerlink" title="Numpy&#x5E94;&#x7528;"></a><font size="5" color="red">Numpy&#x5E94;&#x7528;</font></h1><h2 id="Numpy&#x521B;&#x5EFA;&#x6570;&#x7EC4;"><a href="#Numpy&#x521B;&#x5EFA;&#x6570;&#x7EC4;" class="headerlink" title="Numpy&#x521B;&#x5EFA;&#x6570;&#x7EC4;"></a><font size="4">Numpy&#x521B;&#x5EFA;&#x6570;&#x7EC4;</font></h2><h3 id="array&#x65B9;&#x6CD5;"><a href="#array&#x65B9;&#x6CD5;" class="headerlink" title="array&#x65B9;&#x6CD5;"></a><font size="3">array&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># np.array(list) &#x5C06;list&#x8F6C;&#x6362;&#x4E3A;&#x6570;&#x7EC4;&#x7C7B;&#x578B;</span><br><span class="line">a = np.array([[1, 2, 3], [4, 5, 6]])</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy1.png" alt="1"></p><h3 id="zeros&#xFF0C;ones&#xFF0C;eye&#x65B9;&#x6CD5;"><a href="#zeros&#xFF0C;ones&#xFF0C;eye&#x65B9;&#x6CD5;" class="headerlink" title="zeros&#xFF0C;ones&#xFF0C;eye&#x65B9;&#x6CD5;"></a><font size="3">zeros&#xFF0C;ones&#xFF0C;eye&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># np.zeros(shape, dtype=None) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x5168;0&#x6570;&#x7EC4;(&#x9ED8;&#x8BA4;&#x4E3A;float64)</span><br><span class="line">a = np.zeros((2,3))</span><br><span class="line"></span><br><span class="line"># np.ones(shape, dtype=None) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x5168;1&#x6570;&#x7EC4;(&#x9ED8;&#x8BA4;&#x4E3A;float64)</span><br><span class="line">b = np.ones((2,3))</span><br><span class="line"></span><br><span class="line"># np.zeros_like(array, dtype=None) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E0E;array&#x76F8;&#x540C;&#x7684;&#x5168;0&#x6570;&#x7EC4;(&#x9ED8;&#x8BA4;&#x4E3A;float64)</span><br><span class="line">c = np.zeros_like(b)</span><br><span class="line"></span><br><span class="line"># np.ones_like(array, dtype=None) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E0E;array&#x76F8;&#x540C;&#x7684;&#x5168;1&#x6570;&#x7EC4;(&#x9ED8;&#x8BA4;&#x4E3A;float64)</span><br><span class="line">d = np.ones_like(a)</span><br><span class="line"></span><br><span class="line"># np.eye(m, n, k=0) &#x751F;&#x6210;m&#x884C;n&#x5217;&#x7684;&#x5355;&#x4F4D;&#x77E9;&#x9635;&#xFF0C;n&#x9ED8;&#x8BA4;&#x7B49;&#x4E8E;m&#xFF0C;k&#x4E3A;&#x4E0A;&#x4E0B;&#x7684;&#x504F;&#x79FB;&#x91CF;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;0(&#x9ED8;&#x8BA4;&#x4E3A;float64)</span><br><span class="line">e = np.eye(3, 4, 1)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy3.png" alt="3"></p><h3 id="arange&#x65B9;&#x6CD5;"><a href="#arange&#x65B9;&#x6CD5;" class="headerlink" title="arange&#x65B9;&#x6CD5;"></a><font size="3">arange&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># np.arange(start, stop, step, dtype=None) &#x751F;&#x6210;start&#x5230;stop&#xFF0C;&#x6B65;&#x957F;&#x4E3A;step&#x7684;&#x6570;&#x7EC4;</span><br><span class="line">a = np.arange(10, 20, 2)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy4.png" alt="4"></p><h3 id="linspace&#xFF0C;logspace&#x65B9;&#x6CD5;"><a href="#linspace&#xFF0C;logspace&#x65B9;&#x6CD5;" class="headerlink" title="linspace&#xFF0C;logspace&#x65B9;&#x6CD5;"></a><font size="3">linspace&#xFF0C;logspace&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None) &#x5C06;start&#x5230;stop&#x7B49;&#x5206;&#x6210;num&#x4E2A;&#x70B9;&#xFF0C;endpoint=True&#x4EE3;&#x8868;&#x5305;&#x62EC;stop</span><br><span class="line">a = np.linspace(10, 20, 6)</span><br><span class="line"></span><br><span class="line"># np.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None) &#x5C06;start&#x5230;stop&#x7B49;&#x5206;&#x6210;num&#x4E2A;&#x70B9;&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x70B9;i&#x7684;&#x503C;&#x4E3A;base&#x7684;i&#x6B21;&#x5E42;</span><br><span class="line">b = np.logspace(1, 2, 10)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy5.png" alt="5"></p><h3 id="random&#x65B9;&#x6CD5;"><a href="#random&#x65B9;&#x6CD5;" class="headerlink" title="random&#x65B9;&#x6CD5;"></a><font size="3">random&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># np.random.seed(n) &#x8BBE;&#x5B9A;&#x968F;&#x673A;&#x79CD;&#x5B50;&#xFF0C;&#x4EE5;&#x5907;&#x540E;&#x9762;&#x7684;&#x7ED3;&#x679C;&#x53EF;&#x4EE5;&#x590D;&#x73B0;</span><br><span class="line">np.random.seed(1)</span><br><span class="line"></span><br><span class="line"># np.random.randint(low, high, shape=None) &#x4EA7;&#x751F;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x5206;&#x5E03;&#x533A;&#x95F4;&#x4E3A;[low, high)&#x7684;&#x968F;&#x673A;&#x6574;&#x6570;</span><br><span class="line">a = np.random.randint(0, 10, (3, 3))</span><br><span class="line"></span><br><span class="line"># np.random.rand(shape=None) &#x4EA7;&#x751F;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;[0-1)&#x5747;&#x5300;&#x968F;&#x673A;&#x6570;</span><br><span class="line">b = np.random.rand(3,3)</span><br><span class="line"></span><br><span class="line"># np.random.uniform(low=0.0, high=1.0, shape=None) &#x4EA7;&#x751F;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x5206;&#x5E03;&#x533A;&#x95F4;&#x4E3A;[low, high)&#x7684;&#x5747;&#x5300;&#x968F;&#x673A;&#x6570;</span><br><span class="line">c = np.random.uniform(0, 10, (3, 3))</span><br><span class="line"></span><br><span class="line"># np.random.randn(shape=None) &#x4EA7;&#x751F;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x5747;&#x503C;&#x4E3A;0&#xFF0C;&#x65B9;&#x5DEE;&#x4E3A;1&#x7684;&#x9AD8;&#x65AF;&#x968F;&#x673A;&#x6570;</span><br><span class="line">d = np.random.rand(3,3)</span><br><span class="line"></span><br><span class="line"># np.random.normal(loc=0.0, scale=1.0, shape=None) &#x4EA7;&#x751F;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x5747;&#x503C;&#x4E3A;loc&#xFF0C;&#x6807;&#x51C6;&#x5DEE;&#x4E3A;scale&#x7684;&#x9AD8;&#x65AF;&#x968F;&#x673A;&#x6570;</span><br><span class="line">e = np.random.normal(5, 5, (3,3))</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy6.png" alt="6"></p><h2 id="Numpy&#x5C5E;&#x6027;"><a href="#Numpy&#x5C5E;&#x6027;" class="headerlink" title="Numpy&#x5C5E;&#x6027;"></a><font size="4">Numpy&#x5C5E;&#x6027;</font></h2><h3 id="ndim&#xFF0C;shape&#xFF0C;size&#xFF0C;dtype&#x5C5E;&#x6027;"><a href="#ndim&#xFF0C;shape&#xFF0C;size&#xFF0C;dtype&#x5C5E;&#x6027;" class="headerlink" title="ndim&#xFF0C;shape&#xFF0C;size&#xFF0C;dtype&#x5C5E;&#x6027;"></a><font size="3">ndim&#xFF0C;shape&#xFF0C;size&#xFF0C;dtype&#x5C5E;&#x6027;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.array([[1, 2, 3], [4, 5, 6]])</span><br><span class="line"></span><br><span class="line"># obj.ndim &#x67E5;&#x770B;&#x5BF9;&#x8C61;&#x7684;&#x7EF4;&#x5EA6;</span><br><span class="line">a.ndim</span><br><span class="line"></span><br><span class="line"># obj.shape &#x67E5;&#x770B;&#x5BF9;&#x8C61;&#x7684;&#x5F62;&#x72B6;</span><br><span class="line">a.shape</span><br><span class="line"></span><br><span class="line"># obj.size &#x67E5;&#x770B;&#x5BF9;&#x8C61;&#x7684;&#x5143;&#x7D20;&#x4E2A;&#x6570;</span><br><span class="line">a.size</span><br><span class="line"></span><br><span class="line"># obj.dtype &#x67E5;&#x770B;&#x5BF9;&#x8C61;&#x7684;&#x7C7B;&#x578B;(&#x6574;&#x6570;&#x9ED8;&#x8BA4;&#x4E3A;int32&#xFF0C;&#x6D6E;&#x70B9;&#x6570;&#x9ED8;&#x8BA4;&#x4E3A;float64)</span><br><span class="line">a.dtype</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy2.png" alt="2"></p><h2 id="Numpy&#x5207;&#x7247;&#x4E0E;&#x7D22;&#x5F15;"><a href="#Numpy&#x5207;&#x7247;&#x4E0E;&#x7D22;&#x5F15;" class="headerlink" title="Numpy&#x5207;&#x7247;&#x4E0E;&#x7D22;&#x5F15;"></a><font size="4">Numpy&#x5207;&#x7247;&#x4E0E;&#x7D22;&#x5F15;</font></h2><h3 id="&#x5192;&#x53F7;-&#x65B9;&#x6CD5;"><a href="#&#x5192;&#x53F7;-&#x65B9;&#x6CD5;" class="headerlink" title=":(&#x5192;&#x53F7;)&#x65B9;&#x6CD5;"></a><font size="3">:(&#x5192;&#x53F7;)&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(12).reshape((3, 4))</span><br><span class="line"></span><br><span class="line"># obj[start:stop:step, ...]&#xFF0C;&#x6307;&#x5728;&#x67D0;&#x4E00;&#x7EF4;&#x5EA6;&#x4E0A;&#xFF0C;&#x4ECE;start&#x5F00;&#x59CB;&#xFF0C;&#x5230;stop&#x7ED3;&#x675F;&#xFF0C;&#x4E0D;&#x5305;&#x62EC;stop&#xFF0C;&#x95F4;&#x9694;&#x4E3A;step&#xFF0C;start&#x7701;&#x7565;&#x4E3A;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5F00;&#x59CB;&#xFF0C;stop&#x7701;&#x7565;&#x4E3A;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x7ED3;&#x675F;&#xFF0C;step&#x7701;&#x7565;&#x4E3A;&#x95F4;&#x9694;&#x4E3A;1</span><br><span class="line">b = a[1:, 0:4:2]</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy8.png" alt="8"></p><h3 id="&#x65B9;&#x6CD5;"><a href="#&#x65B9;&#x6CD5;" class="headerlink" title="&#x65B9;&#x6CD5;"></a><font size="3"><a href="&#x5217;&#x8868;"></a>&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(12).reshape((3, 4))</span><br><span class="line"></span><br><span class="line"># obj[[x1, x2, ...], ...]&#xFF0C;&#x6307;&#x5728;&#x67D0;&#x4E00;&#x7EF4;&#x5EA6;&#x4E0A;&#xFF0C;&#x53D6;&#x51FA;x1,x2,...&#x6240;&#x5728;&#x4F4D;&#x7F6E;&#x7684;&#x5143;&#x7D20;</span><br><span class="line">b = a[[[1, 1], [2, 2]], [[0, 2], [0, 2]]]</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy9.png" alt="9"></p><h3 id="nonzero&#x65B9;&#x6CD5;"><a href="#nonzero&#x65B9;&#x6CD5;" class="headerlink" title="nonzero&#x65B9;&#x6CD5;"></a><font size="3">nonzero&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.random.randint(0, 3, (3, 3))</span><br><span class="line"></span><br><span class="line"># np.nonzero(obj) &#x8FD4;&#x56DE;obj&#x4E2D;&#x975E;0&#x7684;&#x7D22;&#x5F15;</span><br><span class="line">b = a &gt; 1</span><br><span class="line">c = np.nonzero(a)</span><br><span class="line">d = np.nonzero(b)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy34.png" alt="34"></p><h3 id="&#x65B9;&#x6CD5;-1"><a href="#&#x65B9;&#x6CD5;-1" class="headerlink" title="&#x65B9;&#x6CD5;"></a><font size="3"><a href="&#x903B;&#x8F91;&#x503C;&#x7D22;&#x5F15;"></a>&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(12).reshape((3, 4))</span><br><span class="line"></span><br><span class="line"># obj1[obj1 op obj2] &#x8FD4;&#x56DE;obj1&#x5BF9;obj2&#x64CD;&#x4F5C;&#x540E;&#x503C;&#x4E3A;True&#x7684;&#x503C;&#xFF0C;&#x5E76;&#x7528;&#x4E00;&#x7EF4;&#x6570;&#x7EC4;&#x4FDD;&#x5B58;</span><br><span class="line">b = a[a &gt; 5]</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy26.png" alt="26"></p><h3 id="ix-&#x65B9;&#x6CD5;"><a href="#ix-&#x65B9;&#x6CD5;" class="headerlink" title="ix_&#x65B9;&#x6CD5;"></a><font size="3">ix_&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(12).reshape((3, 4))</span><br><span class="line"></span><br><span class="line"># obj[np.ix_(array1, array2, ...)] &#x6309;&#x7167;array1,array2,...&#x7684;&#x987A;&#x5E8F;&#x53D6;&#x51FA;&#x5143;&#x7D20;</span><br><span class="line">b = a[np.ix_([1, 2], [0, 2])]</span><br><span class="line"></span><br><span class="line"># &#x4E0E;&#x5217;&#x8868;&#x64CD;&#x4F5C;&#x5BF9;&#x6BD4;</span><br><span class="line">c = a[[1, 2], [0, 2]]</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy10.png" alt="10"></p><h3 id="split&#x65B9;&#x6CD5;"><a href="#split&#x65B9;&#x6CD5;" class="headerlink" title="split&#x65B9;&#x6CD5;"></a><font size="3">split&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(12).reshape((2, 6))</span><br><span class="line"></span><br><span class="line"># np.split(obj, indices, axis=0) &#x5C06;obj&#x6309;&#x7167;axis&#x7684;&#x65B9;&#x5411;(0&#x4EE3;&#x8868;&#x6A2A;&#x5411;&#xFF0C;1&#x4EE3;&#x8868;&#x7EB5;&#x5411;)&#x5207;&#x5206;&#x3002;indices&#x4E3A;&#x6574;&#x6570;&#x6307;&#x5E73;&#x5747;&#x5207;&#x5206;&#x6210;indices&#x4EFD;&#xFF0C;&#x4E3A;&#x5217;&#x8868;&#x6307;&#x6309;&#x7167;&#x5217;&#x8868;&#x8FDB;&#x884C;&#x5207;&#x5206;&#x3002;</span><br><span class="line">b = np.split(a, 3, axis=1)</span><br><span class="line">c = np.split(a, [1, 3], axis=1)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy11.png" alt="11"></p><h2 id="Numpy&#x63D2;&#x5165;&#xFF0C;&#x8FDE;&#x63A5;&#x4E0E;&#x5220;&#x9664;"><a href="#Numpy&#x63D2;&#x5165;&#xFF0C;&#x8FDE;&#x63A5;&#x4E0E;&#x5220;&#x9664;" class="headerlink" title="Numpy&#x63D2;&#x5165;&#xFF0C;&#x8FDE;&#x63A5;&#x4E0E;&#x5220;&#x9664;"></a><font size="4">Numpy&#x63D2;&#x5165;&#xFF0C;&#x8FDE;&#x63A5;&#x4E0E;&#x5220;&#x9664;</font></h2><h3 id="append&#x65B9;&#x6CD5;"><a href="#append&#x65B9;&#x6CD5;" class="headerlink" title="append&#x65B9;&#x6CD5;"></a><font size="3">append&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(9).reshape((3, 3))</span><br><span class="line"></span><br><span class="line"># np.append(obj, array, axis=None) axis=None&#x65F6;&#xFF0C;&#x5C06;obj&#x5C55;&#x5F00;&#x4E3A;&#x4E00;&#x7EF4;&#x6570;&#x7EC4;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x4E0E;array&#x8FDE;&#x63A5;&#xFF0C;axis=0&#xFF0C;&#x5728;&#x7EB5;&#x5411;&#x8FDE;&#x63A5;&#x5728;&#x4E0B;&#x65B9;&#xFF0C;axis=1&#xFF0C;&#x5728;&#x6A2A;&#x5411;&#x8FDE;&#x63A5;&#x5728;&#x53F3;&#x65B9;</span><br><span class="line">b = np.append(a, [[9], [10], [11]])</span><br><span class="line">c = np.append(a, [[9,10,11]], axis=0)</span><br><span class="line">d = np.append(a, [[9], [10], [11]], axis=1)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy12.png" alt="12"></p><h3 id="insert&#x65B9;&#x6CD5;"><a href="#insert&#x65B9;&#x6CD5;" class="headerlink" title="insert&#x65B9;&#x6CD5;"></a><font size="3">insert&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(9).reshape((3, 3))</span><br><span class="line"></span><br><span class="line"># np.insert(obj, index, array, axis=None) axis&#x7684;&#x7528;&#x6CD5;&#x540C;append&#x4E00;&#x6837;&#xFF0C;&#x591A;&#x4E86;index&#x9879;&#xFF0C;&#x53EF;&#x4EE5;&#x63D2;&#x5165;&#x5230;&#x4EFB;&#x610F;&#x4F4D;&#x7F6E;,&#x4E14;&#x4F4D;&#x6570;&#x4E0D;&#x76F8;&#x540C;&#x65F6;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x5E7F;&#x64AD;&#x64CD;&#x4F5C;</span><br><span class="line">b = np.insert(a, 2, 9)</span><br><span class="line">c = np.insert(a, 2, 9, axis=0)</span><br><span class="line">d = np.insert(a, 2, 9, axis=1)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy13.png" alt="13"></p><h3 id="concatenate&#x65B9;&#x6CD5;"><a href="#concatenate&#x65B9;&#x6CD5;" class="headerlink" title="concatenate&#x65B9;&#x6CD5;"></a><font size="3">concatenate&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.array([[1, 2], [3, 4]])</span><br><span class="line">b = np.array([[5, 6], [7, 8]])</span><br><span class="line"></span><br><span class="line"># np.concatenate((obj1, obj2, ...), axis=0) &#x5728;axis&#x8F74;&#x4E0A;&#x8FDE;&#x63A5;&#x4E24;&#x4E2A;&#x6570;&#x7EC4;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;axis=0</span><br><span class="line">c = np.concatenate((a, b))</span><br><span class="line">d = np.concatenate((a, b), axis=1)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy15.png" alt="15"></p><h3 id="stack&#x65B9;&#x6CD5;"><a href="#stack&#x65B9;&#x6CD5;" class="headerlink" title="stack&#x65B9;&#x6CD5;"></a><font size="3">stack&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.array([[1, 2], [3, 4]])</span><br><span class="line">b = np.array([[5, 6], [7, 8]])</span><br><span class="line"></span><br><span class="line"># np.stack((obj1, obj2, ...), axis=0) &#x5728;axis&#x7EF4;&#x5EA6;&#x4E0A;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x8F74;&#xFF0C;&#x5E76;&#x5728;&#x6B64;&#x8F74;&#x4E0A;&#x8FDE;&#x63A5;&#x6570;&#x7EC4;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;axis=0</span><br><span class="line">c = np.stack((a, b))</span><br><span class="line">d = np.stack((a, b), axis=1)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy16.png" alt="16"></p><h3 id="delete&#x65B9;&#x6CD5;"><a href="#delete&#x65B9;&#x6CD5;" class="headerlink" title="delete&#x65B9;&#x6CD5;"></a><font size="3">delete&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(9).reshape((3, 3))</span><br><span class="line"></span><br><span class="line"># np.delete(obj, index, axis=None) axis&#x7684;&#x7528;&#x6CD5;&#x540C;append&#x4E00;&#x6837;&#xFF0C;&#x591A;&#x4E86;index&#x9879;&#xFF0C;&#x53EF;&#x4EE5;&#x5220;&#x9664;&#x4EFB;&#x610F;&#x4F4D;&#x7F6E;&#x7684;&#x5143;&#x7D20;</span><br><span class="line">b = np.delete(a, 1)</span><br><span class="line">c = np.delete(a, 1, axis=0)</span><br><span class="line">d = np.delete(a, 1, axis=1)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy14.png" alt="14"></p><h2 id="Numpy&#x5E7F;&#x64AD;&#x4E0E;&#x590D;&#x5236;"><a href="#Numpy&#x5E7F;&#x64AD;&#x4E0E;&#x590D;&#x5236;" class="headerlink" title="Numpy&#x5E7F;&#x64AD;&#x4E0E;&#x590D;&#x5236;"></a><font size="4">Numpy&#x5E7F;&#x64AD;&#x4E0E;&#x590D;&#x5236;</font></h2><h3 id="broadcast-to&#x65B9;&#x6CD5;"><a href="#broadcast-to&#x65B9;&#x6CD5;" class="headerlink" title="broadcast_to&#x65B9;&#x6CD5;"></a><font size="3">broadcast_to&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.array([[1, 2, 3]])</span><br><span class="line">b = np.array([[1], [2], [3]])</span><br><span class="line">c = np.array([1])</span><br><span class="line"></span><br><span class="line"># np.broadcast_to(obj, shape) &#x5C06;obj&#x5E7F;&#x64AD;&#x81F3;shape&#x5F62;&#x72B6;</span><br><span class="line"># &#x539F;&#x7406;&#x662F;&#x5982;&#x679C;obj&#x7684;&#x7EF4;&#x5EA6;&#x6570;&#x5C0F;&#x4E8E;shape&#xFF0C;&#x5219;&#x5728;&#x5BF9;&#x5E94;&#x7EF4;&#x5EA6;&#x4F4D;&#x7F6E;&#x4E0A;&#x8865;1&#xFF0C;&#x6269;&#x5C55;&#x6210;&#x76F8;&#x540C;&#x7EF4;&#x5EA6;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x6240;&#x6709;&#x7684;1&#x7EF4;&#x5EA6;&#x590D;&#x5236;i&#x6B21;&#xFF0C;i&#x4E3A;shape&#x4E2D;&#x76F8;&#x5E94;&#x7684;&#x7EF4;&#x5EA6;</span><br><span class="line">d = np.broadcast_to(a, (3, 3)) # a&#x7684;&#x7EF4;&#x5EA6;&#x4E3A;(1, 3),&#x7EF4;&#x5EA6;&#x4E0E;(3, 3)&#x6570;&#x91CF;&#x76F8;&#x540C;&#xFF0C;&#x5219;&#x5C06;1&#x590D;&#x5236;3&#x6B21;&#xFF0C;&#x53D8;&#x6210;(3, 3)</span><br><span class="line">e = np.broadcast_to(b, (3, 3)) # b&#x7684;&#x7EF4;&#x5EA6;&#x4E3A;(3, 1),&#x7EF4;&#x5EA6;&#x4E0E;(3, 3)&#x6570;&#x91CF;&#x76F8;&#x540C;&#xFF0C;&#x5219;&#x5C06;1&#x590D;&#x5236;3&#x6B21;&#xFF0C;&#x53D8;&#x6210;(3, 3)</span><br><span class="line">f = np.broadcast_to(c, (3, 3)) # c&#x7684;&#x7EF4;&#x5EA6;&#x4E3A;(1),&#x7EF4;&#x5EA6;&#x4E0E;(3, 3)&#x6570;&#x91CF;&#x4E0D;&#x76F8;&#x540C;&#xFF0C;&#x5219;&#x5728;&#x5BF9;&#x5E94;&#x7EF4;&#x5EA6;&#x4F4D;&#x7F6E;&#x4E0A;&#x8865;1&#xFF0C;&#x6269;&#x5C55;&#x6210;&#x76F8;&#x540C;&#x7EF4;&#x5EA6;&#xFF0C;&#x53D8;&#x6210;(1, 1)&#xFF0C;&#x7136;&#x540E;&#x5C06;1&#x590D;&#x5236;3&#x6B21;&#xFF0C;&#x53D8;&#x6210;(3, 3)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy17.png" alt="17"></p><h3 id="tile&#x65B9;&#x6CD5;"><a href="#tile&#x65B9;&#x6CD5;" class="headerlink" title="tile&#x65B9;&#x6CD5;"></a><font size="3">tile&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a=np.array([[1, 2], [3, 4]])</span><br><span class="line"></span><br><span class="line"># np.tile(obj, (m, n, ...)) &#x5C06;obj&#x7684;&#x7EF4;&#x5EA6;&#x590D;&#x5236;(m, n, ...)&#x6B21;</span><br><span class="line">b = np.tile(a, (2, 3))</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy18.png" alt="18"></p><h2 id="Numpy&#x6539;&#x53D8;&#x6570;&#x7EC4;&#x5F62;&#x72B6;"><a href="#Numpy&#x6539;&#x53D8;&#x6570;&#x7EC4;&#x5F62;&#x72B6;" class="headerlink" title="Numpy&#x6539;&#x53D8;&#x6570;&#x7EC4;&#x5F62;&#x72B6;"></a><font size="4">Numpy&#x6539;&#x53D8;&#x6570;&#x7EC4;&#x5F62;&#x72B6;</font></h2><h3 id="reshape&#x65B9;&#x6CD5;"><a href="#reshape&#x65B9;&#x6CD5;" class="headerlink" title="reshape&#x65B9;&#x6CD5;"></a><font size="3">reshape&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a=np.array([[1, 2, 3], [4, 5, 6]])</span><br><span class="line"></span><br><span class="line"># obj.reshape(shape) &#x5C06;obj&#x7684;&#x5F62;&#x72B6;&#x6539;&#x53D8;&#x4E3A;shape</span><br><span class="line">b = a.reshape((3, 2))</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy7.png" alt="7"></p><h3 id="resize&#x65B9;&#x6CD5;"><a href="#resize&#x65B9;&#x6CD5;" class="headerlink" title="resize&#x65B9;&#x6CD5;"></a><font size="3">resize&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(9).reshape(3, 3)</span><br><span class="line"></span><br><span class="line"># np.resize(obj, shape) &#x5C06;obj&#x7684;&#x5927;&#x5C0F;&#x8C03;&#x6574;&#x4E3A;shape&#xFF0C;&#x5148;&#x6309;&#x987A;&#x5E8F;&#x8BFB;&#x53D6;&#xFF0C;&#x5C11;&#x5219;&#x4ECE;&#x5934;&#x8865;&#x5165;&#x6570;&#x636E;&#xFF0C;&#x591A;&#x5219;&#x5220;&#x9664;&#x591A;&#x4F59;&#x6570;&#x636E;</span><br><span class="line">b = np.resize(a, (2, 2))</span><br><span class="line">c = np.resize(a, (4, 4))</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy19.png" alt="19"></p><h3 id="T-transpose-&#x65B9;&#x6CD5;"><a href="#T-transpose-&#x65B9;&#x6CD5;" class="headerlink" title="T(transpose)&#x65B9;&#x6CD5;"></a><font size="3">T(transpose)&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.array([[1, 2, 3], [4, 5, 6]])</span><br><span class="line"></span><br><span class="line"># obj.T &#x5C06;obj&#x8F6C;&#x7F6E;&#xFF0C;&#x7B49;&#x4EF7;&#x4E8E;np.transpose(obj)</span><br><span class="line">b = a.T</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy20.png" alt="20"></p><h3 id="swapaxes&#x65B9;&#x6CD5;"><a href="#swapaxes&#x65B9;&#x6CD5;" class="headerlink" title="swapaxes&#x65B9;&#x6CD5;"></a><font size="3">swapaxes&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(8).reshape(2, 2, 2)</span><br><span class="line"></span><br><span class="line"># np.swapaxes(obj, axis1, axis2) &#x4EA4;&#x6362;obj&#x7684;&#x4E24;&#x4E2A;&#x8F74;</span><br><span class="line">b = np.swapaxes(a, 0, 2)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy21.png" alt="21"></p><h3 id="expand-dims&#x65B9;&#x6CD5;"><a href="#expand-dims&#x65B9;&#x6CD5;" class="headerlink" title="expand_dims&#x65B9;&#x6CD5;"></a><font size="3">expand_dims&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.array([1, 2, 3])</span><br><span class="line"></span><br><span class="line"># np.expand_dims(obj, axis) &#x5728;&#x6307;&#x5B9A;axis&#x63D2;&#x5165;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x8F74;</span><br><span class="line">b = np.expand_dims(a, 0)</span><br><span class="line">c = np.expand_dims(a, 1)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy22.png" alt="22"></p><h3 id="squeeze&#x65B9;&#x6CD5;"><a href="#squeeze&#x65B9;&#x6CD5;" class="headerlink" title="squeeze&#x65B9;&#x6CD5;"></a><font size="3">squeeze&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.array([[1, 2, 3]])</span><br><span class="line">b = np.array([[1], [2], [3]])</span><br><span class="line"></span><br><span class="line"># np.squeeze(obj, axis) &#x5728;&#x6307;&#x5B9A;axis&#x5220;&#x9664;&#x8F74;&#xFF0C;&#x5982;&#x679C;&#x8BE5;&#x8F74;&#x7684;&#x5927;&#x5C0F;&#x4E0D;&#x4E3A;1&#xFF0C;&#x5219;&#x65E0;&#x6CD5;&#x5220;&#x9664;&#x62A5;&#x9519;</span><br><span class="line">c = np.squeeze(a, 0)</span><br><span class="line">d = np.squeeze(b, 1)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy23.png" alt="23"></p><h3 id="ravel&#xFF0C;flatten&#x65B9;&#x6CD5;"><a href="#ravel&#xFF0C;flatten&#x65B9;&#x6CD5;" class="headerlink" title="ravel&#xFF0C;flatten&#x65B9;&#x6CD5;"></a><font size="3">ravel&#xFF0C;flatten&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(9).reshape(3, 3)</span><br><span class="line">b = np.arange(9).reshape(3, 3)</span><br><span class="line"></span><br><span class="line"># obj.ravel(order=&apos;C&apos;) &#x5C06;obj&#x5C55;&#x5E73;&#x4E3A;&#x4E00;&#x4F4D;&#x6570;&#x7EC4;&#xFF0C;&#x4E14;&#x4FEE;&#x6539;&#x6309;&#x884C;&#x5C55;&#x5E73;&#x540E;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x539F;&#x6570;&#x636E;&#x53D7;&#x5230;&#x6539;&#x53D8;&#x3002;order=&apos;C&apos;(&#x6309;&#x884C;&#x5C55;&#x5E73;&#x5143;&#x7D20;)&#xFF0C;&apos;F&apos; (&#x6309;&#x5217;&#x5C55;&#x5E73;&#x5143;&#x7D20;)&#xFF0C;&apos;A&apos; (&#x6309;&#x539F;&#x987A;&#x5E8F;&#x5C55;&#x5E73;&#x5143;&#x7D20;)&#xFF0C;&apos;K&apos;(&#x6309;&#x5185;&#x5B58;&#x4E2D;&#x7684;&#x51FA;&#x73B0;&#x987A;&#x5E8F;&#x5C55;&#x5E73;&#x5143;&#x7D20;)</span><br><span class="line">c = a.ravel()</span><br><span class="line">d = a.ravel(&apos;F&apos;)</span><br><span class="line">c[1] += 1</span><br><span class="line"></span><br><span class="line"># obj.flatten(order=&apos;C&apos;) &#x5C06;obj&#x5C55;&#x5E73;&#x4E3A;&#x4E00;&#x4F4D;&#x6570;&#x7EC4;&#xFF0C;&#x4E14;&#x4FEE;&#x6539;&#x6309;&#x884C;&#x5C55;&#x5E73;&#x540E;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x539F;&#x6570;&#x636E;&#x4E0D;&#x53D7;&#x5230;&#x6539;&#x53D8;&#x3002;order&#x7528;&#x6CD5;&#x540C;ravel</span><br><span class="line">e = b.flatten()</span><br><span class="line">e[1] += 1</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy24.png" alt="24"></p><h2 id="Numpy&#x6570;&#x5B66;&#x8FD0;&#x7B97;"><a href="#Numpy&#x6570;&#x5B66;&#x8FD0;&#x7B97;" class="headerlink" title="Numpy&#x6570;&#x5B66;&#x8FD0;&#x7B97;"></a><font size="4">Numpy&#x6570;&#x5B66;&#x8FD0;&#x7B97;</font></h2><h3 id="&#x8FD0;&#x7B97;&#x7B26;&#x65B9;&#x6CD5;"><a href="#&#x8FD0;&#x7B97;&#x7B26;&#x65B9;&#x6CD5;" class="headerlink" title="&#x8FD0;&#x7B97;&#x7B26;&#x65B9;&#x6CD5;"></a><font size="3">&#x8FD0;&#x7B97;&#x7B26;&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(2, 10, 2).reshape(2, 2)</span><br><span class="line">b = np.arange(1, 5).reshape(2, 2)</span><br><span class="line"></span><br><span class="line"># &#x7B97;&#x672F;&#x8FD0;&#x7B97;(+&#xFF0C;-&#xFF0C;*&#xFF0C;/&#xFF0C;//&#xFF0C;%&#xFF0C;**&#xFF0C;&gt;&#xFF0C;&gt;=&#xFF0C;&lt;&#xFF0C;&lt;=&#xFF0C;==&#xFF0C;!=&#xFF0C;&amp;&#xFF0C;|&#xFF0C;^&#xFF0C;~&#xFF0C;&gt;&gt;&#xFF0C;&lt;&lt;)&#x8981;&#x6C42;&#x4E24;&#x4E2A;&#x6570;&#x7EC4;&#x5177;&#x6709;&#x540C;&#x6837;&#x7684;&#x5F62;&#x72B6;&#x6216;&#x8005;&#x53EF;&#x5E7F;&#x64AD;&#x4E3A;&#x540C;&#x6837;&#x5F62;&#x72B6;&#xFF0C;&#x903B;&#x8F91;&#x8FD0;&#x7B97;&#x8FD4;&#x56DE;&#x503C;&#x4E3A;True&#x6216;&#x8005;False</span><br><span class="line">c = a + b</span><br><span class="line">d = a - b</span><br><span class="line">e = a * b</span><br><span class="line">f = a / b</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy25.png" alt="25"></p><h3 id="&#x7279;&#x6B8A;&#x503C;&#xFF0C;&#x5BF9;&#x6570;&#x51FD;&#x6570;&#xFF0C;&#x4E09;&#x89D2;&#x51FD;&#x6570;&#x65B9;&#x6CD5;"><a href="#&#x7279;&#x6B8A;&#x503C;&#xFF0C;&#x5BF9;&#x6570;&#x51FD;&#x6570;&#xFF0C;&#x4E09;&#x89D2;&#x51FD;&#x6570;&#x65B9;&#x6CD5;" class="headerlink" title="&#x7279;&#x6B8A;&#x503C;&#xFF0C;&#x5BF9;&#x6570;&#x51FD;&#x6570;&#xFF0C;&#x4E09;&#x89D2;&#x51FD;&#x6570;&#x65B9;&#x6CD5;"></a><font size="3">&#x7279;&#x6B8A;&#x503C;&#xFF0C;&#x5BF9;&#x6570;&#x51FD;&#x6570;&#xFF0C;&#x4E09;&#x89D2;&#x51FD;&#x6570;&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># &#x7279;&#x6B8A;&#x503C;(&#x3C0;&#xFF0C;e&#xFF0C;&#x221E;&#xFF0C;Nan)</span><br><span class="line">a = np.pi / 2</span><br><span class="line">b = np.e</span><br><span class="line">c = np.inf</span><br><span class="line">d = np.nan</span><br><span class="line"></span><br><span class="line"># np.log(obj)&#xFF0C;np.log2(obj)&#xFF0C;np.log10(obj) &#x5BF9;obj&#x6C42;&#x4EE5;e&#x4E3A;&#x5E95;&#xFF0C;2&#x4E3A;&#x5E95;&#xFF0C;10&#x4E3A;&#x5E95;&#x7684;&#x5BF9;&#x6570;</span><br><span class="line">e = np.log([b, 2, 10])</span><br><span class="line">f = np.log2([b, 2, 10])</span><br><span class="line">g = np.log10([b, 2, 10])</span><br><span class="line"></span><br><span class="line"># np.sin(obj)&#xFF0C;np.arcsin(obj) &#x5BF9;obj&#x6C42;sin&#x503C;&#x548C;arcsin&#x503C;&#xFF0C;&#x6240;&#x7528;&#x7684;&#x4E3A;&#x5F27;&#x5EA6;&#x503C;</span><br><span class="line">h = np.sin(a)</span><br><span class="line">i = np.arcsin(h)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy27.png" alt="27"></p><h3 id="around&#xFF0C;floor&#xFF0C;ceil&#x65B9;&#x6CD5;"><a href="#around&#xFF0C;floor&#xFF0C;ceil&#x65B9;&#x6CD5;" class="headerlink" title="around&#xFF0C;floor&#xFF0C;ceil&#x65B9;&#x6CD5;"></a><font size="3">around&#xFF0C;floor&#xFF0C;ceil&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.array([3.33, 5.55, 88.88])</span><br><span class="line"></span><br><span class="line"># np.around(obj, decimals=0) &#x56DB;&#x820D;&#x4E94;&#x5165;&#x64CD;&#x4F5C;&#xFF0C;decimals&#x5927;&#x4E8E;0&#xFF0C;&#x56DB;&#x820D;&#x4E94;&#x5165;&#x5230;&#x5C0F;&#x6570;&#x70B9;&#x53F3;&#x4FA7;&#xFF0C;&#x5C0F;&#x4E8E;0&#xFF0C;&#x56DB;&#x820D;&#x4E94;&#x5165;&#x5230;&#x5C0F;&#x6570;&#x70B9;&#x5DE6;&#x4FA7;</span><br><span class="line">b = np.around(a)</span><br><span class="line">c = np.around(a, 1)</span><br><span class="line">d = np.around(a, -1)</span><br><span class="line"></span><br><span class="line"># np.floor(obj) &#x5411;&#x4E0B;&#x53D6;&#x6574;</span><br><span class="line">e = np.floor(a)</span><br><span class="line"></span><br><span class="line"># np.ceil(obj) &#x5411;&#x4E0A;&#x53D6;&#x6574;</span><br><span class="line">f = np.ceil(a)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy28.png" alt="28"></p><h3 id="sum&#xFF0C;cumsum&#xFF0C;cumprod&#x65B9;&#x6CD5;"><a href="#sum&#xFF0C;cumsum&#xFF0C;cumprod&#x65B9;&#x6CD5;" class="headerlink" title="sum&#xFF0C;cumsum&#xFF0C;cumprod&#x65B9;&#x6CD5;"></a><font size="3">sum&#xFF0C;cumsum&#xFF0C;cumprod&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.random.randint(0, 5, (3, 3))</span><br><span class="line"></span><br><span class="line"># np.sum(obj, axis=None) &#x5C06;obj&#x5143;&#x7D20;&#x7D2F;&#x52A0;&#xFF0C;axis=None&#x4EE3;&#x8868;&#x5168;&#x5C40;&#xFF0C;axis=0&#x4EE3;&#x8868;&#x6BCF;&#x5217;&#xFF0C;axis=1&#x4EE3;&#x8868;&#x6BCF;&#x884C;</span><br><span class="line">b = np.sum(a)</span><br><span class="line"></span><br><span class="line"># np.cumsum(obj, axis=None) &#x5C06;obj&#x9010;&#x9879;&#x7D2F;&#x52A0;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;np.sum</span><br><span class="line">c = np.cumsum(a)</span><br><span class="line">d = np.cumsum(a, 0)</span><br><span class="line"></span><br><span class="line"># np.cumprod(obj, axis=None) &#x5C06;obj&#x9010;&#x9879;&#x7D2F;&#x4E58;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;np.sum</span><br><span class="line">e = np.cumprod(a)</span><br><span class="line">f = np.cumprod(a, 1)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy32.png" alt="32"></p><h3 id="ptp&#x65B9;&#x6CD5;"><a href="#ptp&#x65B9;&#x6CD5;" class="headerlink" title="ptp&#x65B9;&#x6CD5;"></a><font size="3">ptp&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.random.randint(0, 5, (3, 3))</span><br><span class="line"></span><br><span class="line"># np.ptp(obj, axis=None) &#x8BA1;&#x7B97;axis&#x8F74;&#x4E0A;&#x6700;&#x5927;&#x503C;&#x51CF;&#x6700;&#x5C0F;&#x503C;&#x7684;&#x7ED3;&#x679C;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;np.sum</span><br><span class="line">b = np.ptp(a)</span><br><span class="line">c = np.ptp(a, 0)</span><br><span class="line">d = np.ptp(a, 1)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy33.png" alt="33"></p><h3 id="diff&#x65B9;&#x6CD5;"><a href="#diff&#x65B9;&#x6CD5;" class="headerlink" title="diff&#x65B9;&#x6CD5;"></a><font size="3">diff&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.random.randint(0, 10, (5, 5))</span><br><span class="line"></span><br><span class="line"># np.diff(obj, n, axis) &#x8BA1;&#x7B97;n&#x9636;&#x5DEE;&#x5206;&#x8FD0;&#x7B97;&#xFF0C;axis&#x9ED8;&#x8BA4;&#x4E3A;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;</span><br><span class="line">b = np.diff(a, 1)</span><br><span class="line">c = np.diff(a, 2)</span><br><span class="line">d = np.diff(a, 1, 0)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy36.png" alt="36"></p><h3 id="clip&#x65B9;&#x6CD5;"><a href="#clip&#x65B9;&#x6CD5;" class="headerlink" title="clip&#x65B9;&#x6CD5;"></a><font size="3">clip&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.random.randint(0, 10, (5, 5))</span><br><span class="line"></span><br><span class="line"># np.clip(obj, min_, max_) &#x5C06;obj&#x4E2D;&#x5C0F;&#x4E8E;min_&#x7684;&#x503C;&#x8D4B;&#x503C;&#x4E3A;min_&#xFF0C;&#x5C06;obj&#x4E2D;&#x5927;&#x4E8E;max_&#x7684;&#x503C;&#x8D4B;&#x503C;&#x4E3A;max_</span><br><span class="line">b = np.clip(a, 3, 7)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy37.png" alt="37"></p><h2 id="Numpy&#x6570;&#x7406;&#x7EDF;&#x8BA1;"><a href="#Numpy&#x6570;&#x7406;&#x7EDF;&#x8BA1;" class="headerlink" title="Numpy&#x6570;&#x7406;&#x7EDF;&#x8BA1;"></a><font size="4">Numpy&#x6570;&#x7406;&#x7EDF;&#x8BA1;</font></h2><h3 id="unique&#x65B9;&#x6CD5;"><a href="#unique&#x65B9;&#x6CD5;" class="headerlink" title="unique&#x65B9;&#x6CD5;"></a><font size="3">unique&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.random.randint(0, 10, (5, 5))</span><br><span class="line"></span><br><span class="line"># np.unique(obj, return_index, return_inverse, return_counts) &#x7EDF;&#x8BA1;&#x5F97;&#x5230;&#x4E0D;&#x91CD;&#x590D;&#x5143;&#x7D20;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x662F;&#x4E00;&#x7EF4;&#x6570;&#x7EC4;&#xFF0C;&#x4F1A;&#x5C06;&#x6570;&#x7EC4;&#x5C55;&#x5F00;&#x3002;return_index=True&#x8FD4;&#x56DE;&#x4E0D;&#x91CD;&#x590D;&#x5143;&#x7D20;&#x5728;&#x539F;&#x6570;&#x7EC4;&#x4E2D;&#x7B2C;&#x4E00;&#x6B21;&#x51FA;&#x73B0;&#x7684;&#x7D22;&#x5F15;&#xFF0C;return_inverse=&#x8FD4;&#x56DE;&#x539F;&#x6570;&#x7EC4;&#x5728;&#x4E0D;&#x91CD;&#x590D;&#x5143;&#x7D20;&#x4E2D;&#x7684;&#x7D22;&#x5F15;, return_counts=&#x8FD4;&#x56DE;&#x6BCF;&#x4E2A;&#x4E0D;&#x91CD;&#x590D;&#x5143;&#x7D20;&#x5728;&#x539F;&#x6570;&#x7EC4;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;</span><br><span class="line">b, index, inverse, counts = np.unique(a, True, True, True)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy29.png" alt="29"></p><h3 id="any&#xFF0C;all&#x65B9;&#x6CD5;"><a href="#any&#xFF0C;all&#x65B9;&#x6CD5;" class="headerlink" title="any&#xFF0C;all&#x65B9;&#x6CD5;"></a><font size="3">any&#xFF0C;all&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.random.randint(0, 10, (5, 5))</span><br><span class="line"></span><br><span class="line"># np.any(obj) &#x5224;&#x65AD;obj&#x4E2D;&#x662F;&#x5426;&#x5B58;&#x5728;True</span><br><span class="line">b = np.any(a &gt; 5)</span><br><span class="line">c = np.any(a &gt; 10)</span><br><span class="line"></span><br><span class="line"># np.all(obj) &#x5224;&#x65AD;obj&#x4E2D;&#x662F;&#x5426;&#x5168;&#x90FD;&#x662F;True</span><br><span class="line">d = np.all(a &gt;= 0)</span><br><span class="line">e = np.all(a &gt; 5)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy35.png" alt="35"></p><h3 id="&#x7EDF;&#x8BA1;&#x65B9;&#x6CD5;"><a href="#&#x7EDF;&#x8BA1;&#x65B9;&#x6CD5;" class="headerlink" title="&#x7EDF;&#x8BA1;&#x65B9;&#x6CD5;"></a><font size="3">&#x7EDF;&#x8BA1;&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.random.randint(0, 10, (5, 5))</span><br><span class="line"></span><br><span class="line"># np.amax(obj, axis=None)&#xFF0C;np.amin(obj, axis=None) &#x7EDF;&#x8BA1;&#x6700;&#x5927;&#x6700;&#x5C0F;&#x503C;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;np.sum</span><br><span class="line">np.amax(a)</span><br><span class="line">np.amax(a,0)</span><br><span class="line">np.amax(a,1)</span><br><span class="line"></span><br><span class="line"># np.argmax(obj, axis=None)&#xFF0C;np.argmin(obj, axis=None) &#x7EDF;&#x8BA1;&#x6700;&#x5927;&#x6700;&#x5C0F;&#x503C;&#x7684;&#x7D22;&#x5F15;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;np.sum</span><br><span class="line">np.argmax(a)</span><br><span class="line">np.argmax(a,0)</span><br><span class="line">np.argmax(a,1)</span><br><span class="line"></span><br><span class="line"># np.mean(obj, axis=None) &#x7EDF;&#x8BA1;&#x4E2D;&#x4F4D;&#x6570;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;np.sum</span><br><span class="line">np.median(a)</span><br><span class="line"></span><br><span class="line"># np.mean(obj, axis=None) &#x7EDF;&#x8BA1;&#x5747;&#x503C;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;np.sum</span><br><span class="line">np.mean(a)</span><br><span class="line"></span><br><span class="line"># np.mean(obj, axis=None, weights=None) &#x7EDF;&#x8BA1;&#x52A0;&#x6743;&#x5E73;&#x5747;&#x503C;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;np.sum</span><br><span class="line">np.average(a, None, a)</span><br><span class="line"></span><br><span class="line"># np.mean(obj, axis=None) &#x7EDF;&#x8BA1;&#x6807;&#x51C6;&#x5DEE;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;np.sum</span><br><span class="line">np.std(a)</span><br><span class="line"></span><br><span class="line"># np.mean(obj, axis=None) &#x7EDF;&#x8BA1;&#x65B9;&#x5DEE;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;np.sum</span><br><span class="line">np.var(a)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy30.png" alt="30"></p><h3 id="sort&#xFF0C;argsort&#x65B9;&#x6CD5;"><a href="#sort&#xFF0C;argsort&#x65B9;&#x6CD5;" class="headerlink" title="sort&#xFF0C;argsort&#x65B9;&#x6CD5;"></a><font size="3">sort&#xFF0C;argsort&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.random.randint(0, 5, (3, 3))</span><br><span class="line"></span><br><span class="line"># np.sort(obj, axis, kind=&apos;quicksort&apos;, order=None) &#x5BF9;obj&#x8FDB;&#x884C;&#x4ECE;&#x5C0F;&#x5230;&#x8FBE;&#x6392;&#x5E8F;&#xFF0C;axis&#x4E3A;&#x6307;&#x5B9A;&#x8981;&#x6392;&#x5E8F;&#x7684;&#x8F74;&#xFF0C;axis=0&#x6309;&#x5217;&#x6392;&#x5E8F;&#xFF0C;axis=1&#x6309;&#x884C;&#x6392;&#x5E8F;&#x3002;kind&#x4E3A;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&apos;quicksort&apos;(&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#xFF0C;&#x9ED8;&#x8BA4;)&#xFF0C;&apos;mergesort&apos;(&#x5F52;&#x5E76;&#x6392;&#x5E8F;)&#xFF0C;&apos;heapsort&apos;(&#x5806;&#x6392;&#x5E8F;)&#xFF0C;order&#x4E3A;&#x8981;&#x6392;&#x5E8F;&#x7684;&#x5B57;&#x6BB5;&#xFF0C;&#x4E00;&#x822C;&#x6570;&#x5B66;&#x8FD0;&#x7B97;&#x4E0D;&#x7528;</span><br><span class="line">b = np.sort(a, 0)</span><br><span class="line">c = np.sort(a, 1)</span><br><span class="line"></span><br><span class="line"># np.argsort(obj, axis, kind=&apos;quicksort&apos;, order=None) &#x8FD4;&#x56DE;&#x6392;&#x5E8F;&#x540E;&#x7684;&#x6570;&#x7EC4;&#x5728;&#x539F;&#x6570;&#x7EC4;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x7528;&#x6CD5;&#x540C;sort</span><br><span class="line">d = np.argsort(a, 0)</span><br><span class="line">e = np.argsort(a, 1)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy31.png" alt="31"></p><h2 id="Numpy&#x7EBF;&#x6027;&#x4EE3;&#x6570;"><a href="#Numpy&#x7EBF;&#x6027;&#x4EE3;&#x6570;" class="headerlink" title="Numpy&#x7EBF;&#x6027;&#x4EE3;&#x6570;"></a><font size="4">Numpy&#x7EBF;&#x6027;&#x4EE3;&#x6570;</font></h2><h3 id="dot&#xFF0C;matmul&#x65B9;&#x6CD5;"><a href="#dot&#xFF0C;matmul&#x65B9;&#x6CD5;" class="headerlink" title="dot&#xFF0C;matmul&#x65B9;&#x6CD5;"></a><font size="3">dot&#xFF0C;matmul&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(6).reshape(2, 3)</span><br><span class="line">b = np.arange(6).reshape(3, 2)</span><br><span class="line"></span><br><span class="line"># np.dot(obj1, obj2) &#x7B49;&#x4EF7;&#x4E8E;np.matmul(obj1, obj2)&#xFF0C;&#x77E9;&#x9635;&#x4E58;&#x6CD5;</span><br><span class="line">c = np.dot(a, b)</span><br><span class="line">d = np.matmul(a, b)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy38.png" alt="38"></p><h3 id="det&#xFF0C;eig&#xFF0C;pinv&#x65B9;&#x6CD5;"><a href="#det&#xFF0C;eig&#xFF0C;pinv&#x65B9;&#x6CD5;" class="headerlink" title="det&#xFF0C;eig&#xFF0C;pinv&#x65B9;&#x6CD5;"></a><font size="3">det&#xFF0C;eig&#xFF0C;pinv&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.array([[-2, 1, 1], [0, 2, 0], [-4, 1, 3]])</span><br><span class="line"></span><br><span class="line"># np.linalg.det(obj) &#x8BA1;&#x7B97;obj&#x7684;&#x884C;&#x5217;&#x5F0F;</span><br><span class="line">b = np.linalg.det(a)</span><br><span class="line"></span><br><span class="line"># np.linalg.eig(obj) &#x8BA1;&#x7B97;obj&#x7684;&#x7279;&#x5F81;&#x503C;&#x548C;&#x7279;&#x5F81;&#x5411;&#x91CF;</span><br><span class="line">c = np.linalg.eig(a)</span><br><span class="line"></span><br><span class="line"># np.linalg.pinv(obj) &#x8BA1;&#x7B97;obj&#x7684;&#x4F2A;&#x9006;&#x77E9;&#x9635;</span><br><span class="line">d = np.linalg.pinv(a)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy39.png" alt="39"></p><h3 id="solve&#x65B9;&#x6CD5;"><a href="#solve&#x65B9;&#x6CD5;" class="headerlink" title="solve&#x65B9;&#x6CD5;"></a><font size="3">solve&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.array([[2, 2, -1], [1, -2, 4], [5, 8, -1]])</span><br><span class="line">b = np.array([[6], [3], [27]])</span><br><span class="line"></span><br><span class="line"># np.linalg.solve(A, b) &#x6C42;&#x7EBF;&#x6027;&#x65B9;&#x7A0B;&#x7EC4;Ax = b&#x7684;&#x89E3;</span><br><span class="line">c = np.linalg.solve(a, b)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy31.png" alt="31"></p><h2 id="Numpy&#x6570;&#x636E;&#x4FDD;&#x5B58;"><a href="#Numpy&#x6570;&#x636E;&#x4FDD;&#x5B58;" class="headerlink" title="Numpy&#x6570;&#x636E;&#x4FDD;&#x5B58;"></a><font size="4">Numpy&#x6570;&#x636E;&#x4FDD;&#x5B58;</font></h2><h3 id="save&#xFF0C;load&#x65B9;&#x6CD5;"><a href="#save&#xFF0C;load&#x65B9;&#x6CD5;" class="headerlink" title="save&#xFF0C;load&#x65B9;&#x6CD5;"></a><font size="3">save&#xFF0C;load&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(12).reshape(3, 4)</span><br><span class="line"></span><br><span class="line"># np.save(filename, obj) &#x5C06;obj&#x4FDD;&#x5B58;&#x5728;&#x6587;&#x4EF6;&#x540D;&#x4E3A;filename&#x7684;.npy&#x6587;&#x4EF6;&#x4E2D;(&#x53EF;&#x4EE5;&#x4E0D;&#x52A0;.npy&#x6269;&#x5C55;&#x540D;)</span><br><span class="line">np.save(&apos;save1&apos;, a)</span><br><span class="line"></span><br><span class="line"># np.load(filename) &#x8BFB;&#x53D6;&#x6587;&#x4EF6;&#x540D;&#x4E3A;filename&#x7684;&#x6570;&#x7EC4;&#x6570;&#x636E;(&#x8981;&#x52A0;.npy&#x6269;&#x5C55;&#x540D;)</span><br><span class="line">b = np.load(&apos;save1.npy&apos;)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy41.png" alt="41"></p><h3 id="savez&#x65B9;&#x6CD5;"><a href="#savez&#x65B9;&#x6CD5;" class="headerlink" title="savez&#x65B9;&#x6CD5;"></a><font size="3">savez&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(12).reshape(3, 4)</span><br><span class="line">b = np.arange(6).reshape(2, 3)</span><br><span class="line"></span><br><span class="line"># np.savez(filename, name1=obj1, name2=obj2, ...) &#x5C06;&#x591A;&#x4E2A;&#x6570;&#x636E;&#x4FDD;&#x5B58;&#x5728;&#x6587;&#x4EF6;&#x540D;&#x4E3A;filename&#x7684;.npz&#x6587;&#x4EF6;&#x4E2D;(&#x53EF;&#x4EE5;&#x4E0D;&#x52A0;.npz&#x6269;&#x5C55;&#x540D;)&#xFF0C;obj1&#x7684;&#x53D8;&#x91CF;&#x540D;&#x4E3A;name1&#xFF0C;obj2&#x7684;&#x53D8;&#x91CF;&#x540D;&#x4E3A;name2&#xFF0C;&#x2026;&#x2026;(&#x53D8;&#x91CF;&#x7684;&#x9ED8;&#x8BA4;&#x540D;&#x79F0;&#x4E3A;arr_0&#xFF0C;arr_1&#xFF0C;&#x2026;&#x2026;)</span><br><span class="line">np.savez(&apos;save2&apos;, no_1=a, no_2=b)</span><br><span class="line">np.savez(&apos;save3&apos;, a, b)</span><br><span class="line"></span><br><span class="line"># np.load(filename) &#x8BFB;&#x53D6;&#x6587;&#x4EF6;&#x540D;&#x4E3A;filename&#x7684;&#x6570;&#x7EC4;&#x6570;&#x636E;(&#x8981;&#x52A0;.npz&#x6269;&#x5C55;&#x540D;)</span><br><span class="line">c = np.load(&apos;save2.npz&apos;)</span><br><span class="line">d = np.load(&apos;save3.npz&apos;)</span><br><span class="line"></span><br><span class="line"># &#x63D0;&#x53D6;&#x6570;&#x636E;&#x65F6;&#x8981;&#x4F7F;&#x7528;&#x6570;&#x7EC4;&#x7684;&#x540D;&#x79F0;</span><br><span class="line">e = c[&apos;no_1&apos;]</span><br><span class="line">f = c[&apos;no_2&apos;]</span><br><span class="line">g = d[&apos;arr_0&apos;]</span><br><span class="line">h = d[&apos;arr_1&apos;]</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy42.png" alt="42"></p><h3 id="savetxt&#xFF0C;loadtxt&#x65B9;&#x6CD5;"><a href="#savetxt&#xFF0C;loadtxt&#x65B9;&#x6CD5;" class="headerlink" title="savetxt&#xFF0C;loadtxt&#x65B9;&#x6CD5;"></a><font size="3">savetxt&#xFF0C;loadtxt&#x65B9;&#x6CD5;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(12).reshape(3, 4)</span><br><span class="line">b = np.array([1,2,3,4])</span><br><span class="line">c = np.array([5,6,7,8])</span><br><span class="line"></span><br><span class="line"># np.savetxt(filename, obj, fmt=&apos;%f&apos;, delimiter=&apos; &apos;) &#x5C06;&#x591A;&#x4E2A;&#x4E00;&#x7EF4;&#x6570;&#x636E;(&#x76F8;&#x540C;&#x5927;&#x5C0F;)&#x6216;&#x8005;&#x4E00;&#x4E2A;&#x4E8C;&#x7EF4;&#x7EF4;&#x6570;&#x636E;&#x4FDD;&#x5B58;&#x5728;&#x6587;&#x4EF6;&#x540D;&#x4E3A;filename&#x7684;.txt&#x6587;&#x4EF6;&#x4E2D;(&#x8981;&#x52A0;.txt&#x6269;&#x5C55;&#x540D;)&#xFF0C;&#x683C;&#x5F0F;&#x4E3A;fmt(&#x9ED8;&#x8BA4;&#x4E3A;&#x6D6E;&#x70B9;&#x578B;)&#xFF0C;&#x5206;&#x9694;&#x7B26;&#x4E3A;delimiter(&#x9ED8;&#x8BA4;&#x4E3A;&apos; &apos;)&#xFF0C;&#x4FDD;&#x5B58;&#x65F6;&#x4F1A;&#x5C06;&#x591A;&#x4E2A;&#x4E00;&#x7EF4;&#x6570;&#x7EC4;&#x8F6C;&#x5316;&#x6210;&#x4E00;&#x4E2A;&#x4E8C;&#x7EF4;&#x6570;&#x7EC4;</span><br><span class="line">np.savetxt(&apos;save4.txt&apos;, a)</span><br><span class="line">np.savetxt(&apos;save5.txt&apos;, (b, c))</span><br><span class="line"></span><br><span class="line"># np.loadtxt(filename, dtype=&apos;float&apos;, delimiter=&apos; &apos;) &#x8BFB;&#x53D6;&#x6587;&#x4EF6;&#x540D;&#x4E3A;filename&#x7684;&#x6570;&#x7EC4;&#x6570;&#x636E;(&#x8981;&#x52A0;.txt&#x6269;&#x5C55;&#x540D;)&#xFF0C;&#x7C7B;&#x578B;&#x4E3A;dtypefloat(&#x9ED8;&#x8BA4;&#x4E3A;&#x6D6E;&#x70B9;&#x578B;)&#xFF0C;&#x5206;&#x9694;&#x7B26;&#x4E3A;delimiter(&#x9ED8;&#x8BA4;&#x4E3A;&apos; &apos;)</span><br><span class="line">d = np.loadtxt(&apos;save4.txt&apos;)</span><br><span class="line">e = np.loadtxt(&apos;save5.txt&apos;)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/numpy43.png" alt="43"></p><h1 id="Numpy&#x5C0F;&#x7ED3;"><a href="#Numpy&#x5C0F;&#x7ED3;" class="headerlink" title="Numpy&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Numpy&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x7531;&#x4E8E;numpy&#x652F;&#x6301;&#x5404;&#x79CD;&#x77E9;&#x9635;&#x8FD0;&#x7B97;&#xFF0C;&#x4E14;&#x8FD0;&#x7B97;&#x6548;&#x7387;&#x975E;&#x5E38;&#x9AD8;&#xFF0C;&#x56E0;&#x6B64;numpy&#x5E93;&#x5E7F;&#x6CDB;&#x5E94;&#x7528;&#x4E8E;&#x6570;&#x636E;&#x5206;&#x6790;&#xFF0C;&#x673A;&#x5668;&#x5B66;&#x4E60;&#xFF0C;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7B49;&#x5404;&#x4E2A;&#x9886;&#x57DF;&#xFF0C;&#x5176;&#x4F5C;&#x4E3A;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x4E09;&#x5251;&#x5BA2;&#x4E4B;&#x4E00;&#xFF0C;&#x4E5F;&#x53D7;&#x5230;&#x5E7F;&#x5927;&#x4F7F;&#x7528;&#x8005;&#x7684;&#x559C;&#x7231;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Numpy&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="python" scheme="https://USTCcoder.github.io/categories/python/"/>
    
      <category term="常用库" scheme="https://USTCcoder.github.io/categories/python/%E5%B8%B8%E7%94%A8%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Scikit-Learn</title>
    <link href="https://USTCcoder.github.io/2019/08/12/library%20Sklearn/"/>
    <id>https://USTCcoder.github.io/2019/08/12/library Sklearn/</id>
    <published>2019-08-12T12:29:15.000Z</published>
    <updated>2019-10-13T01:22:27.306Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/LIBRARY/sklearn.jpg" alt="0"></p><h1 id="Scikit-Learn&#x4ECB;&#x7ECD;"><a href="#Scikit-Learn&#x4ECB;&#x7ECD;" class="headerlink" title="Scikit-Learn&#x4ECB;&#x7ECD;"></a><font size="5" color="red">Scikit-Learn&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;Scikit-Learn&#x5E93;&#x81EA;2007&#x5E74;&#x53D1;&#x5E03;&#x4EE5;&#x6765;&#xFF0C;&#x5DF2;&#x7ECF;&#x79F0;&#x4E3A;&#x6700;&#x53D7;&#x6B22;&#x8FCE;&#x7684;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x5E93;&#x4E4B;&#x4E00;&#xFF0C;&#x57FA;&#x4E8E;&#x5E7F;&#x53D7;&#x6B22;&#x8FCE;&#x7684;Numpy&#x548C;Scipy&#x5E93;&#x6784;&#x5EFA;&#xFF0C;&#x80FD;&#x591F;&#x63D0;&#x4F9B;&#x7528;&#x4E8E;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x6570;&#x636E;&#x9884;&#x5904;&#x7406;&#x7B49;&#x529F;&#x80FD;&#x3002;<br><a id="more"></a></p><h1 id="Scikit-Learn&#x5E94;&#x7528;"><a href="#Scikit-Learn&#x5E94;&#x7528;" class="headerlink" title="Scikit-Learn&#x5E94;&#x7528;"></a><font size="5" color="red">Scikit-Learn&#x5E94;&#x7528;</font></h1><h2 id="Scikit-Learn&#x7EBF;&#x6027;&#x56DE;&#x5F52;"><a href="#Scikit-Learn&#x7EBF;&#x6027;&#x56DE;&#x5F52;" class="headerlink" title="Scikit-Learn&#x7EBF;&#x6027;&#x56DE;&#x5F52;"></a><font size="4">Scikit-Learn&#x7EBF;&#x6027;&#x56DE;&#x5F52;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from sklearn.linear_model import LinearRegression</span><br><span class="line"></span><br><span class="line">x_train = np.array([[6], [8], [10], [14], [18]]).reshape(-1, 1)</span><br><span class="line">y_train = np.array([7, 9, 13, 17.5, 18])</span><br><span class="line"></span><br><span class="line"># model = LinearRegression() &#x521B;&#x5EFA;&#x7EBF;&#x6027;&#x56DE;&#x5F52;&#x6A21;&#x578B;</span><br><span class="line">model = LinearRegression()</span><br><span class="line"></span><br><span class="line"># model.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;</span><br><span class="line">model.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line">x_test = np.array([[12]]).reshape(-1, 1)</span><br><span class="line"></span><br><span class="line"># model.predict(X) &#x7528;&#x8BAD;&#x7EC3;&#x540E;&#x7684;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x6570;&#x636E;X</span><br><span class="line">y_test = model.predict(x_test)[0]</span><br><span class="line"></span><br><span class="line">x_max, x_min = max(x_train), min(x_train)</span><br><span class="line">y_max, y_min = model.predict([x_max, x_min])</span><br><span class="line"></span><br><span class="line"># model.coef_ &#x83B7;&#x53D6;&#x6A21;&#x578B;&#x7684;&#x6743;&#x503C;&#x7CFB;&#x6570;</span><br><span class="line">k = model.coef_[0]</span><br><span class="line">x_mean, y_mean = np.mean(x_train), np.mean(y_train)</span><br><span class="line">b = y_mean - k * x_mean</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.title(&apos;Pizza price against diameter:\n&apos; + str(k) + &apos;x + &apos; + str(b) + &apos;= y&apos;)</span><br><span class="line">plt.xlabel(&apos;Pizza diamter&apos;)</span><br><span class="line">plt.ylabel(&apos;Pizza price&apos;)</span><br><span class="line">plt.plot(x_train, y_train, &apos;k.&apos;, label=&apos;train_dot&apos;)</span><br><span class="line">plt.plot(x_test, y_test, &apos;ro&apos;, label=&apos;predict_dot&apos;)</span><br><span class="line">plt.plot([x_max, x_min], [y_max, y_min])</span><br><span class="line">plt.text(x_test, y_test, &apos;(&apos; + str(x_test[0][0]) + &apos;,&apos; + str(y_test) + &apos;)&apos;)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.grid(True)</span><br><span class="line">plt.style.use(&apos;ggplot&apos;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/sklearn1.png" alt="1"></p><h2 id="Scikit-LearnK&#x8FD1;&#x90BB;&#x5206;&#x7C7B;&#x7B97;&#x6CD5;"><a href="#Scikit-LearnK&#x8FD1;&#x90BB;&#x5206;&#x7C7B;&#x7B97;&#x6CD5;" class="headerlink" title="Scikit-LearnK&#x8FD1;&#x90BB;&#x5206;&#x7C7B;&#x7B97;&#x6CD5;"></a><font size="4">Scikit-LearnK&#x8FD1;&#x90BB;&#x5206;&#x7C7B;&#x7B97;&#x6CD5;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from sklearn.preprocessing import LabelBinarizer</span><br><span class="line">from sklearn.neighbors import KNeighborsClassifier</span><br><span class="line">from sklearn.metrics import accuracy_score</span><br><span class="line">from sklearn.metrics import precision_score</span><br><span class="line">from sklearn.metrics import recall_score</span><br><span class="line">from sklearn.metrics import f1_score</span><br><span class="line">from sklearn.metrics import matthews_corrcoef</span><br><span class="line">from sklearn.metrics import classification_report</span><br><span class="line"></span><br><span class="line">def classify(x, y):</span><br><span class="line">    male_height, male_weight, female_height, female_weight = [], [], [], []</span><br><span class="line">    for i in range(len(x)):</span><br><span class="line">        if y[i] == &apos;male&apos;:</span><br><span class="line">            male_height.append(x[i][0])</span><br><span class="line">            male_weight.append(x[i][1])</span><br><span class="line">        else:</span><br><span class="line">            female_height.append(x[i][0])</span><br><span class="line">            female_weight.append(x[i][1])</span><br><span class="line">    return male_height, male_weight, female_height, female_weight</span><br><span class="line"></span><br><span class="line">x_train = np.array([[158, 64], [170, 66], [183, 84], [191, 80], [155, 49], [163, 59], [180, 67], [158, 54], [178, 77]])</span><br><span class="line">y_train = [&apos;male&apos;, &apos;male&apos;, &apos;male&apos;, &apos;male&apos;, &apos;female&apos;, &apos;female&apos;, &apos;female&apos;, &apos;female&apos;, &apos;female&apos;] </span><br><span class="line"></span><br><span class="line"># lb = LabelBinarizer() &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x6807;&#x7B7E;&#x8F6C;&#x6362;&#x5668;&#x63A5;&#x53E3;&#xFF0C;&#x5C06;&#x6807;&#x7B7E;&#x53D8;&#x6210;&#x6574;&#x6570;</span><br><span class="line">lb = LabelBinarizer()</span><br><span class="line"></span><br><span class="line"># lb.fit_transform(y) &#x5728;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x96C6;&#x4E0A;&#x5BF9;&#x6807;&#x7B7E;&#x8FDB;&#x884C;&#x62DF;&#x5408;&#x5E76;&#x8F6C;&#x6362;&#x4E3A;&#x6574;&#x6570;</span><br><span class="line">y_train_binarized = lb.fit_transform(y_train)</span><br><span class="line"></span><br><span class="line">k = 3</span><br><span class="line"></span><br><span class="line"># clf = KNeighborsClassifier(n_neighbors=k) &#x521B;&#x5EFA;KNN&#x5206;&#x7C7B;&#x5668;&#x6A21;&#x578B;</span><br><span class="line">clf = KNeighborsClassifier(n_neighbors=k)</span><br><span class="line"></span><br><span class="line"># clf.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;</span><br><span class="line">clf.fit(x_train,y_train_binarized.reshape(-1))</span><br><span class="line"></span><br><span class="line">x_test = np.array([[168, 65], [170, 61], [160, 52], [169, 67]])</span><br><span class="line">y_test = [&apos;male&apos;, &apos;male&apos;, &apos;female&apos;, &apos;female&apos;]</span><br><span class="line"></span><br><span class="line"># clf.predict(X) &#x7528;&#x8BAD;&#x7EC3;&#x540E;&#x7684;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x6570;&#x636E;X</span><br><span class="line">y_pre_binarized = clf.predict(x_test)</span><br><span class="line"></span><br><span class="line"># lb.inverse_transform(Y) &#x5C06;&#x9884;&#x6D4B;&#x540E;&#x7684;&#x6574;&#x6570;&#x8F6C;&#x6362;&#x6210;&#x6807;&#x7B7E;</span><br><span class="line">y_pre = lb.inverse_transform(y_pre_binarized)</span><br><span class="line"></span><br><span class="line">male_height_train, male_weight_train, female_height_train, female_weight_train = classify(x_train, y_train)</span><br><span class="line">male_height_pre, male_weight_pre, female_height_pre, female_weight_pre = classify(x_test, y_pre)</span><br><span class="line"></span><br><span class="line">y_test_binarized = lb.transform(y_test).T[0]</span><br><span class="line">print(y_test_binarized)</span><br><span class="line">print(y_pre_binarized)</span><br><span class="line"></span><br><span class="line"># accuracy_score(y_test, y_predict) &#x6C42;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x51C6;&#x786E;&#x7387;</span><br><span class="line">print(&apos;&#x9884;&#x6D4B;&#x51C6;&#x786E;&#x7387;&#x4E3A;:%.2f&apos; %accuracy_score(y_test_binarized, y_pre_binarized))</span><br><span class="line"></span><br><span class="line"># precision_score(y_test, y_predict) &#x6C42;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x7CBE;&#x51C6;&#x7387;</span><br><span class="line">print(&apos;&#x9884;&#x6D4B;&#x7CBE;&#x51C6;&#x7387;&#x4E3A;:%.2f&apos; %precision_score(y_test_binarized, y_pre_binarized))</span><br><span class="line"></span><br><span class="line"># recall_score(y_test, y_predict) &#x6C42;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x53EC;&#x56DE;&#x7387;</span><br><span class="line">print(&apos;&#x9884;&#x6D4B;&#x53EC;&#x56DE;&#x7387;&#x4E3A;:%.2f&apos; %recall_score(y_test_binarized, y_pre_binarized))</span><br><span class="line"></span><br><span class="line"># f1_score(y_test, y_predict) &#x6C42;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;F1&#x5F97;&#x5206;</span><br><span class="line">print(&apos;&#x9884;&#x6D4B;F1&#x5F97;&#x5206;&#x4E3A;:%.2f&apos; %f1_score(y_test_binarized, y_pre_binarized))</span><br><span class="line"></span><br><span class="line"># matthews_corrcoef(y_test, y_predict) &#x6C42;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x9A6C;&#x4FEE;&#x65AF;&#x7CFB;&#x6570;</span><br><span class="line">print(&apos;&#x9A6C;&#x4FEE;&#x65AF;&#x7CFB;&#x6570;&#x4E3A;:%.2f&apos; %matthews_corrcoef(y_test_binarized, y_pre_binarized))</span><br><span class="line"></span><br><span class="line"># classification_report(y_test, y_predict, target_names=None, labels=None) &#x540C;&#x65F6;&#x751F;&#x6210;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x7CBE;&#x51C6;&#x7387;&#xFF0C;&#x53EC;&#x56DE;&#x7387;&#x548C;F1&#x5F97;&#x5206;&#xFF0C;&#x76EE;&#x6807;&#x6807;&#x7B7E;&#x4E3A;target_name&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#x4E3A;label</span><br><span class="line">print(classification_report(y_test_binarized, y_pre_binarized, target_names={&apos;male&apos;}, labels=[1]))</span><br><span class="line"></span><br><span class="line">plt.style.use(&apos;ggplot&apos;)</span><br><span class="line">plt.figure()</span><br><span class="line">plt.title(&apos;Human Height and Weight By Sex:&apos;)</span><br><span class="line">plt.xlabel(&apos;Height&apos;)</span><br><span class="line">plt.ylabel(&apos;Weight&apos;)</span><br><span class="line">plt.grid(True)</span><br><span class="line">plt.scatter(male_height_train, male_weight_train, color=&apos;b&apos;, marker=&apos;o&apos;, label=&apos;train_male&apos;)</span><br><span class="line">plt.scatter(female_height_train, female_weight_train, color=&apos;r&apos;, marker=&apos;o&apos;, label=&apos;train_female&apos;)</span><br><span class="line">plt.scatter(male_height_pre, male_weight_pre, color=&apos;b&apos;, marker=&apos;*&apos;, label=&apos;pre_male&apos;)</span><br><span class="line">plt.scatter(female_height_pre, female_weight_pre, color=&apos;r&apos;, marker=&apos;*&apos;, label=&apos;pre_female&apos;)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/sklearn2.png" alt="2"></p><h2 id="Scikit-LearnK&#x8FD1;&#x90BB;&#x56DE;&#x5F52;&#x7B97;&#x6CD5;"><a href="#Scikit-LearnK&#x8FD1;&#x90BB;&#x56DE;&#x5F52;&#x7B97;&#x6CD5;" class="headerlink" title="Scikit-LearnK&#x8FD1;&#x90BB;&#x56DE;&#x5F52;&#x7B97;&#x6CD5;"></a><font size="4">Scikit-LearnK&#x8FD1;&#x90BB;&#x56DE;&#x5F52;&#x7B97;&#x6CD5;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">from sklearn.neighbors import KNeighborsRegressor</span><br><span class="line">from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score</span><br><span class="line">from sklearn.preprocessing import StandardScaler</span><br><span class="line"></span><br><span class="line">x_train = np.array([[158, 1], [170, 1], [183, 1], [191, 1], [155, 0], [163, 0], [180, 0], [158, 0], [170, 0]])</span><br><span class="line">y_train = np.array([64, 86, 84, 80, 49, 59, 67, 54, 67])</span><br><span class="line">x_test = np.array([[168, 1], [180, 1], [160, 0], [169, 0]])</span><br><span class="line">y_test = [65, 96, 52, 67]</span><br><span class="line">k = 3</span><br><span class="line"></span><br><span class="line"># clf = KNeighborsRegressor(n_neighbors=k) &#x521B;&#x5EFA;KNN&#x56DE;&#x5F52;&#x6A21;&#x578B;</span><br><span class="line">clf = KNeighborsRegressor(n_neighbors=k)</span><br><span class="line"></span><br><span class="line"># clf.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;</span><br><span class="line">clf.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"># clf.predict(X) &#x7528;&#x8BAD;&#x7EC3;&#x540E;&#x7684;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x6570;&#x636E;X</span><br><span class="line">pre = clf.predict(x_test)</span><br><span class="line"></span><br><span class="line">print([np.around(x, 2) for x in pre])</span><br><span class="line"></span><br><span class="line"># r2_score(y_test, y_predict) &#x6C42;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x51B3;&#x5B9A;&#x7CFB;&#x6570;</span><br><span class="line">print(&apos;Coefficiet of determination: %.2f&apos; %r2_score(y_test, pre))</span><br><span class="line"></span><br><span class="line"># mean_absolute_erro(y_test, y_predict) &#x6C42;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x5E73;&#x5747;&#x7EDD;&#x5BF9;&#x8BEF;&#x5DEE;MAE</span><br><span class="line">print(&apos;Mean absolute error: %.2f&apos; %mean_absolute_error(y_test, pre))</span><br><span class="line"></span><br><span class="line"># mean_squared_error(y_test, y_predict) &#x6C42;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x5747;&#x65B9;&#x8BEF;&#x5DEE;MSE</span><br><span class="line">print(&apos;Mean squared error: %.2f&apos; %mean_squared_error(y_test, pre))</span><br><span class="line"></span><br><span class="line">print(&apos;\n&apos; + &apos;Scaled Processing&apos;.center(30, &apos;~&apos;) + &apos;\n&apos;)</span><br><span class="line"></span><br><span class="line"># ss = StandardScaler() &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x7279;&#x5F81;&#x7F29;&#x653E;&#x8F6C;&#x6362;&#x63A5;&#x53E3;</span><br><span class="line">ss = StandardScaler()</span><br><span class="line"></span><br><span class="line"># ss.fit_transform(x) &#x5728;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x96C6;&#x4E0A;&#x5BF9;&#x6570;&#x636E;&#x7279;&#x5F81;&#x8FDB;&#x884C;&#x7F29;&#x653E;</span><br><span class="line">x_train_scaled = ss.fit_transform(x_train)</span><br><span class="line"></span><br><span class="line"># ss.transform(x) &#x5728;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x96C6;&#x4E0A;&#x5BF9;&#x6570;&#x636E;&#x7279;&#x5F81;&#x8FDB;&#x884C;&#x7F29;&#x653E;</span><br><span class="line">x_test_scaled = ss.transform(x_test) </span><br><span class="line"></span><br><span class="line">clf.fit(x_train_scaled, y_train)</span><br><span class="line"></span><br><span class="line">pre_scaled = clf.predict(x_test_scaled)</span><br><span class="line"></span><br><span class="line">print([np.around(x, 2) for x in pre_scaled])</span><br><span class="line">print(&apos;Coefficiet of determination: %.2f&apos; %r2_score(y_test, pre_scaled))</span><br><span class="line">print(&apos;Mean absolute error: %.2f&apos; %mean_absolute_error(y_test, pre_scaled))</span><br><span class="line">print(&apos;Mean squared error: %.2f&apos; %mean_squared_error(y_test, pre_scaled))</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/sklearn3.png" alt="3"></p><h2 id="Scikit-Learn&#x72EC;&#x70ED;&#x7F16;&#x7801;"><a href="#Scikit-Learn&#x72EC;&#x70ED;&#x7F16;&#x7801;" class="headerlink" title="Scikit-Learn&#x72EC;&#x70ED;&#x7F16;&#x7801;"></a><font size="4">Scikit-Learn&#x72EC;&#x70ED;&#x7F16;&#x7801;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.feature_extraction import DictVectorizer</span><br><span class="line"></span><br><span class="line"># onehot_encoder = DictVectorizer() &#x521B;&#x5EFA;&#x72EC;&#x70ED;&#x7F16;&#x7801;&#x8F6C;&#x6362;&#x5668;</span><br><span class="line">onehot_encoder = DictVectorizer()</span><br><span class="line"></span><br><span class="line">x = [{&apos;city&apos;: &apos;New York&apos;}, {&apos;city&apos;: &apos;San Francisco&apos;}, {&apos;city:&apos;: &apos;Chapel Hill&apos;}]</span><br><span class="line"></span><br><span class="line"># onehot_encoder.fit_transform(x).toarray() &#x5C06;&#x5B57;&#x5178;&#x7684;&#x503C;value&#x8FDB;&#x884C;&#x72EC;&#x70ED;&#x7F16;&#x7801;</span><br><span class="line">onehot_x = onehot_encoder.fit_transform(x).toarray()</span><br><span class="line"></span><br><span class="line">print(onehot_x)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/sklearn4.png" alt="4"></p><h2 id="Scikit-Learn&#x7279;&#x5F81;&#x6807;&#x51C6;&#x5316;"><a href="#Scikit-Learn&#x7279;&#x5F81;&#x6807;&#x51C6;&#x5316;" class="headerlink" title="Scikit-Learn&#x7279;&#x5F81;&#x6807;&#x51C6;&#x5316;"></a><font size="4">Scikit-Learn&#x7279;&#x5F81;&#x6807;&#x51C6;&#x5316;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">from sklearn import preprocessing</span><br><span class="line"></span><br><span class="line">x = np.array([[0., 0., 5., 13., 9., 1.], [0., 0., 13., 15., 10., 15.], [0., 3., 15., 2., 0., 11.]])</span><br><span class="line"></span><br><span class="line"># preprocessing.StandardScaler().fit_transform(x) &#x4F7F;&#x7528;&#x6807;&#x51C6;&#x5316;&#x8F6C;&#x6362;&#x5668;&#x7C7B;&#x51FD;&#x6570;</span><br><span class="line">x_standard_scaled = preprocessing.StandardScaler().fit_transform(x)</span><br><span class="line">print(x_standard_scaled)</span><br><span class="line"></span><br><span class="line"># preprocessing.scale(x) &#x4F7F;&#x7528;&#x6807;&#x51C6;&#x5316;&#x51FD;&#x6570;scale</span><br><span class="line">x_scaled = preprocessing.scale(x)</span><br><span class="line">print(x_scaled)</span><br><span class="line"></span><br><span class="line"># preprocessing.robust_scale(x) &#x4F7F;&#x7528;&#x9C81;&#x68D2;&#x6027;&#x6807;&#x51C6;&#x5316;&#x51FD;&#x6570;robust_scale</span><br><span class="line">x_robust_scaled = preprocessing.robust_scale(x)</span><br><span class="line">print(x_robust_scaled)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/sklearn5.png" alt="5"></p><h2 id="Scikit-Learn&#x591A;&#x5143;&#x7EBF;&#x6027;&#x56DE;&#x5F52;"><a href="#Scikit-Learn&#x591A;&#x5143;&#x7EBF;&#x6027;&#x56DE;&#x5F52;" class="headerlink" title="Scikit-Learn&#x591A;&#x5143;&#x7EBF;&#x6027;&#x56DE;&#x5F52;"></a><font size="4">Scikit-Learn&#x591A;&#x5143;&#x7EBF;&#x6027;&#x56DE;&#x5F52;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.linear_model import LinearRegression</span><br><span class="line"></span><br><span class="line">x = [[6, 2], [8, 1], [10, 0], [14, 2], [18, 0]]</span><br><span class="line">y = [[7], [9], [13], [17.5], [18]]</span><br><span class="line"></span><br><span class="line"># model = LinearRegression() &#x521B;&#x5EFA;&#x7EBF;&#x6027;&#x56DE;&#x5F52;&#x6A21;&#x578B;</span><br><span class="line">model = LinearRegression()</span><br><span class="line"></span><br><span class="line"># model.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;</span><br><span class="line">model.fit(x, y)</span><br><span class="line"></span><br><span class="line">x_test = [[8, 2], [9, 0], [11, 2], [16, 2], [12, 0]]</span><br><span class="line">y_test = [[11], [8.5], [15], [18], [11]]</span><br><span class="line"></span><br><span class="line"># model.predict(X) &#x7528;&#x8BAD;&#x7EC3;&#x540E;&#x7684;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x6570;&#x636E;X</span><br><span class="line">predictions = model.predict(x_test)</span><br><span class="line"></span><br><span class="line">for i, prediction in enumerate(predictions):</span><br><span class="line">    print(&apos;prediction: %s, truth: %s&apos; %(prediction, y_test[i]))</span><br><span class="line"></span><br><span class="line"># model.score(x, y) &#x6C42;&#x6A21;&#x578B;&#x7684;&#x51B3;&#x5B9A;&#x7CFB;&#x6570;</span><br><span class="line">print(&apos;R-squared: %.2f&apos; %model.score(x_test, y_test))</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/sklearn6.png" alt="6"></p><h2 id="Scikit-Learn&#x591A;&#x9879;&#x5F0F;&#x56DE;&#x5F52;"><a href="#Scikit-Learn&#x591A;&#x9879;&#x5F0F;&#x56DE;&#x5F52;" class="headerlink" title="Scikit-Learn&#x591A;&#x9879;&#x5F0F;&#x56DE;&#x5F52;"></a><font size="4">Scikit-Learn&#x591A;&#x9879;&#x5F0F;&#x56DE;&#x5F52;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from sklearn.linear_model import LinearRegression</span><br><span class="line">from sklearn.preprocessing import PolynomialFeatures</span><br><span class="line"></span><br><span class="line">plt.style.use(&apos;ggplot&apos;)</span><br><span class="line"></span><br><span class="line">x_train = [[6], [8], [10], [14], [18]]</span><br><span class="line">y_train = [[7], [9], [13], [17.5], [18]]</span><br><span class="line">x_test = [[6], [8], [11], [16]]</span><br><span class="line">y_test = [[8], [12], [15], [18]]</span><br><span class="line"></span><br><span class="line"># model = LinearRegression() &#x521B;&#x5EFA;&#x7EBF;&#x6027;&#x56DE;&#x5F52;&#x6A21;&#x578B;</span><br><span class="line">regressor = LinearRegression()</span><br><span class="line"></span><br><span class="line"># model.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;</span><br><span class="line">regressor.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line">xx = np.linspace(0, 26, 100)</span><br><span class="line"></span><br><span class="line"># model.predict(X) &#x7528;&#x8BAD;&#x7EC3;&#x540E;&#x7684;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x6570;&#x636E;X</span><br><span class="line">yy = regressor.predict(xx.reshape(xx.shape[0], 1))</span><br><span class="line"></span><br><span class="line">plt.plot(xx, yy, c=&apos;b&apos;, label=&apos;Linear_poly&apos;)</span><br><span class="line"></span><br><span class="line"># quadratic_featurizer = PolynomialFeatures(degree=n) &#x521B;&#x5EFA;n&#x9636;&#x591A;&#x9879;&#x5F0F;&#x8F6C;&#x6362;&#x5668;</span><br><span class="line">quadratic_featurizer = PolynomialFeatures(degree=2)</span><br><span class="line"></span><br><span class="line"># quadratic_featurizer.fit_transform(x_train) &#x5728;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x96C6;&#x4E0A;&#x5BF9;&#x6570;&#x636E;&#x7279;&#x5F81;&#x8FDB;&#x884C;&#x591A;&#x9879;&#x5F0F;&#x53D8;&#x6362;</span><br><span class="line">x_train_quadratic = quadratic_featurizer.fit_transform(x_train)</span><br><span class="line"></span><br><span class="line"># ss.fit_transform(x) &#x5728;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x96C6;&#x4E0A;&#x5BF9;&#x6570;&#x636E;&#x7279;&#x5F81;&#x8FDB;&#x884C;&#x591A;&#x9879;&#x5F0F;&#x53D8;&#x6362;</span><br><span class="line">x_test_quadratic = quadratic_featurizer.transform(x_test)</span><br><span class="line"></span><br><span class="line"># model = LinearRegression() &#x521B;&#x5EFA;&#x7EBF;&#x6027;&#x56DE;&#x5F52;&#x6A21;&#x578B;</span><br><span class="line">regressor_quadratic = LinearRegression()</span><br><span class="line"></span><br><span class="line"># model.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;</span><br><span class="line">regressor_quadratic.fit(x_train_quadratic, y_train)</span><br><span class="line"></span><br><span class="line"># ss.fit_transform(x) &#x5BF9;&#x6570;&#x636E;&#x7279;&#x5F81;&#x8FDB;&#x884C;&#x591A;&#x9879;&#x5F0F;&#x53D8;&#x6362;</span><br><span class="line">xx_quadratic = quadratic_featurizer.transform(xx.reshape(xx.shape[0], 1))</span><br><span class="line"></span><br><span class="line"># model.predict(X) &#x7528;&#x8BAD;&#x7EC3;&#x540E;&#x7684;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x6570;&#x636E;X</span><br><span class="line">yy_quadratic = regressor_quadratic.predict(xx_quadratic)</span><br><span class="line"></span><br><span class="line">print(&apos;linear regression r-squared&apos;, regressor.score(x_test, y_test))</span><br><span class="line">print(&apos;quadratic regression r-squared&apos;, regressor_quadratic.score(x_test_quadratic, y_test))</span><br><span class="line"></span><br><span class="line">plt.plot(xx, yy_quadratic, c=&apos;r&apos;, label=&apos;square_poly&apos;)</span><br><span class="line">plt.scatter(x_train, y_train, label=&apos;data&apos;)</span><br><span class="line">plt.axis([0, 25, 0, 25])</span><br><span class="line">plt.title(&apos;Pizza price and diameter&apos;)</span><br><span class="line">plt.xlabel(&apos;Diameter in inches&apos;)</span><br><span class="line">plt.ylabel(&apos;Pizza Price&apos;)</span><br><span class="line">plt.grid(True)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/sklearn7.png" alt="7"></p><h2 id="Scikit-Learn&#x903B;&#x8F91;&#x56DE;&#x5F52;&#x548C;&#x6734;&#x7D20;&#x8D1D;&#x53F6;&#x65AF;"><a href="#Scikit-Learn&#x903B;&#x8F91;&#x56DE;&#x5F52;&#x548C;&#x6734;&#x7D20;&#x8D1D;&#x53F6;&#x65AF;" class="headerlink" title="Scikit-Learn&#x903B;&#x8F91;&#x56DE;&#x5F52;&#x548C;&#x6734;&#x7D20;&#x8D1D;&#x53F6;&#x65AF;"></a><font size="4">Scikit-Learn&#x903B;&#x8F91;&#x56DE;&#x5F52;&#x548C;&#x6734;&#x7D20;&#x8D1D;&#x53F6;&#x65AF;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.datasets import load_breast_cancer</span><br><span class="line">from sklearn.linear_model import LogisticRegression</span><br><span class="line">from sklearn.naive_bayes import GaussianNB</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line"># from sklearn.datasets import load_breast_cancer &#x4ECE;sklearn&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x5BFC;&#x5165;&#x80F8;&#x90E8;&#x764C;&#x75C7;&#x7684;&#x6570;&#x636E;</span><br><span class="line">x, y = load_breast_cancer(return_X_y=True)</span><br><span class="line"></span><br><span class="line"># train_test_split(x, y, stratify=y, test_size=n) &#x5C06;x&#x548C;y&#x6309;&#x7167;test_size&#x5212;&#x5206;&#x6210;&#x6570;&#x636E;&#x96C6;&#x548C;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;stratify=y&#x6309;&#x7167;y&#x4E2D;&#x7684;&#x6BD4;&#x4F8B;&#x5206;&#x914D;</span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, stratify=y, test_size=0.2, random_state=31)</span><br><span class="line"></span><br><span class="line"># lr = LogisticRegression() &#x521B;&#x5EFA;&#x903B;&#x8F91;&#x56DE;&#x5F52;&#x6A21;&#x578B;</span><br><span class="line">lr = LogisticRegression(solver=&apos;liblinear&apos;)</span><br><span class="line"></span><br><span class="line"># nb = GaussianNB() &#x521B;&#x5EFA;&#x6734;&#x7D20;&#x8D1D;&#x53F6;&#x65AF;&#x6A21;&#x578B;</span><br><span class="line">nb = GaussianNB()</span><br><span class="line"></span><br><span class="line">lr_scores = []</span><br><span class="line">nb_scores = []</span><br><span class="line"></span><br><span class="line">train_sizes = range(10, len(x_train), 25)</span><br><span class="line">for train_size in train_sizes:</span><br><span class="line">    # train_test_split(x, y, stratify=y, train_size=n) &#x5C06;x&#x548C;y&#x6309;&#x7167;test_size&#x5212;&#x5206;&#x6210;&#x6570;&#x636E;&#x96C6;&#x548C;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;stratify=y&#x6309;&#x7167;y&#x4E2D;&#x7684;&#x6BD4;&#x4F8B;&#x5206;&#x914D;</span><br><span class="line">    x_slice, _, y_slice, _ = train_test_split(x_train, y_train, train_size=train_size, stratify=y_train, random_state=31)</span><br><span class="line"></span><br><span class="line">    # nb.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6734;&#x7D20;&#x8D1D;&#x53F6;&#x65AF;&#x6A21;&#x578B;</span><br><span class="line">    nb.fit(x_slice, y_slice)</span><br><span class="line"></span><br><span class="line">    # nb.score(x, y) &#x6C42;&#x6734;&#x7D20;&#x8D1D;&#x53F6;&#x65AF;&#x6A21;&#x578B;&#x7684;&#x51B3;&#x5B9A;&#x7CFB;&#x6570;</span><br><span class="line">    nb_scores.append(nb.score(x_test, y_test))</span><br><span class="line"></span><br><span class="line">    # lr.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x903B;&#x8F91;&#x56DE;&#x5F52;&#x6A21;&#x578B;</span><br><span class="line">    lr.fit(x_slice, y_slice)</span><br><span class="line"></span><br><span class="line">    # lr.score(x, y) &#x6C42;&#x903B;&#x8F91;&#x56DE;&#x5F52;&#x6A21;&#x578B;&#x7684;&#x51B3;&#x5B9A;&#x7CFB;&#x6570;</span><br><span class="line">    lr_scores.append(lr.score(x_test, y_test))</span><br><span class="line"></span><br><span class="line">plt.plot(train_sizes, nb_scores, label=&apos;Naive Bayes&apos;)</span><br><span class="line">plt.plot(train_sizes, lr_scores, linestyle=&apos;--&apos;, label=&apos;Logistic Regression&apos;)</span><br><span class="line">plt.title(&apos;Naive Bayes and Logistic Regression accuracies&apos;)</span><br><span class="line">plt.xlabel(&apos;Number of training instances&apos;)</span><br><span class="line">plt.ylabel(&apos;Test set accuracy&apos;)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/sklearn8.png" alt="8"></p><h2 id="Scikit-Learn&#x51B3;&#x7B56;&#x6811;&#x548C;&#x888B;&#x88C5;&#x96C6;&#x6210;&#x5B66;&#x4E60;"><a href="#Scikit-Learn&#x51B3;&#x7B56;&#x6811;&#x548C;&#x888B;&#x88C5;&#x96C6;&#x6210;&#x5B66;&#x4E60;" class="headerlink" title="Scikit-Learn&#x51B3;&#x7B56;&#x6811;&#x548C;&#x888B;&#x88C5;&#x96C6;&#x6210;&#x5B66;&#x4E60;"></a><font size="4">Scikit-Learn&#x51B3;&#x7B56;&#x6811;&#x548C;&#x888B;&#x88C5;&#x96C6;&#x6210;&#x5B66;&#x4E60;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.tree import DecisionTreeClassifier</span><br><span class="line">from sklearn.ensemble import RandomForestClassifier</span><br><span class="line">from sklearn.datasets import make_classification</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">from sklearn.metrics import classification_report</span><br><span class="line"></span><br><span class="line"># from sklearn.datasets import make_classification &#x4ECE;sklearn&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x5BFC;&#x5165;make_classification&#x7528;&#x4E8E;&#x521B;&#x5EFA;&#x5206;&#x7C7B;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x6837;&#x672C;&#x6570;&#x4E3A;n_samples&#xFF0C;&#x7279;&#x5F81;&#x6570;&#x4E3A;n_features&#xFF0C;&#x6709;&#x7528;&#x7684;&#x7279;&#x5F81;&#x6570;&#x4E3A;n_informative&#xFF0C;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x7C07;&#x7684;&#x4E2A;&#x6570;&#x4E3A;n_clusters_per_class</span><br><span class="line">x, y = make_classification(n_samples=1000, n_features=100, n_informative=20, n_clusters_per_class=2, random_state=11)</span><br><span class="line"></span><br><span class="line"># train_test_split(x, y) &#x5C06;x&#x548C;y&#x5212;&#x5206;&#x6210;&#x6570;&#x636E;&#x96C6;&#x548C;&#x6D4B;&#x8BD5;&#x96C6;</span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=11)</span><br><span class="line"></span><br><span class="line"># clf = DecisionTreeClassifier() &#x521B;&#x5EFA;&#x51B3;&#x7B56;&#x6811;&#x6A21;&#x578B;</span><br><span class="line">clf = DecisionTreeClassifier(random_state=11)</span><br><span class="line"></span><br><span class="line"># clf.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;</span><br><span class="line">clf.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"># clf.predict(X) &#x7528;&#x8BAD;&#x7EC3;&#x540E;&#x7684;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x6570;&#x636E;X</span><br><span class="line">predictions = clf.predict(x_test)</span><br><span class="line"></span><br><span class="line"># classification_report(y_test, y_predict, target_names=None, labels=None) &#x540C;&#x65F6;&#x751F;&#x6210;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x7CBE;&#x51C6;&#x7387;&#xFF0C;&#x53EC;&#x56DE;&#x7387;&#x548C;F1&#x5F97;&#x5206;&#xFF0C;&#x76EE;&#x6807;&#x6807;&#x7B7E;&#x4E3A;target_name&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#x4E3A;label</span><br><span class="line">print(classification_report(y_test, predictions))</span><br><span class="line"></span><br><span class="line"># clf = RandomForestClassifier(n_estimators=n) &#x521B;&#x5EFA;&#x5305;&#x542B;n&#x4E2A;&#x6811;&#x7684;&#x968F;&#x673A;&#x68EE;&#x6797;&#x5206;&#x7C7B;&#x5668;</span><br><span class="line">clf = RandomForestClassifier(n_estimators=10, random_state=11)</span><br><span class="line"></span><br><span class="line"># clf.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;</span><br><span class="line">clf.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"># clf.predict(X) &#x7528;&#x8BAD;&#x7EC3;&#x540E;&#x7684;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x6570;&#x636E;X</span><br><span class="line">predictions = clf.predict(x_test)</span><br><span class="line"></span><br><span class="line"># classification_report(y_test, y_predict, target_names=None, labels=None) &#x540C;&#x65F6;&#x751F;&#x6210;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x7CBE;&#x51C6;&#x7387;&#xFF0C;&#x53EC;&#x56DE;&#x7387;&#x548C;F1&#x5F97;&#x5206;&#xFF0C;&#x76EE;&#x6807;&#x6807;&#x7B7E;&#x4E3A;target_name&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#x4E3A;label</span><br><span class="line">print(classification_report(y_test, predictions))</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/sklearn9.png" alt="9"></p><h2 id="Scikit-Learn&#x63A8;&#x8FDB;&#x96C6;&#x6210;&#x5B66;&#x4E60;"><a href="#Scikit-Learn&#x63A8;&#x8FDB;&#x96C6;&#x6210;&#x5B66;&#x4E60;" class="headerlink" title="Scikit-Learn&#x63A8;&#x8FDB;&#x96C6;&#x6210;&#x5B66;&#x4E60;"></a><font size="4">Scikit-Learn&#x63A8;&#x8FDB;&#x96C6;&#x6210;&#x5B66;&#x4E60;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.ensemble import AdaBoostClassifier</span><br><span class="line">from sklearn.tree import DecisionTreeClassifier</span><br><span class="line">from sklearn.datasets import make_classification</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line"># from sklearn.datasets import make_classification &#x4ECE;sklearn&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x5BFC;&#x5165;make_classification&#x7528;&#x4E8E;&#x521B;&#x5EFA;&#x5206;&#x7C7B;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x6837;&#x672C;&#x6570;&#x4E3A;n_samples&#xFF0C;&#x7279;&#x5F81;&#x6570;&#x4E3A;n_features&#xFF0C;&#x6709;&#x7528;&#x7684;&#x7279;&#x5F81;&#x6570;&#x4E3A;n_informative&#xFF0C;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x7C07;&#x7684;&#x4E2A;&#x6570;&#x4E3A;n_clusters_per_class</span><br><span class="line">x, y = make_classification(n_samples=1000, n_features=50, n_informative=30, n_clusters_per_class=3, random_state=11)</span><br><span class="line"></span><br><span class="line"># train_test_split(x, y) &#x5C06;x&#x548C;y&#x5212;&#x5206;&#x6210;&#x6570;&#x636E;&#x96C6;&#x548C;&#x6D4B;&#x8BD5;&#x96C6;</span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=11)</span><br><span class="line"></span><br><span class="line"># clf = DecisionTreeClassifier() &#x521B;&#x5EFA;&#x51B3;&#x7B56;&#x6811;&#x6A21;&#x578B;</span><br><span class="line">clf = DecisionTreeClassifier()</span><br><span class="line"></span><br><span class="line"># clf.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;</span><br><span class="line">clf.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"># clf.score(x, y) &#x6C42;&#x6A21;&#x578B;&#x7684;&#x51B3;&#x5B9A;&#x7CFB;&#x6570;</span><br><span class="line">print(&apos;DecisionTree accuracy:%s&apos; %clf.score(x_test, y_test))</span><br><span class="line"></span><br><span class="line"># clf = AdaBoostClassifier(n_estimators=n) &#x521B;&#x5EFA;&#x5177;&#x6709;n&#x4E2A;&#x5F31;&#x5B66;&#x4E60;&#x5668;&#x7684;AdaBoost&#x6A21;&#x578B;</span><br><span class="line">clf = AdaBoostClassifier(n_estimators=50, random_state=11)</span><br><span class="line"></span><br><span class="line"># clf.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;</span><br><span class="line">clf.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line">plt.title(&apos;Ensemble Accuracy&apos;)</span><br><span class="line">plt.xlabel(&apos;Accuracy&apos;)</span><br><span class="line">plt.ylabel(&apos;Number of base estimators in ensemble&apos;)</span><br><span class="line"></span><br><span class="line"># clf.staged_score(x, y) &#x6C42;AdaBoost&#x6A21;&#x578B;&#x7684;&#x5F31;&#x5206;&#x7C7B;&#x5668;&#x4E2A;&#x6570;&#x7684;&#x51B3;&#x5B9A;&#x7CFB;&#x6570;</span><br><span class="line">plt.plot(range(1, 51), [accuracy for accuracy in clf.staged_score(x_test, y_test)])</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/sklearn10.png" alt="10"></p><h2 id="Scikit-Learn&#x611F;&#x77E5;&#x673A;"><a href="#Scikit-Learn&#x611F;&#x77E5;&#x673A;" class="headerlink" title="Scikit-Learn&#x611F;&#x77E5;&#x673A;"></a><font size="4">Scikit-Learn&#x611F;&#x77E5;&#x673A;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.datasets import make_classification</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">from sklearn.metrics import classification_report</span><br><span class="line">from sklearn.linear_model import Perceptron</span><br><span class="line"></span><br><span class="line"># from sklearn.datasets import make_classification &#x4ECE;sklearn&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x5BFC;&#x5165;make_classification&#x7528;&#x4E8E;&#x521B;&#x5EFA;&#x5206;&#x7C7B;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x6837;&#x672C;&#x6570;&#x4E3A;n_samples&#xFF0C;&#x7279;&#x5F81;&#x6570;&#x4E3A;n_features&#xFF0C;&#x6709;&#x7528;&#x7684;&#x7279;&#x5F81;&#x6570;&#x4E3A;n_informative&#xFF0C;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x7C07;&#x7684;&#x4E2A;&#x6570;&#x4E3A;n_clusters_per_class</span><br><span class="line">x, y = make_classification(n_samples=1000, n_features=100, n_informative=20, n_clusters_per_class=2, random_state=11)</span><br><span class="line"></span><br><span class="line"># train_test_split(x, y) &#x5C06;x&#x548C;y&#x5212;&#x5206;&#x6210;&#x6570;&#x636E;&#x96C6;&#x548C;&#x6D4B;&#x8BD5;&#x96C6;</span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=11)</span><br><span class="line"></span><br><span class="line"># clf = Perceptron() &#x521B;&#x5EFA;&#x611F;&#x77E5;&#x673A;&#x6A21;&#x578B;</span><br><span class="line">clf = Perceptron(random_state=11)</span><br><span class="line"></span><br><span class="line"># clf.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;</span><br><span class="line">clf.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"># clf.predict(X) &#x7528;&#x8BAD;&#x7EC3;&#x540E;&#x7684;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x6570;&#x636E;X</span><br><span class="line">predictions = clf.predict(x_test)</span><br><span class="line"></span><br><span class="line"># classification_report(y_test, y_predict, target_names=None, labels=None) &#x540C;&#x65F6;&#x751F;&#x6210;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x7CBE;&#x51C6;&#x7387;&#xFF0C;&#x53EC;&#x56DE;&#x7387;&#x548C;F1&#x5F97;&#x5206;&#xFF0C;&#x76EE;&#x6807;&#x6807;&#x7B7E;&#x4E3A;target_name&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#x4E3A;label</span><br><span class="line">print(classification_report(y_test, predictions))</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/sklearn11.png" alt="11"></p><h2 id="Scikit-Learn&#x652F;&#x6301;&#x5411;&#x91CF;&#x673A;"><a href="#Scikit-Learn&#x652F;&#x6301;&#x5411;&#x91CF;&#x673A;" class="headerlink" title="Scikit-Learn&#x652F;&#x6301;&#x5411;&#x91CF;&#x673A;"></a><font size="4">Scikit-Learn&#x652F;&#x6301;&#x5411;&#x91CF;&#x673A;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.datasets import make_classification</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">from sklearn.metrics import classification_report</span><br><span class="line">from sklearn.svm import SVC</span><br><span class="line"></span><br><span class="line"># from sklearn.datasets import make_classification &#x4ECE;sklearn&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x5BFC;&#x5165;make_classification&#x7528;&#x4E8E;&#x521B;&#x5EFA;&#x5206;&#x7C7B;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x6837;&#x672C;&#x6570;&#x4E3A;n_samples&#xFF0C;&#x7279;&#x5F81;&#x6570;&#x4E3A;n_features&#xFF0C;&#x6709;&#x7528;&#x7684;&#x7279;&#x5F81;&#x6570;&#x4E3A;n_informative&#xFF0C;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x7C07;&#x7684;&#x4E2A;&#x6570;&#x4E3A;n_clusters_per_class</span><br><span class="line">x, y = make_classification(n_samples=1000, n_features=100, n_informative=20, n_clusters_per_class=2, random_state=11)</span><br><span class="line"></span><br><span class="line"># train_test_split(x, y) &#x5C06;x&#x548C;y&#x5212;&#x5206;&#x6210;&#x6570;&#x636E;&#x96C6;&#x548C;&#x6D4B;&#x8BD5;&#x96C6;</span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=11)</span><br><span class="line"></span><br><span class="line"># clf = SVC(kernel=&apos;rbf&apos;, gamma=&apos;auto deprecated&apos;, C=1.0) &#x521B;&#x5EFA;&#x652F;&#x6301;&#x5411;&#x91CF;&#x673A;&#x6A21;&#x578B;&#xFF0C;&#x6838;&#x51FD;&#x6570;&#x9ED8;&#x8BA4;&#x4E3A;rbf&#x9AD8;&#x65AF;&#x6838;&#xFF0C;&#x6B63;&#x5219;&#x5316;&#x53C2;&#x6570;C&#x9ED8;&#x8BA4;&#x4E3A;1.0&#xFF0C;&#x6838;&#x7CFB;&#x6570;&#x53C2;&#x6570;gamma&#x9ED8;&#x8BA4;&#x4E3A;&#x4E0D;&#x4F7F;&#x7528;</span><br><span class="line">clf = SVC(kernel=&apos;rbf&apos;, gamma=0.01, C=100, random_state=11)</span><br><span class="line"></span><br><span class="line"># clf.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;</span><br><span class="line">clf.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"># clf.predict(X) &#x7528;&#x8BAD;&#x7EC3;&#x540E;&#x7684;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x6570;&#x636E;X</span><br><span class="line">predictions = clf.predict(x_test)</span><br><span class="line"></span><br><span class="line"># classification_report(y_test, y_predict, target_names=None, labels=None) &#x540C;&#x65F6;&#x751F;&#x6210;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x7CBE;&#x51C6;&#x7387;&#xFF0C;&#x53EC;&#x56DE;&#x7387;&#x548C;F1&#x5F97;&#x5206;&#xFF0C;&#x76EE;&#x6807;&#x6807;&#x7B7E;&#x4E3A;target_name&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#x4E3A;label</span><br><span class="line">print(classification_report(y_test, predictions))</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/sklearn12.png" alt="12"></p><h2 id="Scikit-Learn&#x591A;&#x5C42;&#x611F;&#x77E5;&#x673A;"><a href="#Scikit-Learn&#x591A;&#x5C42;&#x611F;&#x77E5;&#x673A;" class="headerlink" title="Scikit-Learn&#x591A;&#x5C42;&#x611F;&#x77E5;&#x673A;"></a><font size="4">Scikit-Learn&#x591A;&#x5C42;&#x611F;&#x77E5;&#x673A;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.datasets import load_digits</span><br><span class="line">from sklearn.model_selection import cross_val_score</span><br><span class="line">from sklearn.neural_network.multilayer_perceptron import MLPClassifier</span><br><span class="line"></span><br><span class="line"># from sklearn.datasets import load_digits &#x4ECE;sklearn&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x5BFC;&#x5165;&#x624B;&#x5199;&#x6570;&#x5B57;&#x7684;&#x6570;&#x636E;</span><br><span class="line">digits = load_digits()</span><br><span class="line">x = digits.data</span><br><span class="line">y = digits.target</span><br><span class="line"></span><br><span class="line"># clf = MLPClassifier(hidden_layer_sizes=(100,), alpha=0.0001, max_iter=200, random_state=20) &#x521B;&#x5EFA;&#x591A;&#x5C42;&#x611F;&#x77E5;&#x673A;&#x6A21;&#x578B;&#xFF0C;&#x6BCF;&#x4E00;&#x5C42;&#x7684;&#x795E;&#x7ECF;&#x5143;&#x4E2A;&#x6570;&#x4E3A;hidden_layer_sizes&#xFF0C;&#x6B63;&#x5219;&#x5316;&#x53C2;&#x6570;alpha&#x9ED8;&#x8BA4;&#x4E3A;0.0001&#xFF0C;&#x6700;&#x5927;&#x8FED;&#x4EE3;&#x6B21;&#x6570;&#x9ED8;&#x8BA4;&#x4E3A;200</span><br><span class="line">clf = MLPClassifier(hidden_layer_sizes=(150, 100), alpha=0.1, max_iter=500)</span><br><span class="line"></span><br><span class="line"># cross_val_score(estimator, X, y, n_jobs=None, cv=n) n&#x6298;&#x4EA4;&#x53C9;&#x9A8C;&#x8BC1;&#xFF0C;&#x4F30;&#x8BA1;&#x5668;&#x4E3A;estimator&#xFF0C;&#x6570;&#x636E;&#x4E3A;X&#x548C;y&#xFF0C;&#x540C;&#x65F6;&#x5DE5;&#x4F5C;&#x7684;CPU&#x4E2A;&#x6570;&#x4E3A;1</span><br><span class="line">print(cross_val_score(clf, x, y, n_jobs=-1, cv=5))</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/sklearn13.png" alt="13"></p><h2 id="Scikit-LearnKmeans&#x805A;&#x7C7B;"><a href="#Scikit-LearnKmeans&#x805A;&#x7C7B;" class="headerlink" title="Scikit-LearnKmeans&#x805A;&#x7C7B;"></a><font size="4">Scikit-LearnKmeans&#x805A;&#x7C7B;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">from sklearn.cluster import KMeans</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">plt.subplot(3, 2, 1)</span><br><span class="line">x1 = np.array([1, 2, 3, 1, 5, 6, 5, 5, 6, 7, 8, 9, 7, 9])</span><br><span class="line">x2 = np.array([1, 3, 2, 2, 8, 6, 7, 6, 7, 1, 2, 1, 1, 3])</span><br><span class="line">x = np.vstack((x1, x2)).T</span><br><span class="line">plt.xlim([0, 10])</span><br><span class="line">plt.ylim([0, 10])</span><br><span class="line">plt.title(&apos;Instances&apos;)</span><br><span class="line">plt.scatter(x1, x2)</span><br><span class="line"></span><br><span class="line">colors = [&apos;b&apos;, &apos;g&apos;, &apos;r&apos;, &apos;c&apos;, &apos;m&apos;, &apos;y&apos;, &apos;k&apos;, &apos;b&apos;]</span><br><span class="line">markers = [&apos;o&apos;, &apos;s&apos;, &apos;D&apos;, &apos;v&apos;, &apos;^&apos;, &apos;p&apos;, &apos;*&apos;, &apos;+&apos;]</span><br><span class="line">tests = [2, 3, 4, 5, 8]</span><br><span class="line">subplot_counter = 1</span><br><span class="line"></span><br><span class="line">for t in tests:</span><br><span class="line">    subplot_counter +=1</span><br><span class="line">    plt.subplot(3, 2, subplot_counter)</span><br><span class="line"></span><br><span class="line">    # kmeans_model = KMeans(n_clusters=n) &#x521B;&#x5EFA;Kmeans&#x6A21;&#x578B;&#xFF0C;&#x7C7B;&#x522B;&#x4E2A;&#x6570;&#x4E3A;n</span><br><span class="line">    kmeans_model = KMeans(n_clusters=t)</span><br><span class="line"></span><br><span class="line">    # kmeans_model.fit(x) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#x62DF;&#x5408;&#x6A21;&#x578B;</span><br><span class="line">    kmeans_model.fit(x)</span><br><span class="line"></span><br><span class="line">    for i, l in enumerate(kmeans_model.labels_):</span><br><span class="line">        plt.plot(x1[i], x2[i], color=colors[l], marker=markers[l])</span><br><span class="line"></span><br><span class="line">    plt.xlim([0, 10])</span><br><span class="line">    plt.ylim([0, 10])</span><br><span class="line">    plt.title(&apos;k=%s&apos; %t)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/sklearn14.png" alt="14"></p><h3 id="Scikit-LearnPCA&#x964D;&#x7EF4;"><a href="#Scikit-LearnPCA&#x964D;&#x7EF4;" class="headerlink" title="Scikit-LearnPCA&#x964D;&#x7EF4;"></a><font size="3">Scikit-LearnPCA&#x964D;&#x7EF4;</font></h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from sklearn.decomposition import PCA</span><br><span class="line">from sklearn.datasets import load_iris</span><br><span class="line"></span><br><span class="line">data = load_iris()</span><br><span class="line">x = data.data</span><br><span class="line">y = data.target</span><br><span class="line"></span><br><span class="line"># pca = PCA(n_components=n) &#x521B;&#x5EFA;n&#x7EF4;PCA&#x8F6C;&#x6362;&#x5668;</span><br><span class="line">pca = PCA(n_components=2)</span><br><span class="line"></span><br><span class="line"># pca.fit_transform(X) &#x5728;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x96C6;&#x8FDB;&#x884C;PCA&#x964D;&#x7EF4;</span><br><span class="line">reduced_x = pca.fit_transform(x) </span><br><span class="line"></span><br><span class="line">red_x, red_y = [], []</span><br><span class="line">blue_x, blue_y = [], []</span><br><span class="line">green_x, green_y = [], []</span><br><span class="line"></span><br><span class="line">for i in range(len(reduced_x)):</span><br><span class="line">    if y[i] == 0:</span><br><span class="line">        red_x.append(reduced_x[i][0])</span><br><span class="line">        red_y.append(reduced_x[i][1])</span><br><span class="line">    elif y[i] == 1:</span><br><span class="line">        blue_x.append(reduced_x[i][0])</span><br><span class="line">        blue_y.append(reduced_x[i][1])</span><br><span class="line">    else:</span><br><span class="line">        green_x.append(reduced_x[i][0])</span><br><span class="line">        green_y.append(reduced_x[i][1])</span><br><span class="line"></span><br><span class="line">plt.scatter(red_x, red_y, c=&apos;r&apos;, marker=&apos;x&apos;)</span><br><span class="line">plt.scatter(blue_x, blue_y, c=&apos;b&apos;, marker=&apos;D&apos;)</span><br><span class="line">plt.scatter(green_x, green_y, c=&apos;g&apos;, marker=&apos;.&apos;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/LIBRARY/sklearn15.png" alt="15"></p><h1 id="Scikit-Learn&#x5C0F;&#x7ED3;"><a href="#Scikit-Learn&#x5C0F;&#x7ED3;" class="headerlink" title="Scikit-Learn&#x5C0F;&#x7ED3;"></a><font size="5" color="red">Scikit-Learn&#x5C0F;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x7531;&#x4E8E;Scikit-Learn&#x96C6;&#x6210;&#x4E86;&#x8BB8;&#x591A;&#x5E38;&#x7528;&#x7684;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7B97;&#x6CD5;&#xFF0C;&#x5982;&#x51B3;&#x7B56;&#x6811;&#xFF0C;SVM&#xFF0C;&#x591A;&#x5C42;&#x611F;&#x77E5;&#x673A;&#xFF0C;Kmeans&#x7B49;&#xFF0C;&#x53EF;&#x4EE5;&#x8BA9;&#x4F7F;&#x7528;&#x8005;&#x8282;&#x7EA6;&#x5927;&#x91CF;&#x7684;&#x65F6;&#x95F4;&#x3002;&#x800C;&#x4E14;&#x5176;&#x62E5;&#x6709;&#x5F88;&#x597D;&#x7684;&#x5B98;&#x65B9;&#x6587;&#x6863;&#xFF0C;&#x8BA9;&#x5F00;&#x53D1;&#x8005;&#xFF0C;&#x7814;&#x7A76;&#x8005;&#x53EF;&#x4EE5;&#x65B9;&#x4FBF;&#x7684;&#x5165;&#x95E8;&#x548C;&#x4F7F;&#x7528;&#x3002;&#x56E0;&#x6B64;Scikit-Learn&#x5728;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x9886;&#x57DF;&#x53D7;&#x5230;&#x5E7F;&#x5927;&#x4F7F;&#x7528;&#x8005;&#x7684;&#x559C;&#x7231;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Scikit-Learn&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="python" scheme="https://USTCcoder.github.io/categories/python/"/>
    
      <category term="常用库" scheme="https://USTCcoder.github.io/categories/python/%E5%B8%B8%E7%94%A8%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>线性规划(Linear Programming)</title>
    <link href="https://USTCcoder.github.io/2019/08/08/algorithm%20linear%20programming/"/>
    <id>https://USTCcoder.github.io/2019/08/08/algorithm linear programming/</id>
    <published>2019-08-08T12:09:25.000Z</published>
    <updated>2019-08-07T15:58:18.760Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x7EBF;&#x6027;&#x89C4;&#x5212;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"><a href="#&#x539F;&#x7406;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x539F;&#x7406;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003; <strong>Linear Programming:&#x7EBF;&#x6027;&#x89C4;&#x5212;</strong>&#xFF0C;&#x662F;<strong>&#x8FD0;&#x7B79;&#x5B66;</strong>&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x91CD;&#x8981;&#x5206;&#x652F;&#xFF0C;<strong>&#x7814;&#x7A76;&#x7EBF;&#x6027;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x4E0B;&#x7EBF;&#x6027;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x7684;&#x6781;&#x503C;&#x95EE;&#x9898;</strong>&#x7684;&#x6570;&#x5B66;&#x7406;&#x8BBA;&#x548C;&#x65B9;&#x6CD5;&#xFF0C;&#x80FD;&#x4ECE;&#x5404;&#x79CD;&#x9650;&#x5236;&#x6761;&#x4EF6;&#x7684;&#x7EC4;&#x5408;&#x4E2D;&#xFF0C;&#x9009;&#x62E9;&#x51FA;&#x6700;&#x4E3A;&#x5408;&#x7406;&#x7684;&#x8BA1;&#x7B97;&#x65B9;&#x6CD5;&#xFF0C;&#x5EFA;&#x7ACB;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x6A21;&#x578B;&#xFF0C;&#x4ECE;&#x800C;&#x6C42;&#x5F97;&#x6700;&#x4F73;&#x7ED3;&#x679C;&#x3002;&#x5E7F;&#x6CDB;&#x5E94;&#x7528;&#x4E8E;&#x519B;&#x4E8B;&#x4F5C;&#x6218;&#x3001;&#x7ECF;&#x6D4E;&#x5206;&#x6790;&#x3001;&#x7ECF;&#x8425;&#x7BA1;&#x7406;&#x548C;&#x5DE5;&#x7A0B;&#x6280;&#x672F;&#x7B49;&#x65B9;&#x9762;&#x3002;&#x4E3A;&#x5408;&#x7406;&#x5730;&#x5229;&#x7528;&#x6709;&#x9650;&#x7684;&#x4EBA;&#x529B;&#x3001;&#x7269;&#x529B;&#x3001;&#x8D22;&#x529B;&#x7B49;&#x8D44;&#x6E90;&#x4F5C;&#x51FA;&#x7684;<strong>&#x6700;&#x4F18;&#x51B3;&#x7B56;</strong>&#xFF0C;&#x63D0;&#x4F9B;&#x79D1;&#x5B66;&#x7684;&#x4F9D;&#x636E;&#x3002;<br><a id="more"></a></p><h1 id="&#x7B97;&#x6CD5;&#x57FA;&#x7840;"><a href="#&#x7B97;&#x6CD5;&#x57FA;&#x7840;" class="headerlink" title="&#x7B97;&#x6CD5;&#x57FA;&#x7840;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x57FA;&#x7840;</font></h1><h2 id="&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x6807;&#x51C6;&#x578B;"><a href="#&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x6807;&#x51C6;&#x578B;" class="headerlink" title="&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x6807;&#x51C6;&#x578B;"></a><font size="4">&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x6807;&#x51C6;&#x578B;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5BF9;&#x4E8E;&#x590D;&#x6742;&#x7684;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x95EE;&#x9898;&#xFF0C;&#x5F88;&#x96BE;&#x91C7;&#x7528;&#x521D;&#x4E2D;&#x6570;&#x5B66;&#x7684;&#x753B;&#x56FE;&#x6CD5;&#x89E3;&#x51B3;&#xFF0C;&#x4E00;&#x822C;&#x8981;&#x628A;&#x95EE;&#x9898;&#x8F6C;&#x5316;&#x4E3A;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x6807;&#x51C6;&#x578B;&#x3002;</font><br><img src="/images/ALGORITHM/line1.png" alt="1"></p><h2 id="&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x6807;&#x51C6;&#x578B;&#x8F6C;&#x5316;&#x65B9;&#x6CD5;"><a href="#&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x6807;&#x51C6;&#x578B;&#x8F6C;&#x5316;&#x65B9;&#x6CD5;" class="headerlink" title="&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x6807;&#x51C6;&#x578B;&#x8F6C;&#x5316;&#x65B9;&#x6CD5;"></a><font size="4">&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x6807;&#x51C6;&#x578B;&#x8F6C;&#x5316;&#x65B9;&#x6CD5;</font></h2><p>&#x2003;&#x2003;<font size="3">(1)&#x4E00;&#x822C;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x5F62;&#x5F0F;&#x4E2D;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x5982;&#x679C;&#x6C42;&#x6700;&#x5C0F;&#x503C;&#xFF0C;&#x5373;$\min z = \sum_{i=1}^n c_ix_i$&#xFF0C;&#x90A3;&#x4E48;&#x4EE4;$z&#x2019; = -z$&#xFF0C;&#x5219;&#x6C42;&#x89E3;$\max z&#x2019; = \sum_{i=1}^n c_ix_i$&#xFF0C;&#x5F97;&#x5230;&#x6700;&#x4F18;&#x89E3;&#x540E;&#x52A0;&#x8D1F;&#x53F7;&#x5373;&#x53EF;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">(2)&#x53F3;&#x7AEF;&#x5E38;&#x6570;&#x9879;&#x5C0F;&#x4E8E;&#x96F6;&#x65F6;&#xFF0C;&#x5219;&#x4E0D;&#x7B49;&#x5F0F;&#x4E24;&#x8FB9;&#x540C;&#x65F6;&#x4E58;-1&#xFF0C;&#x5C06;&#x5176;&#x53D8;&#x4E3A;&#x5927;&#x4E8E;&#x96F6;&#xFF0C;&#x5E76;&#x6539;&#x53D8;&#x4E0D;&#x7B49;&#x5F0F;&#x65B9;&#x5411;&#xFF0C;&#x4FDD;&#x8BC1;&#x6052;&#x7B49;&#x53D8;&#x5F62;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">(3)&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;&#x7EA6;&#x675F;&#x65F6;&#xFF0C;&#x5219;&#x5728;&#x4E0D;&#x7B49;&#x5F0F;&#x5DE6;&#x8FB9;&#x51CF;&#x53BB;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x975E;&#x8D1F;&#x53D8;&#x91CF;&#xFF0C;&#x5C06;&#x4E0D;&#x7B49;&#x5F0F;&#x7EA6;&#x675F;&#x6539;&#x4E3A;&#x7B49;&#x5F0F;&#x7EA6;&#x675F;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">(4)&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;&#x7EA6;&#x675F;&#x65F6;&#xFF0C;&#x5219;&#x5728;&#x4E0D;&#x7B49;&#x5F0F;&#x5DE6;&#x8FB9;&#x52A0;&#x4E0A;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x975E;&#x8D1F;&#x53D8;&#x91CF;&#xFF0C;&#x5C06;&#x4E0D;&#x7B49;&#x5F0F;&#x7EA6;&#x675F;&#x6539;&#x4E3A;&#x7B49;&#x5F0F;&#x7EA6;&#x675F;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">(5)&#x65E0;&#x7EA6;&#x675F;&#x7684;&#x51B3;&#x7B56;&#x53D8;&#x91CF;x&#xFF0C;&#x5219;&#x5F15;&#x5165;&#x4E24;&#x4E2A;&#x65B0;&#x7684;&#x975E;&#x8D1F;&#x53D8;&#x91CF;x&#x2019;&#xFF0C;x&#x2019;&#x2019;&#xFF0C;&#x4EE4;$x=x&#x2019;-x&#x2019;&#x2019;, \ x&#x2019; \ge 0, \ x&#x2019;&#x2019; \ge 0$&#xFF0C;&#x5C06;x&#x2019;&#xFF0C;x&#x2019;&#x2019;&#x5E26;&#x5165;&#x6A21;&#x578B;</font><br>&#x2003;&#x2003;<font size="3">(6)&#x51B3;&#x7B56;&#x53D8;&#x91CF;x&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;0&#x65F6;&#xFF0C;&#x4EE4;x&#x2019;=-x&#xFF0C;&#x5C06;x&#x2019;&#x5E26;&#x5165;&#x6A21;&#x578B;</font></p><p>$$\min z = x_2 - 3 \ x_3 + 2 \ x_4$$<br>$$\begin{cases} x_1 + 3 \ x_2 - x_3 + 2 \ x_4 =7 \ -2 \ x_2 + 4 \ x_3 \le 12 \ -4 \ x_2 + 3 \ x_3 + 8 \ x_4 \le 10 \ x_i \ge 0 \ (i = 1, \ 2, \ 3, \ 4) \end{cases}$$<br>&#x2003;&#x2003;<font size="3">&#x5C06;&#x5176;&#x8F6C;&#x5316;&#x4E3A;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x6807;&#x51C6;&#x578B;:z&#x2019;=-z</font><br>$$\min z&#x2019; = -x_2 + 3 \ x_3 - 2 \ x_4$$<br>$$\begin{cases} x_1 + 3 \ x_2 - x_3 + 2 \ x_4 =7 \ -2 \ x_2 + 4 \ x_3 + x_5 = 12 \ -4 \ x_2 + 3 \ x_3 + 8 \ x_4 + x_6 = 10 \ x_i \ge 0 \ (i = 1, \ 2, \ 3, \ 4, \ 5, \ 6) \end{cases}$$</p><h2 id="&#x5355;&#x7EAF;&#x884C;&#x7B97;&#x6CD5;"><a href="#&#x5355;&#x7EAF;&#x884C;&#x7B97;&#x6CD5;" class="headerlink" title="&#x5355;&#x7EAF;&#x884C;&#x7B97;&#x6CD5;"></a><font size="4">&#x5355;&#x7EAF;&#x884C;&#x7B97;&#x6CD5;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x57FA;&#x672C;&#x53D8;&#x91CF;&#xFF1A;&#x6BCF;&#x4E2A;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x4E2D;&#x7684;&#x7CFB;&#x6570;&#x4E3A;&#x6B63;&#x4E14;&#x53EA;&#x51FA;&#x73B0;&#x5728;&#x4E00;&#x4E2A;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x4E2D;&#x7684;&#x53D8;&#x91CF;</font><br>&#x2003;&#x2003;<font size="3">&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#xFF1A;&#x9664;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x5916;&#x7684;&#x53D8;&#x91CF;&#x5168;&#x90E8;&#x4E3A;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;</font><br>&#x2003;&#x2003;<font size="3">&#x57FA;&#x672C;&#x53EF;&#x884C;&#x89E3;&#xFF1A;&#x6EE1;&#x8DB3;&#x6807;&#x51C6;&#x5F62;&#x5F0F;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x7684;&#x53EF;&#x884C;&#x89E3;&#x79F0;&#x4E3A;&#x57FA;&#x672C;&#x53EF;&#x884C;&#x89E3;</font><br>&#x2003;&#x2003;<font size="3">&#x68C0;&#x9A8C;&#x6570;&#xFF1A;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x4E2D;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x7684;&#x7CFB;&#x6570;</font></p><h2 id="&#x6700;&#x4F18;&#x89E3;&#x7684;&#x5224;&#x522B;"><a href="#&#x6700;&#x4F18;&#x89E3;&#x7684;&#x5224;&#x522B;" class="headerlink" title="&#x6700;&#x4F18;&#x89E3;&#x7684;&#x5224;&#x522B;"></a><font size="4">&#x6700;&#x4F18;&#x89E3;&#x7684;&#x5224;&#x522B;</font></h2><p>&#x2003;&#x2003;<font size="3">(1)&#x82E5;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x4E2D;&#x5173;&#x4E8E;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x7684;&#x6240;&#x6709;&#x7CFB;&#x6570;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;0&#xFF0C;&#x5219;&#x5F53;&#x524D;&#x57FA;&#x672C;&#x53EF;&#x884C;&#x89E3;&#x5C31;&#x662F;&#x6700;&#x4F18;&#x89E3;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">(2)&#x82E5;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x4E2D;&#x5173;&#x4E8E;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x7684;&#x6240;&#x6709;&#x7CFB;&#x6570;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;0&#xFF0C;&#x540C;&#x65F6;&#x5B58;&#x5728;&#x67D0;&#x4E2A;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x7684;&#x68C0;&#x9A8C;&#x6570;&#x7B49;&#x4E8E;0&#xFF0C;&#x5219;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x95EE;&#x9898;&#x6709;&#x65E0;&#x7A77;&#x591A;&#x4E2A;&#x6700;&#x4F18;&#x89E3;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">(3)&#x5982;&#x679C;&#x67D0;&#x4E2A;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x7684;&#x7CFB;&#x6570;&#x5927;&#x4E8E;0&#xFF0C;&#x800C;&#x8BE5;&#x53D8;&#x91CF;&#x5BF9;&#x5E94;&#x7684;&#x5217;&#x5411;&#x91CF;&#x7684;&#x5404;&#x4E2A;&#x5206;&#x91CF;&#x90FD;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;0&#xFF0C;&#x5219;&#x8BE5;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x95EE;&#x9898;&#x6709;&#x65E0;&#x754C;&#x89E3;&#x3002;</font></p><h1 id="&#x7B97;&#x6CD5;&#x6B65;&#x9AA4;"><a href="#&#x7B97;&#x6CD5;&#x6B65;&#x9AA4;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6B65;&#x9AA4;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6B65;&#x9AA4;</font></h1><h2 id="&#x5EFA;&#x7ACB;&#x521D;&#x59CB;&#x5355;&#x7EAF;&#x5F62;&#x8868;"><a href="#&#x5EFA;&#x7ACB;&#x521D;&#x59CB;&#x5355;&#x7EAF;&#x5F62;&#x8868;" class="headerlink" title="&#x5EFA;&#x7ACB;&#x521D;&#x59CB;&#x5355;&#x7EAF;&#x5F62;&#x8868;"></a><font size="4">&#x5EFA;&#x7ACB;&#x521D;&#x59CB;&#x5355;&#x7EAF;&#x5F62;&#x8868;</font></h2><p>&#x2003;&#x2003;<font size="3">(1)&#x4ECE;&#x6784;&#x5EFA;&#x51FA;&#x7684;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x6807;&#x51C6;&#x578B;&#x4E2D;&#x627E;&#x51FA;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x548C;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#xFF0C;&#x4E14;&#x8BA9;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x7531;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x8868;&#x793A;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">(2)&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x7684;&#x7CFB;&#x6570;&#x8981;&#x7F29;&#x653E;&#x5230;1&#xFF0C;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x505A;&#x5217;&#xFF0C;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x505A;&#x884C;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">(2)&#x68C0;&#x9A8C;&#x6570;&#x653E;&#x7B2C;&#x4E00;&#x884C;&#xFF0C;&#x5E38;&#x6570;&#x9879;&#x653E;&#x7B2C;&#x4E00;&#x5217;&#xFF0C;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x4E2D;&#x7684;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x7684;&#x7CFB;&#x6570;&#x4F5C;&#x4E3A;&#x503C;&#xFF0C;&#x6784;&#x9020;&#x521D;&#x59CB;&#x5355;&#x7EAF;&#x5F62;&#x8868;&#x3002;</font><br><img src="/images/ALGORITHM/line2.png" alt="2"></p><h2 id="&#x6839;&#x636E;&#x5355;&#x7EAF;&#x5F62;&#x8868;&#x5224;&#x65AD;&#x662F;&#x5426;&#x5F97;&#x5230;&#x6700;&#x4F18;&#x89E3;"><a href="#&#x6839;&#x636E;&#x5355;&#x7EAF;&#x5F62;&#x8868;&#x5224;&#x65AD;&#x662F;&#x5426;&#x5F97;&#x5230;&#x6700;&#x4F18;&#x89E3;" class="headerlink" title="&#x6839;&#x636E;&#x5355;&#x7EAF;&#x5F62;&#x8868;&#x5224;&#x65AD;&#x662F;&#x5426;&#x5F97;&#x5230;&#x6700;&#x4F18;&#x89E3;"></a><font size="4">&#x6839;&#x636E;&#x5355;&#x7EAF;&#x5F62;&#x8868;&#x5224;&#x65AD;&#x662F;&#x5426;&#x5F97;&#x5230;&#x6700;&#x4F18;&#x89E3;</font></h2><p>&#x2003;&#x2003;<font size="3">(1)&#x5982;&#x679C;&#x6240;&#x6709;&#x7684;&#x68C0;&#x9A8C;&#x6570;&#x90FD;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;0&#xFF0C;&#x5219;&#x5DF2;&#x83B7;&#x5F97;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x7B97;&#x6CD5;&#x7ED3;&#x675F;&#xFF0C;&#x53D6;&#x51FA;&#x5DE6;&#x4E0A;&#x89D2;&#x7684;&#x503C;&#x5373;&#x4E3A;&#x6700;&#x4F18;&#x89E3;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">(2)&#x5982;&#x679C;&#x6240;&#x6709;&#x7684;&#x68C0;&#x9A8C;&#x6570;&#x6709;&#x4E9B;&#x4E3A;&#x6B63;&#x6570;&#xFF0C;&#x4F46;&#x5176;&#x4E2D;&#x67D0;&#x4E00;&#x6B63;&#x7684;&#x68C0;&#x9A8C;&#x6570;&#x5BF9;&#x5E94;&#x7684;&#x5217;&#x5411;&#x91CF;&#x7684;&#x6240;&#x6709;&#x5206;&#x91CF;&#x5747;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;0&#xFF0C;&#x5219;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x95EE;&#x9898;&#x65E0;&#x89E3;&#xFF0C;&#x7B97;&#x6CD5;&#x7ED3;&#x675F;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">(3)&#x5982;&#x679C;&#x6240;&#x6709;&#x7684;&#x68C0;&#x9A8C;&#x6570;&#x6709;&#x4E9B;&#x4E3A;&#x6B63;&#x6570;&#xFF0C;&#x4F46;&#x5176;&#x4E2D;&#x67D0;&#x4E00;&#x6B63;&#x7684;&#x68C0;&#x9A8C;&#x6570;&#x5BF9;&#x5E94;&#x7684;&#x5217;&#x5411;&#x91CF;&#x4E2D;&#x6709;&#x6B63;&#x7684;&#x5206;&#x91CF;&#xFF0C;&#x5219;&#x7EE7;&#x7EED;&#x4E0B;&#x4E00;&#x6B65;&#x3002;</font></p><h2 id="&#x9009;&#x62E9;&#x5165;&#x57FA;&#x53D8;&#x91CF;"><a href="#&#x9009;&#x62E9;&#x5165;&#x57FA;&#x53D8;&#x91CF;" class="headerlink" title="&#x9009;&#x62E9;&#x5165;&#x57FA;&#x53D8;&#x91CF;"></a><font size="4">&#x9009;&#x62E9;&#x5165;&#x57FA;&#x53D8;&#x91CF;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x9009;&#x53D6;&#x68C0;&#x9A8C;&#x6570;&#x4E2D;&#x6700;&#x5927;&#x7684;&#x4E00;&#x4E2A;&#xFF0C;&#x5176;&#x5BF9;&#x5E94;&#x7684;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x79F0;&#x4E3A;&#x5165;&#x57FA;&#x53D8;&#x91CF;&#xFF0C;&#x8BE5;&#x5217;&#x79F0;&#x4E3A;&#x5165;&#x57FA;&#x5217;</font></p><h2 id="&#x9009;&#x62E9;&#x79BB;&#x57FA;&#x53D8;&#x91CF;"><a href="#&#x9009;&#x62E9;&#x79BB;&#x57FA;&#x53D8;&#x91CF;" class="headerlink" title="&#x9009;&#x62E9;&#x79BB;&#x57FA;&#x53D8;&#x91CF;"></a><font size="4">&#x9009;&#x62E9;&#x79BB;&#x57FA;&#x53D8;&#x91CF;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x9009;&#x53D6;&#x5E38;&#x6570;&#x5217;&#x5143;&#x7D20;&#x4E0E;&#x5165;&#x57FA;&#x5217;&#x5143;&#x7D20;&#x7684;&#x6BD4;&#x503C;&#x4E2D;&#xFF0C;&#x6B63;&#x6570;&#x7684;&#x6700;&#x5C0F;&#x8005;&#x6240;&#x5BF9;&#x5E94;&#x7684;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x4E3A;&#x79BB;&#x57FA;&#x53D8;&#x91CF;&#x3002;</font></p><h2 id="&#x6362;&#x57FA;&#x53D8;&#x6362;"><a href="#&#x6362;&#x57FA;&#x53D8;&#x6362;" class="headerlink" title="&#x6362;&#x57FA;&#x53D8;&#x6362;"></a><font size="4">&#x6362;&#x57FA;&#x53D8;&#x6362;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5C06;&#x5355;&#x7EAF;&#x5F62;&#x8868;&#x4E0A;&#x7684;&#x5165;&#x57FA;&#x53D8;&#x91CF;&#x548C;&#x79BB;&#x57FA;&#x53D8;&#x91CF;&#x4E92;&#x6362;&#x4F4D;&#x7F6E;&#x3002;</font><br><img src="/images/ALGORITHM/line3.png" alt="3"></p><h2 id="&#x8BA1;&#x7B97;&#x65B0;&#x7684;&#x5355;&#x7EAF;&#x5F62;&#x8868;"><a href="#&#x8BA1;&#x7B97;&#x65B0;&#x7684;&#x5355;&#x7EAF;&#x5F62;&#x8868;" class="headerlink" title="&#x8BA1;&#x7B97;&#x65B0;&#x7684;&#x5355;&#x7EAF;&#x5F62;&#x8868;"></a><font size="4">&#x8BA1;&#x7B97;&#x65B0;&#x7684;&#x5355;&#x7EAF;&#x5F62;&#x8868;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5165;&#x57FA;&#x5217;=-&#x539F;&#x503C;/&#x4EA4;&#x53C9;&#x4F4D;&#x503C;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x79BB;&#x57FA;&#x884C;=&#x539F;&#x503C;/&#x4EA4;&#x53C9;&#x4F4D;&#x503C;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x4EA4;&#x53C9;&#x4F4D;=&#x539F;&#x503C;&#x53BB;&#x5012;&#x6570;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x5DE6;&#x4E0A;&#x89D2;&#x503C;=&#x539F;&#x503C;+&#x540C;&#x884C;&#x5165;&#x57FA;&#x5217;&#x5143;&#x7D20;&#x503C;*&#x540C;&#x5217;&#x79BB;&#x57FA;&#x884C;&#x5143;&#x7D20;&#x503C;/&#x4EA4;&#x53C9;&#x4F4D;&#x503C;&#x3002;</font></p><p><img src="/images/ALGORITHM/line4.png" alt="4"></p><p>&#x2003;&#x2003;<font size="3">&#x5176;&#x4F59;&#x503C;=&#x539F;&#x503C;-&#x540C;&#x884C;&#x5165;&#x57FA;&#x5217;&#x5143;&#x7D20;&#x503C;*&#x540C;&#x5217;&#x79BB;&#x57FA;&#x884C;&#x5143;&#x7D20;&#x503C;/&#x4EA4;&#x53C9;&#x4F4D;&#x503C;&#x3002;</font></p><p><img src="/images/ALGORITHM/line5.png" alt="5"></p><p>&#x2003;&#x2003;<font size="3">&#x5F97;&#x5230;&#x65B0;&#x7684;&#x5355;&#x7EAF;&#x5F62;&#x8868;&#x518D;&#x8FD4;&#x56DE;&#x7B2C;&#x4E8C;&#x6B65;&#x91CD;&#x65B0;&#x5224;&#x65AD;&#x3002;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;&#x3002;</font><br>&#x2003;&#x2003;<font size="3">&#x672C;&#x9898;&#x7684;&#x6700;&#x7EC8;&#x7684;&#x5355;&#x7EAF;&#x5F62;&#x8868;&#x5982;&#x4E0B;&#xFF0C;&#x53EF;&#x77E5;&#x6700;&#x4F18;&#x89E3;&#x4E3A;z&#x2019;=11&#xFF0C;&#x7531;&#x4E8E;&#x6B64;&#x9898;&#x8981;&#x6C42;&#x6700;&#x5C0F;&#x503C;&#xFF0C;&#x5373;z=-z=-11&#x3002;</font><br><img src="/images/ALGORITHM/line6.png" alt="6"><br>&#x2003;&#x2003;<font size="3">&#x5176;&#x6700;&#x4F18;&#x89E3;&#x4E3A;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x5BF9;&#x5E94;&#x7684;&#x5E38;&#x6570;&#x9879;&#x7EC4;&#x6210;&#xFF0C;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x5168;&#x90E8;&#x7F6E;&#x4E3A;0&#xFF0C;&#x5373;&#x89E3;&#x4E3A;</font><br>$$\begin{pmatrix} x_1 \ x_2 \ x_3 \ x_4 \ x_5 \ x_6 \end{pmatrix} = \begin{pmatrix} 0 \ 4 \ 5 \ 0 \ 0 \ 11 \end{pmatrix}$$</p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x6700;&#x5927;&#x5229;&#x6DA6;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x6700;&#x5927;&#x5229;&#x6DA6;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6700;&#x5927;&#x5229;&#x6DA6;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6700;&#x5927;&#x5229;&#x6DA6;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x67D0;&#x5DE5;&#x5382;&#x6709;3&#x4E2A;&#x8F66;&#x95F4;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x8F66;&#x95F4;&#x7528;1&#x4E2A;&#x5355;&#x4F4D;&#x7684;&#x539F;&#x6599;N&#x53EF;&#x4EE5;&#x52A0;&#x5DE5;5&#x4E2A;&#x5355;&#x4F4D;&#x7684;&#x4EA7;&#x54C1;A&#x548C;2&#x4E2A;&#x5355;&#x4F4D;&#x7684;&#x4EA7;&#x54C1;B&#x3002;<br>&#x2003;&#x2003;&#x5982;&#x679C;&#x4EA7;&#x54C1;A&#x76F4;&#x63A5;&#x552E;&#x51FA;&#xFF0C;&#x552E;&#x4EF7;&#x4E3A;10&#x5143;&#xFF0C;&#x5982;&#x679C;&#x5728;&#x7B2C;&#x4E8C;&#x4E2A;&#x8F66;&#x95F4;&#x7EE7;&#x7EED;&#x52A0;&#x5DE5;&#xFF0C;&#x5219;&#x9700;&#x8981;&#x52A0;&#x5DE5;&#x8D39;5&#x5143;&#xFF0C;&#x52A0;&#x5DE5;&#x540E;&#x552E;&#x4EF7;&#x4E3A;19&#x5143;&#x3002;<br>&#x2003;&#x2003;&#x5982;&#x679C;&#x4EA7;&#x54C1;B&#x76F4;&#x63A5;&#x552E;&#x51FA;&#xFF0C;&#x552E;&#x4EF7;&#x4E3A;16&#x5143;&#xFF0C;&#x5982;&#x679C;&#x5728;&#x7B2C;&#x4E09;&#x4E2A;&#x8F66;&#x95F4;&#x7EE7;&#x7EED;&#x52A0;&#x5DE5;&#xFF0C;&#x5219;&#x9700;&#x8981;&#x52A0;&#x5DE5;&#x8D39;4&#x5143;&#xFF0C;&#x52A0;&#x5DE5;&#x540E;&#x552E;&#x4EF7;&#x4E3A;24&#x5143;&#x3002;<br>&#x2003;&#x2003;&#x539F;&#x6750;&#x6599;N&#x7684;&#x5355;&#x4F4D;&#x8D2D;&#x5165;&#x4EF7;&#x4E3A;5&#x5143;&#xFF0C;&#x6BCF;&#x5DE5;&#x65F6;&#x7684;&#x5DE5;&#x8D44;&#x662F;15&#x5143;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x8F66;&#x95F4;&#x52A0;&#x5DE5;&#x4E00;&#x4E2A;&#x5355;&#x4F4D;&#x7684;N&#x9700;&#x8981;0.05&#x4E2A;&#x5DE5;&#x65F6;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x8F66;&#x95F4;&#x52A0;&#x5DE5;&#x4E00;&#x4E2A;&#x5355;&#x4F4D;&#x9700;&#x8981;0.1&#x4E2A;&#x5DE5;&#x65F6;&#xFF0C;&#x7B2C;&#x4E09;&#x4E2A;&#x8F66;&#x95F4;&#x52A0;&#x5DE5;&#x4E00;&#x4E2A;&#x5355;&#x4F4D;&#x9700;&#x8981;0.08&#x4E2A;&#x5DE5;&#x65F6;&#x3002;<br>&#x2003;&#x2003;&#x6BCF;&#x4E2A;&#x6708;&#x6700;&#x591A;&#x80FD;&#x5F97;&#x5230;12000&#x5355;&#x4F4D;&#x7684;&#x539F;&#x6750;&#x6599;N&#xFF0C;&#x5DE5;&#x65F6;&#x6700;&#x591A;&#x4E3A;1000&#x5DE5;&#x65F6;&#xFF0C;&#x95EE;&#x5982;&#x4F55;&#x5B89;&#x6392;&#x751F;&#x4EA7;&#x624D;&#x80FD;&#x5F97;&#x5230;&#x6700;&#x9AD8;&#x7684;&#x6536;&#x76CA;&#xFF1F;</p><h2 id="&#x95EE;&#x9898;&#x5206;&#x6790;"><a href="#&#x95EE;&#x9898;&#x5206;&#x6790;" class="headerlink" title="&#x95EE;&#x9898;&#x5206;&#x6790;"></a><font size="4">&#x95EE;&#x9898;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;&#x5047;&#x8BBE;A&#x76F4;&#x63A5;&#x5356;&#x51FA;&#x7684;&#x6570;&#x91CF;&#x4E3A;x<sub>1</sub>&#xFF0C;&#x6536;&#x83B7;&#x7684;&#x5229;&#x6DA6;&#x4E3A;$10 \ x_1$<br>&#x2003;&#x2003;&#x5047;&#x8BBE;A&#x5728;&#x7B2C;&#x4E8C;&#x8F66;&#x95F4;&#x52A0;&#x5DE5;&#x540E;&#x7684;&#x51FA;&#x552E;&#x91CF;&#x4E3A;x<sub>2</sub>&#xFF0C;&#x6536;&#x83B7;&#x7684;&#x5229;&#x6DA6;&#x4E3A;$(19-5-0.1 \times 15) \ x_2 = 12.5 \ x_2$<br>&#x2003;&#x2003;&#x5047;&#x8BBE;B&#x76F4;&#x63A5;&#x5356;&#x51FA;&#x7684;&#x6570;&#x91CF;&#x4E3A;x<sub>3</sub>&#xFF0C;&#x6536;&#x83B7;&#x7684;&#x5229;&#x6DA6;&#x4E3A;$16 \ x_3$<br>&#x2003;&#x2003;&#x5047;&#x8BBE;B&#x5728;&#x7B2C;&#x4E09;&#x8F66;&#x95F4;&#x52A0;&#x5DE5;&#x540E;&#x7684;&#x51FA;&#x552E;&#x91CF;&#x4E3A;x<sub>4</sub>&#xFF0C;&#x6536;&#x83B7;&#x7684;&#x5229;&#x6DA6;&#x4E3A;$(24-4-0.08 \times 15) \ x_4 = 18.8 \ x_4$<br>&#x2003;&#x2003;&#x5047;&#x8BBE;&#x6240;&#x7528;&#x7684;&#x539F;&#x6750;&#x6599;&#x6570;&#x91CF;&#x4E3A;x<sub>5</sub>&#xFF0C;&#x6240;&#x7528;&#x7684;&#x6210;&#x672C;&#x4E3A;$(5+0.05 \times 15) \ x_5 = 5.75 \ x_5$<br>&#x2003;&#x2003;&#x6839;&#x636E;&#x5206;&#x6790;&#x53EF;&#x5F97;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x548C;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x5982;&#x4E0B;:<br>$$\max z = 10 \ x_1 + 12.5 \ x_2 + 16 \ x_4 +18.8 \ x_4 - 5.75 \ x_5$$<br>$$\begin{cases} x_1 + x_2 - 5 \ x_5 =0 \ x_3 + x_4 - 2 \ x_5 = 0 \  x_5 \le 12000 \ 0.1 \ x_1 + 0.08 \ x_4 +0.05 \ x_5 \le 1000 \ x_i \ge 0 \ (i = 1, \ 2, \ 3, \ 4, \ 5) \end{cases}$$</p><p>&#x2003;&#x2003;&#x5C06;&#x5176;&#x8F6C;&#x6362;&#x4E3A;&#x6807;&#x51C6;&#x578B;&#x53EF;&#x77E5;:<br>$$\max z = 10 \ x_1 + 12.5 \ x_2 + 16 \ x_4 +18.8 \ x_4 - 5.75 \ x_5$$<br>$$\begin{cases} x_1 + x_2 - 5 \ x_5 =0 \ x_3 + x_4 - 2 \ x_5 = 0 \  x_5 + x_6 = 12000 \ 0.1 \ x_1 + 0.08 \ x_4 +0.05 \ x_5 + x_7 = 1000 \ x_i \ge 0 \ (i = 1, \ 2, \ 3, \ 4, \ 5, \ 6, \ 7) \end{cases}$$</p><p>&#x2003;&#x2003;&#x627E;&#x51FA;&#x57FA;&#x672C;&#x53D8;&#x91CF;$x_1, \ x_3, \ x_6, \ x_7$&#x548C;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;$x_2, \ x_4, \ x_5$<br>&#x2003;&#x2003;&#x5C06;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x7531;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x8868;&#x793A;&#xFF0C;&#x5373;&#x7528;$x_1 = 5 \ x_5 - x_2, \ x_3 = 2 \ x_5 - x_4$&#x66FF;&#x6362;&#xFF0C;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x8F6C;&#x5316;&#x4E3A;:<br>$$\begin{align} z &amp; =10(5 \ x_5 - x_2) + 12.5 \ x_2 + 16(2 \ x_5 - x_4) + 18.8 \ x_4 - 5.75 \ x_5 \ &amp; = 2.5 \ x_2 + 2.8 \ x_4 + 76.25 \ x_5 \ \end{align}$$</p><p>&#x2003;&#x2003;&#x6784;&#x9020;&#x521D;&#x59CB;&#x5355;&#x7EAF;&#x5F62;&#x8868;<br><img src="/images/ALGORITHM/line7.png" alt="7"></p><p>&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x7684;&#x4E0B;&#x6807;&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x8F93;&#x5165;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x7684;&#x4E0B;&#x6807;&#xFF0C;&#x7136;&#x540E;&#x8F93;&#x5165;&#x521D;&#x59CB;&#x5355;&#x7EAF;&#x5F62;&#x8868;&#x3002;</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 3 6 7 # &#x57FA;&#x672C;&#x53D8;&#x91CF;&#x4E0B;&#x6807;</span><br><span class="line">2 4 5 # &#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x4E0B;&#x6807;</span><br><span class="line">0 2.5 2.8 76.25 # &#x521D;&#x59CB;&#x5355;&#x7EAF;&#x5F62;&#x8868;</span><br><span class="line">0 1 0 -5</span><br><span class="line">0 0 1 -2</span><br><span class="line">12000 0 0 1</span><br><span class="line">1000 0.1 0.08 0.05</span><br></pre></td></tr></tbody></table></figure><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def display_simplex_table(simplex_table):</span><br><span class="line">    print(&apos;-----&#x5355;&#x7EAF;&#x5F62;&#x8868;&#x5982;&#x4E0B;-----&apos;)</span><br><span class="line">    print(&apos; &apos;.join([&apos; &apos;] + nonbase_subscript))</span><br><span class="line">    for i in range(base_num):</span><br><span class="line">        print(&apos; &apos;.join([base_subscript[i]] + [str(x) for x in simplex_table[i]]))</span><br><span class="line"></span><br><span class="line">def judge_simplex_table(simplex_table):</span><br><span class="line">    global solve</span><br><span class="line">    display_simplex_table(simplex_table)</span><br><span class="line">    all_negative_j_flag = True</span><br><span class="line">    for j in range(1, nonbase_num):</span><br><span class="line">        if simplex_table[0][j] &gt; 0:</span><br><span class="line">            all_negative_j_flag = False</span><br><span class="line">            all_negative_i_flag = True</span><br><span class="line">            for i in range(1, base_num):</span><br><span class="line">                if simplex_table[i][j] &gt; 0:</span><br><span class="line">                    all_negative_i_flag = False</span><br><span class="line">            if all_negative_i_flag:</span><br><span class="line">                print(&apos;&#x8BE5;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x95EE;&#x9898;&#x65E0;&#x754C;&#xFF0C;&#x65E0;&#x6CD5;&#x6C42;&#x5F97;&#x6700;&#x4F18;&#x89E3;&apos;)</span><br><span class="line">                return</span><br><span class="line">    if all_negative_j_flag:</span><br><span class="line">        for i in range(1, base_num):</span><br><span class="line">            solve.append(base_subscript[i] + &apos;=&apos; + str(simplex_table[i][0]))</span><br><span class="line">        for j in range(1, nonbase_num):</span><br><span class="line">            solve.append(nonbase_subscript[j] + &apos;=&apos; + str(simplex_table[0][j]))</span><br><span class="line">        print(&apos;&#x8BE5;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x4E3A;:&apos;, simplex_table[0][0])</span><br><span class="line">        print(&apos;&#x8BE5;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x5411;&#x91CF;&#x4E3A;:&apos;, &apos;, &apos;.join(solve))</span><br><span class="line">        return</span><br><span class="line">    else:</span><br><span class="line">        update_simplex_table(simplex_table)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">def update_simplex_table(simplex_table):</span><br><span class="line">    global base_subscript, nonbase_subscript</span><br><span class="line">    in_base_var = simplex_table[0][1:].index(max(simplex_table[0][1:])) + 1</span><br><span class="line">    ratio = []</span><br><span class="line">    for i in range(1, base_num):</span><br><span class="line">        ratio = ratio + [0]  if simplex_table[i][in_base_var] == 0 else ratio + [simplex_table[i][0]/simplex_table[i][in_base_var]]</span><br><span class="line">    out_base_value = max(ratio) + 1</span><br><span class="line">    out_base_var = 0</span><br><span class="line">    for i in range(len(ratio)):</span><br><span class="line">        out_base_value, out_base_var = [ratio[i], i] if 0 &lt; ratio[i] &lt; out_base_value else [out_base_value, out_base_var]</span><br><span class="line">    out_base_var += 1</span><br><span class="line">    tmp_table = [[0 for i in range(nonbase_num)] for j in range(base_num)]</span><br><span class="line">    for i in range(base_num):</span><br><span class="line">        for j in range(nonbase_num):</span><br><span class="line">            if i == 0 and j == 0:</span><br><span class="line">                tmp_table[i][j] = simplex_table[i][j] + simplex_table[out_base_var][j] * simplex_table[i][in_base_var] / simplex_table[out_base_var][in_base_var]</span><br><span class="line">                continue</span><br><span class="line">            if i != out_base_var and j != in_base_var:</span><br><span class="line">                tmp_table[i][j] = simplex_table[i][j] - simplex_table[out_base_var][j] * simplex_table[i][in_base_var] / simplex_table[out_base_var][in_base_var]</span><br><span class="line">                continue</span><br><span class="line">            if i != out_base_var and j == in_base_var:</span><br><span class="line">                tmp_table[i][j] = -1 * simplex_table[i][j] / simplex_table[out_base_var][in_base_var]</span><br><span class="line">                continue</span><br><span class="line">            if i == out_base_var and j != in_base_var:</span><br><span class="line">                tmp_table[i][j] = simplex_table[i][j] / simplex_table[out_base_var][in_base_var]</span><br><span class="line">                continue</span><br><span class="line">            if i == out_base_var and j == in_base_var:</span><br><span class="line">                tmp_table[i][j] = 1 / simplex_table[i][j]</span><br><span class="line">                continue</span><br><span class="line">    simplex_table = [x[:] for x in tmp_table]</span><br><span class="line">    base_subscript[out_base_var], nonbase_subscript[in_base_var] = nonbase_subscript[in_base_var], base_subscript[out_base_var]</span><br><span class="line">    judge_simplex_table(simplex_table)</span><br><span class="line"></span><br><span class="line">print(&apos;&#x8F93;&#x5165;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x4E0B;&#x6807;:&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    base_subscript = [&apos;c&apos;] + [&apos;x&apos; + x for x in line.strip().split()]</span><br><span class="line">    print(&apos;&#x8F93;&#x5165;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x4E0B;&#x6807;:&apos;)</span><br><span class="line">    nonbase_subscript = [&apos;b&apos;] + [&apos;x&apos; + x for x in sys.stdin.readline().strip().split()]</span><br><span class="line">    base_num, nonbase_num = len(base_subscript), len(nonbase_subscript)</span><br><span class="line">    simplex_table, solve = [], []</span><br><span class="line">    print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x521D;&#x59CB;&#x5355;&#x7EAF;&#x5F62;&#x8868;:&apos;)</span><br><span class="line">    for i in range(base_num):</span><br><span class="line">        simplex_table.append([float(x) for x in sys.stdin.readline().strip().split()])</span><br><span class="line">    judge_simplex_table(simplex_table)</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/line8.png" alt="8"></p><h1 id="&#x7B97;&#x6CD5;&#x603B;&#x7ED3;"><a href="#&#x7B97;&#x6CD5;&#x603B;&#x7ED3;" class="headerlink" title="&#x7B97;&#x6CD5;&#x603B;&#x7ED3;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x603B;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x95EE;&#x9898;&#x7684;&#x96BE;&#x70B9;&#x4E0D;&#x5728;&#x4E8E;&#x7B97;&#x6CD5;&#x7684;&#x8BBE;&#x8BA1;&#xFF0C;&#x800C;&#x662F;&#x5728;&#x4E8E;&#x5982;&#x4F55;&#x4ECE;&#x6587;&#x5B57;&#x63CF;&#x8FF0;&#x4E2D;&#x5BFB;&#x627E;&#x5230;&#x5408;&#x9002;&#x7684;&#x6A21;&#x578B;&#xFF0C;&#x5982;&#x4F55;&#x5EFA;&#x7ACB;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x65B9;&#x7A0B;&#x7EC4;&#x3002;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x5728;&#x5B9E;&#x9645;&#x7684;&#x751F;&#x4EA7;&#x751F;&#x6D3B;&#x4E2D;&#x6709;&#x7740;&#x91CD;&#x8981;&#x7684;&#x5E94;&#x7528;&#xFF0C;&#x867D;&#x7136;&#x8BE5;&#x7B97;&#x6CD5;&#x7406;&#x89E3;&#x8D77;&#x6765;&#x8F83;&#x4E3A;&#x590D;&#x6742;&#xFF0C;&#x4F46;&#x662F;&#x8BB0;&#x4F4F;&#x5176;&#x6C42;&#x89E3;&#x5F62;&#x5F0F;&#xFF0C;&#x9047;&#x5230;&#x6B64;&#x7C7B;&#x95EE;&#x9898;&#x76F4;&#x63A5;&#x4EFF;&#x7167;&#x4F7F;&#x7528;&#x5373;&#x53EF;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Linear Programming&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="计算机基础知识" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="常用算法" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>并查集(Union Find)</title>
    <link href="https://USTCcoder.github.io/2019/08/07/algorithm%20union%20find/"/>
    <id>https://USTCcoder.github.io/2019/08/07/algorithm union find/</id>
    <published>2019-08-07T06:30:18.000Z</published>
    <updated>2019-08-07T15:58:23.253Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x5E76;&#x67E5;&#x96C6;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"><a href="#&#x539F;&#x7406;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x539F;&#x7406;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003; <strong>Union Find:&#x5E76;&#x67E5;&#x96C6;</strong>&#xFF0C;&#x662F;&#x4E00;&#x79CD;<strong>&#x6811;&#x578B;</strong>&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x7528;&#x4E8E;&#x5904;&#x7406;&#x4E00;&#x4E9B;<strong>&#x4E0D;&#x76F8;&#x4EA4;&#x96C6;&#x5408;&#x7684;&#x5408;&#x5E76;&#x53CA;&#x67E5;&#x8BE2;</strong>&#x95EE;&#x9898;&#x3002;&#x5728;&#x4E00;&#x4E9B;&#x6709;N&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x96C6;&#x5408;&#x5E94;&#x7528;&#x95EE;&#x9898;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x901A;&#x5E38;&#x662F;&#x5728;&#x5F00;&#x59CB;&#x65F6;&#x8BA9;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x6784;&#x6210;&#x4E00;&#x4E2A;&#x5355;&#x5143;&#x7D20;&#x7684;&#x96C6;&#x5408;&#xFF0C;&#x7136;&#x540E;&#x6309;&#x4E00;&#x5B9A;&#x987A;&#x5E8F;&#x5C06;&#x5C5E;&#x4E8E;<strong>&#x540C;&#x4E00;&#x7EC4;</strong>&#x7684;&#x5143;&#x7D20;&#x6240;&#x5728;&#x7684;<strong>&#x96C6;&#x5408;&#x5408;&#x5E76;</strong>&#x3002;<br><a id="more"></a></p><p><img src="/images/ALGORITHM/union1.jpg" alt="1"></p><h1 id="&#x7B97;&#x6CD5;&#x6B65;&#x9AA4;"><a href="#&#x7B97;&#x6CD5;&#x6B65;&#x9AA4;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6B65;&#x9AA4;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6B65;&#x9AA4;</font></h1><h2 id="&#x521D;&#x59CB;&#x5316;"><a href="#&#x521D;&#x59CB;&#x5316;" class="headerlink" title="&#x521D;&#x59CB;&#x5316;"></a><font size="4">&#x521D;&#x59CB;&#x5316;</font></h2><p>&#x2003;&#x2003;&#x628A;&#x6BCF;&#x4E2A;&#x70B9;&#x6240;&#x5728;&#x96C6;&#x5408;&#x521D;&#x59CB;&#x5316;&#x4E3A;&#x5176;&#x81EA;&#x8EAB;&#xFF0C;&#x901A;&#x5E38;&#x6765;&#x8BF4;&#xFF0C;&#x8FD9;&#x4E2A;&#x6B65;&#x9AA4;&#x5728;&#x6BCF;&#x6B21;&#x4F7F;&#x7528;&#x8BE5;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x65F6;&#x53EA;&#x9700;&#x8981;&#x6267;&#x884C;&#x4E00;&#x6B21;&#x3002;</p><h2 id="&#x67E5;&#x627E;&#x6839;&#x7ED3;&#x70B9;"><a href="#&#x67E5;&#x627E;&#x6839;&#x7ED3;&#x70B9;" class="headerlink" title="&#x67E5;&#x627E;&#x6839;&#x7ED3;&#x70B9;"></a><font size="4">&#x67E5;&#x627E;&#x6839;&#x7ED3;&#x70B9;</font></h2><p>&#x2003;&#x2003;&#x67E5;&#x627E;&#x5143;&#x7D20;&#x6240;&#x5728;&#x7684;&#x96C6;&#x5408;&#xFF0C;&#x5373;&#x6839;&#x8282;&#x70B9;&#x3002;&#x4E3A;&#x4E86;&#x4EE5;&#x540E;&#x7684;&#x67E5;&#x627E;&#x65B9;&#x4FBF;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x67E5;&#x8BE2;&#x65F6;&#x5C06;&#x8BE5;&#x7ED3;&#x70B9;&#x4EE5;&#x53CA;&#x8BE5;&#x7ED3;&#x70B9;&#x7684;&#x6240;&#x6709;&#x7236;&#x8282;&#x70B9;&#x90FD;&#x76F4;&#x63A5;&#x6307;&#x5411;&#x6839;&#x7ED3;&#x70B9;&#xFF0C;&#x518D;&#x6B21;&#x67E5;&#x8BE2;&#x65F6;&#x5373;&#x53EF;&#x76F4;&#x63A5;&#x67E5;&#x627E;&#x5230;&#x6839;&#x7ED3;&#x70B9;&#x3002;</p><h2 id="&#x5408;&#x5E76;"><a href="#&#x5408;&#x5E76;" class="headerlink" title="&#x5408;&#x5E76;"></a><font size="4">&#x5408;&#x5E76;</font></h2><p>&#x2003;&#x2003;&#x5C06;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#x6240;&#x5728;&#x7684;&#x96C6;&#x5408;&#x5408;&#x5E76;&#x4E3A;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#xFF0C;&#x5408;&#x5E76;&#x4E4B;&#x524D;&#xFF0C;&#x5E94;&#x5148;&#x5224;&#x65AD;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#x662F;&#x5426;&#x5C5E;&#x4E8E;&#x540C;&#x4E00;&#x96C6;&#x5408;&#xFF0C;&#x8FD9;&#x53EF;&#x7528;&#x4E0A;&#x9762;&#x7684;&#x201C;&#x67E5;&#x627E;&#x6839;&#x7ED3;&#x70B9;&#x201D;&#x64CD;&#x4F5C;&#x5B9E;&#x73B0;&#xFF0C;&#x5224;&#x65AD;&#x4E24;&#x4E2A;&#x6839;&#x7ED3;&#x70B9;&#x662F;&#x5426;&#x76F8;&#x540C;&#x6765;&#x5224;&#x65AD;&#x662F;&#x5426;&#x5C5E;&#x4E8E;&#x540C;&#x4E00;&#x96C6;&#x5408;&#x3002;</p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x5C9B;&#x5C7F;&#x6570;&#x91CF;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x5C9B;&#x5C7F;&#x6570;&#x91CF;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x5C9B;&#x5C7F;&#x6570;&#x91CF;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x5C9B;&#x5C7F;&#x6570;&#x91CF;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x6709;&#x4E00;&#x4E2A;&#x4E8C;&#x7EF4;&#x7684;&#x7F51;&#x683C;&#x5730;&#x56FE;&#xFF0C;&#x5176;&#x4E2D;1&#x4EE3;&#x8868;&#x9646;&#x5730;0&#x4EE3;&#x8868;&#x6C34;&#xFF0C;&#x5E76;&#x4E14;&#x8BE5;&#x7F51;&#x683C;&#x7684;&#x56DB;&#x5468;&#x5168;&#x90E8;&#x7531;&#x6C34;&#x5305;&#x56F4;&#x3002;&#x6211;&#x4EEC;&#x5BF9;&#x5C9B;&#x5C7F;&#x7684;&#x5B9A;&#x4E49;&#x662F;&#x56DB;&#x9762;&#x73AF;&#x6C34;&#xFF0C;&#x7531;&#x76F8;&#x90BB;&#x7684;&#x9646;&#x5730;&#x6C34;&#x5E73;&#x6216;&#x5782;&#x76F4;&#x8FDE;&#x63A5;&#x5F62;&#x6210;&#xFF0C;&#x73B0;&#x5728;&#x9700;&#x8981;&#x7EDF;&#x8BA1;&#x5C9B;&#x5C7F;&#x7684;&#x6570;&#x91CF;&#x3002;<br>&#x2003;&#x2003;&#x8F93;&#x5165;&#x4E00;&#x884C;&#x6570;&#x636E;&#xFF0C;&#x4F7F;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x9694;&#x4E8C;&#x7EF4;&#x5730;&#x56FE;&#x7684;&#x6BCF;&#x4E00;&#x884C;&#xFF0C;&#x4F7F;&#x7528;&#x9017;&#x53F7;&#x5206;&#x9694;&#x4E00;&#x884C;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x9879;&#x3002;<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1,1,0,0,0 1,1,0,0,0 0,0,1,0,0 0,0,0,1,1 # &#x8F93;&#x5165;4&#xD7;5&#x7684;&#x5730;&#x56FE;</span><br></pre></td></tr></tbody></table></figure><p></p><p><img src="/images/ALGORITHM/union2.png" alt="2"></p><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;&#x521D;&#x59CB;&#x65F6;&#x5C06;&#x6BCF;&#x4E2A;&#x503C;&#x4E3A;1&#x7684;&#x70B9;&#x90FD;&#x6307;&#x5411;&#x81EA;&#x5DF1;(&#x5373;&#x5355;&#x72EC;&#x4E00;&#x4E2A;&#x70B9;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x5C9B;)&#xFF0C;count&#x7B49;&#x4E8E;&#x503C;&#x4E3A;1&#x7684;&#x70B9;&#x7684;&#x4E2A;&#x6570;&#x3002;&#x7136;&#x540E;&#x904D;&#x5386;&#x6574;&#x4E2A;&#x5730;&#x56FE;&#xFF0C;&#x5982;&#x679C;&#x8BE5;&#x70B9;&#x4E0A;&#x4E0B;&#x5DE6;&#x53F3;&#x6709;&#x503C;&#x4E3A;1&#x7684;&#x70B9;&#x5219;&#x67E5;&#x627E;&#x4E24;&#x4E2A;&#x70B9;&#x7684;&#x6839;&#x7ED3;&#x70B9;&#xFF0C;&#x5982;&#x679C;&#x6839;&#x7ED3;&#x70B9;&#x76F8;&#x540C;&#x8BF4;&#x660E;&#x5DF2;&#x7ECF;&#x5728;&#x540C;&#x4E00;&#x4E2A;&#x5C9B;&#x4E0A;&#xFF0C;&#x5426;&#x5219;&#x5408;&#x5E76;&#x4E24;&#x4E2A;&#x5C9B;&#xFF0C;count&#x503C;&#x51CF;1&#x3002;<br>&#x2003;&#x2003;&#x5C06;&#x6240;&#x6709;&#x70B9;&#x90FD;&#x904D;&#x5386;&#x4EE5;&#x540E;&#xFF0C;&#x6B64;&#x65F6;&#x76F8;&#x90BB;&#x7684;&#x70B9;&#x90FD;&#x5177;&#x6709;&#x540C;&#x6837;&#x7684;&#x6839;&#x7ED3;&#x70B9;&#xFF0C;&#x6B64;&#x65F6;&#x7684;count&#x4E2A;&#x6570;&#x5373;&#x4E3A;&#x5C9B;&#x5C7F;&#x7684;&#x6570;&#x91CF;&#x3002;</p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">class Union_find:</span><br><span class="line">    def __init__(self, grid):</span><br><span class="line">        row_num, col_num = len(grid), len(grid[0])</span><br><span class="line">        self.count = 0</span><br><span class="line">        self.parent = [-1] * (row_num * col_num)</span><br><span class="line">        self.rank = [0] * (row_num * col_num)</span><br><span class="line">        for i in range(row_num):</span><br><span class="line">            for j in range(col_num):</span><br><span class="line">                if grid[i][j] == &apos;1&apos;:</span><br><span class="line">                    self.parent[i * col_num + j] = i * col_num + j</span><br><span class="line">                    self.count += 1</span><br><span class="line"></span><br><span class="line">    def find(self, i):</span><br><span class="line">        root = i</span><br><span class="line">        while self.parent[root] != root: </span><br><span class="line">            root = self.parent[root]</span><br><span class="line">        while self.parent[i] != root:</span><br><span class="line">            i, self.parent[i] = self.parent[i], root</span><br><span class="line">        return root</span><br><span class="line"></span><br><span class="line">    def connection(self, p, q):</span><br><span class="line">        return self.find(p) == self.find(q)</span><br><span class="line"></span><br><span class="line">    def union(self, p, q):</span><br><span class="line">        proot = self.find(p)         </span><br><span class="line">        qroot = self.find(q)</span><br><span class="line">        if qroot != proot:</span><br><span class="line">            self.parent[proot] = qroot</span><br><span class="line">            self.count -= 1</span><br><span class="line"></span><br><span class="line">print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x8981;&#x67E5;&#x8BE2;&#x7684;&#x5730;&#x56FE;:&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    line = line.strip().split()</span><br><span class="line">    row_num, col_num, grid, direction = len(line), (len(line[0]) + 1) // 2, [], [[1, 0], [0, 1]]</span><br><span class="line">    for tmp in line:</span><br><span class="line">        grid.append(tmp.split(&apos;,&apos;))</span><br><span class="line">    uf = Union_find(grid)</span><br><span class="line">    for i in range(row_num):</span><br><span class="line">        for j in range(col_num):</span><br><span class="line">            if grid[i][j] == &apos;1&apos;:</span><br><span class="line">                for x, y in direction:</span><br><span class="line">                    new_i, new_j = i + x, j + y</span><br><span class="line">                    if new_i &lt; row_num and new_j &lt; col_num and grid[new_i][new_j] == &apos;1&apos;:</span><br><span class="line">                        uf.union(i * col_num + j, new_i * col_num + new_j)</span><br><span class="line">    print(&apos;&#x8BE5;&#x5730;&#x56FE;&#x4E2D;&#x5C9B;&#x5C7F;&#x7684;&#x6570;&#x91CF;&#x4E3A;:&apos;, uf.count)</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/union.png" alt="0"></p><h1 id="&#x7B97;&#x6CD5;&#x603B;&#x7ED3;"><a href="#&#x7B97;&#x6CD5;&#x603B;&#x7ED3;" class="headerlink" title="&#x7B97;&#x6CD5;&#x603B;&#x7ED3;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x603B;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x5E76;&#x67E5;&#x96C6;&#x662F;&#x4E00;&#x4E2A;&#x8F83;&#x4E3A;&#x590D;&#x6742;&#x4E14;&#x4E0D;&#x592A;&#x5E38;&#x7528;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x4F46;&#x662F;&#x53EF;&#x4EE5;&#x89E3;&#x51B3;&#x4E00;&#x4E9B;&#x7279;&#x5B9A;&#x95EE;&#x9898;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x89E3;&#x51B3;&#x4E00;&#x4E9B;&#x96C6;&#x5408;&#x5173;&#x7CFB;&#x7684;&#x95EE;&#x9898;&#x3002;&#x8BE5;&#x7B97;&#x6CD5;&#x53EF;&#x4EE5;&#x4F7F;&#x5177;&#x6709;&#x67D0;&#x4E9B;&#x7279;&#x5B9A;&#x5173;&#x7CFB;&#x7684;&#x70B9;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x7FA4;&#x4F53;&#xFF0C;&#x7136;&#x540E;&#x7EDF;&#x8BA1;&#x6574;&#x4F53;&#x7684;&#x7FA4;&#x4F53;&#x4E2A;&#x6570;&#x5373;&#x4E3A;&#x6574;&#x4F53;&#x7684;&#x7C7B;&#x522B;&#x4E2A;&#x6570;&#xFF0C;&#x67D0;&#x4E2A;&#x7FA4;&#x4F53;&#x4E2D;&#x4E2A;&#x4F53;&#x7684;&#x6570;&#x91CF;&#x5373;&#x4E3A;&#x6574;&#x4F53;&#x4E2D;&#x67D0;&#x4E00;&#x7C7B;&#x522B;&#x7684;&#x6570;&#x91CF;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Union Find&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="计算机基础知识" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="常用算法" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>位运算(Bit Operation)</title>
    <link href="https://USTCcoder.github.io/2019/08/02/algorithm%20bit%20operation/"/>
    <id>https://USTCcoder.github.io/2019/08/02/algorithm bit operation/</id>
    <published>2019-08-02T12:18:25.000Z</published>
    <updated>2019-08-07T15:57:54.910Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x4F4D;&#x8FD0;&#x7B97;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"><a href="#&#x539F;&#x7406;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x539F;&#x7406;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003; <strong>Bit Operation:&#x4F4D;&#x8FD0;&#x7B97;</strong>&#xFF0C;&#x7A0B;&#x5E8F;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x6570;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x5185;&#x5B58;&#x4E2D;&#x90FD;&#x662F;&#x4EE5;<strong>&#x4E8C;&#x8FDB;&#x5236;&#x7684;&#x5F62;&#x5F0F;&#x50A8;&#x5B58;</strong>&#x7684;&#xFF0C;&#x4F4D;&#x8FD0;&#x7B97;&#x5C31;&#x662F;&#x76F4;&#x63A5;&#x5BF9;&#x6574;&#x6570;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x4F4D;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#xFF0C;&#x6240;&#x4EE5;&#x8FD0;&#x7B97;&#x901F;&#x5EA6;&#x76F8;&#x5BF9;&#x8F83;&#x5FEB;&#x3002;&#x4F4D;&#x8FD0;&#x7B97;&#x4E3B;&#x8981;&#x5305;&#x62EC;<strong>&#x6309;&#x4F4D;&#x4E0E;(&amp;)</strong>&#x3001;<strong>&#x6309;&#x4F4D;&#x6216;(|)</strong>&#x3001;<strong>&#x6309;&#x4F4D;&#x5F02;&#x6216;(^)</strong>&#x3001;<strong>&#x53D6;&#x53CD;(~)</strong>&#x3001;<strong>&#x5DE6;&#x79FB;(&lt;&lt;)</strong>&#x3001;<strong>&#x53F3;&#x79FB;(&gt;&gt;)</strong>&#x8FD9;&#x51E0;&#x79CD;&#xFF0C;&#x5176;&#x4E2D;&#x9664;&#x4E86;&#x53D6;&#x53CD;(~)&#x4EE5;&#x5916;&#xFF0C;&#x5176;&#x4ED6;&#x7684;&#x90FD;&#x662F;&#x4E8C;&#x76EE;&#x8FD0;&#x7B97;&#x7B26;&#xFF0C;&#x5373;&#x8981;&#x6C42;&#x8FD0;&#x7B97;&#x7B26;&#x5DE6;&#x53F3;&#x4E24;&#x4FA7;&#x5747;&#x6709;&#x4E00;&#x4E2A;&#x8FD0;&#x7B97;&#x91CF;&#x3002;<br><a id="more"></a></p><h1 id="&#x7B97;&#x6CD5;&#x57FA;&#x7840;"><a href="#&#x7B97;&#x6CD5;&#x57FA;&#x7840;" class="headerlink" title="&#x7B97;&#x6CD5;&#x57FA;&#x7840;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x57FA;&#x7840;</font></h1><h2 id="&#x539F;&#x7801;"><a href="#&#x539F;&#x7801;" class="headerlink" title="&#x539F;&#x7801;"></a><font size="4">&#x539F;&#x7801;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x539F;&#x7801;&#x662F;&#x4E8C;&#x8FDB;&#x5236;&#x7684;&#x4E00;&#x79CD;&#x8868;&#x73B0;&#x65B9;&#x5F0F;&#x3002;&#x53D6;&#x8BE5;&#x6574;&#x6570;&#x7684;&#x7EDD;&#x5BF9;&#x503C;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#xFF0C;&#x518D;&#x52A0;&#x4E0A;&#x7B26;&#x53F7;&#x4F4D;&#x3002;&#x8BE5;&#x539F;&#x7801;&#x53EA;&#x662F;&#x4E3A;&#x4E86;&#x8BA9;&#x6211;&#x4EEC;&#x770B;&#x4E8C;&#x8FDB;&#x5236;&#x66F4;&#x76F4;&#x89C2;&#xFF0C;&#x76F4;&#x63A5;&#x770B;&#x51FA;&#x6B63;&#x8D1F;&#x6570;&#x548C;&#x6BD4;&#x8F83;&#x5927;&#x5C0F;&#x3002;&#x4F46;&#x539F;&#x7801;&#x4E0D;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x4FDD;&#x5B58;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x80FD;&#x76F4;&#x63A5;&#x53C2;&#x4E0E;&#x8BA1;&#x7B97;&#x3002;</font><br><img src="/images/ALGORITHM/bit1.png" alt="1"></p><h2 id="&#x53CD;&#x7801;"><a href="#&#x53CD;&#x7801;" class="headerlink" title="&#x53CD;&#x7801;"></a><font size="4">&#x53CD;&#x7801;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x53CD;&#x7801;&#x4E3B;&#x8981;&#x662F;&#x9488;&#x5BF9;&#x8D1F;&#x6570;&#x7684;&#x5904;&#x7406;&#x3002;&#x975E;&#x8D1F;&#x6570;&#x7684;&#x53CD;&#x7801;&#x7B49;&#x4E8E;&#x5176;&#x539F;&#x7801;&#xFF0C;&#x8D1F;&#x6570;&#x7684;&#x53CD;&#x7801;&#x5728;&#x539F;&#x7801;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x7B26;&#x53F7;&#x4F4D;&#x4E0D;&#x53D8;&#xFF0C;&#x5176;&#x4ED6;&#x6570;&#x503C;&#x4F4D;&#x53D6;&#x53CD;&#xFF0C;&#x5373;&#x628A;1&#x53D8;&#x6210;0&#xFF0C;&#x628A;0&#x53D8;&#x6210;1&#x3002;&#x53CD;&#x7801;&#x662F;&#x4E3A;&#x4E86;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x4E2D;&#x5B58;&#x50A8;&#x4E8C;&#x8FDB;&#x5236;&#xFF0C;&#x4F46;&#x975E;&#x771F;&#x6B63;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x503C;&#xFF0C;&#x6240;&#x4EE5;&#x4E5F;&#x4E0D;&#x76F4;&#x63A5;&#x53C2;&#x4E0E;&#x8BA1;&#x7B97;&#x3002;</font><br><img src="/images/ALGORITHM/bit2.png" alt="2"></p><h2 id="&#x8865;&#x7801;"><a href="#&#x8865;&#x7801;" class="headerlink" title="&#x8865;&#x7801;"></a><font size="4">&#x8865;&#x7801;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x8865;&#x7801;&#x662F;&#x771F;&#x6B63;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x503C;&#x4E86;&#xFF0C;&#x4E3B;&#x8981;&#x4E5F;&#x662F;&#x9488;&#x5BF9;&#x8D1F;&#x6570;&#x3002;&#x975E;&#x8D1F;&#x6570;&#x4E0D;&#x53D8;&#xFF0C;&#x800C;&#x8D1F;&#x6570;&#x662F;&#x5728;&#x53CD;&#x7801;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#x52A0;1&#xFF0C;&#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#x6B63;&#x6570;&#x548C;&#x8D1F;&#x6570;&#x4E4B;&#x95F4;&#x8FDB;&#x884C;&#x8FD0;&#x7B97;&#x3002;</font><br><img src="/images/ALGORITHM/bit3.png" alt="3"></p><h2 id="&#x4F4D;&#x8FD0;&#x7B97;"><a href="#&#x4F4D;&#x8FD0;&#x7B97;" class="headerlink" title="&#x4F4D;&#x8FD0;&#x7B97;"></a><font size="4">&#x4F4D;&#x8FD0;&#x7B97;</font></h2><p><img src="/images/ALGORITHM/bit.jpg" alt="4"></p><h2 id="&#x4F4D;&#x8FD0;&#x7B97;&#x6280;&#x5DE7;"><a href="#&#x4F4D;&#x8FD0;&#x7B97;&#x6280;&#x5DE7;" class="headerlink" title="&#x4F4D;&#x8FD0;&#x7B97;&#x6280;&#x5DE7;"></a><font size="4">&#x4F4D;&#x8FD0;&#x7B97;&#x6280;&#x5DE7;</font></h2><p>$$x \ &gt;&gt; \ n \iff \left \lfloor x \div \ 2^n \right \rfloor \ , \ x&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x503C;&#x53F3;&#x79FB;n&#x4F4D;$$<br>$$x \ &lt;&lt; \ n \iff x \ \times \ 2^n \ , \ x&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x503C;&#x53F3;&#x79FB;n&#x4F4D;$$<br>$$x \ \&amp; \ 1 \ == \ 1 \iff x \ % \ 2 \ == \ 1 \ , \ &#x5224;&#x65AD;x&#x662F;&#x5426;&#x4E3A;&#x5947;&#x6570;$$<br>$$x \ \&amp; \ (x -1) \ , \ &#x6E05;&#x9664;x&#x6700;&#x540E;&#x4E00;&#x4F4D;&#x7684;1$$<br>$$x \ \&amp; \ (-x) \ , \ &#x5F97;&#x5230;x&#x6700;&#x540E;&#x4E00;&#x4F4D;&#x7684;1$$</p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x4E8C;&#x8FDB;&#x5236;&#x4E2D;1&#x7684;&#x4E2A;&#x6570;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x4E8C;&#x8FDB;&#x5236;&#x4E2D;1&#x7684;&#x4E2A;&#x6570;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x4E8C;&#x8FDB;&#x5236;&#x4E2D;1&#x7684;&#x4E2A;&#x6570;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x4E8C;&#x8FDB;&#x5236;&#x4E2D;1&#x7684;&#x4E2A;&#x6570;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;n&#xFF0C;&#x8F93;&#x51FA;&#x4ECE;0&#x5230;n&#x7684;&#x6BCF;&#x4E2A;&#x6570;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x4E2D;&#x6709;&#x591A;&#x5C11;&#x4E2A;1&#xFF1F;<br>&#x2003;&#x2003;&#x8F93;&#x5165;&#x6B63;&#x6574;&#x6570;n</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 # &#x8F93;&#x5165;&#x6B63;&#x6574;&#x6570;10</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;&#x5206;&#x6790;&#x4E00;&#x4E2A;&#x6570;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x4E2D;&#x6709;&#x591A;&#x5C11;&#x4E2A;1&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4F20;&#x7EDF;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x4E00;&#x76F4;&#x6A21;2(mod 2)&#x7136;&#x540E;&#x518D;&#x9664;&#x4EE5;2&#xFF0C;&#x77E5;&#x9053;&#x7ED3;&#x679C;&#x4E3A;0&#x5373;&#x53EF;&#x3002;&#x8FD9;&#x6837;&#x505A;&#x867D;&#x7136;&#x4E5F;&#x4E0D;&#x6162;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x4E8C;&#x8FDB;&#x5236;&#x4E2D;1&#x7684;&#x4E2A;&#x6570;&#x5F88;&#x5C11;&#xFF0C;&#x8FD9;&#x6837;&#x505A;&#x6548;&#x7387;&#x5C31;&#x5F88;&#x4F4E;&#x3002;<br>&#x2003;&#x2003;&#x53EF;&#x4EE5;&#x91C7;&#x7528;$x \ \&amp; \ (x -1)$&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x6BCF;&#x6B21;&#x6E05;&#x9664;x&#x6700;&#x540E;&#x4E00;&#x4F4D;&#x7684;1&#xFF0C;&#x6E05;&#x9664;&#x4E86;&#x591A;&#x5C11;&#x6B21;&#x5373;&#x6709;&#x591A;&#x5C11;&#x4E2A;1&#x3002;&#x5E76;&#x4E14;&#x4F7F;&#x7528;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x4FDD;&#x5B58;&#x4E4B;&#x524D;&#x505A;&#x8FC7;&#x7684;&#x8BB0;&#x5F55;&#xFF0C;&#x5373;&#x6C42;6&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x4F4D;(110)&#x6709;&#x591A;&#x5C11;1&#xFF0C;&#x5C06;&#x505A;&#x540E;&#x4E00;&#x4F4D;&#x7684;1&#x53BB;&#x6389;&#x4E4B;&#x540E;&#x4E3A;(100)&#xFF0C;&#x5373;&#x6C42;4&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x4F4D;&#x6709;&#x591A;&#x5C11;1&#xFF0C;&#x7136;&#x540E;&#x52A0;1&#x5373;&#x53EF;&#x3002;</p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;:&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    number = int(line.strip())</span><br><span class="line">    number_one_bit = [0] * (number + 1)</span><br><span class="line">    for i in range(1, number + 1):</span><br><span class="line">        number_one_bit[i] = number_one_bit[i &amp; (i - 1)] + 1</span><br><span class="line">    print(&apos;&#x4ECE;0&#x5230;&apos; + str(number) + &apos;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x8868;&#x793A;&#x4E2D;1&#x7684;&#x4E2A;&#x6570;&#x4E3A;:&apos;, number_one_bit)</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/bit4.png" alt="4"></p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-N&#x7687;&#x540E;&#x95EE;&#x9898;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-N&#x7687;&#x540E;&#x95EE;&#x9898;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(N&#x7687;&#x540E;&#x95EE;&#x9898;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(N&#x7687;&#x540E;&#x95EE;&#x9898;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;-1"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;-1" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x5728;n&#xD7;n&#x7684;&#x56FD;&#x9645;&#x68CB;&#x76D8;&#x4E0A;&#x653E;&#x7F6E;&#x5F7C;&#x6B64;&#x4E0D;&#x53D7;&#x653B;&#x51FB;&#x7684;n&#x4E2A;&#x7687;&#x540E;&#xFF0C;&#x6309;&#x7167;&#x89C4;&#x5219;&#xFF0C;&#x7687;&#x540E;&#x53EF;&#x4EE5;&#x653B;&#x51FB;&#x4E0E;&#x4E4B;&#x5728;&#x540C;&#x4E00;&#x884C;&#x3001;&#x540C;&#x4E00;&#x5217;&#x3001;&#x7EDF;&#x4E00;&#x659C;&#x7EBF;&#x4E0A;&#x7684;&#x68CB;&#x5B50;&#x3002;&#x73B0;&#x5728;&#x5DF2;&#x77E5;&#x53C8;n&#x4E2A;&#x7687;&#x540E;&#xFF0C;&#x95EE;&#x6709;&#x591A;&#x5C11;&#x79CD;&#x4E0D;&#x540C;&#x7684;&#x653E;&#x6CD5;&#xFF1F;<br>&#x2003;&#x2003;&#x8F93;&#x5165;&#x7687;&#x540E;&#x7684;&#x4E2A;&#x6570;n</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6 # &#x7687;&#x540E;&#x7684;&#x4E2A;&#x6570;</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;-1"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;-1" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;&#x4E4B;&#x524D;&#x518D;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;&#x4E2D;&#x63D0;&#x5230;&#x8FC7;N&#x7687;&#x540E;&#x7684;&#x4E00;&#x822C;&#x89E3;&#x6CD5;&#xFF0C;&#x786E;&#x5B9E;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x662F;&#x6700;&#x5BB9;&#x6613;&#x60F3;&#x5230;&#x7684;&#x4E00;&#x79CD;&#x505A;&#x6CD5;&#xFF0C;&#x4F46;&#x662F;&#x5E76;&#x4E0D;&#x662F;&#x6700;&#x5FEB;&#x7684;&#x4E00;&#x79CD;&#x505A;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x5C1D;&#x8BD5;&#x91C7;&#x7528;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;+&#x4F4D;&#x8FD0;&#x7B97;&#x63D0;&#x9AD8;&#x6548;&#x7387;&#x3002;<br>&#x2003;&#x2003;&#x4EE5;4&#x7687;&#x540E;&#x4E3A;&#x4F8B;&#xFF0C;&#x6BCF;&#x4E2A;&#x7687;&#x540E;&#x6709;&#x56DB;&#x4E2A;&#x683C;&#x5B50;&#x53EF;&#x4EE5;&#x653E;&#x7F6E;&#xFF0C;&#x53EF;&#x4EE5;&#x5F53;&#x4F5C;&#x4E8C;&#x8FDB;&#x5236;&#x7684;&#x56DB;&#x4E2A;bit&#x3002;&#x5982;8(1000)&#x4EE3;&#x8868;&#x7687;&#x540E;&#x653E;&#x5728;&#x7B2C;1&#x4E2A;&#x683C;&#x5B50;&#xFF0C;4(0100)&#x4EE3;&#x8868;&#x7687;&#x540E;&#x653E;&#x5728;&#x7B2C;&#x4E8C;&#x4E2A;&#x683C;&#x5B50;&#x3002;&#x67D0;&#x4E00;&#x4E2A;&#x7687;&#x540E;&#x53EF;&#x4EE5;&#x653E;&#x7F6E;&#x7684;&#x4F4D;&#x7F6E;&#x7531;&#x5217;&#xFF0C;&#x659C;&#x7EBF;&#x548C;&#x53CD;&#x659C;&#x7EBF;&#x4E09;&#x4E2A;&#x65B9;&#x5411;&#x9650;&#x5236;&#x3002;<br>&#x2003;&#x2003;&#x8BBE;&#x7B2C;i&#x4E2A;&#x7687;&#x540E;&#x653E;&#x7F6E;&#x7684;&#x884C;&#x6570;&#x4E3A;row&#xFF0C;&#x88AB;&#x653B;&#x51FB;&#x7684;&#x5217;&#x6570;&#x4E3A;col&#xFF0C;&#x88AB;&#x653B;&#x51FB;&#x7684;&#x659C;&#x7EBF;&#x4E3A;pie&#xFF0C;&#x88AB;&#x653B;&#x51FB;&#x7684;&#x53CD;&#x659C;&#x7EBF;&#x4E3A;na&#x3002;&#x56E0;&#x6B64;&#x6240;&#x6709;&#x88AB;&#x653B;&#x51FB;&#x7684;&#x70B9;&#x4E3A;$col \ | \ pie \ | \ na$&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x653E;&#x7F6E;&#x7684;&#x4F4D;&#x7F6E;&#x4E3A;$~(col \ | \ pie \ | \ na) \ \&amp; \ ((1 &lt;&lt; queen_num) - 1)$&#xFF0C;&#x4FDD;&#x8BC1;&#x9AD8;&#x4F4D;&#x90FD;&#x4E3A;0&#xFF0C;&#x4E0D;&#x53EF;&#x4EE5;&#x653E;&#x7F6E;&#x3002;<br>&#x2003;&#x2003;&#x4E0A;&#x8FF0;&#x64CD;&#x4F5C;&#x4E4B;&#x540E;&#x8BF4;&#x660E;&#x8BE5;&#x6570;&#x4E2D;&#x4E8C;&#x8FDB;&#x5236;&#x4F4D;&#x7684;1&#x5C31;&#x662F;&#x5F53;&#x524D;&#x53EF;&#x4EE5;&#x653E;&#x7F6E;&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#x6BCF;&#x6B21;$x \ \&amp; \ (-x)$&#x5F97;&#x5230;x&#x6700;&#x540E;&#x4E00;&#x4F4D;&#x7684;1&#xFF0C;&#x5E76;&#x5C06;&#x7687;&#x540E;&#x653E;&#x7F6E;&#x4E8E;&#x8BE5;&#x4F4D;&#x7F6E;p&#xFF0C;&#x5E76;&#x4F7F;&#x7528;$x \ \&amp; \ (x -1)$&#x5E76;&#x5C06;&#x6B64;&#x4F4D;&#x7684;1&#x6E05;&#x9664;&#xFF0C;&#x5E76;&#x8FDB;&#x5165;&#x4E0B;&#x4E00;&#x884C;&#xFF0C;&#x4E0B;&#x4E00;&#x884C;&#x88AB;&#x653B;&#x51FB;&#x7684;&#x5217;&#x4E3A;$col \ | \ p$&#xFF0C;&#x4E0B;&#x4E00;&#x884C;&#x88AB;&#x653B;&#x51FB;&#x7684;&#x659C;&#x7EBF;&#x4E3A;$(pie \ | \ p) \ &lt;&lt; \ 1$&#xFF0C;&#x4E0B;&#x4E00;&#x884C;&#x88AB;&#x653B;&#x51FB;&#x7684;&#x53CD;&#x659C;&#x7EBF;&#x4E3A;$(na \ | \ p) \ &gt;&gt; \ 1$</p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-1"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-1" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def dfs(row, col, pie, na):</span><br><span class="line">    global res_num</span><br><span class="line">    if row &gt;= queen_num:</span><br><span class="line">        res_num += 1</span><br><span class="line">        return</span><br><span class="line">    bits = (~(col | pie | na) &amp; ((1 &lt;&lt; queen_num) - 1))</span><br><span class="line">    while bits &gt; 0:</span><br><span class="line">        p = bits &amp; -bits</span><br><span class="line">        dfs(row + 1, col | p, (pie | p) &lt;&lt; 1, (na | p) &gt;&gt; 1)</span><br><span class="line">        bits &amp;= bits - 1</span><br><span class="line"></span><br><span class="line">print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x7687;&#x540E;&#x7684;&#x4E2A;&#x6570;:&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    queen_num, res_num = int(line.strip()), 0</span><br><span class="line">    chess = [[0 for i in range(queen_num)] for j in range(queen_num)]</span><br><span class="line">    dfs(0, 0, 0, 0)</span><br><span class="line">    print(&apos;&#x4E00;&#x5171;&#x6709;&apos; + str(res_num) + &apos;&#x79CD;&#x7687;&#x540E;&#x653E;&#x7F6E;&#x65B9;&#x6CD5;&apos;)</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-1"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-1" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/bit5.png" alt="5"></p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x6590;&#x6CE2;&#x90A3;&#x5951;&#x6570;&#x5217;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x6590;&#x6CE2;&#x90A3;&#x5951;&#x6570;&#x5217;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6590;&#x6CE2;&#x90A3;&#x5951;&#x6570;&#x5217;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6590;&#x6CE2;&#x90A3;&#x5951;&#x6570;&#x5217;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;-2"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;-2" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x5047;&#x8BBE;&#x7B2C;&#x4E00;&#x4E2A;&#x6708;&#x6709;&#x4E00;&#x5BF9;&#x521A;&#x8BDE;&#x751F;&#x7684;&#x5154;&#x5B50;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x6708;&#x8FDB;&#x5165;&#x6210;&#x719F;&#x671F;&#xFF0C;&#x7B2C;&#x4E09;&#x4E2A;&#x6708;&#x5F00;&#x59CB;&#x751F;&#x80B2;&#x5154;&#x5B50;&#xFF0C;&#x800C;&#x4E00;&#x5BF9;&#x6210;&#x719F;&#x7684;&#x5154;&#x5B50;&#x6BCF;&#x6708;&#x56DE;&#x751F;&#x4E00;&#x5BF9;&#x5154;&#x5B50;&#xFF0C;&#x5982;&#x679C;&#x5154;&#x5B50;&#x6C38;&#x4E0D;&#x6B7B;&#x53BB;&#xFF0C;&#x90A3;&#x4E48;n&#x4E2A;&#x6708;&#x540E;&#x6709;&#x591A;&#x5C11;&#x5BF9;&#x5154;&#x5B50;&#xFF1F;<br>&#x2003;&#x2003;&#x8F93;&#x5165;&#x6708;&#x4EFD;&#x6570;n</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 # &#x6C42;&#x7B2C;10&#x4E2A;&#x6708;&#x7684;&#x5154;&#x5B50;&#x6570;</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;-2"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;-2" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;&#x6590;&#x6CE2;&#x90A3;&#x5951;&#x6570;&#x5217;&#x662F;&#x4E00;&#x4E2A;&#x5178;&#x578B;&#x7684;&#x7B97;&#x6CD5;&#x95EE;&#x9898;&#xFF0C;&#x6709;&#x591A;&#x4E2A;&#x4E0D;&#x540C;&#x7248;&#x672C;&#x7684;&#x89E3;&#x6CD5;&#xFF0C;&#x4E5F;&#x4EE3;&#x8868;&#x7740;&#x4E0D;&#x540C;&#x7684;&#x601D;&#x60F3;&#x3002;<br>&#x2003;&#x2003;&#x9996;&#x5148;&#x5C31;&#x662F;&#x9012;&#x5F52;&#x89E3;&#x6CD5;&#xFF0C;&#x6839;&#x636E;$f(n)=f(n-1)+f(n-2), \ f(1)=f(2)=1$&#x6C42;&#x89E3;&#xFF0C;&#x4E0D;&#x8FC7;&#x8FD9;&#x79CD;&#x89E3;&#x6CD5;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;$O(({\frac{\sqrt5 + 1}{2}})^n)$&#xFF0C;&#x7B97;f(10)&#x8FD8;&#x662F;&#x975E;&#x5E38;&#x5FEB;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x7B97;f(100)&#x7B80;&#x76F4;&#x662F;&#x5929;&#x65B9;&#x591C;&#x8C2D;&#x3002;<br>&#x2003;&#x2003;&#x5176;&#x6B21;&#x662F;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x89E3;&#x6CD5;&#xFF0C;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x5927;&#x5C0F;&#x4E3A;n+1&#x7684;&#x77E9;&#x9635;&#xFF0C;&#x6BCF;&#x6B21;&#x8BA1;&#x7B97;&#x7684;&#x503C;&#x5B58;&#x653E;&#x4E8E;&#x77E9;&#x9635;&#x4E2D;&#x6B64;&#x65F6;&#x8BA1;&#x7B97;$f(n)=f(n-1)+f(n-2)$&#x65F6;&#xFF0C;f(n-1)&#x548C;f(n-2)&#x5C31;&#x4E0D;&#x9700;&#x8981;&#x9012;&#x5F52;&#x8BA1;&#x7B97;&#xFF0C;&#x53EA;&#x8981;&#x67E5;&#x8868;&#x5373;&#x53EF;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(n)&#x3002;<br>&#x2003;&#x2003;&#x6700;&#x5FEB;&#x7684;&#x89E3;&#x6CD5;&#x4E3A;&#x77E9;&#x9635;&#x89E3;&#x6CD5;&#xFF0C;&#x6839;&#x636E;$\begin{pmatrix} f(n-1) \ f(n) \end{pmatrix} = \begin{pmatrix} 1 &amp; 1 \ 1 &amp; 2 \end{pmatrix} \ \begin{pmatrix} f(n-2) \ f(n-3) \end{pmatrix}$&#x53EF;&#x5F97;<br>$$\begin{pmatrix} f(\left \lfloor \frac{n}{2} \right \rfloor \times 2) \ f(\left \lfloor \frac{n}{2} \right \rfloor \times 2+1) \end{pmatrix} = {\begin{pmatrix} 1 &amp; 1 \ 1 &amp; 2 \end{pmatrix}}^{\left \lfloor \frac{n}{2} \right \rfloor} \ \begin{pmatrix} 0 \ 1 \end{pmatrix}$$<br>&#x2003;&#x2003;&#x5373;&#x95EE;&#x9898;&#x8F6C;&#x5316;&#x4E3A;&#x6C42;&#x77E9;&#x9635;${\begin{pmatrix} 1 &amp; 1 \ 1 &amp; 2 \end{pmatrix}}^{\left \lfloor \frac{n}{2} \right \rfloor}$&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(n)&#x3002;&#x4E58;&#x65B9;&#x95EE;&#x9898;&#x53EF;&#x4EE5;&#x7528;&#x4F4D;&#x8FD0;&#x7B97;&#x63D0;&#x9AD8;&#x6548;&#x7387;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x53EF;&#x4EE5;&#x63D0;&#x5347;&#x5230;O(log(n))</p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-2"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-2" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def matrix_mul(array_1, array_2):</span><br><span class="line">    row_1, mid, col_2 = len(array_1), len(array_2), len(array_2[0])</span><br><span class="line">    array=[[0 for i in range(col_2)] for j in range(row_1)]</span><br><span class="line">    for i in range(row_1):</span><br><span class="line">        for j in range(col_2):</span><br><span class="line">                array[i][j] = array_1[i][0] * array_2[0][j] + array_1[i][1] * array_2[1][j]</span><br><span class="line">    return array</span><br><span class="line"></span><br><span class="line">def matrix_pow(array, m):</span><br><span class="line">    binary, n = [int(x) for x in bin(m)[2:]], len(array)</span><br><span class="line">    res, temp = [[1, 0], [0, 1]], [x[:] for x in array]</span><br><span class="line">    while binary:</span><br><span class="line">        if binary.pop() == 1:</span><br><span class="line">            res = matrix_mul(res, temp)</span><br><span class="line">        temp = matrix_mul(temp, temp)</span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line">print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x6708;&#x4EFD;&#x6570;:&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    month = int(line.strip())</span><br><span class="line">    print(&apos;&#x7B2C;&apos; + str(month) + &apos;&#x6708;&#x7684;&#x5154;&#x5B50;&#x6570;&#x91CF;&#x4E3A;:&apos;, matrix_mul(matrix_pow([[1, 1], [1, 2]], month//2), [[0], [1]])[month % 2][0])</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-2"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-2" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/bit6.png" alt="6"></p><h1 id="&#x7B97;&#x6CD5;&#x603B;&#x7ED3;"><a href="#&#x7B97;&#x6CD5;&#x603B;&#x7ED3;" class="headerlink" title="&#x7B97;&#x6CD5;&#x603B;&#x7ED3;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x603B;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x4F4D;&#x8FD0;&#x7B97;&#x8BF4;&#x662F;&#x4E00;&#x79CD;&#x7B97;&#x6CD5;&#xFF0C;&#x5B9E;&#x9645;&#x4E0A;&#x5E94;&#x8BE5;&#x8BF4;&#x662F;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#x3002;&#x8BB8;&#x591A;&#x95EE;&#x9898;&#x90FD;&#x53EF;&#x4EE5;&#x7528;&#x4F4D;&#x8FD0;&#x7B97;&#x6765;&#x63D0;&#x9AD8;&#x6548;&#x7387;&#xFF0C;&#x4F4D;&#x8FD0;&#x7B97;&#x5F88;&#x5C11;&#x5355;&#x72EC;&#x4F7F;&#x7528;&#xFF0C;&#x5F80;&#x5F80;&#x540C;&#x5176;&#x4ED6;&#x7684;&#x7B97;&#x6CD5;&#x4E00;&#x8D77;&#x4F7F;&#x7528;&#xFF0C;&#x4F5C;&#x4E3A;&#x5176;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x6B65;&#x9AA4;&#xFF0C;&#x80FD;&#x591F;&#x5728;&#x7279;&#x5B9A;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x53D1;&#x6325;&#x51FA;&#x7279;&#x6B8A;&#x7684;&#x6548;&#x679C;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Bit Operation&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="计算机基础知识" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="常用算法" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>广度优先搜索(Breadth-First-Search)</title>
    <link href="https://USTCcoder.github.io/2019/07/31/algorithm%20BFS/"/>
    <id>https://USTCcoder.github.io/2019/07/31/algorithm BFS/</id>
    <published>2019-07-31T12:38:40.000Z</published>
    <updated>2019-08-07T15:57:50.810Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x5E7F;&#x5EA6;&#x4F18;&#x5148;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"><a href="#&#x539F;&#x7406;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x539F;&#x7406;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003; <strong>Breadth-First-Search(BFS):&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;</strong>&#xFF0C;&#x5C5E;&#x4E8E;<strong>&#x56FE;&#x7B97;&#x6CD5;</strong>&#x7684;&#x4E00;&#x79CD;&#xFF0C;&#x662F;&#x4E00;&#x79CD;&#x76F2;&#x76EE;&#x641C;&#x5BFB;&#x6CD5;&#xFF0C;&#x76EE;&#x7684;&#x662F;&#x7CFB;&#x7EDF;&#x5730;<strong>&#x5C55;&#x5F00;&#x5E76;&#x68C0;&#x67E5;&#x56FE;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x8282;&#x70B9;</strong>&#xFF0C;&#x4EE5;&#x627E;&#x5BFB;&#x7ED3;&#x679C;&#x3002;&#x5728;&#x6811;&#x641C;&#x7D22;&#x7B97;&#x6CD5;&#x4E2D;&#xFF0C;&#x4ECE;&#x4E0A;&#x5230;&#x4E0B;&#x4E3A;&#x7EB5;&#xFF0C;&#x4ECE;&#x5DE6;&#x5411;&#x53F3;&#x4E3A;&#x6A2A;&#xFF0C;&#x7EB5;&#x5411;&#x641C;&#x7D22;&#x4E3A;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#xFF0C;&#x800C;&#x6A2A;&#x5411;&#x641C;&#x7D22;&#x662F;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x3002;&#x7B80;&#x8A00;&#x4E4B;&#x5C31;&#x662F;<strong>&#x5148;&#x8BBF;&#x95EE;&#x56FE;&#x7684;&#x9876;&#x70B9;</strong>&#xFF0C;&#x7136;&#x540E;<strong>&#x4F18;&#x5148;&#x8BBF;&#x95EE;&#x5176;&#x90BB;&#x63A5;&#x70B9;</strong>&#xFF0C;&#x7136;&#x540E;&#x518D;&#x4F9D;&#x6B21;<strong>&#x8FDB;&#x884C;&#x88AB;&#x8BBF;&#x95EE;&#x70B9;&#x7684;&#x90BB;&#x63A5;&#x70B9;</strong>&#xFF0C;<strong>&#x4E00;&#x5C42;&#x4E00;&#x5C42;</strong>&#x8BBF;&#x95EE;&#xFF0C;&#x76F4;&#x81F3;&#x8BBF;&#x95EE;&#x5B8C;&#x6240;&#x6709;&#x70B9;&#xFF0C;&#x904D;&#x5386;&#x7ED3;&#x675F;&#xFF0C;&#x901A;&#x5E38;&#x6839;&#x636E;<strong>&#x961F;&#x5217;&#x7684;&#x5148;&#x8FDB;&#x5148;&#x51FA;</strong>&#x6027;&#x8D28;&#x5C06;&#x5404;&#x7ED3;&#x70B9;&#x904D;&#x5386;&#x3002;<br><a id="more"></a></p><p><img src="/images/ALGORITHM/bfs1.jpg" alt="bfs"></p><h1 id="&#x7B97;&#x6CD5;&#x6761;&#x4EF6;"><a href="#&#x7B97;&#x6CD5;&#x6761;&#x4EF6;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6761;&#x4EF6;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6761;&#x4EF6;</font></h1><h2 id="&#x89E3;&#x7A7A;&#x95F4;"><a href="#&#x89E3;&#x7A7A;&#x95F4;" class="headerlink" title="&#x89E3;&#x7A7A;&#x95F4;"></a><font size="4">&#x89E3;&#x7A7A;&#x95F4;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x89E3;&#x7684;&#x7EC4;&#x7EC7;&#x5F62;&#x5F0F;&#x53EF;&#x4EE5;&#x89C4;&#x8303;&#x4E3A;&#x4E00;&#x4E2A;n&#x5143;&#x7EC4;${x_1,x_2,\ldots,x_n}$&#xFF0C;&#x5E76;&#x4E14;&#x5BF9;&#x89E3;&#x6709;&#x53D6;&#x503C;&#x8303;&#x56F4;&#x7684;&#x9650;&#x5B9A;&#xFF0C;&#x4E00;&#x822C;&#x4E3A;&#x6709;&#x7A77;&#x4E2A;&#xFF0C;&#x89E3;&#x7684;&#x4E2A;&#x6570;&#x4EE3;&#x8868;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;&#x7684;&#x5206;&#x652F;&#x4E2A;&#x6570;&#x3002;&#x89E3;&#x7A7A;&#x95F4;&#x8D8A;&#x5C0F;&#xFF0C;&#x641C;&#x7D22;&#x6548;&#x7387;&#x8D8A;&#x9AD8;&#xFF0C;&#x89E3;&#x7A7A;&#x95F4;&#x5927;&#x72B9;&#x5982;&#x5927;&#x6D77;&#x635E;&#x9488;&#xFF0C;&#x641C;&#x7D22;&#x6548;&#x7387;&#x5F88;&#x4F4E;&#x3002;</font></p><h2 id="&#x526A;&#x679D;&#x51FD;&#x6570;"><a href="#&#x526A;&#x679D;&#x51FD;&#x6570;" class="headerlink" title="&#x526A;&#x679D;&#x51FD;&#x6570;"></a><font size="4">&#x526A;&#x679D;&#x51FD;&#x6570;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x526A;&#x679D;&#x51FD;&#x6570;&#x53C8;&#x79F0;&#x4E3A;&#x9690;&#x7EA6;&#x675F;&#xFF0C;&#x5BF9;&#x80FD;&#x5426;&#x5F97;&#x5230;&#x95EE;&#x9898;&#x7684;&#x53EF;&#x884C;&#x89E3;&#x7684;&#x7EA6;&#x675F;&#x79F0;&#x4E3A;&#x7EA6;&#x675F;&#x51FD;&#x6570;&#xFF0C;&#x5BF9;&#x80FD;&#x5426;&#x5F97;&#x5230;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x7684;&#x7EA6;&#x675F;&#x79F0;&#x4E3A;&#x9650;&#x754C;&#x51FD;&#x6570;&#x3002;&#x6709;&#x4E86;&#x526A;&#x679D;&#x51FD;&#x6570;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x526A;&#x6389;&#x5F97;&#x4E0D;&#x5230;&#x53EF;&#x884C;&#x89E3;&#x6216;&#x6700;&#x4F18;&#x89E3;&#x7684;&#x5206;&#x652F;&#xFF0C;&#x907F;&#x514D;&#x4E86;&#x65E0;&#x6548;&#x641C;&#x7D22;&#xFF0C;&#x63D0;&#x9AD8;&#x641C;&#x7D22;&#x7684;&#x6548;&#x7387;&#x3002;&#x56E0;&#x6B64;&#x526A;&#x679D;&#x51FD;&#x6570;&#x7684;&#x8BBE;&#x8BA1;&#x662F;&#x5341;&#x5206;&#x91CD;&#x8981;&#x7684;&#x3002;</font></p><h1 id="&#x7B97;&#x6CD5;&#x6B65;&#x9AA4;"><a href="#&#x7B97;&#x6CD5;&#x6B65;&#x9AA4;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6B65;&#x9AA4;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6B65;&#x9AA4;</font></h1><p>&#x2003;&#x2003;<font size="3">(1)&#x5206;&#x6790;&#x9898;&#x610F;&#xFF0C;&#x4E86;&#x89E3;&#x9898;&#x76EE;&#x8981;&#x6C42;</font><br>&#x2003;&#x2003;<font size="3">(2)&#x6839;&#x636E;&#x95EE;&#x9898;&#x5206;&#x6790;&#x89E3;&#x7A7A;&#x95F4;&#x7684;&#x5F62;&#x5F0F;</font><br>&#x2003;&#x2003;<font size="3">(3)&#x6839;&#x636E;&#x89E3;&#x7A7A;&#x95F4;&#x8BBE;&#x8BA1;&#x5408;&#x9002;&#x7684;&#x526A;&#x679D;&#x51FD;&#x6570;</font></p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-0-1&#x80CC;&#x5305;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-0-1&#x80CC;&#x5305;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(0-1&#x80CC;&#x5305;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(0-1&#x80CC;&#x5305;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x5047;&#x8BBE;&#x5C71;&#x6D1E;&#x91CC;&#x6709;n&#x4E2A;&#x5B9D;&#x7269;&#xFF0C;&#x6BCF;&#x79CD;&#x5B9D;&#x7269;&#x6709;&#x4E00;&#x5B9A;&#x91CD;&#x91CF;w&#x548C;&#x76F8;&#x5E94;&#x7684;&#x4EF7;&#x503C;v&#xFF0C;&#x80CC;&#x5305;&#x7684;&#x88C5;&#x8F7D;&#x80FD;&#x529B;&#x6709;&#x9650;&#xFF0C;&#x53EA;&#x80FD;&#x8FD0;&#x8D70;&#x91CD;&#x91CF;&#x4E3A;m&#x7684;&#x5B9D;&#x7269;&#xFF0C;&#x5B9D;&#x7269;&#x4E0D;&#x53EF;&#x4EE5;&#x5206;&#x5272;&#xFF0C;&#x5982;&#x4F55;&#x4F7F;&#x80CC;&#x5305;&#x8FD0;&#x8D70;&#x7269;&#x54C1;&#x7684;&#x4EF7;&#x503C;&#x6700;&#x5927;&#xFF1F;<br>&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x5148;&#x8F93;&#x5165;&#x5B9D;&#x7269;&#x7684;&#x6570;&#x91CF;n&#xFF0C;&#x548C;&#x80CC;&#x5305;&#x7684;&#x627F;&#x8F7D;&#x91CD;&#x91CF;m&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x4E00;&#x884C;&#x8F93;&#x51FA;&#x4E00;&#x4E2A;&#x5B9D;&#x7269;&#x5BF9;&#x5E94;&#x7684;&#x91CD;&#x91CF;w&#x548C;&#x4EF7;&#x503C;v(&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;)<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 10 # &#x5B9D;&#x7269;&#x6570;n&#x548C;&#x80CC;&#x5305;&#x80FD;&#x88C5;&#x8F7D;&#x7684;&#x91CD;&#x91CF;m</span><br><span class="line">2 6 #&#x6BCF;&#x4E2A;&#x5B9D;&#x7269;&#x7684;&#x91CD;&#x91CF;w&#x548C;&#x4EF7;&#x503C;v</span><br><span class="line">5 3</span><br><span class="line">4 5</span><br><span class="line">2 4</span><br><span class="line">3 6</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;0-1&#x80CC;&#x5305;&#x95EE;&#x9898;&#x548C;&#x666E;&#x901A;&#x80CC;&#x5305;&#x95EE;&#x9898;&#x4E0D;&#x540C;&#x7684;&#x662F;&#x5176;&#x89E3;&#x7A7A;&#x95F4;&#x4E3A;{0&#xFF0C;1}&#xFF0C;&#x5373;&#x6BCF;&#x4E00;&#x4E2A;&#x7269;&#x54C1;&#x90FD;&#x6709;&#x4E24;&#x79CD;&#x72B6;&#x6001;&#xFF0C;&#x88C5;&#x5165;&#x6216;&#x8005;&#x4E0D;&#x88C5;&#x5165;&#xFF0C;&#x56E0;&#x6B64;&#x6EE1;&#x8DB3;&#x89E3;&#x7A7A;&#x95F4;&#x7684;&#x6761;&#x4EF6;&#x3002;<br>&#x2003;&#x2003;&#x5206;&#x6790;&#x526A;&#x679D;&#x51FD;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x5269;&#x4F59;&#x7684;&#x4EF7;&#x503C;&#x52A0;&#x4E0A;&#x5F53;&#x524D;&#x7684;&#x4EF7;&#x503C;&#x90FD;&#x6CA1;&#x6709;&#x5DF2;&#x7ECF;&#x641C;&#x7D22;&#x5230;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x9AD8;&#xFF0C;&#x5219;&#x6CA1;&#x6709;&#x5FC5;&#x8981;&#x7EE7;&#x7EED;&#x641C;&#x7D22;&#x3002;</p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def bfs(treasure_queue):</span><br><span class="line">    global max_value, max_plan</span><br><span class="line">    while treasure_queue:</span><br><span class="line">        n, out_node = treasure_queue[0][0], treasure_queue.pop(0)</span><br><span class="line">        if n &gt;= count:</span><br><span class="line">            max_value, max_plan = [out_node[2], out_node[3][:]] if out_node[2] &gt; max_value else [max_value, max_plan[:]]</span><br><span class="line">            continue</span><br><span class="line">        if out_node[1] - treasure[n][1] &gt;= 0:</span><br><span class="line">            treasure_queue.append([n + 1, out_node[1] - treasure[n][1], out_node[2] + treasure[n][2], out_node[3][:n] + [True] + out_node[3][n + 1:]])</span><br><span class="line">        if out_node[2] + leave_value[n] &gt; max_value:</span><br><span class="line">            treasure_queue.append([n + 1, out_node[1], out_node[2], out_node[3][:]])</span><br><span class="line"></span><br><span class="line">print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x5B9D;&#x7269;&#x6570;&#x91CF;&#x548C;&#x9A74;&#x5B50;&#x627F;&#x8F7D;&#x91CD;&#x91CF;:&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    count, weight = line.strip().split()</span><br><span class="line">    count, weight, treasure, max_plan, max_value, leave_value, res = int(count), float(weight), [], [False] * int(count), 0, [0], []</span><br><span class="line">    print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x5B9D;&#x7269;&#x7684;&#x91CD;&#x91CF;&#x548C;&#x4EF7;&#x503C;&apos;)</span><br><span class="line">    for i in range(count):</span><br><span class="line">        tmp = [float(x) for x in sys.stdin.readline().strip().split()]</span><br><span class="line">        treasure.append([i + 1] + tmp + [tmp[1] / tmp[0]])</span><br><span class="line">    treasure.sort(key=lambda x: (-x[3]))</span><br><span class="line">    for i in reversed(range(1, count)):</span><br><span class="line">        leave_value = [leave_value[0] + treasure[i][2]] + leave_value</span><br><span class="line">    bfs([[0, weight, 0, [False] * count]])</span><br><span class="line">    print(&apos;&#x6700;&#x4F18;&#x7684;&#x65B9;&#x6848;&#x4E3A;:\n&apos; + &apos;&apos;.join([&apos;&apos; + (&apos;&#x88C5;&#x5165;&#x7B2C;&apos; + str(j) + &apos;&#x4E2A;&#x5B9D;&#x7269;\n&apos;) * (j != 0) for j in sorted([treasure[i][0] * max_plan[i] for i in range(count)])]) + &apos;&#x88C5;&#x5165;&#x5B9D;&#x7269;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x4E3A;:&apos;, max_value)</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/bfs2.png" alt="2"></p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x65C5;&#x884C;&#x5546;&#x95EE;&#x9898;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x65C5;&#x884C;&#x5546;&#x95EE;&#x9898;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x65C5;&#x884C;&#x5546;&#x95EE;&#x9898;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x65C5;&#x884C;&#x5546;&#x95EE;&#x9898;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;-1"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;-1" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x73B0;&#x6709;n&#x4E2A;&#x666F;&#x70B9;&#xFF0C;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x666F;&#x70B9;&#x51FA;&#x53D1;&#xFF0C;&#x4E24;&#x4E2A;&#x666F;&#x70B9;&#x4E4B;&#x95F4;&#x6709;&#x6570;&#x5B57;&#x4EE3;&#x8868;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5230;&#x8FBE;&#xFF0C;&#x95EE;&#x5982;&#x4F55;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x8DEF;&#x5F84;&#x80FD;&#x591F;&#x4E0D;&#x91CD;&#x590D;&#x7684;&#x8D70;&#x904D;&#x6240;&#x6709;&#x666F;&#x70B9;&#x56DE;&#x5230;&#x51FA;&#x53D1;&#x70B9;&#xFF0C;&#x800C;&#x4E14;&#x6240;&#x7ECF;&#x8FC7;&#x7684;&#x8DEF;&#x5F84;&#x957F;&#x5EA6;&#x662F;&#x6700;&#x77ED;&#x7684;&#x3002;<br>&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x666F;&#x70B9;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x8F93;&#x5165;&#x4E24;&#x5730;&#x4E4B;&#x95F4;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5230;&#x8FBE;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x884C;&#x8F93;&#x5165;&#x4E24;&#x5730;&#x548C;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5 # &#x666F;&#x70B9;&#x4E2A;&#x6570;</span><br><span class="line">9 # &#x666F;&#x70B9;&#x4E4B;&#x95F4;&#x7684;&#x8FDE;&#x63A5;&#x6570;</span><br><span class="line">1 2 3 # &#x666F;&#x70B9;1&#x548C;&#x666F;&#x70B9;2&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#x4E3A;3</span><br><span class="line">1 4 8</span><br><span class="line">1 5 9</span><br><span class="line">2 3 3</span><br><span class="line">2 4 10</span><br><span class="line">2 5 5</span><br><span class="line">3 4 4</span><br><span class="line">3 5 3</span><br><span class="line">4 5 20</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;-1"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;-1" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;&#x65C5;&#x884C;&#x5546;&#x95EE;&#x9898;(TSP)&#x662F;&#x4E00;&#x4E2A;&#x5178;&#x578B;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x6B64;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x7A7A;&#x95F4;&#x4E3A;n&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x666F;&#x70B9;&#x90FD;&#x53EF;&#x4EE5;&#x5230;&#x4E0E;&#x4E4B;&#x76F8;&#x8FDE;&#x7684;&#x6240;&#x6709;&#x70B9;&#xFF0C;&#x56E0;&#x6B64;&#x5F53;&#x666F;&#x70B9;&#x6570;&#x5F88;&#x591A;&#x65F6;&#xFF0C;&#x6700;&#x4F18;&#x89E3;&#x7684;&#x641C;&#x7D22;&#x662F;&#x5341;&#x5206;&#x7F13;&#x6162;&#x7684;&#x3002;<br>&#x2003;&#x2003;&#x5206;&#x6790;&#x526A;&#x679D;&#x51FD;&#x6570;&#xFF0C;&#x526A;&#x679D;&#x51FD;&#x6570;&#x5BB9;&#x6613;&#x770B;&#x51FA;&#xFF0C;&#x7531;&#x4E8E;&#x4E0D;&#x662F;&#x4EFB;&#x4F55;&#x4E24;&#x4E2A;&#x666F;&#x70B9;&#x90FD;&#x662F;&#x76F8;&#x8FDE;&#x7684;&#xFF0C;&#x800C;&#x4E14;&#x8D70;&#x8FC7;&#x7684;&#x666F;&#x70B9;&#x4E0D;&#x80FD;&#x518D;&#x8D70;&#x4E00;&#x6B21;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x4E5F;&#x5927;&#x5927;&#x51CF;&#x5C11;&#x4E86;&#x89E3;&#x7A7A;&#x95F4;&#x7684;&#x4E2A;&#x6570;&#x3002;</p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-1"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-1" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def bfs(tour_queue):</span><br><span class="line">    global  min_dist, min_route</span><br><span class="line">    while tour_queue:</span><br><span class="line">        n, out_node = tour_queue[0][0], tour_queue.pop(0)</span><br><span class="line">        if n &gt;= scenic_spot_num:</span><br><span class="line">            min_dist, min_route = [out_node[1] + connection[out_node[2][-1]][0], out_node[2][:] + [0]] if out_node[1] + connection[out_node[2][-1]][0] &lt; min_dist else [min_dist, min_route[:]]</span><br><span class="line">        for i in range(scenic_spot_num):</span><br><span class="line">            if i not in out_node[2] and connection[out_node[2][-1]][i] != 0 and out_node[1] + connection[out_node[2][-1]][i] + connection[i][0] &lt; min_dist:</span><br><span class="line">                tour_queue.append([n + 1, out_node[1] + connection[out_node[2][-1]][i], out_node[2] + [i]])</span><br><span class="line"></span><br><span class="line">print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x666F;&#x70B9;&#x6570;:&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    scenic_spot_num, min_dist, min_route = int(line.strip()), 65535, []</span><br><span class="line">    print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x8FDE;&#x901A;&#x7684;&#x666F;&#x70B9;&#x6570;:&apos;)</span><br><span class="line">    connection_num, connection = int(sys.stdin.readline().strip()), [[0 for i in range(scenic_spot_num)] for j in range(scenic_spot_num)]</span><br><span class="line">    print(&apos;&#x8BF7;&#x4F9D;&#x6B21;&#x8F93;&#x5165;&#x4E24;&#x4E2A;&#x666F;&#x70B9;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;:&apos;)</span><br><span class="line">    for i in range(connection_num):</span><br><span class="line">        begin, end, weight = [int(i) for i in sys.stdin.readline().strip().split()]</span><br><span class="line">        connection[begin - 1][end - 1], connection[end - 1][begin - 1] = weight, weight</span><br><span class="line">    bfs([[1, 0, [0]]])</span><br><span class="line">    print(&apos;&#x6700;&#x77ED;&#x7684;&#x8DEF;&#x5F84;&#x4E3A;:&apos; + &apos;-&gt;&apos;.join([str(x + 1) for x in min_route]) + &apos;\n&#x6700;&#x77ED;&#x7684;&#x8DEF;&#x5F84;&#x957F;&#x5EA6;&#x4E3A;:&apos;, min_dist)</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-1"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-1" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/bfs3.png" alt="3"></p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x8FF7;&#x5BAB;&#x95EE;&#x9898;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x8FF7;&#x5BAB;&#x95EE;&#x9898;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x8FF7;&#x5BAB;&#x95EE;&#x9898;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x8FF7;&#x5BAB;&#x95EE;&#x9898;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;-2"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;-2" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x5728;&#x4E00;&#x4E2A;m&#xD7;n&#x7684;&#x5730;&#x56FE;&#x4E0A;&#xFF0C;&#x6709;&#x8BB8;&#x591A;&#x969C;&#x788D;&#x7269;&#xFF0C;&#x7ED9;&#x5B9A;&#x8D77;&#x59CB;&#x70B9;&#x5750;&#x6807;&#x548C;&#x76EE;&#x7684;&#x5730;&#x5750;&#x6807;&#xFF0C;&#x95EE;&#x4ECE;&#x8D77;&#x59CB;&#x70B9;&#x5F00;&#x59CB;&#x901A;&#x8FC7;&#x4E0A;&#x4E0B;&#x5DE6;&#x53F3;&#x56DB;&#x4E2A;&#x65B9;&#x5411;&#x79FB;&#x52A8;&#x5982;&#x4F55;&#x627E;&#x5230;&#x4E00;&#x6761;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x80FD;&#x591F;&#x5230;&#x8FBE;&#x76EE;&#x7684;&#x5730;&#xFF1F;<br>&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x5730;&#x56FE;&#x7684;&#x5927;&#x5C0F;m&#x548C;n&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x969C;&#x788D;&#x7269;&#x7684;&#x5750;&#x6807;&#xFF0C;&#x8F93;&#x5165;0&#xFF0C;0&#x65F6;&#x7ED3;&#x675F;&#xFF0C;&#x63A5;&#x7740;&#x8F93;&#x5165;&#x8D77;&#x59CB;&#x70B9;&#x5750;&#x6807;&#x548C;&#x76EE;&#x7684;&#x5730;&#x5750;&#x6807;&#x3002;</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">5 6 # &#x5730;&#x56FE;&#x7684;&#x5927;&#x5C0F;m,n</span><br><span class="line">1 6 # &#x969C;&#x788D;&#x7269;&#x7684;&#x5750;&#x6807;</span><br><span class="line">2 3 </span><br><span class="line">3 4</span><br><span class="line">3 5</span><br><span class="line">5 1</span><br><span class="line">0 0 #&#x8F93;&#x5165;0,0&#x7ED3;&#x675F;</span><br><span class="line">2 1 #&#x8D77;&#x59CB;&#x70B9;&#x5750;&#x6807;</span><br><span class="line">4 6 #&#x76EE;&#x7684;&#x5730;&#x5750;&#x6807;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/ALGORITHM/bfs5.png" alt="5"></p><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;-2"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;-2" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;&#x8FF7;&#x5BAB;&#x95EE;&#x9898;&#x662F;&#x4E00;&#x4E2A;&#x5178;&#x578B;&#x7684;&#x641C;&#x7D22;&#x95EE;&#x9898;&#xFF0C;&#x6BCF;&#x4E2A;&#x70B9;&#x90FD;&#x6709;&#x56DB;&#x4E2A;&#x79FB;&#x52A8;&#x65B9;&#x5411;&#xFF0C;&#x56E0;&#x6B64;&#x6BCF;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;&#x90FD;&#x6709;&#x56DB;&#x4E2A;&#x5B50;&#x8282;&#x70B9;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x7B97;&#x6CD5;&#x6765;&#x6C42;&#x89E3;&#x6B64;&#x95EE;&#x9898;&#x3002;<br>&#x2003;&#x2003;&#x5206;&#x6790;&#x526A;&#x679D;&#x51FD;&#x6570;&#xFF0C;&#x6B64;&#x9898;&#x6BD4;&#x8F83;&#x7279;&#x6B8A;&#xFF0C;&#x7279;&#x522B;&#x9002;&#x5408;&#x4E8E;&#x7528;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#xFF0C;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x662F;&#x4E00;&#x5C42;&#x4E00;&#x5C42;&#x904D;&#x5386;&#xFF0C;&#x540E;&#x9762;&#x8BBF;&#x95EE;&#x7684;&#x7ED3;&#x70B9;&#x7684;&#x5C42;&#x6570;&#x4E00;&#x5B9A;&#x4E0D;&#x5C0F;&#x4E8E;&#x524D;&#x9762;&#x7ED3;&#x70B9;&#x7684;&#x5C42;&#x6570;&#x3002;&#x5224;&#x65AD;&#x65B0;&#x52A0;&#x5165;&#x7684;&#x5750;&#x6807;&#x662F;&#x5426;&#x4E3A;&#x76EE;&#x7684;&#x5730;&#x5750;&#x6807;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x5219;&#x4E3A;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x518D;&#x641C;&#x7D22;&#x5176;&#x4ED6;&#x8DEF;&#x5F84;&#x3002;</p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-2"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-2" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def bfs(circuit_board_queue):</span><br><span class="line">    global min_spend</span><br><span class="line">    while circuit_board_queue:</span><br><span class="line">        out_node_value, out_node_site = circuit_board_queue[0][0], circuit_board_queue.pop(0)[1]</span><br><span class="line">        if [end_x - 1, end_y - 1] == out_node_site[-1]:</span><br><span class="line">            return out_node_value, [x[:] for x in out_node_site]</span><br><span class="line">        for x, y in direction:</span><br><span class="line">            if 0 &lt;= out_node_site[-1][0] + x &lt; m_size and 0 &lt;= out_node_site[-1][1] + y &lt; n_size and out_node_value + 1 &lt; min_spend[out_node_site[-1][0] + x][out_node_site[-1][1] + y]:</span><br><span class="line">                min_spend[out_node_site[-1][0] + x][out_node_site[-1][1] + y] = out_node_value + 1</span><br><span class="line">                circuit_board_queue.append([out_node_value + 1, out_node_site + [[out_node_site[-1][0] + x, out_node_site[-1][1] + y]]])</span><br><span class="line"></span><br><span class="line">print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x5730;&#x56FE;&#x5927;&#x5C0F;:&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    m_size, n_size = [int(x) for x in line.strip().split()]</span><br><span class="line">    circuit_board, min_spend, direction = [[1 for i in range(n_size)] for j in range(m_size)], [[65535 for i in range(n_size)] for j in range(m_size)], [[1, 0], [0, 1], [-1, 0], [0, -1]]</span><br><span class="line">    while True:</span><br><span class="line">        print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x969C;&#x788D;&#x7269;&#x5750;&#x6807;:&apos;)</span><br><span class="line">        x, y = [int(x) for x in sys.stdin.readline().strip().split()]</span><br><span class="line">        if x == 0 and y == 0:</span><br><span class="line">            break</span><br><span class="line">        circuit_board[x - 1][y - 1] = 0</span><br><span class="line">    print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x8D77;&#x70B9;&#x5750;&#x6807;&apos;)</span><br><span class="line">    begin_x, begin_y = [int(x) for x in sys.stdin.readline().strip().split()]</span><br><span class="line">    min_spend[begin_x - 1][begin_y - 1] = 0</span><br><span class="line">    print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x7EC8;&#x70B9;&#x5750;&#x6807;&apos;)</span><br><span class="line">    end_x, end_y = [int(x) for x in sys.stdin.readline().strip().split()]</span><br><span class="line">    min_dist, min_route = bfs([[0, [[begin_x - 1, begin_y - 1]]]])</span><br><span class="line">    print(&apos;&#x8FD9;&#x6761;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x7684;&#x957F;&#x5EA6;&#x4E3A;:&apos;, min_dist, &apos;\n&#x6700;&#x4F73;&#x7684;&#x8DEF;&#x5F84;&#x4E3A;:&apos; + &apos;-&gt;&apos;.join([str(tuple([y + 1 for y in x])) for x in min_route]))</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-2"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-2" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/bfs4.png" alt="4"></p><h1 id="&#x7B97;&#x6CD5;&#x603B;&#x7ED3;"><a href="#&#x7B97;&#x6CD5;&#x603B;&#x7ED3;" class="headerlink" title="&#x7B97;&#x6CD5;&#x603B;&#x7ED3;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x603B;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;&#x662F;&#x4E00;&#x4E2A;&#x57FA;&#x672C;&#x641C;&#x7D22;&#x65B9;&#x6CD5;&#xFF0C;&#x548C;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x6709;&#x5F02;&#x66F2;&#x540C;&#x5DE5;&#x4E4B;&#x5999;&#xFF0C;&#x5BF9;&#x4E8E;&#x8BB8;&#x591A;&#x95EE;&#x9898;&#x90FD;&#x53EF;&#x4EE5;&#x540C;&#x65F6;&#x7528;&#x8FD9;&#x4E24;&#x79CD;&#x65B9;&#x6CD5;&#x89E3;&#x51B3;&#x3002;&#x548C;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x76F8;&#x540C;&#xFF0C;&#x90FD;&#x662F;&#x6307;&#x6570;&#x7EA7;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF0C;&#x4F46;&#x662F;&#x5BF9;&#x4E8E;&#x6709;&#x4E9B;&#x95EE;&#x9898;&#x4E0D;&#x5F97;&#x4E0D;&#x4F7F;&#x7528;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x8FDB;&#x884C;&#x904D;&#x5386;&#xFF0C;&#x56E0;&#x6B64;&#x5BFB;&#x627E;&#x5408;&#x9002;&#x7684;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x53EF;&#x4EE5;&#x5927;&#x5927;&#x51CF;&#x5C11;&#x65F6;&#x95F4;&#x7684;&#x5F00;&#x9500;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Breadth-First-Search&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="计算机基础知识" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="常用算法" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>深度优先搜索(Depth First Search)</title>
    <link href="https://USTCcoder.github.io/2019/07/27/algorithm%20DFS/"/>
    <id>https://USTCcoder.github.io/2019/07/27/algorithm DFS/</id>
    <published>2019-07-27T12:13:40.000Z</published>
    <updated>2019-08-07T15:58:00.735Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"><a href="#&#x539F;&#x7406;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x539F;&#x7406;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003; <strong>Depth First Search(DFS):&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;</strong>&#xFF0C;&#x5C5E;&#x4E8E;<strong>&#x56FE;&#x7B97;&#x6CD5;</strong>&#x7684;&#x4E00;&#x79CD;&#xFF0C;&#x662F;&#x4E00;&#x79CD;&#x76F2;&#x76EE;&#x641C;&#x5BFB;&#x6CD5;&#xFF0C;&#x4ECE;<strong>&#x521D;&#x59CB;&#x72B6;&#x6001;&#x51FA;&#x53D1;</strong>&#xFF0C;&#x5F53;&#x641C;&#x7D22;&#x5230;&#x67D0;&#x4E00;&#x6B65;&#x65F6;&#xFF0C;&#x53D1;&#x73B0;&#x539F;&#x5148;&#x9009;&#x62E9;&#x5E76;&#x4E0D;&#x662F;&#x6700;&#x4F18;&#x6216;&#x8FBE;&#x4E0D;&#x5230;&#x76EE;&#x6807;&#xFF0C;&#x5C31;<strong>&#x9000;&#x56DE;&#x4E00;&#x6B65;&#x91CD;&#x65B0;&#x9009;&#x62E9;</strong>&#x3002;&#x6839;&#x636E;&#x4EA7;&#x751F;&#x5B50;&#x8282;&#x70B9;&#x7684;&#x6761;&#x4EF6;&#x7EA6;&#x675F;&#xFF0C;&#x641C;&#x7D22;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x3002;&#x56E0;&#x6B64;&#x53C8;&#x540D;<strong>&#x56DE;&#x6EAF;&#x6CD5;</strong>&#xFF0C;&#x662F;&#x4E00;&#x79CD;<strong>&#x80FD;&#x8FDB;&#x5219;&#x8FDB;&#xFF0C;&#x8FDB;&#x4E0D;&#x4E86;&#x5219;&#x6362;&#xFF0C;&#x6362;&#x4E0D;&#x4E86;&#x5219;&#x9000;</strong>&#x7684;&#x641C;&#x7D22;&#x65B9;&#x6CD5;&#x3002;<br><a id="more"></a></p><p><img src="/images/ALGORITHM/dfs1.jpg" alt="dfs"></p><h1 id="&#x7B97;&#x6CD5;&#x6761;&#x4EF6;"><a href="#&#x7B97;&#x6CD5;&#x6761;&#x4EF6;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6761;&#x4EF6;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6761;&#x4EF6;</font></h1><h2 id="&#x89E3;&#x7A7A;&#x95F4;"><a href="#&#x89E3;&#x7A7A;&#x95F4;" class="headerlink" title="&#x89E3;&#x7A7A;&#x95F4;"></a><font size="4">&#x89E3;&#x7A7A;&#x95F4;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x89E3;&#x7684;&#x7EC4;&#x7EC7;&#x5F62;&#x5F0F;&#x53EF;&#x4EE5;&#x89C4;&#x8303;&#x4E3A;&#x4E00;&#x4E2A;n&#x5143;&#x7EC4;${x_1,x_2,\ldots,x_n}$&#xFF0C;&#x5E76;&#x4E14;&#x5BF9;&#x89E3;&#x6709;&#x53D6;&#x503C;&#x8303;&#x56F4;&#x7684;&#x9650;&#x5B9A;&#xFF0C;&#x4E00;&#x822C;&#x4E3A;&#x6709;&#x7A77;&#x4E2A;&#xFF0C;&#x89E3;&#x7684;&#x4E2A;&#x6570;&#x4EE3;&#x8868;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;&#x7684;&#x5206;&#x652F;&#x4E2A;&#x6570;&#x3002;&#x89E3;&#x7A7A;&#x95F4;&#x8D8A;&#x5C0F;&#xFF0C;&#x641C;&#x7D22;&#x6548;&#x7387;&#x8D8A;&#x9AD8;&#xFF0C;&#x89E3;&#x7A7A;&#x95F4;&#x5927;&#x72B9;&#x5982;&#x5927;&#x6D77;&#x635E;&#x9488;&#xFF0C;&#x641C;&#x7D22;&#x6548;&#x7387;&#x5F88;&#x4F4E;&#x3002;</font></p><h2 id="&#x526A;&#x679D;&#x51FD;&#x6570;"><a href="#&#x526A;&#x679D;&#x51FD;&#x6570;" class="headerlink" title="&#x526A;&#x679D;&#x51FD;&#x6570;"></a><font size="4">&#x526A;&#x679D;&#x51FD;&#x6570;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x526A;&#x679D;&#x51FD;&#x6570;&#x53C8;&#x79F0;&#x4E3A;&#x9690;&#x7EA6;&#x675F;&#xFF0C;&#x5BF9;&#x80FD;&#x5426;&#x5F97;&#x5230;&#x95EE;&#x9898;&#x7684;&#x53EF;&#x884C;&#x89E3;&#x7684;&#x7EA6;&#x675F;&#x79F0;&#x4E3A;&#x7EA6;&#x675F;&#x51FD;&#x6570;&#xFF0C;&#x5BF9;&#x80FD;&#x5426;&#x5F97;&#x5230;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x7684;&#x7EA6;&#x675F;&#x79F0;&#x4E3A;&#x9650;&#x754C;&#x51FD;&#x6570;&#x3002;&#x6709;&#x4E86;&#x526A;&#x679D;&#x51FD;&#x6570;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x526A;&#x6389;&#x5F97;&#x4E0D;&#x5230;&#x53EF;&#x884C;&#x89E3;&#x6216;&#x6700;&#x4F18;&#x89E3;&#x7684;&#x5206;&#x652F;&#xFF0C;&#x907F;&#x514D;&#x4E86;&#x65E0;&#x6548;&#x641C;&#x7D22;&#xFF0C;&#x63D0;&#x9AD8;&#x641C;&#x7D22;&#x7684;&#x6548;&#x7387;&#x3002;&#x56E0;&#x6B64;&#x526A;&#x679D;&#x51FD;&#x6570;&#x7684;&#x8BBE;&#x8BA1;&#x662F;&#x5341;&#x5206;&#x91CD;&#x8981;&#x7684;&#x3002;</font></p><h1 id="&#x7B97;&#x6CD5;&#x6B65;&#x9AA4;"><a href="#&#x7B97;&#x6CD5;&#x6B65;&#x9AA4;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6B65;&#x9AA4;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6B65;&#x9AA4;</font></h1><p>&#x2003;&#x2003;<font size="3">(1)&#x5206;&#x6790;&#x9898;&#x610F;&#xFF0C;&#x4E86;&#x89E3;&#x9898;&#x76EE;&#x8981;&#x6C42;</font><br>&#x2003;&#x2003;<font size="3">(2)&#x6839;&#x636E;&#x95EE;&#x9898;&#x5206;&#x6790;&#x89E3;&#x7A7A;&#x95F4;&#x7684;&#x5F62;&#x5F0F;</font><br>&#x2003;&#x2003;<font size="3">(3)&#x6839;&#x636E;&#x89E3;&#x7A7A;&#x95F4;&#x8BBE;&#x8BA1;&#x5408;&#x9002;&#x7684;&#x526A;&#x679D;&#x51FD;&#x6570;</font></p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-0-1&#x80CC;&#x5305;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-0-1&#x80CC;&#x5305;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(0-1&#x80CC;&#x5305;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(0-1&#x80CC;&#x5305;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x5047;&#x8BBE;&#x5C71;&#x6D1E;&#x91CC;&#x6709;n&#x4E2A;&#x5B9D;&#x7269;&#xFF0C;&#x6BCF;&#x79CD;&#x5B9D;&#x7269;&#x6709;&#x4E00;&#x5B9A;&#x91CD;&#x91CF;w&#x548C;&#x76F8;&#x5E94;&#x7684;&#x4EF7;&#x503C;v&#xFF0C;&#x80CC;&#x5305;&#x7684;&#x88C5;&#x8F7D;&#x80FD;&#x529B;&#x6709;&#x9650;&#xFF0C;&#x53EA;&#x80FD;&#x8FD0;&#x8D70;&#x91CD;&#x91CF;&#x4E3A;m&#x7684;&#x5B9D;&#x7269;&#xFF0C;&#x5B9D;&#x7269;&#x4E0D;&#x53EF;&#x4EE5;&#x5206;&#x5272;&#xFF0C;&#x5982;&#x4F55;&#x4F7F;&#x80CC;&#x5305;&#x8FD0;&#x8D70;&#x7269;&#x54C1;&#x7684;&#x4EF7;&#x503C;&#x6700;&#x5927;&#xFF1F;<br>&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x5148;&#x8F93;&#x5165;&#x5B9D;&#x7269;&#x7684;&#x6570;&#x91CF;n&#xFF0C;&#x548C;&#x80CC;&#x5305;&#x7684;&#x627F;&#x8F7D;&#x91CD;&#x91CF;m&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x4E00;&#x884C;&#x8F93;&#x51FA;&#x4E00;&#x4E2A;&#x5B9D;&#x7269;&#x5BF9;&#x5E94;&#x7684;&#x91CD;&#x91CF;w&#x548C;&#x4EF7;&#x503C;v(&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;)<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 10 # &#x5B9D;&#x7269;&#x6570;n&#x548C;&#x80CC;&#x5305;&#x80FD;&#x88C5;&#x8F7D;&#x7684;&#x91CD;&#x91CF;m</span><br><span class="line">2 6 #&#x6BCF;&#x4E2A;&#x5B9D;&#x7269;&#x7684;&#x91CD;&#x91CF;w&#x548C;&#x4EF7;&#x503C;v</span><br><span class="line">5 3</span><br><span class="line">4 5</span><br><span class="line">2 4</span><br><span class="line">3 6</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;0-1&#x80CC;&#x5305;&#x95EE;&#x9898;&#x548C;&#x666E;&#x901A;&#x80CC;&#x5305;&#x95EE;&#x9898;&#x4E0D;&#x540C;&#x7684;&#x662F;&#x5176;&#x89E3;&#x7A7A;&#x95F4;&#x4E3A;{0&#xFF0C;1}&#xFF0C;&#x5373;&#x6BCF;&#x4E00;&#x4E2A;&#x7269;&#x54C1;&#x90FD;&#x6709;&#x4E24;&#x79CD;&#x72B6;&#x6001;&#xFF0C;&#x88C5;&#x5165;&#x6216;&#x8005;&#x4E0D;&#x88C5;&#x5165;&#xFF0C;&#x56E0;&#x6B64;&#x6EE1;&#x8DB3;&#x89E3;&#x7A7A;&#x95F4;&#x7684;&#x6761;&#x4EF6;&#x3002;<br>&#x2003;&#x2003;&#x5206;&#x6790;&#x526A;&#x679D;&#x51FD;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x5269;&#x4F59;&#x7684;&#x4EF7;&#x503C;&#x52A0;&#x4E0A;&#x5F53;&#x524D;&#x7684;&#x4EF7;&#x503C;&#x90FD;&#x6CA1;&#x6709;&#x5DF2;&#x7ECF;&#x641C;&#x7D22;&#x5230;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x9AD8;&#xFF0C;&#x5219;&#x6CA1;&#x6709;&#x5FC5;&#x8981;&#x7EE7;&#x7EED;&#x641C;&#x7D22;&#x3002;</p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def dfs(n, current_plan, leave_weight, current_value):</span><br><span class="line">    global  max_value, max_plan</span><br><span class="line">    if n &gt;= count:</span><br><span class="line">        max_value, max_plan = [current_value, current_plan[:]] if current_value &gt; max_value else [max_value, max_plan[:]]</span><br><span class="line">        return</span><br><span class="line">    if leave_weight - treasure[n][1] &gt;= 0:</span><br><span class="line">        leave_weight, current_value, current_plan[n] = [leave_weight - treasure[n][1], current_value + treasure[n][2], True]</span><br><span class="line">        dfs(n + 1, current_plan, leave_weight, current_value)</span><br><span class="line">        leave_weight, current_value, current_plan[n] = [leave_weight + treasure[n][1], current_value - treasure[n][2], False]</span><br><span class="line">    if leave_value[n] + current_value &gt; max_value:</span><br><span class="line">        dfs(n + 1, current_plan, leave_weight, current_value)</span><br><span class="line"></span><br><span class="line">print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x5B9D;&#x7269;&#x6570;&#x91CF;&#x548C;&#x9A74;&#x5B50;&#x627F;&#x8F7D;&#x91CD;&#x91CF;:&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    count, weight = line.strip().split()</span><br><span class="line">    count, weight, treasure, max_plan, max_value, leave_value, res = int(count), float(weight), [], [False] * int(count), 0, [0], []</span><br><span class="line">    print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x5B9D;&#x7269;&#x7684;&#x91CD;&#x91CF;&#x548C;&#x4EF7;&#x503C;&apos;)</span><br><span class="line">    for i in range(count):</span><br><span class="line">        tmp = [float(x) for x in sys.stdin.readline().strip().split()]</span><br><span class="line">        treasure.append([i + 1] + tmp + [tmp[1] / tmp[0]])</span><br><span class="line">    treasure.sort(key=lambda x: (-x[3]))</span><br><span class="line">    for i in reversed(range(1, count)):</span><br><span class="line">        leave_value = [leave_value[0] + treasure[i][2]] + leave_value</span><br><span class="line">    dfs(0, [False] * count, weight, 0)</span><br><span class="line">    print(&apos;&#x6700;&#x4F18;&#x7684;&#x65B9;&#x6848;&#x4E3A;:\n&apos; + &apos;&apos;.join([&apos;&apos; + (&apos;&#x88C5;&#x5165;&#x7B2C;&apos; + str(j) + &apos;&#x4E2A;&#x5B9D;&#x7269;\n&apos;) * (j != 0) for j in sorted([treasure[i][0] * max_plan[i] for i in range(count)])]) + &apos;&#x88C5;&#x5165;&#x5B9D;&#x7269;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x4E3A;:&apos;, max_value)</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/dfs2.png" alt="2"></p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-n&#x7687;&#x540E;&#x95EE;&#x9898;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-n&#x7687;&#x540E;&#x95EE;&#x9898;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(n&#x7687;&#x540E;&#x95EE;&#x9898;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(n&#x7687;&#x540E;&#x95EE;&#x9898;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;-1"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;-1" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x5728;n&#xD7;n&#x7684;&#x56FD;&#x9645;&#x68CB;&#x76D8;&#x4E0A;&#x653E;&#x7F6E;&#x5F7C;&#x6B64;&#x4E0D;&#x53D7;&#x653B;&#x51FB;&#x7684;n&#x4E2A;&#x7687;&#x540E;&#xFF0C;&#x6309;&#x7167;&#x89C4;&#x5219;&#xFF0C;&#x7687;&#x540E;&#x53EF;&#x4EE5;&#x653B;&#x51FB;&#x4E0E;&#x4E4B;&#x5728;&#x540C;&#x4E00;&#x884C;&#x3001;&#x540C;&#x4E00;&#x5217;&#x3001;&#x7EDF;&#x4E00;&#x659C;&#x7EBF;&#x4E0A;&#x7684;&#x68CB;&#x5B50;&#x3002;&#x73B0;&#x5728;&#x5DF2;&#x77E5;&#x53C8;n&#x4E2A;&#x7687;&#x540E;&#xFF0C;&#x95EE;&#x6709;&#x591A;&#x5C11;&#x79CD;&#x4E0D;&#x540C;&#x7684;&#x653E;&#x6CD5;&#xFF1F;<br>&#x2003;&#x2003;&#x8F93;&#x5165;&#x7687;&#x540E;&#x7684;&#x4E2A;&#x6570;n</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 # &#x7687;&#x540E;&#x7684;&#x4E2A;&#x6570;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/ALGORITHM/dfs2.jpg" alt="7"></p><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;-1"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;-1" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;n&#x7687;&#x540E;&#x95EE;&#x9898;&#x4E0D;&#x540C;&#x4E8E;0-1&#x80CC;&#x5305;&#x95EE;&#x9898;&#xFF0C;n&#x7687;&#x540E;&#x7684;&#x89E3;&#x7A7A;&#x95F4;&#x4E3A;n&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x7687;&#x540E;&#x90FD;&#x6709;n&#x79CD;&#x653E;&#x6CD5;&#xFF0C;&#x56E0;&#x6B64;&#x5F53;n&#x5F88;&#x5927;&#x65F6;&#xFF0C;&#x89E3;&#x6CD5;&#x7684;&#x641C;&#x7D22;&#x975E;&#x5E38;&#x7F13;&#x6162;&#x3002;<br>&#x2003;&#x2003;&#x5206;&#x6790;&#x526A;&#x679D;&#x51FD;&#x6570;&#xFF0C;&#x5DF2;&#x7ECF;&#x653E;&#x7F6E;&#x4E86;k&#x4E2A;&#x7687;&#x540E;&#x4E4B;&#x540E;&#xFF0C;&#x5C31;&#x6CA1;&#x6709;n&#x79CD;&#x4E0D;&#x540C;&#x7684;&#x653E;&#x6CD5;&#x4E86;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5224;&#x65AD;&#x548C;&#x4EE5;&#x524D;&#x7684;&#x7687;&#x540E;&#x653E;&#x6CD5;&#x662F;&#x5426;&#x51B2;&#x7A81;&#x6765;&#x7F29;&#x5C0F;&#x89E3;&#x7A7A;&#x95F4;&#x7684;&#x641C;&#x7D22;&#x3002;</p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-1"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-1" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def judge_n(n, col, current_queen):</span><br><span class="line">    for i in range(len(current_queen)):</span><br><span class="line">        if current_queen[i] == col or (n - i) == col - current_queen[i] or (n - i) == current_queen[i] - col:</span><br><span class="line">            return False</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line">def dfs(n, current_queen):</span><br><span class="line">    global  res, res_num</span><br><span class="line">    if n &gt;= queen_num:</span><br><span class="line">        res, res_num = [res + &apos;&#x7B2C;&apos; + str(res_num + 1) + &apos;&#x79CD;&#x7687;&#x540E;&#x653E;&#x7F6E;&#x65B9;&#x6CD5;&#x4E3A;:&apos; + &apos;&apos;.join(str([(x + 1) for x in current_queen])) + &apos;\n&apos;, res_num + 1]</span><br><span class="line">        return</span><br><span class="line">    for i in range(queen_num):</span><br><span class="line">        if judge_n(n, i, current_queen):</span><br><span class="line">            dfs(n + 1, current_queen + [i])</span><br><span class="line"></span><br><span class="line">print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x7687;&#x540E;&#x7684;&#x4E2A;&#x6570;:&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    queen_num, res, res_num = int(line.strip()), &apos;&apos;, 0</span><br><span class="line">    chess = [[0 for i in range(queen_num)] for j in range(queen_num)]</span><br><span class="line">    dfs(0, [])</span><br><span class="line">    print(&apos;&#x4E00;&#x5171;&#x6709;&apos; + str(res_num) + &apos;&#x79CD;&#x7687;&#x540E;&#x653E;&#x7F6E;&#x65B9;&#x6CD5;\n&apos; + res)</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-1"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-1" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/dfs3.png" alt="3"></p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x65C5;&#x884C;&#x5546;&#x95EE;&#x9898;TSP"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x65C5;&#x884C;&#x5546;&#x95EE;&#x9898;TSP" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x65C5;&#x884C;&#x5546;&#x95EE;&#x9898;TSP)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x65C5;&#x884C;&#x5546;&#x95EE;&#x9898;TSP)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;-2"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;-2" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x73B0;&#x6709;n&#x4E2A;&#x666F;&#x70B9;&#xFF0C;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x666F;&#x70B9;&#x51FA;&#x53D1;&#xFF0C;&#x4E24;&#x4E2A;&#x666F;&#x70B9;&#x4E4B;&#x95F4;&#x6709;&#x6570;&#x5B57;&#x4EE3;&#x8868;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5230;&#x8FBE;&#xFF0C;&#x95EE;&#x5982;&#x4F55;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x8DEF;&#x5F84;&#x80FD;&#x591F;&#x4E0D;&#x91CD;&#x590D;&#x7684;&#x8D70;&#x904D;&#x6240;&#x6709;&#x666F;&#x70B9;&#x56DE;&#x5230;&#x51FA;&#x53D1;&#x70B9;&#xFF0C;&#x800C;&#x4E14;&#x6240;&#x7ECF;&#x8FC7;&#x7684;&#x8DEF;&#x5F84;&#x957F;&#x5EA6;&#x662F;&#x6700;&#x77ED;&#x7684;&#x3002;<br>&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x666F;&#x70B9;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x8F93;&#x5165;&#x4E24;&#x5730;&#x4E4B;&#x95F4;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5230;&#x8FBE;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x884C;&#x8F93;&#x5165;&#x4E24;&#x5730;&#x548C;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5 # &#x666F;&#x70B9;&#x4E2A;&#x6570;</span><br><span class="line">9 # &#x666F;&#x70B9;&#x4E4B;&#x95F4;&#x7684;&#x8FDE;&#x63A5;&#x6570;</span><br><span class="line">1 2 3 # &#x666F;&#x70B9;1&#x548C;&#x666F;&#x70B9;2&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#x4E3A;3</span><br><span class="line">1 4 8</span><br><span class="line">1 5 9</span><br><span class="line">2 3 3</span><br><span class="line">2 4 10</span><br><span class="line">2 5 5</span><br><span class="line">3 4 4</span><br><span class="line">3 5 3</span><br><span class="line">4 5 20</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;-2"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;-2" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;&#x65C5;&#x884C;&#x5546;&#x95EE;&#x9898;(TSP)&#x662F;&#x4E00;&#x4E2A;&#x5178;&#x578B;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x6B64;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x7A7A;&#x95F4;&#x4E3A;n&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x666F;&#x70B9;&#x90FD;&#x53EF;&#x4EE5;&#x5230;&#x4E0E;&#x4E4B;&#x76F8;&#x8FDE;&#x7684;&#x6240;&#x6709;&#x70B9;&#xFF0C;&#x56E0;&#x6B64;&#x5F53;&#x666F;&#x70B9;&#x6570;&#x5F88;&#x591A;&#x65F6;&#xFF0C;&#x6700;&#x4F18;&#x89E3;&#x7684;&#x641C;&#x7D22;&#x662F;&#x5341;&#x5206;&#x7F13;&#x6162;&#x7684;&#x3002;<br>&#x2003;&#x2003;&#x5206;&#x6790;&#x526A;&#x679D;&#x51FD;&#x6570;&#xFF0C;&#x526A;&#x679D;&#x51FD;&#x6570;&#x5BB9;&#x6613;&#x770B;&#x51FA;&#xFF0C;&#x7531;&#x4E8E;&#x4E0D;&#x662F;&#x4EFB;&#x4F55;&#x4E24;&#x4E2A;&#x666F;&#x70B9;&#x90FD;&#x662F;&#x76F8;&#x8FDE;&#x7684;&#xFF0C;&#x800C;&#x4E14;&#x8D70;&#x8FC7;&#x7684;&#x666F;&#x70B9;&#x4E0D;&#x80FD;&#x518D;&#x8D70;&#x4E00;&#x6B21;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x4E5F;&#x5927;&#x5927;&#x51CF;&#x5C11;&#x4E86;&#x89E3;&#x7A7A;&#x95F4;&#x7684;&#x4E2A;&#x6570;&#x3002;</p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-2"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-2" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def dfs(n, current_dist, current_route):</span><br><span class="line">    global min_dist, min_route</span><br><span class="line">    if n &gt;= scenic_spot_num:</span><br><span class="line">        min_dist, min_route = [current_dist + connection[current_route[-1]][0], current_route[:] + [0]] if current_dist + connection[current_route[-1]][0] &lt; min_dist else [min_dist, min_route[:]]</span><br><span class="line">        return</span><br><span class="line">    for i in range(scenic_spot_num):</span><br><span class="line">        if i not in current_route and connection[current_route[-1]][i] != 0 and current_dist + connection[current_route[-1]][i] + connection[i][0] &lt; min_dist:</span><br><span class="line">            dfs(n + 1, current_dist + connection[current_route[-1]][i], current_route + [i])</span><br><span class="line"></span><br><span class="line">print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x666F;&#x70B9;&#x6570;:&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    scenic_spot_num, min_dist, min_route = int(line.strip()), 65535, []</span><br><span class="line">    print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x8FDE;&#x901A;&#x7684;&#x666F;&#x70B9;&#x6570;:&apos;)</span><br><span class="line">    connection_num, connection = int(sys.stdin.readline().strip()), [[0 for i in range(scenic_spot_num)] for j in range(scenic_spot_num)]</span><br><span class="line">    print(&apos;&#x8BF7;&#x4F9D;&#x6B21;&#x8F93;&#x5165;&#x4E24;&#x4E2A;&#x666F;&#x70B9;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;:&apos;)</span><br><span class="line">    for i in range(connection_num):</span><br><span class="line">        begin, end, weight = [int(i) for i in sys.stdin.readline().strip().split()]</span><br><span class="line">        connection[begin - 1][end - 1], connection[end - 1][begin - 1] = weight, weight</span><br><span class="line">    dfs(1, 0, [0])</span><br><span class="line">    print(&apos;&#x6700;&#x77ED;&#x7684;&#x8DEF;&#x5F84;&#x4E3A;:&apos; + &apos;-&gt;&apos;.join([str(x + 1) for x in min_route]) + &apos;\n&#x6700;&#x77ED;&#x7684;&#x8DEF;&#x5F84;&#x957F;&#x5EA6;&#x4E3A;:&apos;, min_dist)</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-2"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-2" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/dfs4.png" alt="4"></p><h1 id="&#x7B97;&#x6CD5;&#x603B;&#x7ED3;"><a href="#&#x7B97;&#x6CD5;&#x603B;&#x7ED3;" class="headerlink" title="&#x7B97;&#x6CD5;&#x603B;&#x7ED3;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x603B;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;&#x662F;&#x4E00;&#x4E2A;&#x57FA;&#x672C;&#x641C;&#x7D22;&#x65B9;&#x6CD5;&#xFF0C;&#x5BF9;&#x4E8E;&#x5F88;&#x591A;&#x95EE;&#x9898;&#x6765;&#x8BF4;&#x90FD;&#x53EF;&#x4EE5;&#x7528;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;&#x6765;&#x89E3;&#x51B3;&#x3002;&#x4F46;&#x4E0D;&#x4E00;&#x5B9A;&#x662F;&#x6700;&#x4F18;&#x7684;&#x89E3;&#x6CD5;&#xFF0C;&#x56E0;&#x4E3A;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;&#x662F;&#x6307;&#x6570;&#x7EA7;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF0C;&#x4F46;&#x662F;&#x5BF9;&#x4E8E;&#x6709;&#x4E9B;&#x95EE;&#x9898;&#x4E0D;&#x5F97;&#x4E0D;&#x4F7F;&#x7528;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x8FDB;&#x884C;&#x904D;&#x5386;&#xFF0C;&#x56E0;&#x6B64;&#x5BFB;&#x627E;&#x5408;&#x9002;&#x7684;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x53EF;&#x4EE5;&#x5927;&#x5927;&#x51CF;&#x5C11;&#x65F6;&#x95F4;&#x7684;&#x5F00;&#x9500;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Depth First Search&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="计算机基础知识" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="常用算法" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>分治算法(Divide and Conquer)</title>
    <link href="https://USTCcoder.github.io/2019/07/21/algorithm%20divide_and_conquer/"/>
    <id>https://USTCcoder.github.io/2019/07/21/algorithm divide_and_conquer/</id>
    <published>2019-07-21T11:38:40.000Z</published>
    <updated>2019-08-07T15:58:05.502Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x5206;&#x6CBB;&#x7B97;&#x6CD5;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"><a href="#&#x539F;&#x7406;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x539F;&#x7406;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003; <strong>Divide and Conquer:&#x5206;&#x6CBB;&#x7B97;&#x6CD5;</strong>&#xFF0C;&#x5206;&#x800C;&#x6CBB;&#x4E4B;&#x3002;&#x5C71;&#x9AD8;&#x7687;&#x5E1D;&#x8FDC;&#xFF0C;&#x6CBB;&#x7406;&#x56FD;&#x5BB6;&#xFF0C;&#x4E0D;&#x53EF;&#x80FD;&#x6240;&#x6709;&#x7684;&#x4E8B;&#x60C5;&#x90FD;&#x7531;&#x7687;&#x5E1D;&#x89E3;&#x51B3;&#xFF0C;&#x56FD;&#x5BB6;&#x5206;&#x7701;&#x3001;&#x5E02;&#x3001;&#x53BF;&#x3001;&#x9547;&#x3001;&#x6751;&#xFF0C;&#x5C42;&#x5C42;&#x7BA1;&#x7406;&#xFF0C;&#x6700;&#x7EC8;&#x6C47;&#x603B;&#x5408;&#x5E76;&#x5230;&#x7687;&#x5E1D;&#x3002;&#x501F;&#x9274;&#x4E8E;&#x8FD9;&#x79CD;&#x601D;&#x60F3;&#xFF0C;&#x5C06;&#x4E00;&#x4E2A;&#x89C4;&#x6A21;&#x4E3A;n&#x7684;&#x95EE;&#x9898;<strong>&#x5206;&#x89E3;</strong>&#x4E3A;k&#x4E2A;&#x89C4;&#x6A21;&#x8F83;&#x5C0F;&#x7684;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x8FD9;&#x4E9B;&#x5B50;&#x95EE;&#x9898;<strong>&#x4E92;&#x76F8;&#x72EC;&#x7ACB;</strong>&#x4E14;<strong>&#x4E0E;&#x539F;&#x95EE;&#x9898;&#x76F8;&#x540C;</strong>&#xFF08;&#x5982;&#x679C;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x89C4;&#x6A21;&#x4ECD;&#x7136;&#x4E0D;&#x591F;&#x5C0F;&#xFF0C;&#x5219;&#x518D;&#x7EE7;&#x7EED;&#x5212;&#x5206;&#xFF09;&#xFF0C;&#x7136;&#x540E;<strong>&#x9012;&#x5F52;&#x6C42;&#x89E3;</strong>&#x8FD9;&#x4E9B;&#x95EE;&#x9898;&#xFF0C;&#x6700;&#x597D;&#x7528;&#x9002;&#x5F53;&#x7684;&#x65B9;&#x6CD5;&#x5C06;&#x5404;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x89E3;<strong>&#x5408;&#x5E76;</strong>&#x6210;&#x539F;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x3002;<br><a id="more"></a></p><p><img src="/images/ALGORITHM/divide.jpg" alt="divide"></p><h1 id="&#x89E3;&#x9898;&#x6B65;&#x9AA4;"><a href="#&#x89E3;&#x9898;&#x6B65;&#x9AA4;" class="headerlink" title="&#x89E3;&#x9898;&#x6B65;&#x9AA4;"></a><font size="5" color="red">&#x89E3;&#x9898;&#x6B65;&#x9AA4;</font></h1><h2 id="&#x5206;&#x89E3;"><a href="#&#x5206;&#x89E3;" class="headerlink" title="&#x5206;&#x89E3;"></a><font size="4">&#x5206;&#x89E3;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5C06;&#x8981;&#x89E3;&#x51B3;&#x7684;&#x95EE;&#x9898;&#x5206;&#x89E3;&#x4E3A;&#x82E5;&#x5E72;&#x4E2A;&#x89C4;&#x6A21;&#x8F83;&#x5C0F;&#xFF0C;&#x76F8;&#x4E92;&#x72EC;&#x7ACB;&#xFF0C;&#x4E0E;&#x539F;&#x95EE;&#x9898;&#x5F62;&#x5F0F;&#x76F8;&#x540C;&#x7684;&#x5B50;&#x95EE;&#x9898;&#x3002;</font></p><h2 id="&#x6CBB;&#x7406;"><a href="#&#x6CBB;&#x7406;" class="headerlink" title="&#x6CBB;&#x7406;"></a><font size="4">&#x6CBB;&#x7406;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x6C42;&#x89E3;&#x5404;&#x4E2A;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x7531;&#x4E8E;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x5F62;&#x5F0F;&#x4E0E;&#x539F;&#x95EE;&#x9898;&#x76F8;&#x540C;&#xFF0C;&#x53EA;&#x662F;&#x89C4;&#x6A21;&#x8F83;&#x5C0F;&#x800C;&#x5DF2;&#xFF0C;&#x800C;&#x5F53;&#x5B50;&#x95EE;&#x9898;&#x5212;&#x5206;&#x5F97;&#x8DB3;&#x591F;&#x5C0F;&#x65F6;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x7528;&#x7B80;&#x5355;&#x5F97;&#x65B9;&#x6CD5;&#x89E3;&#x51B3;&#x3002;</font></p><h2 id="&#x5408;&#x5E76;"><a href="#&#x5408;&#x5E76;" class="headerlink" title="&#x5408;&#x5E76;"></a><font size="4">&#x5408;&#x5E76;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x6309;&#x7167;&#x539F;&#x95EE;&#x9898;&#x7684;&#x8981;&#x6C42;&#xFF0C;&#x5C06;&#x5404;&#x4E2A;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x9010;&#x5C42;&#x5408;&#x5E76;&#xFF0C;&#x6784;&#x6210;&#x539F;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x3002;</font></p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x5408;&#x5E76;&#x6392;&#x5E8F;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x5408;&#x5E76;&#x6392;&#x5E8F;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x5408;&#x5E76;&#x6392;&#x5E8F;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x5408;&#x5E76;&#x6392;&#x5E8F;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x65E0;&#x5E8F;&#x6570;&#x5217;&#xFF0C;&#x5C06;&#x5176;&#x6392;&#x6210;&#x6709;&#x5E8F;&#x6570;&#x5217;&#x3002;<br>&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x51FA;&#x5143;&#x7D20;&#x7684;&#x4E2A;&#x6570;n&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x4F9D;&#x6B21;&#x8F93;&#x51FA;&#x6570;&#x5217;&#x4E2D;&#x7684;&#x5143;&#x7D20;(&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;)<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8 # &#x5143;&#x7D20;&#x7684;&#x4E2A;&#x6570;</span><br><span class="line">42 15 20 6 8 38 50 12 # &#x6570;&#x5217;&#x4E2D;&#x7684;&#x5143;&#x7D20;</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;&#x5728;&#x6570;&#x5217;&#x6392;&#x5E8F;&#x4E2D;&#xFF0C;&#x6570;&#x8D8A;&#x5C11;&#x8D8A;&#x5BB9;&#x6613;&#x6392;&#x5E8F;&#xFF0C;&#x57FA;&#x4E8E;&#x8FD9;&#x4E2A;&#x601D;&#x60F3;&#xFF0C;&#x53EF;&#x4EE5;&#x8003;&#x8651;&#x5C06;&#x957F;&#x5E8F;&#x5217;&#x5206;&#x6210;&#x77ED;&#x5E8F;&#x5217;&#xFF0C;&#x5F53;&#x5E8F;&#x5217;&#x5206;&#x4E3A;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x65F6;&#xFF0C;&#x5176;&#x672C;&#x8EAB;&#x5373;&#x4E3A;&#x6709;&#x5E8F;&#x3002;<br>&#x2003;&#x2003;&#x7136;&#x540E;&#x6267;&#x884C;&#x5408;&#x5E76;&#x64CD;&#x4F5C;&#xFF0C;&#x5C06;&#x4E24;&#x4E2A;&#x6709;&#x5E8F;&#x5E8F;&#x5217;&#x5408;&#x5E76;&#x4E3A;&#x4E00;&#x4E2A;&#x6709;&#x5E8F;&#x5E8F;&#x5217;&#x4E5F;&#x662F;&#x8F83;&#x4E3A;&#x5BB9;&#x6613;&#x7684;&#x3002;</p><h2 id="&#x5F52;&#x5E76;&#x56FE;&#x89E3;"><a href="#&#x5F52;&#x5E76;&#x56FE;&#x89E3;" class="headerlink" title="&#x5F52;&#x5E76;&#x56FE;&#x89E3;"></a><font size="4">&#x5F52;&#x5E76;&#x56FE;&#x89E3;</font></h2><p><img src="/images/ALGORITHM/divide4.png" alt="4"></p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def merge_sort(list_, begin, end):</span><br><span class="line">    if begin &lt; end:</span><br><span class="line">        merge_sort(list_, begin, (begin + end) // 2)</span><br><span class="line">        merge_sort(list_, (begin + end) // 2 + 1, end)</span><br><span class="line">        merge(list_, begin, (begin + end) // 2, end)</span><br><span class="line"></span><br><span class="line">def merge(list_, begin, mid, end):</span><br><span class="line">    new_list = []</span><br><span class="line">    p_1, p_2 = begin, mid + 1</span><br><span class="line">    while p_1&lt;=mid and p_2 &lt;=end:</span><br><span class="line">        new_list, p_1, p_2 = [new_list + [list_[p_1]], p_1 + 1, p_2 + 0] if list_[p_1] &lt;= list_[p_2] else [new_list + [list_[p_2]], p_1 + 0, p_2 + 1]</span><br><span class="line">    new_list += list_[p_2:end + 1] if p_1 &gt; mid else list_[p_1:mid + 1]</span><br><span class="line">    list_[begin:end + 1] = new_list</span><br><span class="line"></span><br><span class="line">print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x6570;&#x5217;&#x4E2D;&#x5143;&#x7D20;&#x7684;&#x4E2A;&#x6570;&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    num_number = int(line.strip().split()[0])</span><br><span class="line">    print(&apos;&#x8BF7;&#x4F9D;&#x6B21;&#x8F93;&#x5165;&#x6570;&#x5217;&#x4E2D;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x5E76;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;&apos;)</span><br><span class="line">    num_list = [int(x) for x in sys.stdin.readline().strip().split()]</span><br><span class="line">    merge_sort(num_list, 0, num_number - 1)</span><br><span class="line">    print(&apos;&#x5408;&#x5E76;&#x6392;&#x5E8F;&#x7684;&#x7ED3;&#x679C;&#x4E3A;:&apos;, num_list)</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/divide1.png" alt="1"></p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x5FEB;&#x901F;&#x6392;&#x5E8F;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x5FEB;&#x901F;&#x6392;&#x5E8F;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x5FEB;&#x901F;&#x6392;&#x5E8F;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x5FEB;&#x901F;&#x6392;&#x5E8F;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;-1"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;-1" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x65E0;&#x5E8F;&#x6570;&#x5217;&#xFF0C;&#x5C06;&#x5176;&#x6392;&#x6210;&#x6709;&#x5E8F;&#x6570;&#x5217;&#x3002;<br>&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x51FA;&#x5143;&#x7D20;&#x7684;&#x4E2A;&#x6570;n&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x4F9D;&#x6B21;&#x8F93;&#x51FA;&#x6570;&#x5217;&#x4E2D;&#x7684;&#x5143;&#x7D20;(&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;)</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9 # &#x5143;&#x7D20;&#x7684;&#x4E2A;&#x6570;</span><br><span class="line">30 24 5 58 18 36 12 42 39 # &#x6570;&#x5217;&#x4E2D;&#x7684;&#x5143;&#x7D20;</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;-1"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;-1" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x7684;&#x601D;&#x60F3;&#x548C;&#x5408;&#x5E76;&#x6392;&#x5E8F;&#x7C7B;&#x4F3C;&#xFF0C;&#x90FD;&#x662F;&#x91C7;&#x7528;&#x5206;&#x6CBB;&#x7B97;&#x6CD5;&#xFF0C;&#x533A;&#x522B;&#x4E4B;&#x5904;&#x5728;&#x4E8E;&#xFF0C;&#x5408;&#x5E76;&#x6392;&#x5E8F;&#x901A;&#x8FC7;&#x5148;&#x5206;&#x88C2;&#xFF0C;&#x518D;&#x5408;&#x5E76;&#xFF0C;&#x5408;&#x5E76;&#x7684;&#x540C;&#x65F6;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x3002;&#x800C;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x662F;&#x5148;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x751F;&#x6210;&#x4E24;&#x6BB5;&#x6709;&#x5E8F;&#x7684;&#x6570;&#x5217;&#xFF0C;&#x7136;&#x540E;&#x627E;&#x5230;&#x5206;&#x88C2;&#x70B9;&#x518D;&#x8FDB;&#x884C;&#x5206;&#x88C2;&#xFF0C;&#x6700;&#x540E;&#x518D;&#x5408;&#x5E76;&#x3002;<br>&#x2003;&#x2003;&#x5982;&#x4F55;&#x627E;&#x5230;&#x5206;&#x88C2;&#x70B9;&#x662F;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x7684;&#x96BE;&#x70B9;<br>(1)&#x9996;&#x5148;&#x53D6;&#x6570;&#x7EC4;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x4F5C;&#x4E3A;&#x57FA;&#x51C6;&#x5143;&#x7D20;base&#xFF0C;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x5934;&#x6307;&#x9488;&#x548C;&#x4E00;&#x4E2A;&#x5C3E;&#x6307;&#x9488;&#x3002;<br>(2)&#x4ECE;&#x5DE6;&#x5411;&#x53F3;&#x8FDB;&#x884C;&#x626B;&#x63CF;&#xFF0C;&#x5982;&#x679C;&#x627E;&#x5230;&#x5927;&#x4E8E;base&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x5934;&#x6307;&#x9488;&#x505C;&#x7559;&#x5728;&#x6B64;&#x5904;&#xFF0C;&#x8FDB;&#x5165;&#x6B65;&#x9AA4;(3)&#x3002;<br>(3)&#x4ECE;&#x53F3;&#x5411;&#x5DE6;&#x8FDB;&#x884C;&#x626B;&#x63CF;&#xFF0C;&#x5982;&#x679C;&#x627E;&#x5230;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;base&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x5C3E;&#x6307;&#x9488;&#x505C;&#x7559;&#x5728;&#x6B64;&#x5904;&#xFF0C;&#x7136;&#x540E;&#x4EA4;&#x6362;&#x5934;&#x5C3E;&#x6307;&#x9488;&#x7684;&#x503C;&#xFF0C;&#x5E76;&#x4E14;&#x5934;&#x6307;&#x9488;&#x5411;&#x53F3;&#x79FB;&#x52A8;&#x4E00;&#x4E2A;&#x8DDD;&#x79BB;&#xFF0C;&#x5C3E;&#x6307;&#x9488;&#x5411;&#x5DE6;&#x79FB;&#x52A8;&#x4E00;&#x4E2A;&#x8DDD;&#x79BB;&#x3002;<br>(4)&#x91CD;&#x590D;(2)&#x548C;(3)&#xFF0C;&#x76F4;&#x5230;&#x5934;&#x6307;&#x9488;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;&#x5C3E;&#x6307;&#x9488;&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#x6B64;&#x65F6;&#x5934;&#x6307;&#x9488;&#x4E4B;&#x524D;&#x7684;&#x5143;&#x7D20;&#x90FD;&#x662F;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;&#x57FA;&#x51C6;&#x5143;&#x7D20;&#x7684;&#xFF0C;&#x5934;&#x6307;&#x9488;&#x4E4B;&#x540E;&#x7684;&#x5143;&#x7D20;&#x90FD;&#x662F;&#x5927;&#x4E8E;&#x57FA;&#x51C6;&#x5143;&#x7D20;&#x7684;&#x3002;<br>&#x2003;&#x2003;&#x627E;&#x5230;&#x5206;&#x88C2;&#x70B9;&#x4EE5;&#x540E;&#xFF0C;&#x6839;&#x636E;&#x5206;&#x88C2;&#x70B9;&#x5C06;&#x957F;&#x6570;&#x5217;&#x5206;&#x89E3;&#x6210;&#x77ED;&#x6570;&#x5217;&#x91CD;&#x590D;&#x4E0A;&#x8FF0;&#x65B9;&#x6CD5;&#x8FDB;&#x884C;&#x5206;&#x88C2;&#xFF0C;&#x6700;&#x7EC8;&#x5C06;&#x5206;&#x88C2;&#x7684;&#x7ED3;&#x679C;&#x6309;&#x987A;&#x5E8F;&#x5408;&#x5E76;&#x5373;&#x53EF;&#x3002;</p><h2 id="&#x5FEB;&#x6392;&#x56FE;&#x89E3;"><a href="#&#x5FEB;&#x6392;&#x56FE;&#x89E3;" class="headerlink" title="&#x5FEB;&#x6392;&#x56FE;&#x89E3;"></a><font size="4">&#x5FEB;&#x6392;&#x56FE;&#x89E3;</font></h2><p><img src="/images/ALGORITHM/divide5.png" alt="5"></p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-1"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-1" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def quick_sort(list_, begin, end):</span><br><span class="line">    if begin &lt; end:</span><br><span class="line">        base_element, head, tail = list_[begin], begin, end</span><br><span class="line">        while head &lt; tail:</span><br><span class="line">            while head &lt; tail and list_[head] &lt;= base_element:</span><br><span class="line">                head += 1</span><br><span class="line">            while head &lt; tail and list_[tail] &gt; base_element:</span><br><span class="line">                tail -= 1</span><br><span class="line">            list_[head], list_[tail], head, tail = [list_[tail], list_[head], head + 1, tail - 1] if head &lt; tail else [list_[head], list_[tail], head, tail]</span><br><span class="line">        if list_[head] &lt; list_[begin]:</span><br><span class="line">            list_[head], list_[begin] = list_[begin], list_[head]</span><br><span class="line">            quick_sort(list_, begin, head - 1)</span><br><span class="line">            quick_sort(list_, head + 1, end)</span><br><span class="line">        else:</span><br><span class="line">            list_[head - 1], list_[begin] = list_[begin], list_[head - 1]</span><br><span class="line">            quick_sort(list_, begin, head - 2)</span><br><span class="line">            quick_sort(list_, head, end)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x8981;&#x6392;&#x5E8F;&#x7684;&#x6570;&#x636E;&#x4E2A;&#x6570;:&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    num_number = int(line.strip().split()[0])</span><br><span class="line">    print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x8981;&#x6392;&#x5E8F;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x5E76;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;&apos;)</span><br><span class="line">    list_number = [int(x) for x in sys.stdin.readline().strip().split()]</span><br><span class="line">    quick_sort(list_number, 0, num_number - 1)</span><br><span class="line">    print(&apos;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x7684;&#x7ED3;&#x679C;&#x4E3A;:&apos;, list_number)</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-1"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-1" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/divide2.png" alt="2"></p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x5927;&#x6570;&#x4E58;&#x6CD5;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x5927;&#x6570;&#x4E58;&#x6CD5;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x5927;&#x6570;&#x4E58;&#x6CD5;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x5927;&#x6570;&#x4E58;&#x6CD5;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;-2"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;-2" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x73B0;&#x6709;&#x4E24;&#x4E2A;&#x5F88;&#x5927;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x7531;&#x4E8E;&#x8BA1;&#x7B97;&#x673A;&#x786C;&#x4EF6;&#x7684;&#x9650;&#x5236;&#xFF0C;&#x65E0;&#x6CD5;&#x7528;&#x4E58;&#x6CD5;&#x76F4;&#x63A5;&#x8FDB;&#x884C;&#x6C42;&#x89E3;&#xFF0C;&#x5982;&#x4F55;&#x8BBE;&#x8BA1;&#x7B97;&#x6CD5;&#x6C42;&#x89E3;&#x51FA;&#x6B63;&#x786E;&#x7684;&#x7ED3;&#x679C;&#xFF1F;<br>&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x4E58;&#x6570;a&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x8F93;&#x5165;&#x4E58;&#x6570;b</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1122334455667788998877665544332211 #&#x4E58;&#x6570; a</span><br><span class="line">9988776655443322112233445566778899 # &#x4E58;&#x6570; b</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;-2"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;-2" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;&#x7531;&#x4E8E;&#x8BA1;&#x7B97;&#x673A;&#x7684;&#x786C;&#x4EF6;&#x9650;&#x5236;&#xFF0C;&#x65E0;&#x6CD5;&#x5BF9;&#x5927;&#x503C;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#xFF0C;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x6839;&#x636E;&#x8FD0;&#x7B97;&#x7684;&#x6CD5;&#x5219;&#x5BF9;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x5206;&#x89E3;&#x3002;<br>&#x2003;&#x2003;&#x5047;&#x8BBE;&#x8981;&#x8BA1;&#x7B97;$3278 * 41926$&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x4E24;&#x4E2A;&#x6570;&#x8FDB;&#x884C;&#x5206;&#x89E3;&#xFF0C;&#x5C06;3278&#x5206;&#x89E3;&#x4E3A;$(32*10^2)+(78*10^0)$&#xFF0C;&#x5C06;41926&#x5206;&#x89E3;&#x4E3A;$(419*10^2)+(26*10^0)$&#xFF0C;&#x7136;&#x540E;&#x6839;&#x636E;&#x4E58;&#x6CD5;&#x7684;&#x8FD0;&#x7B97;&#x6027;&#x8D28;$(a+b)*(c+d)=ac+ad+bc+bd$&#x53EF;&#x5F97;&#x539F;&#x5F0F;&#x4E3A;$(32*419*10^4)+(32*26*10^2)+(78*419*10^2)+(78*26*10^0)$&#x3002;<br>&#x2003;&#x2003;&#x7136;&#x540E;&#x53D1;&#x73B0;&#x4E0A;&#x5F0F;&#x7684;&#x7B2C;&#x4E00;&#x9879;$(32*419*10^4)$&#x8FD8;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x5206;&#x89E3;&#xFF0C;&#x5C06;32&#x5206;&#x89E3;&#x4E3A;$(3*10^1)+(2*10^0)$&#xFF0C;&#x5C06;419&#x5206;&#x89E3;&#x4E3A;$(41*10^1)+(9*10^0)$&#xFF0C;&#x2026;&#x2026;&#xFF0C;&#x76F4;&#x5230;&#x5206;&#x89E3;&#x51FA;&#x7684;&#x4E24;&#x4E2A;&#x6570;&#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x4E3A;&#x4E00;&#x4F4D;&#x6570;&#x5219;&#x4E0D;&#x9700;&#x8981;&#x5206;&#x89E3;&#xFF0C;&#x56E0;&#x4E3A;&#x4E00;&#x4F4D;&#x6570;&#x7684;&#x4E58;&#x6CD5;&#x5F88;&#x7B80;&#x5355;&#x3002;</p><h2 id="&#x4E58;&#x6CD5;&#x56FE;&#x89E3;"><a href="#&#x4E58;&#x6CD5;&#x56FE;&#x89E3;" class="headerlink" title="&#x4E58;&#x6CD5;&#x56FE;&#x89E3;"></a><font size="4">&#x4E58;&#x6CD5;&#x56FE;&#x89E3;</font></h2><p><img src="/images/ALGORITHM/divide6.png" alt="6"></p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-2"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-2" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">class Number:</span><br><span class="line">    def __init__(self, value = None, length = 0, ten = 0):</span><br><span class="line">        self.value = value</span><br><span class="line">        self.length = length</span><br><span class="line">        self.ten = ten</span><br><span class="line"></span><br><span class="line">def big_add(number_a, number_b, ans):</span><br><span class="line">    number_a, number_b = [number_b, number_a] if number_a.ten &lt; number_b.ten else [number_a, number_b]</span><br><span class="line">    ans.ten, tmp, temp, number_a_len, number_b_len = number_b.ten, 0, number_a.ten - number_b.ten, number_a.length + number_a.ten, number_b.length + number_b.ten</span><br><span class="line">    ans_length = max(number_a_len, number_b_len)</span><br><span class="line">    for i in range(ans_length - ans.ten):</span><br><span class="line">        ta = 0 if i &lt; temp or i &gt;= number_a.length + temp else number_a.value[i - temp]</span><br><span class="line">        tb = number_b.value[i] if i &lt; number_b.length else 0</span><br><span class="line">        ans.value[i], tmp = (ta + tb + tmp) % 10, (ta + tb + tmp) // 10</span><br><span class="line">    ans.length = ans_length - ans.ten</span><br><span class="line">    if tmp &gt; 0:</span><br><span class="line">        ans.value[ans_length - ans.ten], ans.length = [tmp, ans_length - ans.ten + 1]</span><br><span class="line"></span><br><span class="line">def big_mul(number_a, number_b, ans):</span><br><span class="line">    mid_a, mid_b = [number_a.length &gt;&gt; 1, number_b.length &gt;&gt; 1]</span><br><span class="line">    if number_a.length == 1 or number_b.length == 1:</span><br><span class="line">        if number_a.length == 1:</span><br><span class="line">            number_a, number_b = number_b, number_a</span><br><span class="line">        ans.ten, w, tmp = number_a.ten + number_b.ten, number_b.value[0], 0</span><br><span class="line">        for i in range(number_a.length):</span><br><span class="line">            ans.value[i], tmp = (w * number_a.value[i] + tmp) % 10, (w * number_a.value[i] + tmp) // 10</span><br><span class="line">        ans.length = number_a.length</span><br><span class="line">        if tmp &gt; 0:</span><br><span class="line">            ans.value[number_a.length], ans.length = [tmp, number_a.length + 1]</span><br><span class="line">        return</span><br><span class="line">    high_a, low_a, high_b, low_b = [Number(number_a.value[mid_a:], number_a.length - mid_a, number_a.ten + mid_a), Number(number_a.value[:mid_a], mid_a, number_a.ten), Number(number_b.value[mid_b:], number_b.length - mid_b, number_b.ten + mid_b), Number(number_b.value[:mid_b], mid_b, number_b.ten)]</span><br><span class="line">    t_1, t_2, t_3, t_4, tmp_ans = [Number([0] * (high_a.length + high_a.ten + high_b.length + high_b.ten)), Number([0] * (high_a.length + high_a.ten + low_b.length + low_b.ten)), Number([0] * (low_a.length + low_a.ten + high_b.length + high_b.ten)),Number([0] * (low_a.length + low_a.ten + low_b.length + low_b.ten)), Number([0] * (len(ans.value) + ans.ten))]</span><br><span class="line">    big_mul(high_a, high_b, t_1)</span><br><span class="line">    big_mul(high_a, low_b, t_2)</span><br><span class="line">    big_mul(low_a, high_b, t_3)</span><br><span class="line">    big_mul(low_a, low_b, t_4)</span><br><span class="line">    big_add(t_1, t_2, ans)</span><br><span class="line">    big_add(t_3, ans, tmp_ans)</span><br><span class="line">    big_add(t_4, tmp_ans, ans)</span><br><span class="line"></span><br><span class="line">print(&apos;&#x8F93;&#x5165;&#x5927;&#x6574;&#x6570;a:&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    number_a = list(line.strip().split()[0])</span><br><span class="line">    print(&apos;&#x8F93;&#x5165;&#x5927;&#x6574;&#x6570;b:&apos;)</span><br><span class="line">    number_b = list(sys.stdin.readline().strip().split()[0])</span><br><span class="line">    char, number_a = [-1, number_a[1:]] if number_a[0] == &apos;-&apos; else [1, number_a]</span><br><span class="line">    char, number_b = [char * -1, number_b[1:]] if number_b[0] ==&apos;-&apos; else [char, number_b]</span><br><span class="line">    number_a, number_b, ans = Number(list(reversed([int(x) for x in number_a])), len(number_a), 0), Number(list(reversed([int(x) for x in number_b])), len(number_b), 0), Number([0] * (len(number_a) + len(number_b)))</span><br><span class="line">    big_mul(number_a, number_b, ans)</span><br><span class="line">    print(&apos;&apos;.join([str(x) for x in ans.value[::-1]]).lstrip(&apos;0&apos;))</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-2"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-2" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/divide3.png" alt="3"></p><h1 id="&#x7B97;&#x6CD5;&#x603B;&#x7ED3;"><a href="#&#x7B97;&#x6CD5;&#x603B;&#x7ED3;" class="headerlink" title="&#x7B97;&#x6CD5;&#x603B;&#x7ED3;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x603B;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x5206;&#x6CBB;&#x7B97;&#x6CD5;&#x7684;&#x96BE;&#x70B9;&#x662F;&#x5982;&#x4F55;&#x8FDB;&#x884C;&#x5206;&#x89E3;&#xFF0C;&#x5C31;&#x50CF;&#x76D7;&#x68A6;&#x7A7A;&#x95F4;&#x7684;&#x68A6;&#x5883;&#x4E00;&#x6837;&#xFF0C;&#x5C42;&#x5C42;&#x6DF1;&#x5165;&#xFF0C;&#x5374;&#x8981;&#x6E05;&#x9192;&#x5728;&#x6BCF;&#x4E00;&#x5C42;&#x5E94;&#x8BE5;&#x505A;&#x4EC0;&#x4E48;&#x4E8B;&#x60C5;&#x3002;&#x662F;&#x5E94;&#x8BE5;&#x5148;&#x5206;&#x88C2;&#x518D;&#x505A;&#x4E8B;&#x60C5;&#x8FD8;&#x662F;&#x5148;&#x505A;&#x4E8B;&#x60C5;&#x5728;&#x5206;&#x88C2;&#x4E5F;&#x662F;&#x9700;&#x8981;&#x8003;&#x8651;&#x7684;&#x3002;&#x6700;&#x91CD;&#x8981;&#x7684;&#x4E00;&#x70B9;&#x662F;&#x68A6;&#x5883;&#x4E0D;&#x80FD;&#x6C38;&#x8FDC;&#x6DF1;&#x5165;&#xFF0C;&#x4E00;&#x5B9A;&#x8981;&#x5728;&#x67D0;&#x4E00;&#x4E2A;&#x65F6;&#x673A;&#x56DE;&#x5230;&#x73B0;&#x5B9E;&#xFF0C;&#x5373;&#x8981;&#x62E5;&#x6709;&#x622A;&#x6B62;&#x6761;&#x4EF6;&#xFF0C;&#x5224;&#x65AD;&#x662F;&#x5426;&#x5DF2;&#x7ECF;&#x8FBE;&#x5230;&#x9700;&#x8981;&#x7684;&#x6DF1;&#x5EA6;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Divide and Conquer&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="计算机基础知识" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="常用算法" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>动态规划(Dynamic Programming)</title>
    <link href="https://USTCcoder.github.io/2019/07/21/algorithm%20Dynamic_Programming/"/>
    <id>https://USTCcoder.github.io/2019/07/21/algorithm Dynamic_Programming/</id>
    <published>2019-07-21T11:38:40.000Z</published>
    <updated>2019-08-07T15:58:09.909Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x52A8;&#x6001;&#x89C4;&#x5212;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"><a href="#&#x539F;&#x7406;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x539F;&#x7406;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003; <strong>Dynamic Programming(DP):&#x52A8;&#x6001;&#x89C4;&#x5212;</strong>&#xFF0C;&#x662F;&#x8FD0;&#x7B79;&#x5B66;&#x7684;&#x4E00;&#x4E2A;&#x5206;&#x652F;&#xFF0C;&#x662F;&#x6C42;&#x89E3;&#x51B3;&#x7B56;&#x8FC7;&#x7A0B;&#x6700;&#x4F18;&#x5316;&#x7684;&#x6570;&#x5B66;&#x65B9;&#x6CD5;&#x3002;&#x4E8E;1957&#x5E74;&#x88AB;Richard Bellman(&#x7406;&#x67E5;&#x5FB7;&#xB7;&#x8D1D;&#x5C14;&#x66FC;)&#x63D0;&#x51FA;&#x3002;&#x5176;&#x4E2D;&#x7684;Programming&#x4E0D;&#x662F;&#x7F16;&#x7A0B;&#x7684;&#x610F;&#x601D;&#xFF0C;&#x800C;&#x662F;&#x6307;&#x4E00;&#x79CD;&#x8868;&#x683C;&#x5904;&#x7406;&#x6CD5;&#xFF0C;&#x628A;&#x6BCF;&#x4E00;&#x6B65;&#x5F97;&#x5230;&#x7684;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x7ED3;&#x679C;<strong>&#x5B58;&#x50A8;&#x5728;&#x8868;&#x683C;</strong>&#x91CC;&#xFF0C;&#x6BCF;&#x6B21;&#x9047;&#x5230;&#x5B50;&#x95EE;&#x9898;&#x65F6;&#x4E0D;&#x9700;&#x8981;&#x518D;&#x6C42;&#x89E3;&#x4E00;&#x904D;&#x3002;&#x5176;&#x672C;&#x8D28;&#x4E5F;&#x662F;&#x4E00;&#x79CD;&#x5206;&#x6CBB;&#x7B97;&#x6CD5;&#xFF0C;&#x5176;&#x4E0D;&#x540C;&#x70B9;&#x5728;&#x4E8E;&#x5206;&#x6CBB;&#x7B97;&#x6CD5;&#x5C06;&#x539F;&#x95EE;&#x9898;&#x5206;&#x89E3;&#x4E3A;&#x82E5;&#x5E72;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x81EA;&#x9876;&#x5411;&#x4E0B;&#x6C42;&#x89E3;&#x5404;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x518D;&#x5408;&#x5E76;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x3002;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x4E5F;&#x662F;&#x628A;&#x539F;&#x95EE;&#x9898;&#x5206;&#x89E3;&#x4E3A;&#x82E5;&#x5E72;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x7136;&#x540E;<strong>&#x81EA;&#x5E95;&#x5411;&#x4E0A;</strong>&#xFF0C;&#x5148;&#x6C42;&#x89E3;&#x6700;&#x5C0F;&#x7684;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x628A;&#x7ED3;&#x679C;&#x5B58;&#x50A8;&#x8D77;&#x6765;&#xFF0C;&#x6C42;&#x89E3;&#x5927;&#x95EE;&#x9898;&#x65F6;&#x76F4;&#x63A5;&#x67E5;&#x8BE2;&#x5C0F;&#x95EE;&#x9898;&#x7684;&#x89E3;&#xFF0C;<strong>&#x907F;&#x514D;&#x4E86;&#x5927;&#x91CF;&#x7684;&#x91CD;&#x590D;&#x8BA1;&#x7B97;</strong>&#xFF0C;&#x63D0;&#x9AD8;&#x4E86;&#x7B97;&#x6CD5;&#x6548;&#x7387;&#x3002;<strong>&#x5176;&#x672C;&#x8D28;&#x4E3A;&#xFF1A;&#x9012;&#x5F52;+&#x8BB0;&#x5FC6;&#x5316;</strong><br><a id="more"></a></p><p><img src="/images/ALGORITHM/dynamic.png" alt="dynamic"></p><h1 id="&#x95EE;&#x9898;&#x6761;&#x4EF6;"><a href="#&#x95EE;&#x9898;&#x6761;&#x4EF6;" class="headerlink" title="&#x95EE;&#x9898;&#x6761;&#x4EF6;"></a><font size="5" color="red">&#x95EE;&#x9898;&#x6761;&#x4EF6;</font></h1><h2 id="&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;"><a href="#&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;" class="headerlink" title="&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;"></a><font size="4">&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#x662F;&#x6307;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x5305;&#x542B;&#x5176;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x3002;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x662F;&#x4F7F;&#x7528;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x6700;&#x57FA;&#x672C;&#x6761;&#x4EF6;&#xFF0C;&#x5982;&#x679C;&#x95EE;&#x9898;&#x4E0D;&#x5177;&#x6709;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#xFF0C;&#x5C31;&#x4E0D;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x89E3;&#x51B3;&#x3002;</font></p><h2 id="&#x5B50;&#x95EE;&#x9898;&#x91CD;&#x53E0;"><a href="#&#x5B50;&#x95EE;&#x9898;&#x91CD;&#x53E0;" class="headerlink" title="&#x5B50;&#x95EE;&#x9898;&#x91CD;&#x53E0;"></a><font size="4">&#x5B50;&#x95EE;&#x9898;&#x91CD;&#x53E0;</font></h2><p>&#x2003;&#x2003;<font size="3">&#x5B50;&#x95EE;&#x9898;&#x91CD;&#x53E0;&#x662F;&#x6307;&#x518D;&#x6C42;&#x89E3;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x6709;&#x5927;&#x91CF;&#x7684;&#x5B50;&#x95EE;&#x9898;&#x662F;&#x91CD;&#x590D;&#x7684;&#xFF0C;&#x90A3;&#x4E48;&#x53EA;&#x9700;&#x8981;&#x6C42;&#x89E3;&#x4F9D;&#x6B21;&#xFF0C;&#x7136;&#x540E;&#x5B58;&#x50A8;&#x5728;&#x8868;&#x683C;&#x4E2D;&#xFF0C;&#x4EE5;&#x4FBF;&#x4F7F;&#x7528;&#x65F6;&#x67E5;&#x8BE2;&#x3002;&#x8FD9;&#x4E0D;&#x662F;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x5FC5;&#x8981;&#x6761;&#x4EF6;&#xFF0C;&#x4F46;&#x662F;&#x53EF;&#x4EE5;&#x5145;&#x5206;&#x4F53;&#x73B0;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x4F18;&#x52BF;&#x3002;</font></p><h1 id="&#x7B97;&#x6CD5;&#x6B65;&#x9AA4;"><a href="#&#x7B97;&#x6CD5;&#x6B65;&#x9AA4;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6B65;&#x9AA4;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6B65;&#x9AA4;</font></h1><p>&#x2003;&#x2003;<font size="3">(1)&#x5206;&#x6790;&#x6700;&#x4F18;&#x89E3;&#x7684;&#x7ED3;&#x6784;&#x7279;&#x5F81;</font><br>&#x2003;&#x2003;<font size="3">(2)&#x5B9A;&#x4E49;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;(&#x9012;&#x5F52;&#x5F0F;)</font><br>&#x2003;&#x2003;<font size="3">(3)&#x81EA;&#x5E95;&#x5411;&#x4E0A;&#x8BA1;&#x7B97;&#x6700;&#x4F18;&#x89E3;&#x5E76;&#x8BB0;&#x5F55;</font></p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-0-1&#x80CC;&#x5305;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-0-1&#x80CC;&#x5305;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(0-1&#x80CC;&#x5305;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(0-1&#x80CC;&#x5305;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x5047;&#x8BBE;&#x5C71;&#x6D1E;&#x91CC;&#x6709;n&#x4E2A;&#x5B9D;&#x7269;&#xFF0C;&#x6BCF;&#x79CD;&#x5B9D;&#x7269;&#x6709;&#x4E00;&#x5B9A;&#x91CD;&#x91CF;w&#x548C;&#x76F8;&#x5E94;&#x7684;&#x4EF7;&#x503C;v&#xFF0C;&#x80CC;&#x5305;&#x7684;&#x88C5;&#x8F7D;&#x80FD;&#x529B;&#x6709;&#x9650;&#xFF0C;&#x53EA;&#x80FD;&#x8FD0;&#x8D70;&#x91CD;&#x91CF;&#x4E3A;m&#x7684;&#x5B9D;&#x7269;&#xFF0C;&#x5B9D;&#x7269;&#x4E0D;&#x53EF;&#x4EE5;&#x5206;&#x5272;&#xFF0C;&#x5982;&#x4F55;&#x4F7F;&#x80CC;&#x5305;&#x8FD0;&#x8D70;&#x7269;&#x54C1;&#x7684;&#x4EF7;&#x503C;&#x6700;&#x5927;&#xFF1F;<br>&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x5148;&#x8F93;&#x5165;&#x5B9D;&#x7269;&#x7684;&#x6570;&#x91CF;n&#xFF0C;&#x548C;&#x80CC;&#x5305;&#x7684;&#x627F;&#x8F7D;&#x91CD;&#x91CF;m&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x4E00;&#x884C;&#x8F93;&#x51FA;&#x4E00;&#x4E2A;&#x5B9D;&#x7269;&#x5BF9;&#x5E94;&#x7684;&#x91CD;&#x91CF;w&#x548C;&#x4EF7;&#x503C;v(&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;)<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 10 # &#x5B9D;&#x7269;&#x6570;n&#x548C;&#x80CC;&#x5305;&#x80FD;&#x88C5;&#x8F7D;&#x7684;&#x91CD;&#x91CF;m</span><br><span class="line">2 6 #&#x6BCF;&#x4E2A;&#x5B9D;&#x7269;&#x7684;&#x91CD;&#x91CF;w&#x548C;&#x4EF7;&#x503C;v</span><br><span class="line">5 3</span><br><span class="line">4 5</span><br><span class="line">2 4</span><br><span class="line">3 6</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;&#x548C;&#x666E;&#x901A;&#x80CC;&#x5305;&#x95EE;&#x9898;&#x4E0D;&#x540C;&#xFF0C;&#x5982;&#x679C;&#x76F2;&#x76EE;&#x7684;&#x88C5;&#x5165;&#x5F53;&#x524D;&#x5355;&#x4F4D;&#x91CD;&#x91CF;&#x4EF7;&#x503C;&#x6700;&#x9AD8;&#x7684;&#x7269;&#x54C1;&#xFF0C;&#x53EF;&#x80FD;&#x5BFC;&#x81F4;&#x80CC;&#x5305;&#x5269;&#x4F59;&#x7A7A;&#x95F4;&#x8F83;&#x5927;&#xFF0C;&#x8FBE;&#x4E0D;&#x5230;&#x6700;&#x4F18;&#x89E3;&#x3002;&#x9996;&#x5148;&#x5206;&#x6790;&#x95EE;&#x9898;&#x7684;&#x7ED3;&#x6784;&#x7279;&#x5F81;&#xFF0C;&#x5982;&#x679C;&#x7B2C;i&#x4E2A;&#x5B9D;&#x7269;&#x88C5;&#x5165;&#x80CC;&#x5305;&#x662F;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x80CC;&#x5305;&#x603B;&#x91CD;&#x91CF;$m-w_i$&#x4E00;&#x5B9A;&#x662F;&#x95EE;&#x9898;$\lbrace a_1, a_2, \ldots, a_n \rbrace$&#x7684;&#x6700;&#x4F18;&#x89E3;&#x3002;&#x56E0;&#x6B64;&#x8BE5;&#x95EE;&#x9898;&#x5177;&#x6709;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#x3002;<br>&#x2003;&#x2003;&#x6839;&#x636E;&#x5206;&#x6790;&#x53EF;&#x77E5;&#xFF0C;&#x5224;&#x65AD;&#x7B2C;i&#x4E2A;&#x5B9D;&#x7269;&#x88C5;&#x5165;&#x91CD;&#x91CF;&#x4E3A;j&#x7684;&#x80CC;&#x5305;&#x65F6;&#x4F1A;&#x8F6C;&#x5316;&#x4E3A;&#x4E24;&#x79CD;&#x53EF;&#x80FD;&#xFF0C;&#x88C5;&#x5165;&#x6216;&#x8005;&#x4E0D;&#x88C5;&#x5165;&#xFF0C;&#x4E0D;&#x653E;&#x5165;&#x65F6;&#xFF0C;&#x95EE;&#x9898;&#x53D8;&#x4E3A;&#x524D;i-1&#x4E2A;&#x5B9D;&#x7269;&#x88C5;&#x5165;&#x91CD;&#x91CF;&#x4E3A;j&#x7684;&#x80CC;&#x5305;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x3002;&#x653E;&#x5165;&#x65F6;&#xFF0C;&#x95EE;&#x9898;&#x53D8;&#x4E3A;&#x524D;i-1&#x4E2A;&#x5B9D;&#x7269;&#x88C5;&#x5165;&#x91CD;&#x91CF;&#x4E3A;j-w<sub>i</sub>&#x7684;&#x80CC;&#x5305;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x52A0;&#x4E0A;&#x7B2C;i&#x4E2A;&#x5B9D;&#x7269;&#x7684;&#x4EF7;&#x503C;v<sub>i</sub>&#x3002;&#x5373;&#x6BD4;&#x8F83;&#x4E24;&#x8005;&#x7684;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x7528;donkey[i][j]&#x8868;&#x793A;&#x7B2C;i&#x4E2A;&#x5B9D;&#x7269;&#x88C5;&#x5165;&#x5BB9;&#x91CF;&#x4E3A;j&#x7684;&#x80CC;&#x5305;&#x91CC;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x3002;<br>$donkey[i][j] = \begin{cases} donkey[i-1][j], &amp; j&lt;w_i \ \max{donkey[i-1][j], donkey[i-1][j-w[i]]+v[i]}, &amp; j \ge w_i \end{cases}$</p><h2 id="0-1&#x80CC;&#x5305;&#x56FE;&#x89E3;"><a href="#0-1&#x80CC;&#x5305;&#x56FE;&#x89E3;" class="headerlink" title="0-1&#x80CC;&#x5305;&#x56FE;&#x89E3;"></a><font size="4">0-1&#x80CC;&#x5305;&#x56FE;&#x89E3;</font></h2><p><img src="/images/ALGORITHM/dynamic1.png" alt="1"></p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x5B9D;&#x7269;&#x6570;&#x91CF;&#x548C;&#x9A74;&#x5B50;&#x627F;&#x8F7D;&#x91CD;&#x91CF;:&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    count, weight = line.strip().split()</span><br><span class="line">    count, weight, treasure, donkey, i, j, plan = int(count), int(weight), [], [[0 for i in range(int(weight) + 1)] for j in range(int(count) + 1)], 0, 0, []</span><br><span class="line">    print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x5B9D;&#x7269;&#x7684;&#x91CD;&#x91CF;&#x548C;&#x4EF7;&#x503C;&apos;)</span><br><span class="line">    for i in range(count):</span><br><span class="line">        treasure.append([int(x) for x in sys.stdin.readline().strip().split()])</span><br><span class="line">    for i in range(1, count + 1):</span><br><span class="line">        for j in range(1, weight + 1):</span><br><span class="line">                donkey[i][j] = max(donkey[i - 1][j - treasure[i - 1][0]] + treasure[i - 1][1], donkey[i - 1][j]) if j &gt;= treasure[i - 1][0] else donkey[i - 1][j]</span><br><span class="line">    while donkey[i][j] != 0:</span><br><span class="line">        plan, i, j = [[&apos;&#x653E;&#x5165;&#x7B2C;&apos; + str(i) + &apos;&#x4E2A;&#x5B9D;&#x7269;&apos;] + [&apos;\n&apos;] + plan, i - 1, j - treasure[i - 1][0]] if donkey[i][j] != donkey[i - 1][j] else [plan, i - 1, j]</span><br><span class="line">    print(&apos;&#x65E0;&#x6CD5;&#x653E;&#x5165;&#x4EFB;&#x4F55;&#x4E00;&#x4E2A;&#x5B9D;&#x7269;&apos;) if donkey[-1][-1] == 0 else print(&apos;&apos;.join(plan) + &apos;&#x88C5;&#x5165;&#x5B9D;&#x7269;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x4E3A;:&apos;, donkey[-1][-1])</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/dynamic6.png" alt="6"></p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x6700;&#x957F;&#x516C;&#x5171;&#x5E8F;&#x5217;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x6700;&#x957F;&#x516C;&#x5171;&#x5E8F;&#x5217;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6700;&#x957F;&#x516C;&#x5171;&#x5E8F;&#x5217;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6700;&#x957F;&#x516C;&#x5171;&#x5E8F;&#x5217;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;-1"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;-1" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x7ED9;&#x5B9A;&#x4E24;&#x4E2A;&#x5E8F;&#x5217;&#xFF0C;&#x5982;&#x4F55;&#x627E;&#x51FA;&#x6700;&#x957F;&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;<br>&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;s1&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;s2</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ABCADAB # &#x5B57;&#x7B26;&#x4E32;s1</span><br><span class="line">BACDBA # &#x5B57;&#x7B26;&#x4E32;s2</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;-1"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;-1" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;&#x9996;&#x5148;&#x5206;&#x6790;&#x95EE;&#x9898;&#x662F;&#x5426;&#x5177;&#x6709;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x7684;&#x6027;&#x8D28;&#xFF0C;&#x5047;&#x8BBE;$Z_k={z_1,z_2,z_3,\ldots,z_k}$&#x662F;$X_m={x_1,x_2,x_3,\ldots,x_m}$&#x548C;$Y_n={y_1,y_2,y_3,\ldots,y_n}$&#x7684;&#x6700;&#x957F;&#x516C;&#x5171;&#x7EC4;&#x5E8F;&#x5217;&#xFF0C;&#x53EF;&#x4EE5;&#x6709;&#x4E09;&#x79CD;&#x60C5;&#x51B5;&#x8BA8;&#x8BBA;&#xFF1A;<br>&#x2003;&#x2003;(1)&#x5F53;$z_k=x_m=y_n$&#x65F6;&#xFF0C;&#x5219;$Z_k={z_1,z_2,z_3,\ldots,z_{k-1}}$&#x662F;$X_m={x_1,x_2,x_3,\ldots,x_{m-1}}$&#x548C;$Y_n={y_1,y_2,y_3,\ldots,y_{n-1}}$&#x7684;&#x6700;&#x957F;&#x516C;&#x5171;&#x7EC4;&#x5E8F;&#x5217;&#x3002;<br>&#x2003;&#x2003;(2)&#x5F53;$z_k \neq x_m,x_m \neq y_n$&#x65F6;&#xFF0C;&#x5219;$Z_k={z_1,z_2,z_3,\ldots,z_k}$&#x662F;$X_m={x_1,x_2,x_3,\ldots,x_{m-1}}$&#x548C;$Y_n={y_1,y_2,y_3,\ldots,y_n}$&#x7684;&#x6700;&#x957F;&#x516C;&#x5171;&#x7EC4;&#x5E8F;&#x5217;&#x3002;<br>&#x2003;&#x2003;(3)&#x5F53;$z_k \neq y_n,x_m \neq y_n$&#x65F6;&#xFF0C;&#x5219;$Z_k={z_1,z_2,z_3,\ldots,z_k}$&#x662F;$X_m={x_1,x_2,x_3,\ldots,x_m}$&#x548C;$Y_n={y_1,y_2,y_3,\ldots,y_{n-1}}$&#x7684;&#x6700;&#x957F;&#x516C;&#x5171;&#x7EC4;&#x5E8F;&#x5217;&#x3002;<br>&#x2003;&#x2003;&#x56E0;&#x6B64;&#x95EE;&#x9898;&#x6EE1;&#x8DB3;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#xFF0C;&#x7528;char[i][j]&#x8868;&#x793A;X<sub>i</sub>&#x548C;Y<sub>j</sub>&#x7684;&#x6700;&#x957F;&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#x957F;&#x5EA6;&#x3002;<br>$char[i][j] = \begin{cases} char[i-1][j-1]+1, &amp; x_i=y_j \ \max{char[i][j-1], char[i-1][j]}, &amp; x_i \neq y_j  \end{cases}$</p><h2 id="&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#x56FE;&#x89E3;"><a href="#&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#x56FE;&#x89E3;" class="headerlink" title="&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#x56FE;&#x89E3;"></a><font size="4">&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#x56FE;&#x89E3;</font></h2><p><img src="/images/ALGORITHM/dynamic2.png" alt="2"></p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-1"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-1" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">print(&apos;&#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;s1:&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    s1 = line.strip()</span><br><span class="line">    print(&apos;&#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;s2:&apos;)</span><br><span class="line">    s2 = sys.stdin.readline().strip()</span><br><span class="line">    s1_length, s2_length, i, j, route = len(s1), len(s2), 0, 0, &apos;&apos;</span><br><span class="line">    compare_array, route_array = [[0 for m in range(s2_length + 1)] for n in range(s1_length + 1)], [[0 for m in range(s2_length + 1)] for n in range(s1_length + 1)]</span><br><span class="line">    for i in range(1, s1_length + 1):</span><br><span class="line">        for j in range(1, s2_length + 1):</span><br><span class="line">            compare_array[i][j], route_array[i][j] = [compare_array[i - 1][j - 1] + 1, 1] if s1[i - 1] == s2[j - 1] else([compare_array[i][j - 1], 2] if compare_array[i][j - 1] &gt;= compare_array[i - 1][j] else [compare_array[i - 1][j], 3])</span><br><span class="line">    while i &gt; 0 and j &gt; 0:</span><br><span class="line">        route, i, j = [route + s1[i - 1], i - 1, j - 1] if route_array[i][j] == 1 else ([route, i, j - 1] if route_array[i][j] == 2 else [route , i - 1, j])</span><br><span class="line">    print(s1 + &apos;&#x548C;&apos; + s2 + &apos;&#x65E0;&#x516C;&#x5171;&#x5E8F;&#x5217;&apos;) if len(route) == 0 else print(s1 + &apos;&#x548C;&apos; + s2 + &apos;&#x7684;&#x6700;&#x957F;&#x516C;&#x5171;&#x5E8F;&#x5217;&#x7684;&#x957F;&#x5EA6;&#x4E3A;:&apos;, len(route), &apos;\n&apos; + s1 + &apos;&#x548C;&apos; + s2 +&apos;&#x7684;&#x6700;&#x957F;&#x516C;&#x5171;&#x5E8F;&#x5217;&#x662F;:&apos; + route[::-1])</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-1"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-1" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/dynamic4.png" alt="4"></p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x5B57;&#x7B26;&#x4E32;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x5B57;&#x7B26;&#x4E32;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x5B57;&#x7B26;&#x4E32;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x5B57;&#x7B26;&#x4E32;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;-2"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;-2" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x7ED9;&#x5B9A;&#x4E24;&#x4E2A;&#x5E8F;&#x5217;&#xFF0C;&#x5982;&#x4F55;&#x4F7F;&#x7528;&#x6700;&#x5C11;&#x7684;&#x589E;&#x52A0;&#x5B57;&#x7B26;&#xFF0C;&#x5220;&#x9664;&#x5B57;&#x7B26;&#xFF0C;&#x66FF;&#x6362;&#x5B57;&#x7B26;&#x64CD;&#x4F5C;&#xFF0C;&#x4F7F;&#x4E24;&#x4E2A;&#x5E8F;&#x5217;&#x76F8;&#x540C;&#xFF1F;<br>&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;str1&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;str2</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">family # &#x5B57;&#x7B26;&#x4E32;str1</span><br><span class="line">frame # &#x5B57;&#x7B26;&#x4E32;str2</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;-2"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;-2" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;&#x5206;&#x6790;&#x6B64;&#x9898;&#x662F;&#x5426;&#x5177;&#x6709;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#xFF0C;&#x5047;&#x8BBE;char[i][j]&#x662F;$X_i={x_1,x_2,x_3,\ldots,x_i}$&#x548C;$Y_j={y_1,y_2,y_3,\ldots,y_j}$&#x7684;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x7684;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x53EF;&#x4EE5;&#x6709;&#x4E24;&#x79CD;&#x60C5;&#x51B5;&#x8BA8;&#x8BBA;&#xFF1A;<br>&#x2003;&#x2003;(1)&#x5F53;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x6EE1;&#x8DB3;$x_i=y_j$&#x65F6;&#xFF0C;&#x5219;char[i-1][j-1]&#x662F;$X_m={x_1,x_2,x_3,\ldots,x_i}$&#x548C;$Y_n={y_1,y_2,y_3,\ldots,y_j}$&#x7684;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x3002;<br>&#x2003;&#x2003;(2)&#x5F53;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x6EE1;&#x8DB3;$x_i \neq y_j$&#x65F6;&#xFF0C;&#x5219;&#x53EF;&#x4EE5;&#x5220;&#x9664;&#x5B57;&#x7B26;x<sub>i</sub>&#x6216;&#x5220;&#x9664;&#x5B57;&#x7B26;y<sub>j</sub>&#x6216;&#x5C06;&#x5B57;&#x7B26;x<sub>i</sub>&#x66FF;&#x6362;&#x4E3A;&#x5B57;&#x7B26;y<sub>j</sub>&#xFF0C;&#x5373;&#x6EE1;&#x8DB3;&#x4E0B;&#x5217;&#x6761;&#x4EF6;$\max(char[i-1][j],char[i][j-1],char[i-1][j-1])+1$&#x662F;$X_m={x_1,x_2,x_3,\ldots,x_i}$&#x548C;$Y_n={y_1,y_2,y_3,\ldots,y_j}$&#x7684;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x3002;<br>&#x2003;&#x2003;&#x56E0;&#x6B64;&#x95EE;&#x9898;&#x6EE1;&#x8DB3;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#xFF0C;&#x5199;&#x51FA;&#x5176;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;&#x3002;<br>$char[i][j] = \begin{cases} char[i-1][j-1], &amp; x_i=y_j \ \max{char[i][j-1], char[i-1][j],char[i-1][j-1]}+1, &amp; x_i \neq y_j  \end{cases}$</p><h2 id="&#x5B57;&#x7B26;&#x4E32;&#x8DDD;&#x79BB;&#x56FE;&#x89E3;"><a href="#&#x5B57;&#x7B26;&#x4E32;&#x8DDD;&#x79BB;&#x56FE;&#x89E3;" class="headerlink" title="&#x5B57;&#x7B26;&#x4E32;&#x8DDD;&#x79BB;&#x56FE;&#x89E3;"></a><font size="4">&#x5B57;&#x7B26;&#x4E32;&#x8DDD;&#x79BB;&#x56FE;&#x89E3;</font></h2><p><img src="/images/ALGORITHM/dynamic3.png" alt="3"></p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-2"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-2" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">print(&apos;&#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;str1:&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    str1 = line.strip()</span><br><span class="line">    print(&apos;&#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;str2:&apos;)</span><br><span class="line">    str2 = sys.stdin.readline().strip()</span><br><span class="line">    str1_length, str2_length, i, j, route = len(str1), len(str2), 0 ,0, []</span><br><span class="line">    compare_array = [list(range(str2_length + 1))] + [[x] + [0] * str2_length for x in range(1,str1_length + 1)]</span><br><span class="line">    for i in range(1, str1_length + 1):</span><br><span class="line">        for j in range(1, str2_length + 1):</span><br><span class="line">            compare_array[i][j] = compare_array[i - 1][j - 1] if str1[i - 1] == str2[j - 1] else min(compare_array[i - 1][j - 1], compare_array[i][j - 1], compare_array[i - 1][j]) + 1</span><br><span class="line">    while i &gt; 0 and j &gt; 0:</span><br><span class="line">        route, i, j = [route, i - 1, j - 1] if str1[i - 1] == str2[j - 1] else ([[&apos;&#x5C06;&apos; + str1 + &apos;&#x4E2D;&apos; + str(i) + &apos;&#x5904;&#x7684;&apos; + str1[i - 1] + &apos;&#x66FF;&#x6362;&#x4E3A;&apos; + str2[j - 1]] + [&apos;\n&apos;] + route, i - 1, j - 1] if compare_array[i - 1][j - 1] + 1 == compare_array[i][j] else([[&apos;&#x5C06;&apos; + str1 + &apos;&#x4E2D;&apos; + str(i) + &apos;&#x5904;&#x63D2;&#x5165;&apos; + str2[j - 1]] + [&apos;\n&apos;] + route, i, j - 1] if compare_array[i][j - 1] + 1 == compare_array[i][j] else [[&apos;&#x5C06;&apos; + str1 + &apos;&#x4E2D;&apos; + str(i) + &apos;&#x5904;&#x7684;&apos; + str1[i - 1] + &apos;&#x5220;&#x9664;&apos;] + [&apos;\n&apos;] + route, i - 1, j]))</span><br><span class="line">    print(str1 + &apos;&#x548C;&apos; + str2 + &apos;&#x7684;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x662F;:&apos;, compare_array[-1][-1], &apos;\n&apos; + &apos;&#x5C06;&apos; + str1 + &apos;&#x8F6C;&#x6362;&#x4E3A;&apos; + str2 + &apos;&#x7684;&#x64CD;&#x4F5C;&#x4E3A;:&apos; + &apos;\n&apos; + &apos;&apos;.join(route[:-1]))</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-2"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-2" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/dynamic5.png" alt="5"></p><h1 id="&#x7B97;&#x6CD5;&#x603B;&#x7ED3;"><a href="#&#x7B97;&#x6CD5;&#x603B;&#x7ED3;" class="headerlink" title="&#x7B97;&#x6CD5;&#x603B;&#x7ED3;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x603B;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x7531;&#x4E8E;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x4E0D;&#x5C40;&#x9650;&#x4E8E;&#x773C;&#x524D;&#x7684;&#x6700;&#x4F18;&#x72B6;&#x6001;&#xFF0C;&#x800C;&#x662F;&#x8BB0;&#x5F55;&#x4E86;&#x4EE5;&#x524D;&#x7684;&#x6240;&#x6709;&#x72B6;&#x6001;&#xFF0C;&#x56E0;&#x6B64;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x5177;&#x6709;&#x5F88;&#x5F3A;&#x7684;&#x5927;&#x5C40;&#x89C2;&#xFF0C;&#x53EF;&#x4EE5;&#x8F83;&#x4E3A;&#x5BB9;&#x6613;&#x5730;&#x5F97;&#x5230;&#x5168;&#x5C40;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x5B9E;&#x9645;&#x7684;&#x751F;&#x4EA7;&#x751F;&#x6D3B;&#x4E2D;&#x4F7F;&#x7528;&#x8F83;&#x5E7F;&#x3002;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x5173;&#x952E;&#x662F;&#x5206;&#x6790;&#x95EE;&#x9898;&#x662F;&#x5426;&#x5177;&#x6709;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#xFF0C;&#x5982;&#x679C;&#x95EE;&#x9898;&#x5177;&#x6709;&#x8BE5;&#x6027;&#x8D28;&#xFF0C;&#x8BF4;&#x660E;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x6765;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#x3002;&#x7136;&#x540E;&#x662F;&#x627E;&#x5230;&#x5176;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;&#xFF0C;&#x8FD9;&#x4E5F;&#x662F;&#x6700;&#x96BE;&#x8003;&#x8651;&#x7684;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#x3002;&#x5F97;&#x5230;&#x4E86;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;&#xFF0C;&#x6B64;&#x95EE;&#x9898;&#x8FCE;&#x5203;&#x800C;&#x89E3;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Dynamic Programming&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="计算机基础知识" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="常用算法" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>贪心算法(Greedy)</title>
    <link href="https://USTCcoder.github.io/2019/07/19/algorithm%20greedy/"/>
    <id>https://USTCcoder.github.io/2019/07/19/algorithm greedy/</id>
    <published>2019-07-19T11:29:40.000Z</published>
    <updated>2019-08-07T15:58:14.589Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"><a href="#&#x539F;&#x7406;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x539F;&#x7406;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003; <strong>Greedy:&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;</strong>&#xFF0C;&#x53C8;&#x79F0;&#x8D2A;&#x5A6A;&#x7B97;&#x6CD5;&#xFF0C;&#x4EBA;&#x8981;&#x6D3B;&#x5728;&#x5F53;&#x4E0B;&#xFF0C;&#x770B;&#x6E05;&#x695A;&#x773C;&#x524D;&#xFF0C;&#x8FD9;&#x79CD;&#x601D;&#x60F3;&#x5C31;&#x662F;&#x8D2A;&#x5FC3;&#x601D;&#x60F3;&#x3002;&#x662F;&#x6307;&#x5728;&#x5BF9;&#x95EE;&#x9898;&#x6C42;&#x89E3;&#x65F6;&#xFF0C;&#x603B;&#x662F;&#x505A;&#x51FA;<strong>&#x5F53;&#x524D;&#x6700;&#x597D;</strong>&#x7684;&#x9009;&#x62E9;&#xFF0C;&#x4E0D;&#x4ECE;&#x6574;&#x4F53;&#x6700;&#x4F18;&#x4E0A;&#x52A0;&#x4EE5;&#x8003;&#x8651;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5B83;&#x671F;&#x671B;&#x901A;&#x8FC7;<strong>&#x5C40;&#x90E8;&#x6700;&#x4F18;&#x9009;&#x62E9;</strong>&#x4ECE;&#x800C;&#x5F97;&#x5230;&#x5168;&#x5C40;&#x6700;&#x4F18;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x3002;<br><a id="more"></a></p><h1 id="&#x6838;&#x5FC3;&#x601D;&#x60F3;"><a href="#&#x6838;&#x5FC3;&#x601D;&#x60F3;" class="headerlink" title="&#x6838;&#x5FC3;&#x601D;&#x60F3;"></a><font size="5" color="red">&#x6838;&#x5FC3;&#x601D;&#x60F3;</font></h1><h2 id="&#x8D2A;&#x5FC3;&#x9009;&#x62E9;"><a href="#&#x8D2A;&#x5FC3;&#x9009;&#x62E9;" class="headerlink" title="&#x8D2A;&#x5FC3;&#x9009;&#x62E9;"></a><font size="4">&#x8D2A;&#x5FC3;&#x9009;&#x62E9;</font></h2><p>&#x2003;&#x2003;&#x8D2A;&#x5FC3;&#x9009;&#x62E9;&#x6307;&#x539F;&#x95EE;&#x9898;&#x7684;&#x6574;&#x4F53;&#x6700;&#x4F18;&#x89E3;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4E00;&#x7CFB;&#x5217;&#x5C40;&#x90E8;&#x6700;&#x4F18;&#x7684;&#x9009;&#x62E9;&#x5F97;&#x5230;&#x3002;&#x5E94;&#x7528;&#x540C;&#x4E00;&#x89C4;&#x5219;&#xFF0C;&#x5C06;&#x539F;&#x95EE;&#x9898;&#x53D8;&#x4E3A;&#x4E00;&#x4E2A;&#x76F8;&#x4F3C;&#x7684;&#x4F46;&#x89C4;&#x6A21;&#x66F4;&#x5C0F;&#x7684;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x800C;&#x540E;&#x7684;&#x6BCF;&#x4E00;&#x6B65;&#x90FD;&#x662F;&#x5F53;&#x524D;&#x6700;&#x4F73;&#x7684;&#x9009;&#x62E9;&#x3002;&#x8FD9;&#x79CD;&#x9009;&#x62E9;&#x4F9D;&#x8D56;&#x4E8E;&#x5DF2;&#x505A;&#x51FA;&#x7684;&#x9009;&#x62E9;&#xFF0C;&#x4F46;&#x4E0D;&#x4F9D;&#x8D56;&#x4E8E;&#x672A;&#x505A;&#x51FA;&#x7684;&#x9009;&#x62E9;&#x3002;</p><h2 id="&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;"><a href="#&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;" class="headerlink" title="&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;"></a><font size="4">&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;</font></h2><p>&#x2003;&#x2003;&#x5F53;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x5305;&#x542B;&#x5176;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x65F6;&#xFF0C;&#x79F0;&#x6B64;&#x95EE;&#x9898;&#x5177;&#x6709;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#x3002;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#x662F;&#x8BE5;&#x95EE;&#x9898;&#x80FD;&#x5426;&#x53EF;&#x7528;&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;&#x6C42;&#x89E3;&#x7684;&#x5173;&#x952E;&#x3002;&#x5982;&#x539F;&#x95EE;&#x9898;$S=\lbrace a_1, a_2, a_3, \ldots, a_n \rbrace$,&#x901A;&#x8FC7;&#x8D2A;&#x5FC3;&#x9009;&#x62E9;&#x51FA;&#x4E00;&#x4E2A;&#x5F53;&#x524D;&#x6700;&#x4F18;&#x89E3;${a_i}$&#x4E4B;&#x540E;&#xFF0C;&#x8F6C;&#x5316;&#x4E3A;&#x6C42;&#x89E3;&#x5B50;&#x95EE;&#x9898;$S- \lbrace a_i \rbrace $&#xFF0C;&#x5982;&#x679C;&#x539F;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x5305;&#x542B;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x5219;&#x8BF4;&#x660E;&#x8BE5;&#x95EE;&#x9898;&#x6EE1;&#x8DB3;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#x3002;</p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x80CC;&#x5305;&#x95EE;&#x9898;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x80CC;&#x5305;&#x95EE;&#x9898;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x80CC;&#x5305;&#x95EE;&#x9898;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x80CC;&#x5305;&#x95EE;&#x9898;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x5047;&#x8BBE;&#x5C71;&#x6D1E;&#x91CC;&#x6709;n&#x4E2A;&#x5B9D;&#x7269;&#xFF0C;&#x6BCF;&#x79CD;&#x5B9D;&#x7269;&#x6709;&#x4E00;&#x5B9A;&#x91CD;&#x91CF;w&#x548C;&#x76F8;&#x5E94;&#x7684;&#x4EF7;&#x503C;v&#xFF0C;&#x80CC;&#x5305;&#x7684;&#x88C5;&#x8F7D;&#x80FD;&#x529B;&#x6709;&#x9650;&#xFF0C;&#x53EA;&#x80FD;&#x8FD0;&#x8D70;&#x91CD;&#x91CF;&#x4E3A;m&#x7684;&#x5B9D;&#x7269;&#xFF0C;&#x5B9D;&#x7269;&#x53EF;&#x4EE5;&#x5206;&#x5272;&#xFF0C;&#x5982;&#x4F55;&#x4F7F;&#x80CC;&#x5305;&#x8FD0;&#x8D70;&#x7269;&#x54C1;&#x7684;&#x4EF7;&#x503C;&#x6700;&#x5927;&#xFF1F;<br>&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x5148;&#x8F93;&#x5165;&#x5B9D;&#x7269;&#x7684;&#x6570;&#x91CF;n&#xFF0C;&#x548C;&#x80CC;&#x5305;&#x7684;&#x627F;&#x8F7D;&#x91CD;&#x91CF;m&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x4E00;&#x884C;&#x8F93;&#x51FA;&#x4E00;&#x4E2A;&#x5B9D;&#x7269;&#x5BF9;&#x5E94;&#x7684;&#x91CD;&#x91CF;w&#x548C;&#x4EF7;&#x503C;v(&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;)<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6 19 # &#x5B9D;&#x7269;&#x6570;n&#x548C;&#x80CC;&#x5305;&#x80FD;&#x88C5;&#x8F7D;&#x7684;&#x91CD;&#x91CF;m</span><br><span class="line">2 8 #&#x6BCF;&#x4E2A;&#x5B9D;&#x7269;&#x7684;&#x91CD;&#x91CF;w&#x548C;&#x4EF7;&#x503C;v</span><br><span class="line">6 1</span><br><span class="line">7 9</span><br><span class="line">4 3</span><br><span class="line">10 2</span><br><span class="line">3 4</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;&#x5BF9;&#x4E8E;&#x666E;&#x901A;&#x80CC;&#x5305;&#x95EE;&#x9898;&#xFF0C;&#x5B9D;&#x7269;&#x53EF;&#x4EE5;&#x5206;&#x5272;&#xFF0C;&#x5F53;&#x524D;&#x53D6;&#x5F97;&#x7684;&#x5B9D;&#x7269;&#x4E0D;&#x4F1A;&#x53D7;&#x5230;&#x540E;&#x9762;&#x5B9D;&#x7269;&#x7684;&#x5F71;&#x54CD;&#xFF0C;&#x5982;&#x679C;&#x662F;0-1&#x80CC;&#x5305;&#xFF0C;&#x5373;&#x7269;&#x54C1;&#x4E0D;&#x53EF;&#x4EE5;&#x5206;&#x5272;&#xFF0C;&#x5F53;&#x524D;&#x5B9D;&#x7269;&#x5C31;&#x4F1A;&#x53D7;&#x5230;&#x540E;&#x9762;&#x5B9D;&#x7269;&#x7684;&#x5F71;&#x54CD;&#x3002;&#x5047;&#x8BBE;&#x8BE5;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x4E3A;S&#xFF0C;&#x62FF;&#x8D70;&#x5F53;&#x524D;&#x6700;&#x4F18;&#x89E3;&#x7B2C;i&#x4E2A;&#x5B9D;&#x7269;&#xFF0C;&#x73B0;&#x5728;&#x8F6C;&#x6362;&#x6210;&#x4E00;&#x4E2A;&#x65B0;&#x95EE;&#x9898;&#xFF0C;&#x6709;n-1&#x4E2A;&#x5B9D;&#x7269;&#xFF0C;&#x80CC;&#x5305;&#x91CD;&#x91CF;&#x4E3A;$m-w_i$&#xFF0C;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x6700;&#x4F18;&#x89E3;&#x4E3A;$S- \lbrace a_i \rbrace$&#x3002;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;&#x3002;<br>&#x2003;&#x2003;&#x8BE5;&#x95EE;&#x9898;&#x6709;&#x4E09;&#x4E2A;&#x601D;&#x8003;&#x65B9;&#x5411;<br>(1)&#x9009;&#x62E9;&#x4EF7;&#x503C;&#x6700;&#x5927;&#x7684;&#x5B9D;&#x7269;&#x88C5;&#x5165;&#x80CC;&#x5305;<br>(2)&#x9009;&#x62E9;&#x91CD;&#x91CF;&#x6700;&#x5C0F;&#x7684;&#x5B9D;&#x7269;&#x88C5;&#x5165;&#x80CC;&#x5305;<br>(3)&#x9009;&#x62E9;&#x5355;&#x4F4D;&#x91CD;&#x91CF;&#x4EF7;&#x503C;&#x6700;&#x5927;&#x7684;&#x5B9D;&#x7269;&#x88C5;&#x5165;&#x80CC;&#x5305;<br>&#x9009;&#x62E9;&#x4EF7;&#x503C;&#x6700;&#x5927;&#x7684;&#x5B9D;&#x7269;&#xFF0C;&#x5982;&#x679C;&#x91CD;&#x91CF;&#x4E5F;&#x5F88;&#x5927;&#xFF0C;&#x5219;&#x4E0D;&#x662F;&#x6700;&#x4F18;&#x89E3;&#xFF1B;&#x9009;&#x62E9;&#x91CD;&#x91CF;&#x6700;&#x5C0F;&#x7684;&#x5B9D;&#x7269;&#xFF0C;&#x5982;&#x679C;&#x4EF7;&#x503C;&#x4E5F;&#x5F88;&#x5C0F;&#xFF0C;&#x5219;&#x4E5F;&#x4E0D;&#x662F;&#x6700;&#x4F18;&#x89E3;&#xFF1B;&#x56E0;&#x6B64;&#x5E94;&#x8BE5;&#x9009;&#x62E9;&#x5355;&#x4F4D;&#x91CD;&#x91CF;&#x4EF7;&#x503C;&#x6700;&#x5927;&#x7684;&#x5B9D;&#x7269;&#x3002;</p><h2 id="&#x6D41;&#x7A0B;&#x56FE;"><a href="#&#x6D41;&#x7A0B;&#x56FE;" class="headerlink" title="&#x6D41;&#x7A0B;&#x56FE;"></a><font size="4">&#x6D41;&#x7A0B;&#x56FE;</font></h2><p><img src="/images/ALGORITHM/greedy8.png" alt="8"></p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x5B9D;&#x7269;&#x6570;&#x91CF;&#x548C;&#x9A74;&#x5B50;&#x627F;&#x8F7D;&#x91CD;&#x91CF;:&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    count, weight = line.strip().split()</span><br><span class="line">    count, weight, treasure, price, plan = int(count), float(weight), [], 0, &apos;&apos;</span><br><span class="line">    print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x5B9D;&#x7269;&#x7684;&#x91CD;&#x91CF;&#x548C;&#x4EF7;&#x503C;&apos;)</span><br><span class="line">    for i in range(count):</span><br><span class="line">        tmp = [float(x) for x in sys.stdin.readline().strip().split()]</span><br><span class="line">        treasure.append([i + 1] + tmp + [tmp[1] / tmp[0]])</span><br><span class="line">    treasure.sort(key=lambda x: (-x[3]))</span><br><span class="line">    for i in treasure:</span><br><span class="line">        if weight &gt; i[1]:</span><br><span class="line">            price, weight, plan = price + i[2], weight - i[1], plan + &apos;&#x5C06;&#x7B2C;&apos; + str(i[0]) +&apos;&#x4E2A;&#x5B9D;&#x7269;&#x5168;&#x90E8;&#x88C5;&#x5165;\n&apos;</span><br><span class="line">        else:</span><br><span class="line">            price, plan = price + weight * i[3], plan + &apos;&#x5269;&#x4F59;&#x91CD;&#x91CF;&#x5168;&#x90E8;&#x88C5;&#x5165;&#x7B2C;&apos; + str(i[0]) + &apos;&#x4E2A;&#x5B9D;&#x7269;\n&apos;</span><br><span class="line">            break</span><br><span class="line">    print(&apos;&#x6700;&#x4F18;&#x7684;&#x65B9;&#x6848;&#x4E3A;:\n&apos; + plan + &apos;&#x88C5;&#x5165;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x4E3A;:&apos;, price)</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/greedy1.png" alt="1"></p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x6700;&#x77ED;&#x8DEF;&#x5F84;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x6700;&#x77ED;&#x8DEF;&#x5F84;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6700;&#x77ED;&#x8DEF;&#x5F84;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6700;&#x77ED;&#x8DEF;&#x5F84;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;-1"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;-1" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x73B0;&#x6709;&#x4E00;&#x4E2A;&#x666F;&#x70B9;&#x5730;&#x56FE;&#xFF0C;&#x6709;n&#x4E2A;&#x57CE;&#x5E02;&#xFF0C;m&#x6761;&#x8DEF;&#x5F84;(&#x8DEF;&#x5F84;&#x662F;&#x6709;&#x5411;&#x7684;&#xFF0C;&#x5373;&#x6765;&#x56DE;&#x7684;&#x8DDD;&#x79BB;&#x4E0D;&#x540C;)&#xFF0C;&#x5047;&#x8BBE;&#x4ECE;&#x67D0;&#x4E00;&#x7ED3;&#x70B9;&#x51FA;&#x53D1;&#xFF0C;&#x6C42;&#x5230;&#x5176;&#x4ED6;&#x5404;&#x4E2A;&#x7ED3;&#x70B9;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x3002;<br>&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x5148;&#x8F93;&#x5165;&#x57CE;&#x5E02;&#x6570;n&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x8F93;&#x5165;&#x603B;&#x8DEF;&#x5F84;&#x6570;m&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x4E00;&#x884C;&#x8F93;&#x5165;A&#x5E02;&#xFF0C;B&#x5E02;&#xFF0C;&#x4EE5;&#x53CA;A&#x5230;B&#x7684;&#x8DDD;&#x79BB;(&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;)&#xFF0C;&#x6700;&#x540E;&#x8F93;&#x5165;&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;&#x548C;&#x76EE;&#x7684;&#x5730;&#x4F4D;&#x7F6E;&#x3002;<br><img src="/images/ALGORITHM/greedy4.png" alt="4"><br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">5 # &#x57CE;&#x5E02;&#x6570;n</span><br><span class="line">8 # &#x8DEF;&#x5F84;&#x6570;m</span><br><span class="line">1 2 2 #&#x4ECE;1&#x53F7;&#x57CE;&#x5E02;&#x5230;2&#x53F7;&#x57CE;&#x5E02;&#x7684;&#x8DDD;&#x79BB;&#x4E3A;2</span><br><span class="line">1 3 5</span><br><span class="line">2 3 2</span><br><span class="line">2 4 6</span><br><span class="line">3 4 7</span><br><span class="line">3 5 1</span><br><span class="line">4 3 2</span><br><span class="line">4 5 4</span><br><span class="line">1 #&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;</span><br><span class="line">5 #&#x76EE;&#x7684;&#x5730;&#x4F4D;&#x7F6E;</span><br></pre></td></tr></tbody></table></figure><p></p><p><img src="/images/ALGORITHM/greedy2.png" alt="2"></p><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;-1"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;-1" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x7B97;&#x6CD5;&#x662F;1959&#x5E74;&#x7531;&#x8377;&#x5170;&#x56FE;&#x7075;&#x5956;&#x5F97;&#x4E3B;Edsger Wybe Dijkstra(&#x827E;&#x5179;&#x683C;&#xB7;&#x8FEA;&#x79D1;&#x65AF;&#x5F7B;)&#x63D0;&#x51FA;&#x7684;&#xFF0C;&#x4ECE;&#x8D77;&#x59CB;&#x70B9;&#x5F00;&#x59CB;&#xFF0C;&#x9010;&#x6E10;&#x589E;&#x52A0;&#x7ED3;&#x70B9;&#x6570;&#xFF0C;&#x4F9D;&#x6B21;&#x6C42;&#x51FA;&#x6E90;&#x70B9;&#x5230;&#x5404;&#x4E2A;&#x5B9A;&#x70B9;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#xFF0C;&#x76F4;&#x5230;&#x6C42;&#x51FA;&#x76EE;&#x6807;&#x7ED3;&#x70B9;&#x3002;<br>&#x2003;&#x2003;&#x9996;&#x5148;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;dist&#xFF0C;&#x5B58;&#x653E;&#x4ECE;&#x6E90;&#x70B9;&#x5230;&#x5404;&#x70B9;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#xFF0C;&#x5217;&#x8868;S&#xFF0C;&#x4EE3;&#x8868;&#x5DF2;&#x7ECF;&#x5305;&#x542B;&#x7684;&#x7ED3;&#x70B9;&#x6570;&#xFF0C;&#x521D;&#x59CB;&#x503C;&#x4E3A;&#x7A7A;&#x3002;S&#x4E2D;&#x7684;&#x7ED3;&#x70B9;&#xFF0C;&#x4EE3;&#x8868;&#x4ECE;&#x6E90;&#x70B9;&#x5230;&#x8BE5;&#x70B9;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x5DF2;&#x786E;&#x5B9A;&#x3002;&#x5217;&#x8868;V,&#x4EE3;&#x8868;&#x6CA1;&#x6709;&#x5305;&#x542B;&#x7684;&#x7ED3;&#x70B9;&#x6570;&#xFF0C;&#x521D;&#x59CB;&#x503C;&#x4E3A;&#x5168;&#x90E8;&#x7ED3;&#x70B9;&#xFF0C;&#x7136;&#x540E;&#x4ECE;&#x8FD9;&#x4E9B;&#x7ED3;&#x70B9;&#x4E2D;&#x5BFB;&#x627E;&#x8DDD;&#x79BB;&#x6E90;&#x70B9;&#x6700;&#x8FD1;&#x7684;&#x7ED3;&#x70B9;(&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;)&#x3002;&#x5047;&#x5982;&#x627E;&#x5230;&#x67D0;&#x4E00;&#x70B9;i&#xFF0C;&#x8BF4;&#x660E;&#x4ECE;&#x6E90;&#x70B9;&#x901A;&#x8FC7;S&#xFF0C;&#x5230;&#x8FBE;i&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x4E3A;dist[i]&#xFF0C;&#x5C06;i&#x52A0;&#x5165;S&#xFF0C;&#x5E76;&#x4ECE;V&#x4E2D;&#x5254;&#x9664;&#x3002;&#x66F4;&#x65B0;V&#x4E2D;&#x5176;&#x4F59;&#x7684;&#x70B9;&#x5230;&#x6E90;&#x70B9;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#xFF0C;&#x5373;&#x68C0;&#x67E5;&#x5176;&#x4F59;&#x5404;&#x70B9;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;i&#x70B9;&#x5230;&#x8FBE;&#x6E90;&#x70B9;&#x3002;</p><h2 id="&#x6D41;&#x7A0B;&#x56FE;-1"><a href="#&#x6D41;&#x7A0B;&#x56FE;-1" class="headerlink" title="&#x6D41;&#x7A0B;&#x56FE;"></a><font size="4">&#x6D41;&#x7A0B;&#x56FE;</font></h2><p><img src="/images/ALGORITHM/greedy9.png" alt="9"></p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-1"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-1" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x57CE;&#x5E02;&#x4E2A;&#x6570;:&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    num_city = int(line.strip().split()[0])</span><br><span class="line">    print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x8DEF;&#x7EBF;&#x4E2A;&#x6570;:&apos;)</span><br><span class="line">    num_route = int(sys.stdin.readline().strip().split()[0])</span><br><span class="line">    print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x57CE;&#x5E02;&#x4E4B;&#x95F4;&#x7684;&#x8DEF;&#x7EBF;&#x53CA;&#x8DDD;&#x79BB;&apos;)</span><br><span class="line">    map = [[65535*(i!=j) for i in range(num_city+1)] for j in range(num_city+1)]</span><br><span class="line">    for i in range(num_route):</span><br><span class="line">        begin, end, length = [int(x) for x in sys.stdin.readline().strip().split()]</span><br><span class="line">        map[begin][end] = length</span><br><span class="line">    print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x5C0F;&#x660E;&#x6240;&#x5728;&#x7684;&#x4F4D;&#x7F6E;:&apos;)</span><br><span class="line">    begin = int(sys.stdin.readline().strip().split()[0])</span><br><span class="line">    print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x7EC8;&#x70B9;&#x7684;&#x4F4D;&#x7F6E;:&apos;)</span><br><span class="line">    end = int(sys.stdin.readline().strip().split()[0])</span><br><span class="line">    dist, route = [0 | x for x in map[begin]], [0 for i in range(num_city+1)]</span><br><span class="line">    un_used = list(range(num_city+1))</span><br><span class="line">    while len(un_used) &gt; 1:</span><br><span class="line">        tmp_loc, tmp_length = [0, 65535]</span><br><span class="line">        for i in un_used[1:]:</span><br><span class="line">            tmp_length, tmp_loc = [dist[i], i] if dist[i] &lt; tmp_length else [tmp_length, tmp_loc]</span><br><span class="line">        if tmp_loc == end or tmp_loc == 0:</span><br><span class="line">            break</span><br><span class="line">        un_used.remove(tmp_loc)</span><br><span class="line">        for j in un_used[1:]:</span><br><span class="line">            dist[j], route[j] = [dist[tmp_loc] + map[tmp_loc][j], tmp_loc] if dist[tmp_loc] + map[tmp_loc][j] &lt; dist[j] else [dist[j], route[j]]</span><br><span class="line">    if route[end] == 0:</span><br><span class="line">        print(&apos;&#x76EE;&#x7684;&#x5730;&#x4E0D;&#x53EF;&#x8FBE;&apos;)</span><br><span class="line">    else:</span><br><span class="line">        terminal, res = end, str(end)</span><br><span class="line">        while route[terminal] != 0:</span><br><span class="line">            terminal = route[terminal]</span><br><span class="line">            res = str(terminal) + &apos;-&gt;&apos; + res</span><br><span class="line">        print(&apos;&#x6240;&#x8D70;&#x8FC7;&#x7684;&#x8DEF;&#x5F84;&#x4E3A;:&apos; + str(begin) + &apos;-&gt;&apos; + res + &apos; &#x6700;&#x77ED;&#x8DDD;&#x79BB;&#x4E3A;:&apos;,dist[end])</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-1"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-1" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/greedy3.png" alt="3"></p><h1 id="&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;"><a href="#&#x7ECF;&#x5178;&#x4F8B;&#x9898;-&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;" class="headerlink" title="&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;)"></a><font size="5" color="red">&#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;)</font></h1><h2 id="&#x95EE;&#x9898;&#x63CF;&#x8FF0;-2"><a href="#&#x95EE;&#x9898;&#x63CF;&#x8FF0;-2" class="headerlink" title="&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a><font size="4">&#x95EE;&#x9898;&#x63CF;&#x8FF0;</font></h2><p>&#x2003;&#x2003;&#x73B0;&#x6709;&#x4E00;&#x4E2A;&#x5B66;&#x6821;&#xFF0C;&#x4E0B;&#x9762;&#x6709;n&#x4E2A;&#x5B66;&#x9662;&#xFF0C;m&#x6761;&#x8DEF;&#x7ECF;(&#x8DEF;&#x5F84;&#x662F;&#x65E0;&#x5411;&#x7684;&#xFF0C;&#x5373;&#x6765;&#x56DE;&#x7684;&#x8DDD;&#x79BB;&#x76F8;&#x540C;)&#x73B0;&#x5728;&#x8BBE;&#x8BA1;&#x4E00;&#x6761;&#x7F51;&#x7EDC;&#x5E03;&#x7EBF;&#xFF0C;&#x5C06;&#x5404;&#x4E2A;&#x5B66;&#x9662;&#x8054;&#x901A;&#x8D77;&#x6765;&#xFF0C;&#x95EE;&#x5982;&#x4F55;&#x8BBE;&#x8BA1;&#x53EF;&#x4EE5;&#x4F7F;&#x8D39;&#x7528;&#x6700;&#x5C11;&#x3002;<br>&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x5148;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x6570;n&#x548C;&#x8FB9;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x4E00;&#x884C;&#x8F93;&#x5165;A&#xFF0C;B&#xFF0C;&#x4EE5;&#x53CA;A&#x5230;B&#x7684;&#x8DDD;&#x79BB;(&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;)&#xFF0C;&#x6700;&#x540E;&#x8F93;&#x5165;&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;&#x3002;</p><p><img src="/images/ALGORITHM/greedy5.png" alt="5"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">7 12 #&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x6570;&#x548C;&#x8FB9;&#x6570;</span><br><span class="line">1 2 23 # &#x4ECE;1&#x53F7;&#x5B66;&#x9662;&#x5230;2&#x53F7;&#x5B66;&#x9662;&#x7684;&#x8DDD;&#x79BB;&#x4E3A;23</span><br><span class="line">1 6 28</span><br><span class="line">1 7 36</span><br><span class="line">2 3 20</span><br><span class="line">2 7 1</span><br><span class="line">3 4 15</span><br><span class="line">3 7 4</span><br><span class="line">4 5 3</span><br><span class="line">4 7 9</span><br><span class="line">5 6 17</span><br><span class="line">5 7 16</span><br><span class="line">6 7 25</span><br><span class="line">1 #&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/ALGORITHM/greedy6.png" alt="6"></p><h2 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;-2"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;-2" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a><font size="4">&#x7B97;&#x6CD5;&#x5206;&#x6790;</font></h2><p>&#x2003;&#x2003;&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;&#x7B97;&#x6CD5;&#x662F;1957&#x5E74;&#x7531;Robert C. Prim(&#x666E;&#x91CC;&#x59C6;)&#x63D0;&#x51FA;&#x7684;&#xFF0C;&#x548C;dijkstra&#x7B97;&#x6CD5;&#x7C7B;&#x4F3C;&#xFF0C;&#x4ECE;&#x8D77;&#x59CB;&#x70B9;&#x5F00;&#x59CB;&#xFF0C;&#x9010;&#x6E10;&#x589E;&#x52A0;&#x7ED3;&#x70B9;&#x6570;&#xFF0C;&#x4F9D;&#x6B21;&#x6C42;&#x51FA;&#x6BCF;&#x4E00;&#x6B65;&#x7684;&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;&#xFF0C;&#x76F4;&#x5230;&#x5305;&#x542B;&#x6240;&#x6709;&#x7ED3;&#x70B9;&#x3002;<br>&#x2003;&#x2003;&#x9996;&#x5148;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x5217;&#x8868;S&#xFF0C;&#x4EE3;&#x8868;&#x5DF2;&#x7ECF;&#x5305;&#x542B;&#x7684;&#x7ED3;&#x70B9;&#x6570;&#xFF0C;&#x521D;&#x59CB;&#x503C;&#x4E3A;&#x7A7A;&#x3002;S&#x4E2D;&#x7684;&#x7ED3;&#x70B9;&#xFF0C;&#x4EE3;&#x8868;&#x4ECE;&#x6E90;&#x70B9;&#x5230;&#x8BE5;&#x70B9;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x5DF2;&#x786E;&#x5B9A;&#x3002;&#x5217;&#x8868;V,&#x4EE3;&#x8868;&#x6CA1;&#x6709;&#x5305;&#x542B;&#x7684;&#x7ED3;&#x70B9;&#x6570;&#xFF0C;&#x521D;&#x59CB;&#x503C;&#x4E3A;&#x5168;&#x90E8;&#x7ED3;&#x70B9;&#x3002;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;cost&#xFF0C;&#x5B58;&#x653E;&#x4ECE;V&#x4E2D;&#x7ED3;&#x70B9;&#x5230;S&#x4E2D;&#x6700;&#x8FD1;&#x90BB;&#x70B9;&#x7684;&#x8DDD;&#x79BB;&#xFF0C;&#x7136;&#x540E;&#x4ECE;&#x8FD9;&#x4E9B;&#x8DDD;&#x79BB;&#x4E2D;&#x5BFB;&#x627E;&#x6700;&#x77ED;&#x7684;&#x8DDD;&#x79BB;(&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;)&#x3002;&#x5047;&#x5982;&#x627E;&#x5230;&#x67D0;&#x4E00;&#x70B9;i&#xFF0C;&#x5C06;i&#x52A0;&#x5165;S&#x4E2D;&#xFF0C;&#x8BF4;&#x660E;&#x6B64;&#x65F6;S&#x662F;&#x6700;&#x5C0F;&#x7684;&#x751F;&#x6210;&#x6811;&#xFF0C;&#x5E76;&#x5C06;i&#x4ECE;V&#x4E2D;&#x5254;&#x9664;&#x3002;&#x66F4;&#x65B0;V&#x4E2D;&#x5176;&#x4F59;&#x7684;&#x7ED3;&#x70B9;&#x901A;&#x8FC7;i&#x7ED3;&#x70B9;&#x5230;&#x8FBE;S&#x4E2D;&#x7ED3;&#x70B9;&#x7684;&#x6700;&#x8FD1;&#x90BB;&#x7684;&#x8DEF;&#x5F84;&#x3002;</p><h2 id="&#x6D41;&#x7A0B;&#x56FE;-2"><a href="#&#x6D41;&#x7A0B;&#x56FE;-2" class="headerlink" title="&#x6D41;&#x7A0B;&#x56FE;"></a><font size="4">&#x6D41;&#x7A0B;&#x56FE;</font></h2><p><img src="/images/ALGORITHM/greedy10.png" alt="10"></p><h2 id="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-2"><a href="#python&#x4EE3;&#x7801;&#x5B9E;&#x6218;-2" class="headerlink" title="python&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="4">python&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">print(&apos;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x6570;&#x548C;&#x8FB9;&#x6570;&apos;)</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    num_node, num_side = [int(x) for x in line.strip().split()]</span><br><span class="line">    map_node = [[65535*(i!=j) for i in range(num_node + 1)] for j in range(num_node + 1)]</span><br><span class="line">    print(&apos;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x53CA;&#x4E4B;&#x95F4;&#x7684;&#x8FB9;&#x503C;&apos;)</span><br><span class="line">    for i in range(num_side):</span><br><span class="line">        begin, end, weight = [int(x) for x in sys.stdin.readline().strip().split()]</span><br><span class="line">        map_node[begin][end], map_node[end][begin] = weight, weight</span><br><span class="line">    print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x8D77;&#x59CB;&#x7ED3;&#x70B9;&apos;)</span><br><span class="line">    begin_node = int(sys.stdin.readline().strip().split()[0])</span><br><span class="line">    un_used, low_cost, close_node = list(range(num_node + 1)), [0 | x for x in map_node[begin_node]], [0 for i in range(num_node + 1)]</span><br><span class="line">    while len(un_used) &gt; 1:</span><br><span class="line">        tmp_loc, tmp_length = 0, 65535</span><br><span class="line">        for i in un_used[1:]:</span><br><span class="line">            tmp_loc, tmp_length = [i, low_cost[i]] if low_cost[i] &lt; tmp_length else [tmp_loc, tmp_length]</span><br><span class="line">        if tmp_loc == 0:</span><br><span class="line">            break</span><br><span class="line">        un_used.remove(tmp_loc)</span><br><span class="line">        for i in un_used[1:]:</span><br><span class="line">            low_cost[i], close_node[i] = [map_node[tmp_loc][i], tmp_loc] if map_node[tmp_loc][i] &lt; low_cost[i] else [low_cost[i], close_node[i]]</span><br><span class="line">    if len(un_used) &gt; 1:</span><br><span class="line">        print(&apos;&#x65E0;&#x6CD5;&#x5C06;&#x6240;&#x6709;&#x7684;&#x8FB9;&#x8FDE;&#x63A5;&apos;)</span><br><span class="line">    else:</span><br><span class="line">        for i in range(1,len(close_node)):</span><br><span class="line">            if i == begin_node:</span><br><span class="line">                continue</span><br><span class="line">            print(str(begin_node) + &apos;-&gt;&apos; + str(i)) if close_node[i] == 0 else print(str(close_node[i]) + &apos;-&gt;&apos; + str(i))</span><br><span class="line">        print(&apos;&#x6700;&#x5C0F;&#x7684;&#x82B1;&#x8D39;&#x4E3A;:&apos; + str(sum(low_cost[1:])))</span><br></pre></td></tr></tbody></table></figure><h2 id="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-2"><a href="#&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;-2" class="headerlink" title="&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;"></a><font size="4">&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C;</font></h2><p><img src="/images/ALGORITHM/greedy7.png" alt="7"></p><h1 id="&#x7B97;&#x6CD5;&#x603B;&#x7ED3;"><a href="#&#x7B97;&#x6CD5;&#x603B;&#x7ED3;" class="headerlink" title="&#x7B97;&#x6CD5;&#x603B;&#x7ED3;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x603B;&#x7ED3;</font></h1><p>&#x2003;&#x2003;&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;&#x76F8;&#x5BF9;&#x7B80;&#x5355;&#xFF0C;&#x4EE3;&#x7801;&#x6613;&#x4E8E;&#x5B9E;&#x73B0;&#x3002;&#x4F46;&#x662F;&#x7531;&#x4E8E;&#x5176;&#x53EA;&#x5173;&#x6CE8;&#x4E8E;&#x5F53;&#x524D;&#x7684;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x5F88;&#x96BE;&#x5F97;&#x5230;&#x5168;&#x5C40;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x4E0D;&#x7B26;&#x5408;&#x4EBA;&#x7C7B;&#x7684;&#x601D;&#x7EF4;&#x4E60;&#x60EF;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x65E5;&#x5E38;&#x751F;&#x6D3B;&#x4E2D;&#xFF0C;&#x5F88;&#x5C11;&#x89C1;&#x5230;&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;&#x5904;&#x7406;&#x7684;&#x95EE;&#x9898;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Greedy&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="计算机基础知识" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="常用算法" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>LMSE(Least Mean Square Error)</title>
    <link href="https://USTCcoder.github.io/2019/07/05/classfication%20LMSE/"/>
    <id>https://USTCcoder.github.io/2019/07/05/classfication LMSE/</id>
    <published>2019-07-05T00:25:20.000Z</published>
    <updated>2019-08-07T15:53:56.754Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x6700;&#x5C0F;&#x5E73;&#x65B9;&#x8BEF;&#x5DEE;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x89E3;&#x8BFB;"><a href="#&#x539F;&#x7406;&#x89E3;&#x8BFB;" class="headerlink" title="&#x539F;&#x7406;&#x89E3;&#x8BFB;"></a><font size="5" color="red">&#x539F;&#x7406;&#x89E3;&#x8BFB;</font></h1><p>&#x2003;&#x2003;&#x6700;&#x5C0F;&#x5E73;&#x65B9;&#x8BEF;&#x5DEE;(LMSE):&#x7531;Ho-kashyap&#x63D0;&#x51FA;&#xFF0C;&#x6545;&#x53C8;&#x79F0;&#x4E3A;HK&#x7B97;&#x6CD5;.&#x662F;&#x4E00;&#x79CD;&#x57FA;&#x672C;&#x5206;&#x7C7B;&#x65B9;&#x6CD5;&#xFF0C;&#x7ED9;&#x5B9A;&#x6D4B;&#x8BD5;&#x5B9E;&#x4F8B;&#xFF0C;&#x57FA;&#x4E8E;<strong>&#x67D0;&#x79CD;&#x8DDD;&#x79BB;&#x5EA6;&#x91CF;</strong>&#x627E;&#x51FA;&#x8BAD;&#x7EC3;&#x96C6;&#x4E2D;&#x4E0E;&#x5176;<strong>&#x6700;&#x9760;&#x8FD1;&#x7684;k&#x4E2A;</strong>&#x5B9E;&#x4F8B;&#x70B9;&#xFF0C;&#x7136;&#x540E;&#x57FA;&#x4E8E;&#x8FD9;k&#x4E2A;&#x6700;&#x8FD1;&#x90BB;&#x7684;&#x4FE1;&#x606F;&#x4F7F;&#x7528;<strong>&#x6295;&#x7968;&#x6CD5;</strong>&#xFF0C;&#x5373;&#x9009;&#x62E9;&#x8FD9;k&#x4E2A;&#x5B9E;&#x4F8B;&#x4E2D;<strong>&#x51FA;&#x73B0;&#x6700;&#x591A;</strong>&#x7684;&#x6807;&#x8BB0;&#x7C7B;&#x522B;&#x4F5C;&#x4E3A;&#x5206;&#x7C7B;&#x7ED3;&#x679C;&#x3002;<br><a id="more"></a></p><h1 id="&#x6838;&#x5FC3;&#x601D;&#x60F3;"><a href="#&#x6838;&#x5FC3;&#x601D;&#x60F3;" class="headerlink" title="&#x6838;&#x5FC3;&#x601D;&#x60F3;"></a><font size="5" color="red">&#x6838;&#x5FC3;&#x601D;&#x60F3;</font></h1><h2 id="&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;"><a href="#&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;" class="headerlink" title="&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;"></a><font size="4">&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;</font></h2><p>&#x2003;&#x2003;<font size="4">1. &#x6B27;&#x5F0F;&#x8DDD;&#x79BB;(Euclidean Distance)</font><br>$$L_2(x_i,x_j)=\sqrt{\displaystyle \sum_{k=1}^n ({x_i}^{(k)}-{x_j}^{(k)})^2}$$</p><p>&#x2003;&#x2003;<font size="4">2. &#x66FC;&#x54C8;&#x987F;&#x8DDD;&#x79BB;(Manhattan distance)</font><br>$$L_1(x_i,x_j)=\displaystyle \sum_{k=1}^n \lvert{x_i}^{(k)}-{x_j}^{(k)} \rvert$$</p><p>&#x2003;&#x2003;<font size="4">3.&#x4F59;&#x5F26;&#x8DDD;&#x79BB;(Cosine Distance)</font><br>$$L_{cos}(x_i,x_j)=1-\frac{x_i \cdot x_j}{\lVert x_i \rVert_2 \ \lVert x_j \rVert_2}$$</p><h2 id="K&#x503C;&#x7684;&#x9009;&#x62E9;"><a href="#K&#x503C;&#x7684;&#x9009;&#x62E9;" class="headerlink" title="K&#x503C;&#x7684;&#x9009;&#x62E9;"></a><font size="4">K&#x503C;&#x7684;&#x9009;&#x62E9;</font></h2><p>&#x2003;&#x2003;K&#x503C;&#x7684;&#x9009;&#x62E9;&#x4F1A;&#x5BF9;K&#x8FD1;&#x90BB;&#x6CD5;&#x7684;&#x7ED3;&#x679C;&#x4EA7;&#x751F;&#x91CD;&#x5927;&#x5F71;&#x54CD;&#xFF0C;&#x5728;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;k&#x503C;&#x4E00;&#x822C;&#x53D6;&#x4E00;&#x4E2A;&#x6BD4;&#x8F83;&#x5C0F;&#x7684;&#x6570;&#x503C;&#xFF0C;&#x901A;&#x5E38;&#x91C7;&#x7528;&#x4EA4;&#x53C9;&#x9A8C;&#x8BC1;&#x6CD5;&#x6765;&#x9009;&#x53D6;&#x6700;&#x4F18;&#x7684;k&#x503C;&#x3002;<br>&#x2003;&#x2003;K=1&#x65F6;K&#x8FD1;&#x90BB;&#x7B97;&#x6CD5;&#x9000;&#x5316;&#x6210;&#x6700;&#x8FD1;&#x90BB;&#xFF0C;&#x5373;&#x6570;&#x636E;&#x7684;&#x7C7B;&#x522B;&#x4E3A;&#x8DDD;&#x79BB;&#x6700;&#x8FD1;&#x7684;&#x6837;&#x672C;&#x7684;&#x7C7B;&#x522B;&#x3002;</p><h1 id="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"><a href="#&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;</font></h1><p><img src="/images/MACHINE/knn.png" alt="KNN"></p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><h2 id="KNN-main-m"><a href="#KNN-main-m" class="headerlink" title="KNN_main.m"></a>KNN_main.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">%&#x7C7B;&#x522B;&#x6570;&#x76EE;&#xFF0C;&#x8BF7;&#x8F93;&#x5165;&#x5927;&#x4E8E;1&#x7684;&#x6570;</span><br><span class="line">class_num=2;</span><br><span class="line">%k&#x8FD1;&#x90BB;&#x6570;&#x76EE;</span><br><span class="line">knn=3;</span><br><span class="line">%&#x8BAD;&#x7EC3;&#x96C6;&#x6837;&#x672C;</span><br><span class="line">train_x=[0.7,0.8,0.1,0.4,0.2;...</span><br><span class="line">     0.5,0.6,0.1,0.8,0.2];</span><br><span class="line">train_y=[1,1,2,1,2];</span><br><span class="line">%&#x7279;&#x5F81;&#x6570;&#x76EE;</span><br><span class="line">feat_num=size(train_x,1);</span><br><span class="line">%&#x6D4B;&#x8BD5;&#x96C6;&#x6837;&#x672C;</span><br><span class="line">test_x=[rand(1,50);rand(1,50)];</span><br><span class="line">%&#x8BAD;&#x7EC3;&#x96C6;&#x6837;&#x672C;&#x6570;</span><br><span class="line">train_num=size(train_x,2);</span><br><span class="line">%&#x6D4B;&#x8BD5;&#x96C6;&#x6837;&#x672C;&#x6570;</span><br><span class="line">test_num=size(test_x,2);</span><br><span class="line">%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1</span><br><span class="line">train_x_scale=zeros(size(train_x));</span><br><span class="line">test_x_scale=zeros(size(test_x));</span><br><span class="line">for i=1:feat_num</span><br><span class="line">    train_x_scale(i,:)=(train_x(i,:)-min(train_x(i,:)))/(max(train_x(i,:))-min(train_x(i,:)));</span><br><span class="line">    test_x_scale(i,:)=(test_x(i,:)-min(train_x(i,:)))/(max(train_x(i,:))-min(train_x(i,:)));</span><br><span class="line">end</span><br><span class="line">%&#x5982;&#x679C;knn&#x5927;&#x4E8E;&#x6837;&#x672C;&#x6570;&#xFF0C;&#x5219;&#x65E0;&#x6CD5;&#x5224;&#x522B;</span><br><span class="line">if knn&gt;train_num</span><br><span class="line">    disp(&apos;Error&apos;);</span><br><span class="line">else</span><br><span class="line">    test_y=KNN_classify(train_x_scale,train_y,test_x_scale,train_num,test_num,knn);</span><br><span class="line">    %&#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A;</span><br><span class="line">    if feat_num==2</span><br><span class="line">        KNN_display(train_x,train_y,test_x,test_y,train_num,test_num,class_num);</span><br><span class="line">    else</span><br><span class="line">        disp(&apos;The Feature Is Not Two-Dimensional&apos;);</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="KNN-classify-m"><a href="#KNN-classify-m" class="headerlink" title="KNN_classify.m"></a>KNN_classify.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function test_y=KNN_classify(train_x_scale,train_y,test_x_scale,train_num,test_num,knn)</span><br><span class="line">test_y=zeros(1,test_num);</span><br><span class="line">distance=zeros(test_num,train_num);</span><br><span class="line">for i=1:test_num</span><br><span class="line">    %distance(i,j)&#x4EE3;&#x8868;&#x7B2C;i&#x4E2A;&#x6D4B;&#x8BD5;&#x96C6;&#x5230;&#x7B2C;j&#x4E2A;&#x8BAD;&#x7EC3;&#x96C6;&#x7684;&#x8DDD;&#x79BB;</span><br><span class="line">    distance(i,:)=sum((train_x_scale-repmat(test_x_scale(:,i),1,train_num)).^2);</span><br><span class="line">    temp=sort(distance(i,:));</span><br><span class="line">    %&#x627E;&#x5230;&#x6700;&#x8FD1;&#x7684;knn&#x4E2A;&#x6570;&#x636E;</span><br><span class="line">    tem=tabulate(train_y(distance(i,:)&lt;=temp(knn)));</span><br><span class="line">    %&#x627E;&#x5230;&#x6700;&#x8FD1;&#x7684;&#x6570;&#x636E;&#x4E2D;&#x6700;&#x591A;&#x7684;&#x7C7B;&#x522B;</span><br><span class="line">    test_y(i)=tem(find(tem(:,2)==max(tem(:,2)),1),1);</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="KNN-display-m"><a href="#KNN-display-m" class="headerlink" title="KNN_display.m"></a>KNN_display.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function KNN_display(train_x,train_y,test_x,test_y,train_num,test_num,class_num)</span><br><span class="line">hold on;</span><br><span class="line">color_bar=zeros(class_num,3);</span><br><span class="line">for i=1:class_num</span><br><span class="line">    color_bar(i,:)=[rand(1),rand(1),rand(1)];</span><br><span class="line">end</span><br><span class="line">%&#x753B;&#x51FA;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#xFF0C;&#x7528;*&#x8868;&#x793A;</span><br><span class="line">for i=1:train_num</span><br><span class="line">    plot(train_x(1,i),train_x(2,i),&apos;color&apos;,color_bar(train_y(i),:),&apos;marker&apos;,&apos;*&apos;);</span><br><span class="line">end</span><br><span class="line">%&#x753B;&#x51FA;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#xFF0C;&#x7528;o&#x8868;&#x793A;</span><br><span class="line">for j=1:test_num</span><br><span class="line">    plot(test_x(1,j),test_x(2,j),&apos;color&apos;,color_bar(test_y(j),:),&apos;marker&apos;,&apos;o&apos;);</span><br><span class="line">end</span><br><span class="line">hold off;</span><br></pre></td></tr></tbody></table></figure><p><br><br></p><h1 id="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"><a href="#&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;" class="headerlink" title="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"></a><font size="5" color="red">&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;</font></h1><p><img src="/images/MACHINE/knn1.png" alt="KNN"></p><h1 id="KNN&#x4F18;&#x7F3A;&#x70B9;"><a href="#KNN&#x4F18;&#x7F3A;&#x70B9;" class="headerlink" title="KNN&#x4F18;&#x7F3A;&#x70B9;"></a><font size="5" color="red">KNN&#x4F18;&#x7F3A;&#x70B9;</font></h1><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x65E0;&#x9700;&#x53C2;&#x6570;&#x4F30;&#x8BA1;&#xFF0C;&#x65E0;&#x9700;&#x8BAD;&#x7EC3;</li><li>&#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x6613;&#x4E8E;&#x7406;&#x89E3;&#x548C;&#x5B9E;&#x73B0;</li><li>&#x9002;&#x5408;&#x4E8E;&#x5BF9;&#x7A00;&#x6709;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x5206;&#x7C7B;</li><li>&#x7279;&#x522B;&#x9002;&#x5408;&#x4E8E;&#x591A;&#x5206;&#x7C7B;&#x95EE;&#x9898;&#xFF0C;KNN&#x7684;&#x8868;&#x73B0;&#x8D85;&#x8FC7;SVM</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x65E0;&#x6CD5;&#x7ED9;&#x51FA;&#x5206;&#x7C7B;&#x89C4;&#x5219;</li><li>&#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x7279;&#x5F81;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x9009;&#x62E9;&#x548C;&#x8861;&#x91CF;&#x4E0D;&#x51C6;&#x786E;</li><li>&#x8BA1;&#x7B97;&#x91CF;&#x8F83;&#x5927;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x6837;&#x672C;&#x90FD;&#x9700;&#x8981;&#x8BA1;&#x7B97;&#x4E0E;&#x5176;&#x4ED6;&#x6837;&#x672C;&#x7684;&#x8DDD;&#x79BB;</li><li>&#x6837;&#x672C;&#x4E0D;&#x5E73;&#x8861;&#x65F6;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x4E00;&#x7C7B;&#x6837;&#x672C;&#x591A;&#xFF0C;&#x5176;&#x4ED6;&#x7C7B;&#x6837;&#x672C;&#x5C11;&#x65F6;&#x4F1A;&#x4EA7;&#x751F;&#x4E25;&#x91CD;&#x7684;&#x95EE;&#x9898;</li></ul></font></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;LMSE&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="有监督学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%89%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>KNN(K Nearest Neighbor)</title>
    <link href="https://USTCcoder.github.io/2019/07/05/classfication%20KNN/"/>
    <id>https://USTCcoder.github.io/2019/07/05/classfication KNN/</id>
    <published>2019-07-05T00:25:20.000Z</published>
    <updated>2019-08-07T15:53:50.984Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">K&#x8FD1;&#x90BB;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x89E3;&#x8BFB;"><a href="#&#x539F;&#x7406;&#x89E3;&#x8BFB;" class="headerlink" title="&#x539F;&#x7406;&#x89E3;&#x8BFB;"></a><font size="5" color="red">&#x539F;&#x7406;&#x89E3;&#x8BFB;</font></h1><p>&#x2003;&#x2003;k&#x8FD1;&#x90BB;&#x6CD5;(kNN)&#x662F;&#x4E00;&#x79CD;&#x57FA;&#x672C;&#x5206;&#x7C7B;&#x65B9;&#x6CD5;&#xFF0C;&#x7ED9;&#x5B9A;&#x6D4B;&#x8BD5;&#x5B9E;&#x4F8B;&#xFF0C;&#x57FA;&#x4E8E;<strong>&#x67D0;&#x79CD;&#x8DDD;&#x79BB;&#x5EA6;&#x91CF;</strong>&#x627E;&#x51FA;&#x8BAD;&#x7EC3;&#x96C6;&#x4E2D;&#x4E0E;&#x5176;<strong>&#x6700;&#x9760;&#x8FD1;&#x7684;k&#x4E2A;</strong>&#x5B9E;&#x4F8B;&#x70B9;&#xFF0C;&#x7136;&#x540E;&#x57FA;&#x4E8E;&#x8FD9;k&#x4E2A;&#x6700;&#x8FD1;&#x90BB;&#x7684;&#x4FE1;&#x606F;&#x4F7F;&#x7528;<strong>&#x6295;&#x7968;&#x6CD5;</strong>&#xFF0C;&#x5373;&#x9009;&#x62E9;&#x8FD9;k&#x4E2A;&#x5B9E;&#x4F8B;&#x4E2D;<strong>&#x51FA;&#x73B0;&#x6700;&#x591A;</strong>&#x7684;&#x6807;&#x8BB0;&#x7C7B;&#x522B;&#x4F5C;&#x4E3A;&#x5206;&#x7C7B;&#x7ED3;&#x679C;&#x3002;<br><a id="more"></a></p><h1 id="&#x6838;&#x5FC3;&#x601D;&#x60F3;"><a href="#&#x6838;&#x5FC3;&#x601D;&#x60F3;" class="headerlink" title="&#x6838;&#x5FC3;&#x601D;&#x60F3;"></a><font size="5" color="red">&#x6838;&#x5FC3;&#x601D;&#x60F3;</font></h1><h2 id="&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;"><a href="#&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;" class="headerlink" title="&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;"></a><font size="4">&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;</font></h2><p>&#x2003;&#x2003;<font size="4">1. &#x6B27;&#x5F0F;&#x8DDD;&#x79BB;(Euclidean Distance)</font><br>$$L_2(x_i,x_j)=\sqrt{\displaystyle \sum_{k=1}^n ({x_i}^{(k)}-{x_j}^{(k)})^2}$$</p><p>&#x2003;&#x2003;<font size="4">2. &#x66FC;&#x54C8;&#x987F;&#x8DDD;&#x79BB;(Manhattan distance)</font><br>$$L_1(x_i,x_j)=\displaystyle \sum_{k=1}^n \lvert{x_i}^{(k)}-{x_j}^{(k)} \rvert$$</p><p>&#x2003;&#x2003;<font size="4">3.&#x4F59;&#x5F26;&#x8DDD;&#x79BB;(Cosine Distance)</font><br>$$L_{cos}(x_i,x_j)=1-\frac{x_i \cdot x_j}{\lVert x_i \rVert_2 \ \lVert x_j \rVert_2}$$</p><h2 id="K&#x503C;&#x7684;&#x9009;&#x62E9;"><a href="#K&#x503C;&#x7684;&#x9009;&#x62E9;" class="headerlink" title="K&#x503C;&#x7684;&#x9009;&#x62E9;"></a><font size="4">K&#x503C;&#x7684;&#x9009;&#x62E9;</font></h2><p>&#x2003;&#x2003;K&#x503C;&#x7684;&#x9009;&#x62E9;&#x4F1A;&#x5BF9;K&#x8FD1;&#x90BB;&#x6CD5;&#x7684;&#x7ED3;&#x679C;&#x4EA7;&#x751F;&#x91CD;&#x5927;&#x5F71;&#x54CD;&#xFF0C;&#x5728;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;k&#x503C;&#x4E00;&#x822C;&#x53D6;&#x4E00;&#x4E2A;&#x6BD4;&#x8F83;&#x5C0F;&#x7684;&#x6570;&#x503C;&#xFF0C;&#x901A;&#x5E38;&#x91C7;&#x7528;&#x4EA4;&#x53C9;&#x9A8C;&#x8BC1;&#x6CD5;&#x6765;&#x9009;&#x53D6;&#x6700;&#x4F18;&#x7684;k&#x503C;&#x3002;<br>&#x2003;&#x2003;K=1&#x65F6;K&#x8FD1;&#x90BB;&#x7B97;&#x6CD5;&#x9000;&#x5316;&#x6210;&#x6700;&#x8FD1;&#x90BB;&#xFF0C;&#x5373;&#x6570;&#x636E;&#x7684;&#x7C7B;&#x522B;&#x4E3A;&#x8DDD;&#x79BB;&#x6700;&#x8FD1;&#x7684;&#x6837;&#x672C;&#x7684;&#x7C7B;&#x522B;&#x3002;</p><h1 id="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"><a href="#&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;</font></h1><p><img src="/images/MACHINE/knn.png" alt="KNN"></p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><h2 id="KNN-main-m"><a href="#KNN-main-m" class="headerlink" title="KNN_main.m"></a>KNN_main.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">%&#x7C7B;&#x522B;&#x6570;&#x76EE;&#xFF0C;&#x8BF7;&#x8F93;&#x5165;&#x5927;&#x4E8E;1&#x7684;&#x6570;</span><br><span class="line">class_num=2;</span><br><span class="line">%k&#x8FD1;&#x90BB;&#x6570;&#x76EE;</span><br><span class="line">knn=3;</span><br><span class="line">%&#x8BAD;&#x7EC3;&#x96C6;&#x6837;&#x672C;</span><br><span class="line">train_x=[0.7,0.8,0.1,0.4,0.2;...</span><br><span class="line">     0.5,0.6,0.1,0.8,0.2];</span><br><span class="line">train_y=[1,1,2,1,2];</span><br><span class="line">%&#x7279;&#x5F81;&#x6570;&#x76EE;</span><br><span class="line">feat_num=size(train_x,1);</span><br><span class="line">%&#x6D4B;&#x8BD5;&#x96C6;&#x6837;&#x672C;</span><br><span class="line">test_x=[rand(1,50);rand(1,50)];</span><br><span class="line">%&#x8BAD;&#x7EC3;&#x96C6;&#x6837;&#x672C;&#x6570;</span><br><span class="line">train_num=size(train_x,2);</span><br><span class="line">%&#x6D4B;&#x8BD5;&#x96C6;&#x6837;&#x672C;&#x6570;</span><br><span class="line">test_num=size(test_x,2);</span><br><span class="line">%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1</span><br><span class="line">train_x_scale=zeros(size(train_x));</span><br><span class="line">test_x_scale=zeros(size(test_x));</span><br><span class="line">for i=1:feat_num</span><br><span class="line">    train_x_scale(i,:)=(train_x(i,:)-min(train_x(i,:)))/(max(train_x(i,:))-min(train_x(i,:)));</span><br><span class="line">    test_x_scale(i,:)=(test_x(i,:)-min(train_x(i,:)))/(max(train_x(i,:))-min(train_x(i,:)));</span><br><span class="line">end</span><br><span class="line">%&#x5982;&#x679C;knn&#x5927;&#x4E8E;&#x6837;&#x672C;&#x6570;&#xFF0C;&#x5219;&#x65E0;&#x6CD5;&#x5224;&#x522B;</span><br><span class="line">if knn&gt;train_num</span><br><span class="line">    disp(&apos;Error&apos;);</span><br><span class="line">else</span><br><span class="line">    test_y=KNN_classify(train_x_scale,train_y,test_x_scale,train_num,test_num,knn);</span><br><span class="line">    %&#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A;</span><br><span class="line">    if feat_num==2</span><br><span class="line">        KNN_display(train_x,train_y,test_x,test_y,train_num,test_num,class_num);</span><br><span class="line">    else</span><br><span class="line">        disp(&apos;The Feature Is Not Two-Dimensional&apos;);</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="KNN-classify-m"><a href="#KNN-classify-m" class="headerlink" title="KNN_classify.m"></a>KNN_classify.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function test_y=KNN_classify(train_x_scale,train_y,test_x_scale,train_num,test_num,knn)</span><br><span class="line">test_y=zeros(1,test_num);</span><br><span class="line">distance=zeros(test_num,train_num);</span><br><span class="line">for i=1:test_num</span><br><span class="line">    %distance(i,j)&#x4EE3;&#x8868;&#x7B2C;i&#x4E2A;&#x6D4B;&#x8BD5;&#x96C6;&#x5230;&#x7B2C;j&#x4E2A;&#x8BAD;&#x7EC3;&#x96C6;&#x7684;&#x8DDD;&#x79BB;</span><br><span class="line">    distance(i,:)=sum((train_x_scale-repmat(test_x_scale(:,i),1,train_num)).^2);</span><br><span class="line">    temp=sort(distance(i,:));</span><br><span class="line">    %&#x627E;&#x5230;&#x6700;&#x8FD1;&#x7684;knn&#x4E2A;&#x6570;&#x636E;</span><br><span class="line">    tem=tabulate(train_y(distance(i,:)&lt;=temp(knn)));</span><br><span class="line">    %&#x627E;&#x5230;&#x6700;&#x8FD1;&#x7684;&#x6570;&#x636E;&#x4E2D;&#x6700;&#x591A;&#x7684;&#x7C7B;&#x522B;</span><br><span class="line">    test_y(i)=tem(find(tem(:,2)==max(tem(:,2)),1),1);</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="KNN-display-m"><a href="#KNN-display-m" class="headerlink" title="KNN_display.m"></a>KNN_display.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function KNN_display(train_x,train_y,test_x,test_y,train_num,test_num,class_num)</span><br><span class="line">hold on;</span><br><span class="line">color_bar=zeros(class_num,3);</span><br><span class="line">for i=1:class_num</span><br><span class="line">    color_bar(i,:)=[rand(1),rand(1),rand(1)];</span><br><span class="line">end</span><br><span class="line">%&#x753B;&#x51FA;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#xFF0C;&#x7528;*&#x8868;&#x793A;</span><br><span class="line">for i=1:train_num</span><br><span class="line">    plot(train_x(1,i),train_x(2,i),&apos;color&apos;,color_bar(train_y(i),:),&apos;marker&apos;,&apos;*&apos;);</span><br><span class="line">end</span><br><span class="line">%&#x753B;&#x51FA;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#xFF0C;&#x7528;o&#x8868;&#x793A;</span><br><span class="line">for j=1:test_num</span><br><span class="line">    plot(test_x(1,j),test_x(2,j),&apos;color&apos;,color_bar(test_y(j),:),&apos;marker&apos;,&apos;o&apos;);</span><br><span class="line">end</span><br><span class="line">hold off;</span><br></pre></td></tr></tbody></table></figure><p><br><br></p><h1 id="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"><a href="#&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;" class="headerlink" title="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"></a><font size="5" color="red">&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;</font></h1><p><img src="/images/MACHINE/knn1.png" alt="KNN"></p><h1 id="KNN&#x4F18;&#x7F3A;&#x70B9;"><a href="#KNN&#x4F18;&#x7F3A;&#x70B9;" class="headerlink" title="KNN&#x4F18;&#x7F3A;&#x70B9;"></a><font size="5" color="red">KNN&#x4F18;&#x7F3A;&#x70B9;</font></h1><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x65E0;&#x9700;&#x53C2;&#x6570;&#x4F30;&#x8BA1;&#xFF0C;&#x65E0;&#x9700;&#x8BAD;&#x7EC3;</li><li>&#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x6613;&#x4E8E;&#x7406;&#x89E3;&#x548C;&#x5B9E;&#x73B0;</li><li>&#x9002;&#x5408;&#x4E8E;&#x5BF9;&#x7A00;&#x6709;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x5206;&#x7C7B;</li><li>&#x7279;&#x522B;&#x9002;&#x5408;&#x4E8E;&#x591A;&#x5206;&#x7C7B;&#x95EE;&#x9898;&#xFF0C;KNN&#x7684;&#x8868;&#x73B0;&#x8D85;&#x8FC7;SVM</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x65E0;&#x6CD5;&#x7ED9;&#x51FA;&#x5206;&#x7C7B;&#x89C4;&#x5219;</li><li>&#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x7279;&#x5F81;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x9009;&#x62E9;&#x548C;&#x8861;&#x91CF;&#x4E0D;&#x51C6;&#x786E;</li><li>&#x8BA1;&#x7B97;&#x91CF;&#x8F83;&#x5927;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x6837;&#x672C;&#x90FD;&#x9700;&#x8981;&#x8BA1;&#x7B97;&#x4E0E;&#x5176;&#x4ED6;&#x6837;&#x672C;&#x7684;&#x8DDD;&#x79BB;</li><li>&#x6837;&#x672C;&#x4E0D;&#x5E73;&#x8861;&#x65F6;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x4E00;&#x7C7B;&#x6837;&#x672C;&#x591A;&#xFF0C;&#x5176;&#x4ED6;&#x7C7B;&#x6837;&#x672C;&#x5C11;&#x65F6;&#x4F1A;&#x4EA7;&#x751F;&#x4E25;&#x91CD;&#x7684;&#x95EE;&#x9898;</li></ul></font></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;KNN&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="有监督学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%89%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>决策树(Decision Tree)</title>
    <link href="https://USTCcoder.github.io/2019/07/03/classification%20DT/"/>
    <id>https://USTCcoder.github.io/2019/07/03/classification DT/</id>
    <published>2019-07-03T06:45:20.000Z</published>
    <updated>2019-08-07T15:54:03.738Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x51B3;&#x7B56;&#x6811;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x89E3;&#x8BFB;"><a href="#&#x539F;&#x7406;&#x89E3;&#x8BFB;" class="headerlink" title="&#x539F;&#x7406;&#x89E3;&#x8BFB;"></a><font size="5" color="red">&#x539F;&#x7406;&#x89E3;&#x8BFB;</font></h1><p>&#x2003;&#x2003;&#x51B3;&#x7B56;&#x6811;(Decision Tree):&#x662F;&#x5728;&#x5DF2;&#x77E5;&#x5404;&#x79CD;&#x60C5;&#x51B5;&#x53D1;&#x751F;&#x6982;&#x7387;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x76F4;&#x89C2;&#x8FD0;&#x7528;&#x6982;&#x7387;&#x5206;&#x6790;&#x7684;&#x4E00;&#x79CD;<strong>&#x56FE;&#x89E3;&#x6CD5;</strong>&#x3002;&#x51B3;&#x7B56;&#x6811;&#x662F;&#x4E00;&#x79CD;<strong>&#x6811;&#x5F62;&#x7ED3;&#x6784;</strong>&#xFF0C;&#x5176;&#x4E2D;&#x6BCF;&#x4E2A;<strong>&#x5185;&#x90E8;&#x8282;&#x70B9;&#x8868;&#x793A;&#x4E00;&#x4E2A;&#x5C5E;&#x6027;&#x4E0A;&#x7684;&#x6D4B;&#x8BD5;</strong>&#xFF0C;&#x6BCF;&#x4E2A;<strong>&#x5206;&#x652F;&#x4EE3;&#x8868;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x8F93;&#x51FA;</strong>&#xFF0C;&#x6BCF;&#x4E2A;<strong>&#x53F6;&#x8282;&#x70B9;&#x4EE3;&#x8868;&#x4E00;&#x79CD;&#x7C7B;&#x522B;</strong>&#x3002;&#x7531;&#x4E8E;&#x8FD9;&#x79CD;&#x51B3;&#x7B56;&#x5206;&#x652F;&#x753B;&#x6210;&#x56FE;&#x5F62;&#x5F88;&#x50CF;&#x4E00;&#x68F5;&#x6811;&#x7684;&#x679D;&#x5E72;&#xFF0C;&#x6545;&#x79F0;&#x51B3;&#x7B56;&#x6811;&#x3002;<br><a id="more"></a></p><h1 id="&#x6838;&#x5FC3;&#x601D;&#x60F3;"><a href="#&#x6838;&#x5FC3;&#x601D;&#x60F3;" class="headerlink" title="&#x6838;&#x5FC3;&#x601D;&#x60F3;"></a><font size="5" color="red">&#x6838;&#x5FC3;&#x601D;&#x60F3;</font></h1><h2 id="&#x6811;&#x7684;&#x6784;&#x5EFA;"><a href="#&#x6811;&#x7684;&#x6784;&#x5EFA;" class="headerlink" title="&#x6811;&#x7684;&#x6784;&#x5EFA;"></a><font size="4">&#x6811;&#x7684;&#x6784;&#x5EFA;</font></h2><ul><li>&#x6B65;&#x9AA4;1&#xFF1A;&#x5C06;&#x6240;&#x6709;&#x7684;&#x6570;&#x636E;&#x770B;&#x6210;&#x662F;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF08;&#x6839;&#x8282;&#x70B9;&#xFF09;&#xFF0C;&#x8FDB;&#x5165;&#x6B65;&#x9AA4;2</li><li>&#x6B65;&#x9AA4;2&#xFF1A;&#x6839;&#x636E;&#x5212;&#x5206;&#x51C6;&#x5219;&#xFF0C;&#x4ECE;&#x6240;&#x6709;&#x5C5E;&#x6027;&#x4E2D;&#x6311;&#x9009;&#x4E00;&#x4E2A;&#x5BF9;&#x8282;&#x70B9;&#x8FDB;&#x884C;&#x5206;&#x5272;&#xFF0C;&#x8FDB;&#x5165;&#x6B65;&#x9AA4;3</li><li>&#x6B65;&#x9AA4;3&#xFF1A;&#x751F;&#x6210;&#x82E5;&#x5E72;&#x4E2A;&#x5B50;&#x8282;&#x70B9;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x5B50;&#x8282;&#x70B9;&#x8FDB;&#x884C;&#x5224;&#x65AD;&#xFF0C;&#x5982;&#x679C;&#x6EE1;&#x8DB3;&#x505C;&#x6B62;&#x5206;&#x88C2;&#x7684;&#x6761;&#x4EF6;&#xFF0C;&#x8FDB;&#x5165;&#x6B65;&#x9AA4;4&#xFF1B;&#x5426;&#x5219;&#xFF0C;&#x8FDB;&#x5165;&#x6B65;&#x9AA4;2</li><li>&#x6B65;&#x9AA4;4&#xFF1A;&#x8BBE;&#x7F6E;&#x8BE5;&#x8282;&#x70B9;&#x662F;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#xFF0C;&#x5176;&#x8F93;&#x51FA;&#x7684;&#x7ED3;&#x679C;&#x4E3A;&#x8BE5;&#x8282;&#x70B9;&#x6570;&#x91CF;&#x5360;&#x6BD4;&#x6700;&#x5927;&#x7684;&#x7C7B;&#x522B;</li></ul><h2 id="&#x5212;&#x5206;&#x51C6;&#x5219;"><a href="#&#x5212;&#x5206;&#x51C6;&#x5219;" class="headerlink" title="&#x5212;&#x5206;&#x51C6;&#x5219;"></a><font size="4">&#x5212;&#x5206;&#x51C6;&#x5219;</font></h2><h3 id="&#x4FE1;&#x606F;&#x71B5;"><a href="#&#x4FE1;&#x606F;&#x71B5;" class="headerlink" title="&#x4FE1;&#x606F;&#x71B5;"></a>&#x4FE1;&#x606F;&#x71B5;</h3><p>&#x4FE1;&#x606F;&#x71B5;&#xFF1A;&#x5047;&#x8BBE;&#x6837;&#x672C;&#x96C6;&#x5408;D&#x4E2D;&#x7B2C;k&#x7C7B;&#x6837;&#x672C;&#x6240;&#x5360;&#x7684;&#x6BD4;&#x4F8B;&#x4E3A;$p_k(k=1,2,\ldots,y)$&#xFF0C;&#x5219;D&#x7684;&#x4FE1;&#x606F;&#x71B5;&#x5B9A;&#x4E49;&#x4E3A;&#xFF1A;<br>$$Ent(D)=-\displaystyle \sum_{k=1}^y p_klog_2p_k$$<br>Ent(D)&#x7684;&#x503C;&#x8D8A;&#x5C0F;&#xFF0C;&#x5219;D&#x7684;&#x7EAF;&#x5EA6;&#x8D8A;&#x9AD8;&#x3002;</p><h3 id="&#x4FE1;&#x606F;&#x589E;&#x76CA;-ID3"><a href="#&#x4FE1;&#x606F;&#x589E;&#x76CA;-ID3" class="headerlink" title="&#x4FE1;&#x606F;&#x589E;&#x76CA;(ID3)"></a>&#x4FE1;&#x606F;&#x589E;&#x76CA;(ID3)</h3><p>&#x5047;&#x8BBE;&#x79BB;&#x6563;&#x5C5E;&#x6027;a&#x6709;V&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x53D6;&#x503C;$\lbrace a^1,a^2,\ldots,a^V \rbrace$&#xFF0C;&#x82E5;&#x4F7F;&#x7528;a&#x6765;&#x5BF9;&#x6837;&#x672C;&#x96C6;D&#x8FDB;&#x884C;&#x5212;&#x5206;&#xFF0C;&#x5219;&#x4F1A;&#x4EA7;&#x751F;V&#x4E2A;&#x5206;&#x652F;&#x8282;&#x70B9;&#xFF0C;&#x5176;&#x4E2D;&#x7B2C;v&#x4E2A;&#x5206;&#x652F;&#x8282;&#x70B9;&#x5305;&#x542B;&#x4E86;D&#x4E2D;&#x6240;&#x6709;&#x5728;&#x5C5E;&#x6027;a&#x4E0A;&#x53D6;&#x503C;&#x4E3A;$a^v$&#x7684;&#x6837;&#x672C;&#xFF0C;&#x8BB0;&#x4E3A;$D^v$&#x3002;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8BA1;&#x7B97;&#x51FA;$D^v$&#x7684;&#x4FE1;&#x606F;&#x71B5;&#xFF0C;&#x518D;&#x7ED9;&#x5206;&#x652F;&#x7ED3;&#x70B9;&#x8D4B;&#x4E88;&#x6743;&#x91CD;$\frac{\left| D^v \right|}{\left| D \right|}$<br>&#x5219;&#x53EF;&#x4EE5;&#x8BA1;&#x7B97;&#x51FA;&#x7528;&#x5C5E;&#x6027;a&#x5BF9;&#x6837;&#x672C;&#x96C6;D&#x8FDB;&#x884C;&#x5212;&#x5206;&#x6240;&#x83B7;&#x5F97;&#x7684;&#x201D;&#x4FE1;&#x606F;&#x589E;&#x76CA;&#x201D;&#x3002;<br>$$Gain(D,a)=Ent(D)-\displaystyle \sum_{v=1}^V \frac{\left| D^v \right|}{\left| D \right|}Ent(D^v)$$<br>&#x4E00;&#x822C;&#x800C;&#x8A00;&#xFF0C;&#x4FE1;&#x606F;&#x589E;&#x76CA;&#x8D8A;&#x5927;&#xFF0C;&#x5219;&#x610F;&#x5473;&#x7740;&#x4F7F;&#x7528;&#x5C5E;&#x6027;a&#x6765;&#x8FDB;&#x884C;&#x5212;&#x5206;&#x6240;&#x83B7;&#x5F97;&#x7684;&#x7EAF;&#x5EA6;&#x63D0;&#x5347;&#x8D8A;&#x5927;&#xFF0C;ID3&#x51B3;&#x7B56;&#x6811;&#x5B66;&#x4E60;&#x7B97;&#x6CD5;&#x5C31;&#x662F;&#x4EE5;&#x4FE1;&#x606F;&#x589E;&#x76CA;&#x4E3A;&#x51C6;&#x5219;&#x6765;&#x5212;&#x5206;&#x5C5E;&#x6027;&#x3002;</p><h3 id="&#x589E;&#x76CA;&#x7387;-C4-5"><a href="#&#x589E;&#x76CA;&#x7387;-C4-5" class="headerlink" title="&#x589E;&#x76CA;&#x7387;(C4.5)"></a>&#x589E;&#x76CA;&#x7387;(C4.5)</h3><p>&#x5B9E;&#x9645;&#x4E0A;&#xFF0C;&#x4FE1;&#x606F;&#x589E;&#x76CA;&#x51C6;&#x5219;&#x5BF9;&#x53EF;&#x53D6;&#x503C;&#x6570;&#x76EE;&#x8F83;&#x591A;&#x7684;&#x5C5E;&#x6027;&#x6709;&#x6240;&#x504F;&#x597D;&#xFF0C;&#x4E3A;&#x51CF;&#x5C11;&#x8FD9;&#x79CD;&#x504F;&#x597D;&#x53EF;&#x80FD;&#x5E26;&#x6765;&#x7684;&#x4E0D;&#x5229;&#x5F71;&#x54CD;&#xFF0C;&#x8457;&#x540D;&#x7684;C4.5&#x51B3;&#x7B56;&#x6811;&#x7B97;&#x6CD5;&#x4E0D;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#x4FE1;&#x606F;&#x589E;&#x76CA;&#xFF0C;&#x800C;&#x662F;&#x4F7F;&#x7528;&#x201D;&#x589E;&#x76CA;&#x7387;&#x201D;&#x6765;&#x9009;&#x62E9;&#x6700;&#x4F18;&#x5212;&#x5206;&#x5C5E;&#x6027;&#x3002;<br>&#x589E;&#x76CA;&#x7387;&#x5B9A;&#x4E49;&#x4E3A;<br>$$Gain_ratio=\frac{Gain(D,a)}{IV(a)}$$<br>$$IV(a)=-\displaystyle \sum_{v=1}^V \frac{\left| D^v \right|}{\left| D \right|} log_2 \frac{\left| D^v \right|}{\left| D \right|}$$<br>&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x589E;&#x76CA;&#x7387;&#x51C6;&#x5219;&#x5BF9;&#x53EF;&#x53D6;&#x503C;&#x6570;&#x76EE;&#x8F83;&#x5C11;&#x7684;&#x5C5E;&#x6027;&#x6709;&#x6240;&#x504F;&#x597D;&#xFF0C;&#x56E0;&#x6B64;C4.5&#x7B97;&#x6CD5;&#x5148;&#x4ECE;&#x5019;&#x9009;&#x5212;&#x5206;&#x5C5E;&#x6027;&#x4E2D;&#x627E;&#x51FA;&#x4FE1;&#x606F;&#x589E;&#x76CA;&#x9AD8;&#x4E8E;&#x5E73;&#x5747;&#x6C34;&#x5E73;&#x7684;&#x5C5E;&#x6027;&#xFF0C;&#x518D;&#x4ECE;&#x4E2D;&#x9009;&#x62E9;&#x589E;&#x76CA;&#x7387;&#x6700;&#x9AD8;&#x7684;&#x3002;</p><h3 id="&#x57FA;&#x5C3C;&#x6307;&#x6570;-CART"><a href="#&#x57FA;&#x5C3C;&#x6307;&#x6570;-CART" class="headerlink" title="&#x57FA;&#x5C3C;&#x6307;&#x6570;(CART)"></a>&#x57FA;&#x5C3C;&#x6307;&#x6570;(CART)</h3><p>&#x57FA;&#x5C3C;&#x6307;&#x6570;&#x53CD;&#x5E94;&#x4E86;&#x4ECE;&#x6570;&#x636E;&#x96C6;D&#x4E2D;&#x968F;&#x673A;&#x62BD;&#x53D6;&#x4E24;&#x4E2A;&#x6837;&#x672C;&#xFF0C;&#x5176;&#x7C7B;&#x522B;&#x6807;&#x8BB0;&#x4E0D;&#x4E00;&#x81F4;&#x7684;&#x6982;&#x7387;&#x3002;&#x56E0;&#x6B64;&#x57FA;&#x5C3C;&#x6307;&#x6570;&#x8D8A;&#x5C0F;&#xFF0C;&#x5219;&#x6570;&#x636E;&#x96C6;D&#x7684;&#x7EAF;&#x5EA6;&#x8D8A;&#x9AD8;&#x3002;<br>$$Gini(D)=1-\displaystyle \sum_{k=1}^y {p_k}^2$$<br>&#x5C5E;&#x6027;a&#x7684;&#x57FA;&#x5C3C;&#x6307;&#x6570;&#x5B9A;&#x4E49;&#x4E3A;<br>$$Gini_index(D,a)=\displaystyle \sum_{v=1}^V \frac{\left| D^v \right|}{\left| D \right|} Gini(D^v)$$<br>&#x5728;&#x9009;&#x62E9;&#x5C5E;&#x6027;&#x96C6;&#x5408;&#x65F6;&#xFF0C;&#x9009;&#x62E9;&#x4F7F;&#x5212;&#x5206;&#x540E;&#x57FA;&#x5C3C;&#x6307;&#x6570;&#x6700;&#x5C0F;&#x7684;&#x5C5E;&#x6027;&#x4F5C;&#x4E3A;&#x6700;&#x4F18;&#x5212;&#x5206;&#x5C5E;&#x6027;&#x3002;</p><h2 id="&#x526A;&#x679D;&#x5904;&#x7406;"><a href="#&#x526A;&#x679D;&#x5904;&#x7406;" class="headerlink" title="&#x526A;&#x679D;&#x5904;&#x7406;"></a><font size="4">&#x526A;&#x679D;&#x5904;&#x7406;</font></h2><p>&#x526A;&#x679D;(pruning)&#x662F;&#x51B3;&#x7B56;&#x6811;&#x5B66;&#x4E60;&#x7B97;&#x6CD5;&#x5BF9;&#x4ED8;&#x201D;&#x8FC7;&#x62DF;&#x5408;&#x201D;&#x7684;&#x4E3B;&#x8981;&#x624B;&#x6BB5;&#x3002;<br>&#x51B3;&#x7B56;&#x6811;&#x526A;&#x679D;&#x7684;&#x57FA;&#x672C;&#x7B56;&#x7565;&#x6709;&#x201D;&#x9884;&#x526A;&#x679D;(prepruning)&#x201D;&#x548C;&#x201D;&#x540E;&#x526A;&#x679D;(postpruning)&#x201D;&#x3002;</p><h3 id="&#x9884;&#x526A;&#x679D;-prepruning"><a href="#&#x9884;&#x526A;&#x679D;-prepruning" class="headerlink" title="&#x9884;&#x526A;&#x679D;(prepruning)"></a>&#x9884;&#x526A;&#x679D;(prepruning)</h3><p>&#x9884;&#x526A;&#x679D;&#xFF1A;&#x662F;&#x5728;&#x51B3;&#x7B56;&#x6811;&#x751F;&#x957F;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E2A;&#x7ED3;&#x70B9;&#x5728;&#x5212;&#x5206;&#x524D;&#x5148;&#x8FDB;&#x884C;&#x4F30;&#x8BA1;&#xFF0C;&#x82E5;&#x5F53;&#x524D;&#x7ED3;&#x70B9;&#x7684;&#x5212;&#x5206;&#x4E0D;&#x80FD;&#x5E26;&#x6765;&#x51B3;&#x7B56;&#x6811;&#x6CDB;&#x5316;&#x6027;&#x80FD;&#x63D0;&#x5347;&#xFF0C;&#x5219;&#x505C;&#x6B62;&#x5212;&#x5206;&#x5E76;&#x5C06;&#x5F53;&#x524D;&#x7ED3;&#x70B9;&#x6807;&#x8BB0;&#x4E3A;&#x53F6;&#x5B50;&#x7ED3;&#x70B9;&#x3002;<br>&#x9884;&#x526A;&#x679D;&#x4F18;&#x70B9;&#xFF1A;</p><ul><li>&#x964D;&#x4F4E;&#x8FC7;&#x62DF;&#x5408;&#x98CE;&#x9669;</li><li>&#x663E;&#x8457;&#x51CF;&#x5C11;&#x51B3;&#x7B56;&#x6811;&#x7684;&#x8BAD;&#x7EC3;&#x65F6;&#x95F4;&#x5F00;&#x9500;&#x548C;&#x6D4B;&#x8BD5;&#x65F6;&#x95F4;&#x5F00;&#x9500;<br>&#x9884;&#x526A;&#x679D;&#x7F3A;&#x70B9;&#xFF1A;</li><li>&#x56E0;&#x4E3A;&#x201D;&#x8D2A;&#x5FC3;&#x201D;&#x672C;&#x8D28;&#xFF0C;&#x53EF;&#x80FD;&#x5E26;&#x6765;&#x6B20;&#x62DF;&#x5408;&#x7684;&#x98CE;&#x9669;</li></ul><h3 id="&#x540E;&#x526A;&#x679D;-postpruning"><a href="#&#x540E;&#x526A;&#x679D;-postpruning" class="headerlink" title="&#x540E;&#x526A;&#x679D;(postpruning)"></a>&#x540E;&#x526A;&#x679D;(postpruning)</h3><p>&#x540E;&#x526A;&#x679D;&#xFF1A;&#x5148;&#x4ECE;&#x8BAD;&#x7EC3;&#x96C6;&#x751F;&#x6210;&#x4E00;&#x9897;&#x5B8C;&#x6574;&#x7684;&#x51B3;&#x7B56;&#x6811;&#xFF0C;&#x7136;&#x540E;&#x81EA;&#x5E95;&#x5411;&#x4E0A;&#x5730;&#x5BF9;&#x975E;&#x53F6;&#x7ED3;&#x70B9;&#x8FDB;&#x884C;&#x8003;&#x5BDF;&#xFF0C;&#x82E5;&#x5C06;&#x8BE5;&#x7ED3;&#x70B9;&#x5BF9;&#x5E94;&#x7684;&#x5B50;&#x6811;&#x66FF;&#x6362;&#x4E3A;&#x53F6;&#x7ED3;&#x70B9;&#x80FD;&#x5E26;&#x6765;&#x51B3;&#x7B56;&#x6811;&#x6CDB;&#x5316;&#x6027;&#x80FD;&#x63D0;&#x5347;&#xFF0C;&#x5219;&#x5C06;&#x8BE5;&#x5B50;&#x6811;&#x66FF;&#x6362;&#x4E3A;&#x53F6;&#x8282;&#x70B9;&#x3002;<br>&#x540E;&#x526A;&#x679D;&#x4F18;&#x70B9;&#xFF1A;</p><ul><li>&#x6CDB;&#x5316;&#x6027;&#x80FD;&#x8F83;&#x597D;</li><li>&#x6B20;&#x62DF;&#x5408;&#x98CE;&#x9669;&#x8F83;&#x5C0F;<br>&#x540E;&#x526A;&#x679D;&#x7F3A;&#x70B9;&#xFF1A;</li><li>&#x751F;&#x6210;&#x5B8C;&#x5168;&#x51B3;&#x7B56;&#x6811;&#x540E;&#x8FDB;&#x884C;&#xFF0C;&#x5E76;&#x4E14;&#x81EA;&#x5E95;&#x5411;&#x4E0A;&#x5BF9;&#x6240;&#x6709;&#x975E;&#x53F6;&#x7ED3;&#x70B9;&#x8FDB;&#x884C;&#x9010;&#x4E00;&#x8003;&#x5BDF;&#xFF0C;&#x65F6;&#x95F4;&#x5F00;&#x9500;&#x5927;</li></ul><h1 id="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"><a href="#&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;</font></h1><p><img src="/images/MACHINE/dt.png" alt="DT"></p><p><br><br></p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><p><font size="4">&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6570;&#x636E;&#x4E3A;&#x7F57;&#x65AF;.&#x6606;&#x5170;(Ross Quinlan)&#x5F53;&#x5E74;&#x6240;&#x7528;&#x7684;&#x9AD8;&#x5C14;&#x592B;&#x6A21;&#x578B;</font><br><img src="/images/MACHINE/dt2.png" alt="DATA"></p><h2 id="ID3-main-m"><a href="#ID3-main-m" class="headerlink" title="ID3_main.m"></a>ID3_main.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">%% %&#x83B7;&#x53D6;&#x57FA;&#x672C;&#x4FE1;&#x606F;</span><br><span class="line">clear;clc;close all;</span><br><span class="line">%&#x8BBE;&#x7F6E;&#x7C7B;&#x522B;&#x548C;&#x6807;&#x7B7E;&#x6700;&#x957F;&#x4E3A;100&#x5B57;&#x7B26;</span><br><span class="line">char_len=100;</span><br><span class="line">%&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x957F;&#x5EA6;&#x4E3A;100&#x7684;&#x7A7A;&#x4E32;</span><br><span class="line">space(1:char_len)=&apos; &apos;;</span><br><span class="line">%&#x8BFB;&#x53D6;&#x6587;&#x672C;&#x6587;&#x6863;</span><br><span class="line">fo=fopen(&apos;data1.txt&apos;,&apos;rt&apos;);</span><br><span class="line">txt=textscan(fo,&apos;%s&apos;);</span><br><span class="line">fclose(fo);</span><br><span class="line">%class_name&#x4E3A;&#x7C7B;&#x522B;&#x540D;&#x79F0;&#xFF0C;&#x5982;outlook&#xFF0C;temperature&#x7B49;&#x7B49;</span><br><span class="line">class_name=strsplit(txt{1}{1},&apos;,&apos;);</span><br><span class="line">class_name=class_name(1:end-1);</span><br><span class="line">%class_num&#x4E3A;&#x7C7B;&#x522B;&#x6570;</span><br><span class="line">class_num=length(class_name);</span><br><span class="line">%sample_num&#x4E3A;&#x6837;&#x672C;&#x6570;</span><br><span class="line">sample_num=length(txt{1})-1;</span><br><span class="line">data{sample_num,class_num+1}=[];</span><br><span class="line">%&#x8BFB;&#x5165;&#x6570;&#x636E;</span><br><span class="line">for i=1:sample_num</span><br><span class="line">    temp=strsplit(txt{1}{i+1},&apos;,&apos;);</span><br><span class="line">    for j=1:class_num</span><br><span class="line">        data{i,j}=[temp{j},&apos;_&apos;,class_name{1,j}];</span><br><span class="line">    end</span><br><span class="line">    data{i,j+1}=temp{j+1};</span><br><span class="line">end</span><br><span class="line">%class_info&#x5B58;&#x653E;&#x6BCF;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#x7684;&#x6807;&#x7B7E;&#x4FE1;&#x606F;&#xFF0C;&#x5982;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x80DE;&#x4E2D;&#x5B58;&#x653E;rain&#xFF0C;sunny&#xFF0C;overcast</span><br><span class="line">class_info{1,class_num}=[];</span><br><span class="line">for i=1:class_num</span><br><span class="line">    temp=unique(data(:,i));</span><br><span class="line">    class_info{i}=temp;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">%% %&#x751F;&#x6210;&#x6811;</span><br><span class="line">No=1;</span><br><span class="line">%&#x521B;&#x5EFA;100*100&#x7684;&#x5B57;&#x7B26;&#x77E9;&#x9635;&#x5B58;&#x653E;&#x6811;&#x7684;&#x4FE1;&#x606F;&#x3002;</span><br><span class="line">tree(1:char_len,1:char_len)=&apos; &apos;;</span><br><span class="line">[tree,No] = ID3_creat(data,class_name,tree,No);</span><br><span class="line"></span><br><span class="line">%% %&#x6784;&#x5EFA;&#x8FDE;&#x63A5;&#x77E9;&#x9635;</span><br><span class="line">%&#x83B7;&#x53D6;&#x6811;&#x7684;&#x8282;&#x70B9;</span><br><span class="line">tree_node=tree(1:2:No,:);</span><br><span class="line">%&#x83B7;&#x53D6;&#x6811;&#x7684;&#x6807;&#x7B7E;</span><br><span class="line">tree_label=tree(2:2:No,:);</span><br><span class="line">%&#x521B;&#x5EFA;&#x8FDE;&#x63A5;&#x77E9;&#x9635;</span><br><span class="line">vect{size(tree_node,1),size(tree_node,1)}=[];</span><br><span class="line">%vect&#x5143;&#x80DE;&#x8BB0;&#x5F55;&#x7236;&#x5B50;&#x5173;&#x7CFB;</span><br><span class="line">for i=1:size(tree_node,1)</span><br><span class="line">    tem=find(ismember(class_name,deblank(tree_node(i,:))));</span><br><span class="line">    if isempty(tem)</span><br><span class="line">        continue;</span><br><span class="line">    end</span><br><span class="line">    num=size(class_info{1,tem},1);</span><br><span class="line">    for j=1:num</span><br><span class="line">        temp=space;</span><br><span class="line">        temp(1:length(class_info{1,tem}{j}))=class_info{1,tem}{j};</span><br><span class="line">        for k=1:size(tree_label,1)</span><br><span class="line">            if isequal(tree_label(k,:),temp)</span><br><span class="line">                break;</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">        vect{i,k+1}=temp;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">%% %&#x7ED8;&#x5236;&#x6811;&#x56FE;</span><br><span class="line">node=zeros(1,size(tree_node,1));</span><br><span class="line">%&#x6839;&#x636E;vect&#x5143;&#x80DE;&#x4E2D;&#x7684;&#x7236;&#x5B50;&#x5173;&#x7CFB;&#x753B;&#x51FA;&#x6811;&#x56FE;</span><br><span class="line">for i=1:size(vect,2)</span><br><span class="line">    tem=vect(:,i);</span><br><span class="line">    for j=1:size(tem,1)</span><br><span class="line">        if ~isempty(tem{j})</span><br><span class="line">            node(i)=j;</span><br><span class="line">            break;</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">treeplot(node);</span><br><span class="line"></span><br><span class="line">%% %&#x5199;&#x6811;&#x7684;&#x7C7B;&#x522B;&#xFF08;&#x8282;&#x70B9;&#xFF09;</span><br><span class="line">[x,y]=treelayout(node);</span><br><span class="line">x=x&apos;;</span><br><span class="line">y=y&apos;;</span><br><span class="line">text(x(:,1),y(:,1),tree_node);</span><br><span class="line"></span><br><span class="line">%% %&#x5199;&#x6811;&#x7684;&#x6807;&#x7B7E;&#xFF08;&#x679D;&#x6761;&#xFF09;</span><br><span class="line">x1=zeros(size(tree_label,1));</span><br><span class="line">y1=zeros(size(tree_label,1));</span><br><span class="line">%&#x6839;&#x636E;&#x7236;&#x5B50;&#x5173;&#x7CFB;&#x5728;&#x7236;&#x5B50;&#x8282;&#x70B9;&#x4E2D;&#x70B9;&#x5199;&#x5165;&#x6807;&#x7B7E;</span><br><span class="line">for i=2:length(node)</span><br><span class="line">    x1(i-1,1)=(x(i,1)+x(node(i),1))/2;</span><br><span class="line">    y1(i-1,1)=(y(i,1)+y(node(i),1))/2;</span><br><span class="line">end</span><br><span class="line">for i=1:size(tree_label)</span><br><span class="line">    temp=strsplit(tree_label(i,:),&apos;_&apos;);</span><br><span class="line">    tree_label(i,:)=[temp{1},space(length(temp{1})+1:end)];</span><br><span class="line">end</span><br><span class="line">text(x1(:,1),y1(:,1),tree_label);</span><br></pre></td></tr></tbody></table></figure><h2 id="ID3-split-m"><a href="#ID3-split-m" class="headerlink" title="ID3_split.m"></a>ID3_split.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function bestfeature=ID3_split(data)</span><br><span class="line">%&#x6C42;&#x6700;&#x5C0F;&#x71B5;&#x7684;&#x5206;&#x5272;&#x7B97;&#x6CD5;</span><br><span class="line">numfeatures = size(data,2) -1 ;</span><br><span class="line">bestent = log2(numfeatures);</span><br><span class="line">bestfeature = -1;</span><br><span class="line">for i =1:numfeatures</span><br><span class="line">    ent = ID3_ent(data,i);</span><br><span class="line">    if ent &lt; bestent</span><br><span class="line">        bestent = ent;</span><br><span class="line">        bestfeature = i;</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="ID3-ent-m"><a href="#ID3-ent-m" class="headerlink" title="ID3_ent.m"></a>ID3_ent.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function ent=ID3_ent(data,i)</span><br><span class="line">%&#x6C42;&#x6700;&#x5C0F;&#x71B5;</span><br><span class="line">info=tabulate(data(:,i));</span><br><span class="line">ent=0;</span><br><span class="line">for k=1:size(info,1)</span><br><span class="line">    loc=ismember(data(:,i),info{k,1});</span><br><span class="line">    info1=tabulate(data(loc,end));</span><br><span class="line">    temp=0;</span><br><span class="line">    for n=1:size(info1,1)</span><br><span class="line">        temp=temp-info1{n,3}/100*log2(info1{n,3}/100);</span><br><span class="line">    end</span><br><span class="line">    ent=ent+info{k,3}/100*temp;</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="ID3-creat-m"><a href="#ID3-creat-m" class="headerlink" title="ID3_creat.m"></a>ID3_creat.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function [tree,No]=ID3_creat(data,class_name,tree,No)</span><br><span class="line">classlist=data(:,end);</span><br><span class="line">%&#x5982;&#x679C;&#x6807;&#x7B7E;&#x5168;&#x4E3A;yes&#x6216;no&#x5219;&#x5DF2;&#x7ECF;&#x5206;&#x5B8C;&#xFF0C;&#x8FD4;&#x56DE;</span><br><span class="line">if size(tabulate(classlist),1)==1</span><br><span class="line">    tree(No,1:length(classlist{1}))=classlist{1};</span><br><span class="line">    return</span><br><span class="line">end</span><br><span class="line">%&#x5982;&#x679C;&#x6CA1;&#x6709;&#x5206;&#x5B8C;&#x627E;&#x5230;&#x6700;&#x597D;&#x7684;&#x7279;&#x5F81;&#xFF0C;&#x9012;&#x5F52;&#x751F;&#x6210;&#x6811;</span><br><span class="line">bestfeature_loc = ID3_split(data);</span><br><span class="line">bestfeature=class_name{1,bestfeature_loc};</span><br><span class="line">tree(No,1:length(bestfeature))=bestfeature;</span><br><span class="line">featureValues=tabulate(data(:,bestfeature_loc));</span><br><span class="line">for m=1:size(featureValues,1)</span><br><span class="line">    tree(No+1,1:length(featureValues{m,1}))=featureValues{m,1};</span><br><span class="line">    loc=ismember(data(:,bestfeature_loc),featureValues{m,1});</span><br><span class="line">    data1=data(loc,[1:bestfeature_loc-1,bestfeature_loc+1:end]);</span><br><span class="line">    [tree,No] = ID3_creat(data1,class_name(:,[1:bestfeature_loc-1,bestfeature_loc+1:end]),tree,No+2);</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><p><br><br></p><h1 id="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"><a href="#&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;" class="headerlink" title="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"></a><font size="5" color="red">&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;</font></h1><p><img src="/images/MACHINE/dt1.png" alt="DT"></p><h1 id="ID3-C4-5-CART&#x6027;&#x80FD;&#x6BD4;&#x8F83;"><a href="#ID3-C4-5-CART&#x6027;&#x80FD;&#x6BD4;&#x8F83;" class="headerlink" title="ID3, C4.5, CART&#x6027;&#x80FD;&#x6BD4;&#x8F83;"></a><font size="5" color="red">ID3, C4.5, CART&#x6027;&#x80FD;&#x6BD4;&#x8F83;</font></h1><p>\begin{array}{|c|c|c|c|c|} &#x7B97;&#x6CD5; &amp; &#x7ED3;&#x6784; &amp; &#x7279;&#x5F81;&#x9009;&#x62E9; &amp; &#x8FDE;&#x7EED;&#x503C; &amp; &#x7F3A;&#x5931;&#x503C;  \ \hline ID3&amp;&#x591A;&#x53C9;&#x6811;&amp;&#x4FE1;&#x606F;&#x589E;&#x76CA;&amp;&#x4E0D;&#x652F;&#x6301;&amp;&#x4E0D;&#x652F;&#x6301;\ C4.5&amp;&#x591A;&#x53C9;&#x6811;&amp;&#x4FE1;&#x606F;&#x589E;&#x76CA;&#x6BD4;&amp;&#x652F;&#x6301;&amp;&#x652F;&#x6301;\ CART&amp;&#x4E8C;&#x53C9;&#x6811;&amp;&#x57FA;&#x5C3C;&#x7CFB;&#x6570;&amp;&#x652F;&#x6301;&amp;&#x652F;&#x6301;\  \end{array}</p><h1 id="&#x51B3;&#x7B56;&#x6811;&#x5206;&#x7C7B;&#x4F18;&#x7F3A;&#x70B9;"><a href="#&#x51B3;&#x7B56;&#x6811;&#x5206;&#x7C7B;&#x4F18;&#x7F3A;&#x70B9;" class="headerlink" title="&#x51B3;&#x7B56;&#x6811;&#x5206;&#x7C7B;&#x4F18;&#x7F3A;&#x70B9;"></a><font size="5" color="red">&#x51B3;&#x7B56;&#x6811;&#x5206;&#x7C7B;&#x4F18;&#x7F3A;&#x70B9;</font></h1><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x6570;&#x636E;&#x91CF;&#x4E00;&#x822C;&#x4E0D;&#x4F1A;&#x592A;&#x5927;</li><li>&#x5177;&#x6709;&#x5F88;&#x5F3A;&#x7684;&#x53EF;&#x89E3;&#x91CA;&#x6027;</li><li>&#x751F;&#x6210;&#x7684;&#x51B3;&#x7B56;&#x6811;&#x7B80;&#x5355;&#x76F4;&#x89C2;</li><li>&#x53EF;&#x4EE5;&#x5904;&#x7406;&#x591A;&#x7EF4;&#x5EA6;&#x8F93;&#x51FA;&#x7684;&#x5206;&#x7C7B;&#x95EE;&#x9898;&#x3002;</li><li>&#x65E2;&#x53EF;&#x4EE5;&#x5904;&#x7406;&#x79BB;&#x6563;&#x503C;&#x4E5F;&#x53EF;&#x4EE5;&#x5904;&#x7406;&#x8FDE;&#x7EED;&#x503C;</li><li>&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x526A;&#x679D;&#x6765;&#x6743;&#x8861;&#x6B20;&#x62DF;&#x5408;&#x548C;&#x8FC7;&#x62DF;&#x5408;</li><li>&#x57FA;&#x672C;&#x4E0D;&#x9700;&#x8981;&#x9884;&#x5904;&#x7406;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x63D0;&#x524D;&#x5F52;&#x4E00;&#x5316;&#xFF0C;&#x5904;&#x7406;&#x7F3A;&#x5931;&#x503C;&#x3002;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x6811;&#x7ED3;&#x6784;&#x53D7;&#x6837;&#x672C;&#x5F71;&#x54CD;&#x8F83;&#x5927;</li><li>&#x590D;&#x6742;&#x7684;&#x6A21;&#x578B;&#x5F88;&#x96BE;&#x7528;&#x51B3;&#x7B56;&#x6811;&#x89E3;&#x51B3;</li><li>&#x5BFB;&#x627E;&#x6700;&#x4F18;&#x7684;&#x51B3;&#x7B56;&#x6811;&#x662F;&#x4E00;&#x4E2A;NP&#x96BE;&#x7684;&#x95EE;&#x9898;</li><li>&#x5982;&#x679C;&#x67D0;&#x4E9B;&#x7279;&#x5F81;&#x7684;&#x6837;&#x672C;&#x6BD4;&#x4F8B;&#x8FC7;&#x5927;&#xFF0C;&#x751F;&#x6210;&#x51B3;&#x7B56;&#x6811;&#x5BB9;&#x6613;&#x504F;&#x5411;&#x4E8E;&#x8FD9;&#x4E9B;&#x7279;&#x5F81;&#xFF0C;&#x8FD9;&#x4E2A;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8C03;&#x8282;&#x6837;&#x672C;&#x6743;&#x91CD;&#x6765;&#x6539;&#x5584;</li></ul></font></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Decision Tree&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="有监督学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%89%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>逻辑回归(Logistics Regression)</title>
    <link href="https://USTCcoder.github.io/2019/07/02/classification%20LR/"/>
    <id>https://USTCcoder.github.io/2019/07/02/classification LR/</id>
    <published>2019-07-02T05:25:30.000Z</published>
    <updated>2019-08-07T15:54:08.907Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x903B;&#x8F91;&#x56DE;&#x5F52;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x89E3;&#x8BFB;"><a href="#&#x539F;&#x7406;&#x89E3;&#x8BFB;" class="headerlink" title="&#x539F;&#x7406;&#x89E3;&#x8BFB;"></a><font size="5" color="red">&#x539F;&#x7406;&#x89E3;&#x8BFB;</font></h1><p>&#x2003;&#x2003;&#x903B;&#x8F91;&#x56DE;&#x5F52;:&#x662F;&#x4E00;&#x79CD;<strong>&#x5E7F;&#x4E49;&#x7EBF;&#x6027;&#x56DE;&#x5F52;</strong>&#xFF0C;&#x90FD;&#x5177;&#x6709; w&#x2019;x+b&#xFF0C;&#x5176;&#x4E2D;w&#x548C;b&#x662F;&#x5F85;&#x6C42;&#x53C2;&#x6570;&#xFF0C;&#x5176;&#x533A;&#x522B;&#x5728;&#x4E8E;&#x4ED6;&#x4EEC;&#x7684;<strong>&#x56E0;&#x53D8;&#x91CF;&#x4E0D;&#x540C;</strong>&#xFF0C;&#x591A;&#x91CD;&#x7EBF;&#x6027;&#x56DE;&#x5F52;&#x76F4;&#x63A5;&#x5C06;w&#x2019;x+b&#x4F5C;&#x4E3A;&#x56E0;&#x53D8;&#x91CF;&#xFF0C;&#x5373;y =w&#x2019;x+b&#xFF0C;&#x800C;logistic&#x56DE;&#x5F52;&#x5219;&#x901A;&#x8FC7;&#x51FD;&#x6570;L&#x5C06;w&#x2019;x+b&#x5BF9;&#x5E94;&#x4E00;&#x4E2A;&#x9690;&#x72B6;&#x6001;p&#xFF0C;p =g(w&#x2019;x+b),&#x7136;&#x540E;<strong>&#x6839;&#x636E;p &#x4E0E;1-p&#x7684;&#x5927;&#x5C0F;&#x51B3;&#x5B9A;&#x56E0;&#x53D8;&#x91CF;&#x7684;&#x503C;</strong>&#x3002;&#x5982;&#x679C;g&#x662F;logistic&#x51FD;&#x6570;&#xFF0C;&#x5C31;&#x662F;logistic&#x56DE;&#x5F52;&#x3002;<br><a id="more"></a></p><h1 id="&#x6838;&#x5FC3;&#x601D;&#x60F3;"><a href="#&#x6838;&#x5FC3;&#x601D;&#x60F3;" class="headerlink" title="&#x6838;&#x5FC3;&#x601D;&#x60F3;"></a><font size="5" color="red">&#x6838;&#x5FC3;&#x601D;&#x60F3;</font></h1><h2 id="&#x9884;&#x6D4B;&#x51FD;&#x6570;"><a href="#&#x9884;&#x6D4B;&#x51FD;&#x6570;" class="headerlink" title="&#x9884;&#x6D4B;&#x51FD;&#x6570;"></a><font size="4">&#x9884;&#x6D4B;&#x51FD;&#x6570;</font></h2><p>&#x5BF9;&#x4E8E;&#x4E8C;&#x5206;&#x7C7B;&#x95EE;&#x9898;&#xFF0C;$y \in \lbrace 0,1 \rbrace$&#xFF0C;1&#x8868;&#x793A;&#x6B63;&#x4F8B;&#xFF0C;0&#x8868;&#x793A;&#x8D1F;&#x4F8B;&#x3002;&#x903B;&#x8F91;&#x56DE;&#x5F52;&#x662F;&#x5728;&#x7EBF;&#x6027;&#x51FD;&#x6570;$W^Tx$&#x8F93;&#x51FA;&#x9884;&#x6D4B;&#x5B9E;&#x9645;&#x503C;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x5BFB;&#x627E;&#x4E00;&#x4E2A;&#x5047;&#x8BBE;&#x51FD;&#x6570;&#x51FD;&#x6570;$h_W(x)=g(W^Tx)$&#xFF0C;&#x5C06;&#x5B9E;&#x9645;&#x503C;&#x6620;&#x5C04;&#x5230;&#x5230;0&#xFF0C;1&#x4E4B;&#x95F4;&#xFF0C;&#x5982;&#x679C;$y =\begin{cases} 1 , &amp; h_W(x) \ge 0.5 \0 , &amp; h_W(x) &lt;0.5 \end{cases}$&#xFF0C;&#x903B;&#x8F91;&#x56DE;&#x5F52;&#x4E2D;&#x9009;&#x62E9;&#x5BF9;&#x6570;&#x51E0;&#x7387;&#x51FD;&#x6570;(logistic function)&#x4F5C;&#x4E3A;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;<br>$$g(z)=\frac{1}{1+e^(-z)}$$<br><img src="/images/MACHINE/lr1.png" alt="sigmod"><br>$$g(W^Tx)=\frac{1}{1+e^(-W^Tx+b)}$$<br>$$ln\frac{g(W^Tx)}{1-g(W^Tx)}=W^Tx+b$$<br>&#x82E5;&#x5C06;$g(W^Tx)$&#x89C6;&#x4E3A;&#x6837;&#x672C;x&#x4F5C;&#x4E3A;&#x6B63;&#x4F8B;&#x7684;&#x6982;&#x7387;&#xFF0C;&#x5219;$1-g(W^Tx)$&#x662F;&#x53CD;&#x4F8B;&#x7684;&#x6982;&#x7387;&#x3002;&#x4E24;&#x8005;&#x7684;&#x6BD4;&#x503C;&#x79F0;&#x4E3A;&#x51E0;&#x7387;&#xFF0C;&#x53CD;&#x5E94;&#x4E86;x&#x4F5C;&#x4E3A;&#x6B63;&#x4F8B;&#x7684;&#x76F8;&#x5BF9;&#x53EF;&#x80FD;&#x6027;&#x3002;&#x5BF9;&#x51E0;&#x7387;&#x53D6;&#x5BF9;&#x6570;&#x5219;&#x5F97;&#x5230;&#x201D;&#x5BF9;&#x6570;&#x51E0;&#x7387;&#x201D;(log odds,&#x4EA6;&#x79F0;logit)</p><h2 id="&#x635F;&#x5931;&#x51FD;&#x6570;"><a href="#&#x635F;&#x5931;&#x51FD;&#x6570;" class="headerlink" title="&#x635F;&#x5931;&#x51FD;&#x6570;"></a><font size="4">&#x635F;&#x5931;&#x51FD;&#x6570;</font></h2><p>&#x901A;&#x8FC7;&#x6781;&#x5927;&#x4F3C;&#x7136;&#x4F30;&#x8BA1;W&#x548C;b&#xFF0C;&#x53EF;&#x5F97;cost&#x51FD;&#x6570;L&#x548C;&#x635F;&#x5931;&#x51FD;&#x6570;J&#x3002;<br>$$L(\hat{y},y)=-(ylog \hat{y}+(1-y)log(1- \hat{y}))$$<br>$$J(W,b)=\frac{1}{m} \displaystyle \sum_{i=1}^mL(\hat{y}^{(i)},y^{(i)})$$<br>&#x4E0B;&#x9762;&#x8F6C;&#x5316;&#x4E3A;&#x6C42;$\underset{W,b}{arg\ min}\ J(W,b)$<br><br><br></p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><h2 id="LR-train-m"><a href="#LR-train-m" class="headerlink" title="LR_train.m"></a>LR_train.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;</span><br><span class="line">f_sigmod=@(x)1./(1+exp(-x));</span><br><span class="line">%x&#x4E3A;&#x6837;&#x672C;&#xFF0C;&#x884C;&#x6570;&#x4EE3;&#x8868;&#x7279;&#x5F81;&#x6570;&#xFF0C;&#x5217;&#x6570;&#x4EE3;&#x8868;&#x6837;&#x672C;&#x6570;,&#x4EE5;&#x5217;&#x5411;&#x91CF;&#x7684;&#x5F62;&#x5F0F;&#x8F93;&#x51FA;&#xFF0C;label&#x4E3A;&#x6837;&#x672C;&#x6240;&#x5BF9;&#x5E94;&#x7684;&#x7C7B;&#x522B;</span><br><span class="line">train_x=[0.5,0.5,0.8,0.2,0.1;...</span><br><span class="line">    0.8,0.7,0.6,0.2,0.4];</span><br><span class="line">%1&#x4E3A;&#x7B2C;&#x4E00;&#x7C7B;&#xFF0C;2&#x4E3A;&#x7B2C;&#x4E8C;&#x7C7B;</span><br><span class="line">train_y=[1,1,1,0,0];</span><br><span class="line">%&#x7279;&#x5F81;&#x6570;</span><br><span class="line">feat_num=size(train_x,1);</span><br><span class="line">%&#x6837;&#x672C;&#x6570;</span><br><span class="line">train_num=size(train_x,2);</span><br><span class="line">%&#x8BBE;&#x7F6E;&#x6700;&#x5927;&#x8FED;&#x4EE3;&#x6B21;&#x6570;</span><br><span class="line">times=10000;</span><br><span class="line">%&#x5B66;&#x4E60;&#x7387;</span><br><span class="line">a=0.1;</span><br><span class="line">%&#x6743;&#x5411;&#x91CF;</span><br><span class="line">w=rand(1,feat_num+1);</span><br><span class="line">%&#x589E;&#x5E7F;&#x77E9;&#x9635;</span><br><span class="line">x_expend=[train_x;ones(1,train_num)];</span><br><span class="line">for i=1:times</span><br><span class="line">    tem=w;</span><br><span class="line">    %w=w-a/m*&#x3A3;(sigmod(wx)-y)x</span><br><span class="line">    w=w-a/train_num*sum(repmat((f_sigmod(w*x_expend)-train_y),feat_num+1,1).*x_expend,2)&apos;;</span><br><span class="line">    if sum(abs(w-tem))&lt;5e-3</span><br><span class="line">        break;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">disp(i)</span><br><span class="line">if i&gt;=times</span><br><span class="line">    disp(&apos;The question is not Linearly Separable&apos;);</span><br><span class="line">%&#x5426;&#x5219;&#x7EBF;&#x6027;&#x53EF;&#x5206;&#xFF0C;&#x5199;&#x51FA;&#x51FD;&#x6570;&#x8868;&#x8FBE;&#x5F0F;</span><br><span class="line">else</span><br><span class="line">    express=[];</span><br><span class="line">    %&#x8F93;&#x51FA;&#x8868;&#x8FBE;&#x5F0F;</span><br><span class="line">    for i=1:feat_num</span><br><span class="line">        if w(i)&gt;0</span><br><span class="line">            express=[express,num2str(w(i)),&apos;x&apos;,num2str(i),&apos;+&apos;];</span><br><span class="line">        elseif w(i)&lt;0</span><br><span class="line">            express=[express(1:end-1),num2str(w(i)),&apos;x&apos;,num2str(i),&apos;+&apos;];</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    if w(feat_num+1)==0</span><br><span class="line">        express=[express(1:end-1),&apos;=0&apos;];</span><br><span class="line">    elseif w(feat_num+1)&gt;0</span><br><span class="line">        express=[express(1:end),num2str(w(feat_num+1)),&apos;=0&apos;];</span><br><span class="line">    else</span><br><span class="line">        express=[express(1:end-1),num2str(w(feat_num+1)),&apos;=0&apos;];</span><br><span class="line">    end</span><br><span class="line">    fprintf([&apos;&#x51B3;&#x7B56;&#x9762;&#x51FD;&#x6570;&#x4E3A;:&apos;,express,&apos;\n\n&apos;]);</span><br><span class="line">    disp(&apos;&#x8FD0;&#x884C;LR_test&#x5F00;&#x59CB;&#x6D4B;&#x8BD5;&apos;);</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="LR-test-m"><a href="#LR-test-m" class="headerlink" title="LR_test.m"></a>LR_test.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">close all;</span><br><span class="line">%&#x8F93;&#x5165;&#x6D4B;&#x8BD5;&#x96C6;</span><br><span class="line">test_x=rand(2,10);</span><br><span class="line">%&#x6D4B;&#x8BD5;&#x96C6;&#x6837;&#x672C;&#x6570;</span><br><span class="line">test_num=size(test_x,2);</span><br><span class="line">%&#x5982;&#x679C;&#x8BEF;&#x5DEE;&#x4E0D;&#x80FD;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#xFF0C;&#x6B64;&#x4E3A;&#x7EBF;&#x6027;&#x4E0D;&#x53EF;&#x5206;&#x95EE;&#x9898;</span><br><span class="line">if i&gt;=times</span><br><span class="line">    disp(&apos;The question is not Linearly Separable&apos;);</span><br><span class="line">%&#x5982;&#x679C;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#x53EF;&#x4EE5;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x8D85;&#x5E73;&#x9762;</span><br><span class="line">else</span><br><span class="line">    %&#x5982;&#x679C;&#x662F;&#x4E8C;&#x4F4D;&#x7279;&#x5F81;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x5E73;&#x9762;&#x5750;&#x6807;&#x7CFB;&#x7ED8;&#x56FE;&#x8868;&#x793A;</span><br><span class="line">    if feat_num==2</span><br><span class="line">        hold on;</span><br><span class="line">        axis([0,1,0,1])</span><br><span class="line">        if w(1)==0</span><br><span class="line">            line_x=[0,1];</span><br><span class="line">            line_y=[-w(3)/w(2),-w(3)/w(2)];</span><br><span class="line">        elseif w(2)==0</span><br><span class="line">            line_x=[-w(3)/w(1),-w(3)/w(1)];</span><br><span class="line">            line_y=[0,1];</span><br><span class="line">        else</span><br><span class="line">            line_x=[0,1];</span><br><span class="line">            line_y=[-w(3)/w(2),(-w(3)-w(1))/w(2)];</span><br><span class="line">        end</span><br><span class="line">        %&#x7528;&#x9ED1;&#x8272;&#x7ED8;&#x5236;&#x5206;&#x754C;&#x7EBF;</span><br><span class="line">        plot(line_x,line_y,&apos;k&apos;);</span><br><span class="line">        %&#x7ED8;&#x5236;&#x6D4B;&#x8BD5;&#x96C6;&#x6837;&#x672C;&#x70B9;</span><br><span class="line">        test_y=w*[test_x;ones(1,test_num)];</span><br><span class="line">        for i=1:test_num</span><br><span class="line">            %&#x5982;&#x679C;&#x5927;&#x4E8E;0&#xFF0C;&#x5219;&#x5F52;&#x4E3A;&#x4E00;&#x7C7B;&#xFF0C;&#x7528;&#x7EA2;&#x8272;&#x7684;&#x5708;&#x8868;&#x793A;</span><br><span class="line">            if test_y(i)&gt;0</span><br><span class="line">                plot(test_x(1,i),test_x(2,i),&apos;ro&apos;);</span><br><span class="line">            %&#x5982;&#x679C;&#x5C0F;&#x4E8E;0&#xFF0C;&#x5219;&#x5F52;&#x4E3A;&#x4E00;&#x7C7B;&#xFF0C;&#x7528;&#x84DD;&#x8272;&#x7684;&#x5708;&#x8868;&#x793A;</span><br><span class="line">            elseif test_y(i)&lt;0</span><br><span class="line">                plot(test_x(1,i),test_x(2,i),&apos;bo&apos;);</span><br><span class="line">            %&#x5426;&#x5219;&#x7528;&#x7EFF;&#x8272;&#x7684;&#x5708;&#x8868;&#x793A;</span><br><span class="line">            else</span><br><span class="line">                plot(test_x(1,i),test_x(2,i),&apos;go&apos;);</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">        %&#x8BF4;&#x660E;1&#x7C7B;&#x5BF9;&#x5E94;&#x7EA2;&#x8272;&#xFF0C;2&#x7C7B;&#x5BF9;&#x5E94;&#x84DD;&#x8272;</span><br><span class="line">        if (train_x(1,1)*w(1)+train_x(2,1)*w(2)+w(3)&gt;=0&amp;&amp;train_y(1)==1)||(train_x(1,i)*w(1)+train_x(2,i)*w(2)+w(3)&lt;0&amp;&amp;train_y(1)==0)</span><br><span class="line">            %&#x7ED8;&#x5236;&#x8BAD;&#x7EC3;&#x96C6;&#x6837;&#x672C;&#x70B9;</span><br><span class="line">            for i=1:train_num</span><br><span class="line">                %&#x5982;&#x679C;&#x5927;&#x4E8E;0&#xFF0C;&#x5219;&#x5F52;&#x4E3A;&#x4E00;&#x7C7B;&#xFF0C;&#x7528;&#x7EA2;&#x8272;&#x7684;*&#x8868;&#x793A;</span><br><span class="line">                if train_y(i)==1</span><br><span class="line">                    plot(train_x(1,i),train_x(2,i),&apos;r*&apos;)</span><br><span class="line">                %&#x5982;&#x679C;&#x5C0F;&#x4E8E;0&#xFF0C;&#x5219;&#x5F52;&#x4E3A;&#x4E00;&#x7C7B;&#xFF0C;&#x7528;&#x84DD;&#x8272;&#x7684;*&#x8868;&#x793A;</span><br><span class="line">                else</span><br><span class="line">                    plot(train_x(1,i),train_x(2,i),&apos;b*&apos;)</span><br><span class="line">                end</span><br><span class="line">            end</span><br><span class="line">        %&#x8BF4;&#x660E;1&#x7C7B;&#x5BF9;&#x5E94;&#x84DD;&#x8272;&#xFF0C;2&#x7C7B;&#x5BF9;&#x5E94;&#x7EA2;&#x8272;</span><br><span class="line">        else</span><br><span class="line">            for i=1:train_num</span><br><span class="line">                %&#x5982;&#x679C;&#x5927;&#x4E8E;0&#xFF0C;&#x5219;&#x5F52;&#x4E3A;&#x4E00;&#x7C7B;&#xFF0C;&#x7528;&#x7EA2;&#x8272;&#x7684;*&#x8868;&#x793A;</span><br><span class="line">                if train_y(i)==1</span><br><span class="line">                    plot(train_x(1,i),train_x(2,i),&apos;b*&apos;)</span><br><span class="line">                %&#x5982;&#x679C;&#x5C0F;&#x4E8E;0&#xFF0C;&#x5219;&#x5F52;&#x4E3A;&#x4E00;&#x7C7B;&#xFF0C;&#x7528;&#x84DD;&#x8272;&#x7684;*&#x8868;&#x793A;</span><br><span class="line">                else</span><br><span class="line">                    plot(train_x(1,i),train_x(2,i),&apos;r*&apos;)</span><br><span class="line">                end</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">        hold off</span><br><span class="line">    %&#x5982;&#x679C;&#x4E0D;&#x662F;&#x4E24;&#x4E2A;&#x7279;&#x5F81;&#x4E0D;&#x80FD;&#x7528;&#x5E73;&#x9762;&#x5750;&#x6807;&#x7CFB;&#x8868;&#x793A;</span><br><span class="line">    else</span><br><span class="line">        disp(&apos;The Feature Is Not Two-Dimensional&apos;);</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><p><br><br></p><h1 id="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"><a href="#&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;" class="headerlink" title="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"></a><font size="5" color="red">&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;</font></h1><p><img src="/images/MACHINE/lr2.png" alt="LR"></p><h1 id="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"><a href="#&#x6027;&#x80FD;&#x6BD4;&#x8F83;" class="headerlink" title="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x6027;&#x80FD;&#x6BD4;&#x8F83;</font></h1><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x5BB9;&#x6613;&#x7406;&#x89E3;</li><li>&#x9002;&#x5408;&#x4E8E;&#x5927;&#x591A;&#x6570;&#x7EBF;&#x6027;&#x5206;&#x7C7B;&#x7684;&#x4EFB;&#x52A1;</li><li>&#x9C81;&#x68D2;&#x6027;&#x8F83;&#x597D;&#xFF0C;&#x80FD;&#x591F;&#x62B5;&#x6321;&#x8F7B;&#x5FAE;&#x566A;&#x58F0;&#x7684;&#x5F71;&#x54CD;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x5BB9;&#x6613;&#x6B20;&#x62DF;&#x5408;</li><li>&#x5728;&#x591A;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x6216;&#x8005;&#x975E;&#x7EBF;&#x6027;&#x4EFB;&#x52A1;&#x4E0A;&#x96BE;&#x4EE5;&#x4F7F;&#x7528;</li><li>&#x7279;&#x5F81;&#x7A7A;&#x95F4;&#x8F83;&#x5927;&#x6216;&#x8005;&#x7279;&#x5F81;&#x7F3A;&#x5931;&#x60C5;&#x51B5;&#x4E0B;&#x8868;&#x73B0;&#x8F83;&#x5DEE;</li></ul></font></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Logistics Regression&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="有监督学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%89%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>差分进化算法(DE)</title>
    <link href="https://USTCcoder.github.io/2019/05/27/optimization_DE/"/>
    <id>https://USTCcoder.github.io/2019/05/27/optimization_DE/</id>
    <published>2019-05-27T07:28:55.000Z</published>
    <updated>2019-09-26T03:59:57.834Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x5DEE;&#x5206;&#x8FDB;&#x5316;&#x7B97;&#x6CD5;</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;DE(Differential Evolution Algorithm):&#x662F;&#x4E00;&#x79CD;&#x9AD8;&#x6548;&#x7684;&#x5168;&#x5C40;&#x4F18;&#x5316;&#x7B97;&#x6CD5;&#x3002;&#x5B83;&#x4E5F;&#x662F;&#x57FA;&#x4E8E;&#x7FA4;&#x4F53;&#x7684;&#x542F;&#x53D1;&#x5F0F;&#x641C;&#x7D22;&#x7B97;&#x6CD5;&#xFF0C;&#x7FA4;&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x4E2A;&#x4F53;&#x5BF9;&#x5E94;&#x4E00;&#x4E2A;&#x89E3;&#x5411;&#x91CF;&#x3002;&#x5DEE;&#x5206;&#x8FDB;&#x5316;&#x7B97;&#x6CD5;&#x7684;&#x8FDB;&#x5316;&#x6D41;&#x7A0B;&#x5219;&#x4E0E;&#x9057;&#x4F20;&#x7B97;&#x6CD5;&#x975E;&#x5E38;&#x7C7B;&#x4F3C;&#xFF0C;&#x90FD;&#x5305;&#x62EC;&#x53D8;&#x5F02;&#x3001;&#x6742;&#x4EA4;&#x548C;&#x9009;&#x62E9;&#x64CD;&#x4F5C;&#xFF0C;&#x4F46;&#x8FD9;&#x4E9B;&#x64CD;&#x4F5C;&#x7684;&#x5177;&#x4F53;&#x5B9A;&#x4E49;&#x4E0E;&#x9057;&#x4F20;&#x7B97;&#x6CD5;&#x6709;&#x6240;&#x4E0D;&#x540C;&#x3002;</p><h1 id="&#x6838;&#x5FC3;&#x601D;&#x60F3;"><a href="#&#x6838;&#x5FC3;&#x601D;&#x60F3;" class="headerlink" title="&#x6838;&#x5FC3;&#x601D;&#x60F3;"></a><font size="5" color="red">&#x6838;&#x5FC3;&#x601D;&#x60F3;</font></h1><p>&#x2003;&#x2003;<font size="4">1. &#x968F;&#x673A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x521D;&#x59CB;&#x79CD;&#x7FA4;</font></p><p>&#x2003;&#x2003;<font size="4">2. &#x6839;&#x636E;&#x9002;&#x5E94;&#x5EA6;&#x5BF9;&#x79CD;&#x7FA4;&#x91C7;&#x7528;&#x67D0;&#x79CD;&#x65B9;&#x5F0F;&#x8FDB;&#x884C;&#x81EA;&#x7136;&#x9009;&#x62E9;</font></p><p>&#x2003;&#x2003;<font size="4">3. &#x5BF9;&#x9009;&#x62E9;&#x5269;&#x4F59;&#x7684;&#x79CD;&#x7FA4;&#x8FDB;&#x884C;&#x5DEE;&#x5206;&#x9057;&#x4F20;&#xFF0C;&#x4EA7;&#x751F;&#x65B0;&#x7684;&#x79CD;&#x7FA4;</font></p><p>&#x2003;&#x2003;<font size="4">4. &#x5BF9;&#x7236;&#x4EE3;&#x548C;&#x5B50;&#x4EE3;&#x7559;&#x4E00;&#x5904;&#x7406;&#xFF0C;&#x56DE;&#x5230;&#x6B65;&#x9AA4;2&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;</font></p><p>&#x2003;&#x2003;<font size="4">5. &#x6B64;&#x65F6;&#x5269;&#x4F59;&#x7684;&#x662F;&#x9002;&#x5E94;&#x5EA6;&#x8F83;&#x597D;&#x7684;&#x79CD;&#x7FA4;&#xFF0C;&#x6BD4;&#x8F83;&#x53EF;&#x5F97;&#x8BE5;&#x7B97;&#x6CD5;&#x7684;&#x6700;&#x4F18;&#x89E3;</font></p><h1 id="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"><a href="#&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;</font></h1><p><img src="/images/OPTIMIZATION/de2.png" alt="DE"></p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><p><font size="4">&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;<a href="https://ustccoder.github.io/2019/05/19/optimization_Testfunction/">&#x6D4B;&#x8BD5;&#x51FD;&#x6570;(Test Function)</a></font></p><h2 id="DE-main-m"><a href="#DE-main-m" class="headerlink" title="DE_main.m"></a>DE_main.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">%&#x81EA;&#x53D8;&#x91CF;&#x53D6;&#x503C;&#x8303;&#x56F4;</span><br><span class="line">range_x=[ones(1,1),-ones(1,1)]*500;</span><br><span class="line">%&#x7EF4;&#x5EA6;</span><br><span class="line">n=size(range_x,1);</span><br><span class="line">%&#x79CD;&#x7FA4;&#x6570;&#x91CF;</span><br><span class="line">gn=100;</span><br><span class="line">%&#x8FED;&#x4EE3;&#x6B21;&#x6570;</span><br><span class="line">times=1000;</span><br><span class="line">%&#x4EA4;&#x53C9;&#x6982;&#x7387;</span><br><span class="line">cr=0.5;</span><br><span class="line">%&#x968F;&#x673A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x79CD;&#x7FA4;</span><br><span class="line">group=zeros(n,gn);</span><br><span class="line">for k=1:n</span><br><span class="line">    group(k,:)=(rand(1,gn))*(range_x(k,2)-range_x(k,1))+range_x(k,1);</span><br><span class="line">end</span><br><span class="line">%&#x8BBE;&#x7F6E;&#x5F53;&#x524D;&#x6700;&#x4F18;&#x89E3;</span><br><span class="line">best_value=zeros(1,times);</span><br><span class="line">tic;</span><br><span class="line">for k=1:times</span><br><span class="line">    for i=1:gn</span><br><span class="line">        %&#x57FA;&#x56E0;&#x91CD;&#x7EC4;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x53EF;&#x80FD;&#x53D1;&#x751F;&#x67D3;&#x8272;&#x4F53;&#x53D8;&#x5F02;</span><br><span class="line">        exchange=randperm(gn,3);</span><br><span class="line">        h=group(:,exchange(1))+rand(1)*(group(:,exchange(2))-group(:,exchange(3)));</span><br><span class="line">        h(h&gt;500)=500;</span><br><span class="line">        h(h&lt;-500)=-500;</span><br><span class="line">        v=group(:,i);</span><br><span class="line">        %&#x67D3;&#x8272;&#x4F53;&#x4EA4;&#x6362;,&#x4FDD;&#x7559;&#x7684;&#x7269;&#x79CD;&#x4EA7;&#x751F;&#x540E;&#x4EE3;&#x65F6;&#x53D1;&#x751F;&#x57FA;&#x56E0;&#x91CD;&#x7EC4;</span><br><span class="line">        for j=1:n</span><br><span class="line">            if cr&gt;rand(1)</span><br><span class="line">                v(j)=h(j);</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">        if f(v)&lt;f(group(:,i))</span><br><span class="line">            group(:,i)=v;</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    best_value(k)=min(f(group));</span><br><span class="line">    if k&gt;100&amp;&amp;abs(best_value(k)-best_value(k-100))&lt;1e-5</span><br><span class="line">        break;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">time=toc;</span><br><span class="line">disp([&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;])</span><br><span class="line">[mini,index]=min(f(group));</span><br><span class="line">disp([&apos;fmin=&apos;,num2str(mini)]);</span><br><span class="line">for k=1:n</span><br><span class="line">    disp([&apos;x&apos;,num2str(k),&apos;=&apos;,num2str(group(k,index))]);</span><br><span class="line">end</span><br><span class="line">if n==1</span><br><span class="line">    hold on;</span><br><span class="line">    plot(group(index),mini,&apos;ro&apos;);</span><br><span class="line">    plot_x=range_x(1):(range_x(2)-range_x(1))/1000:range_x(2);</span><br><span class="line">    plot_y=f(plot_x);</span><br><span class="line">    plot(plot_x,plot_y);</span><br><span class="line">    text((range_x(1)+range_x(2))/2,max(plot_y)+0.1*(max(plot_y)-min(plot_y)),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]);</span><br><span class="line">    hold off;</span><br><span class="line">end</span><br><span class="line">if n==2</span><br><span class="line">    %&#x6240;&#x6C42;&#x6700;&#x5C0F;&#x503C;&#x7684;&#x51FD;&#x6570;</span><br><span class="line">    func=@(x1,x2)x1.*sin(sqrt(abs(x1)))+x2.*sin(sqrt(abs(x2)));</span><br><span class="line">    plot_x=range_x(1,1):(range_x(1,2)-range_x(1,1))/1000:range_x(1,2);</span><br><span class="line">    plot_y=range_x(2,1):(range_x(2,2)-range_x(2,1))/1000:range_x(2,2);</span><br><span class="line">    [plot_x,plot_y] =meshgrid(plot_x,plot_y);</span><br><span class="line">    plot_z=func(plot_x,plot_y);</span><br><span class="line">    surf(plot_x,plot_y,plot_z);</span><br><span class="line">    xlabel(&apos;x1&apos;);</span><br><span class="line">    ylabel(&apos;x2&apos;);</span><br><span class="line">    zlabel(&apos;y&apos;);</span><br><span class="line">    hold on;</span><br><span class="line">    plot3(group(1,index),group(2,index),mini,&apos;ko&apos;)</span><br><span class="line">    text((range_x(1,1)+range_x(1,2))/2,(range_x(2,1)+range_x(2,2))/2,max(max(plot_z))+0.5*(max(max(plot_z))-min(min(plot_z))),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]);</span><br><span class="line">    hold off;</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="f-m"><a href="#f-m" class="headerlink" title="f.m"></a>f.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function res=f(x)</span><br><span class="line">func=@(x)(x).*sin(sqrt(abs(x)));</span><br><span class="line">res=zeros(1,size(x,2));</span><br><span class="line">for i=1:size(x,1)</span><br><span class="line">    res=res+func(x(i,:));</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><p><br><br></p><h1 id="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"><a href="#&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;" class="headerlink" title="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"></a><font size="5" color="red">&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;</font></h1><p><img src="/images/OPTIMIZATION/de1.png" alt="DE"><br>$$f(x)=x \cdot \sin(\sqrt{\lvert x \rvert}) \ , \ x \in [-500,500]$$</p><p>$$&#x7406;&#x8BBA;&#x503C;&#xFF1A;f(x)_{min}=f(-420.96874592006)=-418.982887272434$$</p><p>$$&#x6240;&#x6C42;&#x503C;&#xFF1A;f(x)_{min}=f(-420.975929624477)=-418.982887272434$$</p><h1 id="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"><a href="#&#x6027;&#x80FD;&#x6BD4;&#x8F83;" class="headerlink" title="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x6027;&#x80FD;&#x6BD4;&#x8F83;</font></h1><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5C0F;</li><li>&#x4E0D;&#x4F1A;&#x4EA7;&#x751F;&#x65E9;&#x719F;&#x6536;&#x655B;&#x95EE;&#x9898;</li><li>&#x9002;&#x7528;&#x4E8E;&#x591A;&#x7EF4;&#x7684;&#x6700;&#x4F18;&#x503C;&#x6C42;&#x89E3;</li><li>&#x4ECE;&#x7FA4;&#x4F53;&#x51FA;&#x53D1;&#xFF0C;&#x5177;&#x6709;&#x5E76;&#x884C;&#x6027;</li><li>&#x7B97;&#x6CD5;&#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x79CD;&#x7FA4;&#x7684;&#x9009;&#x62E9;</li><li>&#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898;</li><li>&#x4F7F;&#x7528;&#x6982;&#x7387;&#x673A;&#x5236;&#x8FDB;&#x884C;&#x8FED;&#x4EE3;&#xFF0C;&#x5177;&#x6709;&#x968F;&#x673A;&#x6027;</li><li>&#x5177;&#x6709;&#x53EF;&#x6269;&#x5C55;&#x6027;&#xFF0C;&#x5BB9;&#x6613;&#x4E0E;&#x5176;&#x4ED6;&#x7B97;&#x6CD5;&#x7ED3;&#x5408;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x5BF9;&#x95EE;&#x9898;&#x7F16;&#x7801;&#x8868;&#x793A;&#x8F83;&#x4E3A;&#x56F0;&#x96BE;</li><li>&#x56E0;&#x4E3A;&#x6709;&#x5927;&#x91CF;&#x7684;&#x6BD4;&#x8F83;&#x548C;&#x9009;&#x62E9;&#xFF0C;&#x53EF;&#x80FD;&#x901F;&#x5EA6;&#x7A0D;&#x6162;&#x4E8E;&#x9057;&#x4F20;&#x7B97;&#x6CD5;</li></ul></font></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;DE&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="计算机基础知识" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="全局搜索方法" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2%E6%96%B9%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>全局搜索算法比较(Global Search Algorithm Comparison)</title>
    <link href="https://USTCcoder.github.io/2019/05/26/optimization_compare/"/>
    <id>https://USTCcoder.github.io/2019/05/26/optimization_compare/</id>
    <published>2019-05-26T10:59:14.000Z</published>
    <updated>2019-09-26T03:59:21.634Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x5168;&#x5C40;&#x641C;&#x7D22;&#x7B97;&#x6CD5;&#x6BD4;&#x8F83;</font></strong></center><p></p><h1 id="&#x5168;&#x5C40;&#x641C;&#x7D22;"><a href="#&#x5168;&#x5C40;&#x641C;&#x7D22;" class="headerlink" title="&#x5168;&#x5C40;&#x641C;&#x7D22;"></a><font size="5" color="red">&#x5168;&#x5C40;&#x641C;&#x7D22;</font></h1><p>&#x2003;&#x2003;&#x68AF;&#x5EA6;&#x65B9;&#x6CD5;&#xFF0C;&#x725B;&#x987F;&#x6CD5;&#xFF0C;&#x5171;&#x8F6D;&#x68AF;&#x5EA6;&#x6CD5;&#xFF0C;&#x62DF;&#x725B;&#x987F;&#x6CD5;&#x7B49;&#xFF0C;&#x80FD;&#x591F;&#x4ECE;&#x521D;&#x59CB;&#x70B9;&#x51FA;&#x53D1;&#xFF0C;&#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x8FED;&#x4EE3;&#x5E8F;&#x5217;&#x3002;&#x4F46;&#x662F;&#x5F88;&#x591A;&#x65F6;&#x5019;&#xFF0C;&#x5F80;&#x5F80;&#x53EA;&#x80FD;&#x6536;&#x655B;&#x5230;<strong>&#x5C40;&#x90E8;&#x6781;&#x5C0F;&#x70B9;</strong>&#x3002;&#x56E0;&#x6B64;&#x4E3A;&#x4E86;&#x4FDD;&#x8BC1;&#x7B97;&#x6CD5;&#x80FD;&#x591F;&#x6536;&#x655B;&#x5230;<strong>&#x5168;&#x5C40;&#x6700;&#x5C0F;&#x70B9;</strong>&#xFF0C;&#x9700;&#x8981;&#x501F;&#x52A9;&#x4E8E;<strong>&#x5168;&#x5C40;&#x641C;&#x7D22;&#x7B97;&#x6CD5;</strong>&#x6765;&#x5B9E;&#x73B0;&#x3002;<br><a id="more"></a></p><h1 id="&#x7B97;&#x6CD5;&#x5206;&#x7C7B;"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x7C7B;" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x7C7B;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x5206;&#x7C7B;</font></h1><p><img src="/images/OPTIMIZATION/compare.png" alt="COMPARE"></p><h1 id="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"><a href="#&#x6027;&#x80FD;&#x6BD4;&#x8F83;" class="headerlink" title="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x6027;&#x80FD;&#x6BD4;&#x8F83;</font></h1><p><font size="4">&#x6240;&#x7528;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;<a href="https://ustccoder.github.io/2019/05/19/optimization_Testfunction/">&#x6D4B;&#x8BD5;&#x51FD;&#x6570;(Test Function)</a></font></p><h2 id="&#x6A21;&#x62DF;&#x9000;&#x706B;&#x7B97;&#x6CD5;-SA"><a href="#&#x6A21;&#x62DF;&#x9000;&#x706B;&#x7B97;&#x6CD5;-SA" class="headerlink" title="&#x6A21;&#x62DF;&#x9000;&#x706B;&#x7B97;&#x6CD5;(SA)"></a><a href="https://ustccoder.github.io/2019/05/20/optimization_SA/">&#x6A21;&#x62DF;&#x9000;&#x706B;&#x7B97;&#x6CD5;(SA)</a></h2><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x8BA1;&#x7B97;&#x8FC7;&#x7A0B;&#x7B80;&#x5355;</li><li>&#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898;</li><li>&#x76F8;&#x6BD4;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#xFF0C;&#x589E;&#x52A0;&#x4E86;&#x9003;&#x79BB;&#x5C40;&#x90E8;&#x6700;&#x5C0F;&#x7684;&#x53EF;&#x80FD;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x53C2;&#x6570;&#x654F;&#x611F;</li><li>&#x6536;&#x655B;&#x901F;&#x5EA6;&#x6162;</li><li>&#x6267;&#x884C;&#x65F6;&#x95F4;&#x957F;</li><li>&#x7B97;&#x6CD5;&#x6027;&#x80FD;&#x4E0E;&#x521D;&#x59CB;&#x503C;&#x6709;&#x5173;</li><li>&#x53EF;&#x80FD;&#x843D;&#x5165;&#x5176;&#x4ED6;&#x7684;&#x5C40;&#x90E8;&#x6700;&#x5C0F;&#x503C;</li></ul></font></li></ul><p></p><center><div style="float:left;margin-left:50px"><img src="/images/OPTIMIZATION/sa1.png" width="200" height="260"></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/OPTIMIZATION/compare_sa_2.png" width="200" height="260"></div><br><div style="float:none;clear:both;"></div><p></p><center><div style="float:left;margin-left:50px"><img src="/images/OPTIMIZATION/compare_sa_3.png" width="200" height="260"></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/OPTIMIZATION/compare_sa_4.png" width="200" height="260"></div><br><div style="float:none;clear:both;"></div><h2 id="&#x9057;&#x4F20;&#x7B97;&#x6CD5;-GA"><a href="#&#x9057;&#x4F20;&#x7B97;&#x6CD5;-GA" class="headerlink" title="&#x9057;&#x4F20;&#x7B97;&#x6CD5;(GA)"></a><a href="https://ustccoder.github.io/2019/05/21/optimization_GA/">&#x9057;&#x4F20;&#x7B97;&#x6CD5;(GA)</a></h2><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x4ECE;&#x7FA4;&#x4F53;&#x51FA;&#x53D1;&#xFF0C;&#x5177;&#x6709;&#x5E76;&#x884C;&#x6027;</li><li>&#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898;</li><li>&#x4F7F;&#x7528;&#x6982;&#x7387;&#x673A;&#x5236;&#x8FDB;&#x884C;&#x8FED;&#x4EE3;&#xFF0C;&#x5177;&#x6709;&#x968F;&#x673A;&#x6027;</li><li>&#x5177;&#x6709;&#x53EF;&#x6269;&#x5C55;&#x6027;&#xFF0C;&#x5BB9;&#x6613;&#x4E0E;&#x5176;&#x4ED6;&#x7B97;&#x6CD5;&#x7ED3;&#x5408;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5927;</li><li>&#x53EF;&#x80FD;&#x4EA7;&#x751F;&#x65E9;&#x719F;&#x6536;&#x655B;&#x95EE;&#x9898;</li><li>&#x5BF9;&#x95EE;&#x9898;&#x7F16;&#x7801;&#x8868;&#x793A;&#x8F83;&#x4E3A;&#x56F0;&#x96BE;</li><li>&#x7B97;&#x6CD5;&#x5BF9;&#x521D;&#x59CB;&#x79CD;&#x7FA4;&#x7684;&#x9009;&#x62E9;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x4F9D;&#x8D56;&#x6027;</li><li>&#x641C;&#x7D22;&#x901F;&#x5EA6;&#x6BD4;&#x8F83;&#x6162;&#xFF0C;&#x8981;&#x5F97;&#x5230;&#x8F83;&#x7CBE;&#x786E;&#x7684;&#x89E3;&#x9700;&#x8981;&#x8F83;&#x591A;&#x7684;&#x8BAD;&#x7EC3;&#x65F6;&#x95F4;</li></ul></font></li></ul><p></p><center><div style="float:left;margin-left:50px"><img src="/images/OPTIMIZATION/ga1.png" width="200" height="260"></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/OPTIMIZATION/compare_ga_2.png" width="200" height="260"></div><br><div style="float:none;clear:both;"></div><p></p><center><div style="float:left;margin-left:50px"><img src="/images/OPTIMIZATION/compare_ga_3.png" width="200" height="260"></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/OPTIMIZATION/compare_ga_4.png" width="200" height="260"></div><br><div style="float:none;clear:both;"></div><h2 id="&#x514D;&#x75AB;&#x7B97;&#x6CD5;-IA"><a href="#&#x514D;&#x75AB;&#x7B97;&#x6CD5;-IA" class="headerlink" title="&#x514D;&#x75AB;&#x7B97;&#x6CD5;(IA)"></a><a href="https://ustccoder.github.io/2019/05/22/optimization_IA/">&#x514D;&#x75AB;&#x7B97;&#x6CD5;(IA)</a></h2><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5C0F;</li><li>&#x89E3;&#x51B3;&#x65E9;&#x719F;&#x6536;&#x655B;&#x95EE;&#x9898;</li><li>&#x4ECE;&#x7FA4;&#x4F53;&#x51FA;&#x53D1;&#xFF0C;&#x5177;&#x6709;&#x5E76;&#x884C;&#x6027;</li><li>&#x5BF9;&#x6297;&#x4F53;&#x9009;&#x62E9;&#x7684;&#x4F9D;&#x8D56;&#x6027;&#x964D;&#x4F4E;</li><li>&#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898;</li><li>&#x4F7F;&#x7528;&#x6982;&#x7387;&#x673A;&#x5236;&#x8FDB;&#x884C;&#x8FED;&#x4EE3;&#xFF0C;&#x5177;&#x6709;&#x968F;&#x673A;&#x6027;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x5BF9;&#x95EE;&#x9898;&#x7F16;&#x7801;&#x8868;&#x793A;&#x8F83;&#x4E3A;&#x56F0;&#x96BE;</li><li>&#x8981;&#x8FDB;&#x884C;&#x591A;&#x6B21;&#x514D;&#x75AB;&#x5E94;&#x7B54;&#xFF0C;&#x56E0;&#x6B64;&#x901F;&#x5EA6;&#x6162;&#x4E8E;&#x9057;&#x4F20;&#x7B97;&#x6CD5;</li></ul></font></li></ul><p></p><center><div style="float:left;margin-left:50px"><img src="/images/OPTIMIZATION/ia1.png" width="200" height="260"></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/OPTIMIZATION/compare_ia_2.png" width="200" height="260"></div><br><div style="float:none;clear:both;"></div><p></p><center><div style="float:left;margin-left:50px"><img src="/images/OPTIMIZATION/compare_ia_3.png" width="200" height="260"></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/OPTIMIZATION/compare_ia_4.png" width="200" height="260"></div><br><div style="float:none;clear:both;"></div><h2 id="&#x8681;&#x7FA4;&#x7B97;&#x6CD5;-ACO"><a href="#&#x8681;&#x7FA4;&#x7B97;&#x6CD5;-ACO" class="headerlink" title="&#x8681;&#x7FA4;&#x7B97;&#x6CD5;(ACO)"></a><a href="https://ustccoder.github.io/2019/05/23/optimization_ACO/">&#x8681;&#x7FA4;&#x7B97;&#x6CD5;(ACO)</a></h2><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x641C;&#x7D22;&#x901F;&#x5EA6;&#x8F83;&#x5FEB;</li><li>&#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5C0F;</li><li>&#x4ECE;&#x7FA4;&#x4F53;&#x51FA;&#x53D1;&#xFF0C;&#x5177;&#x6709;&#x5E76;&#x884C;&#x6027;</li><li>&#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898;</li><li>&#x5177;&#x6709;&#x53EF;&#x6269;&#x5C55;&#x6027;&#xFF0C;&#x5BB9;&#x6613;&#x4E0E;&#x5176;&#x4ED6;&#x7B97;&#x6CD5;&#x7ED3;&#x5408;</li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong></font></li><li>&#x5BF9;&#x521D;&#x59CB;&#x8682;&#x8681;&#x7684;&#x6570;&#x91CF;&#x6709;&#x5F88;&#x9AD8;&#x7684;&#x8981;&#x6C42;</li></ul></font></li></ul><p></p><center><div style="float:left;margin-left:50px"><img src="/images/OPTIMIZATION/aco1.png" width="200" height="260"></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/OPTIMIZATION/compare_aco_2.png" width="200" height="260"></div><br><div style="float:none;clear:both;"></div><p></p><center><div style="float:left;margin-left:50px"><img src="/images/OPTIMIZATION/compare_aco_3.png" width="200" height="260"></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/OPTIMIZATION/compare_aco_4.png" width="200" height="260"></div><br><div style="float:none;clear:both;"></div><h2 id="&#x7C92;&#x5B50;&#x7FA4;&#x7B97;&#x6CD5;-PSO"><a href="#&#x7C92;&#x5B50;&#x7FA4;&#x7B97;&#x6CD5;-PSO" class="headerlink" title="&#x7C92;&#x5B50;&#x7FA4;&#x7B97;&#x6CD5;(PSO)"></a><a href="https://ustccoder.github.io/2019/05/24/optimization_PSO/">&#x7C92;&#x5B50;&#x7FA4;&#x7B97;&#x6CD5;(PSO)</a></h2><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x641C;&#x7D22;&#x80FD;&#x529B;&#x6700;&#x5FEB;</li><li>&#x4ECE;&#x7FA4;&#x4F53;&#x51FA;&#x53D1;&#xFF0C;&#x5177;&#x6709;&#x5E76;&#x884C;&#x6027;</li><li>&#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898;</li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong></font></li><li>&#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5927;</li><li>&#x5B58;&#x5728;&#x65E9;&#x719F;&#x6536;&#x655B;&#x95EE;&#x9898;</li><li>&#x5BF9;&#x521D;&#x59CB;&#x7C92;&#x5B50;&#x7FA4;&#x7684;&#x6570;&#x91CF;&#x6709;&#x5F88;&#x9AD8;&#x7684;&#x8981;&#x6C42;</li></ul></font></li></ul><p></p><center><div style="float:left;margin-left:50px"><img src="/images/OPTIMIZATION/pso1.png" width="200" height="260"></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/OPTIMIZATION/compare_pso_2.png" width="200" height="260"></div><br><div style="float:none;clear:both;"></div><p></p><center><div style="float:left;margin-left:50px"><img src="/images/OPTIMIZATION/compare_pso_3.png" width="200" height="260"></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/OPTIMIZATION/compare_pso_4.png" width="200" height="260"></div><br><div style="float:none;clear:both;"></div><h2 id="&#x5355;&#x7EAF;&#x5F62;&#x6CD5;-Nelder-Mead"><a href="#&#x5355;&#x7EAF;&#x5F62;&#x6CD5;-Nelder-Mead" class="headerlink" title="&#x5355;&#x7EAF;&#x5F62;&#x6CD5;(Nelder-Mead)"></a><a href="https://ustccoder.github.io/2019/05/25/optimization_NM/">&#x5355;&#x7EAF;&#x5F62;&#x6CD5;(Nelder-Mead)</a></h2><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5C0F;</li><li>&#x5177;&#x6709;&#x5FEB;&#x901F;&#x968F;&#x673A;&#x7684;&#x641C;&#x7D22;&#x80FD;&#x529B;</li><li>&#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898;</li><li>&#x6BCF;&#x6B21;&#x8FED;&#x4EE3;&#x90FD;&#x66F4;&#x63A5;&#x8FD1;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x7CBE;&#x5EA6;&#x6700;&#x9AD8;</li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong></font></li><li>&#x7B97;&#x6CD5;&#x6027;&#x80FD;&#x4E0E;&#x521D;&#x59CB;&#x503C;&#x6709;&#x5173;</li><li>&#x4E0D;&#x9002;&#x7528;&#x4E8E;&#x591A;&#x7EF4;&#x7684;&#x6700;&#x4F18;&#x503C;&#x6C42;&#x89E3;</li><li>&#x53EF;&#x80FD;&#x843D;&#x5165;&#x5176;&#x4ED6;&#x7684;&#x5C40;&#x90E8;&#x6700;&#x5C0F;&#x503C;</li></ul></font></li></ul><p></p><center><div style="float:left;margin-left:50px"><img src="/images/OPTIMIZATION/nm1.png" width="200" height="260"></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/OPTIMIZATION/compare_nm_2.png" width="200" height="260"></div><br><div style="float:none;clear:both;"></div><p></p><center><div style="float:left;margin-left:50px"><img src="/images/OPTIMIZATION/compare_nm_3.png" width="200" height="260"></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/OPTIMIZATION/compare_nm_4.png" width="200" height="260"></div><br><div style="float:none;clear:both;"></div><h2 id="&#x9057;&#x4F20;&#x5DEE;&#x5206;&#x7B97;&#x6CD5;-DE"><a href="#&#x9057;&#x4F20;&#x5DEE;&#x5206;&#x7B97;&#x6CD5;-DE" class="headerlink" title="&#x9057;&#x4F20;&#x5DEE;&#x5206;&#x7B97;&#x6CD5;(DE)"></a><a href="https://ustccoder.github.io/2019/05/27/optimization_DE/">&#x9057;&#x4F20;&#x5DEE;&#x5206;&#x7B97;&#x6CD5;(DE)</a></h2><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5C0F;</li><li>&#x4E0D;&#x4F1A;&#x4EA7;&#x751F;&#x65E9;&#x719F;&#x6536;&#x655B;&#x95EE;&#x9898;</li><li>&#x9002;&#x7528;&#x4E8E;&#x591A;&#x7EF4;&#x7684;&#x6700;&#x4F18;&#x503C;&#x6C42;&#x89E3;</li><li>&#x4ECE;&#x7FA4;&#x4F53;&#x51FA;&#x53D1;&#xFF0C;&#x5177;&#x6709;&#x5E76;&#x884C;&#x6027;</li><li>&#x7B97;&#x6CD5;&#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x79CD;&#x7FA4;&#x7684;&#x9009;&#x62E9;</li><li>&#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898;</li><li>&#x4F7F;&#x7528;&#x6982;&#x7387;&#x673A;&#x5236;&#x8FDB;&#x884C;&#x8FED;&#x4EE3;&#xFF0C;&#x5177;&#x6709;&#x968F;&#x673A;&#x6027;</li><li>&#x5177;&#x6709;&#x53EF;&#x6269;&#x5C55;&#x6027;&#xFF0C;&#x5BB9;&#x6613;&#x4E0E;&#x5176;&#x4ED6;&#x7B97;&#x6CD5;&#x7ED3;&#x5408;</li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong></font></li><li>&#x5BF9;&#x95EE;&#x9898;&#x7F16;&#x7801;&#x8868;&#x793A;&#x8F83;&#x4E3A;&#x56F0;&#x96BE;</li><li>&#x56E0;&#x4E3A;&#x6709;&#x5927;&#x91CF;&#x7684;&#x6BD4;&#x8F83;&#x548C;&#x9009;&#x62E9;&#xFF0C;&#x53EF;&#x80FD;&#x901F;&#x5EA6;&#x7A0D;&#x6162;&#x4E8E;&#x9057;&#x4F20;&#x7B97;&#x6CD5;</li></ul></font></li></ul><p></p><center><div style="float:left;margin-left:50px"><img src="/images/OPTIMIZATION/de1.png" width="200" height="260"></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/OPTIMIZATION/compare_de_2.png" width="200" height="260"></div><br><div style="float:none;clear:both;"></div><p></p><center><div style="float:left;margin-left:50px"><img src="/images/OPTIMIZATION/compare_de_3.png" width="200" height="260"></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/OPTIMIZATION/compare_de_4.png" width="200" height="260"></div><br><div style="float:none;clear:both;"></div><h2 id="&#x7B97;&#x6CD5;&#x5BF9;&#x6BD4;"><a href="#&#x7B97;&#x6CD5;&#x5BF9;&#x6BD4;" class="headerlink" title="&#x7B97;&#x6CD5;&#x5BF9;&#x6BD4;"></a>&#x7B97;&#x6CD5;&#x5BF9;&#x6BD4;</h2><p></p><center><img src="/images/OPTIMIZATION/compare1.png">&#x641C;&#x7D22;&#x7CBE;&#x5EA6;&#x5206;&#x6790;</center><p></p><div style="float:none;clear:both;"></div><br><center><img src="/images/OPTIMIZATION/compare2.png">&#x6240;&#x7528;&#x65F6;&#x95F4;&#x5206;&#x6790;</center><br><div style="float:none;clear:both;"></div><h1 id="&#x7279;&#x70B9;&#x5C0F;&#x7ED3;"><a href="#&#x7279;&#x70B9;&#x5C0F;&#x7ED3;" class="headerlink" title="&#x7279;&#x70B9;&#x5C0F;&#x7ED3;"></a><font size="5" color="red">&#x7279;&#x70B9;&#x5C0F;&#x7ED3;</font></h1><h2 id="&#x6A21;&#x62DF;&#x9000;&#x706B;&#x7B97;&#x6CD5;-SA-1"><a href="#&#x6A21;&#x62DF;&#x9000;&#x706B;&#x7B97;&#x6CD5;-SA-1" class="headerlink" title="&#x6A21;&#x62DF;&#x9000;&#x706B;&#x7B97;&#x6CD5;(SA)"></a>&#x6A21;&#x62DF;&#x9000;&#x706B;&#x7B97;&#x6CD5;(SA)</h2><ul><li>&#x4E0D;&#x540C;&#x95EE;&#x9898;&#x5BF9;&#x6E29;&#x5EA6;&#x8981;&#x6C42;&#x4E0D;&#x540C;&#xFF0C;&#x8D77;&#x59CB;&#x6E29;&#x5EA6;&#x548C;&#x6E29;&#x5EA6;&#x53D8;&#x5316;&#x7387;&#x90FD;&#x4F1A;&#x5F71;&#x54CD;&#x641C;&#x7D22;&#x7CBE;&#x5EA6;&#x548C;&#x65F6;&#x95F4;</li><li>&#x6BCF;&#x6B21;&#x90FD;&#x968F;&#x673A;&#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x89E3;&#xFF0C;&#x6709;&#x65F6;&#x5F88;&#x96BE;&#x8DF3;&#x51FA;&#x8F83;&#x6DF1;&#x8F83;&#x8FDC;&#x7684;&#x5C40;&#x90E8;&#x6700;&#x4F18;</li><li>&#x53EF;&#x4EE5;&#x91CD;&#x590D;&#x8FD0;&#x7B97;&#x591A;&#x6B21;&#xFF0C;&#x53D6;&#x591A;&#x6B21;&#x7684;&#x6700;&#x5C0F;&#x503C;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x4FDD;&#x8BC1;&#x5F97;&#x5230;&#x5168;&#x5C40;&#x6700;&#x4F18;</li></ul><h2 id="&#x9057;&#x4F20;&#x7B97;&#x6CD5;-GA-1"><a href="#&#x9057;&#x4F20;&#x7B97;&#x6CD5;-GA-1" class="headerlink" title="&#x9057;&#x4F20;&#x7B97;&#x6CD5;(GA)"></a>&#x9057;&#x4F20;&#x7B97;&#x6CD5;(GA)</h2><ul><li>&#x4E0D;&#x540C;&#x7684;&#x95EE;&#x9898;&#x9700;&#x8981;&#x7684;&#x79CD;&#x7FA4;&#x4E2A;&#x6570;&#x4E0D;&#x540C;&#xFF0C;&#x79CD;&#x7FA4;&#x4E2A;&#x6570;&#x8D8A;&#x591A;&#xFF0C;&#x641C;&#x7D22;&#x7CBE;&#x5EA6;&#x8D8A;&#x9AD8;&#xFF0C;&#x7528;&#x65F6;&#x8D8A;&#x957F;</li><li>&#x8FED;&#x4EE3;&#x6B21;&#x6570;&#x8D8A;&#x9AD8;&#xFF0C;&#x81EA;&#x7136;&#x9009;&#x62E9;&#x8D8A;&#x5F3A;&#xFF0C;&#x4FDD;&#x7559;&#x7684;&#x7ED3;&#x679C;&#x8D8A;&#x597D;&#xFF0C;&#x641C;&#x7D22;&#x7CBE;&#x5EA6;&#x8D8A;&#x9AD8;&#xFF0C;&#x7528;&#x65F6;&#x8D8A;&#x957F;</li><li>&#x95EE;&#x9898;&#x7684;&#x8868;&#x793A;&#x5F71;&#x54CD;&#x9057;&#x4F20;&#x7B97;&#x6CD5;&#x7684;&#x6548;&#x7387;&#xFF0C;&#x7528;&#x4E8C;&#x8FDB;&#x5236;&#x57FA;&#x56E0;&#x4E32;&#x8868;&#x793A;&#x8FD8;&#x662F;&#x7528;&#x5341;&#x8FDB;&#x5236;&#x8868;&#x793A;&#x9700;&#x8981;&#x8003;&#x8651;</li><li>&#x81EA;&#x7136;&#x9009;&#x62E9;&#x7684;&#x65B9;&#x5F0F;&#x5F88;&#x91CD;&#x8981;&#xFF0C;&#x91C7;&#x7528;&#x7CBE;&#x82F1;&#x9009;&#x62E9;&#x6216;&#x8F6E;&#x76D8;&#x8D4C;&#x4F1A;&#x4EA7;&#x751F;&#x4E0D;&#x540C;&#x7684;&#x6548;&#x679C;</li><li>&#x9057;&#x4F20;&#x7B97;&#x5B50;&#x5BF9;&#x7B97;&#x6CD5;&#x7684;&#x5F71;&#x54CD;&#x5F88;&#x5927;&#xFF0C;&#x91C7;&#x7528;&#x4F55;&#x79CD;&#x4EA4;&#x53C9;&#x65B9;&#x5F0F;&#x548C;&#x591A;&#x5927;&#x7684;&#x53D8;&#x5F02;&#x7387;&#x6700;&#x5408;&#x9002;</li></ul><h2 id="&#x514D;&#x75AB;&#x7B97;&#x6CD5;-IA-1"><a href="#&#x514D;&#x75AB;&#x7B97;&#x6CD5;-IA-1" class="headerlink" title="&#x514D;&#x75AB;&#x7B97;&#x6CD5;(IA)"></a>&#x514D;&#x75AB;&#x7B97;&#x6CD5;(IA)</h2><ul><li>&#x514D;&#x75AB;&#x7B97;&#x6CD5;&#x5305;&#x542B;&#x9057;&#x4F20;&#x7B97;&#x6CD5;&#x7684;&#x6240;&#x6709;&#x7279;&#x70B9;</li><li>&#x514D;&#x75AB;&#x8FC7;&#x7A0B;&#x4ECE;&#x8BB0;&#x5FC6;&#x7EC6;&#x80DE;&#x4E2D;&#x53D6;&#x51FA;&#x90E8;&#x5206;&#xFF0C;&#x63D0;&#x9AD8;&#x641C;&#x7D22;&#x6548;&#x7387;</li><li>&#x514D;&#x75AB;&#x8FC7;&#x7A0B;&#x968F;&#x673A;&#x4EA7;&#x751F;&#x53E6;&#x4E00;&#x90E8;&#x5206;&#x6297;&#x4F53;&#xFF0C;&#x7ED9;&#x641C;&#x7D22;&#x5230;&#x5176;&#x4ED6;&#x66F4;&#x4F18;&#x70B9;&#x521B;&#x9020;&#x4E86;&#x53EF;&#x80FD;&#x6027;</li><li>&#x6BCF;&#x6B21;&#x7684;&#x514D;&#x75AB;&#x8FC7;&#x7A0B;&#x90FD;&#x76F8;&#x5F53;&#x4E8E;&#x4E00;&#x6B21;&#x9057;&#x4F20;&#x7B97;&#x6CD5;&#xFF0C;&#x56E0;&#x6B64;&#x514D;&#x75AB;&#x6B21;&#x6570;&#x8D8A;&#x591A;&#xFF0C;&#x7CBE;&#x5EA6;&#x8D8A;&#x9AD8;&#xFF0C;&#x65F6;&#x95F4;&#x8D8A;&#x957F;</li></ul><h2 id="&#x8681;&#x7FA4;&#x7B97;&#x6CD5;-ACO-1"><a href="#&#x8681;&#x7FA4;&#x7B97;&#x6CD5;-ACO-1" class="headerlink" title="&#x8681;&#x7FA4;&#x7B97;&#x6CD5;(ACO)"></a>&#x8681;&#x7FA4;&#x7B97;&#x6CD5;(ACO)</h2><ul><li>&#x548C;&#x81EA;&#x7136;&#x754C;&#x4E2D;&#x8681;&#x7FA4;&#x4E00;&#x6837;&#xFF0C;&#x8682;&#x8681;&#x8D8A;&#x591A;&#xFF0C;&#x641C;&#x7D22;&#x7CBE;&#x5EA6;&#x8D8A;&#x9AD8;&#xFF0C;&#x4F46;&#x662F;&#x8BA1;&#x7B97;&#x91CF;&#x5927;&#xFF0C;&#x7528;&#x65F6;&#x66F4;&#x957F;</li><li>&#x8FED;&#x4EE3;&#x6B21;&#x6570;&#x8D8A;&#x9AD8;&#xFF0C;&#x4FE1;&#x606F;&#x7D20;&#x7684;&#x4F5C;&#x7528;&#x65F6;&#x95F4;&#x8D8A;&#x957F;&#xFF0C;&#x6240;&#x6C42;&#x7ED3;&#x679C;&#x66F4;&#x597D;&#xFF0C;&#x7CBE;&#x5EA6;&#x66F4;&#x9AD8;&#xFF0C;&#x7528;&#x65F6;&#x66F4;&#x957F;</li></ul><h2 id="&#x7C92;&#x5B50;&#x7FA4;&#x7B97;&#x6CD5;-PSO-1"><a href="#&#x7C92;&#x5B50;&#x7FA4;&#x7B97;&#x6CD5;-PSO-1" class="headerlink" title="&#x7C92;&#x5B50;&#x7FA4;&#x7B97;&#x6CD5;(PSO)"></a>&#x7C92;&#x5B50;&#x7FA4;&#x7B97;&#x6CD5;(PSO)</h2><ul><li>&#x548C;&#x81EA;&#x7136;&#x754C;&#x4E2D;&#x98DE;&#x9E1F;&#x4E00;&#x6837;&#xFF0C;&#x98DE;&#x9E1F;&#x8D8A;&#x591A;&#x8D8A;&#x5BB9;&#x6613;&#x9047;&#x5230;&#x5168;&#x5C40;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x641C;&#x7D22;&#x7CBE;&#x5EA6;&#x8D8A;&#x9AD8;&#xFF0C;&#x7528;&#x65F6;&#x66F4;&#x957F;</li><li>&#x8FED;&#x4EE3;&#x6B21;&#x6570;&#x8D8A;&#x9AD8;&#xFF0C;&#x98DE;&#x9E1F;&#x4E4B;&#x95F4;&#x7684;&#x4FE1;&#x606F;&#x4EA4;&#x6362;&#x8D8A;&#x591A;&#xFF0C;&#x6240;&#x6C42;&#x7ED3;&#x679C;&#x66F4;&#x597D;&#xFF0C;&#x7CBE;&#x5EA6;&#x66F4;&#x9AD8;&#xFF0C;&#x7528;&#x65F6;&#x66F4;&#x957F;</li><li>&#x7C92;&#x5B50;&#x7FA4;&#x7B97;&#x6CD5;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x9AD8;&#x5EA6;&#x7684;&#x5E76;&#x884C;&#x8BA1;&#x7B97;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x641C;&#x7D22;&#x51FD;&#x6570;&#x6700;&#x503C;&#x65B9;&#x9762;&#x901F;&#x5EA6;&#x6700;&#x5FEB;</li></ul><h2 id="&#x5355;&#x7EAF;&#x5F62;&#x6CD5;-Nelder-Mead-1"><a href="#&#x5355;&#x7EAF;&#x5F62;&#x6CD5;-Nelder-Mead-1" class="headerlink" title="&#x5355;&#x7EAF;&#x5F62;&#x6CD5;(Nelder-Mead)"></a>&#x5355;&#x7EAF;&#x5F62;&#x6CD5;(Nelder-Mead)</h2><ul><li>&#x5355;&#x7EAF;&#x5F62;&#x6CD5;&#x662F;&#x4E00;&#x79CD;&#x6536;&#x7F29;&#x7B97;&#x6CD5;&#xFF0C;&#x5982;&#x679C;&#x521D;&#x59CB;&#x70B9;&#x9009;&#x62E9;&#x5728;&#x5C40;&#x90E8;&#x6781;&#x5C0F;&#x503C;&#x533A;&#x57DF;&#xFF0C;&#x4F1A;&#x6536;&#x7F29;&#x5230;&#x5C40;&#x90E8;&#x6700;&#x5C0F;</li><li>&#x548C;SA&#x76F8;&#x540C;&#xFF0C;&#x53EF;&#x4EE5;&#x91CD;&#x590D;&#x8FD0;&#x7B97;&#x591A;&#x6B21;&#xFF0C;&#x53D6;&#x591A;&#x6B21;&#x7684;&#x6700;&#x5C0F;&#x503C;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x4FDD;&#x8BC1;&#x5F97;&#x5230;&#x5168;&#x5C40;&#x6700;&#x4F18;&#x3002;</li><li>&#x548C;&#x5176;&#x4ED6;&#x7B97;&#x6CD5;&#x4E0D;&#x540C;&#xFF0C;&#x6CA1;&#x6709;&#x968F;&#x673A;&#x6027;&#xFF0C;&#x6BCF;&#x6B21;&#x8FED;&#x4EE3;&#x90FD;&#x4EA7;&#x751F;&#x6BD4;&#x4E0A;&#x4E00;&#x6B21;&#x66F4;&#x4F18;&#x7684;&#x89E3;&#xFF0C;&#x641C;&#x7D22;&#x7CBE;&#x5EA6;&#x6700;&#x9AD8;</li></ul><h2 id="&#x5DEE;&#x5206;&#x8FDB;&#x5316;&#x7B97;&#x6CD5;-DE"><a href="#&#x5DEE;&#x5206;&#x8FDB;&#x5316;&#x7B97;&#x6CD5;-DE" class="headerlink" title="&#x5DEE;&#x5206;&#x8FDB;&#x5316;&#x7B97;&#x6CD5;(DE)"></a>&#x5DEE;&#x5206;&#x8FDB;&#x5316;&#x7B97;&#x6CD5;(DE)</h2><ul><li>&#x5DEE;&#x5206;&#x8FDB;&#x5316;&#x7B97;&#x6CD5;&#x7C7B;&#x4F3C;&#x4E8E;&#x6539;&#x8FDB;&#x7248;&#x7684;&#x9057;&#x4F20;&#x7B97;&#x6CD5;&#xFF0C;&#x66F4;&#x52A0;&#x9002;&#x5408;&#x4E8E;&#x591A;&#x7EF4;&#x6700;&#x4F18;&#x503C;&#x6C42;&#x89E3;</li><li>&#x548C;&#x9057;&#x4F20;&#x7B97;&#x6CD5;&#x4E0D;&#x540C;&#x7684;&#x662F;&#x5177;&#x6709;&#x5DEE;&#x5206;&#x6027;&#x8D28;&#xFF0C;&#x80FD;&#x591F;&#x66F4;&#x5BB9;&#x6613;&#x5730;&#x8DF3;&#x51FA;&#x5F53;&#x524D;&#x7684;&#x5C40;&#x90E8;&#x89E3;</li><li>&#x6DD8;&#x6C70;&#x673A;&#x5236;&#x4E5F;&#x5341;&#x5206;&#x7B80;&#x5355;&#xFF0C;&#x5C06;&#x5B50;&#x4EE3;&#x548C;&#x7236;&#x4EE3;&#x5BF9;&#x6BD4;&#xFF0C;&#x76F4;&#x63A5;&#x6DD8;&#x6C70;&#x8868;&#x73B0;&#x5DEE;&#x7684;&#x89E3;&#xFF0C;&#x7CBE;&#x82F1;&#x9009;&#x62E9;</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Global Search Algorithm Comparison&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="计算机基础知识" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="全局搜索方法" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2%E6%96%B9%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>单纯形法(Nelder-Mead)</title>
    <link href="https://USTCcoder.github.io/2019/05/25/optimization_NM/"/>
    <id>https://USTCcoder.github.io/2019/05/25/optimization_NM/</id>
    <published>2019-05-25T11:33:42.000Z</published>
    <updated>2019-09-26T03:59:38.043Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x5355;&#x7EAF;&#x5F62;&#x6CD5;</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;Nelder-Mead:&#x5355;&#x7EAF;&#x5F62;&#x6CD5;&#x79C9;&#x627F;<strong>&#x4FDD;&#x8BC1;&#x6BCF;&#x4E00;&#x6B21;&#x8FED;&#x4EE3;&#x6BD4;&#x524D;&#x4E00;&#x6B21;&#x66F4;&#x4F18;</strong>&#x7684;&#x57FA;&#x672C;&#x601D;&#x60F3;&#xFF0C;&#x5148;&#x627E;&#x51FA;&#x4E00;&#x4E2A;&#x57FA;&#x672C;&#x53EF;&#x884C;&#x89E3;&#xFF0C;&#x770B;&#x662F;&#x5426;&#x662F;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x82E5;&#x4E0D;&#x662F;&#xFF0C;&#x5219;&#x6309;&#x7167;&#x4E00;&#x5B9A;&#x6CD5;&#x5219;&#x8F6C;&#x6362;&#x5230;&#x53E6;&#x4E00;&#x6539;&#x8FDB;&#x540E;<strong>&#x66F4;&#x4F18;&#x7684;&#x57FA;&#x672C;&#x53EF;&#x884C;&#x89E3;</strong>&#xFF0C;&#x518D;&#x9274;&#x522B;&#xFF0C;&#x82E5;&#x4ECD;&#x4E0D;&#x662F;&#xFF0C;&#x5219;&#x518D;&#x8F6C;&#x6362;&#xFF0C;&#x6309;&#x6B64;&#x91CD;&#x590D;&#x8FDB;&#x884C;&#x3002;&#x56E0;&#x57FA;&#x672C;&#x53EF;&#x884C;&#x89E3;&#x7684;&#x4E2A;&#x6570;&#x6709;&#x9650;&#xFF0C;&#x6545;&#x7ECF;<strong>&#x6709;&#x9650;&#x6B21;&#x8F6C;&#x6362;&#x5FC5;&#x80FD;&#x5F97;&#x51FA;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;</strong>&#x3002;<br><a id="more"></a></p><h1 id="&#x6838;&#x5FC3;&#x601D;&#x60F3;"><a href="#&#x6838;&#x5FC3;&#x601D;&#x60F3;" class="headerlink" title="&#x6838;&#x5FC3;&#x601D;&#x60F3;"></a><font size="5" color="red">&#x6838;&#x5FC3;&#x601D;&#x60F3;</font></h1><p>&#x2003;&#x2003;<font size="4">1. &#x968F;&#x673A;&#x4EA7;&#x751F;N+1&#x4E2A;&#x70B9;&#xFF0C;&#x6784;&#x9020;&#x5355;&#x7EAF;&#x5F62;&#xFF0C;N&#x4E3A;&#x6240;&#x6C42;&#x6781;&#x503C;&#x7684;&#x7EF4;&#x5EA6;</font></p><p>&#x2003;&#x2003;<font size="4">2. &#x5BF9;&#x8FD9;&#x4E9B;&#x70B9;&#x7684;&#x51FD;&#x6570;&#x503C;&#x8FDB;&#x884C;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;&#xFF0C;&#x6C42;&#x51FA;&#x6700;&#x4F18;N&#x4E2A;&#x70B9;&#x7684;&#x91CD;&#x5FC3;p<sub>g</sub></font><br>$$f(p_0) \leq f(p_1) \leq \ldots \leq f(p_N)$$<br>$$p_{g}=\displaystyle \sum_{i=0}^{N-1}\frac {p_{i}}{N}$$</p><p>&#x2003;&#x2003;<font size="4">3. &#x5BF9;&#x6700;&#x5DEE;&#x7684;&#x70B9;&#x8FDB;&#x884C;&#x53CD;&#x5C04;&#x5F97;&#x5230;p<sub>r</sub></font><br>$$p_{r}=p_{g}+\rho \cdot (p_{g}-p_{N}) \ , \ &#x5176;&#x4E2D; \rho &#x4E3A;&#x53CD;&#x5C04;&#x7CFB;&#x6570;$$</p><p>&#x2003;&#x2003;<font size="4">4. &#x5982;&#x679C;f(p<sub>0</sub>)&#x2264;f(p<sub>r</sub>)&lt;f(p<sub>N-1</sub>)&#xFF0C;p<sub>r</sub>&#x4EE3;&#x66FF;p<sub>N</sub>&#xFF0C;&#x56DE;&#x5230;&#x6B65;&#x9AA4;2</font></p><p>&#x2003;&#x2003;<font size="4">5. &#x5982;&#x679C;f(p<sub>r</sub>)&lt;f(p<sub>0</sub>)&#xFF0C;&#x8BF4;&#x660E;p<sub>r</sub>&#x65B9;&#x5411;&#x6709;&#x5229;&#x4E8E;&#x51FD;&#x6570;&#x503C;&#x4E0B;&#x964D;</font><br>$$p_{e}=p_{g}+ \chi \cdot (p_{r}-p_{g}) \ , \ &#x5176;&#x4E2D; \chi &#x4E3A;&#x5EF6;&#x4F38;&#x7CFB;&#x6570;$$</p><p>&#x2003;&#x2003;<font size="4">6. &#x5982;&#x679C;f(p<sub>e</sub>)&lt;f(p<sub>r</sub>)&#xFF0C;p<sub>e</sub>&#x4EE3;&#x66FF;p<sub>N</sub>&#xFF0C;&#x5426;&#x5219;p<sub>r</sub>&#x4EE3;&#x66FF;p<sub>N</sub>&#xFF0C;&#x56DE;&#x5230;&#x6B65;&#x9AA4;2</font></p><p>&#x2003;&#x2003;<font size="4">7. f(p<sub>r</sub>)&#x2265;f(p<sub>N-1</sub>)&#xFF0C;&#x8BF4;&#x660E;&#x8981;&#x8FDB;&#x884C;&#x6536;&#x7F29;&#x64CD;&#x4F5C;</font><br>$$p_{c}= \begin{cases} p_{g}+ \gamma \cdot (p_{r}-p_{g}) &amp;  f(p_{r}) &lt; f(p_{N}) \ p_{g}+ \gamma \cdot (p_{l}-p_{r}) &amp; f(p_{r}) \ge f(p_{N}) \end{cases} \ , \ &#x5176;&#x4E2D; \gamma &#x4E3A;&#x6536;&#x7F29;&#x7CFB;&#x6570;$$</p><p>&#x2003;&#x2003;<font size="4">8. &#x5982;&#x679C;f(p<sub>c</sub>)&#x2264;f(p<sub>N</sub>)&#xFF0C;p<sub>c</sub>&#x4EE3;&#x66FF;p<sub>N</sub>&#xFF0C;&#x56DE;&#x5230;&#x6B65;&#x9AA4;2</font></p><p>&#x2003;&#x2003;<font size="4">9. f(p<sub>c</sub>)&gt;f(p<sub>r</sub>)&#xFF0C;&#x53EA;&#x4FDD;&#x7559;p<sub>0</sub>&#xFF0C;&#x5176;&#x4ED6;&#x70B9;&#x5230;p<sub>0</sub>&#x8DDD;&#x79BB;&#x51CF;&#x534A;&#xFF0C;&#x6536;&#x7F29;&#x5355;&#x7EAF;&#x5F62;</font></p><p>&#x2003;&#x2003;<font size="4">10.&#x5982;&#x679C;&#x4E0D;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;&#xFF0C;&#x56DE;&#x5230;&#x6B65;&#x9AA4;2</font></p><h1 id="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"><a href="#&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;</font></h1><p><img src="/images/OPTIMIZATION/nm2.png" alt="NelderMead"></p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><p><font size="4">&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;<a href="https://ustccoder.github.io/2019/05/19/optimization_Testfunction/">&#x6D4B;&#x8BD5;&#x51FD;&#x6570;(Test Function)</a></font></p><h2 id="NelderMead-main-m"><a href="#NelderMead-main-m" class="headerlink" title="NelderMead_main.m"></a>NelderMead_main.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">%&#x81EA;&#x53D8;&#x91CF;&#x53D6;&#x503C;&#x8303;&#x56F4;</span><br><span class="line">range_x=[ones(1,1),-ones(1,1)]*500;</span><br><span class="line">%&#x7EF4;&#x5EA6;</span><br><span class="line">n=size(range_x,1);</span><br><span class="line">%&#x53CD;&#x5C04;&#x7CFB;&#x6570;rho</span><br><span class="line">rho=1;</span><br><span class="line">%&#x5EF6;&#x4F38;&#x7CFB;&#x6570;</span><br><span class="line">ka1=2;</span><br><span class="line">%&#x6536;&#x7F29;&#x7CFB;&#x6570;</span><br><span class="line">ka2=0.5;</span><br><span class="line">%&#x8FED;&#x4EE3;&#x6B21;&#x6570;</span><br><span class="line">times=100;</span><br><span class="line">%&#x5C1D;&#x8BD5;&#x89E3;&#x6B21;&#x6570;</span><br><span class="line">num=50;</span><br><span class="line">value=zeros(n,num);</span><br><span class="line">tic;</span><br><span class="line">for i=1:num</span><br><span class="line">    %&#x7ED9;x&#x8D4B;&#x521D;&#x503C;</span><br><span class="line">    x=zeros(n,n+1);</span><br><span class="line">    for k=1:n</span><br><span class="line">        x(k,:)=(rand(1,n+1))*(range_x(k,2)-range_x(k,1))+range_x(k,1);</span><br><span class="line">    end</span><br><span class="line">    best_value=zeros(1,times);</span><br><span class="line">    for j=1:times</span><br><span class="line">        [~,index]=sort(f(x));</span><br><span class="line">        %&#x5C06;&#x5C0F;&#x7684;&#x503C;&#x6392;&#x5728;&#x524D;&#x9762;</span><br><span class="line">        x=x(:,index);</span><br><span class="line">        %&#x6C42;&#x91CD;&#x5FC3;pg</span><br><span class="line">        xg=sum(x(:,1:end-1),2)/n;</span><br><span class="line">        %&#x8FDB;&#x884C;&#x53CD;&#x5C04;</span><br><span class="line">        xr=xg+rho*(xg-x(:,n+1));</span><br><span class="line">        %&#x5224;&#x65AD;&#x81EA;&#x53D8;&#x91CF;&#x662F;&#x5426;&#x5728;&#x8303;&#x56F4;</span><br><span class="line">        for k=1:n</span><br><span class="line">            if xr(k)&lt;range_x(k,1)</span><br><span class="line">                xr(k)=range_x(k,1);</span><br><span class="line">            end</span><br><span class="line">            if xr(k)&gt;range_x(k,2)</span><br><span class="line">                xr(k)=range_x(k,2);</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">        %&#x5982;&#x679C;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x503C;&#x5728;&#x6700;&#x597D;&#x548C;&#x6700;&#x574F;&#x4E4B;&#x95F4;</span><br><span class="line">        if f(xr)&gt;=f(x(:,1))&amp;&amp;f(xr)&lt;f(x(:,n))</span><br><span class="line">            x(:,n+1)=xr;</span><br><span class="line">        %&#x5982;&#x679C;&#x65B0;&#x4EA7;&#x751F;&#x7684;&#x70B9;&#x6BD4;&#x6700;&#x5C0F;&#x7684;&#x70B9;&#x8FD8;&#x8981;&#x5C0F;&#xFF0C;&#x8BF4;&#x660E;&#x8FD9;&#x4E2A;&#x65B9;&#x5411;&#x6709;&#x5229;&#x4E8E;&#x503C;&#x7684;&#x51CF;&#x5C0F;</span><br><span class="line">        elseif f(xr)&lt;f(x(:,1))</span><br><span class="line">            %&#x8FDB;&#x4E00;&#x6B65;&#x5411;&#x8FD9;&#x4E2A;&#x65B9;&#x5411;&#x5EF6;&#x4F38;</span><br><span class="line">            xe=xg+ka1*(xr-xg);</span><br><span class="line">            for k=1:n</span><br><span class="line">                if xe(k)&lt;range_x(k,1)</span><br><span class="line">                    xe(k)=range_x(k,1);</span><br><span class="line">                end</span><br><span class="line">                if xe(k)&gt;range_x(k,2)</span><br><span class="line">                    xe(k)=range_x(k,2);</span><br><span class="line">                end</span><br><span class="line">            end</span><br><span class="line">            %&#x5982;&#x679C;&#x7B2C;&#x4E8C;&#x6B21;&#x5EF6;&#x4F38;&#x540E;&#x7684;&#x70B9;&#x6BD4;&#x7B2C;&#x4E00;&#x6B21;&#x5EF6;&#x4F38;&#x540E;&#x4EA7;&#x751F;&#x7684;&#x70B9;&#x5C0F;&#xFF0C;&#x5219;&#x7528;&#x7B2C;&#x4E8C;&#x6B21;&#x5EF6;&#x4F38;&#x540E;&#x7684;&#x70B9;&#x66FF;&#x6362;&#x539F;&#x6765;&#x6700;&#x5927;&#x7684;&#x70B9;</span><br><span class="line">            if f(xe)&lt;f(xr)</span><br><span class="line">                x(:,n+1)=xe;</span><br><span class="line">            %&#x5426;&#x5219;&#x7528;&#x7B2C;&#x4E00;&#x6B21;&#x5EF6;&#x4F38;&#x540E;&#x7684;&#x70B9;&#x66FF;&#x6362;&#x539F;&#x6765;&#x6700;&#x5927;&#x7684;&#x70B9;</span><br><span class="line">            else</span><br><span class="line">                x(:,n+1)=xr;</span><br><span class="line">            end</span><br><span class="line">        %&#x5982;&#x679C;&#x65B0;&#x4EA7;&#x751F;&#x7684;&#x70B9;&#x6BD4;&#x6700;&#x5C0F;&#x7684;&#x70B9;&#x8FD8;&#x8981;&#x5927;</span><br><span class="line">        else</span><br><span class="line">            %&#x5982;&#x679C;&#x65B0;&#x4EA7;&#x751F;&#x7684;&#x70B9;&#x6BD4;&#x6700;&#x5927;&#x7684;&#x70B9;&#x5C0F;&#xFF0C;&#x8BF4;&#x660E;&#x8981;&#x8FDB;&#x884C;&#x5916;&#x6536;&#x7F29;</span><br><span class="line">            if f(xr)&lt;f(x(:,n+1))</span><br><span class="line">                xc=xg+ka2*(xr-xg);</span><br><span class="line">            %&#x5982;&#x679C;&#x65B0;&#x4EA7;&#x751F;&#x7684;&#x70B9;&#x6BD4;&#x6700;&#x5927;&#x7684;&#x70B9;&#x5927;&#xFF0C;&#x8BF4;&#x660E;&#x8981;&#x8FDB;&#x884C;&#x5185;&#x6536;&#x7F29;</span><br><span class="line">            else</span><br><span class="line">                xc=xg+ka2*(x(:,n+1)-xg);</span><br><span class="line">            end</span><br><span class="line">            %&#x5982;&#x679C;&#x65E0;&#x8BBA;&#x8FDB;&#x884C;&#x5185;&#x6536;&#x7F29;&#x8FD8;&#x662F;&#x5916;&#x6536;&#x7F29;&#x4EA7;&#x751F;&#x7684;&#x503C;&#x90FD;&#x6BD4;&#x6700;&#x5927;&#x503C;&#x8981;&#x5C0F;&#xFF0C;&#x5219;&#x66FF;&#x6362;&#x6700;&#x5927;&#x503C;</span><br><span class="line">            if f(xc)&lt;=f(x(:,n+1))</span><br><span class="line">                x(:,n+1)=xc;</span><br><span class="line">            %%&#x5982;&#x679C;&#x65E0;&#x8BBA;&#x8FDB;&#x884C;&#x5185;&#x6536;&#x7F29;&#x8FD8;&#x662F;&#x5916;&#x6536;&#x7F29;&#x4EA7;&#x751F;&#x7684;&#x503C;&#x90FD;&#x6BD4;&#x6700;&#x5927;&#x503C;&#x8981;&#x5927;&#xFF0C;&#x5219;&#x7F29;&#x5C0F;&#x8303;&#x56F4;&#x7EE7;&#x7EED;&#x641C;&#x7D22;</span><br><span class="line">            else</span><br><span class="line">                for k=2:n+1</span><br><span class="line">                    x(:,k)=(x(:,1)+x(:,k))/2;</span><br><span class="line">                end</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">        best_value(j)=x(find(f(x)==min(f(x)),1));</span><br><span class="line">        if j&gt;5&amp;&amp;abs(best_value(j)-best_value(j-5))&lt;1e-5</span><br><span class="line">            break;</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    value(:,i)=x(:,find(f(x)==min(f(x)),1));</span><br><span class="line">end</span><br><span class="line">time=toc;</span><br><span class="line">disp([&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;])</span><br><span class="line">[mini,index]=min(f(value));</span><br><span class="line">disp([&apos;fmin=&apos;,num2str(mini)]);</span><br><span class="line">for k=1:n</span><br><span class="line">    disp([&apos;x&apos;,num2str(k),&apos;=&apos;,num2str(value(k,index))]);</span><br><span class="line">end</span><br><span class="line">if n==1</span><br><span class="line">    hold on;</span><br><span class="line">    plot(value(index),mini,&apos;ro&apos;);</span><br><span class="line">    plot_x=range_x(1):(range_x(2)-range_x(1))/1000:range_x(2);</span><br><span class="line">    plot_y=f(plot_x);</span><br><span class="line">    plot(plot_x,plot_y);</span><br><span class="line">    text((range_x(1)+range_x(2))/2,max(plot_y)+0.1*(max(plot_y)-min(plot_y)),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]);</span><br><span class="line">    hold off;</span><br><span class="line">end</span><br><span class="line">if n==2</span><br><span class="line">    func=@(x1,x2)x1.*sin(sqrt(abs(x1)))+x2.*sin(sqrt(abs(x2)));</span><br><span class="line">    plot_x=range_x(1,1):(range_x(1,2)-range_x(1,1))/1000:range_x(1,2);</span><br><span class="line">    plot_y=range_x(2,1):(range_x(2,2)-range_x(2,1))/1000:range_x(2,2);</span><br><span class="line">    [plot_x,plot_y] =meshgrid(plot_x,plot_y);</span><br><span class="line">    plot_z=func(plot_x,plot_y);</span><br><span class="line">    surf(plot_x,plot_y,plot_z);</span><br><span class="line">    xlabel(&apos;x1&apos;);</span><br><span class="line">    ylabel(&apos;x2&apos;);</span><br><span class="line">    zlabel(&apos;y&apos;);</span><br><span class="line">    hold on;</span><br><span class="line">    plot3(value(1,index),value(2,index),mini,&apos;ko&apos;)</span><br><span class="line">    text((range_x(1,1)+range_x(1,2))/2,(range_x(2,1)+range_x(2,2))/2,max(max(plot_z))+0.5*(max(max(plot_z))-min(min(plot_z))),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]);</span><br><span class="line">    hold off;</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="f-m"><a href="#f-m" class="headerlink" title="f.m"></a>f.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function res=f(x)</span><br><span class="line">func=@(x)(x).*sin(sqrt(abs(x)));</span><br><span class="line">res=zeros(1,size(x,2));</span><br><span class="line">for i=1:size(x,1)</span><br><span class="line">    res=res+func(x(i,:));</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><p><br><br></p><h1 id="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"><a href="#&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;" class="headerlink" title="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"></a><font size="5" color="red">&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;</font></h1><p><img src="/images/OPTIMIZATION/nm1.png" alt="NelderMead"><br>$$f(x)=x \cdot \sin(\sqrt{\lvert x \rvert}) \ , \ x \in [-500,500]$$</p><p>$$&#x7406;&#x8BBA;&#x503C;&#xFF1A;f(x)_{min}=f(-420.96874592006)=-418.982887272434$$</p><p>$$&#x6240;&#x6C42;&#x503C;&#xFF1A;f(x)_{min}=f(-420.968746504328)=-418.982887272434$$</p><h1 id="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"><a href="#&#x6027;&#x80FD;&#x6BD4;&#x8F83;" class="headerlink" title="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x6027;&#x80FD;&#x6BD4;&#x8F83;</font></h1><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5C0F;</li><li>&#x5177;&#x6709;&#x5FEB;&#x901F;&#x968F;&#x673A;&#x7684;&#x641C;&#x7D22;&#x80FD;&#x529B;</li><li>&#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898;</li><li>&#x6BCF;&#x6B21;&#x8FED;&#x4EE3;&#x90FD;&#x66F4;&#x63A5;&#x8FD1;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x7CBE;&#x5EA6;&#x6700;&#x9AD8;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x7B97;&#x6CD5;&#x6027;&#x80FD;&#x4E0E;&#x521D;&#x59CB;&#x503C;&#x6709;&#x5173;</li><li>&#x4E0D;&#x9002;&#x7528;&#x4E8E;&#x591A;&#x7EF4;&#x7684;&#x6700;&#x4F18;&#x503C;&#x6C42;&#x89E3;</li><li>&#x53EF;&#x80FD;&#x843D;&#x5165;&#x5176;&#x4ED6;&#x7684;&#x5C40;&#x90E8;&#x6700;&#x5C0F;&#x503C;</li></ul></font></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Nelder-Mead&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="计算机基础知识" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="全局搜索方法" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2%E6%96%B9%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>粒子群算法(PSO)</title>
    <link href="https://USTCcoder.github.io/2019/05/24/optimization_PSO/"/>
    <id>https://USTCcoder.github.io/2019/05/24/optimization_PSO/</id>
    <published>2019-05-24T13:14:15.000Z</published>
    <updated>2019-09-26T02:47:39.894Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x7C92;&#x5B50;&#x7FA4;&#x7B97;&#x6CD5;</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;PSO(Particle Swarm Optimization):&#x53D7;&#x5230;&#x98DE;&#x9E1F;&#x96C6;&#x7FA4;&#x6D3B;&#x52A8;&#x7684;&#x89C4;&#x5F8B;&#x6027;&#x542F;&#x53D1;&#xFF0C;&#x8FDB;&#x800C;&#x5229;&#x7528;&#x7FA4;&#x4F53;&#x667A;&#x80FD;&#x5EFA;&#x7ACB;&#x7684;&#x4E00;&#x4E2A;&#x7B80;&#x5316;&#x6A21;&#x578B;&#x3002;&#x7C92;&#x5B50;&#x7FA4;&#x7B97;&#x6CD5;&#x5728;&#x5BF9;&#x52A8;&#x7269;&#x96C6;&#x7FA4;&#x6D3B;&#x52A8;&#x884C;&#x4E3A;&#x89C2;&#x5BDF;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x5229;&#x7528;&#x7FA4;&#x4F53;&#x4E2D;&#x7684;&#x4E2A;&#x4F53;&#x5BF9;&#x4FE1;&#x606F;&#x7684;<strong>&#x5171;&#x4EAB;</strong>&#x4F7F;&#x6574;&#x4E2A;&#x7FA4;&#x4F53;&#x7684;&#x8FD0;&#x52A8;&#x5728;&#x95EE;&#x9898;&#x6C42;&#x89E3;&#x7A7A;&#x95F4;&#x4E2D;&#x4EA7;&#x751F;<strong>&#x4ECE;&#x65E0;&#x5E8F;&#x5230;&#x6709;&#x5E8F;</strong>&#x7684;&#x6F14;&#x5316;&#x8FC7;&#x7A0B;&#xFF0C;&#x4ECE;&#x800C;&#x83B7;&#x5F97;&#x6700;&#x4F18;&#x89E3;&#x3002;<br><a id="more"></a></p><h1 id="&#x6838;&#x5FC3;&#x601D;&#x60F3;"><a href="#&#x6838;&#x5FC3;&#x601D;&#x60F3;" class="headerlink" title="&#x6838;&#x5FC3;&#x601D;&#x60F3;"></a><font size="5" color="red">&#x6838;&#x5FC3;&#x601D;&#x60F3;</font></h1><p>&#x2003;&#x2003;<font size="4">1. &#x968F;&#x673A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x7C92;&#x5B50;</font></p><p>&#x2003;&#x2003;<font size="4">2. &#x627E;&#x51FA;&#x6240;&#x6709;&#x7C92;&#x5B50;&#x4E2D;&#x9002;&#x5E94;&#x5EA6;&#x6700;&#x4F18;&#x7684;&#x7C92;&#x5B50;g<sub>best</sub></font><br>$$g_{best}=\underset{x}{arg \ min} \ f(x)$$</p><p>&#x2003;&#x2003;<font size="4">3. &#x66F4;&#x65B0;&#x6BCF;&#x4E00;&#x4E2A;&#x7C92;&#x5B50;&#x7684;&#x98DE;&#x884C;&#x901F;&#x5EA6;</font><br>$$v_{i}&#x2019;=w \cdot v_{i}+c1 \cdot r_{i} \cdot (p_{i}-x_{i})+c2 \cdot s_{i} \cdot (g_{best}-x_{i})$$</p><p>&#x2003;&#x2003;<font size="4">4. &#x83B7;&#x5F97;&#x6BCF;&#x4E2A;&#x7C92;&#x5B50;&#x5F53;&#x524D;&#x4F4D;&#x7F6E;x<sub>i</sub>&#x548C;&#x8BE5;&#x7C92;&#x5B50;&#x5728;&#x98DE;&#x884C;&#x4E2D;&#x5230;&#x8FBE;&#x8FC7;&#x7684;&#x6700;&#x4F18;&#x4F4D;&#x7F6E;p<sub>i</sub></font><br>$$x_{i}&#x2019;=x_{i}+v_{i}&#x2019;$$<br>$$p_{i}&#x2019;= \begin{cases} x_{i}&#x2019; &amp;  f(x_{i}&#x2019;) &lt; f(p_{i}) \ p_{i} &amp; f(x_{i}&#x2019;) \ge f(p_{i}) \end{cases}$$</p><p>&#x2003;&#x2003;<font size="4">5. &#x56DE;&#x5230;&#x6B65;&#x9AA4;2&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;</font></p><p>&#x2003;&#x2003;<font size="4">6. &#x6B64;&#x65F6;&#x7C92;&#x5B50;&#x96C6;&#x7FA4;&#xFF0C;&#x7C92;&#x5B50;&#x7FA4;&#x4F4D;&#x7F6E;&#x4E3A;&#x6781;&#x5C0F;&#x503C;&#xFF0C;&#x6700;&#x5C0F;&#x7684;p&#x4E3A;&#x7B97;&#x6CD5;&#x7684;&#x6700;&#x4F18;&#x89E3;</font></p><p>&#x2003;&#x2003;<font size="4">7. &#x56DE;&#x5230;&#x6B65;&#x9AA4;2&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;</font></p><h1 id="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"><a href="#&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;</font></h1><p><img src="/images/OPTIMIZATION/pso2.png" alt="PSO"></p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><p><font size="4">&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;<a href="https://ustccoder.github.io/2019/05/19/optimization_Testfunction/">&#x6D4B;&#x8BD5;&#x51FD;&#x6570;(Test Function)</a></font></p><h2 id="PSO-main-m"><a href="#PSO-main-m" class="headerlink" title="PSO_main.m"></a>PSO_main.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">%&#x81EA;&#x53D8;&#x91CF;&#x53D6;&#x503C;&#x8303;&#x56F4;</span><br><span class="line">range_x=[ones(1,1),-ones(1,1)]*500;</span><br><span class="line">%&#x7EF4;&#x5EA6;</span><br><span class="line">n=size(range_x,1);</span><br><span class="line">%&#x8FED;&#x4EE3;&#x6B21;&#x6570;</span><br><span class="line">times=100;</span><br><span class="line">%w&#x4E3A;&#x60EF;&#x6027;&#x6743;&#x91CD;</span><br><span class="line">w=0.8;</span><br><span class="line">%c1&#x4E3A;&#x81EA;&#x8EAB;&#x8BA4;&#x77E5;&#x6743;&#x91CD;</span><br><span class="line">c1=1;</span><br><span class="line">%c2&#x4E3A;&#x793E;&#x4F1A;&#x8BA4;&#x77E5;&#x6743;&#x91CD;</span><br><span class="line">c2=1;</span><br><span class="line">%&#x7C92;&#x5B50;&#x7FA4;&#x7684;&#x4E2A;&#x6570;</span><br><span class="line">gn=1000;</span><br><span class="line">%&#x7C92;&#x5B50;&#x7FA4;&#x7684;&#x521D;&#x59CB;&#x4F4D;&#x7F6E;</span><br><span class="line">x=zeros(n,gn);</span><br><span class="line">for k=1:n</span><br><span class="line">    x(k,:)=(rand(1,gn))*(range_x(k,2)-range_x(k,1))+range_x(k,1);</span><br><span class="line">end</span><br><span class="line">%&#x4E2A;&#x4F53;&#x6781;&#x503C;</span><br><span class="line">p=x;</span><br><span class="line">%v&#x4EE3;&#x8868;&#x7C92;&#x5B50;&#x7684;&#x901F;&#x5EA6;</span><br><span class="line">v=zeros(n,gn);</span><br><span class="line">%&#x8BBE;&#x7F6E;&#x5F53;&#x524D;&#x6700;&#x4F18;&#x89E3;</span><br><span class="line">best_value=zeros(1,times);</span><br><span class="line">tic;</span><br><span class="line">for i=1:times</span><br><span class="line">    [solve,gbest]=min(f(x));</span><br><span class="line">    for j=1:gn</span><br><span class="line">        %&#x901F;&#x5EA6;&#x5206;&#x4E3A;3&#x4E2A;&#x90E8;&#x5206;&#xFF0C;&#x60EF;&#x6027;&#x901F;&#x5EA6;&#xFF0C;&#x8BE5;&#x70B9;&#x6700;&#x4F18;&#x548C;&#x5168;&#x5C40;&#x6700;&#x4F18;</span><br><span class="line">        v(:,j)=w*v(:,j)+c1*rand(n,1).*(p(:,j)-x(:,j))+c2*rand(n,1).*(x(:,gbest)-x(:,j));</span><br><span class="line">        x(:,j)=x(:,j)+v(:,j);</span><br><span class="line">        %&#x9650;&#x5236;&#x89E3;&#x7684;&#x8303;&#x56F4;</span><br><span class="line">        for k=1:n</span><br><span class="line">            if x(k,j)&lt;range_x(k,1)</span><br><span class="line">                x(k,j)=range_x(k,1);</span><br><span class="line">            end</span><br><span class="line">            if x(k,j)&gt;range_x(k,2)</span><br><span class="line">                x(k,j)=range_x(k,2);</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">        if f(x(:,j))&lt;f(p(:,j))</span><br><span class="line">            p(:,j)=x(:,j);</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    best_value(i)=min(f(p));</span><br><span class="line">    if i&gt;5&amp;&amp;abs(best_value(i)-best_value(i-5))&lt;1e-5</span><br><span class="line">        break;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">time=toc;</span><br><span class="line">disp([&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;])</span><br><span class="line">[mini,index]=min(f(p));</span><br><span class="line">disp([&apos;fmin=&apos;,num2str(mini)]);</span><br><span class="line">for k=1:n</span><br><span class="line">    disp([&apos;x&apos;,num2str(k),&apos;=&apos;,num2str(p(k,index))]);</span><br><span class="line">end</span><br><span class="line">if n==1</span><br><span class="line">    hold on;</span><br><span class="line">    plot(p(index),mini,&apos;ro&apos;);</span><br><span class="line">    plot_x=range_x(1):(range_x(2)-range_x(1))/1000:range_x(2);</span><br><span class="line">    plot_y=f(plot_x);</span><br><span class="line">    plot(plot_x,plot_y);</span><br><span class="line">    text((range_x(1)+range_x(2))/2,max(plot_y)+0.1*(max(plot_y)-min(plot_y)),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]);</span><br><span class="line">    hold off;</span><br><span class="line">end</span><br><span class="line">if n==2</span><br><span class="line">    %&#x6240;&#x6C42;&#x6700;&#x5C0F;&#x503C;&#x7684;&#x51FD;&#x6570;</span><br><span class="line">    func=@(x1,x2)x1.*sin(sqrt(abs(x1)))+x2.*sin(sqrt(abs(x2)));</span><br><span class="line">    plot_x=range_x(1,1):(range_x(1,2)-range_x(1,1))/1000:range_x(1,2);</span><br><span class="line">    plot_y=range_x(2,1):(range_x(2,2)-range_x(2,1))/1000:range_x(2,2);</span><br><span class="line">    [plot_x,plot_y] =meshgrid(plot_x,plot_y);</span><br><span class="line">    plot_z=func(plot_x,plot_y);</span><br><span class="line">    surf(plot_x,plot_y,plot_z);</span><br><span class="line">    xlabel(&apos;x1&apos;);</span><br><span class="line">    ylabel(&apos;x2&apos;);</span><br><span class="line">    zlabel(&apos;y&apos;);</span><br><span class="line">    hold on;</span><br><span class="line">    plot3(p(1,index),p(2,index),mini,&apos;ko&apos;)</span><br><span class="line">    text((range_x(1,1)+range_x(1,2))/2,(range_x(2,1)+range_x(2,2))/2,max(max(plot_z))+0.5*(max(max(plot_z))-min(min(plot_z))),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]);</span><br><span class="line">    hold off;</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="f-m"><a href="#f-m" class="headerlink" title="f.m"></a>f.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function res=f(x)</span><br><span class="line">func=@(x)(x).*sin(sqrt(abs(x)));</span><br><span class="line">res=zeros(1,size(x,2));</span><br><span class="line">for i=1:size(x,1)</span><br><span class="line">    res=res+func(x(i,:));</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><p><br><br></p><h1 id="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"><a href="#&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;" class="headerlink" title="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"></a><font size="5" color="red">&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;</font></h1><p><img src="/images/OPTIMIZATION/pso1.png" alt="PSO"><br>$$f(x)=x \cdot \sin(\sqrt{\lvert x \rvert}) \ , \ x \in [-500,500]$$</p><p>$$&#x7406;&#x8BBA;&#x503C;&#xFF1A;f(x)_{min}=f(-420.96874592006)=-418.982887272434$$</p><p>$$&#x6240;&#x6C42;&#x503C;&#xFF1A;f(x)_{min}=f(-420.968750420615)=-418.982887272432$$</p><h1 id="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"><a href="#&#x6027;&#x80FD;&#x6BD4;&#x8F83;" class="headerlink" title="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x6027;&#x80FD;&#x6BD4;&#x8F83;</font></h1><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x641C;&#x7D22;&#x80FD;&#x529B;&#x6700;&#x5FEB;</li><li>&#x4ECE;&#x7FA4;&#x4F53;&#x51FA;&#x53D1;&#xFF0C;&#x5177;&#x6709;&#x5E76;&#x884C;&#x6027;</li><li>&#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5927;</li><li>&#x5B58;&#x5728;&#x65E9;&#x719F;&#x6536;&#x655B;&#x95EE;&#x9898;</li><li>&#x5BF9;&#x521D;&#x59CB;&#x7C92;&#x5B50;&#x7FA4;&#x7684;&#x6570;&#x91CF;&#x6709;&#x5F88;&#x9AD8;&#x7684;&#x8981;&#x6C42;</li></ul></font></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;PSO&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="计算机基础知识" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="全局搜索方法" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2%E6%96%B9%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>蚁群算法(ACO)</title>
    <link href="https://USTCcoder.github.io/2019/05/23/optimization_ACO/"/>
    <id>https://USTCcoder.github.io/2019/05/23/optimization_ACO/</id>
    <published>2019-05-23T12:17:47.000Z</published>
    <updated>2019-09-26T02:45:50.943Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x8681;&#x7FA4;&#x7B97;&#x6CD5;</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;ACO(ant colony optimization):&#x7814;&#x7A76;&#x8682;&#x8681;&#x89C5;&#x98DF;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x53D1;&#x73B0;&#x5355;&#x4E2A;&#x8682;&#x8681;&#x7684;&#x884C;&#x4E3A;&#x6BD4;&#x8F83;&#x7B80;&#x5355;&#xFF0C;&#x4F46;&#x662F;&#x8681;&#x7FA4;&#x6574;&#x4F53;&#x5374;&#x53EF;&#x4EE5;&#x4F53;&#x73B0;&#x4E00;&#x4E9B;&#x667A;&#x80FD;&#x7684;&#x884C;&#x4E3A;&#x3002;&#x4F8B;&#x5982;&#x8681;&#x7FA4;&#x53EF;&#x4EE5;&#x5728;&#x4E0D;&#x540C;&#x7684;&#x73AF;&#x5883;&#x4E0B;&#xFF0C;&#x5BFB;&#x627E;&#x6700;&#x77ED;&#x5230;&#x8FBE;&#x98DF;&#x7269;&#x6E90;&#x7684;&#x8DEF;&#x5F84;&#x3002;&#x8682;&#x8681;&#x4F1A;&#x5728;&#x5176;&#x7ECF;&#x8FC7;&#x7684;&#x8DEF;&#x5F84;&#x4E0A;&#x91CA;&#x653E;&#x4E00;&#x79CD;&#x53EF;&#x4EE5;&#x79F0;&#x4E4B;&#x4E3A;<strong>&#x4FE1;&#x606F;&#x7D20;</strong>&#x7684;&#x7269;&#x8D28;&#xFF0C;&#x8681;&#x7FA4;&#x5185;&#x7684;&#x8682;&#x8681;&#x5BF9;&#x4FE1;&#x606F;&#x7D20;&#x5177;&#x6709;&#x611F;&#x77E5;&#x80FD;&#x529B;&#xFF0C;&#x5B83;&#x4EEC;&#x4F1A;<strong>&#x6CBF;&#x7740;&#x4FE1;&#x606F;&#x7D20;&#x6D53;&#x5EA6;&#x8F83;&#x9AD8;&#x8DEF;&#x5F84;&#x884C;&#x8D70;</strong>&#xFF0C;&#x800C;&#x6BCF;&#x53EA;&#x8DEF;&#x8FC7;&#x7684;&#x8682;&#x8681;&#x90FD;&#x4F1A;&#x5728;&#x8DEF;&#x4E0A;&#x7559;&#x4E0B;&#x4FE1;&#x606F;&#x7D20;&#xFF0C;&#x5F62;&#x6210;&#x4E00;&#x79CD;&#x7C7B;&#x4F3C;<strong>&#x6B63;&#x53CD;&#x9988;</strong>&#x7684;&#x673A;&#x5236;&#x3002;<br><a id="more"></a></p><h1 id="&#x6838;&#x5FC3;&#x601D;&#x60F3;"><a href="#&#x6838;&#x5FC3;&#x601D;&#x60F3;" class="headerlink" title="&#x6838;&#x5FC3;&#x601D;&#x60F3;"></a><font size="5" color="red">&#x6838;&#x5FC3;&#x601D;&#x60F3;</font></h1><p>&#x2003;&#x2003;<font size="4">1. &#x968F;&#x673A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x8682;&#x8681;</font></p><p>&#x2003;&#x2003;<font size="4">2. &#x5224;&#x65AD;&#x8682;&#x8681;&#x6240;&#x5728;&#x4F4D;&#x7F6E;&#x7684;&#x503C;&#x8D8A;&#x5C0F;&#xFF0C;&#x4FE1;&#x606F;&#x7D20;&#x8D8A;&#x591A;</font></p><p>&#x2003;&#x2003;<font size="4">3. &#x5982;&#x679C;&#x4FE1;&#x606F;&#x7D20;&#x8F83;&#x591A;&#xFF0C;&#x8682;&#x8681;&#x5C0F;&#x5E45;&#x79FB;&#x52A8;&#xFF0C;&#x4FE1;&#x606F;&#x7D20;&#x8F83;&#x5C11;&#xFF0C;&#x8682;&#x8681;&#x5927;&#x5E45;&#x79FB;&#x52A8;</font></p><p>&#x2003;&#x2003;<font size="4">4. &#x5982;&#x679C;&#x8682;&#x8681;&#x79FB;&#x52A8;&#x4E4B;&#x540E;&#x503C;&#x53D8;&#x5C0F;&#xFF0C;&#x5219;&#x8BF4;&#x660E;&#x79FB;&#x52A8;&#x65B9;&#x5411;&#x6B63;&#x786E;</font></p><p>&#x2003;&#x2003;<font size="4">5. &#x56DE;&#x5230;&#x6B65;&#x9AA4;2&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;</font></p><p>&#x2003;&#x2003;<font size="4">6. &#x6B64;&#x65F6;&#x8682;&#x8681;&#x96C6;&#x7FA4;&#xFF0C;&#x8681;&#x7FA4;&#x4F4D;&#x7F6E;&#x4E3A;&#x6781;&#x5C0F;&#x503C;&#xFF0C;&#x6BD4;&#x8F83;&#x53EF;&#x5F97;&#x8BE5;&#x7B97;&#x6CD5;&#x7684;&#x6700;&#x4F18;&#x89E3;</font></p><h1 id="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"><a href="#&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;</font></h1><p><img src="/images/OPTIMIZATION/aco2.png" alt="ACO"></p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><p><font size="4">&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;<a href="https://ustccoder.github.io/2019/05/19/optimization_Testfunction/">&#x6D4B;&#x8BD5;&#x51FD;&#x6570;(Test Function)</a></font></p><h2 id="ACO-main-m"><a href="#ACO-main-m" class="headerlink" title="ACO_main.m"></a>ACO_main.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">%&#x81EA;&#x53D8;&#x91CF;&#x53D6;&#x503C;&#x8303;&#x56F4;</span><br><span class="line">range_x=[ones(1,1),-ones(1,1)]*500;</span><br><span class="line">%&#x7EF4;&#x5EA6;</span><br><span class="line">n=size(range_x,1);</span><br><span class="line">%&#x8682;&#x8681;&#x6570;</span><br><span class="line">m=1000;</span><br><span class="line">%&#x8FED;&#x4EE3;&#x6B21;&#x6570;</span><br><span class="line">times=100;</span><br><span class="line">%&#x4FE1;&#x606F;&#x7D20;&#x6325;&#x53D1;&#x7CFB;&#x6570;</span><br><span class="line">rho=0.8;</span><br><span class="line">%&#x8F6C;&#x79FB;&#x6982;&#x7387;&#x5E38;&#x6570;</span><br><span class="line">p0=1;</span><br><span class="line">%&#x8F6C;&#x79FB;&#x6982;&#x7387;</span><br><span class="line">p=zeros(1,m);</span><br><span class="line">%x&#x4E3A;&#x8681;&#x7FA4;&#x7684;&#x521D;&#x59CB;&#x4F4D;&#x7F6E;</span><br><span class="line">x=zeros(n,m);</span><br><span class="line">for k=1:n</span><br><span class="line">    x(k,:)=(rand(1,m))*(range_x(k,2)-range_x(k,1))+range_x(k,1);</span><br><span class="line">end</span><br><span class="line">%tau&#x4E3A;&#x4FE1;&#x606F;&#x7D20;</span><br><span class="line">tau=-f(x);</span><br><span class="line">%&#x8BBE;&#x7F6E;&#x5F53;&#x524D;&#x6700;&#x4F18;&#x89E3;</span><br><span class="line">best_value=zeros(1,times);</span><br><span class="line">tic;</span><br><span class="line">for i=1:times</span><br><span class="line">    [~,bestindex]=max(tau);</span><br><span class="line">    for j=1:m</span><br><span class="line">        %&#x4FE1;&#x606F;&#x7D20;&#x8D8A;&#x5927;&#x8D8A;&#x4E0D;&#x5BB9;&#x6613;&#x8F6C;&#x79FB;</span><br><span class="line">        p(j)=(tau(bestindex)-tau(j))/tau(bestindex);</span><br><span class="line">        if p(j)&lt;p0</span><br><span class="line">            %&#x5982;&#x679C;&#x4FE1;&#x606F;&#x7D20;&#x8F83;&#x591A;&#xFF0C;&#x8F6C;&#x79FB;&#x6B65;&#x4F10;&#x5C31;&#x8F83;&#x5C0F;</span><br><span class="line">            temp=x(:,j)+(rand(n,1)*2-1)/i;</span><br><span class="line">        else</span><br><span class="line">            temp=zeros(n,1);</span><br><span class="line">            %&#x5982;&#x679C;&#x4FE1;&#x606F;&#x7D20;&#x8F83;&#x5C11;&#xFF0C;&#x8F6C;&#x79FB;&#x6B65;&#x4F10;&#x5C31;&#x8F83;&#x5927;</span><br><span class="line">            for k=1:n</span><br><span class="line">                temp(k)=x(k,j)+(rand(1,1)-0.5)*(range(k,2)-range(k,1));</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">        %&#x9650;&#x5236;&#x8FB9;&#x754C;&#x6761;&#x4EF6;</span><br><span class="line">        for k=1:n</span><br><span class="line">            if temp(k)&lt;range_x(k,1)</span><br><span class="line">                temp(k)=range_x(k,1);</span><br><span class="line">            end</span><br><span class="line">            if temp(k)&gt;range_x(k,2)</span><br><span class="line">                temp(k)=range_x(k,2);</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">        %&#x5982;&#x679C;&#x79FB;&#x52A8;&#x540E;&#x503C;&#x53D8;&#x5C0F;&#xFF0C;&#x5219;&#x79FB;&#x52A8;</span><br><span class="line">        if f(temp)&lt;f(x(:,j))</span><br><span class="line">            x(:,j)=temp;</span><br><span class="line">        end</span><br><span class="line">        %&#x66F4;&#x65B0;&#x4FE1;&#x606F;&#x7D20;&#xFF0C;&#x51FD;&#x6570;&#x503C;&#x8D8A;&#x5C0F;&#xFF0C;&#x4FE1;&#x606F;&#x91CF;&#x8D8A;&#x5927;</span><br><span class="line">        tau(j)=(1-rho)*tau(j)-f(x(:,j));</span><br><span class="line">    end</span><br><span class="line">    best_value(i)=min(f(x));</span><br><span class="line">    if i&gt;5&amp;&amp;abs(best_value(i)-best_value(i-5))&lt;1e-5</span><br><span class="line">        break;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">time=toc;</span><br><span class="line">disp([&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;])</span><br><span class="line">[mini,index]=min(f(x));</span><br><span class="line">disp([&apos;fmin=&apos;,num2str(mini)]);</span><br><span class="line">for k=1:n</span><br><span class="line">    disp([&apos;x&apos;,num2str(k),&apos;=&apos;,num2str(x(k,index))]);</span><br><span class="line">end</span><br><span class="line">if n==1</span><br><span class="line">    hold on;</span><br><span class="line">    plot(x(index),mini,&apos;ro&apos;);</span><br><span class="line">    plot_x=range_x(1):(range_x(2)-range_x(1))/1000:range_x(2);</span><br><span class="line">    plot_y=f(plot_x);</span><br><span class="line">    plot(plot_x,plot_y);</span><br><span class="line">    text((range_x(1)+range_x(2))/2,max(plot_y)+0.1*(max(plot_y)-min(plot_y)),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]);</span><br><span class="line">    hold off;</span><br><span class="line">end</span><br><span class="line">if n==2</span><br><span class="line">    func=@(x1,x2)x1.*sin(sqrt(abs(x1)))+x2.*sin(sqrt(abs(x2)));</span><br><span class="line">    plot_x=range_x(1,1):(range_x(1,2)-range_x(1,1))/1000:range_x(1,2);</span><br><span class="line">    plot_y=range_x(2,1):(range_x(2,2)-range_x(2,1))/1000:range_x(2,2);</span><br><span class="line">    [plot_x,plot_y] =meshgrid(plot_x,plot_y);</span><br><span class="line">    plot_z=func(plot_x,plot_y);</span><br><span class="line">    surf(plot_x,plot_y,plot_z);</span><br><span class="line">    xlabel(&apos;x1&apos;);</span><br><span class="line">    ylabel(&apos;x2&apos;);</span><br><span class="line">    zlabel(&apos;y&apos;);</span><br><span class="line">    hold on;</span><br><span class="line">    plot3(x(1,index),x(2,index),mini,&apos;ko&apos;)</span><br><span class="line">    text((range_x(1,1)+range_x(1,2))/2,(range_x(2,1)+range_x(2,2))/2,max(max(plot_z))+0.5*(max(max(plot_z))-min(min(plot_z))),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]);</span><br><span class="line">    hold off;</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="f-m"><a href="#f-m" class="headerlink" title="f.m"></a>f.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function res=f(x)</span><br><span class="line">func=@(x)(x).*sin(sqrt(abs(x)));</span><br><span class="line">res=zeros(1,size(x,2));</span><br><span class="line">for i=1:size(x,1)</span><br><span class="line">    res=res+func(x(i,:));</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><p><br><br></p><h1 id="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"><a href="#&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;" class="headerlink" title="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"></a><font size="5" color="red">&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;</font></h1><p><img src="/images/OPTIMIZATION/aco1.png" alt="ACO"><br>$$f(x)=x \cdot \sin(\sqrt{\lvert x \rvert}) \ , \ x \in [-500,500]$$</p><p>$$&#x7406;&#x8BBA;&#x503C;&#xFF1A;f(x)_{min}=f(-420.96874592006)=-418.982887272434$$</p><p>$$&#x6240;&#x6C42;&#x503C;&#xFF1A;f(x)_{min}=f(-420.959294517745)=-418.982875999576$$</p><h1 id="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"><a href="#&#x6027;&#x80FD;&#x6BD4;&#x8F83;" class="headerlink" title="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x6027;&#x80FD;&#x6BD4;&#x8F83;</font></h1><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x641C;&#x7D22;&#x901F;&#x5EA6;&#x8F83;&#x5FEB;</li><li>&#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5C0F;</li><li>&#x4ECE;&#x7FA4;&#x4F53;&#x51FA;&#x53D1;&#xFF0C;&#x5177;&#x6709;&#x5E76;&#x884C;&#x6027;</li><li>&#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898;</li><li>&#x5177;&#x6709;&#x53EF;&#x6269;&#x5C55;&#x6027;&#xFF0C;&#x5BB9;&#x6613;&#x4E0E;&#x5176;&#x4ED6;&#x7B97;&#x6CD5;&#x7ED3;&#x5408;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x5BF9;&#x521D;&#x59CB;&#x8682;&#x8681;&#x7684;&#x6570;&#x91CF;&#x6709;&#x5F88;&#x9AD8;&#x7684;&#x8981;&#x6C42;</li></ul></font></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;ACO&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="计算机基础知识" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="全局搜索方法" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2%E6%96%B9%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>免疫算法(IA)</title>
    <link href="https://USTCcoder.github.io/2019/05/22/optimization_IA/"/>
    <id>https://USTCcoder.github.io/2019/05/22/optimization_IA/</id>
    <published>2019-05-22T10:29:47.000Z</published>
    <updated>2019-09-26T02:44:42.414Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x8BF4;&#x660E;</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;IA(Immune Algorithm):&#x514D;&#x75AB;&#x7B97;&#x6CD5;&#x57FA;&#x4E8E;<strong>&#x751F;&#x7269;&#x514D;&#x75AB;&#x7CFB;&#x7EDF;</strong>&#x7684;&#x57FA;&#x672C;&#x673A;&#x5236;&#xFF0C;&#x6A21;&#x4EFF;&#x4E86;&#x4EBA;&#x4F53;&#x7684;&#x514D;&#x75AB;&#x7CFB;&#x7EDF;&#xFF0C;&#x89E3;&#x51B3;&#x4E86;&#x9057;&#x4F20;&#x7B97;&#x6CD5;&#x7684;<strong>&#x65E9;&#x719F;&#x6536;&#x655B;</strong>&#x95EE;&#x9898;&#x3002;&#x56E0;&#x4E3A;&#x514D;&#x75AB;&#x7CFB;&#x7EDF;&#x5177;&#x6709;<strong>&#x8FA8;&#x8BC6;&#x8BB0;&#x5FC6;</strong>&#x7684;&#x7279;&#x70B9;&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x4EE5;&#x66F4;&#x5FEB;&#x8BC6;&#x522B;&#x7FA4;&#x4F53;&#xFF0C;&#x9762;&#x5BF9;&#x5F85;&#x6C42;&#x89E3;&#x95EE;&#x9898;&#x65F6;&#xFF0C;&#x76F8;&#x5F53;&#x4E8E;&#x9762;&#x5BF9;&#x5404;&#x79CD;&#x6297;&#x539F;&#xFF0C;&#x53EF;&#x4EE5;&#x63D0;&#x524D;<strong>&#x6CE8;&#x5C04;&#x75AB;&#x82D7;</strong>&#x6291;&#x5236;&#x9000;&#x5316;&#x95EE;&#x9898;&#xFF0C;&#x4ECE;&#x800C;&#x66F4;&#x52A0;&#x4FDD;&#x6301;&#x4F18;&#x80DC;&#x52A3;&#x6C70;&#x7684;&#x7279;&#x70B9;&#x3002;<br><a id="more"></a></p><h1 id="&#x6838;&#x5FC3;&#x601D;&#x60F3;"><a href="#&#x6838;&#x5FC3;&#x601D;&#x60F3;" class="headerlink" title="&#x6838;&#x5FC3;&#x601D;&#x60F3;"></a><font size="5" color="red">&#x6838;&#x5FC3;&#x601D;&#x60F3;</font></h1><p>&#x2003;&#x2003;<font size="4">1. &#x968F;&#x673A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x8BB0;&#x5FC6;&#x7EC6;&#x80DE;</font></p><p>&#x2003;&#x2003;<font size="4">2. &#x53D6;&#x51FA;&#x90E8;&#x5206;&#x8BB0;&#x5FC6;&#x7EC6;&#x80DE;&#xFF0C;&#x5269;&#x4E0B;&#x6297;&#x4F53;&#x7531;&#x968F;&#x673A;&#x4EA7;&#x751F;</font></p><p>&#x2003;&#x2003;<font size="4">3. &#x6839;&#x636E;&#x9002;&#x5E94;&#x5EA6;&#x5BF9;&#x6297;&#x4F53;&#x91C7;&#x7528;&#x67D0;&#x79CD;&#x65B9;&#x5F0F;&#x8FDB;&#x884C;&#x9009;&#x62E9;</font></p><p>&#x2003;&#x2003;<font size="4">4. &#x5BF9;&#x9009;&#x62E9;&#x5269;&#x4F59;&#x7684;&#x6297;&#x4F53;&#x8FDB;&#x884C;&#x9057;&#x4F20;&#x64CD;&#x4F5C;&#xFF0C;&#x4EA7;&#x751F;&#x65B0;&#x7684;&#x6297;&#x4F53;</font></p><p>&#x2003;&#x2003;<font size="4">5. &#x56DE;&#x5230;&#x6B65;&#x9AA4;3&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;</font></p><p>&#x2003;&#x2003;<font size="4">6. &#x5C06;&#x4EA7;&#x751F;&#x7684;&#x65B0;&#x6297;&#x4F53;&#x548C;&#x8BB0;&#x5FC6;&#x7EC6;&#x80DE;&#x6BD4;&#x8F83;&#xFF0C;&#x4EA7;&#x751F;&#x65B0;&#x7684;&#x8BB0;&#x5FC6;&#x7EC6;&#x80DE;</font></p><p>&#x2003;&#x2003;<font size="4">7. &#x56DE;&#x5230;&#x6B65;&#x9AA4;2&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;</font></p><p>&#x2003;&#x2003;<font size="4">8. &#x6B64;&#x65F6;&#x5F97;&#x5230;&#x514D;&#x75AB;&#x529B;&#x6700;&#x597D;&#x7684;&#x8BB0;&#x5FC6;&#x7EC6;&#x80DE;&#xFF0C;&#x6BD4;&#x8F83;&#x53EF;&#x5F97;&#x8BE5;&#x7B97;&#x6CD5;&#x7684;&#x6700;&#x4F18;&#x89E3;</font></p><h1 id="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"><a href="#&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;</font></h1><p><img src="/images/OPTIMIZATION/ia2.png" alt="IA"></p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><p><font size="4">&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;<a href="https://ustccoder.github.io/2019/05/19/optimization_Testfunction/">&#x6D4B;&#x8BD5;&#x51FD;&#x6570;(Test Function)</a></font></p><h2 id="IA-main-m"><a href="#IA-main-m" class="headerlink" title="IA_main.m"></a>IA_main.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">%&#x81EA;&#x53D8;&#x91CF;&#x53D6;&#x503C;&#x8303;&#x56F4;</span><br><span class="line">range_x=[ones(1,1),-ones(1,1)]*500;</span><br><span class="line">%&#x7EF4;&#x5EA6;</span><br><span class="line">n=size(range_x,1);</span><br><span class="line">%&#x79CD;&#x7FA4;&#x6570;&#x91CF;</span><br><span class="line">gn=400;</span><br><span class="line">%&#x9057;&#x4F20;&#x8FED;&#x4EE3;&#x65F6;&#x8FDB;&#x5165;&#x4E0B;&#x4E00;&#x4EE3;&#x7684;&#x6570;&#x91CF;</span><br><span class="line">m=50    ;</span><br><span class="line">%&#x4ECE;&#x8BB0;&#x5FC6;&#x7EC6;&#x80DE;&#x79CD;&#x62FF;&#x51FA;&#x7684;&#x4E2A;&#x6570;</span><br><span class="line">l=200;</span><br><span class="line">%&#x8FED;&#x4EE3;&#x6B21;&#x6570;</span><br><span class="line">times=200;</span><br><span class="line">%&#x514D;&#x75AB;&#x4F5C;&#x7528;&#x6B21;&#x6570;</span><br><span class="line">t=10;</span><br><span class="line">%&#x8BB0;&#x5FC6;&#x7EC6;&#x80DE;</span><br><span class="line">remember=zeros(n,gn);</span><br><span class="line">for k=1:n</span><br><span class="line">    remember(k,:)=(rand(1,gn))*(range_x(k,2)-range_x(k,1))+range_x(k,1);</span><br><span class="line">end</span><br><span class="line">tic</span><br><span class="line">for p=1:t</span><br><span class="line">    tem=zeros(n,gn-l);</span><br><span class="line">    for k=1:n</span><br><span class="line">        tem(k,:)=(rand(1,gn-l))*(range_x(k,2)-range_x(k,1))+range_x(k,1);</span><br><span class="line">    end</span><br><span class="line">    group=[remember(:,randperm(gn,l)),tem];</span><br><span class="line">    %&#x8BBE;&#x7F6E;&#x5F53;&#x524D;&#x6700;&#x4F18;&#x89E3;</span><br><span class="line">    best_value=zeros(1,times);</span><br><span class="line">    for k=1:times</span><br><span class="line">        y=f(group);</span><br><span class="line">        %&#x5168;&#x90E8;&#x53D8;&#x6210;&#x6B63;&#x503C;</span><br><span class="line">        if min(y)&lt;0</span><br><span class="line">            tem=y-min(y)*1.0001;</span><br><span class="line">        else</span><br><span class="line">            tem=y+0.1;</span><br><span class="line">        end</span><br><span class="line">        %&#x503C;&#x8D8A;&#x5C0F;&#x9002;&#x5E94;&#x8D8A;&#x597D;</span><br><span class="line">        tem=1./tem;</span><br><span class="line">        child=zeros(n,gn);</span><br><span class="line">        %&#x6311;&#x9009;m&#x4E2A;&#x79CD;&#x7FA4;&#x8FDB;&#x5165;&#x4E0B;&#x4E00;&#x4EE3;</span><br><span class="line">        for i=1:m</span><br><span class="line">            %&#x8F6E;&#x76D8;&#x8D4C;&#x9009;&#x62E9;&#xFF0C;&#x9002;&#x5E94;&#x5927;&#x7684;&#x9009;&#x62E9;&#x6982;&#x7387;&#x5927;</span><br><span class="line">            temp=zeros(1,gn-i+1);</span><br><span class="line">            for j=1:gn-i+1</span><br><span class="line">                temp(j)=sum(tem(1:j));</span><br><span class="line">            end</span><br><span class="line">            temp=temp/temp(gn-i+1);</span><br><span class="line">            %&#x4FDD;&#x7559;&#x6700;&#x5408;&#x9002;&#x7684;&#x7269;&#x79CD;</span><br><span class="line">            choose=find(temp&gt;rand(1),1);</span><br><span class="line">            child(:,i)=group(:,choose);</span><br><span class="line">            group=[group(:,1:choose-1),group(:,choose+1:end)];</span><br><span class="line">            tem=[tem(1:choose-1),tem(choose+1:end)];</span><br><span class="line">        end</span><br><span class="line">        %&#x67D3;&#x8272;&#x4F53;&#x4EA4;&#x6362;,&#x4FDD;&#x7559;&#x7684;&#x7269;&#x79CD;&#x4EA7;&#x751F;&#x540E;&#x4EE3;&#x65F6;&#x53D1;&#x751F;&#x57FA;&#x56E0;&#x91CD;&#x7EC4;</span><br><span class="line">        for i=1:floor((gn-m)/2)</span><br><span class="line">            exchange=randperm(m,2);</span><br><span class="line">            a=rand(n,1);</span><br><span class="line">            child(:,i*2-1+m)=a.*child(:,exchange(1))+(1-a).*child(:,exchange(2));</span><br><span class="line">            child(:,i*2+m)=(1-a).*child(:,exchange(1))+a.*child(:,exchange(2));</span><br><span class="line">        end</span><br><span class="line">        if mod(gn-m,2)==1</span><br><span class="line">            exchange=randperm(m,2);</span><br><span class="line">            child(:,gn)=(child(:,exchange(1))+child(:,exchange(2)))/2;</span><br><span class="line">        end</span><br><span class="line">        %&#x57FA;&#x56E0;&#x91CD;&#x7EC4;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x53EF;&#x80FD;&#x53D1;&#x751F;&#x67D3;&#x8272;&#x4F53;&#x53D8;&#x5F02;</span><br><span class="line">        if rand(1)&lt;0.1</span><br><span class="line">            exchange=randperm(gn-m,1);</span><br><span class="line">            a=rand(1);</span><br><span class="line">            for j=1:n</span><br><span class="line">                child(j,exchange+m)=a.*child(j,exchange+m)+(1-a).*(rand(1)*(range(j,2)-range(j,1))+range(j,1));</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">        %&#x91CD;&#x7EC4;&#x4E4B;&#x540E;&#x540E;&#x4EE3;&#x53D8;&#x6210;&#x5F53;&#x524D;&#x79CD;&#x7FA4;</span><br><span class="line">        group=child;</span><br><span class="line">        best_value(k)=min(f(group));</span><br><span class="line">        if k&gt;5&amp;&amp;abs(best_value(k)-best_value(k-5))&lt;1e-5</span><br><span class="line">            break;</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    %&#x5C06;&#x672C;&#x6B21;&#x514D;&#x75AB;&#x8FC7;&#x7A0B;&#x4E2D;&#x6700;&#x597D;&#x7684;&#x548C;&#x8BB0;&#x5FC6;&#x7EC6;&#x80DE;&#x6BD4;&#x8F83;&#xFF0C;&#x9009;&#x53D6;&#x6700;&#x597D;&#x7684;&#x4F5C;&#x4E3A;&#x8BB0;&#x5FC6;&#x7EC6;&#x80DE;</span><br><span class="line">    if min(f(group))&lt;=min(f(remember))</span><br><span class="line">        [~,index]=min(f(group));</span><br><span class="line">        remember=ones(n,gn).*repmat(group(:,index),1,gn);</span><br><span class="line">    else</span><br><span class="line">        [~,index]=min(f(remember));</span><br><span class="line">        remember=ones(n,gn).*repmat(group(:,index),1,gn);</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">time=toc;</span><br><span class="line">disp([&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;])</span><br><span class="line">[mini,index]=min(f(remember));</span><br><span class="line">disp([&apos;fmin=&apos;,num2str(mini)]);</span><br><span class="line">for k=1:n</span><br><span class="line">    disp([&apos;x&apos;,num2str(k),&apos;=&apos;,num2str(remember(k,index))]);</span><br><span class="line">end</span><br><span class="line">if n==1</span><br><span class="line">    hold on;</span><br><span class="line">    plot(remember(index),mini,&apos;ro&apos;);</span><br><span class="line">    plot_x=range_x(1):(range_x(2)-range_x(1))/1000:range_x(2);</span><br><span class="line">    plot_y=f(plot_x);</span><br><span class="line">    plot(plot_x,plot_y);</span><br><span class="line">    text((range_x(1)+range_x(2))/2,max(plot_y)+0.1*(max(plot_y)-min(plot_y)),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]);</span><br><span class="line">    hold off;</span><br><span class="line">end</span><br><span class="line">if n==2</span><br><span class="line">    %&#x6240;&#x6C42;&#x6700;&#x5C0F;&#x503C;&#x7684;&#x51FD;&#x6570;</span><br><span class="line">    func=@(x1,x2)x1.*sin(sqrt(abs(x1)))+x2.*sin(sqrt(abs(x2)));</span><br><span class="line">    plot_x=range_x(1,1):(range_x(1,2)-range_x(1,1))/1000:range_x(1,2);</span><br><span class="line">    plot_y=range_x(2,1):(range_x(2,2)-range_x(2,1))/1000:range_x(2,2);</span><br><span class="line">    [plot_x,plot_y] =meshgrid(plot_x,plot_y);</span><br><span class="line">    plot_z=func(plot_x,plot_y);</span><br><span class="line">    surf(plot_x,plot_y,plot_z);</span><br><span class="line">    xlabel(&apos;x1&apos;);</span><br><span class="line">    ylabel(&apos;x2&apos;);</span><br><span class="line">    zlabel(&apos;y&apos;);</span><br><span class="line">    hold on;</span><br><span class="line">    plot3(remember(1,index),remember(2,index),mini,&apos;ko&apos;)</span><br><span class="line">    text((range_x(1,1)+range_x(1,2))/2,(range_x(2,1)+range_x(2,2))/2,max(max(plot_z))+0.5*(max(max(plot_z))-min(min(plot_z))),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]);</span><br><span class="line">    hold off;</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="f-m"><a href="#f-m" class="headerlink" title="f.m"></a>f.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function res=f(x)</span><br><span class="line">func=@(x)(x).*sin(sqrt(abs(x)));</span><br><span class="line">res=zeros(1,size(x,2));</span><br><span class="line">for i=1:size(x,1)</span><br><span class="line">    res=res+func(x(i,:));</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><p><br><br></p><h1 id="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"><a href="#&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;" class="headerlink" title="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"></a><font size="5" color="red">&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;</font></h1><p><img src="/images/OPTIMIZATION/ia1.png" alt="IA"><br>$$f(x)=x \cdot \sin(\sqrt{\lvert x \rvert}) \ , \ x \in [-500,500]$$</p><p>$$&#x7406;&#x8BBA;&#x503C;&#xFF1A;f(x)_{min}=f(-420.96874592006)=-418.982887272434$$</p><p>$$&#x6240;&#x6C42;&#x503C;&#xFF1A;f(x)_{min}=f(-420.966448106285)=-418.982886605937$$</p><h1 id="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"><a href="#&#x6027;&#x80FD;&#x6BD4;&#x8F83;" class="headerlink" title="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x6027;&#x80FD;&#x6BD4;&#x8F83;</font></h1><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5C0F;</li><li>&#x89E3;&#x51B3;&#x65E9;&#x719F;&#x6536;&#x655B;&#x95EE;&#x9898;</li><li>&#x4ECE;&#x7FA4;&#x4F53;&#x51FA;&#x53D1;&#xFF0C;&#x5177;&#x6709;&#x5E76;&#x884C;&#x6027;</li><li>&#x5BF9;&#x6297;&#x4F53;&#x9009;&#x62E9;&#x7684;&#x4F9D;&#x8D56;&#x6027;&#x964D;&#x4F4E;</li><li>&#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898;</li><li>&#x4F7F;&#x7528;&#x6982;&#x7387;&#x673A;&#x5236;&#x8FDB;&#x884C;&#x8FED;&#x4EE3;&#xFF0C;&#x5177;&#x6709;&#x968F;&#x673A;&#x6027;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x5BF9;&#x95EE;&#x9898;&#x7F16;&#x7801;&#x8868;&#x793A;&#x8F83;&#x4E3A;&#x56F0;&#x96BE;</li><li>&#x8981;&#x8FDB;&#x884C;&#x591A;&#x6B21;&#x514D;&#x75AB;&#x5E94;&#x7B54;&#xFF0C;&#x56E0;&#x6B64;&#x901F;&#x5EA6;&#x6162;&#x4E8E;&#x9057;&#x4F20;&#x7B97;&#x6CD5;</li></ul></font></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;IA&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="计算机基础知识" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="全局搜索方法" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2%E6%96%B9%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>遗传算法(GA)</title>
    <link href="https://USTCcoder.github.io/2019/05/21/optimization_GA/"/>
    <id>https://USTCcoder.github.io/2019/05/21/optimization_GA/</id>
    <published>2019-05-21T09:59:45.000Z</published>
    <updated>2019-09-26T02:43:33.246Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x9057;&#x4F20;&#x7B97;&#x6CD5;</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;GA(Genetic Algorithm):&#x662F;&#x6A21;&#x62DF;&#x8FBE;&#x5C14;&#x6587;&#x751F;&#x7269;&#x8FDB;&#x5316;&#x8BBA;&#x7684;<strong>&#x81EA;&#x7136;&#x9009;&#x62E9;</strong>&#x548C;<strong>&#x9057;&#x4F20;&#x5B66;&#x673A;&#x7406;</strong>&#x7684;&#x751F;&#x7269;&#x8FDB;&#x5316;&#x8FC7;&#x7A0B;&#x7684;&#x8BA1;&#x7B97;&#x6A21;&#x578B;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x786E;&#x5B9A;&#x7684;&#x89C4;&#x5219;&#x5C31;&#x80FD;&#x81EA;&#x52A8;&#x83B7;&#x53D6;&#x548C;&#x6307;&#x5BFC;&#x4F18;&#x5316;&#x7684;&#x641C;&#x7D22;&#x7A7A;&#x95F4;&#xFF0C;<strong>&#x81EA;&#x9002;&#x5E94;</strong>&#x5730;&#x8C03;&#x6574;&#x641C;&#x7D22;&#x65B9;&#x5411;&#xFF0C;&#x662F;&#x4E00;&#x79CD;&#x901A;&#x8FC7;&#x6A21;&#x62DF;&#x81EA;&#x7136;&#x8FDB;&#x5316;&#x8FC7;&#x7A0B;&#x641C;&#x7D22;&#x6700;&#x4F18;&#x89E3;&#x7684;&#x65B9;&#x6CD5;&#x3002;<a id="more"></a><br>&#x521D;&#x4EE3;&#x79CD;&#x7FA4;&#x4EA7;&#x751F;&#x4E4B;&#x540E;&#xFF0C;&#x6309;&#x7167;<strong>&#x9002;&#x8005;&#x751F;&#x5B58;</strong>&#x548C;<strong>&#x4F18;&#x80DC;&#x52A3;&#x6C70;</strong>&#x7684;&#x539F;&#x7406;&#xFF0C;&#x9010;&#x4EE3;&#xFF08;generation&#xFF09;&#x6F14;&#x5316;&#x4EA7;&#x751F;&#x51FA;&#x8D8A;&#x6765;&#x8D8A;&#x597D;&#x7684;&#x8FD1;&#x4F3C;&#x89E3;&#xFF0C;&#x5728;&#x6BCF;&#x4E00;&#x4EE3;&#xFF0C;&#x6839;&#x636E;&#x95EE;&#x9898;&#x57DF;&#x4E2D;&#x4E2A;&#x4F53;&#x7684;<strong>&#x9002;&#x5E94;&#x5EA6;&#xFF08;fitness&#xFF09;</strong>&#x5927;&#x5C0F;&#x9009;&#x62E9;&#x4E2A;&#x4F53;&#xFF0C;&#x5E76;&#x501F;&#x52A9;&#x4E8E;&#x81EA;&#x7136;&#x9057;&#x4F20;&#x5B66;&#x7684;<strong>&#x9057;&#x4F20;&#x7B97;&#x5B50;</strong>&#x8FDB;&#x884C;&#x7EC4;&#x5408;<strong>&#x4EA4;&#x53C9;&#xFF08;crossover&#xFF09;</strong>&#x548C;<strong>&#x53D8;&#x5F02;&#xFF08;mutation&#xFF09;</strong>&#xFF0C;&#x4EA7;&#x751F;&#x51FA;&#x4EE3;&#x8868;&#x65B0;&#x7684;&#x89E3;&#x96C6;&#x7684;&#x79CD;&#x7FA4;&#x3002;</p><h1 id="&#x6838;&#x5FC3;&#x601D;&#x60F3;"><a href="#&#x6838;&#x5FC3;&#x601D;&#x60F3;" class="headerlink" title="&#x6838;&#x5FC3;&#x601D;&#x60F3;"></a><font size="5" color="red">&#x6838;&#x5FC3;&#x601D;&#x60F3;</font></h1><p>&#x2003;&#x2003;<font size="4">1. &#x968F;&#x673A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x521D;&#x59CB;&#x79CD;&#x7FA4;</font></p><p>&#x2003;&#x2003;<font size="4">2. &#x6839;&#x636E;&#x9002;&#x5E94;&#x5EA6;&#x5BF9;&#x79CD;&#x7FA4;&#x91C7;&#x7528;&#x67D0;&#x79CD;&#x65B9;&#x5F0F;&#x8FDB;&#x884C;&#x81EA;&#x7136;&#x9009;&#x62E9;</font></p><p>&#x2003;&#x2003;<font size="4">3. &#x5BF9;&#x9009;&#x62E9;&#x5269;&#x4F59;&#x7684;&#x79CD;&#x7FA4;&#x8FDB;&#x884C;&#x9057;&#x4F20;&#x64CD;&#x4F5C;&#xFF0C;&#x4EA7;&#x751F;&#x65B0;&#x7684;&#x79CD;&#x7FA4;</font></p><p>&#x2003;&#x2003;<font size="4">4. &#x56DE;&#x5230;&#x6B65;&#x9AA4;2&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;</font></p><p>&#x2003;&#x2003;<font size="4">5. &#x6B64;&#x65F6;&#x5269;&#x4F59;&#x7684;&#x662F;&#x9002;&#x5E94;&#x5EA6;&#x8F83;&#x597D;&#x7684;&#x79CD;&#x7FA4;&#xFF0C;&#x6BD4;&#x8F83;&#x53EF;&#x5F97;&#x8BE5;&#x7B97;&#x6CD5;&#x7684;&#x6700;&#x4F18;&#x89E3;</font></p><h1 id="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"><a href="#&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;</font></h1><p><img src="/images/OPTIMIZATION/ga2.png" alt="GA"></p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><p><font size="4">&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;<a href="https://ustccoder.github.io/2019/05/19/optimization_Testfunction/">&#x6D4B;&#x8BD5;&#x51FD;&#x6570;(Test Function)</a></font></p><h2 id="GA-main-m"><a href="#GA-main-m" class="headerlink" title="GA_main.m"></a>GA_main.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">%&#x81EA;&#x53D8;&#x91CF;&#x53D6;&#x503C;&#x8303;&#x56F4;</span><br><span class="line">range_x=[ones(1,1),-ones(1,1)]*500;</span><br><span class="line">%&#x7EF4;&#x5EA6;</span><br><span class="line">n=size(range_x,1);</span><br><span class="line">%&#x79CD;&#x7FA4;&#x6570;&#x91CF;</span><br><span class="line">gn=400;</span><br><span class="line">%&#x8FDB;&#x5165;&#x4E0B;&#x4E00;&#x4EE3;&#x7684;&#x6570;&#x91CF;</span><br><span class="line">m=50;</span><br><span class="line">%&#x8FED;&#x4EE3;&#x6B21;&#x6570;</span><br><span class="line">times=200;</span><br><span class="line">%&#x968F;&#x673A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x79CD;&#x7FA4;</span><br><span class="line">group=zeros(n,gn);</span><br><span class="line">for k=1:n</span><br><span class="line">    group(k,:)=(rand(1,gn))*(range_x(k,2)-range_x(k,1))+range_x(k,1);</span><br><span class="line">end</span><br><span class="line">%&#x8BBE;&#x7F6E;&#x5F53;&#x524D;&#x6700;&#x4F18;&#x89E3;</span><br><span class="line">best_value=zeros(1,times);</span><br><span class="line">tic;</span><br><span class="line">for k=1:times</span><br><span class="line">    y=f(group);</span><br><span class="line">    %&#x5168;&#x90E8;&#x53D8;&#x6210;&#x6B63;&#x503C;</span><br><span class="line">    if min(y)&lt;0</span><br><span class="line">        tem=y-min(y)*1.0001;</span><br><span class="line">    else</span><br><span class="line">        tem=y+0.1;</span><br><span class="line">    end</span><br><span class="line">    %&#x503C;&#x8D8A;&#x5C0F;&#x9002;&#x5E94;&#x8D8A;&#x597D;</span><br><span class="line">    tem=1./tem;</span><br><span class="line">    child=zeros(n,gn);</span><br><span class="line">    %&#x6311;&#x9009;m&#x4E2A;&#x79CD;&#x7FA4;&#x8FDB;&#x5165;&#x4E0B;&#x4E00;&#x4EE3;</span><br><span class="line">    for i=1:m</span><br><span class="line">        %&#x8F6E;&#x76D8;&#x8D4C;&#x9009;&#x62E9;&#xFF0C;&#x9002;&#x5E94;&#x5927;&#x7684;&#x9009;&#x62E9;&#x6982;&#x7387;&#x5927;</span><br><span class="line">        temp=zeros(1,gn-i+1);</span><br><span class="line">        for j=1:gn-i+1</span><br><span class="line">            temp(j)=sum(tem(1:j));</span><br><span class="line">        end</span><br><span class="line">        temp=temp/temp(gn-i+1);</span><br><span class="line">        %&#x4FDD;&#x7559;&#x6700;&#x5408;&#x9002;&#x7684;&#x7269;&#x79CD;</span><br><span class="line">        choose=find(temp&gt;rand(1),1);</span><br><span class="line">        child(:,i)=group(:,choose);</span><br><span class="line">        group=[group(:,1:choose-1),group(:,choose+1:end)];</span><br><span class="line">        tem=[tem(1:choose-1),tem(choose+1:end)];</span><br><span class="line">    end</span><br><span class="line">    %&#x67D3;&#x8272;&#x4F53;&#x4EA4;&#x6362;,&#x4FDD;&#x7559;&#x7684;&#x7269;&#x79CD;&#x4EA7;&#x751F;&#x540E;&#x4EE3;&#x65F6;&#x53D1;&#x751F;&#x57FA;&#x56E0;&#x91CD;&#x7EC4;</span><br><span class="line">    for i=1:floor((gn-m)/2)</span><br><span class="line">        exchange=randperm(m,2);</span><br><span class="line">        a=rand(n,1);</span><br><span class="line">        child(:,i*2-1+m)=a.*child(:,exchange(1))+(1-a).*child(:,exchange(2));</span><br><span class="line">        child(:,i*2+m)=(1-a).*child(:,exchange(1))+a.*child(:,exchange(2));</span><br><span class="line">    end</span><br><span class="line">    if mod(gn-m,2)==1</span><br><span class="line">        exchange=randperm(m,2);</span><br><span class="line">        child(:,gn)=(child(:,exchange(1))+child(:,exchange(2)))/2;</span><br><span class="line">    end</span><br><span class="line">    %&#x57FA;&#x56E0;&#x91CD;&#x7EC4;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x53EF;&#x80FD;&#x53D1;&#x751F;&#x67D3;&#x8272;&#x4F53;&#x53D8;&#x5F02;</span><br><span class="line">    if rand(1)&lt;0.1</span><br><span class="line">        exchange=randperm(gn-m,1);</span><br><span class="line">        a=rand(1);</span><br><span class="line">        for j=1:n</span><br><span class="line">            child(j,exchange+m)=a.*child(j,exchange+m)+(1-a).*(rand(1)*(range(j,2)-range(j,1))+range(j,1));</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    %&#x91CD;&#x7EC4;&#x4E4B;&#x540E;&#x540E;&#x4EE3;&#x53D8;&#x6210;&#x5F53;&#x524D;&#x79CD;&#x7FA4;</span><br><span class="line">    group=child;</span><br><span class="line">    best_value(k)=min(f(group));</span><br><span class="line">    if k&gt;5&amp;&amp;abs(best_value(k)-best_value(k-5))&lt;1e-5</span><br><span class="line">        break;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">time=toc;</span><br><span class="line">disp([&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;])</span><br><span class="line">[mini,index]=min(f(group));</span><br><span class="line">disp([&apos;fmin=&apos;,num2str(mini)]);</span><br><span class="line">for k=1:n</span><br><span class="line">    disp([&apos;x&apos;,num2str(k),&apos;=&apos;,num2str(group(k,index))]);</span><br><span class="line">end</span><br><span class="line">if n==1</span><br><span class="line">    hold on;</span><br><span class="line">    plot(group(index),mini,&apos;ro&apos;);</span><br><span class="line">    plot_x=range_x(1):(range_x(2)-range_x(1))/1000:range_x(2);</span><br><span class="line">    plot_y=f(plot_x);</span><br><span class="line">    plot(plot_x,plot_y);</span><br><span class="line">    text((range_x(1)+range_x(2))/2,max(plot_y)+0.1*(max(plot_y)-min(plot_y)),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]);</span><br><span class="line">    hold off;</span><br><span class="line">end</span><br><span class="line">if n==2</span><br><span class="line">    %&#x6240;&#x6C42;&#x6700;&#x5C0F;&#x503C;&#x7684;&#x51FD;&#x6570;</span><br><span class="line">    func=@(x1,x2)x1.*sin(sqrt(abs(x1)))+x2.*sin(sqrt(abs(x2)));</span><br><span class="line">    plot_x=range_x(1,1):(range_x(1,2)-range_x(1,1))/1000:range_x(1,2);</span><br><span class="line">    plot_y=range_x(2,1):(range_x(2,2)-range_x(2,1))/1000:range_x(2,2);</span><br><span class="line">    [plot_x,plot_y] =meshgrid(plot_x,plot_y);</span><br><span class="line">    plot_z=func(plot_x,plot_y);</span><br><span class="line">    surf(plot_x,plot_y,plot_z);</span><br><span class="line">    xlabel(&apos;x1&apos;);</span><br><span class="line">    ylabel(&apos;x2&apos;);</span><br><span class="line">    zlabel(&apos;y&apos;);</span><br><span class="line">    hold on;</span><br><span class="line">    plot3(group(1,index),group(2,index),mini,&apos;ko&apos;)</span><br><span class="line">    text((range_x(1,1)+range_x(1,2))/2,(range_x(2,1)+range_x(2,2))/2,max(max(plot_z))+0.5*(max(max(plot_z))-min(min(plot_z))),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]);</span><br><span class="line">    hold off;</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="f-m"><a href="#f-m" class="headerlink" title="f.m"></a>f.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function res=f(x)</span><br><span class="line">func=@(x)(x).*sin(sqrt(abs(x)));</span><br><span class="line">res=zeros(1,size(x,2));</span><br><span class="line">for i=1:size(x,1)</span><br><span class="line">    res=res+func(x(i,:));</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><p><br><br></p><h1 id="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"><a href="#&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;" class="headerlink" title="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"></a><font size="5" color="red">&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;</font></h1><p><img src="/images/OPTIMIZATION/ga1.png" alt="GA"><br>$$f(x)=x \cdot \sin(\sqrt{\lvert x \rvert}) \ , \ x \in [-500,500]$$</p><p>$$&#x7406;&#x8BBA;&#x503C;&#xFF1A;f(x)_{min}=f(-420.96874592006)=-418.982887272434$$</p><p>$$&#x6240;&#x6C42;&#x503C;&#xFF1A;f(x)_{min}=f(-420.975929624477)=-418.982880761435$$</p><h1 id="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"><a href="#&#x6027;&#x80FD;&#x6BD4;&#x8F83;" class="headerlink" title="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x6027;&#x80FD;&#x6BD4;&#x8F83;</font></h1><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x4ECE;&#x7FA4;&#x4F53;&#x51FA;&#x53D1;&#xFF0C;&#x5177;&#x6709;&#x5E76;&#x884C;&#x6027;</li><li>&#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898;</li><li>&#x4F7F;&#x7528;&#x6982;&#x7387;&#x673A;&#x5236;&#x8FDB;&#x884C;&#x8FED;&#x4EE3;&#xFF0C;&#x5177;&#x6709;&#x968F;&#x673A;&#x6027;</li><li>&#x5177;&#x6709;&#x53EF;&#x6269;&#x5C55;&#x6027;&#xFF0C;&#x5BB9;&#x6613;&#x4E0E;&#x5176;&#x4ED6;&#x7B97;&#x6CD5;&#x7ED3;&#x5408;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5927;</li><li>&#x53EF;&#x80FD;&#x4EA7;&#x751F;&#x65E9;&#x719F;&#x6536;&#x655B;&#x95EE;&#x9898;</li><li>&#x5BF9;&#x95EE;&#x9898;&#x7F16;&#x7801;&#x8868;&#x793A;&#x8F83;&#x4E3A;&#x56F0;&#x96BE;</li><li>&#x7B97;&#x6CD5;&#x5BF9;&#x521D;&#x59CB;&#x79CD;&#x7FA4;&#x7684;&#x9009;&#x62E9;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x4F9D;&#x8D56;&#x6027;</li><li>&#x641C;&#x7D22;&#x901F;&#x5EA6;&#x6BD4;&#x8F83;&#x6162;&#xFF0C;&#x8981;&#x5F97;&#x5230;&#x8F83;&#x7CBE;&#x786E;&#x7684;&#x89E3;&#x9700;&#x8981;&#x8F83;&#x591A;&#x7684;&#x8BAD;&#x7EC3;&#x65F6;&#x95F4;</li></ul></font></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;GA&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="计算机基础知识" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="全局搜索方法" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2%E6%96%B9%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>模拟退火算法(SA)</title>
    <link href="https://USTCcoder.github.io/2019/05/20/optimization_SA/"/>
    <id>https://USTCcoder.github.io/2019/05/20/optimization_SA/</id>
    <published>2019-05-20T12:12:20.000Z</published>
    <updated>2019-09-26T03:11:19.533Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x6A21;&#x62DF;&#x9000;&#x706B;&#x7B97;&#x6CD5;</font></strong></center><p></p><h1 id="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"><a href="#&#x80CC;&#x666F;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x80CC;&#x666F;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x80CC;&#x666F;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;SA(Simulate Anneal):&#x662F;&#x4E00;&#x79CD;&#x57FA;&#x4E8E;<strong>Mentcarlo&#x8FED;&#x4EE3;&#x6C42;&#x89E3;&#x6CD5;</strong>&#x7684;&#x4E00;&#x79CD;&#x542F;&#x53D1;&#x5F0F;&#x968F;&#x673A;&#x641C;&#x7D22;&#x65B9;&#x6CD5;&#xFF0C;&#x57FA;&#x4E8E;&#x7269;&#x7406;&#x4E2D;&#x56FA;&#x4F53;&#x7269;&#x8D28;&#x7684;&#x9000;&#x706B;&#x8FC7;&#x7A0B;&#x4E0E;&#x4E00;&#x822C;&#x7EC4;&#x5408;&#x4F18;&#x5316;&#x95EE;&#x9898;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x4F3C;&#x6027;&#xFF0C;&#x901A;&#x8FC7;<strong>&#x6A21;&#x62DF;&#x9000;&#x706B;&#x8FC7;&#x7A0B;</strong>&#xFF0C;&#x7528;&#x6765;&#x5728;&#x4E00;&#x4E2A;&#x5927;&#x7684;&#x641C;&#x5BFB;&#x7A7A;&#x95F4;&#x5185;&#x627E;&#x5BFB;&#x547D;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#xFF08;&#x6216;&#x8FD1;&#x4F3C;&#x6700;&#x4F18;&#x89E3;&#xFF09;&#x3002;<br><a id="more"></a></p><h1 id="&#x6838;&#x5FC3;&#x601D;&#x60F3;"><a href="#&#x6838;&#x5FC3;&#x601D;&#x60F3;" class="headerlink" title="&#x6838;&#x5FC3;&#x601D;&#x60F3;"></a><font size="5" color="red">&#x6838;&#x5FC3;&#x601D;&#x60F3;</font></h1><p>&#x2003;&#x2003;<font size="4">1. &#x4EFB;&#x9009;&#x4E00;&#x521D;&#x59CB;&#x72B6;&#x6001;S<sub>0</sub>&#x4F5C;&#x4E3A;&#x5F53;&#x524D;&#x89E3;&#xFF0C;&#x8BBE;&#x7F6E;&#x521D;&#x59CB;&#x6E29;&#x5EA6;T<sub>0</sub></font></p><p>&#x2003;&#x2003;<font size="4">2. &#x5BF9;&#x8BE5;&#x6E29;&#x5EA6;&#x4E0B;&#x7684;&#x72B6;&#x6001;S<sub>0</sub>&#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x6270;&#x52A8;S&#x2019;&#xFF0C;&#x5E76;&#x6309;&#x6982;&#x7387;&#x63A5;&#x6536;</font><br>$$\Delta C=f(S&#x2019;)-f(S)$$</p><p>$$P= \begin{cases} 1 &amp;  \Delta C \leq 0 \ e^{\frac {- \Delta C}{T} } &amp; \Delta C &gt; 0 \end{cases}$$</p><p>&#x2003;&#x2003;<font size="4">3. &#x6309;&#x7167;&#x67D0;&#x79CD;&#x65B9;&#x5F0F;&#x964D;&#x6E29;T=T-&#x394;T&#xFF0C;&#x56DE;&#x5230;&#x6B65;&#x9AA4;2&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;</font></p><p>&#x2003;&#x2003;<font size="4">4. &#x6B64;&#x65F6;&#x8FBE;&#x5230;&#x7684;&#x72B6;&#x6001;S&#x5373;&#x4E3A;&#x8BE5;&#x7B97;&#x6CD5;&#x7684;&#x6700;&#x4F18;&#x89E3;</font></p><h1 id="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"><a href="#&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;</font></h1><p><img src="/images/OPTIMIZATION/sa2.png" alt="SA"></p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><p><font size="4">&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;<a href="https://ustccoder.github.io/2019/05/19/optimization_Testfunction/">&#x6D4B;&#x8BD5;&#x51FD;&#x6570;(Test Function)</a></font></p><h2 id="SA-ap-m"><a href="#SA-ap-m" class="headerlink" title="SA_ap.m"></a>SA_ap.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">%&#x81EA;&#x53D8;&#x91CF;&#x53D6;&#x503C;&#x8303;&#x56F4;</span><br><span class="line">range_x=[ones(1,1),-ones(1,1)]*500;</span><br><span class="line">%&#x7EF4;&#x5EA6;</span><br><span class="line">n=size(range_x,1);</span><br><span class="line">%&#x5C1D;&#x8BD5;&#x89E3;&#x6B21;&#x6570;</span><br><span class="line">num=10;</span><br><span class="line">value=zeros(n,num);</span><br><span class="line">delta_t=0.2;</span><br><span class="line">tic;</span><br><span class="line">for i=1:num</span><br><span class="line">    %&#x7ED9;x&#x8D4B;&#x521D;&#x503C;</span><br><span class="line">    x=zeros(n,1);</span><br><span class="line">    for k=1:n</span><br><span class="line">        x(k)=(rand(1))*(range_x(k,2)-range_x(k,1))+range_x(k,1);</span><br><span class="line">    end</span><br><span class="line">    %&#x521D;&#x59CB;&#x6E29;&#x5EA6;t</span><br><span class="line">    t=100;</span><br><span class="line">    while t&gt;1e-5</span><br><span class="line">        x=SA_metripolis(range_x,t,x,n);</span><br><span class="line">        %&#x6E29;&#x5EA6;&#x6BCF;&#x6B21;&#x4E0B;&#x964D;delta_t</span><br><span class="line">        t=t-delta_t;</span><br><span class="line">    end</span><br><span class="line">    value(:,i)=x;</span><br><span class="line">end</span><br><span class="line">time=toc;</span><br><span class="line">disp([&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;])</span><br><span class="line">[mini,index]=min(f(value));</span><br><span class="line">disp([&apos;fmin=&apos;,num2str(mini)]);</span><br><span class="line">for k=1:n</span><br><span class="line">    disp([&apos;x&apos;,num2str(k),&apos;=&apos;,num2str(value(k,index))]);</span><br><span class="line">end</span><br><span class="line">if n==1</span><br><span class="line">    hold on;</span><br><span class="line">    plot(value(index),mini,&apos;ro&apos;);</span><br><span class="line">    plot_x=range_x(1):(range_x(2)-range_x(1))/1000:range_x(2);</span><br><span class="line">    plot_y=f(plot_x);</span><br><span class="line">    plot(plot_x,plot_y);</span><br><span class="line">    text((range_x(1)+range_x(2))/2,max(plot_y)+0.1*(max(plot_y)-min(plot_y)),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]);</span><br><span class="line">    hold off;</span><br><span class="line">end</span><br><span class="line">if n==2</span><br><span class="line">    %&#x6240;&#x6C42;&#x6700;&#x5C0F;&#x503C;&#x7684;&#x51FD;&#x6570;</span><br><span class="line">    func=@(x1,x2)x1.*sin(sqrt(abs(x1)))+x2.*sin(sqrt(abs(x2)));</span><br><span class="line">    plot_x=range_x(1,1):(range_x(1,2)-range_x(1,1))/1000:range_x(1,2);</span><br><span class="line">    plot_y=range_x(2,1):(range_x(2,2)-range_x(2,1))/1000:range_x(2,2);</span><br><span class="line">    [plot_x,plot_y] =meshgrid(plot_x,plot_y);</span><br><span class="line">    plot_z=func(plot_x,plot_y);</span><br><span class="line">    surf(plot_x,plot_y,plot_z);</span><br><span class="line">    xlabel(&apos;x1&apos;);</span><br><span class="line">    ylabel(&apos;x2&apos;);</span><br><span class="line">    zlabel(&apos;y&apos;);</span><br><span class="line">    hold on;</span><br><span class="line">    plot3(value(1,index),value(2,index),mini,&apos;ko&apos;)</span><br><span class="line">    text((range_x(1,1)+range_x(1,2))/2,(range_x(2,1)+range_x(2,2))/2,max(max(plot_z))+0.5*(max(max(plot_z))-min(min(plot_z))),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]);</span><br><span class="line">    hold off;</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="SA-metripolis-m"><a href="#SA-metripolis-m" class="headerlink" title="SA_metripolis.m"></a>SA_metripolis.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function x=SA_metripolis(range_x,t,x,n)</span><br><span class="line">delta=1;</span><br><span class="line">for i=1:100</span><br><span class="line">    %&#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x6270;&#x52A8;</span><br><span class="line">    x_new=(rand(n,1)-0.5)*delta+x;</span><br><span class="line">    %&#x9650;&#x5236;&#x89E3;&#x7684;&#x8303;&#x56F4;</span><br><span class="line">    for j=1:n</span><br><span class="line">        if x_new(j)&lt;range_x(j,2)</span><br><span class="line">            x_new(j)=range_x(j,2);</span><br><span class="line">        end</span><br><span class="line">        if x_new(j)&gt;range_x(j,1)</span><br><span class="line">            x_new(j)=range_x(j,1);</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    dc=f(x_new)-f(x);</span><br><span class="line">    if dc&lt;0</span><br><span class="line">        x=x_new;</span><br><span class="line">        %&#x5982;&#x679C;&#x6270;&#x52A8;&#x7684;&#x7ED3;&#x679C;&#x6BD4;&#x539F;&#x6765;&#x5927;&#xFF0C;&#x5219;&#x6709;&#x6982;&#x7387;&#x7684;&#x4FDD;&#x7559;</span><br><span class="line">    else</span><br><span class="line">        p=exp(-dc/t);</span><br><span class="line">        if rand(1)&lt;=p</span><br><span class="line">            x=x_new;</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="f-m"><a href="#f-m" class="headerlink" title="f.m"></a>f.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function res=f(x)</span><br><span class="line">func=@(x)(x).*sin(sqrt(abs(x)));</span><br><span class="line">res=zeros(1,size(x,2));</span><br><span class="line">for i=1:size(x,1)</span><br><span class="line">    res=res+func(x(i,:));</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><p><br><br></p><h1 id="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"><a href="#&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;" class="headerlink" title="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"></a><font size="5" color="red">&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;</font></h1><p><img src="/images/OPTIMIZATION/sa1.png" alt="SA"><br>$$f(x)=x \cdot \sin(\sqrt{\lvert x \rvert}) \ , \ x \in [-500,500]$$</p><p>$$&#x7406;&#x8BBA;&#x503C;&#xFF1A;f(x)_{min}=f(-420.96874592006)=-418.982887272434$$</p><p>$$&#x6240;&#x6C42;&#x503C;&#xFF1A;f(x)_{min}=f(-420.967823415805)=-418.982887164947$$</p><h1 id="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"><a href="#&#x6027;&#x80FD;&#x6BD4;&#x8F83;" class="headerlink" title="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x6027;&#x80FD;&#x6BD4;&#x8F83;</font></h1><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x8BA1;&#x7B97;&#x8FC7;&#x7A0B;&#x7B80;&#x5355;</li><li>&#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898;</li><li>&#x76F8;&#x6BD4;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#xFF0C;&#x589E;&#x52A0;&#x4E86;&#x9003;&#x79BB;&#x5C40;&#x90E8;&#x6700;&#x5C0F;&#x7684;&#x53EF;&#x80FD;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x53C2;&#x6570;&#x654F;&#x611F;</li><li>&#x6536;&#x655B;&#x901F;&#x5EA6;&#x6162;</li><li>&#x6267;&#x884C;&#x65F6;&#x95F4;&#x957F;</li><li>&#x7B97;&#x6CD5;&#x6027;&#x80FD;&#x4E0E;&#x521D;&#x59CB;&#x503C;&#x6709;&#x5173;</li><li>&#x53EF;&#x80FD;&#x843D;&#x5165;&#x5176;&#x4ED6;&#x7684;&#x5C40;&#x90E8;&#x6700;&#x5C0F;&#x503C;</li></ul></font></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;SA&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="计算机基础知识" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="全局搜索方法" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2%E6%96%B9%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>测试函数(Test Function)</title>
    <link href="https://USTCcoder.github.io/2019/05/19/optimization_Testfunction/"/>
    <id>https://USTCcoder.github.io/2019/05/19/optimization_Testfunction/</id>
    <published>2019-05-19T11:29:40.000Z</published>
    <updated>2019-08-07T15:55:53.067Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x8BF4;&#x660E;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"><a href="#&#x539F;&#x7406;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x539F;&#x7406;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;Test Function:&#x5BF9;&#x4E8E;&#x5168;&#x5C40;&#x6700;&#x4F18;&#x89E3;&#x6765;&#x8BF4;&#xFF0C;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x7684;&#x9009;&#x62E9;&#x662F;<strong>&#x81F3;&#x5173;&#x91CD;&#x8981;</strong>&#x7684;&#xFF0C;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x7684;&#x597D;&#x574F;&#x5F80;&#x5F80;&#x53EF;&#x4EE5;&#x4F53;&#x73B0;&#x51FA;<strong>&#x641C;&#x7D22;&#x7B97;&#x6CD5;&#x7684;&#x4F18;&#x52A3;</strong>&#x3002;&#x6709;&#x65F6;&#x6027;&#x80FD;&#x4E00;&#x822C;&#x7684;&#x7B97;&#x6CD5;&#x5728;&#x67D0;&#x4E2A;&#x7279;&#x5B9A;&#x7684;&#x51FD;&#x6570;&#x4E0B;&#x53D1;&#x6325;&#x7684;&#x5F88;&#x597D;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x522B;&#x7684;&#x51FD;&#x6570;&#x4E0B;&#x5C31;&#x5F88;&#x96BE;&#x641C;&#x7D22;&#x5230;&#x5168;&#x5C40;&#x6700;&#x4F18;&#x89E3;&#x3002;&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x8BBE;&#x8BA1;&#x5404;&#x79CD;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#xFF0C;&#x4ECE;<strong>&#x641C;&#x7D22;&#x6548;&#x7387;&#xFF0C;&#x641C;&#x7D22;&#x7CBE;&#x5EA6;&#xFF0C;&#x9002;&#x5E94;&#x7A0B;&#x5EA6;</strong>&#x591A;&#x4E2A;&#x65B9;&#x9762;&#x7EFC;&#x5408;&#x6BD4;&#x8F83;&#x5404;&#x4E2A;&#x7B97;&#x6CD5;&#xFF0C;&#x53EA;&#x6709;&#x8FD9;&#x6837;&#xFF0C;&#x5728;&#x4ECA;&#x540E;&#x7684;&#x4F7F;&#x7528;&#x4E2D;&#x624D;&#x80FD;&#x5F97;&#x5FC3;&#x5E94;&#x624B;&#x3002;<br><a id="more"></a></p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><h2 id="Function-one-m"><a href="#Function-one-m" class="headerlink" title="Function_one.m"></a>Function_one.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">f=@(x)x.*sin(sqrt(abs(x)));</span><br><span class="line">x=-5000:1:5000;</span><br><span class="line">y=f(x);</span><br><span class="line">plot(x,y)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/OPTIMIZATION/test_function1.png" alt="one"></p><p>$$f(x)=x \cdot \sin(\sqrt{\lvert x \rvert}) \ , \ x \in [-500,500]$$</p><p>$$f(x)_{min}=f(-420.96874592006)=-418.982887272434$$</p><h2 id="Function-two-m"><a href="#Function-two-m" class="headerlink" title="Function_two.m"></a>Function_two.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">f=@(x)((x+1).*(x+2).*(x+3).*(x+4).*(x+5)+5);</span><br><span class="line">x=-5:0.01:0;</span><br><span class="line">y=f(x);</span><br><span class="line">plot(x,y)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/OPTIMIZATION/test_function2.png" alt="two"></p><p>$$f(x)=x \cdot (x+1) \cdot (x+2) \cdot (x+3) \cdot (x+4) \cdot (x+5) + 5 \ , \ x \in [-5,0]$$</p><p>$$f(x)_{min}=f(-1.35556713184173)=1.36856779155116$$</p><h2 id="Function-three-m"><a href="#Function-three-m" class="headerlink" title="Function_three.m"></a>Function_three.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">f=@(x)((x+2).*cos(9*x)+sin(7*x));</span><br><span class="line">x=0:0.01:4;</span><br><span class="line">y=f(x);</span><br><span class="line">plot(x,y)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/OPTIMIZATION/test_function3.png" alt="three"><br>$$f(x)=(x+2) \cdot \cos(9 \ x) + \sin(7 \ x) \ , \ x \in [0,4]$$</p><p>$$f(x)_{min}=f(2.44888001781347)=-5.43427465397202$$</p><h2 id="Function-four-m"><a href="#Function-four-m" class="headerlink" title="Function_four.m"></a>Function_four.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">f=@(x)(5*exp(-0.5*x).*sin(30*x)+exp(0.2*x).*sin(20*x)+6);</span><br><span class="line">x=0:0.01:8;</span><br><span class="line">y=f(x);</span><br><span class="line">plot(x,y)</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/OPTIMIZATION/test_function4.png" alt="four"><br>$$f(x)=5 \ e^{-0.5 \ x} \cdot \sin(30 \ x) + e^{0.2 \ x} \cdot \sin(20 \ x) + 6 \ , \ x \in [0,8]$$</p><p>$$f(x)_{min}=f(0.5725)=1.2573$$</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Test Function&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="计算机基础知识" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="全局搜索方法" scheme="https://USTCcoder.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2%E6%96%B9%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>聚类算法比较(Clustering Algorithms Comparison)</title>
    <link href="https://USTCcoder.github.io/2019/05/17/clustering_compare/"/>
    <id>https://USTCcoder.github.io/2019/05/17/clustering_compare/</id>
    <published>2019-05-17T14:20:18.000Z</published>
    <updated>2019-08-07T15:52:12.139Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x805A;&#x7C7B;&#x7B97;&#x6CD5;&#x6BD4;&#x8F83;</font></strong></center><p></p><h1 id="&#x65E0;&#x76D1;&#x7763;&#x5B66;&#x4E60;"><a href="#&#x65E0;&#x76D1;&#x7763;&#x5B66;&#x4E60;" class="headerlink" title="&#x65E0;&#x76D1;&#x7763;&#x5B66;&#x4E60;"></a><font size="5" color="red">&#x65E0;&#x76D1;&#x7763;&#x5B66;&#x4E60;</font></h1><p>&#x2003;&#x2003;&#x73B0;&#x5B9E;&#x751F;&#x6D3B;&#x4E2D;&#x5E38;&#x5E38;&#x4F1A;<strong>&#x7F3A;&#x4E4F;&#x8DB3;&#x591F;&#x7684;&#x5148;&#x9A8C;&#x77E5;&#x8BC6;</strong>&#xFF0C;&#x56E0;&#x6B64;<strong>&#x96BE;&#x4EE5;&#x4EBA;&#x5DE5;&#x6807;&#x6CE8;&#x7C7B;&#x522B;&#x6216;&#x8FDB;&#x884C;&#x4EBA;&#x5DE5;&#x7C7B;&#x522B;&#x6807;&#x6CE8;&#x7684;&#x6210;&#x672C;&#x592A;&#x9AD8;</strong>&#x3002;&#x5F88;&#x81EA;&#x7136;&#x5730;&#xFF0C;&#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x8BA1;&#x7B97;&#x673A;&#x80FD;&#x4EE3;&#x6211;&#x4EEC;&#x5B8C;&#x6210;&#x8FD9;&#x4E9B;&#x5DE5;&#x4F5C;&#xFF0C;&#x6216;&#x81F3;&#x5C11;&#x63D0;&#x4F9B;&#x4E00;&#x4E9B;&#x5E2E;&#x52A9;&#x3002;&#x6839;&#x636E;<strong>&#x7C7B;&#x522B;&#x672A;&#x77E5;(&#x6CA1;&#x6709;&#x88AB;&#x6807;&#x8BB0;)</strong>&#x7684;&#x8BAD;&#x7EC3;&#x6837;&#x672C;&#x89E3;&#x51B3;&#x6A21;&#x5F0F;&#x8BC6;&#x522B;&#x4E2D;&#x7684;&#x5404;&#x79CD;&#x95EE;&#x9898;&#xFF0C;&#x79F0;&#x4E4B;&#x4E3A;<strong>&#x65E0;&#x76D1;&#x7763;&#x5B66;&#x4E60;</strong>&#x3002;<br><a id="more"></a></p><h1 id="&#x7B97;&#x6CD5;&#x5206;&#x7C7B;"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x7C7B;" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x7C7B;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x5206;&#x7C7B;</font></h1><p><img src="/images/MACHINE/compare5.png" alt="COMPARE"></p><h1 id="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"><a href="#&#x6027;&#x80FD;&#x6BD4;&#x8F83;" class="headerlink" title="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x6027;&#x80FD;&#x6BD4;&#x8F83;</font></h1><p><font size="4">&#x6240;&#x7528;&#x6570;&#x636E;&#x96C6;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;<a href="https://ustccoder.github.io/2019/04/25/clustering_Dataset/">&#x6570;&#x636E;&#x96C6;(Data Set)</a></font></p><h2 id="&#x51DD;&#x805A;&#x7684;&#x5C42;&#x6B21;&#x805A;&#x7C7B;-AGNES"><a href="#&#x51DD;&#x805A;&#x7684;&#x5C42;&#x6B21;&#x805A;&#x7C7B;-AGNES" class="headerlink" title="&#x51DD;&#x805A;&#x7684;&#x5C42;&#x6B21;&#x805A;&#x7C7B;(AGNES)"></a><a href="https://ustccoder.github.io/2019/05/01/clustering_AGNES/">&#x51DD;&#x805A;&#x7684;&#x5C42;&#x6B21;&#x805A;&#x7C7B;(AGNES)</a></h2><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F;</li><li>&#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x5BB9;&#x6613;&#x7406;&#x89E3;</li><li>&#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x503C;&#x7684;&#x9009;&#x62E9;</li><li>&#x5BF9;&#x4E8E;&#x7C7B;&#x522B;&#x8F83;&#x591A;&#x7684;&#x8BAD;&#x7EC3;&#x96C6;&#x5206;&#x7C7B;&#x8F83;&#x5FEB;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x5408;&#x5E76;&#x64CD;&#x4F5C;&#x4E0D;&#x80FD;&#x64A4;&#x9500;</li><li>&#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x77E5;&#x9053;&#x7C7B;&#x522B;&#x7684;&#x4E2A;&#x6570;</li><li>&#x5BF9;&#x4E8E;&#x7C7B;&#x522B;&#x8F83;&#x5C11;&#x7684;&#x8BAD;&#x7EC3;&#x96C6;&#x5206;&#x7C7B;&#x8F83;&#x6162;</li><li>&#x53EA;&#x9002;&#x5408;&#x5206;&#x5E03;&#x5448;&#x51F8;&#x578B;&#x6216;&#x8005;&#x7403;&#x5F62;&#x7684;&#x6570;&#x636E;&#x96C6;</li><li>&#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D;</li></ul></font></li></ul><p></p><center><div style="float:left;margin-left:50px"><img src="/images/MACHINE/agnes.png" width="200" height="260"><center>&#x9AD8;&#x65AF;&#x578B;&#x6570;&#x636E;</center></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/MACHINE/compare_agnes2.png" width="200" height="260"><center>&#x5706;&#x5F62;&#x6570;&#x636E;</center></div><br><div style="float:none;clear:both;"></div><h2 id="&#x5206;&#x88C2;&#x7684;&#x5C42;&#x6B21;&#x805A;&#x7C7B;-DIANA"><a href="#&#x5206;&#x88C2;&#x7684;&#x5C42;&#x6B21;&#x805A;&#x7C7B;-DIANA" class="headerlink" title="&#x5206;&#x88C2;&#x7684;&#x5C42;&#x6B21;&#x805A;&#x7C7B;(DIANA)"></a><a href="https://ustccoder.github.io/2019/05/02/clustering_DIANA/">&#x5206;&#x88C2;&#x7684;&#x5C42;&#x6B21;&#x805A;&#x7C7B;(DIANA)</a></h2><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x5BB9;&#x6613;&#x7406;&#x89E3;</li><li>&#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x503C;&#x7684;&#x9009;&#x62E9;</li><li>&#x5BF9;&#x4E8E;&#x7C7B;&#x522B;&#x8F83;&#x5C11;&#x7684;&#x8BAD;&#x7EC3;&#x96C6;&#x5206;&#x7C7B;&#x8F83;&#x5FEB;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x654F;&#x611F;</li><li>&#x5206;&#x88C2;&#x64CD;&#x4F5C;&#x4E0D;&#x80FD;&#x64A4;&#x9500;</li><li>&#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x77E5;&#x9053;&#x7C7B;&#x522B;&#x7684;&#x4E2A;&#x6570;</li><li>&#x5BF9;&#x4E8E;&#x7C7B;&#x522B;&#x8F83;&#x591A;&#x7684;&#x8BAD;&#x7EC3;&#x96C6;&#x5206;&#x7C7B;&#x8F83;&#x6162;</li><li>&#x53EA;&#x9002;&#x5408;&#x5206;&#x5E03;&#x5448;&#x51F8;&#x578B;&#x6216;&#x8005;&#x7403;&#x5F62;&#x7684;&#x6570;&#x636E;&#x96C6;</li><li>&#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D;</li></ul></font></li></ul><p></p><center><div style="float:left;margin-left:50px"><img src="/images/MACHINE/diana.png" width="200" height="260"><center>&#x9AD8;&#x65AF;&#x578B;&#x6570;&#x636E;</center></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/MACHINE/compare_diana4.png" width="200" height="260"><center>&#x6DF7;&#x5408;&#x578B;&#x6570;&#x636E;</center></div><br><div style="float:none;clear:both;"></div><h2 id="K&#x5747;&#x503C;&#x805A;&#x7C7B;-K-MEANS"><a href="#K&#x5747;&#x503C;&#x805A;&#x7C7B;-K-MEANS" class="headerlink" title="K&#x5747;&#x503C;&#x805A;&#x7C7B;(K-MEANS)"></a><a href="https://ustccoder.github.io/2019/05/03/clustering_KMEANS/">K&#x5747;&#x503C;&#x805A;&#x7C7B;(K-MEANS)</a></h2><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x5BB9;&#x6613;&#x7406;&#x89E3;</li><li>&#x5927;&#x6570;&#x636E;&#x96C6;&#x65F6;&#xFF0C;&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x5BF9;&#x521D;&#x59CB;&#x4E2D;&#x5FC3;&#x70B9;&#x654F;&#x611F;</li><li>&#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x77E5;&#x9053;&#x7C7B;&#x522B;&#x7684;&#x4E2A;&#x6570;</li><li>&#x53EA;&#x9002;&#x5408;&#x5206;&#x5E03;&#x5448;&#x51F8;&#x578B;&#x6216;&#x8005;&#x7403;&#x5F62;&#x7684;&#x6570;&#x636E;&#x96C6;</li><li>&#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D;</li></ul></font></li></ul><p></p><center><div style="float:left;margin-left:50px"><img src="/images/MACHINE/kmeans.png" width="200" height="260"><center>&#x9AD8;&#x65AF;&#x578B;&#x6570;&#x636E;</center></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/MACHINE/compare_kmeans3.png" width="200" height="260"><center>&#x76F4;&#x7EBF;&#x578B;&#x6570;&#x636E;</center></div><br><div style="float:none;clear:both;"></div><h2 id="&#x8FED;&#x4EE3;&#x81EA;&#x7EC4;&#x7EC7;&#x5206;&#x6790;&#x805A;&#x7C7B;-ISODATA"><a href="#&#x8FED;&#x4EE3;&#x81EA;&#x7EC4;&#x7EC7;&#x5206;&#x6790;&#x805A;&#x7C7B;-ISODATA" class="headerlink" title="&#x8FED;&#x4EE3;&#x81EA;&#x7EC4;&#x7EC7;&#x5206;&#x6790;&#x805A;&#x7C7B;(ISODATA)"></a><a href="https://ustccoder.github.io/2019/05/04/clustering_ISODATA/">&#x8FED;&#x4EE3;&#x81EA;&#x7EC4;&#x7EC7;&#x5206;&#x6790;&#x805A;&#x7C7B;(ISODATA)</a></h2><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x5927;&#x6570;&#x636E;&#x96C6;&#x65F6;&#xFF0C;&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F;</li><li>&#x53EF;&#x4EE5;&#x52A8;&#x6001;&#x8C03;&#x6574;&#x7C7B;&#x522B;&#x4E2A;&#x6570;&#x548C;&#x7C7B;&#x522B;&#x4E2D;&#x5FC3;</li><li>&#x5728;&#x5148;&#x9A8C;&#x77E5;&#x8BC6;&#x4E0D;&#x8DB3;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x6709;&#x8F83;&#x597D;&#x7684;&#x5206;&#x7C7B;&#x80FD;&#x529B;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x5BF9;&#x521D;&#x59CB;&#x4E2D;&#x5FC3;&#x70B9;&#x654F;&#x611F;</li><li>&#x7B97;&#x6CD5;&#x590D;&#x6742;&#xFF0C;&#x5206;&#x7C7B;&#x901F;&#x5EA6;&#x8F83;&#x6162;</li><li>&#x53EA;&#x9002;&#x5408;&#x5206;&#x5E03;&#x5448;&#x51F8;&#x578B;&#x6216;&#x8005;&#x7403;&#x5F62;&#x7684;&#x6570;&#x636E;&#x96C6;</li><li>&#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D;</li></ul></font></li></ul><p></p><center><div style="float:left;margin-left:50px"><img src="/images/MACHINE/isodata.png" width="200" height="260"><center>&#x9AD8;&#x65AF;&#x578B;&#x6570;&#x636E;</center></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/MACHINE/compare_isodata3.png" width="200" height="260"><center>&#x76F4;&#x7EBF;&#x578B;&#x6570;&#x636E;</center></div><br><div style="float:none;clear:both;"></div><h2 id="&#x5BC6;&#x5EA6;&#x805A;&#x7C7B;-DBSCAN"><a href="#&#x5BC6;&#x5EA6;&#x805A;&#x7C7B;-DBSCAN" class="headerlink" title="&#x5BC6;&#x5EA6;&#x805A;&#x7C7B;(DBSCAN)"></a><a href="https://ustccoder.github.io/2019/05/05/clustering_DBSCAN/">&#x5BC6;&#x5EA6;&#x805A;&#x7C7B;(DBSCAN)</a></h2><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x5BB9;&#x6613;&#x7406;&#x89E3;</li><li>&#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x6570;&#x636E;&#x70B9;&#x7684;&#x9009;&#x62E9;</li><li>&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x4EFB;&#x610F;&#x5F62;&#x72B6;&#x7684;&#x805A;&#x7C7B;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x654F;&#x611F;</li><li>&#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x786E;&#x5B9A;eps&#x548C;minPts</li><li>&#x4E0D;&#x9002;&#x5408;&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x5BC6;&#x5EA6;&#x5DEE;&#x5F02;&#x8F83;&#x5927;&#x7684;&#x60C5;&#x51B5;</li><li>&#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D;</li></ul></font></li></ul><p></p><center><div style="float:left;margin-left:50px"><img src="/images/MACHINE/dbscan.png" width="200" height="260"><center>&#x5706;&#x5F62;&#x6570;&#x636E;</center></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/MACHINE/compare_dbscan3.png" width="200" height="260"><center>&#x76F4;&#x7EBF;&#x578B;&#x6570;&#x636E;</center></div><br><div style="float:none;clear:both;"></div><h2 id="&#x5BC6;&#x5EA6;&#x6700;&#x5927;&#x503C;&#x805A;&#x7C7B;-MDCA"><a href="#&#x5BC6;&#x5EA6;&#x6700;&#x5927;&#x503C;&#x805A;&#x7C7B;-MDCA" class="headerlink" title="&#x5BC6;&#x5EA6;&#x6700;&#x5927;&#x503C;&#x805A;&#x7C7B;(MDCA)"></a><a href="https://ustccoder.github.io/2019/05/07/clustering_MDCA/">&#x5BC6;&#x5EA6;&#x6700;&#x5927;&#x503C;&#x805A;&#x7C7B;(MDCA)</a></h2><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F;</li><li>&#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x6570;&#x636E;&#x70B9;&#x7684;&#x9009;&#x62E9;</li><li>&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x4EFB;&#x610F;&#x5F62;&#x72B6;&#x7684;&#x805A;&#x7C7B;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x7B97;&#x6CD5;&#x590D;&#x6742;&#xFF0C;&#x5206;&#x7C7B;&#x901F;&#x5EA6;&#x8F83;&#x6162;</li><li>&#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x786E;&#x5B9A;&#x5BC6;&#x5EA6;&#x9608;&#x503C;</li><li>&#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D;</li><li>&#x4E0D;&#x9002;&#x5408;&#x6570;&#x636E;&#x96C6;&#x5BC6;&#x5EA6;&#x5DEE;&#x5F02;&#x8F83;&#x5927;&#x6216;&#x6574;&#x4F53;&#x5BC6;&#x5EA6;&#x57FA;&#x672C;&#x76F8;&#x540C;&#x7684;&#x60C5;&#x51B5;</li></ul></font></li></ul><p></p><center><div style="float:left;margin-left:50px"><img src="/images/MACHINE/mdca.png" width="200" height="260"><center>&#x9AD8;&#x65AF;&#x578B;&#x6570;&#x636E;</center></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/MACHINE/compare_mdca4.png" width="200" height="260"><center>&#x6DF7;&#x5408;&#x578B;&#x6570;&#x636E;</center></div><br><div style="float:none;clear:both;"></div><h2 id="&#x5FEB;&#x901F;&#x641C;&#x7D22;&#x805A;&#x7C7B;-CFDP"><a href="#&#x5FEB;&#x901F;&#x641C;&#x7D22;&#x805A;&#x7C7B;-CFDP" class="headerlink" title="&#x5FEB;&#x901F;&#x641C;&#x7D22;&#x805A;&#x7C7B;(CFDP)"></a><a href="https://ustccoder.github.io/2019/05/09/clustering_CFDP/">&#x5FEB;&#x901F;&#x641C;&#x7D22;&#x805A;&#x7C7B;(CFDP)</a></h2><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F;</li><li>&#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x6570;&#x636E;&#x70B9;&#x7684;&#x9009;&#x62E9;</li><li>&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x4EFB;&#x610F;&#x5F62;&#x72B6;&#x7684;&#x805A;&#x7C7B;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x79BB;&#x7FA4;&#x70B9;&#x7684;&#x786E;&#x5B9A;&#x975E;&#x5E38;&#x590D;&#x6742;</li><li>&#x7B97;&#x6CD5;&#x590D;&#x6742;&#xFF0C;&#x5206;&#x7C7B;&#x901F;&#x5EA6;&#x8F83;&#x6162;</li><li>&#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D;</li><li>&#x4E0D;&#x9002;&#x5408;&#x6570;&#x636E;&#x96C6;&#x6574;&#x4F53;&#x5BC6;&#x5EA6;&#x57FA;&#x672C;&#x76F8;&#x540C;&#x7684;&#x60C5;&#x51B5;</li></ul></font></li></ul><p></p><center><div style="float:left;margin-left:50px"><img src="/images/MACHINE/compare_cfdp1.png" width="200" height="260"><center>&#x9AD8;&#x65AF;&#x578B;&#x6570;&#x636E;</center></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/MACHINE/compare_cfdp4.png" width="200" height="260"><center>&#x6DF7;&#x5408;&#x578B;&#x6570;&#x636E;</center></div><br><div style="float:none;clear:both;"></div><h2 id="&#x8C31;&#x805A;&#x7C7B;-Spectral-Clustering"><a href="#&#x8C31;&#x805A;&#x7C7B;-Spectral-Clustering" class="headerlink" title="&#x8C31;&#x805A;&#x7C7B;(Spectral Clustering)"></a><a href="https://ustccoder.github.io/2019/05/11/clustering_SPECTRAL/">&#x8C31;&#x805A;&#x7C7B;(Spectral Clustering)</a></h2><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x6570;&#x636E;&#x70B9;&#x7684;&#x9009;&#x62E9;</li><li>&#x4F7F;&#x7528;&#x4E86;&#x964D;&#x7EF4;&#x6280;&#x672F;&#xFF0C;&#x9002;&#x5408;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#x7684;&#x805A;&#x7C7B;</li><li>&#x5EFA;&#x7ACB;&#x5728;&#x8C31;&#x56FE;&#x7406;&#x8BBA;&#xFF0C;&#x80FD;&#x5728;&#x5927;&#x90E8;&#x5206;&#x5F62;&#x72B6;&#x805A;&#x7C7B;&#xFF0C;&#x6536;&#x655B;&#x4E8E;&#x5168;&#x5C40;&#x6700;&#x4F18;&#x89E3;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x96BE;&#x4EE5;&#x5BF9;&#x5706;&#x5F62;&#x6570;&#x636E;&#x805A;&#x7C7B;</li><li>&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x975E;&#x5E38;&#x654F;&#x611F;</li><li>&#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x77E5;&#x9053;&#x7C7B;&#x522B;&#x7684;&#x4E2A;&#x6570;</li></ul></font></li></ul><p></p><center><div style="float:left;margin-left:50px"><img src="/images/MACHINE/compare_spectral3.png" width="200" height="260"><center>&#x76F4;&#x7EBF;&#x578B;&#x6570;&#x636E;</center></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/MACHINE/spectral.png" width="200" height="260"><center>&#x6DF7;&#x5408;&#x578B;&#x6570;&#x636E;</center></div><br><div style="float:none;clear:both;"></div><h2 id="&#x9AD8;&#x65AF;&#x6DF7;&#x5408;&#x6A21;&#x578B;&#x805A;&#x7C7B;-GMM"><a href="#&#x9AD8;&#x65AF;&#x6DF7;&#x5408;&#x6A21;&#x578B;&#x805A;&#x7C7B;-GMM" class="headerlink" title="&#x9AD8;&#x65AF;&#x6DF7;&#x5408;&#x6A21;&#x578B;&#x805A;&#x7C7B;(GMM)"></a><a href="https://ustccoder.github.io/2019/05/12/clustering_GMM/">&#x9AD8;&#x65AF;&#x6DF7;&#x5408;&#x6A21;&#x578B;&#x805A;&#x7C7B;(GMM)</a></h2><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x5927;&#x90E8;&#x5206;&#x5F62;&#x72B6;&#x7684;&#x805A;&#x7C7B;</li><li>&#x5927;&#x6570;&#x636E;&#x96C6;&#x65F6;&#xFF0C;&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F;</li><li>&#x5BF9;&#x4E8E;&#x8DDD;&#x79BB;&#x6216;&#x5BC6;&#x5EA6;&#x805A;&#x7C7B;&#xFF0C;&#x66F4;&#x9002;&#x5408;&#x9AD8;&#x7EF4;&#x7279;&#x5F81;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x8BA1;&#x7B97;&#x590D;&#x6742;&#xFF0C;&#x901F;&#x5EA6;&#x8F83;&#x6162;</li><li>&#x96BE;&#x4EE5;&#x5BF9;&#x5706;&#x5F62;&#x6570;&#x636E;&#x805A;&#x7C7B;</li><li>&#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x77E5;&#x9053;&#x7C7B;&#x522B;&#x7684;&#x4E2A;&#x6570;</li><li>&#x521D;&#x59CB;&#x5316;&#x53C2;&#x6570;&#x4F1A;&#x5BF9;&#x805A;&#x7C7B;&#x7ED3;&#x679C;&#x4EA7;&#x751F;&#x5F71;&#x54CD;</li></ul></font></li></ul><p></p><center><div style="float:left;margin-left:50px"><img src="/images/MACHINE/compare_gmm1.png" width="200" height="260"><center>&#x9AD8;&#x65AF;&#x578B;&#x6570;&#x636E;</center></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/MACHINE/compare_gmm3.png" width="200" height="260"><center>&#x76F4;&#x7EBF;&#x578B;&#x6570;&#x636E;</center></div><br><div style="float:none;clear:both;"></div><h1 id="&#x7279;&#x70B9;&#x5C0F;&#x7ED3;"><a href="#&#x7279;&#x70B9;&#x5C0F;&#x7ED3;" class="headerlink" title="&#x7279;&#x70B9;&#x5C0F;&#x7ED3;"></a><font size="5" color="red">&#x7279;&#x70B9;&#x5C0F;&#x7ED3;</font></h1><ul><li>&#x51F8;&#x578B;&#x6216;&#x8005;&#x7403;&#x5F62;&#x5206;&#x5E03;&#x7684;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x7EDD;&#x5927;&#x90E8;&#x5206;&#x7B97;&#x6CD5;&#x90FD;&#x662F;&#x53EF;&#x4EE5;&#x9002;&#x7528;&#x7684;</li><li>&#x5706;&#x5F62;&#x5206;&#x5E03;&#x7684;&#x6570;&#x636E;&#x96C6;&#xFF0C;DBSCAN&#x7B97;&#x6CD5;&#x6700;&#x4E3A;&#x5408;&#x9002;</li><li>&#x7EBF;&#x578B;&#x5206;&#x5E03;&#x7684;&#x6570;&#x636E;&#x96C6;&#xFF0C;DBSCAN&#xFF0C;Spectral Clustering&#xFF0C;GMM&#x90FD;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;</li><li>&#x9AD8;&#x7EF4;&#x7279;&#x5F81;&#x6700;&#x597D;&#x4F7F;&#x7528;Spectral Clustering&#x6216;&#x8005;GMM&#x7B97;&#x6CD5;</li><li>&#x5BC6;&#x5EA6;&#x7B97;&#x6CD5;&#x5927;&#x591A;&#x9002;&#x7528;&#x4E8E;&#x5404;&#x7C7B;&#x7684;&#x5BC6;&#x5EA6;&#x5CF0;&#x503C;&#x76F8;&#x5DEE;&#x4E0D;&#x5927;&#x7684;&#x60C5;&#x51B5;</li><li>&#x5B9E;&#x9645;&#x4E2D;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5DF2;&#x77E5;&#x7684;&#x67D0;&#x4E9B;&#x5148;&#x9A8C;&#x77E5;&#x8BC6;&#x5C1D;&#x8BD5;&#x53BB;&#x9009;&#x62E9;&#x5408;&#x9002;&#x7684;&#x7B97;&#x6CD5;</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Clustering Algorithms Comparison&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="无监督学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>高斯混合模型聚类(GMM)</title>
    <link href="https://USTCcoder.github.io/2019/05/12/clustering_GMM/"/>
    <id>https://USTCcoder.github.io/2019/05/12/clustering_GMM/</id>
    <published>2019-05-12T12:05:27.000Z</published>
    <updated>2019-08-07T15:53:07.009Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x9AD8;&#x65AF;&#x6DF7;&#x5408;&#x6A21;&#x578B;&#x805A;&#x7C7B;&#x65B9;&#x6CD5;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x89E3;&#x8BFB;"><a href="#&#x539F;&#x7406;&#x89E3;&#x8BFB;" class="headerlink" title="&#x539F;&#x7406;&#x89E3;&#x8BFB;"></a><font size="5" color="red">&#x539F;&#x7406;&#x89E3;&#x8BFB;</font></h1><p>&#x2003;&#x2003;GMM(Gaussian Mixture Model,):&#x662F;&#x4E00;&#x4E2A;&#x5C06;&#x4E8B;&#x7269;&#x5206;&#x89E3;&#x4E3A;&#x82E5;&#x5E72;&#x7684;&#x57FA;&#x4E8E;<strong>&#x9AD8;&#x65AF;&#x6982;&#x7387;&#x5BC6;&#x5EA6;&#x51FD;&#x6570;&#xFF08;&#x6B63;&#x6001;&#x5206;&#x5E03;&#x66F2;&#x7EBF;&#xFF09;</strong>&#x5F62;&#x6210;&#x7684;&#x6A21;&#x578B;&#xFF0C;&#x6DF7;&#x5408;&#x9AD8;&#x65AF;&#x5206;&#x5E03;( MoG )&#x7531;&#x591A;&#x4E2A;&#x6DF7;&#x5408;&#x6210;&#x5206;&#x7EC4;&#x6210;&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x6DF7;&#x5408;&#x6210;&#x5206;&#x5BF9;&#x5E94;&#x4E00;&#x4E2A;&#x9AD8;&#x65AF;&#x5206;&#x5E03;&#x3002;&#x5F53;&#x805A;&#x7C7B;&#x95EE;&#x9898;&#x4E2D;<strong>&#x5404;&#x4E2A;&#x7C7B;&#x522B;&#x7684;&#x5C3A;&#x5BF8;&#x4E0D;&#x540C;</strong>&#x3001;&#x805A;&#x7C7B;&#x95F4;<strong>&#x6709;&#x76F8;&#x5173;&#x5173;&#x7CFB;</strong>&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5F80;&#x5F80;&#x4F7F;&#x7528; MoG &#x66F4;&#x5408;&#x9002;&#x3002;<a id="more"></a>&#x5BF9;&#x4E00;&#x4E2A;&#x6837;&#x672C;&#x6765;&#x8BF4;&#xFF0C; MoG &#x5F97;&#x5230;&#x7684;&#x662F;<strong>&#x5176;&#x5C5E;&#x4E8E;&#x5404;&#x4E2A;&#x7C7B;&#x7684;&#x6982;&#x7387;</strong>(&#x901A;&#x8FC7;&#x8BA1;&#x7B97;&#x540E;&#x9A8C;&#x6982;&#x7387;&#x5F97;&#x5230;)&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x5B8C;&#x5168;&#x7684;&#x5C5E;&#x4E8E;&#x67D0;&#x4E2A;&#x7C7B;&#xFF0C;&#x8FD9;&#x79CD;&#x805A;&#x7C7B;&#x65B9;&#x6CD5;&#x88AB;&#x6210;&#x4E3A;<strong>&#x8F6F;&#x805A;&#x7C7B;</strong>&#x3002;&#x4E00;&#x822C;&#x8BF4;&#x6765;&#xFF0C; <strong>&#x4EFB;&#x610F;&#x5F62;&#x72B6;</strong>&#x7684;&#x6982;&#x7387;&#x5206;&#x5E03;&#x90FD;&#x53EF;&#x4EE5;&#x7528;&#x591A;&#x4E2A;&#x9AD8;&#x65AF;&#x5206;&#x5E03;&#x51FD;&#x6570;&#x53BB;&#x8FD1;&#x4F3C;&#xFF0C;&#x56E0;&#x800C;&#xFF0C;MoG &#x7684;&#x5E94;&#x7528;&#x4E5F;&#x6BD4;&#x8F83;&#x5E7F;&#x6CDB;&#x3002;</p><h1 id="&#x6B65;&#x9AA4;&#x5206;&#x6790;"><a href="#&#x6B65;&#x9AA4;&#x5206;&#x6790;" class="headerlink" title="&#x6B65;&#x9AA4;&#x5206;&#x6790;"></a><font size="5" color="red">&#x6B65;&#x9AA4;&#x5206;&#x6790;</font></h1><p>&#x2003;&#x2003;<font size="4">1. &#x9009;&#x62E9;&#x9AD8;&#x65AF;&#x6A21;&#x578B;&#x4E2A;&#x6570;K&#xFF0C;&#x521D;&#x59CB;&#x5316;&#x53C2;&#x6570;</font></p><p>&#x2003;&#x2003;<font size="4">2. &#x6839;&#x636E;&#x8D1D;&#x53F6;&#x65AF;&#x5B9A;&#x7406;&#xFF0C;&#x6C42;&#x51FA;z<sub>j</sub>&#x7684;&#x540E;&#x9A8C;&#x5206;&#x5E03;&#x6982;&#x7387;</font><br>$$p(z_j=i | x_j) = \frac{\alpha_i \cdot p(x_j | \mu_i , \Sigma_i)}{\displaystyle \sum_{l=1}^k \alpha_l \cdot p(x_j | \mu_l , \Sigma_l)}$$</p><p>&#x2003;&#x2003;<font size="4">3. &#x4F7F;&#x7528;EM&#x7B97;&#x6CD5;&#x8FDB;&#x884C;&#x8FED;&#x4EE3;</font></p><ul><li><p>&#x8BA1;&#x7B97;&#x5747;&#x503C;&#x5411;&#x91CF;&#xFF1A;<br>$$\mu_i &#x2018;=\frac{\displaystyle \sum_{j=1}^m p(z_j=i | x_j) \cdot x_j}{\displaystyle \sum_{j=1}^m p(z_j=i | x_j)}$$</p></li><li><p>&#x8BA1;&#x7B97;&#x534F;&#x65B9;&#x5DEE;&#x77E9;&#x9635;&#xFF1A;<br>$$\Sigma_i &#x2018;=\frac{\displaystyle \sum_{j=1}^m p(z_j=i | x_j) \ (x_j - \mu_i &#x2018;) \ (x_j - \mu_i &#x2018;)^T}{\displaystyle \sum_{j=1}^m p(z_j=i | x_j)}$$</p></li><li><p>&#x8BA1;&#x7B97;&#x6DF7;&#x5408;&#x7CFB;&#x6570;&#xFF1A;<br>$$\alpha_i &#x2018;=\frac{\displaystyle \sum_{j=1}^m p(z_j=i | x_j)}{m}$$</p></li></ul><p>&#x2003;&#x2003;<font size="4">4. &#x91CD;&#x590D;&#x6B65;&#x9AA4;1&#xFF0C;2&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;</font></p><p>&#x2003;&#x2003;<font size="4">5. &#x5B9A;&#x4E49;&#x9AD8;&#x65AF;&#x6DF7;&#x5408;&#x5206;&#x5E03;</font><br>&#x2003;&#x2003;&#x6839;&#x636E;&#x6240;&#x6C42;&#x5F97;&#x7684;&#x5747;&#x503C;&#x5411;&#x91CF;&#xFF0C;&#x534F;&#x65B9;&#x5DEE;&#x77E9;&#x9635;&#x548C;&#x6DF7;&#x5408;&#x7CFB;&#x6570;&#x53EF;&#x4EE5;&#x5B9A;&#x4E49;&#x5982;&#x4E0B;&#x51FD;&#x6570;&#xFF1A;<br>$$p(x)=\displaystyle \sum_{l=1}^k \alpha_i \cdot p(x | \mu_i , \Sigma_i) \ , \ s.t. \displaystyle \sum_{l=1}^k \alpha_i=1$$<br><img src="/images/MACHINE/gmm5.png" alt="GMM"></p><p>&#x2003;&#x2003;<font size="4">6. &#x5BF9;&#x6837;&#x672C;&#x8FDB;&#x884C;&#x6807;&#x8BB0;</font><br>$$\lambda_j=\underset{i \in { 1,2, \cdots ,k}}{arg\ max} \ p(z_j=i | x_j)$$</p><h1 id="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"><a href="#&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;</font></h1><p><img src="/images/MACHINE/gmm9.png" alt="GMM"></p><p><br><br></p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><p><font size="4">&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6570;&#x636E;&#x96C6;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;<a href="https://ustccoder.github.io/2019/04/25/clustering_Dataset/">&#x6570;&#x636E;&#x96C6;(Data Set)</a></font></p><h2 id="GMM-main-m"><a href="#GMM-main-m" class="headerlink" title="GMM_main.m"></a>GMM_main.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">load(&apos;..\\cluster_mixture.mat&apos;);</span><br><span class="line">%&#x8F93;&#x5165;x&#x7684;&#x77E9;&#x9635;</span><br><span class="line">x=data;</span><br><span class="line">%&#x6837;&#x672C;&#x6570;</span><br><span class="line">sample_num=size(x,2);</span><br><span class="line">%&#x6DF7;&#x5408;&#x9AD8;&#x65AF;&#x4E2A;&#x6570;</span><br><span class="line">class_num=3;</span><br><span class="line">%&#x7279;&#x5F81;&#x6570;&#x76EE;</span><br><span class="line">feat_num=size(x,1);</span><br><span class="line">%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1</span><br><span class="line">x_scale=zeros(size(x));</span><br><span class="line">for i=1:feat_num</span><br><span class="line">    x_scale(i,:)=(x(i,:)-min(x(i,:)))/(max(x(i,:))-min(x(i,:)));</span><br><span class="line">end</span><br><span class="line">y=GMM_classify(x_scale,sample_num,class_num,feat_num);</span><br><span class="line">% &#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A;</span><br><span class="line">if feat_num==2</span><br><span class="line">    GMM_display(x,y,sample_num,class_num);</span><br><span class="line">else</span><br><span class="line">    disp(&apos;The Feature Is Not Two-Dimensional&apos;);</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="GMM-classify-m"><a href="#GMM-classify-m" class="headerlink" title="GMM_classify.m"></a>GMM_classify.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">function y=GMM_classify(x_scale,sample_num,class_num,feat_num)</span><br><span class="line">%&#x521D;&#x59CB;&#x5316;&#x5747;&#x503C;&#x5411;&#x91CF;,&#x534F;&#x65B9;&#x5DEE;&#x77E9;&#x9635;&#xFF0C;&#x6DF7;&#x5408;&#x7CFB;&#x6570;</span><br><span class="line">a=ones(1,class_num)/class_num;</span><br><span class="line">u=zeros(feat_num,class_num);</span><br><span class="line">sigma=zeros(feat_num,feat_num,class_num);</span><br><span class="line">randIndex = randperm(size(x_scale,2));</span><br><span class="line">u(:,1:class_num)=x_scale(:,randIndex(1:class_num));</span><br><span class="line">for i=1:class_num</span><br><span class="line">    sigma(:,:,i)=eye(feat_num)/10;</span><br><span class="line">end</span><br><span class="line">for t=1:50</span><br><span class="line">    %&#x5224;&#x65AD;sigma&#x662F;&#x5426;&#x6B63;&#x5B9A;</span><br><span class="line">    if sum(sum(sum(isnan(sigma))))&gt;0||sum(sum(sum(isinf(sigma))))&gt;0</span><br><span class="line">        break;</span><br><span class="line">    end</span><br><span class="line">    pm_x=zeros(1,sample_num);</span><br><span class="line">    %&#x8BA1;&#x7B97;&#x6BCF;&#x4E2A;&#x6837;&#x672C;&#x7684;&#x5168;&#x6982;&#x7387;</span><br><span class="line">    for i=1:sample_num</span><br><span class="line">        tem=0;</span><br><span class="line">        for j=1:class_num</span><br><span class="line">            tem=tem+a(j)*mvnpdf(x_scale(:,i), u(:,j), sigma(:,:,j));</span><br><span class="line">        end</span><br><span class="line">        pm_x(i)=tem;</span><br><span class="line">    end</span><br><span class="line">    %&#x8BA1;&#x7B97;&#x7B2C;i&#x4E2A;&#x6837;&#x672C;&#x5C5E;&#x4E8E;&#x7B2C;j&#x7C7B;&#x7684;&#x540E;&#x9A8C;&#x6982;&#x7387;</span><br><span class="line">    pm=zeros(sample_num,class_num);</span><br><span class="line">    for i=1:sample_num</span><br><span class="line">        for j=1:class_num</span><br><span class="line">            pm(i,j)=a(j)*mvnpdf(x_scale(:,i), u(:,j), sigma(:,:,j))/pm_x(i);</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    %&#x8BA1;&#x7B97;&#x5747;&#x503C;&#x5411;&#x91CF;,&#x534F;&#x65B9;&#x5DEE;&#x77E9;&#x9635;&#xFF0C;&#x6DF7;&#x5408;&#x7CFB;&#x6570;</span><br><span class="line">    for i=1:class_num</span><br><span class="line">        sum_pm=sum(pm(:,i));</span><br><span class="line">        u(:,i)=sum(repmat(pm(:,i)&apos;,feat_num,1).*x_scale,2)/sum_pm;</span><br><span class="line">        for j=1:sample_num</span><br><span class="line">            sigma(:,:,i)=sigma(:,:,i)+pm(j,i)*(x_scale(:,j)-u(:,i))*(x_scale(:,j)-u(:,i))&apos;;</span><br><span class="line">        end</span><br><span class="line">        sigma(:,:,i)=sigma(:,:,i)/sum_pm;</span><br><span class="line">        a(i)=sum_pm/sample_num;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">%&#x628A;&#x6BCF;&#x4E2A;&#x6837;&#x672C;&#x4E2D;&#x6DF7;&#x5408;&#x7CFB;&#x6570;&#x6700;&#x5927;&#x7684;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#x4F5C;&#x4E3A;&#x5176;&#x6807;&#x7B7E;</span><br><span class="line">[~,y]=max(pm,[],2);</span><br></pre></td></tr></tbody></table></figure><h2 id="GMM-display-m"><a href="#GMM-display-m" class="headerlink" title="GMM_display.m"></a>GMM_display.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function GMM_display(x,y,sample_num,class_num)</span><br><span class="line">figure;</span><br><span class="line">hold on;</span><br><span class="line">color_bar=zeros(class_num,3);</span><br><span class="line">for i=1:class_num</span><br><span class="line">    color_bar(i,:)=[rand(1),rand(1),rand(1)];</span><br><span class="line">end</span><br><span class="line">for i=1:sample_num</span><br><span class="line">    if y(i)==0</span><br><span class="line">        %&#x753B;&#x51FA;&#x566A;&#x58F0;&#x70B9;&#xFF0C;&#x7528;*&#x8868;&#x793A;</span><br><span class="line">        plot(x(1,i),x(2,i),&apos;k*&apos;)</span><br><span class="line">    else</span><br><span class="line">        %&#x753B;&#x51FA;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x6837;&#x672C;&#x6570;&#x636E;&#xFF0C;&#x7528;o&#x8868;&#x793A;</span><br><span class="line">        plot(x(1,i),x(2,i),&apos;color&apos;,color_bar(y(i),:),&apos;marker&apos;,&apos;o&apos;);</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">hold off;</span><br></pre></td></tr></tbody></table></figure><p><br><br></p><h1 id="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"><a href="#&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;" class="headerlink" title="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"></a><font size="5" color="red">&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;</font></h1><p><img src="/images/MACHINE/gmm.png" alt="GMM"></p><h1 id="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"><a href="#&#x6027;&#x80FD;&#x6BD4;&#x8F83;" class="headerlink" title="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x6027;&#x80FD;&#x6BD4;&#x8F83;</font></h1><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x5927;&#x90E8;&#x5206;&#x5F62;&#x72B6;&#x7684;&#x805A;&#x7C7B;</li><li>&#x5927;&#x6570;&#x636E;&#x96C6;&#x65F6;&#xFF0C;&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F;</li><li>&#x5BF9;&#x4E8E;&#x8DDD;&#x79BB;&#x6216;&#x5BC6;&#x5EA6;&#x805A;&#x7C7B;&#xFF0C;&#x66F4;&#x9002;&#x5408;&#x9AD8;&#x7EF4;&#x7279;&#x5F81;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x8BA1;&#x7B97;&#x590D;&#x6742;&#xFF0C;&#x901F;&#x5EA6;&#x8F83;&#x6162;</li><li>&#x96BE;&#x4EE5;&#x5BF9;&#x5706;&#x5F62;&#x6570;&#x636E;&#x805A;&#x7C7B;</li><li>&#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x77E5;&#x9053;&#x7C7B;&#x522B;&#x7684;&#x4E2A;&#x6570;</li><li>&#x521D;&#x59CB;&#x5316;&#x53C2;&#x6570;&#x4F1A;&#x5BF9;&#x805A;&#x7C7B;&#x7ED3;&#x679C;&#x4EA7;&#x751F;&#x5F71;&#x54CD;</li></ul></font></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;GMM&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="无监督学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>谱聚类(Spectral Clustering)</title>
    <link href="https://USTCcoder.github.io/2019/05/11/clustering_SPECTRAL/"/>
    <id>https://USTCcoder.github.io/2019/05/11/clustering_SPECTRAL/</id>
    <published>2019-05-11T10:52:21.000Z</published>
    <updated>2020-05-09T10:20:44.771Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x8C31;&#x805A;&#x7C7B;&#x65B9;&#x6CD5;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x89E3;&#x8BFB;"><a href="#&#x539F;&#x7406;&#x89E3;&#x8BFB;" class="headerlink" title="&#x539F;&#x7406;&#x89E3;&#x8BFB;"></a><font size="5" color="red">&#x539F;&#x7406;&#x89E3;&#x8BFB;</font></h1><p>&#x2003;&#x2003;Spectral Clustering:&#x662F;&#x4E00;&#x79CD;&#x57FA;&#x4E8E;<strong>&#x56FE;&#x8BBA;</strong>&#x7684;&#x805A;&#x7C7B;&#x7B97;&#x6CD5;&#xFF0C;&#x7B2C;&#x4E00;&#x6B65;&#x662F;<strong>&#x6784;&#x56FE;</strong>&#xFF1A;&#x5C06;&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x5BF9;&#x8C61;&#x770B;&#x505A;&#x7A7A;&#x95F4;&#x4E2D;&#x7684;&#x70B9;V&#xFF0C;&#x5C06;&#x8FD9;&#x4E9B;&#x70B9;&#x4E4B;&#x7528;&#x8FB9;E&#x8FDE;&#x63A5;&#x8D77;&#x6765;&#xFF0C;&#x8DDD;&#x79BB;&#x8F83;&#x8FDC;&#x7684;&#x4E24;&#x4E2A;&#x70B9;&#x4E4B;&#x95F4;&#x7684;&#x8FB9;&#x6743;&#x91CD;&#x503C;&#x8F83;&#x4F4E;&#x3001;&#x8DDD;&#x79BB;&#x8F83;&#x8FD1;&#x7684;&#x4E24;&#x4E2A;&#x70B9;&#x4E4B;&#x95F4;&#x7684;&#x8FB9;&#x6743;&#x91CD;&#x503C;&#x8F83;&#x9AD8;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x6784;&#x6210;&#x4E86;&#x4E00;&#x4E2A;<strong>&#x57FA;&#x4E8E;&#x76F8;&#x4F3C;&#x5EA6;&#x7684;&#x65E0;&#x5411;&#x6743;&#x91CD;&#x56FE;G(V,E)</strong>&#x3002;&#x7B2C;&#x4E8C;&#x6B65;&#x662F;<strong>&#x5207;&#x56FE;</strong>&#xFF1A;&#x6309;&#x7167;&#x4E00;&#x5B9A;&#x7684;&#x5207;&#x8FB9;&#x89C4;&#x5219;&#x5C06;&#x56FE;&#x5207;&#x5206;&#x4E3A;&#x4E0D;&#x540C;&#x7684;&#x5B50;&#x56FE;&#xFF0C;&#x89C4;&#x5219;&#x662F;&#x4F7F;&#x5B50;&#x56FE;&#x5185;&#x7684;&#x8FB9;&#x6743;&#x91CD;&#x548C;&#x5C3D;&#x53EF;&#x80FD;&#x5927;&#xFF0C;&#x4E0D;&#x540C;&#x5B50;&#x56FE;&#x95F4;&#x7684;&#x8FB9;&#x6743;&#x91CD;&#x548C;&#x5C3D;&#x53EF;&#x80FD;&#x5C0F;&#xFF0C;&#x4ECE;&#x800C;&#x8FBE;&#x5230;&#x805A;&#x7C7B;&#x76EE;&#x7684;&#x3002;</p><a id="more"></a><h1 id="&#x6838;&#x5FC3;&#x601D;&#x60F3;"><a href="#&#x6838;&#x5FC3;&#x601D;&#x60F3;" class="headerlink" title="&#x6838;&#x5FC3;&#x601D;&#x60F3;"></a><font size="5" color="red">&#x6838;&#x5FC3;&#x601D;&#x60F3;</font></h1><p>&#x2003;&#x2003;<font size="4">1. &#x90BB;&#x63A5;&#x77E9;&#x9635;W&#x7684;&#x6784;&#x5EFA;</font><br>$$w_{ij}=\begin{cases}exp(-\frac{\lVert x_i-x_j \rVert ^2}{2 \sigma ^2})  &amp; i \neq j \\[2ex] 0 &amp; i=j \end{cases}$$</p><p>&#x2003;&#x2003;<font size="4">2. &#x5EA6;&#x77E9;&#x9635;W&#x7684;&#x6784;&#x5EFA;</font><br>$$d_{ij}=\begin{cases}0  &amp; i \neq j \\[2ex] \displaystyle \sum_{j=1} w_{ij} &amp; i=j \end{cases}$$</p><p>&#x2003;&#x2003;<font size="4">3. &#x76EE;&#x6807;&#x51FD;&#x6570;</font></p><ul><li><p>&#x6743;&#x91CD;&#x5207;&#x56FE;<br>$$W(A,B)=\displaystyle \sum_{i \in A, j \in B} w_{ij}$$</p></li><li><p>Ncut&#x5207;&#x56FE;<br>\begin{align}<br>Ncut(A_1,A_2, \cdots ,A_n) &amp;=\displaystyle \sum_{i=1}^n \frac{W(A_i, \overline {A_i})}{\displaystyle \sum_{j \in A_i} \displaystyle \sum_{k=1} w_{jk}} \\<br>&amp;=\underset{F}{\underbrace{arg\ min}}\ {tr(F^TD^{-1/2}LD^{-1/2}F)} \ , \ s.t. \ H^TDH=\mathrm{I}<br>\end{align}</p></li></ul><p>&#x2003;&#x2003;<font size="4">4. &#x6C42;&#x6807;&#x51C6;&#x5316;&#x62C9;&#x666E;&#x62C9;&#x65AF;&#x77E9;&#x9635;</font><br>$$L_{sym}=D^{-1/2}LD^{-1/2}=D^{-1/2}(D-W)D^{-1/2}$$</p><p>&#x2003;&#x2003;<font size="4">5. &#x53D6;&#x524D;K&#x4E2A;&#x7279;&#x5F81;&#x503C;&#x5BF9;&#x5E94;&#x7684;&#x7279;&#x5F81;&#x5411;&#x91CF;</font></p><p>&#x2003;&#x2003;<font size="4">6. &#x7528;K-Means&#x5BF9;&#x5F52;&#x4E00;&#x5316;&#x7684;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x8FDB;&#x884C;&#x5206;&#x7C7B;</font></p><p>&#x2003;&#x2003;<font size="4">7. &#x4E00;&#x4E2A;&#x4FBF;&#x4E8E;&#x7406;&#x89E3;&#x7684;&#x5B9E;&#x4F8B;</font><br><img src="/images/MACHINE/spectral2.png" alt="SPECTRAL"><br>$$x=\begin{bmatrix} 0.7 &amp; 0.8 &amp; 0.1 &amp; 0.4 &amp; 0.2 &amp; 0.5 &amp; 0.6 \\ 0.5 &amp; 0.6 &amp; 0.1 &amp; 0.8 &amp; 0.2 &amp; 0.8 &amp; 0.7 \end{bmatrix}$$<br><br><br><br>$$w=\begin{bmatrix} 0 &amp; 0.990 &amp; 0.771 &amp; 0.914 &amp; 0.844 &amp; 0.937 &amp; 0.975 \\ 0.990 &amp; 0 &amp; 0.691 &amp; 0.905 &amp; 0.771 &amp; 0.937 &amp; 0.975 \\ 0.771 &amp; 0.691 &amp; 0 &amp; 0.748 &amp; 0.990 &amp; 0.723 &amp; 0.737 \\ 0.914 &amp; 0.905 &amp; 0.748 &amp; 0 &amp; 0.819 &amp; 0.995 &amp; 0.975 \\ 0.844 &amp; 0.771 &amp; 0.990 &amp; 0.819 &amp; 0 &amp; 0.799 &amp; 0.815 \\ 0.937 &amp; 0.937 &amp; 0.723 &amp; 0.995 &amp; 0.799 &amp; 0 &amp; 0.990 \\ 0.975 &amp; 0.975 &amp; 0.737 &amp; 0.975 &amp; 0.815 &amp; 0.990 &amp; 0 \end{bmatrix}$$<br><br><br><br>$$d=\begin{bmatrix} 5.43 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 5.27 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 4.66 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 5.36 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 5.04 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 5.38 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 5.47 \end{bmatrix}$$<br><br><br><br>$$L_{sym}=\begin{bmatrix} 1 &amp; -0.185 &amp; -0.153 &amp; -0.169 &amp; -0.161 &amp; -0.173 &amp; -0.179 \\ -0.185 &amp; 1 &amp; -0.139 &amp; -0.170 &amp; -0.150 &amp; -0.176 &amp; -0.182 \\ -0.153 &amp; -0.139 &amp; 1 &amp; -0.150 &amp; -0.204 &amp; -0.144 &amp; -0.146 \\ -0.169 &amp; -0.170 &amp; -0.150 &amp; 1 &amp; -0.158 &amp; -0.185 &amp; -0.180 \\ -0.161 &amp; -0.150 &amp; -0.204 &amp; -0.158 &amp; 1 &amp; -0.153 &amp; -0.155 \\ -0.173 &amp; -0.176 &amp; -0.144 &amp; -0.185 &amp; -0.153 &amp; 1 &amp; -0.183 \\ -0.179 &amp; -0.182 &amp; -0.146 &amp; -0.180 &amp; -0.155 &amp; -0.183 &amp; 1 \end{bmatrix}$$<br><br><br><br>$$feat_value=\begin{bmatrix} 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 1.080 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 1.159 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 1.205 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1.183 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1.187 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1.186 \end{bmatrix}$$<br><br><br><br>$$feat_vector=\begin{bmatrix} -0.385 &amp; -0.141 &amp; 0.535 &amp; -0.004 &amp; 0.371 &amp; 0.534 &amp; -0.349 \\  -0.379 &amp; -0.302 &amp; 0.470 &amp; -0.040 &amp; 0.042 &amp; -0.691 &amp; 0.249 \\  -0.357 &amp; 0.642 &amp; -0.005 &amp; -0.675 &amp; -0.031 &amp; -0.033 &amp; 0.051 \\  -0.383 &amp; -0.178 &amp; -0.575 &amp; -0.004 &amp; 0.246 &amp; -0.299 &amp; -0.584 \\  -0.371 &amp; 0.558 &amp; 0.010 &amp; 0.736 &amp; -0.036 &amp; -0.053 &amp; 0.070 \\  -0.383 &amp; -0.261 &amp; -0.400 &amp; -0.019 &amp; 0.264 &amp; 0.314 &amp; 0.676 \\  -0.387 &amp; -0.256 &amp; -0.034 &amp; -0.017 &amp; -0.853 &amp; 0.213 &amp; -0.104 \end{bmatrix}$$<br>&#x2003;&#x2003;<font size="4">&#x53D6;&#x6700;&#x5C0F;&#x7684;&#x4E24;&#x4E2A;&#x7279;&#x5F81;&#x503C;&#x5BF9;&#x5E94;&#x7684;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x53EF;&#x5F97;&#xFF1A;</font><br>$$feature_vector=\begin{bmatrix} -0.385 &amp; -0.141 \\  -0.379 &amp; -0.302 \\  -0.357 &amp; 0.642 \\  -0.383 &amp; -0.178 \\  -0.371 &amp; 0.558 \\  -0.383 &amp; -0.261 \\  -0.387 &amp; -0.256 \end{bmatrix}$$<br>&#x2003;&#x2003;<font size="4">&#x7279;&#x5F81;&#x5411;&#x91CF;&#x6309;&#x884C;&#x5F52;&#x4E00;&#x5316;&#xFF1A;</font><br>$$feature_vector=\begin{bmatrix} -0.939 &amp; -0.344 \\ -0.782 &amp; -0.623 \\ -0.486 &amp; 0.874 \\ -0.907 &amp; -0.422 \\ -0.553 &amp; 0.833 \\ -0.827 &amp; -0.563 \\ -0.834 &amp; -0.552 \end{bmatrix}$$<br>&#x2003;&#x2003;<font size="4">&#x53EF;&#x4EE5;&#x660E;&#x663E;&#x770B;&#x51FA;&#xFF1A;${x_1,x_2,x_4,x_6,x_7} \in A_1\ ,\ {x_3,x_5} \in A_2$</font><br><img src="/images/MACHINE/spectral3.png" alt="SPECTRAL"></p><h1 id="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"><a href="#&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;</font></h1><p><img src="/images/MACHINE/spectral9.png" alt="SPECTRAL"></p><p><br><br></p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><p><font size="4">&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6570;&#x636E;&#x96C6;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;<a href="https://ustccoder.github.io/2019/04/25/clustering_Dataset/">&#x6570;&#x636E;&#x96C6;(Data Set)</a></font></p><h2 id="SPECTRAL-main-m"><a href="#SPECTRAL-main-m" class="headerlink" title="SPECTRAL_main.m"></a>SPECTRAL_main.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">load(&apos;..\\\\cluster_mixture.mat&apos;);</span><br><span class="line">%&#x8F93;&#x5165;x&#x7684;&#x77E9;&#x9635;</span><br><span class="line">x=data;</span><br><span class="line">randIndex = randperm(size(x,2));</span><br><span class="line">x=x(:,randIndex);</span><br><span class="line">%&#x5E0C;&#x671B;&#x5212;&#x5206;&#x7684;&#x7C7B;&#x522B;&#x6570;</span><br><span class="line">class_num=3;</span><br><span class="line">%&#x6837;&#x672C;&#x6570;</span><br><span class="line">sample_num=size(x,2);</span><br><span class="line">%&#x7279;&#x5F81;&#x6570;&#x76EE;</span><br><span class="line">feat_num=size(x,1);</span><br><span class="line">%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1</span><br><span class="line">x_scale=zeros(size(x));</span><br><span class="line">for i=1:feat_num</span><br><span class="line">    x_scale(i,:)=(x(i,:)-min(x(i,:)))/(max(x(i,:))-min(x(i,:)));</span><br><span class="line">end</span><br><span class="line">y=SPECTRAL_classify(x_scale,sample_num,class_num);</span><br><span class="line">%&#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A;</span><br><span class="line">if feat_num==2</span><br><span class="line">    SPECTRAL_display(x,y,sample_num,class_num);</span><br><span class="line">else</span><br><span class="line">    disp(&apos;The Feature Is Not Two-Dimensional&apos;);</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="SPECTRAL-classify-m"><a href="#SPECTRAL-classify-m" class="headerlink" title="SPECTRAL_classify.m"></a>SPECTRAL_classify.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function y=SPECTRAL_classify(x_scale,sample_num,class_num)</span><br><span class="line">%w&#x4E3A;&#x90BB;&#x63A5;&#x77E9;&#x9635;</span><br><span class="line">w=zeros(sample_num);</span><br><span class="line">for i=1:sample_num</span><br><span class="line">    w(i,:)=exp(-sum((x_scale-repmat(x_scale(:,i),1,sample_num)).^2)/2);</span><br><span class="line">    w(i,i)=0;</span><br><span class="line">end</span><br><span class="line">%D&#x4E3A;&#x5EA6;&#x77E9;&#x9635;</span><br><span class="line">d=diag(sum(w,2));</span><br><span class="line">%&#x6807;&#x51C6;&#x5316;&#x62C9;&#x666E;&#x62C9;&#x65AF;&#x77E9;&#x9635;</span><br><span class="line">l=d^(-0.5)*(d-w)*d^(-0.5);</span><br><span class="line">%&#x6C42;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x548C;&#x7279;&#x5F81;&#x503C;</span><br><span class="line">[feat_vector,feat_value_temp]=eig(l);</span><br><span class="line">feat_value=diag(feat_value_temp);</span><br><span class="line">temp=sort(feat_value);</span><br><span class="line">loc=feat_value&lt;=temp(class_num);</span><br><span class="line">%&#x6C42;&#x51FA;&#x6700;&#x5C0F;&#x7684;class_num&#x4E2A;&#x7279;&#x5F81;&#x5411;&#x91CF;</span><br><span class="line">class_feat_vector=feat_vector(:,loc);</span><br><span class="line">%&#x7279;&#x5F81;&#x5411;&#x91CF;&#x5F52;&#x4E00;&#x5316;</span><br><span class="line">class_feat_vector=class_feat_vector./repmat(sqrt(sum(class_feat_vector.^2,2)),1,class_num);</span><br><span class="line">%&#x5229;&#x7528;kmeans&#x8FDB;&#x884C;&#x5206;&#x7C7B;</span><br><span class="line">y=SPECTRAL_kmeans(class_feat_vector&apos;,sample_num,class_num);</span><br></pre></td></tr></tbody></table></figure><h2 id="SPECTRAL-display-m"><a href="#SPECTRAL-display-m" class="headerlink" title="SPECTRAL_display.m"></a>SPECTRAL_display.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function SPECTRAL_display(x,y,sample_num,class_num)</span><br><span class="line">color_bar=zeros(class_num,3);</span><br><span class="line">hold on;</span><br><span class="line">for i=1:class_num</span><br><span class="line">    color_bar(i,:)=[rand(1),rand(1),rand(1)];</span><br><span class="line">end</span><br><span class="line">for i=1:sample_num</span><br><span class="line">    %&#x7ED8;&#x5236;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x7528;o&#x8868;&#x793A;</span><br><span class="line">    plot(x(1,i),x(2,i),&apos;color&apos;,color_bar(y(i),:),&apos;marker&apos;,&apos;o&apos;);</span><br><span class="line">end</span><br><span class="line">hold off;</span><br></pre></td></tr></tbody></table></figure><h2 id="SPECTRAL-kmeans-m"><a href="#SPECTRAL-kmeans-m" class="headerlink" title="SPECTRAL_kmeans.m"></a>SPECTRAL_kmeans.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">function y=SPECTRAL_kmeans(class_feat_vector,sample_num,class_num)</span><br><span class="line">%&#x7C7B;&#x522B;&#x4E2D;&#x5FC3;&#x4F4D;&#x7F6E;</span><br><span class="line">loc_center=class_feat_vector(:,1:class_num);</span><br><span class="line">%&#x8BBE;&#x7F6E;&#x8FED;&#x4EE3;&#x6B21;&#x6570;</span><br><span class="line">k=0;</span><br><span class="line">while 1</span><br><span class="line">    %&#x521D;&#x59CB;&#x5316;&#x6700;&#x65B0;&#x7684;&#x5206;&#x7C7B;&#x4E2D;&#x5FC3;</span><br><span class="line">    loc_center_new=zeros(size(loc_center));</span><br><span class="line">    distance=zeros(class_num,sample_num);</span><br><span class="line">    %distance&#x4E3A;&#x6BCF;&#x4E00;&#x4E2A;&#x6837;&#x672C;&#x5230;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x8DDD;&#x79BB;</span><br><span class="line">    for i=1:class_num</span><br><span class="line">        distance(i,:)=sum((class_feat_vector-repmat(loc_center(:,i),1,sample_num)).^2);</span><br><span class="line">    end</span><br><span class="line">    %&#x6C42;&#x51FA;&#x6BCF;&#x4E2A;&#x6837;&#x672C;&#x5230;&#x54EA;&#x4E00;&#x7C7B;&#x6700;&#x8FD1;</span><br><span class="line">    [~,y]=min(distance);</span><br><span class="line">    %&#x66F4;&#x65B0;&#x5206;&#x7C7B;&#x4E2D;&#x5FC3;</span><br><span class="line">    for i=1:class_num</span><br><span class="line">        loc_center_new(:,i)=sum(class_feat_vector(:,y==i),2)/sum(y==i);</span><br><span class="line">    end</span><br><span class="line">    %&#x5982;&#x679C;&#x5206;&#x7C7B;&#x4E2D;&#x5FC3;&#x548C;&#x4E0A;&#x4E00;&#x6B21;&#x5206;&#x7C7B;&#x4E2D;&#x5FC3;&#x76F8;&#x7B49;&#x5219;&#x5206;&#x7C7B;&#x5B8C;&#x6BD5;</span><br><span class="line">    if isequal(loc_center_new,loc_center)</span><br><span class="line">        break;</span><br><span class="line">    %&#x5426;&#x5219;&#x7EE7;&#x7EED;&#x5206;&#x7C7B;</span><br><span class="line">    else</span><br><span class="line">        loc_center=loc_center_new;</span><br><span class="line">        k=k+1;</span><br><span class="line">        %&#x5982;&#x679C;&#x5206;&#x7C7B;&#x6B21;&#x6570;&#x8FBE;&#x5230;1000&#x4ECD;&#x7136;&#x6CA1;&#x6709;&#x7ED3;&#x675F;&#xFF0C;&#x5219;&#x5F3A;&#x5236;&#x5206;&#x7C7B;&#x7ED3;&#x675F;</span><br><span class="line">        if k&gt;=1000</span><br><span class="line">            break;</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><p><br><br></p><h1 id="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"><a href="#&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;" class="headerlink" title="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"></a><font size="5" color="red">&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;</font></h1><p><img src="/images/MACHINE/spectral.png" alt="SPECTRAL"></p><h1 id="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"><a href="#&#x6027;&#x80FD;&#x6BD4;&#x8F83;" class="headerlink" title="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x6027;&#x80FD;&#x6BD4;&#x8F83;</font></h1><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x6570;&#x636E;&#x70B9;&#x7684;&#x9009;&#x62E9;</li><li>&#x4F7F;&#x7528;&#x4E86;&#x964D;&#x7EF4;&#x6280;&#x672F;&#xFF0C;&#x9002;&#x5408;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#x7684;&#x805A;&#x7C7B;</li><li>&#x5EFA;&#x7ACB;&#x5728;&#x8C31;&#x56FE;&#x7406;&#x8BBA;&#xFF0C;&#x80FD;&#x5728;&#x5927;&#x90E8;&#x5206;&#x5F62;&#x72B6;&#x805A;&#x7C7B;&#xFF0C;&#x6536;&#x655B;&#x4E8E;&#x5168;&#x5C40;&#x6700;&#x4F18;&#x89E3;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x96BE;&#x4EE5;&#x5BF9;&#x5706;&#x5F62;&#x6570;&#x636E;&#x805A;&#x7C7B;</li><li>&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x975E;&#x5E38;&#x654F;&#x611F;</li><li>&#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x77E5;&#x9053;&#x7C7B;&#x522B;&#x7684;&#x4E2A;&#x6570;</li></ul></font></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Spectral Clustering&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="无监督学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>快速搜索聚类(CFDP)</title>
    <link href="https://USTCcoder.github.io/2019/05/09/clustering_CFDP/"/>
    <id>https://USTCcoder.github.io/2019/05/09/clustering_CFDP/</id>
    <published>2019-05-09T12:09:57.000Z</published>
    <updated>2019-08-07T15:51:56.081Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x5FEB;&#x901F;&#x641C;&#x7D22;&#x805A;&#x7C7B;&#x65B9;&#x6CD5;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x89E3;&#x8BFB;"><a href="#&#x539F;&#x7406;&#x89E3;&#x8BFB;" class="headerlink" title="&#x539F;&#x7406;&#x89E3;&#x8BFB;"></a><font size="5" color="red">&#x539F;&#x7406;&#x89E3;&#x8BFB;</font></h1><p>&#x2003;&#x2003;CFDP(Clustering By Fast Search And Find Of Density Peaksd):&#x7ECF;&#x5178;&#x7684;&#x805A;&#x7C7B;&#x7B97;&#x6CD5;K-means&#x4E0D;&#x80FD;&#x68C0;&#x6D4B;&#x975E;&#x7403;&#x9762;&#x7C7B;&#x522B;&#x7684;&#x6570;&#x636E;&#x5206;&#x5E03;&#xFF0C;DBSCAN&#x5FC5;&#x987B;&#x6307;&#x5B9A;&#x4E00;&#x4E2A;&#x5BC6;&#x5EA6;&#x9608;&#x503C;&#xFF0C;CFDP&#x901A;&#x8FC7;&#x5BF9;&#x4E24;&#x79CD;&#x65B9;&#x6CD5;&#x7684;&#x6539;&#x5584;&#xFF0C;&#x9009;&#x62E9;&#x6BCF;&#x4E2A;&#x533A;&#x57DF;&#x5BC6;&#x5EA6;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x6839;&#x636E;&#x5BC6;&#x5EA6;&#x9009;&#x62E9;&#x5468;&#x56F4;&#x70B9;&#x7684;&#x5F52;&#x5C5E;&#x3002;<br><a id="more"></a></p><h1 id="&#x6838;&#x5FC3;&#x601D;&#x60F3;"><a href="#&#x6838;&#x5FC3;&#x601D;&#x60F3;" class="headerlink" title="&#x6838;&#x5FC3;&#x601D;&#x60F3;"></a><font size="5" color="red">&#x6838;&#x5FC3;&#x601D;&#x60F3;</font></h1><p>&#x2003;&#x2003;<font size="4">1. &#x6C42;&#x51FA;&#x6BCF;&#x4E2A;&#x70B9;&#x7684;&#x5BC6;&#x5EA6;&#x3C1;<sub>i</sub>(&#x591A;&#x79CD;&#x5B9A;&#x4E49;&#x65B9;&#x6CD5;)</font></p><ul><li>k&#x8FD1;&#x90BB;&#x5747;&#x503C;&#x5012;&#x6570;<br>$$\rho_i = \frac{k}{\displaystyle \sum_{j=1}^k d_{ij}} \ , \ d_{i1} \leq d_{i2} \leq \cdots \leq d_{in}$$</li><li>&#x9AD8;&#x65AF;&#x6838;&#x76F8;&#x4F3C;&#x5EA6;<br>$$\rho_i = \underset{d_{ij} \leq d_c}{\sum}exp[-(\frac{d_{ij}}{d_c})^2]$$</li><li>&#x5468;&#x56F4;&#x70B9;&#x7684;&#x4E2A;&#x6570;<br>$$\rho_i = \sum_{j=1}^n {\chi(d_{ij}-d_c)} \ , \ \chi(x)= \begin{cases} 1, &amp; x&lt;0 \[2ex] 0, &amp; otherwise \end{cases} \ , \ &#x5176;&#x4E2D;d_c&#x4E3A;&#x622A;&#x65AD;&#x8DDD;&#x79BB;$$</li></ul><p>&#x2003;&#x2003;<font size="4">2. &#x5BC6;&#x5EA6;&#x4ECE;&#x5927;&#x5230;&#x5C0F;&#x6392;&#x5E8F;&#xFF0C;&#x5E76;&#x6C42;&#x51FA;&#x6700;&#x5927;&#x5BC6;&#x5EA6;&#x3C1;<sub>max</sub></font><br>$$\rho_{x_1} \ge \rho_{x_2} \ge \cdots \ge \rho_{x_n} \ , \ \rho_{max} = \rho_{x_1} $$</p><ul><li>d<sub>ij</sub>:&#x539F;&#x5E8F;&#x5217;i&#xFF0C;j&#x6837;&#x672C;&#x7684;&#x8DDD;&#x79BB;</li><li>d(x<sub>i</sub>,x<sub>j</sub>):&#x5BC6;&#x5EA6;&#x6392;&#x5E8F;&#x540E;&#xFF0C;x<sub>i</sub>&#x548C;x<sub>j</sub>&#x6837;&#x672C;&#x7684;&#x8DDD;&#x79BB;</li></ul><p>&#x2003;&#x2003;<font size="4">3. &#x6C42;&#x51FA;&#x6BCF;&#x4E2A;&#x70B9;&#x7684;&#x8DDD;&#x79BB;&#x3B4;<sub>i</sub></font><br>&#x2003;&#x2003;&#x3B4;<sub>i</sub>&#xFF1A;&#x5230;&#x5BC6;&#x5EA6;&#x5927;&#x4E8E;i&#x7684;&#x6700;&#x8FD1;&#x70B9;j&#x7684;&#x8DDD;&#x79BB;dist(ij)<br>$$\delta_{x_i} = \begin{cases} \underset{j&lt;i}{min}\ d(x_i,x_j) &amp;  i \ge 2  \[2ex] \underset{j \ge 2}{\max}\ \delta_{x_j} &amp; i=1 \end{cases} $$</p><p>&#x2003;&#x2003;<font size="4">4. &#x753B;&#x51FA;&#x3C1;-&#x3B4;&#x56FE;&#xFF0C;&#x627E;&#x5230;&#x79BB;&#x7FA4;&#x70B9;(&#x4EE3;&#x8868;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x4E2D;&#x5FC3;)</font><br><img src="/images/MACHINE/cfdp1.png" alt="CFDP"></p><p>&#x2003;&#x2003;<font size="4">5. &#x6309;&#x5BC6;&#x5EA6;&#x4ECE;&#x5927;&#x5230;&#x5C0F;&#x5F52;&#x5C5E;&#x4E8E;&#x8DDD;&#x79BB;&#x6700;&#x8FD1;&#x70B9;&#x7684;&#x7C7B;&#x522B;</font><br>$$x_i \in C_k \ , \ &#x5176;&#x4E2D;k=\underset{j&lt;i \ , \ x_j \in C_k}{arg \ min}\ d(x_i,x_j)$$</p><p>&#x2003;&#x2003;<font size="4">6. &#x5B9A;&#x4E49;&#x4E24;&#x7C7B;&#x4E4B;&#x95F4;&#x7684;&#x6700;&#x5C0F;&#x8DDD;&#x79BB;d<sub>0</sub></font><br>&#x2003;&#x2003;&#x4E24;&#x7C7B;&#x7684;&#x6700;&#x5C0F;&#x8DDD;&#x79BB;&#xFF1A;&#x6240;&#x6709;&#x6837;&#x672C;&#x4E4B;&#x95F4;&#x8DDD;&#x79BB;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;&#x540E;&#x7B2C;2%&#x4E2A;&#x79F0;&#x4E24;&#x7C7B;&#x7684;&#x6700;&#x5C0F;&#x8DDD;&#x79BB;&#x3002;</p><p>&#x2003;&#x2003;<font size="4">7. &#x5B9A;&#x4E49;&#x8FB9;&#x7F18;&#x70B9;&#xFF0C;&#x6C42;&#x51FA;&#x8FB9;&#x7F18;&#x70B9;&#x6700;&#x5927;&#x5BC6;&#x5EA6;&#x3C1;<sub>b</sub></font><br>&#x2003;&#x2003;&#x8FB9;&#x7F18;&#x70B9;&#xFF1A;&#x5728;k&#x7C7B;&#x6570;&#x636E;&#x5230;&#x975E;k&#x7C7B;&#x6570;&#x636E;&#x7684;&#x6700;&#x5C0F;&#x8DDD;&#x79BB;&#x5C0F;&#x4E8E;dist<sub>0</sub>&#x7684;&#x70B9;&#xFF0C;&#x79F0;&#x4E3A;k&#x7C7B;&#x6570;&#x636E;&#x7684;&#x8FB9;&#x7F18;&#x70B9;&#x3002;<br>$$E = {i | d_{ij}&lt;dist_0 , \forall i \in C_k , j \in \overline{C_k} }$$<br>$$\rho_b = \underset{i \in E}{\max}\ \rho_i$$</p><p>&#x2003;&#x2003;<font size="4">8. &#x5224;&#x65AD;&#x566A;&#x58F0;&#x70B9;</font><br>&#x2003;&#x2003;&#x566A;&#x58F0;&#x70B9;&#xFF1A;&#x5C06;k&#x7C7B;&#x4E2D;&#x5BC6;&#x5EA6;&#x5C0F;&#x4E8E;&#x3C1;<sub>b</sub>&#x7684;&#x6240;&#x6709;&#x6570;&#x636E;&#x8BB0;&#x4E3A;&#x566A;&#x58F0;&#x3002;<br>$$N={i | \rho_i&lt;\rho_b , \forall i \in C_k  }$$</p><h1 id="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"><a href="#&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;</font></h1><p><img src="/images/MACHINE/cfdp9.png" alt="CFDP"></p><p><br><br></p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><p><font size="4">&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6570;&#x636E;&#x96C6;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;<a href="https://ustccoder.github.io/2019/04/25/clustering_Dataset/">&#x6570;&#x636E;&#x96C6;(Data Set)</a></font></p><h2 id="CFDP-main-m"><a href="#CFDP-main-m" class="headerlink" title="CFDP_main.m"></a>CFDP_main.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">load(&apos;..\\cluster_line.mat&apos;);</span><br><span class="line">%&#x8F93;&#x5165;x&#x7684;&#x77E9;&#x9635;</span><br><span class="line">x=data;</span><br><span class="line">randIndex = randperm(size(x,2));</span><br><span class="line">x=x(:,randIndex);</span><br><span class="line">%&#x6837;&#x672C;&#x6570;</span><br><span class="line">sample_num=size(x,2);</span><br><span class="line">%&#x5224;&#x65AD;&#x5BC6;&#x5EA6;&#x65F6;&#x68C0;&#x6D4B;&#x5468;&#x56F4;&#x70B9;&#x7684;&#x4E2A;&#x6570;</span><br><span class="line">k=round(sample_num/10);</span><br><span class="line">%&#x7279;&#x5F81;&#x6570;&#x76EE;</span><br><span class="line">feat_num=size(x,1);</span><br><span class="line">%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1</span><br><span class="line">x_scale=zeros(size(x));</span><br><span class="line">for i=1:feat_num</span><br><span class="line">    x_scale(i,:)=(x(i,:)-min(x(i,:)))/(max(x(i,:))-min(x(i,:)));</span><br><span class="line">end</span><br><span class="line">[y,density_max]=CFDP_classify(x_scale,sample_num,k);</span><br><span class="line">% &#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A;</span><br><span class="line">if feat_num==2</span><br><span class="line">    CFDP_display(x,y,sample_num,density_max)</span><br><span class="line">else</span><br><span class="line">    disp(&apos;The Feature Is Not Two-Dimensional&apos;);</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="CFDP-classify-m"><a href="#CFDP-classify-m" class="headerlink" title="CFDP_classify.m"></a>CFDP_classify.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">function [y,density_max]=CFDP_classify(x_scale,sample_num,k)</span><br><span class="line">y=zeros(1,sample_num);</span><br><span class="line">%p&#x4E3A;&#x6BCF;&#x4E2A;&#x6837;&#x672C;&#x7684;&#x5BC6;&#x5EA6;</span><br><span class="line">p=zeros(1,sample_num);</span><br><span class="line">%deta&#x4E3A;&#x9AD8;&#x5BC6;&#x5EA6;&#x8DDD;&#x79BB;</span><br><span class="line">deta=zeros(1,sample_num);</span><br><span class="line">%distance(i,j)&#x4EE3;&#x8868;&#x7B2C;i&#x4E2A;&#x6837;&#x672C;&#x5230;&#x7B2C;j&#x4E2A;&#x6837;&#x672C;&#x7684;&#x8DDD;&#x79BB;</span><br><span class="line">distance=zeros(sample_num);</span><br><span class="line">%&#x5229;&#x7528;k&#x8FD1;&#x90BB;&#x5747;&#x503C;&#x5B9A;&#x4E49;&#x5BC6;&#x5EA6;&#x8F83;&#x597D;&#xFF0C;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x5F88;&#x591A;&#x5BC6;&#x5EA6;&#x76F8;&#x540C;&#x7684;&#x70B9;&#x3002;&#x5982;&#x679C;&#x91C7;&#x7528;&#x534A;&#x5F84;&#x5185;&#x4E2A;&#x6570;&#x7684;&#x5B9A;&#x4E49;&#x65B9;&#x6CD5;&#xFF0C;&#x53EF;&#x80FD;&#x4E00;&#x5757;&#x533A;&#x57DF;&#x4F1A;&#x51FA;&#x73B0;&#x5F88;&#x591A;&#x7684;&#x7C7B;&#x522B;</span><br><span class="line">for i=1:sample_num</span><br><span class="line">    distance(i,:)=sum((x_scale-repmat(x_scale(:,i),1,sample_num)).^2);</span><br><span class="line">    temp=sort(distance(i,:));</span><br><span class="line">    p(i)=k./sum(distance(i,distance(i,:)&lt;=temp(k)));</span><br><span class="line">end</span><br><span class="line">for i=1:sample_num</span><br><span class="line">    temp=find(p&gt;p(i));</span><br><span class="line">    %&#x5982;&#x679C;&#x6709;&#x591A;&#x4E2A;&#x6700;&#x5927;&#x70B9;</span><br><span class="line">    if isempty(temp)</span><br><span class="line">        deta(i)=distance(i,find(p==max(p),1));</span><br><span class="line">    else</span><br><span class="line">        %&#x627E;&#x5230;&#x5BC6;&#x5EA6;&#x5927;&#x4E8E;&#x8BE5;&#x70B9;&#x7684;&#x4E14;&#x8DDD;&#x79BB;&#x8BE5;&#x70B9;&#x6700;&#x8FD1;&#x7684;&#x70B9;</span><br><span class="line">        tem=find(distance(i,p&gt;p(i))==min(distance(i,p&gt;p(i))),1);</span><br><span class="line">        deta(i)=distance(i,temp(tem));</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">%&#x5BC6;&#x5EA6;&#x6700;&#x5927;&#x70B9;&#x8D4B;&#x503C;&#x65E0;&#x7A77;   </span><br><span class="line">deta(find(p==max(p),1))=1;</span><br><span class="line">p_judge=max(p)/5;</span><br><span class="line">deta_judge=0.1;</span><br><span class="line">%&#x83B7;&#x53D6;&#x7C7B;&#x522B;&#x7684;&#x4E2D;&#x5FC3;</span><br><span class="line">center_loc=p&gt;p_judge&amp;deta&gt;deta_judge;</span><br><span class="line">%&#x627E;&#x5230;&#x7C7B;&#x522B;&#x4E2D;&#x5FC3;&#x6240;&#x5728;&#x4F4D;&#x7F6E;</span><br><span class="line">density_max=find(center_loc);</span><br><span class="line">%&#x5C06;p&#x548C;deta&#x8F83;&#x5927;&#x7684;&#x503C;&#x4F5C;&#x4E3A;&#x65B0;&#x7684;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;</span><br><span class="line">y(center_loc)=1:sum(center_loc);</span><br><span class="line">%&#x5BF9;&#x5BC6;&#x5EA6;&#x4ECE;&#x5927;&#x5230;&#x5C0F;&#x6392;&#x5E8F;</span><br><span class="line">[~,density_loc]=sort(p,&apos;descend&apos;);</span><br><span class="line">%&#x5C06;&#x67D0;&#x70B9;&#x5212;&#x5206;&#x5230;&#x5BC6;&#x5EA6;&#x5927;&#x4E8E;&#x8BE5;&#x70B9;&#x5E76;&#x4E14;&#x8DDD;&#x79BB;&#x8BE5;&#x70B9;&#x6700;&#x8FD1;&#x7684;&#x4E00;&#x7C7B;</span><br><span class="line">for i=2:sample_num</span><br><span class="line">    if y(density_loc(i))==0</span><br><span class="line">        temp=density_loc(1:i-1);</span><br><span class="line">        y(density_loc(i))=y(temp(find(distance(density_loc(i),temp)==min(distance(density_loc(i),temp)),1)));</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">%&#x5B9A;&#x4E49;&#x4E24;&#x7C7B;&#x4E4B;&#x95F4;&#x7684;&#x6700;&#x5C0F;&#x8DDD;&#x79BB;</span><br><span class="line">distance_temp=distance.*triu(ones(sample_num));</span><br><span class="line">temp=sort(distance_temp(distance_temp&gt;0));</span><br><span class="line">%&#x53D6;&#x51FA;&#x524D;%2&#x7684;&#x8DDD;&#x79BB;&#x4F5C;&#x4E3A;&#x6700;&#x5C0F;&#x8DDD;&#x79BB;</span><br><span class="line">dc=temp(round(length(temp)/50));</span><br><span class="line">for i=1:sum(center_loc)</span><br><span class="line">    %&#x5F97;&#x5230;&#x8FB9;&#x7F18;&#x70B9;</span><br><span class="line">    edge= min(distance(y==i,y~=i),[],2)&lt;dc;</span><br><span class="line">    if ~(isempty(edge)||isequal(edge,zeros(length(find(y==i)),1)))</span><br><span class="line">        tem=find(y==i);</span><br><span class="line">        %&#x5F97;&#x5230;&#x8FB9;&#x7F18;&#x533A;&#x57DF;&#x5BC6;&#x5EA6;&#x6700;&#x5927;&#x7684;&#x503C;</span><br><span class="line">        pb=max(p(tem(edge)));</span><br><span class="line">        %&#x5C06;&#x5BC6;&#x5EA6;&#x5C0F;&#x4E8E;&#x8BE5;&#x6700;&#x5927;&#x503C;&#x7684;&#x70B9;&#x4F5C;&#x4E3A;&#x566A;&#x58F0;&#x70B9;</span><br><span class="line">        y(tem(p(y==i)&lt;=pb))=0;</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="CFDP-display-m"><a href="#CFDP-display-m" class="headerlink" title="CFDP_display.m"></a>CFDP_display.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function CFDP_display(x,y,sample_num,density_max)</span><br><span class="line">color_bar=zeros(length(density_max),3);</span><br><span class="line">hold on;</span><br><span class="line">for i=1:length(density_max)</span><br><span class="line">    color_bar(i,:)=[rand(1),rand(1),rand(1)];</span><br><span class="line">end</span><br><span class="line">for i=1:sample_num</span><br><span class="line">    if y(i)==0</span><br><span class="line">        plot(x(1,i),x(2,i),&apos;ko&apos;);</span><br><span class="line">    else</span><br><span class="line">        if ismember(i,density_max)</span><br><span class="line">            plot(x(1,i),x(2,i),&apos;color&apos;,color_bar(y(i),:),&apos;marker&apos;,&apos;*&apos;);</span><br><span class="line">        else</span><br><span class="line">            plot(x(1,i),x(2,i),&apos;color&apos;,color_bar(y(i),:),&apos;marker&apos;,&apos;o&apos;);</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">hold off;</span><br></pre></td></tr></tbody></table></figure><p><br><br></p><h1 id="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"><a href="#&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;" class="headerlink" title="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"></a><font size="5" color="red">&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;</font></h1><p><img src="/images/MACHINE/cfdp.png" alt="CFDP"></p><h1 id="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"><a href="#&#x6027;&#x80FD;&#x6BD4;&#x8F83;" class="headerlink" title="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x6027;&#x80FD;&#x6BD4;&#x8F83;</font></h1><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F;</li><li>&#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x6570;&#x636E;&#x70B9;&#x7684;&#x9009;&#x62E9;</li><li>&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x4EFB;&#x610F;&#x5F62;&#x72B6;&#x7684;&#x805A;&#x7C7B;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x79BB;&#x7FA4;&#x70B9;&#x7684;&#x786E;&#x5B9A;&#x975E;&#x5E38;&#x590D;&#x6742;</li><li>&#x7B97;&#x6CD5;&#x590D;&#x6742;&#xFF0C;&#x5206;&#x7C7B;&#x901F;&#x5EA6;&#x8F83;&#x6162;</li><li>&#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D;</li><li>&#x4E0D;&#x9002;&#x5408;&#x6570;&#x636E;&#x96C6;&#x6574;&#x4F53;&#x5BC6;&#x5EA6;&#x57FA;&#x672C;&#x76F8;&#x540C;&#x7684;&#x60C5;&#x51B5;</li></ul></font></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;CFDP&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="无监督学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>密度最大值聚类(MDCA)</title>
    <link href="https://USTCcoder.github.io/2019/05/07/clustering_MDCA/"/>
    <id>https://USTCcoder.github.io/2019/05/07/clustering_MDCA/</id>
    <published>2019-05-07T12:05:27.000Z</published>
    <updated>2019-08-07T15:53:29.379Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x5BC6;&#x5EA6;&#x6700;&#x5927;&#x503C;&#x805A;&#x7C7B;&#x65B9;&#x6CD5;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x89E3;&#x8BFB;"><a href="#&#x539F;&#x7406;&#x89E3;&#x8BFB;" class="headerlink" title="&#x539F;&#x7406;&#x89E3;&#x8BFB;"></a><font size="5" color="red">&#x539F;&#x7406;&#x89E3;&#x8BFB;</font></h1><p>&#x2003;&#x2003;MDCA(Maximum Density Clustering Application):&#x5C06;&#x57FA;&#x4E8E;&#x5BC6;&#x5EA6;&#x7684;&#x601D;&#x60F3;&#x5F15;&#x5165;&#x5230;&#x5212;&#x5206;&#x805A;&#x7C7B;&#x4E2D;&#xFF0C;&#x4F7F;&#x7528;<strong>&#x5BC6;&#x5EA6;</strong>&#x800C;&#x4E0D;&#x662F;&#x521D;&#x59CB;&#x8D28;&#x5FC3;&#x4F5C;&#x4E3A;&#x8003;&#x5BDF;&#x7C07;&#x5F52;&#x5C5E;&#x60C5;&#x51B5;&#x7684;&#x4F9D;&#x636E;&#xFF0C;&#x80FD;&#x591F;<strong>&#x81EA;&#x52A8;&#x786E;&#x5B9A;</strong>&#x7C07;&#x6570;&#x91CF;&#x5E76;&#x53D1;&#x73B0;&#x4EFB;&#x610F;&#x5F62;&#x72B6;&#x7684;&#x7C07;&#x3002;MDCA&#x4E00;&#x822C;&#x4E0D;&#x4FDD;&#x7559;&#x566A;&#x58F0;&#xFF0C;&#x56E0;&#x6B64;&#x4E5F;&#x907F;&#x514D;&#x4E86;&#x7531;&#x4E8E;&#x9608;&#x503C;&#x9009;&#x62E9;&#x4E0D;&#x5F53;&#x800C;&#x9020;&#x6210;&#x5927;&#x91CF;&#x5BF9;&#x8C61;&#x4E22;&#x5F03;&#x60C5;&#x51B5;&#x3002;<br><a id="more"></a></p><h1 id="&#x6838;&#x5FC3;&#x601D;&#x60F3;"><a href="#&#x6838;&#x5FC3;&#x601D;&#x60F3;" class="headerlink" title="&#x6838;&#x5FC3;&#x601D;&#x60F3;"></a><font size="5" color="red">&#x6838;&#x5FC3;&#x601D;&#x60F3;</font></h1><p>&#x2003;&#x2003;<font size="4">1.&#x6700;&#x5927;&#x5BC6;&#x5EA6;&#x70B9;&#xFF1A;&#x53EF;&#x7528;K&#x8FD1;&#x90BB;&#x8DDD;&#x79BB;&#x4E4B;&#x548C;&#x7684;&#x5012;&#x6570;&#x8868;&#x793A;&#x5BC6;&#x5EA6;</font><br>$$\rho_{max}={ \rho_{x} | x \in C, \forall x_i \in C, \rho_(x) \ge \rho_(x_i) } \ , \ &#x5176;&#x4E2D;C&#x4E3A;&#x6570;&#x636E;&#x96C6;$$</p><p>&#x2003;&#x2003;<font size="4">2. &#x5BC6;&#x5EA6;&#x66F2;&#x7EBF;&#xFF1A;&#x6839;&#x636E;&#x6240;&#x6709;&#x5BF9;&#x8C61;&#x4E0E;x&#x7684;&#x6B27;&#x5F0F;&#x8DDD;&#x79BB;&#x5BF9;&#x6570;&#x636E;&#x96C6;&#x91CD;&#x65B0;&#x6392;&#x5E8F;</font><br>$$S_{\rho_{max}}={x_1 , x_2 , \cdots , x_n | d(x,x_1) \leq d(x,x_2) \leq \cdots \leq d(x,x_n) }$$<br><img src="/images/MACHINE/mdca1.png" alt="MDCA"></p><p>&#x2003;&#x2003;<font size="4">3. &#x5C06;&#x5BC6;&#x5EA6;&#x66F2;&#x7EBF;&#x4E2D;&#x7B2C;&#x4E00;&#x4E2A;&#x8C37;&#x503C;&#x4E4B;&#x524D;&#x7684;&#x6570;&#x636E;&#x5F52;&#x4E3A;&#x4E00;&#x7C7B;&#xFF0C;&#x5E76;&#x5C06;&#x5176;&#x5254;&#x9664;</font></p><p>&#x2003;&#x2003;<font size="4">4. &#x91CD;&#x590D;&#x6B65;&#x9AA4;1&#xFF0C;2&#xFF0C;3&#x76F4;&#x5230;&#x6240;&#x6709;&#x7684;&#x70B9;&#x90FD;&#x5728;&#x3C1;<sub>0</sub>&#x4E4B;&#x4E0B;&#x6216;&#x8005;&#x3C1;<sub>0</sub>&#x4E4B;&#x4E0A;</font></p><p>&#x2003;&#x2003;<font size="4">5. &#x4E24;&#x4E2A;&#x7C07;C<sub>i</sub>&#x548C;C<sub>j</sub>&#xFF0C;&#x7528;&#x6700;&#x8FD1;&#x6837;&#x672C;&#x8DDD;&#x79BB;&#x4F5C;&#x4E3A;&#x7C07;&#x95F4;&#x8DDD;&#x79BB;</font><br>$$d(c_i,c_j)=\underset{x_i \in C_i,x_j \in C_j}{\min}d(x_i,x_j)$$<br><img src="/images/MACHINE/mdca2.png" alt="MDCA"></p><p>&#x2003;&#x2003;<font size="4">6. &#x6839;&#x636E;&#x7C07;&#x95F4;&#x8DDD;&#x79BB;&#x9608;&#x503C;d<sub>0</sub>&#xFF0C;&#x5224;&#x65AD;&#x662F;&#x5426;&#x9700;&#x8981;&#x5408;&#x5E76;&#x4E24;&#x7C7B;</font></p><h1 id="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"><a href="#&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;</font></h1><p><img src="/images/MACHINE/mdca9.png" alt="MDCA"></p><p><br><br></p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><p><font size="4">&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6570;&#x636E;&#x96C6;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;<a href="https://ustccoder.github.io/2019/04/25/clustering_Dataset/">&#x6570;&#x636E;&#x96C6;(Data Set)</a></font></p><h2 id="MDCA-main-m"><a href="#MDCA-main-m" class="headerlink" title="MDCA_main.m"></a>MDCA_main.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">load(&apos;..\\cluster_gauss.mat&apos;);</span><br><span class="line">%&#x8F93;&#x5165;x&#x7684;&#x77E9;&#x9635;</span><br><span class="line">x=data;</span><br><span class="line">randIndex = randperm(size(x,2));</span><br><span class="line">x=x(:,randIndex);</span><br><span class="line">%&#x6837;&#x672C;&#x6570;</span><br><span class="line">sample_num=size(x,2);</span><br><span class="line">%&#x5224;&#x65AD;&#x5BC6;&#x5EA6;&#x65F6;&#x68C0;&#x6D4B;&#x5468;&#x56F4;&#x70B9;&#x7684;&#x4E2A;&#x6570;</span><br><span class="line">k=5;</span><br><span class="line">%&#x6700;&#x5C0F;&#x9608;&#x503C;&#x5BC6;&#x5EA6;</span><br><span class="line">density_min=25000;</span><br><span class="line">%&#x6700;&#x5C0F;&#x9608;&#x503C;&#x8DDD;&#x79BB;</span><br><span class="line">distance_min=0.1;</span><br><span class="line">%&#x7279;&#x5F81;&#x6570;&#x76EE;</span><br><span class="line">feat_num=size(x,1);</span><br><span class="line">%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1</span><br><span class="line">x_scale=zeros(size(x));</span><br><span class="line">for i=1:feat_num</span><br><span class="line">    x_scale(i,:)=(x(i,:)-min(x(i,:)))/(max(x(i,:))-min(x(i,:)));</span><br><span class="line">end</span><br><span class="line">[y,class_num]=MDCA_classify(x_scale,sample_num,k,density_min,distance_min);</span><br><span class="line">% &#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A;</span><br><span class="line">if feat_num==2</span><br><span class="line">    MDCA_display(x,y,sample_num,class_num);</span><br><span class="line">else</span><br><span class="line">    disp(&apos;The Feature Is Not Two-Dimensional&apos;);</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="MDCA-classify-m"><a href="#MDCA-classify-m" class="headerlink" title="MDCA_classify.m"></a>MDCA_classify.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">function [y,class_num]=MDCA_classify(x_scale,sample_num,k,density_min,distance_min)</span><br><span class="line">class_num=1;</span><br><span class="line">y=zeros(1,sample_num);</span><br><span class="line">%p&#x4E3A;&#x6BCF;&#x4E2A;&#x6837;&#x672C;&#x7684;&#x5BC6;&#x5EA6;</span><br><span class="line">p=zeros(1,sample_num);</span><br><span class="line">%distance(i,j)&#x4EE3;&#x8868;&#x7B2C;i&#x4E2A;&#x6837;&#x672C;&#x5230;&#x7B2C;j&#x4E2A;&#x6837;&#x672C;&#x7684;&#x8DDD;&#x79BB;</span><br><span class="line">distance=zeros(sample_num);</span><br><span class="line">%&#x5229;&#x7528;k&#x8FD1;&#x90BB;&#x5747;&#x503C;&#x5B9A;&#x4E49;&#x5BC6;&#x5EA6;&#x8F83;&#x597D;&#xFF0C;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x5F88;&#x591A;&#x5BC6;&#x5EA6;&#x76F8;&#x540C;&#x7684;&#x70B9;&#x3002;&#x5982;&#x679C;&#x91C7;&#x7528;&#x534A;&#x5F84;&#x5185;&#x4E2A;&#x6570;&#x7684;&#x5B9A;&#x4E49;&#x65B9;&#x6CD5;&#xFF0C;&#x53EF;&#x80FD;&#x4E00;&#x5757;&#x533A;&#x57DF;&#x4F1A;&#x51FA;&#x73B0;&#x5F88;&#x591A;&#x7684;&#x7C7B;&#x522B;</span><br><span class="line">for i=1:sample_num</span><br><span class="line">    distance(i,:)=sum((x_scale-repmat(x_scale(:,i),1,sample_num)).^2);</span><br><span class="line">    temp=sort(distance(i,:));</span><br><span class="line">    p(i)=k./sum(distance(i,distance(i,:)&lt;=temp(k)));</span><br><span class="line">end        </span><br><span class="line">[y,class_num]=MDCA_findclass(y,p,distance,density_min,class_num);    </span><br><span class="line">%&#x8BBE;&#x7F6E;&#x4E24;&#x4E2A;&#x6807;&#x7F6E;&#x4F4D;</span><br><span class="line">while 1</span><br><span class="line">    flag_2=0;</span><br><span class="line">    for i=1:class_num</span><br><span class="line">        flag_1=0;</span><br><span class="line">        for j=i+1:class_num</span><br><span class="line">            if min(min(distance(y==i,y==j)))&lt;=distance_min</span><br><span class="line">                y(y==j)=i;</span><br><span class="line">                y(y&gt;j)=y(y&gt;j)-1;</span><br><span class="line">                class_num=class_num-1;</span><br><span class="line">                flag_1=1;</span><br><span class="line">                break;</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">        if flag_1==1;</span><br><span class="line">            break;</span><br><span class="line">        end</span><br><span class="line">        flag_2=1;</span><br><span class="line">    end</span><br><span class="line">    if flag_2==1</span><br><span class="line">        break;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">loc=find(y~=0);</span><br><span class="line">[temp,tem]=min(distance(y==0,y~=0),[],2);</span><br><span class="line">y(y==0)=y(loc(tem)).*(temp&lt;=distance_min)&apos;;</span><br></pre></td></tr></tbody></table></figure><h2 id="MDCA-findclass-m"><a href="#MDCA-findclass-m" class="headerlink" title="MDCA_findclass.m"></a>MDCA_findclass.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function [y,class_num]=MDCA_findclass(y,p,distance,density_min,class_num)</span><br><span class="line">tem=find(y==0);</span><br><span class="line">p_temp=p(tem);</span><br><span class="line">%&#x627E;&#x5230;&#x6700;&#x5927;&#x7684;&#x5BC6;&#x5EA6;&#x70B9;</span><br><span class="line">p_max=tem(find(p_temp==max(p_temp),1));</span><br><span class="line">%&#x6309;&#x7167;&#x5230;&#x6700;&#x5927;&#x5BC6;&#x5EA6;&#x70B9;&#x7684;&#x8DDD;&#x79BB;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;</span><br><span class="line">[~,b]=sort(distance(p_max,tem));</span><br><span class="line">temp=tem(b);</span><br><span class="line">curve=p(temp);</span><br><span class="line">if max(curve)&gt;density_min</span><br><span class="line">    loc=find(curve&lt;=density_min);</span><br><span class="line">    if ~isempty(loc)&amp;&amp;length(loc)&gt;=2</span><br><span class="line">        for i=1:length(loc)-1</span><br><span class="line">            if loc(i+1)-loc(i)&lt;=2</span><br><span class="line">                break;</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">        y(temp(1:loc(i)))=class_num;</span><br><span class="line">        [y,class_num]=MDCA_findclass(y,p,distance,density_min,class_num+1);</span><br><span class="line">        return;</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="MDCA-display-m"><a href="#MDCA-display-m" class="headerlink" title="MDCA_display.m"></a>MDCA_display.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function MDCA_display(x,y,sample_num,class_num)</span><br><span class="line">figure;</span><br><span class="line">hold on;</span><br><span class="line">for i=1:class_num</span><br><span class="line">    color_bar(i,:)=[rand(1),rand(1),rand(1)];</span><br><span class="line">end</span><br><span class="line">for i=1:sample_num</span><br><span class="line">    if y(i)==0</span><br><span class="line">        %&#x753B;&#x51FA;&#x566A;&#x58F0;&#x70B9;&#xFF0C;&#x7528;*&#x8868;&#x793A;</span><br><span class="line">        plot(x(1,i),x(2,i),&apos;k*&apos;)</span><br><span class="line">    else</span><br><span class="line">        %&#x753B;&#x51FA;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x6837;&#x672C;&#x6570;&#x636E;&#xFF0C;&#x7528;o&#x8868;&#x793A;</span><br><span class="line">        plot(x(1,i),x(2,i),&apos;color&apos;,color_bar(y(i),:),&apos;marker&apos;,&apos;o&apos;);</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">hold off;</span><br></pre></td></tr></tbody></table></figure><p><br><br></p><h1 id="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"><a href="#&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;" class="headerlink" title="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"></a><font size="5" color="red">&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;</font></h1><p><img src="/images/MACHINE/mdca.png" alt="MDCA"></p><h1 id="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"><a href="#&#x6027;&#x80FD;&#x6BD4;&#x8F83;" class="headerlink" title="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x6027;&#x80FD;&#x6BD4;&#x8F83;</font></h1><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F;</li><li>&#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x6570;&#x636E;&#x70B9;&#x7684;&#x9009;&#x62E9;</li><li>&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x4EFB;&#x610F;&#x5F62;&#x72B6;&#x7684;&#x805A;&#x7C7B;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x7B97;&#x6CD5;&#x590D;&#x6742;&#xFF0C;&#x5206;&#x7C7B;&#x901F;&#x5EA6;&#x8F83;&#x6162;</li><li>&#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x786E;&#x5B9A;&#x5BC6;&#x5EA6;&#x9608;&#x503C;</li><li>&#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D;</li><li>&#x4E0D;&#x9002;&#x5408;&#x6570;&#x636E;&#x96C6;&#x5BC6;&#x5EA6;&#x5DEE;&#x5F02;&#x8F83;&#x5927;&#x6216;&#x6574;&#x4F53;&#x5BC6;&#x5EA6;&#x57FA;&#x672C;&#x76F8;&#x540C;&#x7684;&#x60C5;&#x51B5;</li></ul></font></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;MDCA&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="无监督学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>密度聚类(DBSCAN)</title>
    <link href="https://USTCcoder.github.io/2019/05/05/clustering_DBSCAN/"/>
    <id>https://USTCcoder.github.io/2019/05/05/clustering_DBSCAN/</id>
    <published>2019-05-05T11:25:30.000Z</published>
    <updated>2019-08-07T15:52:46.035Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x5BC6;&#x5EA6;&#x805A;&#x7C7B;&#x65B9;&#x6CD5;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x89E3;&#x8BFB;"><a href="#&#x539F;&#x7406;&#x89E3;&#x8BFB;" class="headerlink" title="&#x539F;&#x7406;&#x89E3;&#x8BFB;"></a><font size="5" color="red">&#x539F;&#x7406;&#x89E3;&#x8BFB;</font></h1><p>&#x2003;&#x2003;DBSCAN(Density-Based Spatial Clustering Of Applications With Noise):DBSCAN&#x9700;&#x8981;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;<strong>&#x626B;&#x63CF;&#x534A;&#x5F84; </strong>(eps)&#x548C;<strong>&#x6700;&#x5C0F;&#x5305;&#x542B;&#x70B9;&#x6570;</strong>(minPts)&#x3002; &#x4EFB;&#x9009;&#x4E00;&#x4E2A;&#x672A;&#x88AB;&#x6807;&#x8BB0;&#x7684;&#x70B9;&#x5F00;&#x59CB;&#xFF0C;&#x627E;&#x51FA;&#x4E0E;&#x5176;&#x8DDD;&#x79BB;&#x5728;eps&#x4E4B;&#x5185;(&#x5305;&#x62EC;eps)&#x7684;&#x6240;&#x6709;&#x9644;&#x8FD1;&#x70B9;&#x3002;&#x5982;&#x679C;<strong>&#x9644;&#x8FD1;&#x70B9;&#x7684;&#x6570;&#x91CF;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;minPts</strong>&#xFF0C;&#x5219;&#x5F53;&#x524D;&#x70B9;&#x4E0E;&#x5176;&#x9644;&#x8FD1;&#x70B9;&#x5F62;&#x6210;&#x4E00;&#x4E2A;&#x7C07;&#xFF0C;&#x5E76;&#x4E14;&#x51FA;&#x53D1;&#x70B9;&#x88AB;&#x6807;&#x8BB0;&#x3002; &#x7136;&#x540E;&#x9012;&#x5F52;&#xFF0C;&#x4EE5;&#x76F8;&#x540C;&#x7684;&#x65B9;&#x6CD5;&#x5904;&#x7406;&#x8BE5;&#x7C07;&#x5185;&#x6240;&#x6709;&#x672A;&#x88AB;&#x6807;&#x8BB0;&#x7684;&#x70B9;&#xFF0C;&#x4ECE;&#x800C;&#x5BF9;&#x7C07;&#x8FDB;&#x884C;&#x6269;&#x5C55;&#x3002;&#x5982;&#x679C;<strong>&#x9644;&#x8FD1;&#x70B9;&#x7684;&#x6570;&#x91CF;&#x5C0F;&#x4E8E;minPts</strong>&#xFF0C;&#x5219;&#x8BE5;&#x70B9;&#x88AB;&#x6807;&#x8BB0;&#xFF0C;&#x4E0D;&#x4F5C;&#x6269;&#x5C55;&#x3002;&#x5982;&#x679C;&#x7C07;&#x5145;&#x5206;&#x5730;&#x88AB;&#x6269;&#x5C55;&#xFF0C;&#x5373;&#x7C07;&#x5185;&#x7684;&#x6240;&#x6709;&#x70B9;&#x88AB;&#x6807;&#x8BB0;&#x4E3A;&#x5DF2;&#x8BBF;&#x95EE;&#xFF0C;&#x7136;&#x540E;&#x7528;&#x540C;&#x6837;&#x7684;&#x7B97;&#x6CD5;&#x53BB;&#x5904;&#x7406;&#x672A;&#x88AB;&#x8BBF;&#x95EE;&#x7684;&#x70B9;&#xFF0C;&#x76F4;&#x5230;&#x6240;&#x6709;&#x7684;&#x70B9;&#x90FD;&#x88AB;&#x6807;&#x8BB0;&#x3002;<br><a id="more"></a></p><h1 id="&#x6838;&#x5FC3;&#x601D;&#x60F3;"><a href="#&#x6838;&#x5FC3;&#x601D;&#x60F3;" class="headerlink" title="&#x6838;&#x5FC3;&#x601D;&#x60F3;"></a><font size="5" color="red">&#x6838;&#x5FC3;&#x601D;&#x60F3;</font></h1><p>&#x2003;&#x2003;<font size="4">1. &#x6311;&#x9009;&#x4E00;&#x4E2A;&#x672A;&#x6807;&#x8BB0;&#x6837;&#x672C;&#xFF0C;&#x7F6E;&#x4E3A;&#x4E00;&#x7C7B;&#xFF0C;&#x641C;&#x7D22;&#x9644;&#x8FD1;&#x6837;&#x672C;</font><br><img src="/images/MACHINE/dbscan1.jpg" alt="DBSCAN"></p><p>&#x2003;&#x2003;<font size="4">2. &#x5982;&#x679C;&#x9644;&#x8FD1;&#x6837;&#x672C;&#x6570;&#x5927;&#x4E8E;minPts&#xFF0C;&#x5C06;&#x8FD9;&#x4E9B;&#x6837;&#x672C;&#x5F52;&#x4E8E;&#x8BE5;&#x7C7B;&#xFF0C;&#x5728;&#x6B64;&#x7C7B;&#x4E2D;&#x6311;&#x9009;&#x672A;&#x6807;&#x8BB0;&#x6837;&#x672C;&#xFF0C;&#x7EE7;&#x7EED;&#x641C;&#x7D22;&#x9644;&#x8FD1;&#x6837;&#x672C;</font><br><img src="/images/MACHINE/dbscan2.png" alt="DBSCAN"></p><p>&#x2003;&#x2003;<font size="4">3. &#x91CD;&#x590D;&#x6B65;&#x9AA4;2&#xFF0C;&#x76F4;&#x5230;&#x8BE5;&#x7C7B;&#x4E2D;&#x6240;&#x6709;&#x6837;&#x672C;&#x90FD;&#x88AB;&#x6807;&#x8BB0;</font></p><p>&#x2003;&#x2003;<font size="4">4. &#x91CD;&#x590D;&#x6B65;&#x9AA4;1&#xFF0C;&#x76F4;&#x5230;&#x6240;&#x6709;&#x6837;&#x672C;&#x90FD;&#x88AB;&#x6807;&#x8BB0;</font></p><h1 id="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"><a href="#&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;</font></h1><p><img src="/images/MACHINE/dbscan9.png" alt="DBSCAN"></p><p><br><br></p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><p><font size="4">&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6570;&#x636E;&#x96C6;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;<a href="https://ustccoder.github.io/2019/04/25/clustering_Dataset/">&#x6570;&#x636E;&#x96C6;(Data Set)</a></font></p><h2 id="DBSCAN-main-m"><a href="#DBSCAN-main-m" class="headerlink" title="DBSCAN_main.m"></a>DBSCAN_main.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">load(&apos;..\\cluster_cicle.mat&apos;);</span><br><span class="line">%&#x8F93;&#x5165;x&#x7684;&#x77E9;&#x9635;</span><br><span class="line">x=data;</span><br><span class="line">randIndex = randperm(size(x,2));</span><br><span class="line">x=x(:,randIndex);</span><br><span class="line">%&#x641C;&#x7D22;&#x534A;&#x5F84;</span><br><span class="line">eps=0.05;</span><br><span class="line">%&#x5706;&#x5185;&#x70B9;&#x6570;</span><br><span class="line">minpts=2;</span><br><span class="line">%&#x6837;&#x672C;&#x6570;</span><br><span class="line">sample_num=size(x,2);</span><br><span class="line">%&#x7279;&#x5F81;&#x6570;&#x76EE;</span><br><span class="line">feat_num=size(x,1);</span><br><span class="line">%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1</span><br><span class="line">x_scale=zeros(size(x));</span><br><span class="line">for i=1:feat_num</span><br><span class="line">    x_scale(i,:)=(x(i,:)-min(x(i,:)))/(max(x(i,:))-min(x(i,:)));</span><br><span class="line">end</span><br><span class="line">[y,color_bar]=DBSCAN_classify(x_scale,sample_num,eps,minpts);</span><br><span class="line">%&#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A;</span><br><span class="line">if feat_num==2</span><br><span class="line">    DBSCAN_display(x,y,color_bar,sample_num)</span><br><span class="line">else</span><br><span class="line">    disp(&apos;The Feature Is Not Two-Dimensional&apos;);</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="DBSCAN-classify-m"><a href="#DBSCAN-classify-m" class="headerlink" title="DBSCAN_classify.m"></a>DBSCAN_classify.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">function [y,color_bar]=DBSCAN_classify(x_scale,sample_num,eps,minpts)</span><br><span class="line">%&#x6807;&#x8BB0;&#x662F;&#x5426;&#x5DF2;&#x7ECF;&#x5206;&#x8FC7;&#x7C7B;</span><br><span class="line">flag=zeros(1,sample_num);</span><br><span class="line">y=zeros(1,sample_num);</span><br><span class="line">color_bar=[];</span><br><span class="line">%&#x7C7B;&#x522B;&#x6570;&#x76EE;</span><br><span class="line">i=1;</span><br><span class="line">%&#x627E;&#x5230;&#x672A;&#x6807;&#x8BB0;&#x7684;&#x6570;&#x636E;&#x70B9;&#x5219;&#x7EE7;&#x7EED;&#x5FAA;&#x73AF;</span><br><span class="line">while ~isempty(find(flag==0,1))</span><br><span class="line">    %&#x6C42;&#x51FA;&#x8BE5;&#x70B9;C&#x5230;&#x5176;&#x4F59;&#x5404;&#x70B9;&#x7684;&#x8DDD;&#x79BB;</span><br><span class="line">    distance=sum((x_scale-repmat(x_scale(:,find(flag==0,1)),1,sample_num)).^2);</span><br><span class="line">    %&#x5C06;&#x627E;&#x5230;&#x7684;&#x70B9;&#x6807;&#x8BB0;</span><br><span class="line">    flag(find(flag==0,1))=1;</span><br><span class="line">    %&#x627E;&#x51FA;&#x8DDD;&#x79BB;&#x627E;&#x5230;&#x7684;&#x70B9;&#x5C0F;&#x4E8E;&#x534A;&#x5F84;&#x7684;&#x6240;&#x6709;&#x70B9;</span><br><span class="line">    temp=find(distance&lt;eps^2);</span><br><span class="line">    %&#x5982;&#x679C;&#x4E2A;&#x6570;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;&#x8BBE;&#x5B9A;&#x7684;&#x4E2A;&#x6570;</span><br><span class="line">    if length(temp)&gt;=minpts</span><br><span class="line">        %&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#x7684;&#x989C;&#x8272;&#x4FE1;&#x606F;</span><br><span class="line">        color_bar(i,:)=[rand(1),rand(1),rand(1)];</span><br><span class="line">        %&#x5C06;&#x8FD9;&#x4E9B;&#x70B9;&#x5168;&#x90E8;&#x5206;&#x4E3A;i&#x7C7B;</span><br><span class="line">        y(temp)=i;</span><br><span class="line">        %&#x627E;&#x51FA;i&#x7C7B;&#x4E2D;&#x6CA1;&#x6709;&#x6807;&#x8BB0;&#x7684;&#x70B9;&#x5219;&#x7EE7;&#x7EED;&#x5FAA;&#x73AF;</span><br><span class="line">        while ~isempty(find(y==i&amp;flag==0,1))</span><br><span class="line">            %&#x6C42;&#x51FA;&#x8BE5;&#x70B9;D&#x5230;&#x5176;&#x4F59;&#x5404;&#x70B9;&#x7684;&#x8DDD;&#x79BB;</span><br><span class="line">            distance_part=sum((x_scale-repmat(x_scale(:,find(y==i&amp;flag==0,1)),1,sample_num)).^2);</span><br><span class="line">            %&#x5C06;&#x627E;&#x5230;&#x7684;&#x70B9;&#x6807;&#x8BB0;</span><br><span class="line">            flag(find(y==i&amp;flag==0,1))=1;</span><br><span class="line">            %&#x627E;&#x51FA;&#x8DDD;&#x79BB;&#x627E;&#x5230;&#x7684;&#x70B9;&#x5C0F;&#x4E8E;&#x534A;&#x5F84;&#x7684;&#x6240;&#x6709;&#x70B9;</span><br><span class="line">            temp_part=find(distance_part&lt;eps^2);</span><br><span class="line">            %&#x5982;&#x679C;&#x4E2A;&#x6570;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;&#x8BBE;&#x5B9A;&#x7684;&#x4E2A;&#x6570;,</span><br><span class="line">            if length(temp_part)&gt;=minpts</span><br><span class="line">                %&#x5C06;&#x8FD9;&#x4E9B;&#x70B9;&#x5168;&#x90E8;&#x5206;&#x4E3A;i&#x7C7B;</span><br><span class="line">                y(temp_part)=i;</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">    else</span><br><span class="line">        continue;</span><br><span class="line">    end</span><br><span class="line">    %&#x8FD9;&#x4E00;&#x7C7B;&#x627E;&#x5B8C;&#x65F6;&#xFF0C;&#x7C7B;&#x522B;&#x52A0;1</span><br><span class="line">    i=i+1;</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="DBSCAN-display-m"><a href="#DBSCAN-display-m" class="headerlink" title="DBSCAN_display.m"></a>DBSCAN_display.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function DBSCAN_display(x,y,color_bar,sample_num)</span><br><span class="line">figure;</span><br><span class="line">hold on;</span><br><span class="line">for i=1:sample_num</span><br><span class="line">    if y(i)==0</span><br><span class="line">        %&#x753B;&#x51FA;&#x566A;&#x58F0;&#x70B9;&#xFF0C;&#x7528;*&#x8868;&#x793A;</span><br><span class="line">        plot(x(1,i),x(2,i),&apos;k*&apos;)</span><br><span class="line">    else</span><br><span class="line">        %&#x753B;&#x51FA;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x6837;&#x672C;&#x6570;&#x636E;&#xFF0C;&#x7528;o&#x8868;&#x793A;</span><br><span class="line">        plot(x(1,i),x(2,i),&apos;color&apos;,color_bar(y(i),:),&apos;marker&apos;,&apos;o&apos;);</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">hold off;</span><br></pre></td></tr></tbody></table></figure><p><br><br></p><h1 id="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"><a href="#&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;" class="headerlink" title="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"></a><font size="5" color="red">&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;</font></h1><p><img src="/images/MACHINE/dbscan.png" alt="DBSCAN"></p><h1 id="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"><a href="#&#x6027;&#x80FD;&#x6BD4;&#x8F83;" class="headerlink" title="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x6027;&#x80FD;&#x6BD4;&#x8F83;</font></h1><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x5BB9;&#x6613;&#x7406;&#x89E3;</li><li>&#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x6570;&#x636E;&#x70B9;&#x7684;&#x9009;&#x62E9;</li><li>&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x4EFB;&#x610F;&#x5F62;&#x72B6;&#x7684;&#x805A;&#x7C7B;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x654F;&#x611F;</li><li>&#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x786E;&#x5B9A;eps&#x548C;minPts</li><li>&#x4E0D;&#x9002;&#x5408;&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x5BC6;&#x5EA6;&#x5DEE;&#x5F02;&#x8F83;&#x5927;&#x7684;&#x60C5;&#x51B5;</li><li>&#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D;</li></ul></font></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;DBSCAN&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="无监督学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>迭代自组织分析聚类(ISODATA)</title>
    <link href="https://USTCcoder.github.io/2019/05/04/clustering_ISODATA/"/>
    <id>https://USTCcoder.github.io/2019/05/04/clustering_ISODATA/</id>
    <published>2019-05-04T11:28:51.000Z</published>
    <updated>2019-08-07T15:53:15.137Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x8FED;&#x4EE3;&#x81EA;&#x7EC4;&#x7EC7;&#x5206;&#x6790;&#x805A;&#x7C7B;&#x65B9;&#x6CD5;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x89E3;&#x8BFB;"><a href="#&#x539F;&#x7406;&#x89E3;&#x8BFB;" class="headerlink" title="&#x539F;&#x7406;&#x89E3;&#x8BFB;"></a><font size="5" color="red">&#x539F;&#x7406;&#x89E3;&#x8BFB;</font></h1><p>&#x2003;&#x2003;ISODATA(Iterative Selforganizing Data Analysis) :&#x5728;k-&#x5747;&#x503C;&#x7B97;&#x6CD5;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x589E;&#x52A0;&#x5BF9;&#x805A;&#x7C7B;&#x7ED3;&#x679C;&#x7684;<strong>&#x5408;&#x5E76;</strong>&#x548C;<strong>&#x5206;&#x88C2;</strong>&#x4E24;&#x4E2A;&#x64CD;&#x4F5C;&#xFF0C;&#x5F53;&#x805A;&#x7C7B;&#x7ED3;&#x679C;&#x67D0;&#x4E00;&#x7C7B;&#x4E2D;<strong>&#x6837;&#x672C;&#x6570;&#x592A;&#x5C11;&#xFF0C;&#x6216;&#x4E24;&#x4E2A;&#x7C7B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#x592A;&#x8FD1;&#xFF0C;&#x6216;&#x6837;&#x672C;&#x7C7B;&#x522B;&#x8FDC;&#x5927;&#x4E8E;&#x8BBE;&#x5B9A;&#x7C7B;&#x522B;&#x6570;</strong>&#x65F6;&#xFF0C;&#x8FDB;&#x884C;<strong>&#x5408;&#x5E76;</strong>&#xFF0C;&#x5F53;&#x805A;&#x7C7B;&#x7ED3;&#x679C;&#x67D0;&#x4E00;&#x7C7B;&#x4E2D;<strong>&#x6837;&#x672C;&#x6570;&#x592A;&#x591A;&#xFF0C;&#x6216;&#x67D0;&#x4E2A;&#x7C7B;&#x5185;&#x65B9;&#x5DEE;&#x592A;&#x5927;&#xFF0C;&#x6216;&#x6837;&#x672C;&#x7C7B;&#x522B;&#x8FDC;&#x5C0F;&#x4E8E;&#x8BBE;&#x5B9A;&#x7C7B;&#x522B;&#x6570;</strong>&#x65F6;&#xFF0C;&#x8FDB;&#x884C;<strong>&#x5206;&#x88C2;</strong>&#x3002;<br><a id="more"></a></p><h1 id="&#x6838;&#x5FC3;&#x601D;&#x60F3;"><a href="#&#x6838;&#x5FC3;&#x601D;&#x60F3;" class="headerlink" title="&#x6838;&#x5FC3;&#x601D;&#x60F3;"></a><font size="5" color="red">&#x6838;&#x5FC3;&#x601D;&#x60F3;</font></h1><p>&#x2003;&#x2003;<font size="4">1. &#x521D;&#x59CB;&#x5E38;&#x91CF;(c<sub>0</sub>,n<sub>0</sub>,d<sub>min</sub>,d<sub>max</sub>,T)</font><br>&#x2003;&#x2003;&#x2003;&#x2003;c<sub>0</sub>&#xFF1A;&#x5E0C;&#x671B;&#x5F97;&#x5230;&#x7684;&#x805A;&#x7C7B;&#x6570;<br>&#x2003;&#x2003;&#x2003;&#x2003;n<sub>0</sub>&#xFF1A;&#x6BCF;&#x7C7B;&#x7684;&#x6837;&#x672C;&#x6570;<br>&#x2003;&#x2003;&#x2003;&#x2003;d<sub>min</sub>&#xFF1A;&#x6700;&#x5C0F;&#x7C7B;&#x95F4;&#x8DDD;&#x79BB;<br>&#x2003;&#x2003;&#x2003;&#x2003;d<sub>max</sub>&#xFF1A;&#x6700;&#x5927;&#x7C7B;&#x5185;&#x8DDD;&#x79BB;<br>&#x2003;&#x2003;&#x2003;&#x2003;T&#xFF1A;&#x6700;&#x5927;&#x8FED;&#x4EE3;&#x6B21;&#x6570;</p><p>&#x2003;&#x2003;<font size="4">2. &#x6700;&#x5C0F;&#x7C7B;&#x95F4;&#x8DDD;&#x79BB;</font><br>$$d_{min}=\underset{C_i,C_j \subseteq C}{min}{d( \overline {C_i},\overline {C_j} )} \ , \ &#x5176;&#x4E2D;\overline {C_i}=\frac {1}{\lvert C_i \rvert}\underset{x_i \in C_i}{\sum}{x_i}$$</p><p>&#x2003;&#x2003;<font size="4">3. &#x6700;&#x5927;&#x7C7B;&#x5185;&#x8DDD;&#x79BB;</font><br>$$d_{max}=\underset{C_i \subseteq C}{max} \ \frac {1}{\lvert {C_i} \rvert}\underset{x_i \in C_i}{\sum}{d( x_i,\overline C_i )} \ , \ &#x5176;&#x4E2D;\overline {C_i}=\frac {1}{\lvert C_i \rvert}\underset{x_i \in C_i}{\sum}{x_i}$$</p><br><br><br><table>    <tbody><tr><td><center><img src="/images/MACHINE/isodata1.png">&#x521D;&#x59CB;&#x65F6;&#x523B;&#x72B6;&#x6001;</center></td>    <td><center><img src="/images/MACHINE/isodata2.png">&#x7B2C;&#x4E00;&#x6B21;&#x8FED;&#x4EE3;&#x540E;</center></td></tr></tbody></table><br><br><br><br><table>    <tbody><tr><td><center><img src="/images/MACHINE/isodata3.png">&#x7B2C;&#x4E8C;&#x6B21;&#x8FED;&#x4EE3;&#x540E;</center></td>    <td><center><img src="/images/MACHINE/isodata4.png">&#x7B2C;&#x4E09;&#x6B21;&#x8FED;&#x4EE3;&#x540E;</center></td></tr></tbody></table><br><br><br><br><table>    <tbody><tr><td><center><img src="/images/MACHINE/isodata5.png">&#x7B2C;&#x56DB;&#x6B21;&#x8FED;&#x4EE3;&#x540E;</center></td>    <td><center><img src="/images/MACHINE/isodata6.png">&#x7B2C;&#x4E94;&#x6B21;&#x8FED;&#x4EE3;&#x540E;</center></td></tr></tbody></table><p>&#x2003;&#x2003;<font size="4">4. &#x5224;&#x65AD;&#x662F;&#x5426;&#x8FBE;&#x5230;&#x5206;&#x88C2;&#x6761;&#x4EF6;</font></p><ul><li>&#x5F53;&#x524D;&#x7C7B;&#x522B;&#x6570;&#x662F;&#x5426;&#x5C0F;&#x4E8E;&#x5E0C;&#x671B;&#x5F97;&#x5230;&#x805A;&#x7C7B;&#x6570;&#x7684;&#x4E00;&#x534A;</li><li>&#x5F53;&#x524D;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x6570;&#x76EE;&#x662F;&#x5426;&#x5927;&#x4E8E;&#x6BCF;&#x7C7B;&#x6837;&#x672C;&#x6570;&#x7684;&#x4E8C;&#x500D;</li><li>&#x5F53;&#x524D;&#x7C7B;&#x5185;&#x8DDD;&#x79BB;&#x662F;&#x5426;&#x5927;&#x4E8E;&#x6700;&#x5927;&#x7C7B;&#x5185;&#x8DDD;&#x79BB;</li></ul><p>&#x2003;&#x2003;<font size="4">5. &#x5206;&#x88C2;&#x4E0D;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#x7684;&#x7C7B;&#x522B;&#xFF0C;&#x56DE;&#x5230;&#x6B65;&#x9AA4;2&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;</font></p><p>&#x2003;&#x2003;<font size="4">6. &#x5224;&#x65AD;&#x662F;&#x5426;&#x8FBE;&#x5230;&#x5408;&#x5E76;&#x6761;&#x4EF6;</font></p><ul><li>&#x5F53;&#x524D;&#x7C7B;&#x522B;&#x6570;&#x662F;&#x5426;&#x5927;&#x4E8E;&#x5E0C;&#x671B;&#x5F97;&#x5230;&#x805A;&#x7C7B;&#x6570;&#x7684;&#x4E8C;&#x500D;</li><li>&#x5F53;&#x524D;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x6570;&#x76EE;&#x662F;&#x5426;&#x5C0F;&#x4E8E;&#x6BCF;&#x7C7B;&#x6837;&#x672C;&#x6570;&#x7684;&#x4E00;&#x534A;</li><li>&#x5F53;&#x524D;&#x7C7B;&#x95F4;&#x8DDD;&#x79BB;&#x662F;&#x5426;&#x5C0F;&#x4E8E;&#x6700;&#x5C0F;&#x7C7B;&#x95F4;&#x8DDD;&#x79BB;</li></ul><p>&#x2003;&#x2003;<font size="4">7. &#x5408;&#x5E76;&#x4E0D;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#x7684;&#x7C7B;&#x522B;&#xFF0C;&#x56DE;&#x5230;&#x6B65;&#x9AA4;2&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;</font></p><h1 id="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"><a href="#&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;</font></h1><p><img src="/images/MACHINE/isodata9.png" alt="ISODATA"></p><p><br><br></p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><p><font size="4">&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6570;&#x636E;&#x96C6;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;<a href="https://ustccoder.github.io/2019/04/25/clustering_Dataset/">&#x6570;&#x636E;&#x96C6;(Data Set)</a></font></p><h2 id="ISODATA-main-m"><a href="#ISODATA-main-m" class="headerlink" title="ISODATA_main.m"></a>ISODATA_main.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">load(&apos;..\\cluster_gauss.mat&apos;);</span><br><span class="line">%&#x8F93;&#x5165;x&#x7684;&#x77E9;&#x9635;</span><br><span class="line">x=data;</span><br><span class="line">randIndex = randperm(size(x,2));</span><br><span class="line">x=x(:,randIndex);</span><br><span class="line">%&#x5E0C;&#x671B;&#x5212;&#x5206;&#x7684;&#x7C7B;&#x522B;&#x6570;</span><br><span class="line">hope_class_num=3;</span><br><span class="line">%&#x5E0C;&#x671B;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x6570;&#x76EE;</span><br><span class="line">hope_num=20;</span><br><span class="line">%&#x8BBE;&#x5B9A;&#x7C7B;&#x5185;&#x7684;&#x6700;&#x5927;&#x8DDD;&#x79BB;,&#x5C0F;&#x4E00;&#x70B9;</span><br><span class="line">max_class_inner_distance=0.1;</span><br><span class="line">%&#x8BBE;&#x5B9A;&#x7C7B;&#x95F4;&#x7684;&#x6700;&#x5C0F;&#x8DDD;&#x79BB;,&#x5C0F;&#x4E00;&#x70B9;</span><br><span class="line">min_class_between_distance=0.1;</span><br><span class="line">%&#x6700;&#x591A;&#x8FED;&#x4EE3;&#x6B21;&#x6570;</span><br><span class="line">times=100;</span><br><span class="line">%&#x6837;&#x672C;&#x6570;</span><br><span class="line">sample_num=size(x,2);</span><br><span class="line">%&#x7279;&#x5F81;&#x6570;&#x76EE;</span><br><span class="line">feat_num=size(x,1);</span><br><span class="line">%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1</span><br><span class="line">x_scale=zeros(size(x));</span><br><span class="line">for i=1:feat_num</span><br><span class="line">    x_scale(i,:)=(x(i,:)-min(x(i,:)))/(max(x(i,:))-min(x(i,:)));</span><br><span class="line">end</span><br><span class="line">[y,class_num,class_center]=ISODATA_classify(x_scale,sample_num,hope_class_num,hope_num,max_class_inner_distance,min_class_between_distance,times);</span><br><span class="line">%&#x6837;&#x672C;&#x4E2D;&#x5FC3;&#x5C3A;&#x5EA6;&#x590D;&#x539F;</span><br><span class="line">for i=1:feat_num</span><br><span class="line">    class_center(i,:)=(max(x(i,:))-min(x(i,:)))*class_center(i,:)+min(x(i,:));</span><br><span class="line">end</span><br><span class="line">%&#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A;</span><br><span class="line">if feat_num==2</span><br><span class="line">    ISODATA_display(x,y,class_center,sample_num,class_num);</span><br><span class="line">else</span><br><span class="line">    disp(&apos;The Feature Is Not Two-Dimensional&apos;);</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="ISODATA-classify-m"><a href="#ISODATA-classify-m" class="headerlink" title="ISODATA_classify.m"></a>ISODATA_classify.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line">function [y,class_num,class_center]=ISODATA_classify(x_scale,sample_num,hope_class_num,hope_num,max_class_inner_distance,min_class_between_distance,times)</span><br><span class="line">%&#x7ED9;&#x6BCF;&#x4E00;&#x4E2A;&#x6837;&#x672C;&#x90FD;&#x89C6;&#x4E3A;0&#x7C7B;</span><br><span class="line">y=zeros(1,sample_num);</span><br><span class="line">%&#x5C06;&#x524D;class_num&#x4E2A;&#x6837;&#x672C;&#x5206;&#x4E3A;class_num&#x7C7B;</span><br><span class="line">y(1:hope_class_num)=1:hope_class_num;</span><br><span class="line">%&#x76EE;&#x524D;&#x7684;&#x7C7B;&#x522B;&#x6570;</span><br><span class="line">class_num=hope_class_num;</span><br><span class="line">k=0;</span><br><span class="line">while 1</span><br><span class="line">    class_center=zeros(2,class_num);</span><br><span class="line">    for i=1:class_num</span><br><span class="line">        %&#x66F4;&#x65B0;&#x7C7B;&#x522B;&#x7684;&#x4E2D;&#x5FC3;</span><br><span class="line">        class_center(:,i)=sum(x_scale(:,y==i),2)/sum(y==i);</span><br><span class="line">    end</span><br><span class="line">    %&#x91C7;&#x7528;&#x6700;&#x8FD1;&#x90BB;&#x8FDB;&#x884C;&#x5206;&#x7C7B;</span><br><span class="line">    for i=1:sample_num</span><br><span class="line">        distance=sum((class_center-repmat(x_scale(:,i),1,class_num)).^2);</span><br><span class="line">        y(i)=find(distance==min(distance),1);</span><br><span class="line">    end</span><br><span class="line">    for i=1:class_num</span><br><span class="line">        %&#x66F4;&#x65B0;&#x7C7B;&#x522B;&#x7684;&#x4E2D;&#x5FC3;</span><br><span class="line">        class_center(:,i)=sum(x_scale(:,y==i),2)/sum(y==i);</span><br><span class="line">    end</span><br><span class="line">    %&#x5982;&#x679C;&#x8FED;&#x4EE3;&#x6B21;&#x6570;&#x5927;&#x4E8E;times&#xFF0C;&#x5219;&#x505C;&#x6B62;&#x8FED;&#x4EE3;</span><br><span class="line">    if k&gt;=times</span><br><span class="line">        break;</span><br><span class="line">    end</span><br><span class="line">    each_class_num=zeros(1,class_num);</span><br><span class="line">    distance_between_class=zeros(class_num);</span><br><span class="line">    %&#x7EDF;&#x8BA1;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x4E2A;&#x6570;,&#x5E76;&#x6C42;&#x51FA;&#x7C7B;&#x95F4;&#x8DDD;&#x79BB;</span><br><span class="line">    for i=1:class_num</span><br><span class="line">        each_class_num(i)=sum(y==i);</span><br><span class="line">        distance_between_class(i,:)=sum((class_center-repmat(class_center(:,i),1,class_num)).^2);</span><br><span class="line">        distance_between_class(i,i)=inf;</span><br><span class="line">    end</span><br><span class="line">    %&#x7EDF;&#x8BA1;&#x7C7B;&#x5185;&#x8DDD;&#x79BB;</span><br><span class="line">    distance_class_inner=zeros(1,class_num);</span><br><span class="line">    for i=1:class_num</span><br><span class="line">        temp=x_scale(:,y==i);</span><br><span class="line">        distance_class_inner(i)=sum(sum((temp-repmat(class_center(:,i),1,sum(y==i))).^2))/sum(y==i);</span><br><span class="line">    end</span><br><span class="line">    %&#x5982;&#x679C;&#x7C7B;&#x5185;&#x8DDD;&#x79BB;&#x6700;&#x5927;&#x7684;&#x4E00;&#x7C7B;&#x7684;&#x7C7B;&#x5185;&#x8DDD;&#x79BB;&#x5927;&#x4E8E;&#x8BBE;&#x5B9A;&#x503C;&#xFF0C;&#x5219;&#x5206;&#x88C2;&#x4E24;&#x7C7B;</span><br><span class="line">    if max(distance_class_inner)&gt;max_class_inner_distance</span><br><span class="line">        tem=find(distance_class_inner==max(distance_class_inner),1);</span><br><span class="line">        %temp&#x4E3A;&#x8BE5;&#x7C7B;&#x522B;&#x7684;&#x6837;&#x672C;</span><br><span class="line">        temp=x_scale(:,y==tem);</span><br><span class="line">        %distance(i,j)&#x6307;&#x7B2C;i&#x4E2A;&#x6837;&#x672C;&#x5230;&#x7B2C;j&#x4E2A;&#x6837;&#x672C;&#x7684;&#x8DDD;&#x79BB;</span><br><span class="line">        distance=zeros(size(temp));</span><br><span class="line">        for i=1:sum(y==tem)</span><br><span class="line">            distance(i,:)=sum((temp-repmat(temp(:,i),1,sum(y==tem))).^2);</span><br><span class="line">        end</span><br><span class="line">        %&#x627E;&#x5230;&#x8DDD;&#x79BB;&#x6700;&#x8FDC;&#x7684;&#x4E24;&#x4E2A;&#x6837;&#x672C;</span><br><span class="line">        [row,col]=find(distance==max(max(distance)),1);</span><br><span class="line">        %&#x5206;&#x522B;&#x627E;&#x5230;&#x8FD9;&#x4E2A;&#x4E24;&#x4E2A;&#x6837;&#x672C;&#x7684;&#x6240;&#x5728;&#x4F4D;&#x7F6E;</span><br><span class="line">        temp=find(y==tem);</span><br><span class="line">        row=temp(row);</span><br><span class="line">        col=temp(col);</span><br><span class="line">        %&#x7C7B;&#x522B;&#x6570;+1</span><br><span class="line">        class_num=class_num+1;</span><br><span class="line">        %&#x4EE4;&#x8BE5;&#x7C7B;&#x522B;&#x64A4;&#x9500;</span><br><span class="line">        y(y==tem)=0;</span><br><span class="line">        %&#x6DFB;&#x52A0;&#x4E24;&#x4E2A;&#x65B0;&#x7C7B;&#x522B;&#xFF0C;&#x4E00;&#x4E2A;&#x8986;&#x76D6;&#x539F;&#x7C7B;&#x522B;&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#x4E3A;&#x539F;&#x7C7B;&#x522B;&#x6570;+1</span><br><span class="line">        y(row)=tem;</span><br><span class="line">        y(col)=class_num;</span><br><span class="line">        k=k+1;</span><br><span class="line">        continue;</span><br><span class="line">    end</span><br><span class="line">    %&#x5982;&#x679C;&#x4E24;&#x7C7B;&#x4E4B;&#x95F4;&#x7684;&#x6700;&#x5C0F;&#x8DDD;&#x79BB;&#x5C0F;&#x4E8E;&#x8BBE;&#x5B9A;&#x9608;&#x503C;&#xFF0C;&#x5219;&#x5408;&#x5E76;&#x4E24;&#x7C7B;</span><br><span class="line">    if min(min(distance_between_class))&lt;min_class_between_distance</span><br><span class="line">        %&#x627E;&#x5230;&#x8DDD;&#x79BB;&#x6700;&#x8FD1;&#x7684;&#x4E24;&#x4E2A;&#x7C7B;&#x522B;</span><br><span class="line">        [row,col]=find(distance_between_class==min(min(distance_between_class)),1);</span><br><span class="line">        %&#x7C7B;&#x522B;&#x6570;-1</span><br><span class="line">        class_num=class_num-1;</span><br><span class="line">        %&#x5C06;col&#x7C7B;&#x5408;&#x5E76;&#x5230;row&#x7C7B;&#x4E2D;</span><br><span class="line">        y(y==col)=row;</span><br><span class="line">        %&#x8C03;&#x6574;&#x7C7B;&#x522B;&#x5E8F;&#x53F7;</span><br><span class="line">        y(y&gt;col)=y(y&gt;col)-1;</span><br><span class="line">        k=k+1;</span><br><span class="line">        continue;</span><br><span class="line">    end</span><br><span class="line">    %&#x5982;&#x679C;&#x67D0;&#x4E00;&#x7C7B;&#x7684;&#x6700;&#x5C0F;&#x6570;&#x91CF;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;&#x5E0C;&#x671B;&#x6570;&#x91CF;&#x7684;&#x4E00;&#x534A;</span><br><span class="line">    if min(each_class_num)&lt;=hope_num/2</span><br><span class="line">        %&#x627E;&#x5230;&#x8BE5;&#x7C7B;&#x522B;</span><br><span class="line">        tem=find(each_class_num==min(each_class_num),1);</span><br><span class="line">        %&#x4EE4;&#x8BE5;&#x7C7B;&#x522B;&#x64A4;&#x9500;</span><br><span class="line">        y(y==tem)=0;</span><br><span class="line">        %&#x91CD;&#x65B0;&#x8C03;&#x6574;&#x7C7B;&#x522B;&#x5E8F;&#x53F7;</span><br><span class="line">        y(y&gt;tem)=y(y&gt;tem)-1;</span><br><span class="line">        %&#x7C7B;&#x522B;&#x6570;-1</span><br><span class="line">        class_num=class_num-1;</span><br><span class="line">        continue;</span><br><span class="line">    end</span><br><span class="line">    %&#x5982;&#x679C;&#x67D0;&#x4E00;&#x7C7B;&#x7684;&#x6700;&#x5C0F;&#x6570;&#x91CF;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;&#x5E0C;&#x671B;&#x6570;&#x91CF;&#x7684;2&#x500D;</span><br><span class="line">    if max(each_class_num)&gt;=hope_num*2</span><br><span class="line">        %&#x627E;&#x5230;&#x8BE5;&#x7C7B;&#x522B;</span><br><span class="line">        tem=find(each_class_num==max(each_class_num),1);</span><br><span class="line">        %temp&#x4E3A;&#x8BE5;&#x7C7B;&#x522B;&#x7684;&#x6837;&#x672C;</span><br><span class="line">        temp=x_scale(:,y==tem);</span><br><span class="line">        %distance(i,j)&#x6307;&#x7B2C;i&#x4E2A;&#x6837;&#x672C;&#x5230;&#x7B2C;j&#x4E2A;&#x6837;&#x672C;&#x7684;&#x8DDD;&#x79BB;</span><br><span class="line">        distance=zeros(size(temp));</span><br><span class="line">        for i=1:sum(y==tem)</span><br><span class="line">            distance(i,:)=sum((temp-repmat(temp(:,i),1,sum(y==tem))).^2);</span><br><span class="line">        end</span><br><span class="line">        %&#x627E;&#x5230;&#x8DDD;&#x79BB;&#x6700;&#x8FDC;&#x7684;&#x4E24;&#x4E2A;&#x6837;&#x672C;</span><br><span class="line">        [row,col]=find(distance==max(max(distance)),1);</span><br><span class="line">        %&#x5206;&#x522B;&#x627E;&#x5230;&#x8FD9;&#x4E2A;&#x4E24;&#x4E2A;&#x6837;&#x672C;&#x7684;&#x6240;&#x5728;&#x4F4D;&#x7F6E;</span><br><span class="line">        temp=find(y==tem);</span><br><span class="line">        row=temp(row);</span><br><span class="line">        col=temp(col);</span><br><span class="line">        %&#x7C7B;&#x522B;&#x6570;+1</span><br><span class="line">        class_num=class_num+1;</span><br><span class="line">        %&#x4EE4;&#x8BE5;&#x7C7B;&#x522B;&#x64A4;&#x9500;</span><br><span class="line">        y(y==tem)=0;</span><br><span class="line">        %&#x6DFB;&#x52A0;&#x4E24;&#x4E2A;&#x65B0;&#x7C7B;&#x522B;&#xFF0C;&#x4E00;&#x4E2A;&#x8986;&#x76D6;&#x539F;&#x7C7B;&#x522B;&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#x4E3A;&#x539F;&#x7C7B;&#x522B;&#x6570;+1</span><br><span class="line">        y(row)=tem;</span><br><span class="line">        y(col)=class_num;</span><br><span class="line">        continue;</span><br><span class="line">    end</span><br><span class="line">    %&#x5982;&#x679C;&#x73B0;&#x6709;&#x7C7B;&#x522B;&#x6570;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;&#x5E0C;&#x671B;&#x7C7B;&#x522B;&#x6570;&#x7684;&#x4E00;&#x534A;&#xFF0C;&#x62C6;&#x5206;&#x7C7B;&#x5185;&#x8DDD;&#x79BB;&#x6700;&#x5927;&#x7C7B;&#x522B;</span><br><span class="line">    if class_num&lt;=hope_class_num/2</span><br><span class="line">        tem=find(distance_class_inner==max(distance_class_inner),1);</span><br><span class="line">        %temp&#x4E3A;&#x8BE5;&#x7C7B;&#x522B;&#x7684;&#x6837;&#x672C;</span><br><span class="line">        temp=x_scale(:,y==tem);</span><br><span class="line">        %distance(i,j)&#x6307;&#x7B2C;i&#x4E2A;&#x6837;&#x672C;&#x5230;&#x7B2C;j&#x4E2A;&#x6837;&#x672C;&#x7684;&#x8DDD;&#x79BB;</span><br><span class="line">        distance=zeros(size(temp));</span><br><span class="line">        for i=1:sum(y==tem)</span><br><span class="line">            distance(i,:)=sum((temp-repmat(temp(:,i),1,sum(y==tem))).^2);</span><br><span class="line">        end</span><br><span class="line">        %&#x627E;&#x5230;&#x8DDD;&#x79BB;&#x6700;&#x8FDC;&#x7684;&#x4E24;&#x4E2A;&#x6837;&#x672C;</span><br><span class="line">        [row,col]=find(distance==max(max(distance)),1);</span><br><span class="line">        %&#x5206;&#x522B;&#x627E;&#x5230;&#x8FD9;&#x4E2A;&#x4E24;&#x4E2A;&#x6837;&#x672C;&#x7684;&#x6240;&#x5728;&#x4F4D;&#x7F6E;</span><br><span class="line">        temp=find(y==tem);</span><br><span class="line">        row=temp(row);</span><br><span class="line">        col=temp(col);</span><br><span class="line">        %&#x7C7B;&#x522B;&#x6570;+1</span><br><span class="line">        class_num=class_num+1;</span><br><span class="line">        %&#x4EE4;&#x8BE5;&#x7C7B;&#x522B;&#x64A4;&#x9500;</span><br><span class="line">        y(y==tem)=0;</span><br><span class="line">        %&#x6DFB;&#x52A0;&#x4E24;&#x4E2A;&#x65B0;&#x7C7B;&#x522B;&#xFF0C;&#x4E00;&#x4E2A;&#x8986;&#x76D6;&#x539F;&#x7C7B;&#x522B;&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#x4E3A;&#x539F;&#x7C7B;&#x522B;&#x6570;+1</span><br><span class="line">        y(row)=tem;</span><br><span class="line">        y(col)=class_num;</span><br><span class="line">        continue;</span><br><span class="line">    end</span><br><span class="line">    %&#x5982;&#x679C;&#x73B0;&#x6709;&#x7C7B;&#x522B;&#x6570;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;&#x5E0C;&#x671B;&#x7C7B;&#x522B;&#x6570;&#x7684;&#x4E8C;&#x500D;&#xFF0C;&#x5408;&#x5E76;&#x7C7B;&#x95F4;&#x8DDD;&#x79BB;&#x6700;&#x5C0F;&#x7684;&#x4E24;&#x7C7B;</span><br><span class="line">    if class_num&gt;=hope_class_num*2</span><br><span class="line">        %&#x627E;&#x5230;&#x8DDD;&#x79BB;&#x6700;&#x8FD1;&#x7684;&#x4E24;&#x4E2A;&#x7C7B;&#x522B;</span><br><span class="line">        [row,col]=find(distance_between_class==min(min(distance_between_class)),1);</span><br><span class="line">        %&#x7C7B;&#x522B;&#x6570;-1</span><br><span class="line">        class_num=class_num-1;</span><br><span class="line">        %&#x5C06;col&#x7C7B;&#x5408;&#x5E76;&#x5230;row&#x7C7B;&#x4E2D;</span><br><span class="line">        y(y==col)=row;</span><br><span class="line">        %&#x8C03;&#x6574;&#x7C7B;&#x522B;&#x5E8F;&#x53F7;</span><br><span class="line">        y(y&gt;col)=y(y&gt;col)-1;</span><br><span class="line">        continue;</span><br><span class="line">    end</span><br><span class="line">    %&#x6DFB;&#x52A0;&#x6837;&#x672C;&#x7C7B;&#x5185;&#x95F4;&#x8DDD;&#x6700;&#x5927;&#x503C;</span><br><span class="line">    break;</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="ISODATA-display-m"><a href="#ISODATA-display-m" class="headerlink" title="ISODATA_display.m"></a>ISODATA_display.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function ISODATA_display(x,y,class_center,sample_num,class_num)</span><br><span class="line">color_bar=zeros(class_num,3);</span><br><span class="line">hold on;</span><br><span class="line">for i=1:class_num</span><br><span class="line">    color_bar(i,:)=[rand(1),rand(1),rand(1)];</span><br><span class="line">    %&#x7ED8;&#x5236;&#x6837;&#x672C;&#x4E2D;&#x5FC3;&#xFF0C;&#x7528;*&#x8868;&#x793A;</span><br><span class="line">    plot(class_center(1,i),class_center(2,i),&apos;color&apos;,color_bar(i,:),&apos;marker&apos;,&apos;*&apos;)</span><br><span class="line">end</span><br><span class="line">for i=1:sample_num</span><br><span class="line">    %&#x7ED8;&#x5236;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x7528;o&#x8868;&#x793A;</span><br><span class="line">    plot(x(1,i),x(2,i),&apos;color&apos;,color_bar(y(i),:),&apos;marker&apos;,&apos;o&apos;);</span><br><span class="line">end</span><br><span class="line">hold off;</span><br></pre></td></tr></tbody></table></figure><p><br><br></p><h1 id="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"><a href="#&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;" class="headerlink" title="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"></a><font size="5" color="red">&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;</font></h1><p><img src="/images/MACHINE/isodata.png" alt="ISODATA"></p><h1 id="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"><a href="#&#x6027;&#x80FD;&#x6BD4;&#x8F83;" class="headerlink" title="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x6027;&#x80FD;&#x6BD4;&#x8F83;</font></h1><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x5927;&#x6570;&#x636E;&#x96C6;&#x65F6;&#xFF0C;&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F;</li><li>&#x53EF;&#x4EE5;&#x52A8;&#x6001;&#x8C03;&#x6574;&#x7C7B;&#x522B;&#x4E2A;&#x6570;&#x548C;&#x7C7B;&#x522B;&#x4E2D;&#x5FC3;</li><li>&#x5728;&#x5148;&#x9A8C;&#x77E5;&#x8BC6;&#x4E0D;&#x8DB3;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x6709;&#x8F83;&#x597D;&#x7684;&#x5206;&#x7C7B;&#x80FD;&#x529B;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x5BF9;&#x521D;&#x59CB;&#x4E2D;&#x5FC3;&#x70B9;&#x654F;&#x611F;</li><li>&#x7B97;&#x6CD5;&#x590D;&#x6742;&#xFF0C;&#x5206;&#x7C7B;&#x901F;&#x5EA6;&#x8F83;&#x6162;</li><li>&#x53EA;&#x9002;&#x5408;&#x5206;&#x5E03;&#x5448;&#x51F8;&#x578B;&#x6216;&#x8005;&#x7403;&#x5F62;&#x7684;&#x6570;&#x636E;&#x96C6;</li><li>&#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D;</li></ul></font></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;ISODATA&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="无监督学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>K均值聚类(K-MEANS)</title>
    <link href="https://USTCcoder.github.io/2019/05/03/clustering_KMEANS/"/>
    <id>https://USTCcoder.github.io/2019/05/03/clustering_KMEANS/</id>
    <published>2019-05-03T11:14:05.000Z</published>
    <updated>2019-08-07T15:53:24.367Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">K-Means&#x805A;&#x7C7B;&#x65B9;&#x6CD5;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x89E3;&#x8BFB;"><a href="#&#x539F;&#x7406;&#x89E3;&#x8BFB;" class="headerlink" title="&#x539F;&#x7406;&#x89E3;&#x8BFB;"></a><font size="5" color="red">&#x539F;&#x7406;&#x89E3;&#x8BFB;</font></h1><p>&#x2003;&#x2003;K-Means :&#x968F;&#x673A;&#x9009;&#x53D6;<strong>N&#x4E2A;</strong>&#x5BF9;&#x8C61;&#x4F5C;&#x4E3A;&#x521D;&#x59CB;&#x7684;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#xFF0C;&#x7136;&#x540E;&#x8BA1;&#x7B97;&#x6BCF;&#x4E2A;&#x5BF9;&#x8C61;&#x4E0E;&#x5404;&#x4E2A;&#x79CD;&#x5B50;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#xFF0C;&#x628A;&#x6BCF;&#x4E2A;&#x5BF9;&#x8C61;&#x5206;&#x914D;&#x7ED9;&#x8DDD;&#x79BB;&#x5B83;&#x6700;&#x8FD1;&#x7684;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x3002;&#x6BCF;&#x5206;&#x914D;&#x4E00;&#x4E2A;&#x6837;&#x672C;&#xFF0C;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x4F1A;&#x6839;&#x636E;&#x805A;&#x7C7B;&#x4E2D;&#x73B0;&#x6709;&#x7684;&#x5BF9;&#x8C61;&#x88AB;<strong>&#x91CD;&#x65B0;&#x8BA1;&#x7B97;</strong>&#x3002;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x5C06;&#x4E0D;&#x65AD;&#x91CD;&#x590D;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;&#x3002;<br><a id="more"></a></p><h1 id="&#x6838;&#x5FC3;&#x601D;&#x60F3;"><a href="#&#x6838;&#x5FC3;&#x601D;&#x60F3;" class="headerlink" title="&#x6838;&#x5FC3;&#x601D;&#x60F3;"></a><font size="5" color="red">&#x6838;&#x5FC3;&#x601D;&#x60F3;</font></h1><p>&#x2003;&#x2003;<font size="4">1. &#x6C42;&#x51FA;N&#x4E2A;&#x7C7B;&#x522B;&#x7684;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;a<sub>1</sub>,a<sub>2</sub>, &#x2026; ,a<sub>N</sub></font><br>$$a_i=\frac {1}{\lvert C_i \rvert}\underset{x_i \in C_j}{\sum}{x_i}$$<br>&#x2003;&#x2003;<font size="4">2. &#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6837;&#x672C;x<sub>j</sub>&#xFF0C;&#x5C06;&#x5176;&#x6807;&#x8BB0;&#x4E3A;&#x8DDD;&#x79BB;&#x7C7B;&#x522B;&#x4E2D;&#x5FC3;a<sub>i</sub>&#x6700;&#x8FD1;&#x7684;&#x4E00;&#x7C7B;</font><br>$$x_j \in C_i \ , \ &#x5176;&#x4E2D;k=\underset{i,a_i \in C_k}{arg \ min}\ d(x_j,a_i)$$<br>&#x2003;&#x2003;<font size="4">3. &#x91CD;&#x590D;&#x6B65;&#x9AA4;1&#xFF0C;2&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;</font><br><img src="/images/MACHINE/kmeans1.png" alt="KMEANS"></p><h1 id="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"><a href="#&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;</font></h1><p><img src="/images/MACHINE/kmeans9.png" alt="KMEANS"></p><p><br><br></p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><p><font size="4">&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6570;&#x636E;&#x96C6;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;<a href="https://ustccoder.github.io/2019/04/25/clustering_Dataset/">&#x6570;&#x636E;&#x96C6;(Data Set)</a></font></p><h2 id="KMEANS-main-m"><a href="#KMEANS-main-m" class="headerlink" title="KMEANS_main.m"></a>KMEANS_main.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">load(&apos;..\\cluster_gauss.mat&apos;);</span><br><span class="line">%&#x8F93;&#x5165;x&#x7684;&#x77E9;&#x9635;</span><br><span class="line">x=data;</span><br><span class="line">randIndex = randperm(size(x,2));</span><br><span class="line">x=x(:,randIndex);</span><br><span class="line">%&#x7C7B;&#x522B;&#x6570;&#x76EE;&#xFF0C;&#x8BF7;&#x8F93;&#x5165;&#x5927;&#x4E8E;1&#x7684;&#x6570;</span><br><span class="line">class_num=3;</span><br><span class="line">%&#x6837;&#x672C;&#x6570;</span><br><span class="line">sample_num=size(x,2);</span><br><span class="line">%&#x7279;&#x5F81;&#x6570;&#x76EE;</span><br><span class="line">feat_num=size(x,1);</span><br><span class="line">%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1</span><br><span class="line">x_scale=zeros(size(x));</span><br><span class="line">for i=1:feat_num</span><br><span class="line">    x_scale(i,:)=(x(i,:)-min(x(i,:)))/(max(x(i,:))-min(x(i,:)));</span><br><span class="line">end</span><br><span class="line">%&#x7C7B;&#x522B;&#x4E2D;&#x5FC3;&#x4F4D;&#x7F6E;</span><br><span class="line">loc_center=zeros(feat_num,class_num);</span><br><span class="line">%&#x5982;&#x679C;&#x7C7B;&#x522B;&#x6570;&#x5927;&#x4E8E;&#x6837;&#x672C;&#x6570;&#x6216;&#x8005;&#x7C7B;&#x522B;&#x6570;&#x5C0F;&#x4E8E;1&#xFF0C;&#x5219;&#x65E0;&#x6CD5;&#x5206;&#x7C7B;</span><br><span class="line">if class_num&gt;sample_num||class_num&lt;1</span><br><span class="line">    disp(&apos;ERROR!&apos;)</span><br><span class="line">else</span><br><span class="line">    %&#x5982;&#x679C;&#x7C7B;&#x522B;&#x6570;&#x7B49;&#x4E8E;1&#xFF0C;&#x5219;&#x6240;&#x6709;&#x7684;&#x6837;&#x672C;&#x90FD;&#x5C5E;&#x4E8E;&#x8BE5;&#x7C7B;&#x522B;,&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x4E3A;&#x6240;&#x6709;&#x6837;&#x672C;&#x7684;&#x4E2D;&#x70B9;</span><br><span class="line">    if class_num==1</span><br><span class="line">        y=ones(1,sample_num);</span><br><span class="line">        loc_center(:,1)=sum(x,2)/sample_num;</span><br><span class="line">        k=0;</span><br><span class="line">    else</span><br><span class="line">        %&#x53D6;&#x524D;class_num&#x4E2A;&#x6837;&#x672C;&#x4F5C;&#x4E3A;&#x521D;&#x59CB;&#x7C7B;&#x522B;</span><br><span class="line">        loc_center=x_scale(:,1:class_num);</span><br><span class="line">        %ISO&#x805A;&#x7C7B;&#x6CD5;</span><br><span class="line">        [y,loc_center,k]=KMEANS_classify(x_scale,loc_center,sample_num,class_num);</span><br><span class="line">        %&#x5C06;&#x7F29;&#x653E;&#x540E;&#x7684;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x590D;&#x539F;</span><br><span class="line">        for i=1:feat_num</span><br><span class="line">            loc_center(i,:)=loc_center(i,:)*(max(x(i,:))-min(x(i,:)))+min(x(i,:));</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    if k&gt;=1000</span><br><span class="line">        disp(&apos;Incorrect Classify&apos;)</span><br><span class="line">    else</span><br><span class="line">        %&#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A;</span><br><span class="line">        if feat_num==2</span><br><span class="line">            KMEANS_display(x,y,loc_center,sample_num,class_num)</span><br><span class="line">        else</span><br><span class="line">            disp(&apos;The Feature Is Not Two-Dimensional&apos;);</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="KMEANS-classify-m"><a href="#KMEANS-classify-m" class="headerlink" title="KMEANS_classify.m"></a>KMEANS_classify.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function [y,loc_center,k]=KMEANS_classify(x_scale,loc_center,sample_num,class_num)</span><br><span class="line">%&#x8BBE;&#x7F6E;&#x8FED;&#x4EE3;&#x6B21;&#x6570;</span><br><span class="line">k=0;</span><br><span class="line">while 1</span><br><span class="line">    %&#x521D;&#x59CB;&#x5316;&#x6700;&#x65B0;&#x7684;&#x5206;&#x7C7B;&#x4E2D;&#x5FC3;</span><br><span class="line">    loc_center_new=zeros(size(loc_center));</span><br><span class="line">    distance=zeros(class_num,sample_num);</span><br><span class="line">    %distance&#x4E3A;&#x6BCF;&#x4E00;&#x4E2A;&#x6837;&#x672C;&#x5230;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x8DDD;&#x79BB;</span><br><span class="line">    for i=1:class_num</span><br><span class="line">        distance(i,:)=sum((x_scale-repmat(loc_center(:,i),1,sample_num)).^2);</span><br><span class="line">    end</span><br><span class="line">    %&#x6C42;&#x51FA;&#x6BCF;&#x4E2A;&#x6837;&#x672C;&#x5230;&#x54EA;&#x4E00;&#x7C7B;&#x6700;&#x8FD1;</span><br><span class="line">    [~,y]=min(distance);</span><br><span class="line">    %&#x66F4;&#x65B0;&#x5206;&#x7C7B;&#x4E2D;&#x5FC3;</span><br><span class="line">    for i=1:class_num</span><br><span class="line">        loc_center_new(:,i)=sum(x_scale(:,y==i),2)/sum(y==i);</span><br><span class="line">    end</span><br><span class="line">    %&#x5982;&#x679C;&#x5206;&#x7C7B;&#x4E2D;&#x5FC3;&#x548C;&#x4E0A;&#x4E00;&#x6B21;&#x5206;&#x7C7B;&#x4E2D;&#x5FC3;&#x76F8;&#x7B49;&#x5219;&#x5206;&#x7C7B;&#x5B8C;&#x6BD5;</span><br><span class="line">    if isequal(loc_center_new,loc_center)</span><br><span class="line">        break;</span><br><span class="line">    %&#x5426;&#x5219;&#x7EE7;&#x7EED;&#x5206;&#x7C7B;</span><br><span class="line">    else</span><br><span class="line">        loc_center=loc_center_new;</span><br><span class="line">        k=k+1;</span><br><span class="line">        %&#x5982;&#x679C;&#x5206;&#x7C7B;&#x6B21;&#x6570;&#x8FBE;&#x5230;1000&#x4ECD;&#x7136;&#x6CA1;&#x6709;&#x7ED3;&#x675F;&#xFF0C;&#x5219;&#x5F3A;&#x5236;&#x5206;&#x7C7B;&#x7ED3;&#x675F;</span><br><span class="line">        if k&gt;=1000</span><br><span class="line">            break;</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="KMEANS-display-m"><a href="#KMEANS-display-m" class="headerlink" title="KMEANS_display.m"></a>KMEANS_display.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function KMEANS_display(x,y,loc_center,sample_num,class_num)</span><br><span class="line">hold on;</span><br><span class="line">color_bar=zeros(class_num,3);</span><br><span class="line">%&#x753B;&#x51FA;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#xFF0C;&#x7528;*&#x8868;&#x793A;</span><br><span class="line">for i=1:class_num</span><br><span class="line">    color_bar(i,:)=[rand(1),rand(1),rand(1)];</span><br><span class="line">    plot(loc_center(1,i),loc_center(2,i),&apos;color&apos;,color_bar(i,:),&apos;marker&apos;,&apos;*&apos;)</span><br><span class="line">end</span><br><span class="line">%&#x753B;&#x51FA;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x6837;&#x672C;&#x6570;&#x636E;&#xFF0C;&#x7528;o&#x8868;&#x793A;</span><br><span class="line">for i=1:sample_num</span><br><span class="line">    plot(x(1,i),x(2,i),&apos;color&apos;,color_bar(y(i),:),&apos;marker&apos;,&apos;o&apos;);</span><br><span class="line">end</span><br><span class="line">hold off;</span><br></pre></td></tr></tbody></table></figure><p><br><br></p><h1 id="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"><a href="#&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;" class="headerlink" title="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"></a><font size="5" color="red">&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;</font></h1><p><img src="/images/MACHINE/kmeans.png" alt="KMEANS"></p><h1 id="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"><a href="#&#x6027;&#x80FD;&#x6BD4;&#x8F83;" class="headerlink" title="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x6027;&#x80FD;&#x6BD4;&#x8F83;</font></h1><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x5BB9;&#x6613;&#x7406;&#x89E3;</li><li>&#x5927;&#x6570;&#x636E;&#x96C6;&#x65F6;&#xFF0C;&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x5BF9;&#x521D;&#x59CB;&#x4E2D;&#x5FC3;&#x70B9;&#x654F;&#x611F;</li><li>&#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x77E5;&#x9053;&#x7C7B;&#x522B;&#x7684;&#x4E2A;&#x6570;</li><li>&#x53EA;&#x9002;&#x5408;&#x5206;&#x5E03;&#x5448;&#x51F8;&#x578B;&#x6216;&#x8005;&#x7403;&#x5F62;&#x7684;&#x6570;&#x636E;&#x96C6;</li><li>&#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D;</li></ul></font></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;K-Means&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="无监督学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>分裂的层次聚类(DIANA)</title>
    <link href="https://USTCcoder.github.io/2019/05/02/clustering_DIANA/"/>
    <id>https://USTCcoder.github.io/2019/05/02/clustering_DIANA/</id>
    <published>2019-05-02T11:38:26.000Z</published>
    <updated>2019-08-07T15:52:59.800Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x5206;&#x88C2;&#x7684;&#x5C42;&#x6B21;&#x805A;&#x7C7B;&#x65B9;&#x6CD5;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x89E3;&#x8BFB;"><a href="#&#x539F;&#x7406;&#x89E3;&#x8BFB;" class="headerlink" title="&#x539F;&#x7406;&#x89E3;&#x8BFB;"></a><font size="5" color="red">&#x539F;&#x7406;&#x89E3;&#x8BFB;</font></h1><p>&#x2003;&#x2003;DIANA(Divisive Analysis):&#x91C7;&#x7528;<strong>&#x81EA;&#x9876;&#x5411;&#x4E0B;</strong>&#x7684;&#x7B56;&#x7565;&#xFF0C;&#x6700;&#x521D;&#x5C06;&#x6240;&#x6709;&#x5BF9;&#x8C61;&#x7F6E;&#x4E8E;&#x4E00;&#x4E2A;&#x7C7B;&#x4E2D;&#xFF0C;&#x7136;&#x540E;&#x6839;&#x636E;&#x67D0;&#x4E9B;&#x51C6;&#x5219;&#x5C06;&#x8FD9;&#x4E9B;&#x7C7B;&#x522B;<strong>&#x9010;&#x6E10;&#x7EC6;&#x5206;</strong>&#x3002;&#x7EC6;&#x5206;&#x8FC7;&#x7A0B;&#x53CD;&#x590D;&#x8FDB;&#x884C;&#x76F4;&#x5230;&#x7C7B;&#x522B;&#x8FBE;&#x5230;&#x9884;&#x671F;&#x7684;&#x6570;&#x76EE;&#x3002;<br><a id="more"></a></p><h1 id="&#x6838;&#x5FC3;&#x601D;&#x60F3;"><a href="#&#x6838;&#x5FC3;&#x601D;&#x60F3;" class="headerlink" title="&#x6838;&#x5FC3;&#x601D;&#x60F3;"></a><font size="5" color="red">&#x6838;&#x5FC3;&#x601D;&#x60F3;</font></h1><p>&#x2003;&#x2003;<font size="4">1. &#x5C06;&#x6240;&#x6709;&#x6837;&#x672C;&#x90FD;&#x4F5C;&#x4E3A;&#x540C;&#x4E00;&#x7C7B;</font></p><p>&#x2003;&#x2003;<font size="4">2. &#x5206;&#x88C2;&#x6240;&#x6709;&#x7C7B;&#x522B;&#x4E2D;&#x5230;&#x8BE5;&#x7C7B;&#x4E2D;&#x5FC3;&#x8DDD;&#x79BB;&#x6700;&#x5927;&#x7684;&#x6837;&#x672C;&#xFF0C;&#x5C06;&#x5176;&#x5355;&#x72EC;&#x4F5C;&#x4E3A;&#x4E00;&#x7C7B;&#xFF0C;&#x6309;&#x7167;&#x6700;&#x8FD1;&#x90BB;&#x5206;&#x7C7B;&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;</font><br>$$d_{max}=\underset{C_i \subseteq C}{max} \ (\underset{x_i \in C_i}{max} \ {d(x_i,\overline C_i)}) \ , \ &#x5176;&#x4E2D;\overline {C_i}=\frac {1}{\lvert C_i \rvert}\underset{x_i \in C_i}{\sum}{x_i}$$</p><p><img src="/images/MACHINE/diana1.png" alt="DIANA"></p><h1 id="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"><a href="#&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;</font></h1><p><img src="/images/MACHINE/diana9.png" alt="DIANA"></p><p><br><br></p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><p><font size="4">&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6570;&#x636E;&#x96C6;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;<a href="https://ustccoder.github.io/2019/04/25/clustering_Dataset/">&#x6570;&#x636E;&#x96C6;(Data Set)</a></font></p><h2 id="DIANA-main-m"><a href="#DIANA-main-m" class="headerlink" title="DIANA_main.m"></a>DIANA_main.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">load(&apos;..\\cluster_gauss.mat&apos;);</span><br><span class="line">%&#x8F93;&#x5165;x&#x7684;&#x77E9;&#x9635;</span><br><span class="line">x=data;</span><br><span class="line">randIndex = randperm(size(x,2));</span><br><span class="line">x=x(:,randIndex);</span><br><span class="line">%&#x5E0C;&#x671B;&#x5212;&#x5206;&#x7684;&#x7C7B;&#x522B;&#x6570;</span><br><span class="line">class_num=3;</span><br><span class="line">%&#x6837;&#x672C;&#x6570;</span><br><span class="line">sample_num=size(x,2);</span><br><span class="line">%&#x7279;&#x5F81;&#x6570;&#x76EE;</span><br><span class="line">feat_num=size(x,1);</span><br><span class="line">%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1</span><br><span class="line">x_scale=zeros(size(x));</span><br><span class="line">for i=1:feat_num</span><br><span class="line">    x_scale(i,:)=(x(i,:)-min(x(i,:)))/(max(x(i,:))-min(x(i,:)));</span><br><span class="line">end</span><br><span class="line">[y,class_center]=DIANA_classify(x_scale,sample_num,class_num);</span><br><span class="line">%&#x6837;&#x672C;&#x4E2D;&#x5FC3;&#x5C3A;&#x5EA6;&#x590D;&#x539F;</span><br><span class="line">for i=1:feat_num</span><br><span class="line">    class_center(i,:)=(max(x(i,:))-min(x(i,:)))*class_center(i,:)+min(x(i,:));</span><br><span class="line">end</span><br><span class="line">%&#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A;</span><br><span class="line">if feat_num==2</span><br><span class="line">    DIANA_display(x,y,class_center,sample_num,class_num);</span><br><span class="line">else</span><br><span class="line">    disp(&apos;The Feature Is Not Two-Dimensional&apos;);</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="DIANA-classify-m"><a href="#DIANA-classify-m" class="headerlink" title="DIANA_classify.m"></a>DIANA_classify.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">function [y,class_center]=DIANA_classify(x_scale,sample_num,class_num)</span><br><span class="line">if class_num==1</span><br><span class="line">    class_center=sum(x_scale,2)/sample_num;</span><br><span class="line">    y=ones(1,sample_num);</span><br><span class="line">else</span><br><span class="line">    %&#x7ED9;&#x6BCF;&#x4E00;&#x4E2A;&#x6837;&#x672C;&#x90FD;&#x89C6;&#x4E3A;0&#x7C7B;</span><br><span class="line">    y=zeros(1,sample_num);</span><br><span class="line">    distance=zeros(sample_num);</span><br><span class="line">    for i=1:sample_num</span><br><span class="line">        distance(i,:)=sum((x_scale-repmat(x_scale(:,i),1,sample_num)).^2);</span><br><span class="line">    end</span><br><span class="line">    %&#x627E;&#x5230;&#x8DDD;&#x79BB;&#x6700;&#x8FDC;&#x7684;&#x4E24;&#x4E2A;&#x6837;&#x672C;</span><br><span class="line">    [row,col]=find(distance==max(max(distance)),1);</span><br><span class="line">    %&#x5C06;row&#x5206;&#x4E3A;&#x7B2C;&#x4E00;&#x7C7B;,col&#x5206;&#x4E3A;&#x7B2C;&#x4E8C;&#x7C7B;</span><br><span class="line">    y(row)=1;</span><br><span class="line">    y(col)=2;</span><br><span class="line">    %&#x8BBE;&#x7F6E;&#x7B2C;&#x4E00;&#x7C7B;&#x548C;&#x7B2C;&#x4E8C;&#x7C7B;&#x7684;&#x4E2D;&#x5FC3;</span><br><span class="line">    class_center(:,1)=x_scale(:,row);</span><br><span class="line">    class_center(:,2)=x_scale(:,col);</span><br><span class="line">    %&#x76EE;&#x524D;&#x7684;&#x7C7B;&#x522B;&#x6570;</span><br><span class="line">    class_num_temp=2;</span><br><span class="line">    distance_min=zeros(1,sample_num);</span><br><span class="line">    while class_num_temp~=class_num</span><br><span class="line">        for i=1:sample_num</span><br><span class="line">            %&#x6C42;&#x6BCF;&#x4E2A;&#x6837;&#x672C;&#x5230;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x8DDD;&#x79BB;</span><br><span class="line">            distance=sum((class_center-repmat(x_scale(:,i),1,class_num_temp)).^2);</span><br><span class="line">            %&#x6C42;&#x51FA;&#x6BCF;&#x4E2A;&#x6837;&#x672C;&#x5230;&#x6BCF;&#x4E00;&#x7C7B;&#x8DDD;&#x79BB;&#x6700;&#x5C0F;&#x503C;</span><br><span class="line">            distance_min(i)=distance(find(distance==min(distance),1));</span><br><span class="line">        end</span><br><span class="line">        %&#x627E;&#x5230;&#x8DDD;&#x79BB;&#x6700;&#x5927;&#x503C;&#x4F5C;&#x4E3A;&#x4E00;&#x7C7B;</span><br><span class="line">        temp=find(distance_min==max(distance_min),1);</span><br><span class="line">        %&#x7C7B;&#x522B;&#x6570;+1</span><br><span class="line">        class_num_temp=class_num_temp+1;</span><br><span class="line">        %&#x4FEE;&#x6539;&#x7C7B;&#x522B;&#x4FE1;&#x606F;</span><br><span class="line">        y(temp)=class_num_temp;</span><br><span class="line">        for i=1:class_num_temp</span><br><span class="line">            %&#x66F4;&#x65B0;&#x7C7B;&#x522B;&#x7684;&#x4E2D;&#x5FC3;</span><br><span class="line">            class_center(:,i)=sum(x_scale(:,y==i),2)/sum(y==i);</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    %&#x91C7;&#x7528;&#x6700;&#x8FD1;&#x90BB;&#x8FDB;&#x884C;&#x5206;&#x7C7B;</span><br><span class="line">    for i=1:sample_num</span><br><span class="line">        distance=sum((class_center-repmat(x_scale(:,i),1,class_num_temp)).^2);</span><br><span class="line">        y(i)=find(distance==min(distance),1);</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="DIANA-display-m"><a href="#DIANA-display-m" class="headerlink" title="DIANA_display.m"></a>DIANA_display.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function DIANA_display(x,y,class_center,sample_num,class_num)</span><br><span class="line">color_bar=zeros(class_num,3);</span><br><span class="line">hold on;</span><br><span class="line">for i=1:class_num</span><br><span class="line">    color_bar(i,:)=[rand(1),rand(1),rand(1)];</span><br><span class="line">    %&#x7ED8;&#x5236;&#x6837;&#x672C;&#x4E2D;&#x5FC3;&#xFF0C;&#x7528;*&#x8868;&#x793A;</span><br><span class="line">    plot(class_center(1,i),class_center(2,i),&apos;color&apos;,color_bar(i,:),&apos;marker&apos;,&apos;*&apos;)</span><br><span class="line">end</span><br><span class="line">for i=1:sample_num</span><br><span class="line">    %&#x7ED8;&#x5236;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x7528;o&#x8868;&#x793A;</span><br><span class="line">    plot(x(1,i),x(2,i),&apos;color&apos;,color_bar(y(i),:),&apos;marker&apos;,&apos;o&apos;);</span><br><span class="line">end</span><br><span class="line">hold off;</span><br></pre></td></tr></tbody></table></figure><p><br><br></p><h1 id="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"><a href="#&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;" class="headerlink" title="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"></a><font size="5" color="red">&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;</font></h1><p><img src="/images/MACHINE/diana.png" alt="DIANA"></p><h1 id="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"><a href="#&#x6027;&#x80FD;&#x6BD4;&#x8F83;" class="headerlink" title="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x6027;&#x80FD;&#x6BD4;&#x8F83;</font></h1><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x5BB9;&#x6613;&#x7406;&#x89E3;</li><li>&#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x503C;&#x7684;&#x9009;&#x62E9;</li><li>&#x5BF9;&#x4E8E;&#x7C7B;&#x522B;&#x8F83;&#x5C11;&#x7684;&#x8BAD;&#x7EC3;&#x96C6;&#x5206;&#x7C7B;&#x8F83;&#x5FEB;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x654F;&#x611F;</li><li>&#x5206;&#x88C2;&#x64CD;&#x4F5C;&#x4E0D;&#x80FD;&#x64A4;&#x9500;</li><li>&#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x77E5;&#x9053;&#x7C7B;&#x522B;&#x7684;&#x4E2A;&#x6570;</li><li>&#x5BF9;&#x4E8E;&#x7C7B;&#x522B;&#x8F83;&#x591A;&#x7684;&#x8BAD;&#x7EC3;&#x96C6;&#x5206;&#x7C7B;&#x8F83;&#x6162;</li><li>&#x53EA;&#x9002;&#x5408;&#x5206;&#x5E03;&#x5448;&#x51F8;&#x578B;&#x6216;&#x8005;&#x7403;&#x5F62;&#x7684;&#x6570;&#x636E;&#x96C6;</li><li>&#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D;</li></ul></font></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;DIANA&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="无监督学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>凝聚的层次聚类(AGNES)</title>
    <link href="https://USTCcoder.github.io/2019/05/01/clustering_AGNES/"/>
    <id>https://USTCcoder.github.io/2019/05/01/clustering_AGNES/</id>
    <published>2019-05-01T11:29:40.000Z</published>
    <updated>2019-08-07T15:51:48.176Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x51DD;&#x805A;&#x7684;&#x5C42;&#x6B21;&#x805A;&#x7C7B;&#x65B9;&#x6CD5;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x89E3;&#x8BFB;"><a href="#&#x539F;&#x7406;&#x89E3;&#x8BFB;" class="headerlink" title="&#x539F;&#x7406;&#x89E3;&#x8BFB;"></a><font size="5" color="red">&#x539F;&#x7406;&#x89E3;&#x8BFB;</font></h1><p>&#x2003;&#x2003;AGNES(Agglomerative Nesting):&#x91C7;&#x7528;<strong>&#x81EA;&#x5E95;&#x5411;&#x4E0A;</strong>&#x7684;&#x7B56;&#x7565;&#xFF0C;&#x6700;&#x521D;&#x5C06;&#x6BCF;&#x4E2A;&#x5BF9;&#x8C61;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x7C7B;&#xFF0C;&#x7136;&#x540E;&#x6839;&#x636E;&#x67D0;&#x4E9B;&#x51C6;&#x5219;&#x5C06;&#x8FD9;&#x4E9B;&#x7C7B;&#x522B;<strong>&#x9010;&#x4E00;&#x5408;&#x5E76;</strong>&#x3002;&#x5408;&#x5E76;&#x7684;&#x8FC7;&#x7A0B;&#x53CD;&#x590D;&#x8FDB;&#x884C;&#x76F4;&#x5230;&#x7C7B;&#x522B;&#x8FBE;&#x5230;&#x9884;&#x671F;&#x7684;&#x6570;&#x76EE;&#x3002;<br><a id="more"></a></p><h1 id="&#x6838;&#x5FC3;&#x601D;&#x60F3;"><a href="#&#x6838;&#x5FC3;&#x601D;&#x60F3;" class="headerlink" title="&#x6838;&#x5FC3;&#x601D;&#x60F3;"></a><font size="5" color="red">&#x6838;&#x5FC3;&#x601D;&#x60F3;</font></h1><p>&#x2003;&#x2003;<font size="4">1. &#x5C06;&#x6BCF;&#x4E00;&#x4E2A;&#x6837;&#x672C;&#x90FD;&#x5355;&#x72EC;&#x4F5C;&#x4E3A;&#x4E00;&#x7C7B;</font></p><p>&#x2003;&#x2003;<font size="4">2. &#x5408;&#x5E76;&#x4E24;&#x7C7B;(&#x591A;&#x79CD;&#x5B9A;&#x4E49;&#x65B9;&#x6CD5;)&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;</font></p><ul><li><p>&#x6700;&#x5C0F;&#x8DDD;&#x79BB;&#xFF1A;&#x5C06;&#x4E24;&#x4E2A;&#x7C7B;&#x522B;&#x4E4B;&#x95F4;&#x6700;&#x8FD1;&#x7684;&#x4E24;&#x4E2A;&#x6837;&#x672C;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#x4F5C;&#x4E3A;&#x4E24;&#x4E2A;&#x7C7B;&#x522B;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;<br>$$d_{min}=\underset{x_i \in C_i,x_j \in C_j}{min}d(x_i,x_j)$$</p></li><li><p>&#x6700;&#x5927;&#x8DDD;&#x79BB;&#xFF1A;&#x5C06;&#x4E24;&#x4E2A;&#x7C7B;&#x522B;&#x4E4B;&#x95F4;&#x6700;&#x8FDC;&#x7684;&#x4E24;&#x4E2A;&#x6837;&#x672C;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#x4F5C;&#x4E3A;&#x4E24;&#x4E2A;&#x7C7B;&#x522B;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;<br>$$d_{max}=\underset{x_i \in C_i,x_j \in C_j}{max}d(x_i-x_j)$$</p></li></ul><p></p><center><div style="float:left;margin-left:50px"><img src="/images/MACHINE/agnes1.png" width="200" height="260"></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/MACHINE/agnes2.png" width="200" height="260"></div><br><div style="float:none;clear:both;"></div><ul><li><p>&#x5747;&#x503C;&#x8DDD;&#x79BB;&#xFF1A;&#x5C06;&#x4E24;&#x4E2A;&#x7C7B;&#x522B;&#x4E2D;&#x6837;&#x672C;&#x7684;&#x5E73;&#x5747;&#x503C;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#x4F5C;&#x4E3A;&#x4E24;&#x4E2A;&#x7C7B;&#x522B;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;<br>$$d_{mean}=d(\overline {C_i}- \overline {C_j}) \ , \ &#x5176;&#x4E2D;\overline {C_i}=\frac {1}{\lvert C_i \rvert}\underset{x_i \in C_i}{\sum}{x_i}$$</p></li><li><p>&#x5E73;&#x5747;&#x8DDD;&#x79BB;&#xFF1A;&#x5C06;&#x4E24;&#x4E2A;&#x7C7B;&#x522B;&#x4E2D;&#x6837;&#x672C;&#x95F4;&#x4E24;&#x4E24;&#x8DDD;&#x79BB;&#x7684;&#x5E73;&#x5747;&#x503C;&#x4F5C;&#x4E3A;&#x4E24;&#x4E2A;&#x7C7B;&#x522B;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;<br>$$d_{avg}=\frac {1}{\lvert C_i \rvert \lvert C_j \rvert}\underset{x_i \in C_i}{\sum}\underset{x_j \in C_j}{\sum}d(x_i-x_j)$$</p></li></ul><p></p><center><div style="float:left;margin-left:50px"><img src="/images/MACHINE/agnes3.png" width="200" height="260"></div></center><p></p><div style="float:right;margin-right:50px"><img src="/images/MACHINE/agnes4.png" width="200" height="260"></div><br><div style="float:none;clear:both;"></div><h1 id="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"><a href="#&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;" class="headerlink" title="&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;"></a><font size="5" color="red">&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;</font></h1><p><img src="/images/MACHINE/agnes9.png" alt="AGNES"></p><p><br><br></p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><p><font size="4">&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6570;&#x636E;&#x96C6;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;<a href="https://ustccoder.github.io/2019/04/25/clustering_Dataset/">&#x6570;&#x636E;&#x96C6;(Data Set)</a></font></p><h2 id="AGNES-main-m"><a href="#AGNES-main-m" class="headerlink" title="AGNES_main.m"></a>AGNES_main.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">load(&apos;..\\cluster_gauss.mat&apos;);</span><br><span class="line">%&#x8F93;&#x5165;x&#x7684;&#x77E9;&#x9635;</span><br><span class="line">x=data;</span><br><span class="line">randIndex = randperm(size(x,2));</span><br><span class="line">x=x(:,randIndex);</span><br><span class="line">%&#x5E0C;&#x671B;&#x5212;&#x5206;&#x7684;&#x7C7B;&#x522B;&#x6570;</span><br><span class="line">class_num=3;</span><br><span class="line">%&#x6837;&#x672C;&#x6570;</span><br><span class="line">sample_num=size(x,2);</span><br><span class="line">%&#x7279;&#x5F81;&#x6570;&#x76EE;</span><br><span class="line">feat_num=size(x,1);</span><br><span class="line">%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1</span><br><span class="line">x_scale=zeros(size(x));</span><br><span class="line">for i=1:feat_num</span><br><span class="line">    x_scale(i,:)=(x(i,:)-min(x(i,:)))/(max(x(i,:))-min(x(i,:)));</span><br><span class="line">end</span><br><span class="line">[y,class_center]=AGNES_classify(x_scale,sample_num,class_num);</span><br><span class="line">%&#x6837;&#x672C;&#x4E2D;&#x5FC3;&#x5C3A;&#x5EA6;&#x590D;&#x539F;</span><br><span class="line">for i=1:feat_num</span><br><span class="line">    class_center(i,:)=(max(x(i,:))-min(x(i,:)))*class_center(i,:)+min(x(i,:));</span><br><span class="line">end</span><br><span class="line">%&#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A;</span><br><span class="line">if feat_num==2</span><br><span class="line">    AGNES_display(x,y,class_center,sample_num,class_num);</span><br><span class="line">else</span><br><span class="line">    disp(&apos;The Feature Is Not Two-Dimensional&apos;);</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="AGNES-classify-m"><a href="#AGNES-classify-m" class="headerlink" title="AGNES_classify.m"></a>AGNES_classify.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function [y,class_center]=AGNES_classify(x_scale,sample_num,class_num)</span><br><span class="line">%&#x7ED9;&#x6BCF;&#x4E00;&#x4E2A;&#x6837;&#x672C;&#x5206;&#x914D;&#x4E00;&#x4E2A;&#x521D;&#x59CB;&#x7C7B;&#x522B;</span><br><span class="line">y=1:sample_num;</span><br><span class="line">%&#x5F53;&#x524D;&#x7684;&#x7C7B;&#x522B;&#x6570;</span><br><span class="line">class_num_temp=sample_num;</span><br><span class="line">%&#x521D;&#x59CB;&#x5316;&#x5F53;&#x524D;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x4E2D;&#x5FC3;</span><br><span class="line">class_center=x_scale;</span><br><span class="line">while class_num_temp~=class_num</span><br><span class="line">    %&#x521D;&#x59CB;&#x5316;&#x7C7B;&#x522B;&#x4E2D;&#x5FC3;&#x8DDD;</span><br><span class="line">    center_distance=zeros(class_num_temp);</span><br><span class="line">    for i=1:class_num_temp</span><br><span class="line">        %&#x8BA1;&#x7B97;&#x7C7B;&#x522B;&#x4E2D;&#x5FC3;&#x8DDD;</span><br><span class="line">        center_distance(i,:)=sum((class_center-repmat(class_center(:,i),1,class_num_temp)).^2);</span><br><span class="line">        center_distance(i,i)=inf;</span><br><span class="line">    end</span><br><span class="line">    %&#x4ECE;&#x4E2D;&#x5FC3;&#x8DDD;&#x4E2D;&#x627E;&#x5230;&#x6700;&#x5C0F;&#x503C;</span><br><span class="line">    [row,col]=find(center_distance==min(min(center_distance)),1);</span><br><span class="line">    %&#x5C06;&#x4E24;&#x7C7B;&#x5408;&#x5E76;</span><br><span class="line">    y(y==col)=row;</span><br><span class="line">    %&#x66F4;&#x65B0;&#x7C7B;&#x522B;&#xFF0C;&#x4ECE;&#x7B2C;1&#x7C7B;&#x8FDE;&#x7EED;&#x5206;&#x7C7B;</span><br><span class="line">    y(y&gt;col)=y(y&gt;col)-1;</span><br><span class="line">    %&#x7C7B;&#x522B;&#x6570;-1</span><br><span class="line">    class_num_temp=class_num_temp-1;</span><br><span class="line">    %&#x521D;&#x59CB;&#x5316;&#x6837;&#x672C;&#x4E2D;&#x5FC3;</span><br><span class="line">    class_center=zeros(2,class_num_temp);</span><br><span class="line">    for i=1:class_num_temp</span><br><span class="line">        %&#x8BA1;&#x7B97;&#x5F53;&#x524D;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x6837;&#x672C;&#x4E2D;&#x5FC3;</span><br><span class="line">        class_center(:,i)=sum(x_scale(:,y==i),2)/sum(y==i);</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h2 id="AGNES-display-m"><a href="#AGNES-display-m" class="headerlink" title="AGNES_display.m"></a>AGNES_display.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function AGNES_display(x,y,class_center,sample_num,class_num)</span><br><span class="line">color_bar=zeros(class_num,3);</span><br><span class="line">hold on;</span><br><span class="line">for i=1:class_num</span><br><span class="line">    color_bar(i,:)=[rand(1),rand(1),rand(1)];</span><br><span class="line">    %&#x7ED8;&#x5236;&#x6837;&#x672C;&#x4E2D;&#x5FC3;&#xFF0C;&#x7528;*&#x8868;&#x793A;</span><br><span class="line">    plot(class_center(1,i),class_center(2,i),&apos;color&apos;,color_bar(i,:),&apos;marker&apos;,&apos;*&apos;)</span><br><span class="line">end</span><br><span class="line">for i=1:sample_num</span><br><span class="line">    %&#x7ED8;&#x5236;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x7528;o&#x8868;&#x793A;</span><br><span class="line">    plot(x(1,i),x(2,i),&apos;color&apos;,color_bar(y(i),:),&apos;marker&apos;,&apos;o&apos;);</span><br><span class="line">end</span><br><span class="line">hold off;</span><br></pre></td></tr></tbody></table></figure><p><br><br></p><h1 id="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"><a href="#&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;" class="headerlink" title="&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;"></a><font size="5" color="red">&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;</font></h1><p><img src="/images/MACHINE/agnes.png" alt="AGNES"></p><h1 id="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"><a href="#&#x6027;&#x80FD;&#x6BD4;&#x8F83;" class="headerlink" title="&#x6027;&#x80FD;&#x6BD4;&#x8F83;"></a><font size="5" color="red">&#x6027;&#x80FD;&#x6BD4;&#x8F83;</font></h1><ul><li><font size="4"><strong>&#x4F18;&#x70B9;&#xFF1A;</strong><ul><li>&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F;</li><li>&#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x5BB9;&#x6613;&#x7406;&#x89E3;</li><li>&#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x503C;&#x7684;&#x9009;&#x62E9;</li><li>&#x5BF9;&#x4E8E;&#x7C7B;&#x522B;&#x8F83;&#x591A;&#x7684;&#x8BAD;&#x7EC3;&#x96C6;&#x5206;&#x7C7B;&#x8F83;&#x5FEB;</li></ul></font></li><li><font size="4"><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong><ul><li>&#x5408;&#x5E76;&#x64CD;&#x4F5C;&#x4E0D;&#x80FD;&#x64A4;&#x9500;</li><li>&#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x77E5;&#x9053;&#x7C7B;&#x522B;&#x7684;&#x4E2A;&#x6570;</li><li>&#x5BF9;&#x4E8E;&#x7C7B;&#x522B;&#x8F83;&#x5C11;&#x7684;&#x8BAD;&#x7EC3;&#x96C6;&#x5206;&#x7C7B;&#x8F83;&#x6162;</li><li>&#x53EA;&#x9002;&#x5408;&#x5206;&#x5E03;&#x5448;&#x51F8;&#x578B;&#x6216;&#x8005;&#x7403;&#x5F62;&#x7684;&#x6570;&#x636E;&#x96C6;</li><li>&#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D;</li></ul></font></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;AGNES&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="无监督学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>数据集(Data Set)</title>
    <link href="https://USTCcoder.github.io/2019/04/25/clustering_Dataset/"/>
    <id>https://USTCcoder.github.io/2019/04/25/clustering_Dataset/</id>
    <published>2019-04-25T10:38:53.000Z</published>
    <updated>2019-08-07T15:52:18.752Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="5" color="gray"></font></strong></p><center><strong><font size="5" color="gray">&#x6570;&#x636E;&#x96C6;&#x8BF4;&#x660E;</font></strong></center><p></p><h1 id="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"><a href="#&#x539F;&#x7406;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x539F;&#x7406;&#x4ECB;&#x7ECD;"></a><font size="5" color="red">&#x539F;&#x7406;&#x4ECB;&#x7ECD;</font></h1><p>&#x2003;&#x2003;Data Set:&#x5BF9;&#x4E8E;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x9886;&#x57DF;&#x6765;&#x8BF4;&#xFF0C;&#x6570;&#x636E;&#x96C6;&#x7684;&#x9009;&#x62E9;&#x662F;<strong>&#x81F3;&#x5173;&#x91CD;&#x8981;</strong>&#x7684;&#xFF0C;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x96C6;&#x7684;&#x597D;&#x574F;&#x5F80;&#x5F80;&#x53EF;&#x4EE5;<strong>&#x76F4;&#x63A5;&#x51B3;&#x5B9A;&#x805A;&#x7C7B;&#x7ED3;&#x679C;</strong>&#xFF0C;&#x901A;&#x5E38;&#x4E00;&#x4E2A;&#x7B97;&#x6CD5;<strong>&#x5F88;&#x96BE;</strong>&#x9002;&#x7528;&#x4E8E;&#x6240;&#x6709;&#x7684;&#x6570;&#x636E;&#x96C6;&#x3002;&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x8BBE;&#x8BA1;&#x5404;&#x79CD;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x5E76;&#x4E14;<strong>&#x5206;&#x6790;&#x54EA;&#x4E00;&#x79CD;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x9002;&#x5408;&#x7528;&#x54EA;&#x4E00;&#x79CD;&#x7B97;&#x6CD5;</strong>&#xFF0C;&#x53EA;&#x6709;&#x8FD9;&#x6837;&#xFF0C;&#x5728;&#x4ECA;&#x540E;&#x7684;&#x4F7F;&#x7528;&#x4E2D;&#x624D;&#x80FD;&#x5F97;&#x5FC3;&#x5E94;&#x624B;&#x3002;<a id="more"></a>&#x8003;&#x8651;&#x5230;&#x6570;&#x636E;&#x96C6;&#x7684;&#x9002;&#x5E94;&#x6027;&#xFF0C;&#x8BBE;&#x8BA1;&#x4E86;&#x4EE5;&#x4E0B;&#x4E94;&#x79CD;&#x4E0D;&#x540C;&#x7684;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x5305;&#x62EC;<strong>&#x6C34;&#x5E73;&#x7AD6;&#x76F4;&#x578B;</strong>&#x6570;&#x636E;&#xFF0C;<strong>&#x659C;&#x7EBF;&#x578B;</strong>&#x6570;&#x636E;&#xFF0C;<strong>&#x5706;&#x5F62;</strong>&#x6570;&#x636E;&#xFF0C;<strong>&#x9AD8;&#x65AF;&#x578B;</strong>&#x6570;&#x636E;&#x548C;<strong>&#x6DF7;&#x5408;&#x578B;</strong>&#x6570;&#x636E;&#x3002;</p><h1 id="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"><a href="#&#x4EE3;&#x7801;&#x5B9E;&#x6218;" class="headerlink" title="&#x4EE3;&#x7801;&#x5B9E;&#x6218;"></a><font size="5" color="red">&#x4EE3;&#x7801;&#x5B9E;&#x6218;</font></h1><h2 id="line-data-m"><a href="#line-data-m" class="headerlink" title="line_data.m"></a>line_data.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">hold on;</span><br><span class="line">axis equal;</span><br><span class="line">%&#x7EBF;&#x7684;&#x957F;&#x5EA6; </span><br><span class="line">long=[10,10,10];</span><br><span class="line">%&#x7EBF;&#x7684;&#x5BBD;&#x5EA6;</span><br><span class="line">wide=[1,1,1];</span><br><span class="line">%&#x7EBF;&#x7684;&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;</span><br><span class="line">x_0=[0,0,0];</span><br><span class="line">y_0=[2,5,8];</span><br><span class="line">%&#x6BCF;&#x4E00;&#x6761;&#x7EBF;&#x4E0A;&#x5143;&#x7D20;&#x7684;&#x4E2A;&#x6570;</span><br><span class="line">num=[500,500,500];</span><br><span class="line">data_temp=zeros(2,sum(num));</span><br><span class="line">for i=1:length(long)</span><br><span class="line">    if i==1</span><br><span class="line">        data_temp(:,1:num(i))=[rand(1,num(i))*long(i)+x_0(i);rand(1,num(i))*wide(i)+y_0(i)];</span><br><span class="line">    else</span><br><span class="line">        data_temp(:,sum(num(1:i-1))+1:sum(num(1:i)))=[rand(1,sum(num(1:i))-sum(num(1:i-1)))*long(i)+x_0(i);rand(1,sum(num(1:i))-sum(num(1:i-1)))*wide(i)+y_0(i)];</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">%&#x968F;&#x673A;&#x6253;&#x4E71;&#x987A;&#x5E8F;</span><br><span class="line">randIndex = randperm(size(data_temp,2));</span><br><span class="line">data=data_temp(:,randIndex);</span><br><span class="line">plot(data(1,:),data(2,:),&apos;o&apos;);</span><br><span class="line">hold off;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/MACHINE/cluster_line.png" alt="line"></p><h2 id="slash-data-m"><a href="#slash-data-m" class="headerlink" title="slash_data.m"></a>slash_data.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">hold on;</span><br><span class="line">axis equal;</span><br><span class="line">%x&#x7684;&#x8D77;&#x59CB;&#x548C;&#x7EC8;&#x6B62;&#x4F4D;&#x7F6E;</span><br><span class="line">begend=[0,0,1,6;...</span><br><span class="line">    10,10,5,10];</span><br><span class="line">%&#x659C;&#x7387;&#x548C;&#x622A;&#x8DDD;</span><br><span class="line">kb=[1,1,-5,-5;...</span><br><span class="line">    -2,7,20,50];</span><br><span class="line">data_temp=[];</span><br><span class="line">for i=1:size(begend,2)</span><br><span class="line">    x=begend(1,i):0.1:begend(2,i);</span><br><span class="line">    data_temp=[data_temp,[x+rand(1,length(x))-0.5;kb(1,i)*x+kb(2,i)+rand(1,length(x))-0.5]];</span><br><span class="line">end</span><br><span class="line">%&#x968F;&#x673A;&#x6253;&#x4E71;&#x987A;&#x5E8F;</span><br><span class="line">randIndex = randperm(size(data_temp,2));</span><br><span class="line">data=data_temp(:,randIndex);</span><br><span class="line">plot(data(1,:),data(2,:),&apos;o&apos;);</span><br><span class="line">hold off;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/MACHINE/cluster_slash.png" alt="slash"></p><h2 id="gauss-data-m"><a href="#gauss-data-m" class="headerlink" title="gauss_data.m"></a>gauss_data.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">hold on;</span><br><span class="line">axis equal;</span><br><span class="line">%&#x7C07;&#x4E2A;&#x6570;</span><br><span class="line">num=3;</span><br><span class="line">%&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x4E2A;&#x6570;</span><br><span class="line">number=300;</span><br><span class="line">%u&#x548C;sigma</span><br><span class="line">data_temp=zeros(2,num*number);</span><br><span class="line">usigma_x=[0,2,6;</span><br><span class="line">    1,1,1];</span><br><span class="line">usigma_y=[0,6,2;</span><br><span class="line">    1,1,1];</span><br><span class="line">for i=1:num</span><br><span class="line">    data_temp(:,(i-1)*number+1:i*number)=[normrnd(usigma_x(1,i),usigma_x(2,i),1,number);normrnd(usigma_y(1,i),usigma_y(2,i),1,number)];</span><br><span class="line">end</span><br><span class="line">%&#x968F;&#x673A;&#x6253;&#x4E71;&#x987A;&#x5E8F;</span><br><span class="line">randIndex = randperm(size(data_temp,2));</span><br><span class="line">data=data_temp(:,randIndex);</span><br><span class="line">plot(data(1,:),data(2,:),&apos;o&apos;);</span><br><span class="line">hold off;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/MACHINE/cluster_gauss.png" alt="gauss"></p><h2 id="cicle-data-m"><a href="#cicle-data-m" class="headerlink" title="cicle_data.m"></a>cicle_data.m</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">hold on;</span><br><span class="line">axis equal;</span><br><span class="line">theta = 0:0.05:2*pi;</span><br><span class="line">x=cos(theta);</span><br><span class="line">y=sin(theta);</span><br><span class="line">%&#x692D;&#x5706;&#x65B9;&#x7A0B;(x+x0)^2/a^2+(y+y0)^2/b^2=1</span><br><span class="line">ab=[3,4,6,10;...</span><br><span class="line">    3,4,6,10];</span><br><span class="line">xy_0=[0,0,0,0;...</span><br><span class="line">    0,0,0,0];</span><br><span class="line">data_temp=zeros(2,length(theta)*size(ab,2));</span><br><span class="line">for i=1:size(ab,2)</span><br><span class="line">    data_temp(:,(i-1)*length(theta)+1:i*length(theta))=([x;y].*repmat(ab(:,i),1,length(theta)))+repmat(xy_0(:,i),1,length(theta));</span><br><span class="line">end</span><br><span class="line">%&#x968F;&#x673A;&#x6253;&#x4E71;&#x987A;&#x5E8F;</span><br><span class="line">randIndex = randperm(size(data_temp,2));</span><br><span class="line">data=data_temp(:,randIndex);</span><br><span class="line">plot(data(1,:),data(2,:),&apos;o&apos;);</span><br><span class="line">hold off;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/MACHINE/cluster_cicle.png" alt="cicle"></p><h2 id="mixture-data-m"><a href="#mixture-data-m" class="headerlink" title="mixture_data.m"></a>mixture_data.m</h2><p><font size="4">&#x7531;&#x4E0A;&#x9762;&#x7684;&#x56DB;&#x79CD;&#x6570;&#x636E;&#x96C6;&#x7EC4;&#x5408;&#x4E4B;&#x540E;&#x53EF;&#x4EE5;&#x5F62;&#x6210;&#x6DF7;&#x5408;&#x6570;&#x636E;&#x96C6;&#x3002;</font><br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">hold on;</span><br><span class="line">axis equal;</span><br><span class="line">%x1&#x7684;&#x8D77;&#x59CB;&#x548C;&#x7EC8;&#x6B62;&#x4F4D;&#x7F6E;</span><br><span class="line">x_1=2:0.1:6;</span><br><span class="line">%x1&#x7684;&#x659C;&#x7387;&#x548C;&#x622A;&#x8DDD;</span><br><span class="line">kb_1=[1;4];</span><br><span class="line">data_1=[x_1+rand(1,length(x_1))-0.5;kb_1(1)*x_1+kb_1(2)+rand(1,length(x_1))-0.5];</span><br><span class="line">%x2&#x7684;&#x8D77;&#x59CB;&#x548C;&#x7EC8;&#x6B62;&#x4F4D;&#x7F6E;</span><br><span class="line">x_2=1:0.05:7;</span><br><span class="line">%x2&#x7684;&#x659C;&#x7387;&#x548C;&#x622A;&#x8DDD;</span><br><span class="line">kb_2=[-1;12];</span><br><span class="line">data_2=[x_2+rand(1,length(x_2))-0.5;kb_2(1)*x_2+kb_2(2)+rand(1,length(x_2))-0.5];</span><br><span class="line">%&#x4EA7;&#x751F;&#x9AD8;&#x65AF;&#x6570;&#x636E;&#x96C6;</span><br><span class="line">data_3=normrnd(12,1.5,2,200);</span><br><span class="line">%&#x7EBF;&#x7684;&#x957F;&#x5EA6; </span><br><span class="line">long=[5,1];</span><br><span class="line">%&#x7EBF;&#x7684;&#x5BBD;&#x5EA6;</span><br><span class="line">wide=[1,5];</span><br><span class="line">%&#x7EBF;&#x7684;&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;</span><br><span class="line">x_0=[6,11];</span><br><span class="line">y_0=[1,1];</span><br><span class="line">%&#x6BCF;&#x4E00;&#x6761;&#x7EBF;&#x4E0A;&#x5143;&#x7D20;&#x7684;&#x4E2A;&#x6570;</span><br><span class="line">num=[100,100];</span><br><span class="line">data_4=zeros(2,sum(num));</span><br><span class="line">for i=1:length(long)</span><br><span class="line">    if i==1</span><br><span class="line">        data_4(:,1:num(i))=[rand(1,num(i))*long(i)+x_0(i);rand(1,num(i))*wide(i)+y_0(i)];</span><br><span class="line">    else</span><br><span class="line">        data_4(:,sum(num(1:i-1))+1:sum(num(1:i)))=[rand(1,sum(num(1:i))-sum(num(1:i-1)))*long(i)+x_0(i);rand(1,sum(num(1:i))-sum(num(1:i-1)))*wide(i)+y_0(i)];</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">%&#x4EA7;&#x751F;&#x566A;&#x58F0;&#x70B9;</span><br><span class="line">data_5=rand(2,38)*16;</span><br><span class="line">data_temp=[data_1,data_2,data_3,data_4,data_5];</span><br><span class="line">%&#x968F;&#x673A;&#x6253;&#x4E71;&#x987A;&#x5E8F;</span><br><span class="line">randIndex = randperm(size(data_temp,2));</span><br><span class="line">data=data_temp(:,randIndex);</span><br><span class="line">plot(data(1,:),data(2,:),&apos;o&apos;);</span><br><span class="line">hold off;</span><br></pre></td></tr></tbody></table></figure><p></p><p><img src="/images/MACHINE/cluster_mixture.png" alt="mixture"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;Data Set&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="无监督学习" scheme="https://USTCcoder.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Turing Reward in 2018</title>
    <link href="https://USTCcoder.github.io/2018/03/22/TuringReward-2018/"/>
    <id>https://USTCcoder.github.io/2018/03/22/TuringReward-2018/</id>
    <published>2018-03-22T11:29:40.000Z</published>
    <updated>2020-05-08T10:29:46.100Z</updated>
    
    <content type="html"><![CDATA[<p>&#x2003;&#x2003;2019 &#x5E74; 3 &#x6708; 27 &#x65E5;&#xFF0C;ACM &#x5BA3;&#x5E03;&#xFF0C;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x4E09;&#x4F4D;&#x5927;&#x725B; Yoshua Bengio&#x3001;Yann LeCun&#x3001;Geoffrey Hinton &#x56E0;&#x201C;&#x5728;&#x6982;&#x5FF5;&#x548C;&#x5DE5;&#x7A0B;&#x65B9;&#x9762;&#x4F7F;&#x6DF1;&#x5EA6;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x6210;&#x4E3A;&#x8BA1;&#x7B97;&#x7684;&#x5173;&#x952E;&#x7EC4;&#x6210;&#x90E8;&#x5206;&#x7684;&#x7A81;&#x7834;&#x201D;&#x83B7;&#x5F97;&#x4E86; 2018 &#x5E74;&#x7684;&#x56FE;&#x7075;&#x5956;&#x3002;&#x8FD1;&#x5E74;&#x6765;&#xFF0C;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x65B9;&#x6CD5;&#x4E00;&#x76F4;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x3001;&#x8BED;&#x97F3;&#x8BC6;&#x522B;&#x3001;&#x81EA;&#x7136;&#x8BED;&#x8A00;&#x5904;&#x7406;&#x548C;&#x673A;&#x5668;&#x4EBA;&#x6280;&#x672F;&#x4EE5;&#x53CA;&#x5176;&#x4ED6;&#x5E94;&#x7528;&#x4E2D;&#x60CA;&#x4EBA;&#x7A81;&#x7834;&#x7684;&#x539F;&#x56E0;&#x3002;<a id="more"></a>&#x5728; ACM &#x7684;&#x516C;&#x544A;&#x4E2D;&#x662F;&#x8FD9;&#x6837;&#x5199;&#x9053;&#x7684;&#xFF1A;&#x867D;&#x7136;&#x5728; 20 &#x4E16;&#x7EAA; 80 &#x5E74;&#x4EE3;&#x5F15;&#x5165;&#x4E86;&#x4EBA;&#x5DE5;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4F5C;&#x4E3A;&#x5E2E;&#x52A9;&#x8BA1;&#x7B97;&#x673A;&#x8BC6;&#x522B;&#x6A21;&#x5F0F;&#x548C;&#x6A21;&#x62DF;&#x4EBA;&#x7C7B;&#x667A;&#x80FD;&#x7684;&#x5DE5;&#x5177;&#xFF0C;&#x4F46;&#x5230;&#x4E86; 21 &#x4E16;&#x7EAA;&#x521D;&#xFF0C;LeCun&#x3001;Hinton &#x548C; Bengio &#x4ECD;&#x575A;&#x6301;&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x7684;&#x5C0F;&#x56E2;&#x4F53;&#x3002;&#x867D;&#x7136;&#x4ED6;&#x4EEC;&#x91CD;&#x65B0;&#x70B9;&#x71C3;&#x4EBA;&#x5DE5;&#x667A;&#x80FD;&#x793E;&#x533A;&#x5BF9;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x5174;&#x8DA3;&#x7684;&#x52AA;&#x529B;&#x5728;&#x6700;&#x521D;&#x66FE;&#x906D;&#x5230;&#x6000;&#x7591;&#xFF0C;&#x4F46;&#x5176;&#x60F3;&#x6CD5;&#x5F15;&#x53D1;&#x4E86;&#x91CD;&#x5927;&#x7684;&#x6280;&#x672F;&#x8FDB;&#x6B65;&#xFF0C;&#x5176;&#x65B9;&#x6CD5;&#x73B0;&#x5728;&#x5DF2;&#x6210;&#x4E3A;&#x8BE5;&#x9886;&#x57DF;&#x7684;&#x4E3B;&#x5BFC;&#x8303;&#x4F8B;&#x3002;&#x6B64;&#x524D;&#x4ED6;&#x4EEC;&#x5728;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x9886;&#x57DF;&#x7684;&#x5730;&#x4F4D;&#x65E9;&#x5DF2;&#x662F;&#x65E0;&#x4EBA;&#x4E0D;&#x77E5;&#xFF0C;&#x5C3D;&#x7BA1;&#x4E09;&#x4EBA;&#x8D70;&#x5411;&#x4E86;&#x4E0D;&#x540C;&#x7684;&#x65B9;&#x5411;&#xFF0C;&#x4F46;&#x4ED6;&#x4EEC;&#x4ECD;&#x7136;&#x662F;&#x591A;&#x5E74;&#x7684;&#x5408;&#x4F5C;&#x4F19;&#x4F34;&#x548C;&#x631A;&#x53CB;&#x3002;&#x8BA9;&#x6211;&#x4EEC;&#x5148;&#x6765;&#x770B;&#x770B;&#x4E09;&#x4F4D;&#x6240;&#x4F5C;&#x51FA;&#x7684;&#x4E3B;&#x8981;&#x8D21;&#x732E;&#xFF1A;<br><strong>&#x6770;&#x5F17;&#x91CC;&#xB7;&#x8F9B;&#x987F;(Geoffery Hinton)</strong><br><img src="/images/TURING/hinton.jpeg" alt="Geoffery Hinton"><br>&#x2003;&#x2003;<strong>&#x53CD;&#x5411;&#x4F20;&#x64AD;(Back Propagation)</strong>&#xFF1A;&#x5728; 1986 &#x5E74;&#x4E0E; David Rumelhart &#x548C; Ronald Williams &#x5171;&#x540C;&#x64B0;&#x5199;&#x7684; &#x201C;Learning Internal Representations by Error Propagation&#x201D; &#x4E00;&#x6587;&#x4E2D;&#xFF0C;Hinton &#x8BC1;&#x660E;&#x4E86;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#x7B97;&#x6CD5;&#x5141;&#x8BB8;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x53D1;&#x73B0;&#x81EA;&#x5DF1;&#x7684;&#x6570;&#x636E;&#x5185;&#x90E8;&#x8868;&#x793A;&#xFF0C;&#x8FD9;&#x4F7F;&#x5F97;&#x4F7F;&#x7528;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x6210;&#x4E3A;&#x53EF;&#x80FD;&#x7F51;&#x7EDC;&#x89E3;&#x51B3;&#x4EE5;&#x524D;&#x88AB;&#x8BA4;&#x4E3A;&#x8D85;&#x51FA;&#x5176;&#x8303;&#x56F4;&#x7684;&#x95EE;&#x9898;&#x3002;&#x5982;&#x4ECA;&#xFF0C;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#x7B97;&#x6CD5;&#x662F;&#x5927;&#x591A;&#x6570;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x6807;&#x51C6;&#x3002; </p><p>&#x2003;&#x2003;<strong>&#x73BB;&#x5C14;&#x5179;&#x66FC;&#x673A;(Boltzmann Machines)</strong>&#xFF1A;1983 &#x5E74;&#xFF0C;Hinton &#x4E0E; Terrence Sejnowski &#x4E00;&#x8D77;&#xFF0C;&#x53D1;&#x660E;&#x4E86;&#x73BB;&#x5C14;&#x5179;&#x66FC;&#x673A;&#xFF0C;&#x8FD9;&#x662F;&#x7B2C;&#x4E00;&#x4E2A;&#x80FD;&#x591F;&#x5B66;&#x4E60;&#x4E0D;&#x5C5E;&#x4E8E;&#x8F93;&#x5165;&#x6216;&#x8F93;&#x51FA;&#x7684;&#x795E;&#x7ECF;&#x5143;&#x5185;&#x90E8;&#x8868;&#x793A;&#x7684;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4E4B;&#x4E00;&#x3002; </p><p>&#x2003;&#x2003;<strong>&#x5BF9;&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x6539;&#x8FDB;(Improvement of Convolutional Neural Network)</strong>&#xFF1A;2012 &#x5E74;&#xFF0C;Hinton &#x548C;&#x4ED6;&#x7684;&#x5B66;&#x751F; Alex Krizhevsky &#x4EE5;&#x53CA; Ilya Sutskever &#x901A;&#x8FC7; Rectified Linear Neurons &#x548C; Dropout Regularization &#x6539;&#x8FDB;&#x4E86;&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;&#x5E76;&#x5728;&#x8457;&#x540D;&#x7684; ImageNet &#x8BC4;&#x6D4B;&#x4E2D;&#x5C06;&#x5BF9;&#x8C61;&#x8BC6;&#x522B;&#x7684;&#x9519;&#x8BEF;&#x7387;&#x51CF;&#x534A;&#xFF0C;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x9886;&#x57DF;&#x6380;&#x8D77;&#x4E00;&#x573A;&#x9769;&#x547D;&#x3002; </p><p><strong>&#x7EA6;&#x4E66;&#x4E9A;&#xB7;&#x672C;&#x5409;&#x5965;(Yoshua Bengio)</strong><br><img src="/images/TURING/bengio.jpeg" alt="Yoshua Bengio"><br>&#x2003;&#x2003;<strong>&#x5E8F;&#x5217;&#x7684;&#x6982;&#x7387;&#x6A21;&#x578B;(Probabilistic models of sequences)</strong>&#xFF1A;&#x5728; 20 &#x4E16;&#x7EAA; 90 &#x5E74;&#x4EE3;&#xFF0C;Bengio &#x5C06;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4E0E;&#x5E8F;&#x5217;&#x7684;&#x6982;&#x7387;&#x6A21;&#x578B;&#x76F8;&#x7ED3;&#x5408;&#xFF0C;&#x4F8B;&#x5982;&#x9690;&#x9A6C;&#x5C14;&#x53EF;&#x592B;&#x6A21;&#x578B;&#x3002;&#x8FD9;&#x4E9B;&#x60F3;&#x6CD5;&#x88AB;&#x7EB3;&#x5165; AT&#xFF06;T / NCR &#x7528;&#x4E8E;&#x9605;&#x8BFB;&#x624B;&#x5199;&#x652F;&#x7968;&#x4E2D;&#xFF0C;&#x88AB;&#x8BA4;&#x4E3A;&#x662F; 20 &#x4E16;&#x7EAA; 90 &#x5E74;&#x4EE3;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7814;&#x7A76;&#x7684;&#x5DC5;&#x5CF0;&#x4E4B;&#x4F5C;&#x3002;&#x73B0;&#x4EE3;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x8BED;&#x97F3;&#x8BC6;&#x522B;&#x7CFB;&#x7EDF;&#x4E5F;&#x662F;&#x8FD9;&#x4E9B;&#x6982;&#x5FF5;&#x7684;&#x6269;&#x5C55;&#x3002; </p><p>&#x2003;&#x2003;<strong>&#x9AD8;&#x7EF4;&#x8BCD;&#x6C47;&#x5D4C;&#x5165;&#x548C;&#x5173;&#x6CE8;(High-dimensional word embeddings and attention)</strong>&#xFF1A;2000 &#x5E74;&#xFF0C;Bengio &#x64B0;&#x5199;&#x4E86;&#x5177;&#x6709;&#x91CC;&#x7A0B;&#x7891;&#x610F;&#x4E49;&#x7684;&#x8BBA;&#x6587;&#x201C;A Neural Probabilistic Language Model&#x201D;&#xFF0C;&#x5B83;&#x5F15;&#x5165;&#x4E86;&#x9AD8;&#x7EF4;&#x8BCD;&#x5411;&#x91CF;&#x4F5C;&#x4E3A;&#x8BCD;&#x4E49;&#x7684;&#x8868;&#x793A;&#x3002;Bengio &#x7684;&#x89C1;&#x89E3;&#x5BF9;&#x81EA;&#x7136;&#x8BED;&#x8A00;&#x5904;&#x7406;&#x4EFB;&#x52A1;&#x4EA7;&#x751F;&#x4E86;&#x5DE8;&#x5927;&#x800C;&#x6301;&#x4E45;&#x7684;&#x5F71;&#x54CD;&#xFF0C;&#x5305;&#x62EC;&#x8BED;&#x8A00;&#x7FFB;&#x8BD1;&#x3001;&#x95EE;&#x7B54;&#x548C;&#x89C6;&#x89C9;&#x95EE;&#x7B54;&#x3002;&#x4ED6;&#x7684;&#x56E2;&#x961F;&#x8FD8;&#x5F15;&#x5165;&#x4E86;&#x6CE8;&#x610F;&#x529B;&#x673A;&#x5236;&#xFF0C;&#x8FD9;&#x79CD;&#x673A;&#x5236;&#x4FC3;&#x4F7F;&#x4E86;&#x673A;&#x5668;&#x7FFB;&#x8BD1;&#x7684;&#x7A81;&#x7834;&#xFF0C;&#x5E76;&#x6784;&#x6210;&#x4E86;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7684;&#x5E8F;&#x5217;&#x5904;&#x7406;&#x7684;&#x5173;&#x952E;&#x7EC4;&#x6210;&#x90E8;&#x5206;&#x3002; </p><p>&#x2003;&#x2003;<strong>&#x751F;&#x6210;&#x5F0F;&#x5BF9;&#x6297;&#x7F51;&#x7EDC;(Generative Adversarial Networks)</strong>&#xFF1A;&#x81EA; 2010 &#x5E74;&#x4EE5;&#x6765;&#xFF0C;Bengio &#x5173;&#x4E8E;&#x751F;&#x6210;&#x6027;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7684;&#x8BBA;&#x6587;&#xFF0C;&#x7279;&#x522B;&#x662F;&#x4E0E; Ian Goodfellow &#x5171;&#x540C;&#x5F00;&#x53D1;&#x7684;&#x751F;&#x6210;&#x6027;&#x5BF9;&#x6297;&#x7F51;&#x7EDC;&#xFF08;GAN&#xFF09;&#xFF0C;&#x5F15;&#x53D1;&#x4E86;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x548C;&#x8BA1;&#x7B97;&#x673A;&#x56FE;&#x5F62;&#x5B66;&#x7684;&#x9769;&#x547D;&#x3002; </p><p><strong>&#x6768;&#x7ACB;&#x6606;(Yann LeCun)</strong><br><img src="/images/TURING/lecun.jpeg" alt="Yann LeCun"><br>&#x2003;&#x2003;<strong>&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;(Convolutional Neural Networks)</strong>&#xFF1A;&#x5728; 20 &#x4E16;&#x7EAA; 80 &#x5E74;&#x4EE3;&#xFF0C;LeCun &#x5F00;&#x53D1;&#x4E86;&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;&#x73B0;&#x5DF2;&#x6210;&#x4E3A;&#x8BE5;&#x9886;&#x57DF;&#x7684;&#x57FA;&#x672C;&#x7406;&#x8BBA;&#x57FA;&#x7840;&#x3002;&#x9664;&#x4E86;&#x5176;&#x4ED6;&#x4F18;&#x70B9;&#x4E4B;&#x5916;&#xFF0C;&#x5B83;&#x8FD8;&#x5177;&#x6709;&#x4F7F;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x66F4;&#x6709;&#x6548;&#x7684;&#x5FC5;&#x8981;&#x6027;&#x3002;&#x5728; 20 &#x4E16;&#x7EAA; 80 &#x5E74;&#x4EE3;&#x540E;&#x671F;&#xFF0C;&#x591A;&#x4F26;&#x591A;&#x5927;&#x5B66;&#x548C;&#x8D1D;&#x5C14;&#x5B9E;&#x9A8C;&#x5BA4;&#x5DE5;&#x4F5C;&#x671F;&#x95F4;&#xFF0C;LeCun &#x662F;&#x7B2C;&#x4E00;&#x4E2A;&#x5728;&#x624B;&#x5199;&#x6570;&#x5B57;&#x56FE;&#x50CF;&#x4E0A;&#x8BAD;&#x7EC3;&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7CFB;&#x7EDF;&#x7684;&#x4EBA;&#x3002;&#x5982;&#x4ECA;&#xFF0C;&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x4EE5;&#x53CA;&#x8BED;&#x97F3;&#x8BC6;&#x522B;&#x3001;&#x8BED;&#x97F3;&#x5408;&#x6210;&#x3001;&#x56FE;&#x50CF;&#x5408;&#x6210;&#x548C;&#x81EA;&#x7136;&#x8BED;&#x8A00;&#x5904;&#x7406;&#x7684;&#x884C;&#x4E1A;&#x6807;&#x51C6;&#x3002;&#x5B83;&#x4EEC;&#x7528;&#x4E8E;&#x5404;&#x79CD;&#x5E94;&#x7528;&#xFF0C;&#x5305;&#x62EC;&#x81EA;&#x52A8;&#x9A7E;&#x9A76;&#x3001;&#x533B;&#x5B66;&#x56FE;&#x50CF;&#x5206;&#x6790;&#x3001;&#x8BED;&#x97F3;&#x6FC0;&#x6D3B;&#x52A9;&#x624B;&#x548C;&#x4FE1;&#x606F;&#x8FC7;&#x6EE4;&#x3002; </p><p>&#x2003;&#x2003;<strong>&#x6539;&#x8FDB;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#x7B97;&#x6CD5;(Improved Back Propagation Algorithms)</strong>&#xFF1A;LeCun &#x63D0;&#x51FA;&#x4E86;&#x4E00;&#x4E2A;&#x65E9;&#x671F;&#x7684;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#x7B97;&#x6CD5; backprop&#xFF0C;&#x5E76;&#x6839;&#x636E;&#x53D8;&#x5206;&#x539F;&#x7406;&#x5BF9;&#x5176;&#x8FDB;&#x884C;&#x4E86;&#x7B80;&#x6D01;&#x7684;&#x63A8;&#x5BFC;&#x3002;&#x4ED6;&#x7684;&#x5DE5;&#x4F5C;&#x8BA9;&#x52A0;&#x5FEB;&#x4E86;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#x7B97;&#xFF0C;&#x5305;&#x62EC;&#x63CF;&#x8FF0;&#x4E24;&#x79CD;&#x52A0;&#x901F;&#x5B66;&#x4E60;&#x65F6;&#x95F4;&#x7684;&#x7B80;&#x5355;&#x65B9;&#x6CD5;&#x3002; </p><p>&#x2003;&#x2003;<strong>&#x62D3;&#x5BBD;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8303;&#x56F4;(Widening the Range of Neural Networks)</strong>&#xFF1A;LeCun &#x8FD8;&#x5C06;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4F5C;&#x4E3A;&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x66F4;&#x4E3A;&#x5E7F;&#x6CDB;&#x4EFB;&#x52A1;&#x7684;&#x8BA1;&#x7B97;&#x6A21;&#x578B;&#xFF0C;&#x5176;&#x65E9;&#x671F;&#x5DE5;&#x4F5C;&#x73B0;&#x5DF2;&#x6210;&#x4E3A; AI &#x7684;&#x57FA;&#x7840;&#x6982;&#x5FF5;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x5728;&#x56FE;&#x50CF;&#x8BC6;&#x522B;&#x9886;&#x57DF;&#xFF0C;&#x4ED6;&#x7814;&#x7A76;&#x4E86;&#x5982;&#x4F55;&#x5728;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4E2D;&#x5B66;&#x4E60;&#x5206;&#x5C42;&#x7279;&#x5F81;&#x8868;&#x793A;&#xFF0C;&#x8FD9;&#x4E2A;&#x7406;&#x5FF5;&#x73B0;&#x5728;&#x901A;&#x5E38;&#x7528;&#x4E8E;&#x8BB8;&#x591A;&#x8BC6;&#x522B;&#x4EFB;&#x52A1;&#x4E2D;&#x3002;&#x4E0E; L&#xE9;onBottou &#x4E00;&#x8D77;&#xFF0C;&#x4ED6;&#x8FD8;&#x63D0;&#x51FA;&#x4E86;&#x5B66;&#x4E60;&#x7CFB;&#x7EDF;&#x53EF;&#x4EE5;&#x6784;&#x5EFA;&#x4E3A;&#x590D;&#x6742;&#x7684;&#x6A21;&#x5757;&#x7F51;&#x7EDC;&#xFF0C;&#x5176;&#x4E2D;&#x901A;&#x8FC7;&#x81EA;&#x52A8;&#x533A;&#x5206;&#x6765;&#x6267;&#x884C;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#xFF0C;&#x76EE;&#x524D;&#x5728;&#x6BCF;&#x4E2A;&#x73B0;&#x4EE3;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x8F6F;&#x4EF6;&#x4E2D;&#x5F97;&#x5230;&#x4F7F;&#x7528;&#x3002;&#x4ED6;&#x4EEC;&#x8FD8;&#x63D0;&#x51FA;&#x4E86;&#x53EF;&#x4EE5;&#x64CD;&#x4F5C;&#x7ED3;&#x6784;&#x5316;&#x6570;&#x636E;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x67B6;&#x6784;&#xFF0C;&#x5982;&#x56FE;&#x5F62;&#x3002; &#x5728;&#x300A;&#x8FDE;&#x7EBF;&#x300B;&#x6742;&#x5FD7;&#x7684;&#x62A5;&#x9053;&#x4E2D;&#xFF0C;Geoffery Hinton &#x88AB;&#x95EE;&#x53CA;&#x83B7;&#x5F97;&#x56FE;&#x9886;&#x5956;&#x7684;&#x610F;&#x4E49;&#x65F6;&#xFF0C;&#x4ED6;&#x8868;&#x793A;&#x5341;&#x5206;&#x60CA;&#x8BB6;&#xFF0C;&#x201C;&#x6211;&#x731C;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x73B0;&#x5728;&#x662F;&#x53D7;&#x4EBA;&#x5C0A;&#x656C;&#x7684;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x201D;&#xFF0C;&#x56E0;&#x4E3A;&#x5728;&#x4ED6;&#x770B;&#x6765;&#x56FE;&#x7075;&#x5C06;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x4E2D;&#x6700;&#x503C;&#x5F97;&#x5C0A;&#x656C;&#x7684;&#x5B66;&#x79D1;&#x4E86;&#x3002; &#x636E;&#x4E86;&#x89E3;&#xFF0C;&#x56FE;&#x7075;&#x5956;&#x7531; ACM &#x4E8E; 1966 &#x5E74;&#x8BBE;&#x7F6E;&#xFF0C;&#x6BCF;&#x5E74;&#x9881;&#x53D1;&#x4E00;&#x6B21;&#xFF0C;&#x8BBE;&#x7ACB;&#x76EE;&#x7684;&#x4E4B;&#x4E00;&#x662F;&#x7EAA;&#x5FF5;&#x8457;&#x540D;&#x7684;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x5148;&#x9A71;&#x827E;&#x4F26; &#x2022; &#x56FE;&#x7075;&#xFF08;Alan Turing&#xFF09;&#xFF0C;&#x4ED6;&#x5728; 20 &#x4E16;&#x7EAA; 30 &#x5E74;&#x4EE3;&#x3001;40 &#x5E74;&#x4EE3;&#x548C; 50 &#x5E74;&#x4EE3;&#x5960;&#x5B9A;&#x4E86;&#x8BA1;&#x7B97;&#x548C;&#x4EBA;&#x5DE5;&#x667A;&#x80FD;&#x7684;&#x65E9;&#x671F;&#x57FA;&#x7840;&#x3002; &#x56FE;&#x7075;&#x5956;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x9886;&#x57DF;&#x7684;&#x6700;&#x9AD8;&#x5956;&#x3002;&#x83B7;&#x5956;&#x8005;&#x5FC5;&#x987B;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x9886;&#x57DF;&#x5177;&#x6709;&#x6301;&#x4E45;&#x91CD;&#x5927;&#x7684;&#x5148;&#x8FDB;&#x6027;&#x6280;&#x672F;&#x8D21;&#x732E;&#x3002;&#x4EBA;&#x5DE5;&#x667A;&#x80FD;&#x9886;&#x57DF;&#x7684;&#x5148;&#x9A71;&#x9A6C;&#x6587; &#x2022; &#x660E;&#x65AF;&#x57FA;&#xFF08;Marvin Lee Minsky&#xFF09;&#x3001;&#x7EA6;&#x7FF0; &#x2022; &#x9EA6;&#x5361;&#x9521;&#xFF08;John McCarthy&#xFF09;&#x3001;&#x827E;&#x4F26; &#x2022; &#x7EBD;&#x5384;&#x5C14;&#xFF08;Allen Newell&#xFF09;&#x548C;&#x53F8;&#x9A6C;&#x8D3A;&#xFF08;Herbert Alexander Simon&#xFF09;&#x7B49;&#x4EBA;&#x90FD;&#x66FE;&#x7ECF;&#x83B7;&#x5956;&#x3002;&#x534E;&#x4EBA;&#x79D1;&#x5B66;&#x5BB6;&#x59DA;&#x671F;&#x667A; 2000 &#x5E74;&#x56E0;&#x4E3A;&#x4F2A;&#x968F;&#x673A;&#x6570;&#x751F;&#x6210;&#x7B49;&#x8BA1;&#x7B97;&#x9886;&#x57DF;&#x7684;&#x91CD;&#x8981;&#x8D21;&#x732E;&#x83B7;&#x5956;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;DEEP LEARNING&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="Computer Science" scheme="https://USTCcoder.github.io/categories/Computer-Science/"/>
    
      <category term="Turing Reward" scheme="https://USTCcoder.github.io/categories/Computer-Science/Turing-Reward/"/>
    
    
  </entry>
  
  <entry>
    <title>Turing Reward in 2017</title>
    <link href="https://USTCcoder.github.io/2018/03/22/TuringReward-2017/"/>
    <id>https://USTCcoder.github.io/2018/03/22/TuringReward-2017/</id>
    <published>2018-03-22T11:29:40.000Z</published>
    <updated>2020-05-08T10:28:18.037Z</updated>
    
    <content type="html"><![CDATA[<p>&#x2003;&#x2003;2018 &#x5E74; 3 &#x6708; 21 &#x65E5;&#xFF0C;&#x7F8E;&#x56FD;&#x8BA1;&#x7B97;&#x673A;&#x534F;&#x4F1A;&#xFF08;ACM&#xFF09;&#x5C06;2017&#x5E74;&#x56FE;&#x7075;&#x5956;&#x6388;&#x4E88;&#x65AF;&#x5766;&#x798F;&#x5927;&#x5B66;&#x524D;&#x6821;&#x957F;&#x7EA6;&#x7FF0;&#xB7;&#x8F69;&#x5C3C;&#x8BD7;&#xFF08;John L. Hennessy&#xFF09;&#x548C;&#x52A0;&#x5DDE;&#x5927;&#x5B66;&#x4F2F;&#x514B;&#x5229;&#x5206;&#x6821;&#x9000;&#x4F11;&#x6559;&#x6388;&#x5927;&#x536B;&#xB7;&#x5E15;&#x7279;&#x68EE;&#xFF08;David A. Patterson&#xFF09;&#xFF0C;&#x4EE5;&#x8868;&#x5F70;&#x4ED6;&#x4EEC;&#x5F00;&#x521B;&#x4E86;&#x4E00;&#x79CD;&#x7CFB;&#x7EDF;&#x7684;&#x3001;&#x5B9A;&#x91CF;&#x7684;&#x65B9;&#x6CD5;&#x6765;&#x8BBE;&#x8BA1;&#x548C;&#x8BC4;&#x4EF7;&#x8BA1;&#x7B97;&#x673A;&#x4F53;&#x7CFB;&#x7ED3;&#x6784;&#xFF0C;&#x5E76;&#x5BF9;RISC&#x5FAE;&#x5904;&#x7406;&#x5668;&#x884C;&#x4E1A;&#x4EA7;&#x751F;&#x4E86;&#x6301;&#x4E45;&#x7684;&#x5F71;&#x54CD;&#x3002;</p><a id="more"></a><p><img src="/images/TURING/hennessyandpatterson.jpeg" alt="Group photo"></p><p>&#x2003;&#x2003;&#x964D;&#x4F4E;&#x5904;&#x7406;&#x5668;&#x590D;&#x6742;&#x6027;&#x7684;&#x6982;&#x5FF5;&#x67B6;&#x6784;&#x7814;&#x7A76;&#x53EF;&#x4EE5;&#x8FFD;&#x6EAF;&#x5230;1960&#x5E74;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x7531;IBM&#x8D44;&#x52A9;&#x7684;801&#x9879;&#x76EE;&#xFF0C;&#x7531;&#x8F69;&#x5C3C;&#x8BD7;&#x548C;&#x5E15;&#x7279;&#x68EE;&#x8D1F;&#x8D23;&#x3002;&#x65AF;&#x5766;&#x798F;&#x5927;&#x5B66;&#x548C;&#x52A0;&#x5DDE;&#x5927;&#x5B66;&#x4F2F;&#x514B;&#x5229;&#x5206;&#x6821;&#x90FD;&#x5728;&#x5927;&#x529B;&#x7814;&#x7A76;RISC&#x67B6;&#x6784;&#x7684;&#x53EF;&#x884C;&#x6027;&#x65B9;&#x6CD5;,&#x63A8;&#x5E7F;&#x5176;&#x6982;&#x5FF5;,&#x5E76;&#x4ECB;&#x7ECD;&#x7ED9;&#x5B66;&#x672F;&#x754C;&#x548C;&#x4EA7;&#x4E1A;&#x754C;&#x3002;RISC&#x65B9;&#x6CD5;&#x4E0D;&#x540C;&#x4E8E;&#x5F53;&#x65F6;&#x6D41;&#x884C;&#x7684;&#x590D;&#x6742;&#x6307;&#x4EE4;&#x96C6;&#x8BA1;&#x7B97;&#x673A;(CISC)&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x53EA;&#x9700;&#x8981;&#x4E00;&#x7EC4;&#x7B80;&#x5355;&#x548C;&#x901A;&#x7528;&#x7684;&#x6307;&#x4EE4;(&#x8BA1;&#x7B97;&#x673A;&#x5FC5;&#x987B;&#x6267;&#x884C;&#x7684;&#x529F;&#x80FD;)&#xFF0C;&#x9700;&#x8981;&#x7684;&#x6676;&#x4F53;&#x7BA1;&#x6570;&#x91CF;&#x6BD4;&#x590D;&#x6742;&#x6307;&#x4EE4;&#x96C6;&#x5C11;&#xFF0C;&#x5E76;&#x4E14;&#x51CF;&#x5C11;&#x4E86;&#x8BA1;&#x7B97;&#x673A;&#x5FC5;&#x987B;&#x6267;&#x884C;&#x7684;&#x5DE5;&#x4F5C;&#x91CF;&#x3002;</p><p>&#x2003;&#x2003;&#x5E15;&#x7279;&#x68EE;&#x7684;&#x4F2F;&#x514B;&#x5229;&#x56E2;&#x961F;&#x521B;&#x9020;&#x4E86;RISC&#x8FD9;&#x4E2A;&#x8BCD;&#xFF0C;&#x5E76;&#x5728;1982&#x5E74;&#x5EFA;&#x7ACB;&#x5E76;&#x6F14;&#x793A;&#x4E86;&#x4ED6;&#x4EEC;&#x7684;RISC-1&#x578B;&#x5904;&#x7406;&#x5668;&#x3002;RISC-1&#x578B;&#x5904;&#x7406;&#x5668;&#x91C7;&#x7528;&#x4E86;44000&#x4E2A;&#x6676;&#x4F53;&#x7BA1;&#x4E2D;&#xFF0C;&#x5176;&#x6027;&#x80FD;&#x8981;&#x4F18;&#x4E8E;&#x4F20;&#x7EDF;&#x7684;CISC&#x8BBE;&#x8BA1;&#xFF0C;&#x540E;&#x8005;&#x7684;&#x5B9E;&#x73B0;&#x5F80;&#x5F80;&#x9700;&#x8981;100,000&#x4E2A;&#x6676;&#x4F53;&#x7BA1;&#x3002;&#x8F69;&#x5C3C;&#x8BD7;&#x4E8E;1984&#x5E74;&#x8054;&#x5408;&#x521B;&#x7ACB;&#x4E86;MIPS&#x7535;&#x8111;&#x7CFB;&#x7EDF;&#x516C;&#x53F8;&#xFF0C;&#x5C06;&#x65AF;&#x5766;&#x798F;&#x56E2;&#x961F;&#x7684;&#x5DE5;&#x4F5C;&#x5E02;&#x573A;&#x5316;&#x3002;&#x540E;&#x6765;&#xFF0C;&#x4F2F;&#x514B;&#x5229;&#x56E2;&#x961F;&#x7684;&#x7814;&#x7A76;&#x6210;&#x679C;&#x901A;&#x8FC7;Sun Microsystems&#x516C;&#x53F8;&#x7684;SPARC&#x5FAE;&#x5904;&#x7406;&#x5668;&#x67B6;&#x6784;&#x5546;&#x4E1A;&#x5316;&#x3002;</p><p>&#x2003;&#x2003;&#x5C3D;&#x7BA1;&#x8BB8;&#x591A;&#x8BA1;&#x7B97;&#x673A;&#x67B6;&#x6784;&#x5E08;&#x6700;&#x521D;&#x5BF9;RISC&#x6301;&#x6000;&#x7591;&#x6001;&#x5EA6;&#xFF0C;&#x4F46;MIPS&#x548C;SPARC&#x5E02;&#x573A;&#x5316;&#x7684;&#x6210;&#x529F;&#xFF0C;RISC&#x8BBE;&#x8BA1;&#x8F83;&#x4F4E;&#x7684;&#x751F;&#x4EA7;&#x6210;&#x672C;&#xFF0C;&#x4EE5;&#x53CA;&#x66F4;&#x591A;&#x7684;&#x7814;&#x7A76;&#x8FDB;&#x5C55;&#xFF0C;&#x4F7F;RISC&#x5F97;&#x5230;&#x4E86;&#x4E1A;&#x754C;&#x7684;&#x5E7F;&#x6CDB;&#x63A5;&#x7EB3;&#x3002;&#x5230;20&#x4E16;&#x7EAA;90&#x5E74;&#x4EE3;&#x4E2D;&#x671F;&#xFF0C;RISC&#x5FAE;&#x5904;&#x7406;&#x5668;&#x5DF2;&#x7ECF;&#x5728;&#x6574;&#x4E2A;&#x9886;&#x57DF;&#x5360;&#x636E;&#x4E3B;&#x5BFC;&#x5730;&#x4F4D;&#x3002;</p><p><strong>&#x7EA6;&#x7FF0;&#xB7;&#x8F69;&#x5C3C;&#x8BD7;(John L. Hennessy)</strong></p><p><img src="/images/TURING/hennessy.jpeg" alt="John L. Hennessy"></p><p>&#x2003;&#x2003;&#x7EA6;&#x7FF0;&#xB7;&#x8F69;&#x5C3C;&#x8BD7;&#xFF0C;&#x4E3A; MIPS &#x79D1;&#x6280;&#x516C;&#x53F8;&#x521B;&#x59CB;&#x4EBA;&#xFF0C;&#x7B2C;&#x5341;&#x4EFB;&#x65AF;&#x5766;&#x798F;&#x5927;&#x5B66;&#x6821;&#x957F;&#x3001;Alphabet&#x516C;&#x53F8;&#x8463;&#x4E8B;&#x957F;&#x3002;</p><p>&#x2003;&#x2003;Hennessy&#x51FA;&#x751F;&#x4E8E;1953&#x5E74;&#x3002;</p><p>&#x2003;&#x2003;1973&#x5E74;&#xFF0C;&#x4ED6;&#x4ECE;&#x7EF4;&#x62C9;&#x8BFA;&#x74E6;&#x5927;&#x5B66;&#x83B7;&#x53D6;&#x7535;&#x673A;&#x5DE5;&#x7A0B;&#x5B66;&#x58EB;&#x5B66;&#x4F4D;&#x3002;</p><p>&#x2003;&#x2003;1975&#x5E74;&#x4EE5;&#x53CA;1977&#x5E74;&#xFF0C;&#x5206;&#x522B;&#x4ECE;&#x7EBD;&#x7EA6;&#x77F3;&#x6EAA;&#x5927;&#x5B66;&#x83B7;&#x53D6;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x7855;&#x58EB;&#x53CA;&#x535A;&#x58EB;&#x5B66;&#x4F4D;&#x3002;</p><p>&#x2003;&#x2003;1977&#x5E74;&#x6210;&#x4E3A;&#x65AF;&#x5766;&#x798F;&#x5927;&#x5B66;&#x7684;&#x6559;&#x5E08;&#x3002;</p><p>&#x2003;&#x2003;1981&#x5E74;&#xFF0C;&#x4ED6;&#x5F00;&#x59CB;&#x8FDB;&#x884C;MIPS&#x9879;&#x76EE;&#xFF0C;&#x5E76;&#x7814;&#x7A76;RISC&#x5904;&#x7406;&#x5668;&#x3002;</p><p>&#x2003;&#x2003;1984&#x5E74;&#xFF0C;&#x4ED6;&#x5229;&#x7528;&#x5E74;&#x5EA6;&#x4F11;&#x5047;&#x7684;&#x65F6;&#x95F4;&#x521B;&#x5EFA;&#x4E86; MIPS Computer Systems Inc.&#xFF0C;&#x5C06;&#x4ED6;&#x7814;&#x7A76;&#x5F00;&#x53D1;&#x7684;&#x6280;&#x672F;&#x8FDB;&#x884C;&#x5546;&#x4E1A;&#x5316;&#x3002;</p><p>&#x2003;&#x2003;1987&#x5E74;&#xFF0C;&#x4ED6;&#x6210;&#x4E3A;&#x7535;&#x6C14;&#x5DE5;&#x7A0B;&#x548C;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x7684; Willard &#x548C; Inez Kerr Bell &#x6559;&#x6388;&#x3002;</p><p>&#x2003;&#x2003;1989&#x5E74;&#x5230;1993&#x5E74;&#xFF0C;Hennessy&#x62C5;&#x4EFB;&#x4E86;&#x65AF;&#x5766;&#x798F;&#x5927;&#x5B66;&#x8BA1;&#x7B97;&#x673A;&#x7CFB;&#x7EDF;&#x5B9E;&#x9A8C;&#x5BA4;&#x4E3B;&#x4EFB;&#x3002;</p><p>&#x2003;&#x2003;1994&#x5E74;&#x5230;1996&#x5E74;&#xFF0C;&#x4ED6;&#x66FE;&#x62C5;&#x4EFB;&#x65AF;&#x5766;&#x798F;&#x5927;&#x5B66;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x7CFB;&#x4E3B;&#x4EFB;&#x3002;</p><p>&#x2003;&#x2003;1996&#x5E74;&#x5230;1999&#x5E74;&#xFF0C;&#x4ED6;&#x62C5;&#x4EFB;&#x65AF;&#x5766;&#x798F;&#x5927;&#x5B66;&#x5DE5;&#x7A0B;&#x5B66;&#x9662;&#x9662;&#x957F;&#x3002;</p><p>&#x2003;&#x2003;1999&#x5E74;&#xFF0C;&#x65AF;&#x5766;&#x798F;&#x5927;&#x5B66;&#x6821;&#x957F;&#x683C;&#x54C8;&#x5FB7;&#xB7;&#x5361;&#x65AF;&#x5E15;&#xFF08;Gerhard Casper&#xFF09;&#x4EFB;&#x547D;Hennessy&#x63A5;&#x4EFB;&#x65AF;&#x5766;&#x798F;&#x5927;&#x5B66;&#x6559;&#x52A1;&#x957F;&#x3002;</p><p>&#x2003;&#x2003;&#x968F;&#x540E; 2000&#x5E74;&#x5361;&#x65AF;&#x5E15;&#x5378;&#x4EFB;&#x540E;&#xFF0C;&#x65AF;&#x5766;&#x798F;&#x8463;&#x4E8B;&#x4F1A;&#x4EFB;&#x547D;Hennessy&#x63A5;&#x66FF;&#x5361;&#x65AF;&#x5E15;&#x51FA;&#x4EFB;&#x6821;&#x957F;&#x4E00;&#x804C;&#xFF0C;&#x5E76;&#x4E00;&#x76F4;&#x5EF6;&#x7EED;&#x5230; 2016&#x5E74;&#x3002;&#x5728;&#x8FD9;&#x6BB5;&#x65F6;&#x95F4;&#x5185;&#x65AF;&#x5766;&#x798F;&#x5B8C;&#x6210;&#x4E86;&#x4ECE;&#x4E00;&#x4E2A;&#x5730;&#x533A;&#x6027;&#x6559;&#x80B2;&#x673A;&#x6784;&#x5230;&#x4E16;&#x754C;&#x9876;&#x7EA7;&#x5927;&#x5B66;&#x7684;&#x8715;&#x53D8;&#xFF0C;&#x65AF;&#x5766;&#x798F;&#x5916;&#x56F4;&#x7684;&#x7845;&#x8C37;&#x4E5F;&#x6210;&#x4E3A;&#x4E86;&#x4E16;&#x754C;&#x521B;&#x65B0;&#x7684;&#x5F15;&#x64CE;&#xFF0C;&#x800C;Hennessy&#x6559;&#x6388;&#x5219;&#x6210;&#x4E3A;&#x516C;&#x8BA4;&#x7684;&#x300C;&#x7845;&#x8C37;&#x6559;&#x7236;&#x300D;&#x3002;</p><p>&#x2003;&#x2003;&#x6B64;&#x5916;&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;Hennessy&#x4ECE;2004&#x5E74;&#x8D77;&#x4FBF;&#x52A0;&#x5165;&#x4E86;Google&#xFF08;&#x540E;&#x6765;&#x7684;Alphabet&#x516C;&#x53F8;&#xFF09;&#x7684;&#x8463;&#x4E8B;&#x4F1A;&#xFF0C;&#x5E76;&#x4E8E;2007&#x5E74;&#x62C5;&#x4EFB;&#x72EC;&#x7ACB;&#x8463;&#x4E8B;&#x3002;</p><p>&#x2003;&#x2003;&#x5728; 2018&#x5E74; 2 &#x6708;&#xFF0C;&#x4F34;&#x968F;&#x7740; Alphabet &#x516C;&#x53F8;&#xFF08;Google &#x7684;&#x6BCD;&#x516C;&#x53F8;&#xFF09;&#x53D1;&#x5E03; 2017&#x5E74;&#x8D22;&#x62A5;&#xFF0C;&#x8FD8;&#x540C;&#x65F6;&#x5BA3;&#x5E03; 66 &#x5C81;&#x7684;Hennessy&#x4E3A; Alphabet &#x7684;&#x7B2C;&#x4E09;&#x4EFB;&#x8463;&#x4E8B;&#x957F;&#x3002;&#xFF08;&#x96F7;&#x950B;&#x7F51;&#x66FE;&#x7ECF;&#x6709;&#x8BE6;&#x7EC6;&#x62A5;&#x9053;&#xFF1A;&#x5168;&#x5E74;&#x8425;&#x6536;&#x7834;&#x5343;&#x4EBF;&#x7F8E;&#x5143;&#x7684; Google&#xFF0C;&#x8FCE;&#x6765;&#x4E86; 20&#x5E74;&#x6765;&#x6700;&#x5927;&#x7684;&#x4EBA;&#x4E8B;&#x53D8;&#x52A8;&#xFF09;</p><p>&#x2003;&#x2003;&#x5728;&#x7814;&#x7A76;&#x65B9;&#x9762;&#xFF0C;Hennessy&#x4E0E;Patterson&#x5171;&#x540C;&#x4E3A;RISC&#x5FAE;&#x5904;&#x7406;&#x5668;&#x521B;&#x5EFA;&#x4E86;&#x4E00;&#x4E2A;&#x7CFB;&#x7EDF;&#x7684;&#x91CF;&#x5316;&#x65B9;&#x6CD5;&#x3002;&#x540C;&#x65F6;&#x4ED6;&#x4EEC;&#x7F16;&#x5199;&#x7684;&#x300A;&#x8BA1;&#x7B97;&#x673A;&#x4F53;&#x7CFB;&#x7ED3;&#x6784;&#xFF08;&#x91CF;&#x5316;&#x7814;&#x7A76;&#x65B9;&#x6CD5;&#xFF09;&#x300B;&#xFF08;Computer Architecture: A Quantitative Approach&#xFF09;&#xFF0C;&#x4ECE;1990&#x5E74;&#x4EE5;&#x6765;&#x4E00;&#x76F4;&#x88AB;&#x5E7F;&#x6CDB;&#x7528;&#x4F5C;&#x7814;&#x7A76;&#x751F;&#x7684;&#x6743;&#x5A01;&#x6559;&#x6750;&#xFF0C;&#x53E6;&#x4E00;&#x65B9;&#x9762;&#xFF0C;Hennessy&#x5C06; Donald Knuth &#x7684; MIX &#x5904;&#x7406;&#x5668;&#x66F4;&#x65B0;&#x4E3A; MMIX &#x505A;&#x51FA;&#x4E86;&#x8D21;&#x732E;&#x3002;</p><p>&#x2003;&#x2003;2004&#x5E74;&#xFF0C;&#x4ED6;1989&#x5E74;&#x5408;&#x4F5C;&#x7684;&#x4E00;&#x7BC7;&#x5173;&#x4E8E;&#x9AD8;&#x6027;&#x80FD;&#x7F13;&#x5B58;&#x5C42;&#x6B21;&#x7ED3;&#x6784;&#x7684;&#x8BBA;&#x6587;&#x83B7;&#x5F97;&#x4E86;&#x8BA1;&#x7B97;&#x673A;&#x68B0;&#x534F;&#x4F1A; SIGARCH ISCA &#x7684;&#x5F71;&#x54CD;&#x8BBA;&#x6587;&#x5956;&#x3002;</p><p>&#x2003;&#x2003;2009&#x5E74;&#xFF0C;Hennessy&#x518D;&#x6B21;&#x83B7;&#x5F97;&#x8BE5;&#x5956;&#xFF0C;&#x8FD9;&#x6B21;&#x662F;&#x4ED6;&#x5728;1994&#x5E74;&#x5408;&#x4F5C;&#x7684;&#x6709;&#x5173;&#x65AF;&#x5766;&#x798F; FLASH &#x591A;&#x5904;&#x7406;&#x5668;&#x7684;&#x8BBA;&#x6587;&#x3002;</p><p><strong>&#x5927;&#x536B;&#xB7;&#x5E15;&#x7279;&#x68EE;(David A. Patterson)</strong></p><p><img src="/images/TURING/patterson.jpeg" alt="David A. Patterson"></p><p>&#x2003;&#x2003;Patterson &#x51FA;&#x751F;&#x4E8E;1947&#x5E74;&#xFF0C;</p><p>&#x2003;&#x2003;1969&#x5E74;&#x4ECE;&#x52A0;&#x5DDE;&#x5927;&#x5B66;&#x6D1B;&#x6749;&#x77F6;&#x5206;&#x6821;&#x83B7;&#x6570;&#x5B66;&#x5B66;&#x58EB;&#x5B66;&#x4F4D;&#x3002;</p><p>&#x2003;&#x2003;1970&#x5E74;&#x548C;1976&#x5E74;&#xFF0C;&#x4ECE;&#x52A0;&#x5DDE;&#x5927;&#x5B66;&#x6D1B;&#x6749;&#x77F6;&#x5206;&#x6821;&#x5206;&#x522B;&#x83B7;&#x5F97;&#x8BA1;&#x7B97;&#x673A;&#x7855;&#x58EB;&#x548C;&#x535A;&#x58EB;&#x5B66;&#x4F4D;&#x3002;</p><p>&#x2003;&#x2003;1976&#x5E74;&#xFF0C;&#x535A;&#x58EB;&#x6BD5;&#x4E1A;&#x540E;&#xFF0C;&#x52A0;&#x5165;&#x52A0;&#x5DDE;&#x5927;&#x5B66;&#x4F2F;&#x514B;&#x5229;&#x5206;&#x6821;&#x8BA1;&#x7B97;&#x673A;&#x7CFB;&#x3002;</p><p>&#x2003;&#x2003;1994&#x5E74;&#xFF0C;&#x5F53;&#x9009;&#x7F8E;&#x56FD;&#x8BA1;&#x7B97;&#x673A;&#x534F;&#x4F1A;&#x4F1A;&#x58EB;&#xFF08;ACM Fellow&#xFF09;&#x3002;</p><p>&#x2003;&#x2003;2004&#x5E74;&#x81F3; 2006&#x5E74;&#xFF0C;&#x4EFB;&#x7F8E;&#x56FD;&#x8BA1;&#x7B97;&#x673A;&#x534F;&#x4F1A;&#x4E3B;&#x5E2D;&#x3002;</p><p>&#x2003;&#x2003;2016&#x5E74;&#xFF0C;DavidPatterson&#x6559;&#x6388;&#x5BA3;&#x5E03;&#x4ECE;&#x52A0;&#x5DDE;&#x5927;&#x5B66;&#x4F2F;&#x514B;&#x5229;&#x5206;&#x6821;&#x9000;&#x4F11;&#xFF0C;&#x5B66;&#x6821;&#x7ED9;&#x4ED6;&#x4E3E;&#x529E;&#x4E86;&#x4E00;&#x4E2A;&#x9000;&#x4F11;&#x5178;&#x793C;&#xFF0C;&#x7EAA;&#x5FF5;&#x4ED6;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x67B6;&#x6784;&#x65B9;&#x9762;&#x7684; 40&#x5E74;&#x5B66;&#x672F;&#x751F;&#x6DAF;&#x3002;&#x4E00;&#x5E74;&#x4E4B;&#x540E;&#xFF0C;&#x6559;&#x6388;&#x516C;&#x5F00;&#x5BA3;&#x5E03;&#x81EA;&#x5DF1;&#x52A0;&#x5165;&#x8C37;&#x6B4C; TPU &#x56E2;&#x961F;&#xFF0C;&#x8C37;&#x6B4C;&#x7684; TPU &#x8BBA;&#x6587;&#x4E2D;&#x4E5F;&#x6709;&#x4ED6;&#x7684;&#x7F72;&#x540D;&#x3002;&#xFF08;&#x96F7;&#x950B;&#x7F51;&#x8BE6;&#x7EC6;&#x62A5;&#x9053;&#xFF1A;David Patterson&#x6559;&#x6388;&#x516C;&#x5F00;&#x5BA3;&#x5E03;&#x52A0;&#x5165;&#x8C37;&#x6B4C;TPU&#x56E2;&#x961F;&#xFF0C;&#x597D;&#x620F;&#x624D;&#x521A;&#x521A;&#x5F00;&#x573A;&#xFF09;</p><p>&#x2003;&#x2003;Patterson&#x6559;&#x6388;&#x5728;&#x4F2F;&#x514B;&#x5229;&#x5927;&#x5B66;&#x5E26;&#x9886;&#x56E2;&#x961F;&#x957F;&#x671F;&#x8FDB;&#x884C;RISC&#x7684;&#x7814;&#x7A76;&#xFF0C;&#x5BF9;&#x5168;&#x4E16;&#x754C;RISC&#x5904;&#x7406;&#x5668;&#x7684;&#x7814;&#x53D1;&#x548C;&#x76F8;&#x5173;&#x5E94;&#x7528;&#x505A;&#x51FA;&#x4E86;&#x5DE8;&#x5927;&#x8D21;&#x732E;&#xFF1B;&#x4ED6;&#x5728; 2003&#x5E74;&#x5230; 2005&#x5E74;&#x95F4;&#x662F;&#x7F8E;&#x56FD;&#x603B;&#x7EDF;&#x4FE1;&#x606F;&#x6280;&#x672F;&#x54A8;&#x8BE2;&#x59D4;&#x5458;&#x4F1A;&#x6210;&#x5458;&#xFF0C;2004 &#x5230; 2006&#x5E74;&#x95F4;&#x4EFB;&#x56FD;&#x9645;&#x8BA1;&#x7B97;&#x673A;&#x5B66;&#x4F1A;&#x4E3B;&#x5E2D;&#xFF1B;&#x4ED6;&#x8FD8;&#x662F;&#x78C1;&#x76D8;&#x9635;&#x5217; RAID &#x7684;&#x7814;&#x53D1;&#x8005;&#x4E4B;&#x4E00;&#x3002;</p><p>&#x2003;&#x2003;&#x5A01;&#x65AF;&#x5EB7;&#x661F;&#x5927;&#x5B66;&#x9EA6;&#x8FEA;&#x900A;&#x5206;&#x6821;&#x8BA1;&#x7B97;&#x673A;&#x7CFB;&#x7684;&#x4E3B;&#x4EFB;Mark Hill&#x8BA4;&#x4E3A;&#xFF0C;Patterson&#x6559;&#x6388;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x67B6;&#x6784;&#x65B9;&#x9762;&#x662F;&#x300C;20&#x4E16;&#x7EAA;&#x540E;50&#x5E74;&#x91CC;&#x6700;&#x6770;&#x51FA;&#x7684;&#x51E0;&#x4E2A;&#x4EBA;&#x4E4B;&#x4E00;&#x300D;&#x3002;&#x4ED6;&#x540C;&#x65F6;&#x8FD8;&#x8868;&#x793A;&#xFF0C;Patterson&#x6559;&#x6388;&#x4E0E;Hennessy&#x6559;&#x6388;&#x5408;&#x8457;&#x7684;&#x90A3;&#x672C;&#x8BA1;&#x7B97;&#x673A;&#x67B6;&#x6784;&#x4E66;&#x662F;&#x8FD9;&#x4E2A;&#x9886;&#x57DF;&#x8FD1;25&#x5E74;&#x6765;&#x6700;&#x6709;&#x5F71;&#x54CD;&#x529B;&#x7684;&#x6559;&#x79D1;&#x4E66;&#x3002;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=grey&gt;&lt;font size=5 face=&quot;STXihei&quot; color=white&gt;&lt;center&gt;RISC Microprocessors&lt;/center&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="Computer Science" scheme="https://USTCcoder.github.io/categories/Computer-Science/"/>
    
      <category term="Turing Reward" scheme="https://USTCcoder.github.io/categories/Computer-Science/Turing-Reward/"/>
    
    
  </entry>
  
</feed>
