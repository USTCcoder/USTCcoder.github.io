<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Addition VS Concatenate]]></title>
    <url>%2F2020%2F05%2F08%2Fdeep%20learning%20addition_vs_concatenate%2F</url>
    <content type="text"><![CDATA[Addition VS Concatenate &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;Activation(&#x6FC0;&#x6D3B;&#x51FD;&#x6570;):&#x5728;&#x591A;&#x5C42;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4E2D;&#xFF0C;&#x4E0A;&#x5C42;&#x8282;&#x70B9;&#x7684;&#x8F93;&#x51FA;&#x548C;&#x4E0B;&#x5C42;&#x8282;&#x70B9;&#x7684;&#x8F93;&#x5165;&#x4E4B;&#x95F4;&#x5177;&#x6709;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x5173;&#x7CFB;&#xFF0C;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x79F0;&#x4E3A;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x3002;&#x5982;&#x679C;&#x4E0D;&#x7528;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x6BCF;&#x4E00;&#x5C42;&#x8282;&#x70B9;&#x7684;&#x8F93;&#x5165;&#x90FD;&#x662F;&#x4E0A;&#x5C42;&#x8F93;&#x51FA;&#x7684;&#x7EBF;&#x6027;&#x51FD;&#x6570;&#xFF0C;&#x5F88;&#x5BB9;&#x6613;&#x9A8C;&#x8BC1;&#xFF0C;&#x65E0;&#x8BBA;&#x4F60;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x6709;&#x591A;&#x5C11;&#x5C42;&#xFF0C;&#x8F93;&#x51FA;&#x90FD;&#x662F;&#x8F93;&#x5165;&#x7684;&#x7EBF;&#x6027;&#x7EC4;&#x5408;&#xFF0C;&#x4E0E;&#x6CA1;&#x6709;&#x9690;&#x85CF;&#x5C42;&#x6548;&#x679C;&#x76F8;&#x5F53;&#xFF0C;&#x8FD9;&#x6837;&#x4F1A;&#x5BFC;&#x81F4;&#x7F51;&#x7EDC;&#x7684;&#x903C;&#x8FD1;&#x80FD;&#x529B;&#x5927;&#x5927;&#x964D;&#x4F4E;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x5F15;&#x5165;&#x975E;&#x7EBF;&#x6027;&#x51FD;&#x6570;&#x4F5C;&#x4E3A;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x63D0;&#x9AD8;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8868;&#x8FBE;&#x80FD;&#x529B;&#xFF0C;&#x53EF;&#x4EE5;&#x903C;&#x8FD1;&#x4EFB;&#x610F;&#x51FD;&#x6570;&#xFF0C;&#x4E0D;&#x518D;&#x662F;&#x8F93;&#x5165;&#x7684;&#x7EBF;&#x6027;&#x7EC4;&#x5408;&#x3002; Sigmoid&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$$ f(z) = \frac{1}{1+e^{-z}} $$ tanh&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$$ f(x) = \frac{e^{x}-e^{-x}}{e^{x}+e^{-x}} $$ ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$$ f(x) = \max(0, x) $$ Leaky-ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$$ f(x) = \max(\alpha x, x), \alpha=0.01 $$ ReLU6&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$$ f(x) = \min(6, \max(0, x)) $$ ELU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$$ f(x) = \begin{cases} x &amp; x &gt; 0 \\ \alpha(e^{x} - 1) &amp; x \le 0 \end{cases}, \alpha=1 $$ SELU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$$ f(x) = \lambda \begin{cases} x &amp; x &gt; 0 \\ \alpha(e^{x} - 1) &amp; x \le 0 \end{cases}$$$$ \begin{cases} \lambda=1.0507009873554804934193349852946 \\ \alpha=1.6732632423543772848170429916717 \end{cases}$$ Swish&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$$ f(x) = x * sigmoid(x) $$ H-Swish&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$$ f(x) = x * \frac{ReLU6(x + 3)}{6} $$ Softmax&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$$ \sigma_{i}(z) = \frac{e^{z_i}}{\sum_{j=1}^{m}{e^{z_j}}} $$ &#x4F18;&#x7F3A;&#x70B9;&#x6BD4;&#x8F83;Sigmoid&#x51FD;&#x6570;&#x4F18;&#x70B9;&#xFF1A;Sigmoid&#x51FD;&#x6570;&#x5904;&#x5904;&#x8FDE;&#x7EED;&#xFF0C;&#x5904;&#x5904;&#x53EF;&#x5BFC;&#x3002;&#x4E14;&#x80FD;&#x591F;&#x63A7;&#x5236;&#x6570;&#x503C;&#x7684;&#x5E45;&#x5EA6;&#xFF0C;&#x4E0D;&#x4F1A;&#x4EA7;&#x751F;&#x5F88;&#x5927;&#x7684;&#x53D8;&#x5316;&#xFF0C;&#x53EF;&#x4EE5;&#x4F5C;&#x4E3A;&#x4E8C;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x7684;&#x8F93;&#x51FA;&#xFF0C;&#x800C;ReLU&#x7C7B;&#x578B;&#x7684;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x5BF9;&#x5927;&#x4E8E;0&#x7684;&#x503C;&#x51E0;&#x4E4E;&#x6CA1;&#x6709;&#x7EA6;&#x675F;&#x3002;Sigmoid&#x51FD;&#x6570;&#x7F3A;&#x70B9;&#xFF1A;&#x9971;&#x548C;&#x533A;&#x7684;&#x795E;&#x7ECF;&#x5143;&#x4F1A;&#x4EA7;&#x751F;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x73B0;&#x8C61;&#xFF0C;&#x4F7F;&#x5F97;&#x5B66;&#x4E60;&#x901F;&#x5EA6;&#x5927;&#x5927;&#x4E0B;&#x964D;&#xFF0C;&#x5E76;&#x4E14;&#x6307;&#x6570;&#x51FD;&#x6570;&#x8BA1;&#x7B97;&#x8017;&#x65F6;&#x3002;tanh&#x51FD;&#x6570;&#x4F18;&#x70B9;&#xFF1A;tanh&#x51FD;&#x6570;&#x548C;Sigmoid&#x7C7B;&#x4F3C;&#xFF0C;&#x4F46;&#x662F;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;tanh&#x7684;&#x5BFC;&#x6570;&#x7684;&#x503C;&#x57DF;&#x4E3A;(0, 1]&#xFF0C;&#x800C;Sigmoid&#x7684;&#x5BFC;&#x6570;&#x7684;&#x503C;&#x57DF;&#x4E3A;(0, 0.25]&#xFF0C;&#x56E0;&#x6B64;&#x76F8;&#x5F53;&#x4E8E;&#x5EF6;&#x8FDF;&#x4E86;&#x9971;&#x548C;&#x5468;&#x671F;&#x3002;tanh&#x51FD;&#x6570;&#x7F3A;&#x70B9;&#xFF1A;tanh&#x51FD;&#x6570;&#x548C;Sigmoid&#x7C7B;&#x4F3C;&#xFF0C;&#x4E5F;&#x5177;&#x6709;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x95EE;&#x9898;&#xFF0C;&#x548C;&#x6307;&#x6570;&#x8BA1;&#x7B97;&#x8017;&#x65F6;&#x95EE;&#x9898;&#x3002;ReLU&#x7C7B;&#x51FD;&#x6570;&#x4F18;&#x70B9;&#xFF1A;ReLU&#x7C7B;&#x578B;&#x51FD;&#x6570;&#x4F1A;&#x4F7F;&#x4E00;&#x90E8;&#x5206;&#x795E;&#x7ECF;&#x5143;&#x4E3A;0&#x6216;&#x8005;&#x975E;&#x5E38;&#x5C0F;&#xFF0C;&#x4F7F;&#x5F97;&#x7F51;&#x7EDC;&#x5177;&#x6709;&#x7A00;&#x758F;&#x6027;&#xFF0C;&#x51CF;&#x5C11;&#x4E86;&#x53C2;&#x6570;&#x7684;&#x76F8;&#x4E92;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;&#xFF0C;&#x7F13;&#x89E3;&#x4E86;&#x8FC7;&#x62DF;&#x5408;&#xFF0C;&#x800C;&#x4E14;ReLU&#x51FD;&#x6570;&#x53CA;&#x5176;&#x5BFC;&#x6570;&#x7684;&#x8BA1;&#x7B97;&#x975E;&#x5E38;&#x7B80;&#x5355;&#x3002;ReLU&#x7C7B;&#x51FD;&#x6570;&#x7F3A;&#x70B9;&#xFF1A;&#x53EF;&#x80FD;&#x5B58;&#x5728;&#x795E;&#x7ECF;&#x5143;&#x574F;&#x6B7B;&#x73B0;&#x8C61;&#xFF0C;&#x5728;x&lt;0&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x68AF;&#x5EA6;&#x4E3A;0&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x4F7F;&#x8FD9;&#x4E2A;&#x795E;&#x7ECF;&#x5143;&#x5F88;&#x96BE;&#x518D;&#x88AB;&#x6FC0;&#x6D3B;&#xFF0C;&#x4E14;ReLU&#x51FD;&#x6570;&#x4E0D;&#x80FD;&#x63A7;&#x5236;&#x53C2;&#x6570;&#x7684;&#x5E45;&#x5EA6;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x4EA7;&#x751F;&#x68AF;&#x5EA6;&#x7206;&#x70B8;&#x73B0;&#x8C61;&#x3002;Swish&#x7C7B;&#x51FD;&#x6570;&#x4F18;&#x70B9;&#xFF1A;Swish&#x51FD;&#x6570;&#x662F;&#x4ECB;&#x4E8E;ReLU&#x51FD;&#x6570;&#x548C;Sigmoid&#x51FD;&#x6570;&#x4E4B;&#x95F4;&#x7684;&#x4E00;&#x79CD;&#x5E73;&#x6ED1;&#x51FD;&#x6570;&#xFF0C;&#x5177;&#x6709;&#x4E24;&#x8005;&#x7684;&#x4F18;&#x70B9;&#xFF0C;&#x4E0D;&#x4F1A;&#x50CF;Sigmoid&#x51FD;&#x6570;&#x4E00;&#x6837;&#x4EA7;&#x751F;&#x9971;&#x548C;&#x533A;&#xFF0C;&#x4E5F;&#x4E0D;&#x4F1A;&#x50CF;ReLU&#x51FD;&#x6570;&#x4E00;&#x6837;&#x5B58;&#x5728;&#x574F;&#x6B7B;&#x795E;&#x7ECF;&#x5143;&#x3002;Swish&#x7C7B;&#x51FD;&#x6570;&#x7F3A;&#x70B9;&#xFF1A;Swish&#x51FD;&#x6570;&#x4E5F;&#x5177;&#x6709;&#x4E24;&#x8005;&#x7684;&#x7F3A;&#x70B9;&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;Sigmoid&#x51FD;&#x6570;&#x8BA1;&#x7B97;&#x8017;&#x65F6;&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;ReLU&#x51FD;&#x6570;&#x96BE;&#x4EE5;&#x63A7;&#x5236;&#x53C2;&#x6570;&#x5E45;&#x5EA6;&#xFF0C;&#x4F46;&#x6574;&#x4F53;&#x8868;&#x73B0;&#x8F83;&#x597D;&#x3002;Softmax&#x51FD;&#x6570;&#x7279;&#x70B9;&#xFF1A;Softmax&#x51FD;&#x6570;&#x548C;&#x5176;&#x4ED6;&#x7684;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x4E0D;&#x540C;&#xFF0C;Softmax&#x4E3B;&#x8981;&#x7528;&#x4E8E;&#x591A;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x4E2D;&#xFF0C;&#x5982;&#x56FE;&#x50CF;&#x5206;&#x5272;&#xFF0C;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#xFF0C;&#x9700;&#x8981;&#x5224;&#x65AD;&#x67D0;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x6216;&#x8005;&#x67D0;&#x4E00;&#x4E2A;&#x9884;&#x6D4B;&#x6846;&#x5C5E;&#x4E8E;&#x54EA;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#x3002;Softmax&#x5C06;&#x8F93;&#x5165;&#x5F52;&#x4E00;&#x5316;&#x5230;[0, 1]&#x4E4B;&#x95F4;&#xFF0C;&#x5E76;&#x4E14;&#x4FDD;&#x8BC1;&#x548C;&#x4E3A;1&#xFF0C;&#x4F7F;&#x4EBA;&#x80FD;&#x591F;&#x8054;&#x60F3;&#x5230;&#x6982;&#x7387;&#x7684;&#x6761;&#x4EF6;&#xFF0C;&#x4E5F;&#x662F;&#x5C5E;&#x4E8E;[0, 1]&#xFF0C;&#x5E76;&#x4E14;&#x548C;&#x4E3A;1&#x3002;&#x52A0;&#x4E0A;&#x6307;&#x6570;&#x7684;&#x4F5C;&#x7528;&#x662F;&#x589E;&#x52A0;&#x6837;&#x672C;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x8DDD;&#xFF0C;&#x5982;&#x679C;&#x8F93;&#x5165;&#x4E3A;90&#x4E2A;1&#x548C;1&#x4E2A;10&#xFF0C;&#x5219;&#x76F4;&#x63A5;&#x5F52;&#x4E00;&#x5316;&#x7684;&#x7ED3;&#x679C;&#x4E3A;90&#x4E2A;0.01&#x548C;1&#x4E2A;0.1&#xFF0C;&#x5982;&#x679C;10&#x662F;&#x5BF9;&#x5E94;&#x7684;&#x7C7B;&#x522B;&#xFF0C;&#x5373;&#x4F7F;&#x5DF2;&#x7ECF;&#x5206;&#x7C7B;&#x7684;&#x8F83;&#x597D;&#xFF0C;&#x4ECD;&#x7136;&#x4F1A;&#x4F7F;&#x5F97;&#x8BEF;&#x5DEE;&#x8F83;&#x5927;&#x3002;&#x52A0;&#x4E0A;&#x6307;&#x6570;&#x8FD0;&#x7B97;&#x540E;&#xFF0C;&#x5F52;&#x4E00;&#x5316;&#x7684;&#x7ED3;&#x679C;&#x4E3A;90&#x4E2A;0.000122&#xFF0C;1&#x4E2A;0.989&#xFF0C;&#x8FD9;&#x6837;&#x8BEF;&#x5DEE;&#x5C31;&#x4F1A;&#x8F83;&#x5C0F;&#xFF0C;&#x66F4;&#x52A0;&#x63A5;&#x8FD1;&#x4E8E;&#x771F;&#x5B9E;&#x7684;&#x60C5;&#x51B5;&#x3002; &#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x7684;&#x9009;&#x62E9; &#x9996;&#x5148;&#x5224;&#x65AD;&#x4EFB;&#x52A1;&#x7C7B;&#x578B;&#xFF0C;&#x662F;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x8FD8;&#x662F;&#x4F5C;&#x4E3A;&#x9690;&#x85CF;&#x5C42;&#x975E;&#x7EBF;&#x6027;&#x5355;&#x5143;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x591A;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x5219;&#x8003;&#x8651;Softmax&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x4E8C;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x5219;&#x8003;&#x8651;Sigmoid&#xFF0C;tanh&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x9690;&#x85CF;&#x5C42;&#x975E;&#x7EBF;&#x6027;&#x5355;&#x5143;&#x5219;&#x8003;&#x8651;Sigmoid&#xFF0C;tanh&#xFF0C;ReLU&#xFF0C;Swish&#x7B49;&#x7B49;&#x3002; &#x5982;&#x679C;&#x662F;&#x9690;&#x85CF;&#x5C42;&#x975E;&#x7EBF;&#x6027;&#x5355;&#x5143;&#xFF0C;&#x9996;&#x5148;&#x5C1D;&#x8BD5;ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#xFF0C;&#x5982;&#x679C;ReLU&#x6548;&#x679C;&#x6B20;&#x4F73;&#x5219;&#x8003;&#x8651;ReLU&#x53D8;&#x79CD;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#xFF0C;ReLU6&#xFF0C;Leaky_ReLU&#xFF0C;SELU&#xFF0C;ELU&#x7B49;&#x7B49; &#x5982;&#x679C;&#x6548;&#x679C;&#x4E0D;&#x597D;&#xFF0C;&#x518D;&#x8003;&#x8651;Swish&#x7C7B;&#x51FD;&#x6570;&#x548C;Sigmoid&#xFF0C;tanh&#x51FD;&#x6570;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x53D1;&#x73B0;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x95EE;&#x9898;&#xFF0C;&#x5219;&#x907F;&#x514D;&#x4F7F;&#x7528;Sigmoid&#x548C;tanh&#x51FD;&#x6570;&#x3002;4.&#x5982;&#x679C;&#x90FD;&#x4E0D;&#x597D;&#x7528;&#xFF0C;&#x5219;&#x8003;&#x8651;&#x662F;&#x5426;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#xFF0C;&#x8D85;&#x53C2;&#x6570;&#xFF0C;&#x635F;&#x5931;&#x51FD;&#x6570;&#x8BBE;&#x8BA1;&#x51FA;&#x73B0;&#x95EE;&#x9898;&#x3002; &#x5C0F;&#x7ED3;&#x2003;&#x2003;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x5DE5;&#x7A0B;&#x95EE;&#x9898;&#x662F;&#x4E00;&#x7C7B;&#x975E;&#x5E38;&#x590D;&#x6742;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x5F80;&#x5F80;&#x9700;&#x8981;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#xFF0C;&#x8D85;&#x53C2;&#x6570;&#xFF0C;&#x635F;&#x5931;&#x51FD;&#x6570;&#xFF0C;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x76F8;&#x4E92;&#x914D;&#x5408;&#x5DE5;&#x4F5C;&#xFF0C;&#x53EF;&#x80FD;&#x67D0;&#x4E2A;&#x7ED3;&#x6784;&#x6216;&#x8005;&#x67D0;&#x4E2A;&#x53C2;&#x6570;&#x9002;&#x5408;&#x67D0;&#x4E2A;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#xFF0C;&#x800C;&#x53E6;&#x5916;&#x7684;&#x7ED3;&#x6784;&#x9002;&#x5408;&#x5176;&#x4ED6;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x3002;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5728;&#x5B9E;&#x9645;&#x7684;&#x5DE5;&#x7A0B;&#x4EFB;&#x52A1;&#x4E2D;&#x6162;&#x6162;&#x6478;&#x7D22;&#xFF0C;&#x591A;&#x591A;&#x5C1D;&#x8BD5;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>常用技巧</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[各种标准化对比]]></title>
    <url>%2F2020%2F05%2F07%2Fdeep%20learning%20BN_VS_LN_VS_IN_VS_GN%2F</url>
    <content type="text"><![CDATA[Normalization &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;Normalization(&#x6807;&#x51C6;&#x5316;):&#x6DF1;&#x5EA6;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x6A21;&#x578B;&#x8BAD;&#x7EC3;&#x56F0;&#x96BE;&#xFF0C;&#x5176;&#x4E2D;&#x4E00;&#x4E2A;&#x91CD;&#x8981;&#x7684;&#x73B0;&#x8C61;&#x5C31;&#x662F;ICS(Internal Covariate Shift&#xFF0C;&#x5185;&#x90E8;&#x534F;&#x53D8;&#x91CF;&#x504F;&#x79FB;)&#xFF0C;&#x5176;&#x4E2D;&#x89E3;&#x51B3;&#x7684;&#x65B9;&#x6CD5;&#x5C31;&#x662F;Normalization&#xFF0C;&#x73B0;&#x5728;&#x6807;&#x51C6;&#x5316;&#x6210;&#x4E3A;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x5FC5;&#x5907;&#x795E;&#x5668;&#xFF0C;&#x4ECA;&#x5929;&#x5E26;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x770B;&#x4E00;&#x770B;&#xFF0C;&#x77A7;&#x4E00;&#x77A7;&#x3002; ICS&#x7684;&#x89E3;&#x91CA;ICS(Internal Covariate Shift&#xFF0C;&#x5185;&#x90E8;&#x534F;&#x53D8;&#x91CF;&#x504F;&#x79FB;)&#xFF1A;&#x5C06;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x6BCF;&#x4E00;&#x5C42;&#x7684;&#x8F93;&#x5165;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x5206;&#x5E03;&#x6765;&#x770B;&#x4EE3;&#xFF0C;&#x7531;&#x4E8E;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x662F;&#x968F;&#x673A;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x80FD;&#x4F1A;&#x5BFC;&#x81F4;&#x76F8;&#x540C;&#x7684;&#x8F93;&#x5165;&#x5206;&#x5E03;&#x5374;&#x5F97;&#x5230;&#x4E86;&#x4E0D;&#x540C;&#x7684;&#x8F93;&#x51FA;&#x5206;&#x5E03;&#x3002;&#x968F;&#x7740;&#x7F51;&#x7EDC;&#x5C42;&#x6570;&#x7684;&#x52A0;&#x6DF1;&#xFF0C;&#x8F93;&#x5165;&#x5206;&#x5E03;&#x518D;&#x7ECF;&#x8FC7;&#x591A;&#x6B21;&#x975E;&#x7EBF;&#x6027;&#x53D8;&#x6362;&#x540E;&#xFF0C;&#x5DF2;&#x7ECF;&#x88AB;&#x6539;&#x53D8;&#xFF0C;&#x4F46;&#x662F;&#x5176;&#x6807;&#x7B7E;&#x8FD8;&#x662F;&#x4E00;&#x81F4;&#x7684;&#xFF0C;&#x8FD9;&#x5C31;&#x6709;&#x4E00;&#x79CD;&#x4E0D;&#x534F;&#x8C03;&#x7684;&#x611F;&#x89C9;&#xFF0C;&#x8FD9;&#x53EF;&#x80FD;&#x4F1A;&#x5E26;&#x6765;&#x4E0B;&#x9762;&#x51E0;&#x79CD;&#x95EE;&#x9898;&#x3002; &#x5728;&#x8BAD;&#x7EC3;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x7F51;&#x7EDC;&#x9700;&#x8981;&#x4E0D;&#x65AD;&#x9002;&#x5E94;&#x65B0;&#x7684;&#x8F93;&#x5165;&#x6570;&#x636E;&#x5206;&#x5E03;&#xFF0C;&#x6240;&#x4EE5;&#x4F1A;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x5B66;&#x4E60;&#x901F;&#x5EA6;&#x3002; &#x7531;&#x4E8E;&#x53C2;&#x6570;&#x7684;&#x5206;&#x5E03;&#x4E0D;&#x540C;&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x80FD;&#x5BFC;&#x81F4;&#x5F88;&#x591A;&#x6570;&#x636E;&#x843D;&#x5165;&#x9971;&#x548C;&#x533A;&#xFF0C;&#x4F7F;&#x5F97;&#x5B66;&#x4E60;&#x8FC7;&#x65E9;&#x505C;&#x6B62;&#x3002; &#x67D0;&#x4E9B;&#x53C2;&#x6570;&#x5206;&#x5E03;&#x504F;&#x79BB;&#x592A;&#x5927;&#xFF0C;&#x5BF9;&#x5176;&#x4ED6;&#x5C42;&#x6216;&#x8005;&#x8F93;&#x51FA;&#x4EA7;&#x751F;&#x4E86;&#x5DE8;&#x5927;&#x5F71;&#x54CD;&#x3002; Normalization&#x539F;&#x7406;&#x5206;&#x6790;&#x2003;&#x2003;&#x4E3A;&#x4E86;&#x89E3;&#x51B3;&#x4E0A;&#x8FF0;ICS&#x95EE;&#x9898;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5C06;&#x53D8;&#x91CF;&#x5206;&#x5E03;&#x53D8;&#x6210;&#x76F8;&#x540C;&#x5206;&#x5E03;&#x7684;&#xFF0C;&#x8FD9;&#x4F7F;&#x6211;&#x4EEC;&#x60F3;&#x5230;&#x4E86;&#x6807;&#x51C6;&#x5316;&#x64CD;&#x4F5C;&#x3002; &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;$ \overset{\land}{x} = \frac{x - \mu}{\sigma} $&#xFF0C;$ \mu $&#x662F;&#x5E73;&#x79FB;&#x53C2;&#x6570;&#xFF0C;$ \sigma $&#x662F;&#x7F29;&#x653E;&#x53C2;&#x6570;&#x5C06;&#x6570;&#x636E;&#x53D8;&#x6210;&#x7B26;&#x5408;&#x5747;&#x503C;&#x4E3A;0&#xFF0C;&#x65B9;&#x5DEE;&#x4E3A;1&#x7684;&#x6807;&#x51C6;&#x5206;&#x5E03;&#x3002; &#x6211;&#x4EEC;&#x518D;&#x901A;&#x8FC7;$ y = \gamma * \overset{\land}{x} + \beta $, $ \beta $&#x662F;&#x518D;&#x5E73;&#x79FB;&#x53C2;&#x6570;&#xFF0C;$ \gamma $&#x662F;&#x518D;&#x7F29;&#x653E;&#x53C2;&#x6570;&#x5C06;&#x6570;&#x636E;&#x53D8;&#x6210;&#x7B26;&#x5408;&#x5747;&#x503C;&#x4E3A;$ \beta $&#xFF0C;&#x65B9;&#x5DEE;&#x4E3A;$ {\gamma}^2 $&#x7684;&#x6807;&#x51C6;&#x5206;&#x5E03;&#x3002; &#x2003;&#x2003;&#x5947;&#x602A;&#x7684;&#x77E5;&#x8BC6;&#x589E;&#x52A0;&#x4E86;&#xFF1F;&#xFF1F;&#xFF1F;&#x4E3A;&#x4EC0;&#x4E48;&#x7B2C;&#x4E00;&#x6B65;&#x5F97;&#x5230;&#x6807;&#x51C6;&#x5206;&#x5E03;&#x4E4B;&#x540E;&#xFF0C;&#x7B2C;&#x4E8C;&#x6B65;&#x53C8;&#x7ED9;&#x53D8;&#x8D70;&#x4E86;&#xFF1F;&#x2003;&#x2003;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF0C;&#x9996;&#x5148;&#x4E3A;&#x4E86;&#x4FDD;&#x8BC1;&#x6A21;&#x578B;&#x7684;&#x8868;&#x8FBE;&#x80FD;&#x529B;&#x4E0D;&#x56E0;&#x4E3A;&#x89C4;&#x8303;&#x5316;&#x800C;&#x4E0B;&#x964D;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x518D;&#x5E73;&#x79FB;&#x548C;&#x7F29;&#x653E;&#xFF0C;&#x4F1A;&#x5BFC;&#x81F4;&#x8F93;&#x5165;&#x7684;&#x53C2;&#x6570;&#x5206;&#x5E03;&#x53EF;&#x80FD;&#x53D1;&#x751F;&#x8F83;&#x5927;&#x7684;&#x53D8;&#x5316;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x80FD;&#x4F1A;&#x5BF9;&#x6A21;&#x578B;&#x7684;&#x8868;&#x8FBE;&#x80FD;&#x529B;&#x4EA7;&#x751F;&#x5F71;&#x54CD;&#x3002;&#x5176;&#x6B21;&#x8FD9;&#x4E24;&#x7EC4;&#x53C2;&#x6570;&#x662F;&#x610F;&#x4E49;&#x4E0A;&#x5B8C;&#x5168;&#x4E0D;&#x540C;&#x7684;&#x6982;&#x5FF5;&#xFF0C;$ \mu $&#x548C;$ \sigma $&#x53D7;&#x5230;&#x4E0A;&#x4E00;&#x5C42;&#x8F93;&#x5165;&#x7684;&#x5F71;&#x54CD;&#xFF0C;$ \beta $&#x548C;$ \gamma $&#x662F;&#x72EC;&#x7ACB;&#x7684;&#xFF0C;&#x4E0E;&#x8F93;&#x5165;&#x65E0;&#x5173;&#xFF0C;&#x662F;&#x7F51;&#x7EDC;&#x540E;&#x6765;&#x52A0;&#x5165;&#x7684;&#xFF0C;&#x4F1A;&#x5728;&#x63A5;&#x4E0B;&#x6765;&#x8BAD;&#x7EC3;&#x8FC7;&#x7A0B;&#x4E2D;&#x4E0D;&#x65AD;&#x5B66;&#x4E60;&#x7684;&#xFF0C;&#x4E5F;&#x662F;&#x4E3A;&#x4E86;&#x5C0A;&#x91CD;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x5B66;&#x4E60;&#x7ED3;&#x679C;&#x3002;&#x56E0;&#x6B64;&#x8FD9;&#x4E24;&#x6B65;&#x662F;&#x6709;&#x5FC5;&#x8981;&#x7684;&#x3002; Normalization&#x4F18;&#x70B9; &#x89E3;&#x51B3;&#x4E86;ICS(Internal Covariate Shift&#xFF0C;&#x5185;&#x90E8;&#x534F;&#x53D8;&#x91CF;&#x504F;&#x79FB;)&#x95EE;&#x9898;&#x3002; &#x52A0;&#x5FEB;&#x5B66;&#x4E60;&#x901F;&#x5EA6;&#xFF0C;&#x9632;&#x6B62;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x73B0;&#x8C61;&#xFF0C;&#x56E0;&#x4E3A;&#x6807;&#x51C6;&#x5316;&#x540E;&#xFF0C;&#x4F1A;&#x5C06;&#x6570;&#x636E;&#x62C9;&#x56DE;&#x5230;0&#x9644;&#x8FD1;&#xFF0C;&#x5BF9;&#x4E8E;Sigmoid&#xFF0C;tanh&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x6765;&#x8BF4;&#xFF0C;&#x53EF;&#x80FD;&#x5C31;&#x4F1A;&#x4ECE;&#x9971;&#x548C;&#x533A;&#x62C9;&#x56DE;&#x5230;&#x7EBF;&#x6027;&#x533A;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x9632;&#x6B62;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x73B0;&#x8C61;&#x3002; &#x51CF;&#x5F31;&#x5BF9;&#x521D;&#x59CB;&#x5316;&#x7684;&#x4F9D;&#x8D56;&#x6027;&#xFF0C;&#x56E0;&#x4E3A;&#x53C2;&#x6570;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x6240;&#x4EE5;&#x521D;&#x59CB;&#x5316;&#x53C2;&#x6570;&#x65F6;&#xFF0C;&#x4E0D;&#x7528;&#x9650;&#x5236;&#x8F83;&#x5927;&#x3002; &#x53EF;&#x4EE5;&#x5BF9;&#x6297;over fitting&#xFF0C;&#x56E0;&#x4E3A;&#x4F1A;&#x5C06;&#x8F93;&#x5165;&#x8FDB;&#x884C;&#x53D8;&#x5316;&#xFF0C;&#x5F53;&#x8F93;&#x5165;&#x5BFC;&#x81F4;&#x5747;&#x503C;&#x4EA7;&#x751F;&#x504F;&#x79FB;&#xFF0C;&#x6CA1;&#x5173;&#x7CFB;&#xFF0C;&#x540E;&#x9762;&#x8FD8;&#x6709;Normalization&#xFF0C;&#x4F1A;&#x5BF9;&#x504F;&#x79FB;&#x8FDB;&#x884C;&#x4FEE;&#x6B63;&#xFF0C;&#x6240;&#x4EE5;&#x4F1A;&#x8D77;&#x5230;&#x4E00;&#x4E9B;&#x9632;&#x6B62;&#x8FC7;&#x62DF;&#x5408;&#x7684;&#x4F5C;&#x7528;&#x3002; &#x5E38;&#x89C1;&#x7684;Normalization&#x4E3A;&#x4E86;&#x8BF4;&#x660E;&#x7684;&#x6E05;&#x6670;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x8F93;&#x5165;&#x7684;feature map shape&#x8BB0;&#x4E3A;[N, H, W, C]&#xFF0C;&#x5176;&#x4E2D;N&#x4EE3;&#x8868;batch_size&#xFF0C;H&#xFF0C;W&#x4EE3;&#x8868;&#x7279;&#x5F81;&#x56FE;&#x7684;&#x9AD8;&#x548C;&#x5BBD;&#xFF0C;C&#x4EE3;&#x8868;&#x7279;&#x5F81;&#x56FE;&#x7684;&#x901A;&#x9053;&#x6570;&#x3002;&#x5E76;&#x4E14;&#x4E3A;&#x4E86;&#x76F4;&#x89C2;&#x8BF4;&#x660E;&#xFF0C;&#x5C06;feature map&#x770B;&#x4F5C;&#x4E00;&#x4E2A;&#x5B66;&#x6821;&#xFF0C;N&#x4EE3;&#x8868;&#x5E74;&#x7EA7;&#x6570;&#x91CF;&#xFF0C;&#x89C4;&#x5B9A;&#x503C;&#x4E3A;3&#xFF0C;C&#x4EE3;&#x8868;&#x6BCF;&#x4E2A;&#x5E74;&#x7EA7;&#x7684;&#x73ED;&#x7EA7;&#x6570;&#x91CF;&#xFF0C;&#x89C4;&#x5B9A;&#x503C;&#x4E3A;6&#xFF0C;H&#x548C;W&#x4EE3;&#x8868;&#x73ED;&#x7EA7;&#x7684;&#x6BCF;&#x4E00;&#x6392;&#x548C;&#x6BCF;&#x4E00;&#x5217;&#xFF0C;&#x89C4;&#x5B9A;&#x503C;&#x90FD;&#x4E3A;10&#x3002; BN(Batch Normalization&#xFF0C;2015)BN(Batch Normalization)&#xFF1A;&#x4FDD;&#x7559;&#x901A;&#x9053;&#x7684;&#x7EF4;&#x5EA6;C&#xFF0C;&#x5BF9;N&#xFF0C;H&#xFF0C;W&#x505A;C&#x6B21;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x76F8;&#x5F53;&#x4E8E;&#x5206;&#x522B;&#x6309;&#x7167;&#x73ED;&#x7EA7;&#x5C06;&#x6240;&#x6709;&#x5E74;&#x7EA7;&#x6240;&#x6709;&#x540C;&#x5B66;&#x7684;&#x6210;&#x7EE9;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;(&#x5982;&#x4E00;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#xFF0C;&#x4E8C;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#xFF0C;&#x4E09;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5C06;&#x4E00;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#xFF0C;&#x4E8C;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#xFF0C;&#x4E09;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x76F4;&#x5230;&#x5C06;&#x4E00;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#xFF0C;&#x4E8C;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#xFF0C;&#x4E09;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4E00;&#x5171;&#x505A;&#x4E86;6&#x6B21;&#x6807;&#x51C6;&#x5316;)&#x3002;batch_size&#x8D8A;&#x5927;&#xFF0C;&#x6548;&#x679C;&#x8D8A;&#x597D;&#xFF0C;&#x9002;&#x5408;&#x56FA;&#x5B9A;&#x6DF1;&#x5EA6;&#x7684;&#x524D;&#x5411;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;&#x5982;CNN&#xFF0C;&#x4E0D;&#x9002;&#x7528;&#x4E8E;RNN&#x3002; LN(Layer Normalization&#xFF0C;2016)LN(Layer Normalization)&#xFF1A;&#x4FDD;&#x7559;batch_size&#x7684;&#x7EF4;&#x5EA6;N&#xFF0C;&#x5BF9;H&#xFF0C;W&#xFF0C;C&#x505A;N&#x6B21;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x76F8;&#x5F53;&#x4E8E;&#x5206;&#x522B;&#x6309;&#x7167;&#x5E74;&#x7EA7;&#x5C06;&#x6240;&#x6709;&#x73ED;&#x7EA7;&#x6240;&#x6709;&#x540C;&#x5B66;&#x7684;&#x6210;&#x7EE9;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;(&#x5982;&#x4E00;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#xFF0C;&#x4E00;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#x76F4;&#x5230;&#x4E00;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5C06;&#x4E8C;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#xFF0C;&#x4E8C;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#x76F4;&#x5230;&#x4E8C;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x6700;&#x540E;&#x5C06;&#x4E09;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#xFF0C;&#x4E09;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#x76F4;&#x5230;&#x4E09;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4E00;&#x5171;&#x505A;&#x4E86;3&#x6B21;&#x6807;&#x51C6;&#x5316;)&#x3002;&#x901A;&#x9053;&#x6570;&#x8D8A;&#x5927;&#xFF0C;&#x6548;&#x679C;&#x8D8A;&#x597D;&#xFF0C;&#x4E0D;&#x4F9D;&#x8D56;batch_size&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x9002;&#x5408;&#x6DF1;&#x5EA6;&#x4E0D;&#x56FA;&#x5B9A;&#x7684;&#x7F51;&#x7EDC;&#xFF0C;&#x5982;RNN&#xFF0C;&#x4E0D;&#x9002;&#x7528;&#x4E8E;CNN&#x3002; IN(Instance Normalization&#xFF0C;2017)IN(Instance Normalization)&#xFF1A;&#x4FDD;&#x7559;batch_size&#x7684;&#x7EF4;&#x5EA6;N&#x548C;&#x901A;&#x9053;&#x7684;&#x7EF4;&#x5EA6;C&#xFF0C;&#x5BF9;H&#xFF0C;W&#x505A;NxC&#x6B21;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x76F8;&#x5F53;&#x4E8E;&#x5206;&#x522B;&#x6309;&#x7167;&#x5E74;&#x7EA7;&#x548C;&#x73ED;&#x7EA7;&#x5C06;&#x6240;&#x6709;&#x540C;&#x5B66;&#x7684;&#x6210;&#x7EE9;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;(&#x5982;&#x4E00;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4E00;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x76F4;&#x5230;&#x4E00;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5C06;&#x4E8C;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4E8C;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x76F4;&#x5230;&#x4E8C;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x6700;&#x540E;&#x5C06;&#x4E09;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4E09;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x76F4;&#x5230;&#x4E09;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4E00;&#x5171;&#x505A;&#x4E86;18&#x6B21;&#x6807;&#x51C6;&#x5316;)&#x3002;&#x6700;&#x521D;&#x7528;&#x4E8E;&#x751F;&#x6210;&#x5F0F;&#x5BF9;&#x6297;&#x7F51;&#x7EDC;&#x4E2D;&#x7684;&#x98CE;&#x683C;&#x8FC1;&#x79FB;&#xFF0C;&#x751F;&#x6210;&#x7ED3;&#x679C;&#x4F9D;&#x8D56;&#x4E8E;&#x67D0;&#x4E2A;&#x56FE;&#x50CF;&#x5B9E;&#x4F8B;&#xFF0C;&#x53EA;&#x5BF9;&#x7279;&#x5F81;&#x56FE;&#x7684;&#x9AD8;&#x548C;&#x5BBD;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4FDD;&#x6301;&#x56FE;&#x50CF;&#x5B9E;&#x4F8B;&#x4E4B;&#x95F4;&#x7684;&#x72EC;&#x7ACB;&#x3002; GN(Group Normalization&#xFF0C;2018)GN(Group Normalization)&#xFF1A;&#x4E3A;&#x4E86;&#x89E3;&#x51B3;BN&#x4E2D;&#x5BF9;&#x8F83;&#x5C0F;batch_size&#x6548;&#x679C;&#x8F83;&#x5DEE;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x5C06;&#x901A;&#x9053;&#x6570;C&#x5206;&#x4E3A;G&#x7EC4;&#xFF0C;&#x6BCF;&#x7EC4;&#x6709;C/G&#x4E2A;&#x901A;&#x9053;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x8FD9;&#x4E9B;&#x901A;&#x9053;&#x6570;&#x4E2D;&#x7684;&#x5143;&#x7D20;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x505A;NxC/G&#x6B21;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x5982;&#x679C;&#x5C06;&#x73ED;&#x7EA7;&#x6570;&#x91CF;&#x5206;&#x4E3A;2&#x7EC4;&#xFF0C;&#x76F8;&#x5F53;&#x4E8E;&#x5206;&#x522B;&#x6309;&#x7167;&#x5E74;&#x7EA7;&#x5148;&#x5C06;&#x73ED;&#x7EA7;&#x5206;&#x4E3A;2&#x7EC4;&#xFF0C;&#x4E00;&#x5171;&#x5206;&#x6210;6&#x7EC4;&#xFF0C;&#x7136;&#x540E;&#x5BF9;&#x6240;&#x6709;&#x7EC4;&#x6240;&#x6709;&#x540C;&#x5B66;&#x7684;&#x6210;&#x7EE9;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;(&#x5982;&#x4E00;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#xFF0C;&#x4E00;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#xFF0C;&#x4E00;&#x5E74;&#x7EA7;&#x4E09;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4E00;&#x5E74;&#x7EA7;&#x56DB;&#x73ED;&#xFF0C;&#x4E00;&#x5E74;&#x7EA7;&#x4E94;&#x73ED;&#xFF0C;&#x4E00;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5C06;&#x4E8C;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#xFF0C;&#x4E8C;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#xFF0C;&#x4E8C;&#x5E74;&#x7EA7;&#x4E09;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4E8C;&#x5E74;&#x7EA7;&#x56DB;&#x73ED;&#xFF0C;&#x4E8C;&#x5E74;&#x7EA7;&#x4E94;&#x73ED;&#xFF0C;&#x4E8C;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x6700;&#x540E;&#x5C06;&#x4E09;&#x5E74;&#x7EA7;&#x4E00;&#x73ED;&#xFF0C;&#x4E09;&#x5E74;&#x7EA7;&#x4E8C;&#x73ED;&#xFF0C;&#x4E09;&#x5E74;&#x7EA7;&#x4E09;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4E09;&#x5E74;&#x7EA7;&#x56DB;&#x73ED;&#xFF0C;&#x4E09;&#x5E74;&#x7EA7;&#x4E94;&#x73ED;&#xFF0C;&#x4E09;&#x5E74;&#x7EA7;&#x516D;&#x73ED;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x6807;&#x51C6;&#x5316;&#xFF0C;&#x4E00;&#x5171;&#x505A;&#x4E86;6&#x6B21;&#x6807;&#x51C6;&#x5316;)&#x3002;&#x5206;&#x7EC4;&#x4E4B;&#x540E;&#xFF0C;&#x4E0D;&#x4F9D;&#x8D56;batch_size&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x56E0;&#x6B64;&#x4E0D;&#x4F1A;&#x88AB;batch_size&#x7EA6;&#x675F;&#x3002; &#x5C0F;&#x7ED3;&#x2003;&#x2003;Normalization&#x662F;&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;Trick(&#x5C0F;&#x6280;&#x5DE7;)&#xFF0C;&#x81EA;&#x4ECE;Normalization&#x88AB;&#x63D0;&#x51FA;&#x4EE5;&#x540E;&#xFF0C;&#x51E0;&#x4E4E;&#x5404;&#x4E2A;&#x7F51;&#x7EDC;&#x90FD;&#x80FD;&#x770B;&#x5230;&#x5B83;&#x7684;&#x8EAB;&#x5F71;&#xFF0C;&#x7075;&#x6D3B;&#x638C;&#x63E1;&#x4E0D;&#x540C;Normalization&#xFF0C;&#x662F;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x9700;&#x8981;&#x8FBE;&#x6210;&#x7684;&#x76EE;&#x6807;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>常用技巧</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[各种上采样操作对比]]></title>
    <url>%2F2020%2F05%2F06%2Fdeep%20learning%20upsampling%2F</url>
    <content type="text"><![CDATA[Upsampling &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;Upsampling(&#x4E0A;&#x91C7;&#x6837;):&#x7B80;&#x5355;&#x7684;&#x8BF4;&#x5C31;&#x662F;&#x653E;&#x5927;&#x56FE;&#x50CF;&#xFF0C;&#x83B7;&#x5F97;&#x66F4;&#x5927;&#x7684;&#x5206;&#x8FA8;&#x7387;&#xFF0C;&#x4E0A;&#x91C7;&#x6837;&#x5BF9;&#x4E8E;&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4EFB;&#x52A1;&#x6765;&#x8BF4;&#x5E76;&#x4E0D;&#x662F;&#x5FC5;&#x987B;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x67D0;&#x4E9B;&#x573A;&#x5408;&#x4E2D;&#x5374;&#x5FC5;&#x987B;&#x8981;&#x4F7F;&#x7528;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x5728;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x4EFB;&#x52A1;&#x4E2D;&#xFF0C;&#x5982;&#x4F55;&#x9009;&#x62E9;&#x4E0A;&#x91C7;&#x6837;&#x7684;&#x65B9;&#x5F0F;&#x53EF;&#x80FD;&#x51B3;&#x5B9A;&#x7740;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x6548;&#x679C;&#x3002;&#x53EF;&#x80FD;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5BF9;&#x4E0A;&#x91C7;&#x6837;&#x4E0D;&#x662F;&#x5F88;&#x719F;&#x6089;&#xFF0C;&#x4F46;&#x662F;&#x5BF9;&#x4E8E;&#x4E0B;&#x91C7;&#x6837;&#x4E00;&#x5B9A;&#x90FD;&#x4E0D;&#x964C;&#x751F;&#xFF0C;&#x5178;&#x578B;&#x7684;&#x4E0B;&#x91C7;&#x6837;&#x6B65;&#x9AA4;&#x5C31;&#x662F;&#x6C60;&#x5316;&#x3002;&#x56E0;&#x6B64;&#x4E0A;&#x91C7;&#x6837;&#x4E5F;&#x53EF;&#x88AB;&#x770B;&#x4F5C;&#x662F;&#x6C60;&#x5316;&#x7684;&#x9006;&#x8FC7;&#x7A0B;&#x3002; Maxpooling-Indices(&#x6700;&#x5927;&#x6C60;&#x5316;&#x7D22;&#x5F15;)&#x4E0E;Upsampling(&#x4E0A;&#x91C7;&#x6837;)&#x548C;Deconvolution(&#x53CD;&#x5377;&#x79EF;)&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;&#x2003;&#x2003;Maxpooling-Indices(&#x6700;&#x5927;&#x6C60;&#x5316;&#x7D22;&#x5F15;)&#xFF1A;&#x53C8;&#x79F0;&#x4E3A;Unpooling(&#x53CD;&#x6C60;&#x5316;)&#xFF0C;&#x6C60;&#x5316;&#x540E;&#x8BB0;&#x5F55;&#x6700;&#x5927;&#x503C;&#x6240;&#x5728;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x5728;&#x53CD;&#x6C60;&#x5316;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x7ED9;&#x76F8;&#x5E94;&#x4F4D;&#x7F6E;&#x4E0A;&#x5199;&#x5165;&#x503C;&#xFF0C;&#x5176;&#x4ED6;&#x4F4D;&#x7F6E;&#x4E3A;0&#x3002;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x5E76;&#x4E0D;&#x5E38;&#x7528;&#xFF0C;&#x56E0;&#x4E3A;&#x5B58;&#x5728;&#x5927;&#x91CF;&#x7684;&#x7A00;&#x758F;&#x6570;&#x636E;&#xFF0C;&#x4F7F;&#x6A21;&#x578B;&#x6536;&#x655B;&#x901F;&#x5EA6;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x3002;&#x2003;&#x2003;Upsampling(&#x4E0A;&#x91C7;&#x6837;)&#xFF1A;&#x5C06;&#x8F93;&#x5165;resize&#x5230;&#x8BBE;&#x7F6E;&#x5927;&#x5C0F;&#xFF0C;&#x7136;&#x540E;&#x5229;&#x7528;&#x6307;&#x5B9A;&#x7684;&#x63D2;&#x503C;&#x65B9;&#x6CD5;&#x5BF9;&#x5468;&#x56F4;&#x7684;&#x503C;&#x8FDB;&#x884C;&#x63D2;&#x503C;&#xFF0C;&#x5E38;&#x7528;&#x6700;&#x8FD1;&#x90BB;&#x63D2;&#x503C;&#x548C;&#x53CC;&#x7EBF;&#x6027;&#x63D2;&#x503C;&#x3002;&#x56E0;&#x4E3A;&#x76F8;&#x90BB;&#x533A;&#x57DF;&#x7684;&#x50CF;&#x7D20;&#x548C;&#x7279;&#x5F81;&#x5E94;&#x8BE5;&#x662F;&#x76F8;&#x4F3C;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x7279;&#x522B;&#x5E38;&#x7528;&#xFF0C;&#x65E2;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#xFF0C;&#x4E5F;&#x4E0D;&#x4F1A;&#x5B58;&#x5728;&#x7A00;&#x758F;&#x6570;&#x636E;&#x3002;&#x2003;&#x2003;Deconvolution(&#x53CD;&#x5377;&#x79EF;)&#xFF1A;&#x672C;&#x8D28;&#x662F;&#x5377;&#x79EF;&#xFF0C;&#x6CE8;&#x610F;&#x53CD;&#x5377;&#x79EF;&#x5E76;&#x4E0D;&#x80FD;&#x4ECE;&#x5377;&#x79EF;&#x7684;&#x7ED3;&#x679C;&#x8FD4;&#x56DE;&#x5230;&#x5377;&#x79EF;&#x524D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x53EA;&#x80FD;&#x8FD4;&#x56DE;&#x5230;&#x5377;&#x79EF;&#x524D;&#x7684;&#x5C3A;&#x5BF8;&#x3002;&#x5377;&#x79EF;&#x901A;&#x8FC7;&#x8BBE;&#x7F6E;kernel_size&#x5377;&#x79EF;&#x6838;&#x5927;&#x5C0F;&#xFF0C;strides&#x6B65;&#x957F;&#x548C;padding&#x586B;&#x5145;&#x65B9;&#x5F0F;&#x53EF;&#x4EE5;&#x5C06;&#x56FE;&#x50CF;&#x7684;&#x5206;&#x8FA8;&#x7387;&#x964D;&#x4F4E;&#xFF0C;&#x76F8;&#x53CD;&#x7684;&#x53CD;&#x5377;&#x79EF;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8BBE;&#x7F6E;kernel_size&#x5377;&#x79EF;&#x6838;&#x5927;&#x5C0F;&#xFF0C;strides&#x6B65;&#x957F;&#x548C;padding&#x586B;&#x5145;&#x65B9;&#x5F0F;&#x5148;&#x5BF9;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x586B;&#x5145;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8FDB;&#x884C;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x56FE;&#x50CF;&#x7684;&#x5206;&#x8FA8;&#x7387;&#x589E;&#x52A0;&#x3002;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x4E0D;&#x63A8;&#x8350;&#x7ECF;&#x5E38;&#x4F7F;&#x7528;&#xFF0C;&#x56E0;&#x4E3A;&#x5B58;&#x5728;&#x5927;&#x91CF;&#x53C2;&#x6570;&#xFF0C;&#x800C;&#x4E14;&#x53EF;&#x80FD;&#x4F1A;&#x5B58;&#x5728;&#x68CB;&#x76D8;&#x683C;&#x6548;&#x5E94;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x68CB;&#x76D8;&#x683C;&#x53EF;&#x89C6;&#x5316;&#x3002; &#x5C0F;&#x7ED3;&#x2003;&#x2003;&#x7531;&#x4E8E;CNN&#x7ECF;&#x5E38;&#x4F7F;&#x7528;&#x6C60;&#x5316;&#x6765;&#x7F29;&#x5C0F;&#x56FE;&#x50CF;&#x5C3A;&#x5BF8;&#xFF0C;&#x65B9;&#x4FBF;&#x63D0;&#x53D6;&#x66F4;&#x6DF1;&#x5C42;&#x6B21;&#x7684;&#x7279;&#x5F81;&#xFF0C;&#x56E0;&#x6B64;&#x4E0B;&#x91C7;&#x6837;&#x662F;CNN&#x7F51;&#x7EDC;&#x91CD;&#x8981;&#x7684;&#x7EC4;&#x6210;&#x90E8;&#x5206;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x67D0;&#x4E9B;&#x7279;&#x6B8A;&#x573A;&#x666F;&#x9700;&#x8981;&#x5BF9;&#x56FE;&#x50CF;&#x5927;&#x5C0F;&#x8FDB;&#x884C;&#x590D;&#x539F;&#xFF0C;&#x56E0;&#x6B64;&#x4E0A;&#x91C7;&#x6837;&#x5E94;&#x8FD0;&#x800C;&#x751F;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x60F3;&#x7CFB;&#x7EDF;&#x7684;&#x5B66;&#x4E60;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;&#x4E0A;&#x91C7;&#x6837;&#x77E5;&#x8BC6;&#x70B9;&#x662F;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x7684;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>常用技巧</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SSD]]></title>
    <url>%2F2020%2F05%2F05%2FObject%20detection%20SSD%2F</url>
    <content type="text"><![CDATA[SSD &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;SSD(Single Shot MultiBox Detector):&#x4E8E;2016&#x5E74;&#x53D1;&#x8868;&#x5728;ECCV&#x4E0A;&#x3002;Single Shot MultiBox Detector&#x7684;&#x5B57;&#x9762;&#x610F;&#x601D;&#x4E3A;&#xFF1A;&#x5355;&#x6B21;&#x591A;&#x6846;&#x68C0;&#x6D4B;&#x5668;&#xFF0C;&#x987E;&#x540D;&#x601D;&#x4E49;&#xFF0C;&#x5C5E;&#x4E8E;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x7B97;&#x6CD5;&#x4E2D;&#x4E00;&#x6B65;&#x6CD5;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x800C;&#x4E14;&#x5229;&#x7528;&#x5230;&#x591A;&#x4E2A;&#x5148;&#x9A8C;&#x6846;&#x7684;&#x4E00;&#x79CD;&#x7B97;&#x6CD5;&#xFF0C;&#x662F;&#x4E00;&#x6B65;&#x6CD5;&#x7684;&#x5178;&#x578B;&#x4EE3;&#x8868;&#x3002; SSD&#x7279;&#x70B9;&#x2003;&#x2003;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x4E3A;VGG&#xFF0C;&#x6784;&#x5EFA;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x8F83;&#x4E3A;&#x7B80;&#x5355;&#x3002;&#x2003;&#x2003;&#x9488;&#x5BF9;&#x4E8E;&#x4E0D;&#x540C;&#x5C3A;&#x5EA6;&#x7684;&#x7279;&#x5F81;&#x5C42;&#x8BBE;&#x8BA1;&#x4E0D;&#x540C;&#x5927;&#x5C0F;&#x7684;&#x5148;&#x9A8C;&#x6846;&#xFF0C;&#x878D;&#x5408;&#x4E0D;&#x540C;&#x7279;&#x5F81;&#x5C42;&#x7684;&#x68C0;&#x6D4B;&#x4FE1;&#x606F;&#x5BF9;&#x5148;&#x9A8C;&#x6846;&#x4E2D;&#x662F;&#x5426;&#x5305;&#x542B;&#x7269;&#x4F53;&#x8FDB;&#x884C;&#x5206;&#x7C7B;&#x3002; SSD&#x56FE;&#x50CF;&#x5206;&#x6790; TensorFlow2.0&#x5B9E;&#x73B0;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123import tensorflow as tfimport tensorflow.keras as kerasclass Convs(keras.layers.Layer): def __init__(self, filters, times=1, kernel_size=(3, 3), strides=(1, 1), padding=&apos;same&apos;, dilation_rate=(1, 1), activation=None, maxpooling=False): super(Convs, self).__init__() self.blocks = keras.Sequential() for i in range(times): self.blocks.add(keras.layers.Conv2D(filters, kernel_size=kernel_size, strides=strides, padding=padding, dilation_rate=dilation_rate, activation=activation)) if maxpooling: self.blocks.add(keras.layers.MaxPool2D((2, 2), (2, 2), padding=&apos;same&apos;)) def call(self, inputs, **kwargs): return self.blocks(inputs)class SSD(keras.Model): def __init__(self): super(SSD, self).__init__() self.block1 = keras.Sequential(name=&apos;Conv_block1&apos;) self.block1.add(Convs(64, 2, activation=&apos;relu&apos;, maxpooling=True)) self.block1.add(Convs(128, 2, activation=&apos;relu&apos;, maxpooling=True)) self.block1.add(Convs(256, 3, activation=&apos;relu&apos;, maxpooling=True)) self.block1.add(Convs(512, 3, activation=&apos;relu&apos;)) self.feature1_reg = keras.Sequential([Convs(4 * 4), keras.layers.Flatten()], name=&apos;Reg_1&apos;) self.feature1_cls = keras.Sequential([Convs(4 * 21), keras.layers.Flatten()], name=&apos;Cls_1&apos;) self.block2 = keras.Sequential(name=&apos;Conv_block2&apos;) self.block2.add(keras.layers.MaxPool2D((2, 2), (2, 2), padding=&apos;same&apos;)) self.block2.add(Convs(512, 3, activation=&apos;relu&apos;)) self.block2.add(keras.layers.MaxPool2D((3, 3), (1, 1), padding=&apos;same&apos;)) self.block2.add(Convs(1024, dilation_rate=(6, 6), activation=&apos;relu&apos;)) self.block2.add(Convs(1024, kernel_size=(1, 1), activation=&apos;relu&apos;)) self.feature2_reg = keras.Sequential([Convs(6 * 4), keras.layers.Flatten()], name=&apos;Reg_2&apos;) self.feature2_cls = keras.Sequential([Convs(6 * 21), keras.layers.Flatten()], name=&apos;Cls_2&apos;) self.block3 = keras.Sequential(name=&apos;Conv_block3&apos;) self.block3.add(Convs(256, kernel_size=(1, 1), activation=&apos;relu&apos;)) self.block3.add(Convs(512, kernel_size=(3, 3), strides=(2, 2), activation=&apos;relu&apos;)) self.feature3_reg = keras.Sequential([Convs(6 * 4), keras.layers.Flatten()], name=&apos;Reg_3&apos;) self.feature3_cls = keras.Sequential([Convs(6 * 21), keras.layers.Flatten()], name=&apos;Cls_3&apos;) self.block4 = keras.Sequential(name=&apos;Conv_block4&apos;) self.block4.add(Convs(128, kernel_size=(1, 1), activation=&apos;relu&apos;)) self.block4.add(Convs(256, kernel_size=(3, 3), strides=(2, 2), activation=&apos;relu&apos;)) self.feature4_reg = keras.Sequential([Convs(6 * 4), keras.layers.Flatten()], name=&apos;Reg_4&apos;) self.feature4_cls = keras.Sequential([Convs(6 * 21), keras.layers.Flatten()], name=&apos;Cls_4&apos;) self.block5 = keras.Sequential(name=&apos;Conv_block5&apos;) self.block5.add(Convs(128, kernel_size=(1, 1), activation=&apos;relu&apos;)) self.block5.add(Convs(256, kernel_size=(3, 3), padding=&apos;valid&apos;, activation=&apos;relu&apos;)) self.feature5_reg = keras.Sequential([Convs(4 * 4), keras.layers.Flatten()], name=&apos;Reg_5&apos;) self.feature5_cls = keras.Sequential([Convs(4 * 21), keras.layers.Flatten()], name=&apos;Cls_5&apos;) self.block6 = keras.Sequential(name=&apos;Conv_block6&apos;) self.block6.add(Convs(128, kernel_size=(1, 1), activation=&apos;relu&apos;)) self.block6.add(Convs(256, kernel_size=(3, 3), padding=&apos;valid&apos;, activation=&apos;relu&apos;)) self.feature6_reg = keras.Sequential([Convs(4 * 4), keras.layers.Flatten()], name=&apos;Reg_6&apos;) self.feature6_cls = keras.Sequential([Convs(4 * 21), keras.layers.Flatten()], name=&apos;Cls_6&apos;) self.concatenate_reg = keras.layers.Concatenate(name=&apos;Concatenate_Reg&apos;) self.concatenate_cls = keras.layers.Concatenate(name=&apos;Concatenate_Cls&apos;) self.reshape_reg = keras.layers.Reshape((8732, 4), name=&apos;Reshape_Reg&apos;) self.reshape_cls = keras.layers.Reshape((8732, 21), name=&apos;Reshape_Cls&apos;) self.softmax = keras.layers.Softmax(name=&apos;Softmax&apos;) self.concatenate = keras.layers.Concatenate(name=&apos;Concatenate&apos;) def call(self, inputs, training=None, mask=None): block1 = self.block1(inputs) l2 = tf.nn.l2_normalize(block1) feature1_reg = self.feature1_reg(l2) feature1_cls = self.feature1_cls(l2) block2 = self.block2(block1) feature2_reg = self.feature2_reg(block2) feature2_cls = self.feature2_cls(block2) block3 = self.block3(block2) feature3_reg = self.feature3_reg(block3) feature3_cls = self.feature3_cls(block3) block4 = self.block4(block3) feature4_reg = self.feature4_reg(block4) feature4_cls = self.feature4_cls(block4) block5 = self.block5(block4) feature5_reg = self.feature5_reg(block5) feature5_cls = self.feature5_cls(block5) block6 = self.block6(block5) feature6_reg = self.feature6_reg(block6) feature6_cls = self.feature6_cls(block6) concatenate_reg = self.concatenate_reg([feature1_reg, feature2_reg, feature3_reg, feature4_reg, feature5_reg, feature6_reg]) concatenate_cls = self.concatenate_cls([feature1_cls, feature2_cls, feature3_cls, feature4_cls, feature5_cls, feature6_cls]) reshape_reg = self.reshape_reg(concatenate_reg) reshape_cls = self.reshape_cls(concatenate_cls) softmax = self.softmax(reshape_cls) output = self.concatenate([reshape_reg, softmax]) return outputif __name__ == &apos;__main__&apos;: model = SSD() model.build(input_shape=(None, 300, 300, 3)) model.summary() Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E; project shape train_imgs(&#x8BAD;&#x7EC3;&#x96C6;&#x56FE;&#x50CF;&#x6587;&#x4EF6;&#x5939;) annotations(&#x8BAD;&#x7EC3;&#x96C6;&#x6807;&#x7B7E;&#x6587;&#x4EF6;&#x5939;) test_imgs(&#x6D4B;&#x8BD5;&#x96C6;&#x56FE;&#x50CF;&#x6587;&#x4EF6;&#x5939;) SSD_weight(&#x6A21;&#x578B;&#x6743;&#x91CD;&#x6587;&#x4EF6;&#x5939;) SSD_test_result(&#x6D4B;&#x8BD5;&#x96C6;&#x7ED3;&#x679C;&#x6587;&#x4EF6;&#x5939;) SSD.py &#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E; &#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x548C;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x662F;&#x4E24;&#x79CD;&#x4E0D;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x5DE5;&#x7A0B;&#x9879;&#x76EE;&#xFF0C;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x5B9E;&#x6218;&#x5904;&#x7406;&#x6BD4;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x56F0;&#x96BE;&#x7684;&#x591A;&#xFF0C;&#x9996;&#x5148;&#x8981;&#x8BFB;&#x53D6;&#x771F;&#x5B9E;&#x6846;&#x4FE1;&#x606F;&#xFF0C;&#x5C06;&#x5176;&#x4FDD;&#x5B58;&#x4E0B;&#x6765;&#xFF0C;&#x4E3A;&#x4E86;&#x540E;&#x9762;&#x7F16;&#x7801;&#x4F7F;&#x7528;&#x3002; &#x5EFA;&#x7ACB;&#x5148;&#x9A8C;&#x6846;&#xFF0C;&#x6839;&#x636E;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#xFF0C;&#x5728;&#x4E0D;&#x540C;&#x7279;&#x5F81;&#x5C42;&#x4E0A;&#x5EFA;&#x7ACB;&#x4E0D;&#x540C;&#x7684;&#x5148;&#x9A8C;&#x6846;&#xFF0C;&#x5148;&#x9A8C;&#x6846;&#x7684;&#x603B;&#x4E2A;&#x6570;&#x4E3A;&#x6BCF;&#x4E2A;&#x56DE;&#x5F52;&#x5206;&#x7C7B;&#x7279;&#x5F81;&#x5C42;&#x7684;&#x50CF;&#x7D20;&#x70B9;&#x4E2A;&#x6570;x&#x6BCF;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x4E0A;&#x7684;&#x5148;&#x9A8C;&#x6846;&#x4E2A;&#x6570;&#x3002;&#x4EE5;&#x8BBA;&#x6587;&#x4E2D;&#x7684;&#x5148;&#x9A8C;&#x6846;&#x4E3A;&#x4F8B;&#xFF0C;&#x7279;&#x5F81;&#x5C42;&#x6709;6&#x4E2A;&#xFF0C;&#x5927;&#x5C0F;&#x5206;&#x522B;&#x4E3A;38x38&#xFF0C;19x19&#xFF0C;10x10&#xFF0C;5x5&#xFF0C;3x3&#xFF0C;1x1&#xFF0C;&#x7279;&#x5F81;&#x5C42;&#x4E0A;&#x6BCF;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x7684;&#x5148;&#x9A8C;&#x6846;&#x4E2A;&#x6570;&#x5206;&#x522B;&#x4E3A;4&#xFF0C;6&#xFF0C;6&#xFF0C;6&#xFF0C;4&#xFF0C;4&#xFF0C;&#x6545;&#x5148;&#x9A8C;&#x6846;&#x603B;&#x6570;&#x4E3A;38x38x4+19x19x6+10x10x6+5x5x6+3x3x4+1x1x4=8732 &#x6839;&#x636E;&#x771F;&#x5B9E;&#x6846;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x548C;&#x6240;&#x6709;&#x5148;&#x9A8C;&#x6846;&#x8BA1;&#x7B97;IOU&#xFF0C;&#x5C06;IOU&#x5927;&#x4E8E;&#x8BBE;&#x5B9A;&#x503C;&#x7684;&#x8BB0;&#x5F55;&#x4E0B;&#x6765;&#xFF0C;&#x4F5C;&#x4E3A;&#x6B63;&#x6837;&#x672C;&#x3002;&#x7136;&#x540E;&#x8FDB;&#x884C;&#x7F16;&#x7801;&#xFF0C;&#x5728;&#x6240;&#x5C5E;&#x7C7B;&#x522B;&#x7684;&#x7F6E;&#x4FE1;&#x5EA6;&#x4E0A;&#x9762;&#x7F6E;1&#xFF0C;&#x5176;&#x4ED6;&#x7C7B;&#x522B;&#x7F6E;&#x4FE1;&#x5EA6;&#x7F6E;0&#xFF0C;&#x5E76;&#x8BA1;&#x7B97;&#x6B63;&#x6837;&#x672C;&#x5148;&#x9A8C;&#x6846;&#x7684;&#x4E2D;&#x5FC3;&#x5750;&#x6807;&#x4E0E;&#x5BBD;&#x9AD8;&#x548C;&#x771F;&#x5B9E;&#x6846;&#x7684;&#x4E2D;&#x5FC3;&#x5750;&#x6807;&#x4E0E;&#x5BBD;&#x9AD8;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x5F02;&#x3002;&#x8F93;&#x51FA;(batch_size, num_prior, num_class + 1 + 4)&#xFF0C;num_prior&#x4E3A;&#x5148;&#x9A8C;&#x6846;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x6BCF;&#x4E2A;&#x5148;&#x9A8C;&#x6846;&#x6709;num_class + 1 + 4&#x4E2A;&#x503C;&#xFF0C;num_class&#x4EE3;&#x8868;&#x5C5E;&#x4E8E;&#x67D0;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#x7684;&#x7F6E;&#x4FE1;&#x5EA6;&#xFF0C;1&#x4EE3;&#x8868;&#x5C5E;&#x4E8E;&#x80CC;&#x666F;&#x7684;&#x7F6E;&#x4FE1;&#x5EA6;&#xFF0C;4&#x4EE3;&#x8868;&#x4E2D;&#x5FC3;&#x5750;&#x6807;&#x548C;&#x5BBD;&#x9AD8;&#x76F8;&#x5BF9;&#x771F;&#x5B9E;&#x6846;&#x7684;&#x5DEE;&#x5F02;&#x3002;&#x8981;&#x548C;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x7EF4;&#x5EA6;&#x76F8;&#x5339;&#x914D;&#xFF0C;&#x5373;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x5165;&#x5927;&#x5C0F;&#x4E3A;(batch_size, height, width, 3)&#xFF0C;&#x8F93;&#x51FA;&#x5927;&#x5C0F;&#x4E3A;(batch_size, num_prior, num_class + 1 + 4)&#x3002;IOU(Intersection Over Union&#xFF0C;&#x4EA4;&#x5E76;&#x6BD4;)&#xFF1A;&#x7528;&#x4E8E;&#x8BC4;&#x4F30;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x7B97;&#x6CD5;&#x6027;&#x80FD;&#x7684;&#x6307;&#x6807;&#x662F;&#x5E73;&#x5747;IOU&#xFF0C;&#x4EA4;&#x5E76;&#x6BD4;&#x4E5F;&#x975E;&#x5E38;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x7B97;&#x6CD5;&#x7684;&#x7ED3;&#x679C;&#x4E0E;&#x771F;&#x5B9E;&#x7269;&#x4F53;&#x8FDB;&#x884C;&#x4EA4;&#x8FD0;&#x7B97;&#x7684;&#x7ED3;&#x679C;&#x9664;&#x4EE5;&#x8FDB;&#x884C;&#x5E76;&#x8FD0;&#x7B97;&#x7684;&#x7ED3;&#x679C;&#x3002;&#x901A;&#x8FC7;&#x4E0B;&#x56FE;&#x53EF;&#x4EE5;&#x76F4;&#x89C2;&#x7684;&#x770B;&#x51FA;IOU&#x7684;&#x8BA1;&#x7B97;&#x65B9;&#x6CD5;&#x3002; &#x8BBE;&#x8BA1;&#x635F;&#x5931;&#x51FD;&#x6570;&#xFF0C;&#x56E0;&#x4E3A;&#x5148;&#x9A8C;&#x6846;&#x4E2D;&#x5927;&#x90E8;&#x5206;&#x90FD;&#x662F;&#x8D1F;&#x6837;&#x672C;&#xFF0C;&#x56E0;&#x6B64;&#x4E0D;&#x80FD;&#x76F4;&#x63A5;&#x8BA1;&#x7B97;&#x635F;&#x5931;&#x51FD;&#x6570;&#xFF0C;&#x9996;&#x5148;&#x8981;&#x5BF9;&#x6B63;&#x8D1F;&#x6837;&#x672C;&#x8FDB;&#x884C;&#x6BD4;&#x4F8B;&#x8C03;&#x6574;&#x3002;&#x4E00;&#x822C;&#x9009;&#x62E9;&#x6B63;&#x8D1F;&#x6837;&#x672C;&#x6BD4;&#x4F8B;&#x4E3A;1&#xFF1A;3&#xFF0C;&#x7136;&#x540E;&#x4F7F;&#x7528;&#x4EA4;&#x53C9;&#x71B5;&#x635F;&#x5931;&#x51FD;&#x6570;&#x8BA1;&#x7B97;&#x6B63;&#x8D1F;&#x6837;&#x672C;&#x7684;&#x5206;&#x7C7B;&#x635F;&#x5931;&#xFF0C;&#x4F7F;&#x7528;smooth L1 loss&#x8BA1;&#x7B97;&#x6B63;&#x6837;&#x672C;&#x7684;&#x5B9A;&#x4F4D;&#x635F;&#x5931;&#x3002; &#x642D;&#x5EFA;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;&#x8BBE;&#x7F6E;&#x5408;&#x9002;&#x53C2;&#x6570;&#xFF0C;&#x8FDB;&#x884C;&#x8BAD;&#x7EC3;&#x3002; &#x9884;&#x6D4B;&#x65F6;&#xFF0C;&#x9700;&#x8981;&#x6839;&#x636E;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x8FDB;&#x884C;&#x9006;&#x5411;&#x89E3;&#x7801;(&#x7F16;&#x7801;&#x7684;&#x53CD;&#x8FC7;&#x7A0B;)&#xFF0C;&#x6839;&#x636E;&#x7F6E;&#x4FE1;&#x5EA6;&#xFF0C;&#x9009;&#x62E9;&#x975E;&#x80CC;&#x666F;&#x7F6E;&#x4FE1;&#x5EA6;&#x5927;&#x4E8E;&#x8BBE;&#x5B9A;&#x503C;&#x7684;&#x5148;&#x9A8C;&#x6846;&#x4F5C;&#x4E3A;&#x5019;&#x9009;&#x6846;&#xFF0C;&#x5E76;&#x4E14;&#x8BE5;&#x6846;&#x7684;&#x7C7B;&#x522B;&#x8BBE;&#x4E3A;&#x7F6E;&#x4FE1;&#x5EA6;&#x6700;&#x5927;&#x7D22;&#x5F15;&#x5BF9;&#x5E94;&#x7684;&#x7C7B;&#x522B;&#xFF0C;&#x5982;&#x6700;&#x5927;&#x503C;&#x7684;&#x7D22;&#x5F15;&#x4E3A;2&#xFF0C;&#x5219;&#x8BE5;&#x9884;&#x6D4B;&#x6846;&#x9884;&#x6D4B;&#x7684;&#x7269;&#x4F53;&#x7C7B;&#x522B;&#x662F;&#x7B2C;&#x4E8C;&#x7C7B;&#x3002;&#x7136;&#x540E;&#x6839;&#x636E;&#x5148;&#x9A8C;&#x6846;&#x7684;&#x5750;&#x6807;&#x548C;4&#x4E2A;&#x56DE;&#x5F52;&#x53C2;&#x6570;&#x786E;&#x5B9A;&#x5019;&#x9009;&#x6846;&#x7684;&#x5DE6;&#x4E0A;&#x89D2;&#x548C;&#x53F3;&#x4E0B;&#x89D2;&#x5750;&#x6807;&#x3002;&#x5BF9;&#x6BCF;&#x4E00;&#x7C7B;&#x5019;&#x9009;&#x6846;&#x8FDB;&#x884C;NMS&#x5F97;&#x5230;&#x9884;&#x6D4B;&#x6846;&#xFF0C;&#x5E76;&#x4E14;&#x5728;&#x56FE;&#x50CF;&#x4E0A;&#x753B;&#x51FA;&#x9884;&#x6D4B;&#x6846;&#xFF0C;&#x5E76;&#x4E14;&#x6807;&#x51FA;&#x7F6E;&#x4FE1;&#x5EA6;&#x5373;&#x53EF;&#x5B8C;&#x6210;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x4EFB;&#x52A1;&#x3002;NMS(Non-Maximum Suppression&#xFF0C;&#x975E;&#x6781;&#x5927;&#x503C;&#x6291;&#x5236;)&#xFF1A;&#x7B80;&#x5355;&#x5730;&#x8BF4;&#xFF0C;&#x4E0D;&#x662F;&#x6700;&#x5927;&#x7684;&#x6211;&#x4E0D;&#x8981;&#xFF0C;&#x5728;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x4E2D;&#xFF0C;&#x5F80;&#x5F80;&#x56FE;&#x50CF;&#x4E0A;&#x5B58;&#x5728;&#x5927;&#x91CF;&#x5148;&#x9A8C;&#x6846;&#xFF0C;&#x4F1A;&#x5BFC;&#x81F4;&#x5F88;&#x591A;&#x9644;&#x8FD1;&#x7684;&#x6846;&#x90FD;&#x4F1A;&#x9884;&#x6D4B;&#x51FA;&#x540C;&#x4E00;&#x4E2A;&#x7269;&#x4F53;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x53EA;&#x4FDD;&#x7559;&#x6700;&#x5927;&#x7684;&#x4E00;&#x4E2A;&#x9884;&#x6D4B;&#x7ED3;&#x679C;&#xFF0C;&#x8FD9;&#x5C31;&#x662F;&#x975E;&#x6781;&#x5927;&#x503C;&#x6291;&#x5236;&#x3002;&#x6B65;&#x9AA4;&#xFF1A;(1)&#x4ECE;&#x6700;&#x5927;&#x6982;&#x7387;&#x77E9;&#x5F62;&#x6846;F&#x5F00;&#x59CB;&#xFF0C;&#x5206;&#x522B;&#x5224;&#x65AD;A~E&#x4E0E;F&#x7684;IOU&#x662F;&#x5426;&#x5927;&#x4E8E;&#x67D0;&#x4E2A;&#x8BBE;&#x5B9A;&#x7684;&#x9608;&#x503C;&#xFF0C;&#x5047;&#x8BBE;B&#x3001;D&#x4E0E;F&#x7684;&#x91CD;&#x53E0;&#x5EA6;&#x8D85;&#x8FC7;&#x9608;&#x503C;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x6254;&#x6389;B&#x3001;D&#xFF1B;&#x5E76;&#x6807;&#x8BB0;&#x7B2C;&#x4E00;&#x4E2A;&#x77E9;&#x5F62;&#x6846;F&#xFF0C;&#x662F;&#x6211;&#x4EEC;&#x4FDD;&#x7559;&#x4E0B;&#x6765;&#x7684;&#x3002;(2)&#x4ECE;&#x5269;&#x4E0B;&#x7684;&#x77E9;&#x5F62;&#x6846;A&#x3001;C&#x3001;E&#x4E2D;&#xFF0C;&#x9009;&#x62E9;&#x6982;&#x7387;&#x6700;&#x5927;&#x7684;E&#xFF0C;&#x7136;&#x540E;&#x5224;&#x65AD;E&#x4E0E;A&#x3001;C&#x7684;&#x91CD;&#x53E0;&#x5EA6;&#xFF0C;&#x91CD;&#x53E0;&#x5EA6;&#x5927;&#x4E8E;&#x4E00;&#x5B9A;&#x7684;&#x9608;&#x503C;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x6254;&#x6389;&#xFF1B;&#x5E76;&#x6807;&#x8BB0;E&#x662F;&#x6211;&#x4EEC;&#x4FDD;&#x7559;&#x4E0B;&#x6765;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x77E9;&#x5F62;&#x6846;&#x3002;(3)&#x91CD;&#x590D;&#x6B65;&#x9AA4;(2)&#xFF0C;&#x76F4;&#x5230;&#x6240;&#x6709;&#x7684;&#x6846;&#x90FD;&#x88AB;&#x629B;&#x5F03;&#x6216;&#x8005;&#x4FDD;&#x7559;&#x3002; &#x5C0F;&#x6280;&#x5DE7; &#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x7EF4;&#x5EA6;&#x4E3A;(batch_size, num_prior, num_class + 1 + 4)&#xFF0C;&#x6B64;&#x6570;&#x636E;&#x96C6;&#x4E3A;3&#x7C7B;&#xFF0C;&#x56E0;&#x6B64;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;&#x662F;8&#x3002;&#x6BCF;&#x4E2A;&#x5148;&#x9A8C;&#x6846;&#x6709;8&#x4E2A;&#x7D22;&#x5F15;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;0&#x5219;&#x4EE3;&#x8868;&#x80CC;&#x666F;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;1&#x5219;&#x4EE3;&#x8868;&#x5706;&#x5F62;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;2&#x5219;&#x4EE3;&#x8868;&#x4E09;&#x89D2;&#x5F62;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;3&#x5219;&#x4EE3;&#x8868;&#x6B63;&#x65B9;&#x5F62;&#xFF0C;&#x540E;&#x9762;4&#x4E2A;&#x7D22;&#x5F15;&#x4EE3;&#x8868;&#x5148;&#x9A8C;&#x6846;&#x7684;&#x56DE;&#x5F52;&#x53C2;&#x6570;&#xFF0C;&#x7528;&#x6765;&#x5BF9;&#x5148;&#x9A8C;&#x6846;&#x8FDB;&#x884C;&#x8C03;&#x6574;&#x5F97;&#x5230;&#x9884;&#x6D4B;&#x6846;&#x3002; &#x5B9E;&#x9645;&#x7684;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x5E38;&#x5E38;&#x8FD8;&#x9700;&#x8981;&#x5BF9;&#x6570;&#x636E;&#x96C6;&#x8FDB;&#x884C;&#x5927;&#x5C0F;&#x8C03;&#x6574;&#x548C;&#x589E;&#x5F3A;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x4E3A;&#x4E86;&#x7B80;&#x5355;&#x8D77;&#x89C1;&#xFF0C;&#x6CA1;&#x6709;&#x8FDB;&#x884C;&#x590D;&#x6742;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5E94;&#x7528;&#x4E2D;&#x8981;&#x8BB0;&#x5F97;&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x7684;&#x9700;&#x8981;&#xFF0C;&#x5BF9;&#x56FE;&#x50CF;&#x8FDB;&#x884C;resize&#x6216;&#x8005;padding&#xFF0C;&#x7136;&#x540E;&#x65CB;&#x8F6C;&#xFF0C;&#x5BF9;&#x6BD4;&#x5EA6;&#x589E;&#x5F3A;&#xFF0C;&#x4EFF;&#x5C04;&#x8FD0;&#x7B97;&#x7B49;&#x7B49;&#x64CD;&#x4F5C;&#xFF0C;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x9C81;&#x68D2;&#x6027;&#xFF0C;&#x5E76;&#x4E14;&#x5B9E;&#x9645;&#x4E2D;&#x7684;&#x56FE;&#x50CF;&#x4E0D;&#x4E00;&#x5B9A;&#x6309;&#x7167;&#x987A;&#x5E8F;&#x547D;&#x540D;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x5E94;&#x7528;&#x4E2D;&#x4E5F;&#x8981;&#x6CE8;&#x610F;&#x56FE;&#x50CF;&#x8BFB;&#x53D6;&#x7684;&#x6587;&#x4EF6;&#x540D;&#x3002; &#x8BBE;&#x7F6E;&#x4E86;&#x6743;&#x91CD;&#x7684;&#x4FDD;&#x5B58;&#x65B9;&#x5F0F;&#xFF0C;&#x5B66;&#x4E60;&#x7387;&#x7684;&#x4E0B;&#x964D;&#x65B9;&#x5F0F;&#x548C;&#x65E9;&#x505C;&#x65B9;&#x5F0F;&#x3002; &#x4F7F;&#x7528;yield&#x5173;&#x952E;&#x5B57;&#xFF0C;&#x4EA7;&#x751F;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#xFF0C;&#x4E0D;&#x7528;&#x5C06;&#x6240;&#x6709;&#x7684;&#x6570;&#x636E;&#x90FD;&#x4FDD;&#x5B58;&#x4E0B;&#x6765;&#xFF0C;&#x5927;&#x5927;&#x8282;&#x7EA6;&#x5185;&#x5B58;&#x3002; &#x5176;&#x4E2D;&#x5C06;1000&#x4E2A;&#x6570;&#x636E;&#xFF0C;&#x5206;&#x6210;800&#x4E2A;&#x8BAD;&#x7EC3;&#x96C6;&#xFF0C;100&#x4E2A;&#x9A8C;&#x8BC1;&#x96C6;&#x548C;100&#x4E2A;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x81EA;&#x884C;&#x4FEE;&#x6539;&#x3002; &#x6CE8;&#x610F;&#x5176;&#x4E2D;&#x7684;&#x4E00;&#x4E9B;&#x7EF4;&#x5EA6;&#x53D8;&#x6362;&#x548C;numpy&#xFF0C;tensorflow&#x5E38;&#x7528;&#x64CD;&#x4F5C;&#xFF0C;&#x5426;&#x5219;&#x5728;&#x9605;&#x8BFB;&#x4EE3;&#x7801;&#x65F6;&#x53EF;&#x80FD;&#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x56F0;&#x96BE;&#x3002; SSD&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x4E3A;VGG&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x90E8;&#x5206;&#x5185;&#x5BB9;&#xFF0C;&#x9009;&#x62E9;&#x5176;&#x4ED6;&#x7684;&#x7F51;&#x7EDC;&#x8FDB;&#x884C;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#xFF0C;&#x6BD4;&#x8F83;&#x4E0D;&#x540C;&#x7F51;&#x7EDC;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x8FD0;&#x884C;&#x901F;&#x5EA6;&#xFF0C;&#x6700;&#x7EC8;&#x7ED3;&#x679C;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x5F02;&#x3002; &#x56FE;&#x50CF;&#x8F93;&#x5165;&#x53EF;&#x4EE5;&#x5148;&#x5C06;&#x5176;&#x5F52;&#x4E00;&#x5316;&#x5230;0-1&#x4E4B;&#x95F4;&#x6216;&#x8005;-1-1&#x4E4B;&#x95F4;&#xFF0C;&#x56E0;&#x4E3A;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x4E00;&#x822C;&#x90FD;&#x6BD4;&#x8F83;&#x5C0F;&#xFF0C;&#x6240;&#x4EE5;&#x5F52;&#x4E00;&#x5316;&#x540E;&#x8BA1;&#x7B97;&#x65B9;&#x4FBF;&#xFF0C;&#x6536;&#x655B;&#x8F83;&#x5FEB;&#x3002; &#x6839;&#x636E;&#x5B9E;&#x9645;&#x7684;&#x56FE;&#x50CF;&#x5927;&#x5C0F;&#xFF0C;&#x9009;&#x62E9;&#x5408;&#x9002;&#x7684;&#x7279;&#x5F81;&#x5C42;&#x6570;&#xFF0C;&#x5148;&#x9A8C;&#x6846;&#x7684;&#x5F62;&#x72B6;&#xFF0C;&#x5148;&#x9A8C;&#x6846;&#x6570;&#x91CF;&#xFF0C;&#x4EE5;&#x53CA;&#x5404;&#x79CD;&#x9608;&#x503C; anchor&#x5C3A;&#x5BF8;&#x7684;&#x786E;&#x5B9A;&#xFF0C;anchor&#x4E00;&#x822C;&#x662F;&#x6B63;&#x65B9;&#x5F62;&#x6216;&#x8005;&#x957F;&#x65B9;&#x5F62;&#xFF0C;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x5C42;&#x4E0A;&#x8BBE;&#x7F6E;&#x6700;&#x5927;&#x5C3A;&#x5BF8;max_size&#x548C;&#x6700;&#x5C0F;&#x5C3A;&#x5BF8;min_size&#xFF0C;&#x5982;&#x679C;&#x5148;&#x9A8C;&#x6846;&#x4E3A;4&#x4E2A;&#xFF0C;&#x5219;&#x4EE3;&#x8868;&#x4E24;&#x4E2A;&#x6B63;&#x65B9;&#x5F62;&#x548C;&#x4E24;&#x4E2A;&#x957F;&#x65B9;&#x5F62;&#xFF0C;&#x4E00;&#x4E2A;&#x6B63;&#x65B9;&#x5F62;&#x7684;&#x8FB9;&#x957F;&#x4E3A;min_size&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x4E3A;$\sqrt{max \_ size \times min \_ size}$&#xFF0C;&#x4E00;&#x4E2A;&#x957F;&#x65B9;&#x5F62;&#x7684;&#x8FB9;&#x957F;&#x4E3A;$(min \_ size \times \sqrt2&#xFF0C;min \_ size \div \sqrt2)$&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x957F;&#x65B9;&#x5F62;&#x7684;&#x8FB9;&#x957F;&#x4E3A;$(min \_ size \div \sqrt2&#xFF0C;min \_ size \times \sqrt2)$&#xFF0C;&#x5982;&#x679C;&#x5148;&#x9A8C;&#x6846;&#x4E3A;6&#x4E2A;&#xFF0C;&#x5219;&#x6DFB;&#x52A0;&#x4E24;&#x4E2A;&#x957F;&#x65B9;&#x5F62;&#xFF0C;&#x5C06;&#x4E0A;&#x9762;&#x7684;$\sqrt2$&#x6539;&#x6210;$\sqrt3$&#x5373;&#x53EF;&#x3002; &#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263import osimport numpy as npimport cv2 as cvimport tensorflow as tfimport tensorflow.keras as kerasclass Convs(keras.Model): def __init__(self, filters, kernel_size=(3, 3), strides=(1, 1), name=&apos;Convs&apos;): super(Convs, self).__init__() self.blocks = keras.Sequential(name=name) self.blocks.add(keras.layers.Conv2D(filters, kernel_size=kernel_size, strides=strides, padding=&apos;same&apos;)) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU()) def call(self, inputs, training=None, mask=None): return self.blocks(inputs)class DepthwiseConv(keras.Model): def __init__(self, filters, kernel_size=(3, 3), strides=(1, 1), dilation_rate=1): super(DepthwiseConv, self).__init__() self.blocks = keras.Sequential() self.blocks.add(keras.layers.DepthwiseConv2D(kernel_size=kernel_size, strides=strides, padding=&apos;same&apos;, dilation_rate=dilation_rate)) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU()) self.blocks.add(keras.layers.Conv2D(filters, (1, 1), (1, 1), padding=&apos;same&apos;)) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU()) def call(self, inputs, training=None, mask=None): return self.blocks(inputs)class Block(keras.Model): def __init__(self, filters, strides=(1, 1), type=None, dilation_rate=1): super(Block, self).__init__() self.type = type self.block = keras.Sequential() for i in range(len(filters) - 1): self.block.add(DepthwiseConv(filters[i], dilation_rate=dilation_rate)) self.block.add(DepthwiseConv(filters[-1], strides=strides, dilation_rate=dilation_rate)) self.block1 = keras.Sequential() self.block1.add(keras.layers.Conv2D(filters[-1], (1, 1), strides=strides)) self.block1.add(keras.layers.BatchNormalization()) def call(self, inputs, training=None, mask=None): block = self.block(inputs) if self.type == &apos;conv&apos;: conv = self.block1(inputs) output = block + conv elif self.type == &apos;sum&apos;: output = block + inputs else: output = block return outputclass ASPP(keras.Model): def __init__(self, input_channel, filters, dilation_rate): super(ASPP, self).__init__() self.block1 = keras.Sequential() self.block1.add(keras.layers.GlobalAveragePooling2D()) self.block1.add(keras.layers.Reshape((1, 1, input_channel))) self.block1.add(Convs(filters, (1, 1))) self.block2 = keras.Sequential() self.block2.add(Convs(filters, (1, 1))) self.block3 = keras.Sequential() self.block3.add(DepthwiseConv(filters, dilation_rate=dilation_rate[0])) self.block4 = keras.Sequential() self.block4.add(DepthwiseConv(filters, dilation_rate=dilation_rate[1])) self.block5 = keras.Sequential() self.block5.add(DepthwiseConv(filters, dilation_rate=dilation_rate[2])) self.concatenate = keras.layers.Concatenate() def call(self, inputs, training=None, mask=None): block1 = self.block1(inputs) block1 = tf.image.resize(block1, (inputs.shape[1], inputs.shape[2])) block2 = self.block2(inputs) block3 = self.block3(inputs) block4 = self.block4(inputs) block5 = self.block5(inputs) output = self.concatenate([block1, block2, block3, block4, block5]) return outputclass Small_DeepLab_V3_Plus(keras.Model): def __init__(self): super(Small_DeepLab_V3_Plus, self).__init__() self.conv_block = keras.Sequential(name=&apos;Conv_Block&apos;) self.conv_block.add(Convs(32, strides=(2, 2))) self.entry_block1 = keras.Sequential(name=&apos;Entry_Block1&apos;) self.entry_block1.add(Block([128, 128, 128], strides=(2, 2), type=&apos;conv&apos;)) self.skip = keras.Sequential([DepthwiseConv(256)], name=&apos;Skip&apos;) self.entry_block2 = keras.Sequential(name=&apos;Entry_Block2&apos;) self.entry_block2.add(Block([256, 728], strides=(2, 2), type=&apos;conv&apos;)) self.middle_block = keras.Sequential(name=&apos;Middle_Block&apos;) for i in range(8): self.middle_block.add(Block([728, 728, 728], type=&apos;sum&apos;)) self.exit_block1 = keras.Sequential(name=&apos;Exit_Block1&apos;) self.exit_block1.add(Block([728, 1024, 1024], type=&apos;conv&apos;)) self.exit_block2 = keras.Sequential(name=&apos;Exit_Block2&apos;) self.exit_block2.add(Block([1536, 1536, 2048], dilation_rate=2)) self.aspp = keras.Sequential(name=&apos;ASPP&apos;) self.aspp.add(ASPP(input_channel=2048, filters=256, dilation_rate=[2, 4, 8])) self.aspp.add(Convs(256, (1, 1))) self.aspp.add(keras.layers.Dropout(0.1)) self.skip_conv = keras.Sequential([Convs(24, (1, 1))], name=&apos;Skip_Conv&apos;) self.concatenate = keras.layers.Concatenate(name=&apos;Concatenate&apos;) self.dw_block = keras.Sequential(name=&apos;DepthwiseConv_Block&apos;) self.dw_block.add(DepthwiseConv(256)) self.dw_block.add(DepthwiseConv(256)) self.dw_block.add(keras.layers.Conv2D(num_class, (1, 1))) self.softmax = keras.layers.Softmax(name=&apos;Softmax&apos;) def call(self, inputs, training=None, mask=None): conv_block = self.conv_block(inputs) entry_block1 = self.entry_block1(conv_block) skip = self.skip(entry_block1) entry_block2 = self.entry_block2(skip) middle_block = self.middle_block(entry_block2) exit_block1 = self.exit_block1(middle_block) exit_block2 = self.exit_block2(exit_block1) aspp = self.aspp(exit_block2) aspp = tf.image.resize(aspp, (32, 32)) skip_conv = self.skip_conv(skip) concatenate = self.concatenate([aspp, skip_conv]) dw_block = self.dw_block(concatenate) dw_block = tf.image.resize(dw_block, (img_size[0], img_size[1])) output = self.softmax(dw_block) return outputdef generate_arrays_from_file(train_data, batch_size): # &#x83B7;&#x53D6;&#x603B;&#x957F;&#x5EA6; n = len(train_data) i = 0 while 1: X_train = [] Y_train = [] # &#x83B7;&#x53D6;&#x4E00;&#x4E2A;batch_size&#x5927;&#x5C0F;&#x7684;&#x6570;&#x636E; for _ in range(batch_size): if i == 0: np.random.shuffle(train_data) # &#x4ECE;&#x6587;&#x4EF6;&#x4E2D;&#x8BFB;&#x53D6;&#x56FE;&#x50CF; img = cv.imread(imgs_path + &apos;\\&apos; + str(train_data[i]) + &apos;.jpg&apos;) img = img / 127.5 - 1 X_train.append(img) # &#x4ECE;&#x6587;&#x4EF6;&#x4E2D;&#x8BFB;&#x53D6;&#x56FE;&#x50CF; img = cv.imread(mask_path + &apos;\\&apos; + str(train_data[i]) + &apos;.png&apos;) seg_labels = np.zeros((img_size[0], img_size[1], num_class)) for c in range(num_class): seg_labels[:, :, c] = (img[:, :, 0] == c).astype(int) Y_train.append(seg_labels) # &#x8BFB;&#x5B8C;&#x4E00;&#x4E2A;&#x5468;&#x671F;&#x540E;&#x91CD;&#x65B0;&#x5F00;&#x59CB; i = (i + 1) % n yield tf.constant(X_train), tf.constant(Y_train)if __name__ == &apos;__main__&apos;: # &#x5305;&#x62EC;&#x80CC;&#x666F; num_class = 4 train_data = list(range(800)) validation_data = list(range(800, 900)) test_data = range(900, 1000) epochs = 50 batch_size = 16 tf.random.set_seed(22) img_size = (128, 128) colors = [[0, 0, 0], [0, 0, 128], [0, 128, 0], [128, 0, 0]] mask_path = r&apos;.\shape\train_mask&apos; imgs_path = r&apos;.\shape\train_imgs&apos; test_path = r&apos;.\shape\test_imgs&apos; save_path = r&apos;.\DeepLab_V3_Plus_test_result&apos; weight_path = r&apos;.\DeepLab_V3_Plus_weight&apos; try: os.mkdir(save_path) except FileExistsError: print(save_path + &apos;has been exist&apos;) try: os.mkdir(weight_path) except FileExistsError: print(weight_path + &apos;has been exist&apos;) model = Small_DeepLab_V3_Plus() model.build(input_shape=(None, img_size[0], img_size[1], 3)) model.summary() optimizor = keras.optimizers.Adam(lr=1e-3) lossor = keras.losses.BinaryCrossentropy() model.compile(optimizer=optimizor, loss=lossor, metrics=[&apos;accuracy&apos;]) # &#x4FDD;&#x5B58;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;3&#x4E16;&#x4EE3;&#x4FDD;&#x5B58;&#x4E00;&#x6B21; checkpoint_period = keras.callbacks.ModelCheckpoint( weight_path + &apos;\\&apos; + &apos;ep{epoch:03d}-loss{loss:.3f}-val_loss{val_loss:.3f}.h5&apos;, monitor=&apos;val_loss&apos;, save_weights_only=True, save_best_only=True, period=3 ) # &#x5B66;&#x4E60;&#x7387;&#x4E0B;&#x964D;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;val_loss3&#x6B21;&#x4E0D;&#x4E0B;&#x964D;&#x5C31;&#x4E0B;&#x964D;&#x5B66;&#x4E60;&#x7387;&#x7EE7;&#x7EED;&#x8BAD;&#x7EC3; reduce_lr = keras.callbacks.ReduceLROnPlateau( monitor=&apos;val_loss&apos;, factor=0.5, patience=3, verbose=1 ) # &#x662F;&#x5426;&#x9700;&#x8981;&#x65E9;&#x505C;&#xFF0C;&#x5F53;val_loss&#x4E00;&#x76F4;&#x4E0D;&#x4E0B;&#x964D;&#x7684;&#x65F6;&#x5019;&#x610F;&#x5473;&#x7740;&#x6A21;&#x578B;&#x57FA;&#x672C;&#x8BAD;&#x7EC3;&#x5B8C;&#x6BD5;&#xFF0C;&#x53EF;&#x4EE5;&#x505C;&#x6B62; early_stopping = keras.callbacks.EarlyStopping( monitor=&apos;val_loss&apos;, min_delta=0, patience=10, verbose=1 ) model.fit_generator(generate_arrays_from_file(train_data, batch_size), steps_per_epoch=max(1, len(train_data) // batch_size), validation_data=generate_arrays_from_file(validation_data, batch_size), validation_steps=max(1, len(validation_data) // batch_size), epochs=epochs, callbacks=[checkpoint_period, reduce_lr, early_stopping]) for name in test_data: test_img_path = test_path + &apos;\\&apos; + str(name) + &apos;.jpg&apos; save_img_path = save_path + &apos;\\&apos; + str(name) + &apos;.png&apos; test_img = cv.imread(test_img_path) test_img = tf.constant([test_img / 127.5 - 1]) test_mask = model.predict(test_img) test_mask = np.reshape(test_mask, (img_size[0], img_size[1], num_class)) test_mask = np.argmax(test_mask, axis=-1) seg_img = np.zeros((img_size[0], img_size[1], 3)) for c in range(num_class): seg_img[:, :, 0] += ((test_mask == c) * (colors[c][0])) seg_img[:, :, 1] += ((test_mask == c) * (colors[c][1])) seg_img[:, :, 2] += ((test_mask == c) * (colors[c][2])) seg_img = seg_img.astype(np.uint8) cv.imwrite(save_img_path, seg_img) &#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C; SSD&#x5C0F;&#x7ED3;&#x2003;&#x2003;SSD&#x662F;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x7684;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x7F51;&#x7EDC;&#xFF0C;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;SSD&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x53EA;&#x6709;26M&#xFF0C;&#x7531;&#x4E8E;&#x5176;&#x7ED3;&#x6784;&#x7B80;&#x5355;&#xFF0C;&#x6548;&#x679C;&#x7A33;&#x5B9A;&#xFF0C;&#x56E0;&#x6B64;&#x5F88;&#x591A;&#x573A;&#x5408;&#x4ECD;&#x7136;&#x4F7F;&#x7528;SSD&#x4F5C;&#x4E3A;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x7B97;&#x6CD5;&#x3002;SSD&#x4F5C;&#x4E3A;&#x4E00;&#x6B65;&#x6CD5;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x7684;&#x5143;&#x8001;&#x7EA7;&#x6A21;&#x578B;&#xFF0C;&#x662F;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x9700;&#x8981;&#x638C;&#x63E1;&#x7684;&#x4E00;&#x4E2A;&#x6A21;&#x578B;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>目标检测网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[各种卷积黑科技]]></title>
    <url>%2F2020%2F05%2F04%2Fdeep%20learning%20convolution%2F</url>
    <content type="text"><![CDATA[Convolution &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;Convolution:&#x5728;&#x8FD9;&#x4E2A;&#x535A;&#x5BA2;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x8C08;&#x8BBA;&#x7684;&#x5377;&#x79EF;&#x5E76;&#x4E0D;&#x662F;&#x5B9E;&#x9645;&#x610F;&#x4E49;&#x4E2D;&#x7684;&#x5377;&#x79EF;&#xFF0C;&#x800C;&#x662F;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4E2D;&#x7684;&#x5377;&#x79EF;&#x3002;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x80FD;&#x4F1A;&#x6709;&#x7591;&#x95EE;&#xFF0C;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x6709;&#x533A;&#x522B;&#x5417;&#xFF1F;&#x5B66;&#x8FC7;&#x4FE1;&#x53F7;&#x5904;&#x7406;&#x6216;&#x8005;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x7684;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5E94;&#x8BE5;&#x5F88;&#x719F;&#x6089;&#xFF0C;&#x5377;&#x79EF;&#x662F;&#x8981;&#x9996;&#x5148;&#x5C06;&#x6838;&#x7FFB;&#x8F6C;180&#xB0;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5E94;&#x7528;&#x4E8E;&#x4FE1;&#x53F7;&#x6216;&#x8005;&#x56FE;&#x50CF;&#x4E0A;&#xFF0C;&#x800C;&#x76F8;&#x5173;&#x5219;&#x4E0D;&#x9700;&#x8981;&#x7FFB;&#x8F6C;&#x3002;&#x56E0;&#x6B64;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4E2D;&#x7684;&#x5377;&#x79EF;&#x5B9E;&#x9645;&#x4E0A;&#x662F;&#x4E00;&#x79CD;&#x76F8;&#x5173;&#x64CD;&#x4F5C;&#x3002; Receptive Field&#x611F;&#x53D7;&#x91CE;&#x2003;&#x2003;&#x5728;&#x4E8C;&#x7EF4;&#x5377;&#x79EF;&#x4E2D;&#x4E0D;&#x5F97;&#x4E0D;&#x63D0;&#x5230;&#x4E00;&#x4E2A;&#x91CD;&#x8981;&#x540D;&#x8BCD;&#xFF1A;&#x611F;&#x53D7;&#x91CE;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x6211;&#x53EA;&#x662F;&#x4F5C;&#x4E3A;&#x79D1;&#x666E;&#xFF0C;&#x8BF4;&#x4E00;&#x8BF4;&#x611F;&#x53D7;&#x91CE;&#x548C;&#x4E8C;&#x7EF4;&#x5377;&#x79EF;&#x7684;&#x5173;&#x7CFB;&#xFF0C;&#x4E0D;&#x4ECE;&#x751F;&#x547D;&#x79D1;&#x5B66;&#x7684;&#x89D2;&#x5EA6;&#x5177;&#x4F53;&#x63CF;&#x8FF0;&#x611F;&#x53D7;&#x91CE;&#x548C;&#x795E;&#x7ECF;&#x5143;&#x7684;&#x5173;&#x7CFB;&#xFF0C;&#x611F;&#x5174;&#x8DA3;&#x7684;&#x5C0F;&#x4F19;&#x4F34;&#x53EF;&#x4EE5;&#x53BB;&#x7F51;&#x4E0A;&#x641C;&#x7D22;&#x3002;&#x2003;&#x2003;&#x60F3;&#x8C61;&#x4E00;&#x4E0B;&#xFF0C;&#x5F53;&#x6211;&#x4EEC;&#x770B;&#x4E00;&#x573A;&#x8DB3;&#x7403;&#x6BD4;&#x8D5B;&#xFF0C;&#x6216;&#x8005;&#x770B;&#x4E00;&#x573A;&#x7CBE;&#x5F69;&#x7684;&#x7535;&#x5F71;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x7684;&#x6CE8;&#x610F;&#x529B;&#x96C6;&#x4E2D;&#x4E8E;&#x67D0;&#x4E2A;&#x70B9;&#xFF0C;&#x6BD4;&#x5982;&#x8DB3;&#x7403;&#x7684;&#x8FD0;&#x52A8;&#x8F68;&#x8FF9;&#xFF0C;&#x7535;&#x5F71;&#x4E2D;&#x4EFB;&#x52A1;&#x7684;&#x7EC6;&#x8282;&#x63CF;&#x5199;&#x3002;&#x6211;&#x4EEC;&#x7684;&#x773C;&#x775B;&#x53EA;&#x662F;&#x5173;&#x6CE8;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x5417;&#xFF1F;&#x7B54;&#x6848;&#x662F;&#x5426;&#x5B9A;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x5173;&#x6CE8;&#x7684;&#x662F;&#x5468;&#x56F4;&#x4E86;&#x4E00;&#x90E8;&#x5206;&#x533A;&#x57DF;&#xFF0C;&#x8FD9;&#x4E2A;&#x533A;&#x57DF;&#x53EF;&#x4EE5;&#x79F0;&#x4E4B;&#x4E3A;&#x611F;&#x53D7;&#x91CE;&#x3002;&#x5F53;&#x6211;&#x4EEC;&#x770B;&#x8FD9;&#x4E2A;&#x4EBA;&#x7684;&#x773C;&#x795E;&#x7EC6;&#x8282;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x8FD8;&#x4F1A;&#x6CE8;&#x610F;&#x5230;&#x9762;&#x90E8;&#x7684;&#x52A8;&#x4F5C;&#xFF0C;&#x800C;&#x5F88;&#x96BE;&#x6CE8;&#x610F;&#x5230;&#x8033;&#x6735;&#x6216;&#x8005;&#x5176;&#x4ED6;&#x90E8;&#x4F4D;&#x7684;&#x53D8;&#x5316;&#x3002;&#x800C;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x4E5F;&#x662F;&#x76F8;&#x540C;&#xFF0C;&#x5BF9;&#x4E8E;&#x67D0;&#x4E2A;&#x4E2D;&#x5FC3;&#x70B9;&#x6C42;&#x5377;&#x79EF;&#xFF0C;&#x53EA;&#x662F;&#x8BA1;&#x7B97;&#x8FD9;&#x4E2A;&#x70B9;&#x5468;&#x56F4;&#x7684;&#x503C;&#xFF0C;&#x800C;&#x4E0D;&#x53BB;&#x8BA1;&#x7B97;&#x8DDD;&#x79BB;&#x5F88;&#x8FDC;&#x7684;&#x50CF;&#x7D20;&#x70B9;&#x3002;&#x610F;&#x5728;&#x8BA9;&#x8BA1;&#x7B97;&#x673A;&#x6839;&#x636E;&#x4EBA;&#x7C7B;&#x7684;&#x89C6;&#x89C9;&#x884C;&#x4E3A;&#x505A;&#x51FA;&#x7C7B;&#x4F3C;&#x7684;&#x5224;&#x65AD;&#x3002; CNN&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x2003;&#x2003;CNN&#x662F;&#x76EE;&#x524D;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x9886;&#x57DF;&#x4E2D;&#x975E;&#x5E38;&#x5177;&#x6709;&#x4EE3;&#x8868;&#x6027;&#x7684;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4E4B;&#x4E00;&#xFF0C;&#x5728;&#x56FE;&#x50CF;&#x5206;&#x6790;&#x548C;&#x5904;&#x7406;&#x9886;&#x57DF;&#x53D6;&#x5F97;&#x4E86;&#x4F17;&#x591A;&#x7A81;&#x7834;&#x6027;&#x7684;&#x8FDB;&#x5C55;&#xFF0C;&#x5305;&#x62EC;&#x56FE;&#x50CF;&#x8BC6;&#x522B;&#xFF0C;&#x8BED;&#x4E49;&#x5206;&#x5272;&#xFF0C;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x7B49;&#x7B49;&#x3002;&#x2003;&#x2003;&#x5173;&#x4E8E;&#x5377;&#x79EF;&#x7684;&#x8BA1;&#x7B97;&#x8FC7;&#x7A0B;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5E94;&#x8BE5;&#x90FD;&#x6BD4;&#x8F83;&#x4E86;&#x89E3;&#xFF0C;&#x901A;&#x8FC7;&#x6700;&#x4E0A;&#x9762;&#x7684;&#x56FE;&#x4E5F;&#x53EF;&#x4EE5;&#x76F4;&#x89C2;&#x7684;&#x770B;&#x51FA;&#x3002;&#x968F;&#x7740;CNN&#x7684;&#x53D1;&#x5C55;&#xFF0C;&#x5C24;&#x5176;&#x662F;2012&#x5E74;AlexNet&#x7F51;&#x7EDC;&#x5728;ImageNet&#x4E0A;&#x5927;&#x653E;&#x5F02;&#x5F69;&#x4EE5;&#x540E;&#xFF0C;&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x6301;&#x7EED;&#x706B;&#x7206;&#x3002;&#x6E10;&#x6E10;&#x7684;&#x4E00;&#x4E9B;&#x9ED1;&#x79D1;&#x6280;&#x5377;&#x79EF;&#x4E5F;&#x88AB;&#x9646;&#x7EED;&#x53D1;&#x73B0;&#x3002;&#x8FD9;&#x4E2A;&#x535A;&#x5BA2;&#x76EE;&#x7684;&#x662F;&#x5411;&#x5927;&#x5BB6;&#x4ECB;&#x7ECD;&#x5404;&#x79CD;&#x5377;&#x79EF;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x5F02;&#x3002; Depthwise Convolution&#x2003;&#x2003;Depthwise Convolution(&#x6DF1;&#x5EA6;&#x5377;&#x79EF;)&#xFF1A;&#x5728;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x4E0A;&#x5355;&#x72EC;&#x8FDB;&#x884C;&#x5377;&#x79EF;&#x2003;&#x2003;&#x53C2;&#x6570;depth_multiplier&#x9ED8;&#x8BA4;&#x4E3A;1&#xFF0C;&#x4EE3;&#x8868;&#x6BCF;&#x4E2A;&#x901A;&#x9053;&#x6570;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x5355;&#x72EC;&#x5377;&#x79EF;&#xFF0C;&#x8F93;&#x51FA;&#x7684;&#x901A;&#x9053;&#x6570;&#x548C;&#x8F93;&#x5165;&#x901A;&#x9053;&#x6570;&#x76F8;&#x7B49;&#xFF0C;&#x8BBE;&#x7F6E;depth_multiplier=n&#xFF0C;&#x5219;&#x4EE3;&#x8868;&#x6BCF;&#x4E2A;&#x901A;&#x9053;&#x6570;&#x8FDB;&#x884C;n&#x6B21;&#x5355;&#x72EC;&#x5377;&#x79EF;&#xFF0C;&#x8F93;&#x51FA;&#x901A;&#x9053;&#x6570;&#x662F;&#x8F93;&#x5165;&#x901A;&#x9053;&#x6570;&#x7684;n&#x500D;&#x3002;&#x2003;&#x2003;&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x4E3B;&#x8981;&#x7528;&#x4E8E;&#x8F7B;&#x91CF;&#x7EA7;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x5728;MobileNet&#xFF0C;EfficientNet&#xFF0C;ShuffleNet**&#x7F51;&#x7EDC;&#x4E2D;&#x90FD;&#x6709;&#x5927;&#x91CF;&#x4F7F;&#x7528;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;8x8x1024&#x7684;&#x7279;&#x5F81;&#x56FE;&#xFF0C;&#x7ECF;&#x8FC7;5x5&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;8x8x1024&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;1024x(1024x5x5+1)=26215424&#xFF0C;&#x800C;&#x6DF1;&#x5EA6;&#x5377;&#x79EF;&#x53C2;&#x6570;&#x91CF;&#x4E3A;1024x(1x5x5+1)=26624&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;1024&#x500D;&#x3002; Pointwise Convolution&#x2003;&#x2003;Pointwise Convolution(&#x70B9;&#x5377;&#x79EF;)&#xFF1A;&#x5F88;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x5377;&#x79EF;&#x6838;&#x7684;&#x5927;&#x5C0F;&#x4E3A;1x1&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x80FD;&#x4EA7;&#x751F;&#x7591;&#x95EE;&#xFF1F;1x1&#x5377;&#x79EF;&#x6709;&#x4EC0;&#x4E48;&#x4F5C;&#x7528;&#x5462;&#xFF1F; &#x6539;&#x53D8;&#x901A;&#x9053;&#x6570;&#xFF0C;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x5347;&#x7EF4;&#x6216;&#x8005;&#x964D;&#x7EF4;&#xFF0C;&#x5728;ResNet&#xFF0C;MobileNet&#x7F51;&#x7EDC;&#x4E2D;&#x6709;&#x91CD;&#x8981;&#x4F5C;&#x7528;&#x3002; &#x589E;&#x52A0;&#x975E;&#x7EBF;&#x6027;&#x5173;&#x7CFB;&#xFF0C;&#x5728;&#x4FDD;&#x6301;&#x7279;&#x5F81;&#x56FE;&#x5C3A;&#x5EA6;&#x7684;&#x524D;&#x63D0;&#x4E0B;&#xFF0C;&#x53EF;&#x4EE5;&#x5229;&#x7528;&#x975E;&#x7EBF;&#x6027;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x589E;&#x52A0;&#x7F51;&#x7EDC;&#x6DF1;&#x5EA6;&#x3002; &#x5B9E;&#x73B0;&#x8DE8;&#x901A;&#x9053;&#x4FE1;&#x606F;&#x4EA4;&#x4E92;&#xFF0C;&#x5F80;&#x5F80;&#x548C;Depthwise Convolution&#x7ED3;&#x5408;&#x4F7F;&#x7528;&#x3002; Separable Convolution&#x2003;&#x2003;Separable Convolution(&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)&#xFF1A;&#x662F;&#x4E0A;&#x9762;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x5408;&#x4E8C;&#x4E3A;&#x4E00;&#x7684;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x3002;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x6B65;&#xFF1A;DepthwiseConv&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x8FDB;&#x884C;&#x5377;&#x79EF;&#x2003;&#x2003;&#x7B2C;&#x4E8C;&#x6B65;&#xFF1A;PointwiseConv&#xFF0C;&#x5BF9;&#x7B2C;&#x4E00;&#x6B65;&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#x8FDB;&#x884C;1x1&#x5377;&#x79EF;&#xFF0C;&#x5B9E;&#x73B0;&#x901A;&#x9053;&#x878D;&#x5408;&#x2003;&#x2003;&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;&#x8C03;&#x6574;&#x4E3A;&#x4EFB;&#x610F;&#x5408;&#x9002;&#x7684;&#x901A;&#x9053;&#x6570;&#xFF0C;&#x5728;Xception&#xFF0C;MobileNet&#xFF0C;EfficientNet&#xFF0C;ShuffleNet&#x7F51;&#x7EDC;&#x4E2D;&#x6709;&#x5927;&#x91CF;&#x4F7F;&#x7528;&#x3002;&#x7B2C;&#x4E00;&#x6B65;&#x7684;&#x76EE;&#x7684;&#x662F;&#x51CF;&#x5C11;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x7B2C;&#x4E8C;&#x6B65;&#x662F;&#x8C03;&#x6574;&#x901A;&#x9053;&#x6570;&#xFF0C;&#x56E0;&#x6B64;&#x5C06;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x7ED3;&#x5408;&#xFF0C;&#x7EC4;&#x6210;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x3002; Spatial Separable Convolution&#x2003;&#x2003;Spatial Separable Convolution(&#x7A7A;&#x95F4;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)&#xFF1A;&#x5C06;3x3&#x7684;&#x5377;&#x79EF;&#x5206;&#x89E3;&#x4E3A;3x1&#x7684;&#x5377;&#x79EF;&#x6838;1x3&#x7684;&#x5377;&#x79EF;&#xFF0C;&#x5C06;7x7&#x7684;&#x5377;&#x79EF;&#x5206;&#x89E3;&#x4E3A;7x1&#x7684;&#x5377;&#x79EF;&#x6838;1x7&#x7684;&#x5377;&#x79EF;.&#x3002;&#x2003;&#x2003;&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x5728;Inception&#x7C7B;&#x578B;&#x7684;&#x7F51;&#x7EDC;&#x4E2D;&#x6709;&#x5927;&#x91CF;&#x4F7F;&#x7528;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;64x64x256&#x7684;&#x7279;&#x5F81;&#x56FE;&#xFF0C;&#x7ECF;&#x8FC7;7x7&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(256x7x7+1)=3211520&#xFF0C;&#x800C;&#x7A7A;&#x95F4;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x53C2;&#x6570;&#x91CF;&#x4E3A;2x256x(256x7x1+1)=918016&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;3.5&#x500D;&#x3002; Atrous Convolution&#x2003;&#x2003;Atrous Convolution(&#x7A7A;&#x6D1E;&#x5377;&#x79EF;)&#xFF1A;&#x53C8;&#x79F0;&#x81A8;&#x80C0;&#x5377;&#x79EF;(Dilated Convolution)&#xFF0C;&#x5728;&#x5377;&#x79EF;&#x5C42;&#x5F15;&#x5165;&#x4E86;&#x4E00;&#x4E2A;&#x81A8;&#x80C0;&#x7387;(dilation rate)&#x53C2;&#x6570;&#xFF0C;&#x5B9A;&#x4E49;&#x4E86;&#x5377;&#x79EF;&#x6838;&#x7684;&#x95F4;&#x9694;&#x6570;&#x91CF;&#xFF0C;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x5377;&#x79EF;&#x6838;dilation rate=1&#x3002;&#x2003;&#x2003;&#x4F18;&#x70B9;&#xFF1A;&#x6269;&#x5927;&#x611F;&#x53D7;&#x91CE;&#xFF0C;&#x76F8;&#x90BB;&#x7684;&#x50CF;&#x7D20;&#x70B9;&#x53EF;&#x80FD;&#x5B58;&#x5728;&#x5927;&#x91CF;&#x5197;&#x4F59;&#x4FE1;&#x606F;&#xFF0C;&#x6269;&#x5927;&#x611F;&#x53D7;&#x91CE;&#x53EF;&#x80FD;&#x4F1A;&#x83B7;&#x53D6;&#x591A;&#x5C3A;&#x5EA6;&#x4FE1;&#x606F;&#xFF0C;&#x8FD9;&#x5728;&#x89C6;&#x89C9;&#x4EFB;&#x52A1;&#x4E0A;&#x975E;&#x5E38;&#x91CD;&#x8981;&#xFF0C;&#x4E14;&#x4E0D;&#x9700;&#x8981;&#x5F15;&#x5165;&#x989D;&#x5916;&#x53C2;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x589E;&#x52A0;&#x5206;&#x8FA8;&#x7387;&#x6216;&#x8005;&#x91C7;&#x7528;&#x5927;&#x5C3A;&#x5BF8;&#x7684;&#x5377;&#x79EF;&#x6838;&#x5219;&#x4F1A;&#x5927;&#x5927;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x5728;PSPNet&#xFF0C;DeepLab-V3+&#x7F51;&#x7EDC;&#x4E2D;&#x6709;&#x5927;&#x91CF;&#x4F7F;&#x7528;&#x3002;&#x2003;&#x2003;&#x7F3A;&#x70B9;&#xFF1A;&#x7531;&#x4E8E;&#x7A7A;&#x6D1E;&#x5377;&#x79EF;&#x7684;&#x8BA1;&#x7B97;&#x65B9;&#x5F0F;&#x7C7B;&#x4F3C;&#x4E8E;&#x68CB;&#x76D8;&#x683C;&#x5F0F;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x80FD;&#x4EA7;&#x751F;&#x68CB;&#x76D8;&#x683C;&#x6548;&#x5E94;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x68CB;&#x76D8;&#x683C;&#x53EF;&#x89C6;&#x5316;&#x3002;&#x5982;&#x679C;&#x81A8;&#x80C0;&#x7387;&#x592A;&#x5927;&#x5377;&#x79EF;&#x7ED3;&#x679C;&#x4E4B;&#x95F4;&#x6CA1;&#x6709;&#x76F8;&#x5173;&#x6027;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x4E22;&#x5931;&#x5C40;&#x90E8;&#x4FE1;&#x606F;&#x3002; Group Convolution&#x2003;&#x2003;Group Convolution(&#x5206;&#x7EC4;&#x5377;&#x79EF;)&#xFF1A;&#x4F20;&#x7EDF;&#x5377;&#x79EF;&#x662F;&#x91C7;&#x7528;&#x4E00;&#x79CD;&#x5377;&#x79EF;&#x5168;&#x8FDE;&#x63A5;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x7279;&#x5F81;&#x56FE;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x90FD;&#x7ED3;&#x5408;&#x4E86;&#x56FE;&#x50CF;&#x4E2D;&#x6240;&#x6709;&#x901A;&#x9053;&#x7684;&#x4FE1;&#x606F;&#x3002;&#x800C;&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x7279;&#x5F81;&#x56FE;&#x50CF;&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x53EA;&#x5229;&#x7528;&#x5230;&#x4E00;&#x90E8;&#x5206;&#x539F;&#x59CB;&#x56FE;&#x50CF;&#x7684;&#x901A;&#x9053;&#x3002;&#x2003;&#x2003;&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x5728;ResNeXt&#xFF0C;ShuffleNet-V2&#x7F51;&#x7EDC;&#x4E2D;&#x6709;&#x5927;&#x91CF;&#x4F7F;&#x7528;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;5x5&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(256x5x5+1)=1638656&#xFF0C;&#x800C;&#x5206;&#x6210;32&#x7EC4;&#x7684;&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(8*5x5+1)=51456&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;32&#x500D;&#xFF0C;&#x5F53;&#x7EC4;&#x6570;&#x53D8;&#x6210;&#x901A;&#x9053;&#x6570;&#x65F6;&#xFF0C;&#x5219;&#x7C7B;&#x4F3C;&#x4E8E;Depthwise Convolution&#x6DF1;&#x5EA6;&#x5377;&#x79EF; Deconvolution&#x2003;&#x2003;Deconvolution(&#x53CD;&#x5377;&#x79EF;)&#xFF1A;&#x672C;&#x8D28;&#x662F;&#x5377;&#x79EF;&#xFF0C;&#x6CE8;&#x610F;&#x53CD;&#x5377;&#x79EF;&#x5E76;&#x4E0D;&#x80FD;&#x4ECE;&#x5377;&#x79EF;&#x7684;&#x7ED3;&#x679C;&#x8FD4;&#x56DE;&#x5230;&#x5377;&#x79EF;&#x524D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x53EA;&#x80FD;&#x8FD4;&#x56DE;&#x5230;&#x5377;&#x79EF;&#x524D;&#x7684;&#x5C3A;&#x5BF8;&#x3002;&#x5377;&#x79EF;&#x901A;&#x8FC7;&#x8BBE;&#x7F6E;kernel_size&#x5377;&#x79EF;&#x6838;&#x5927;&#x5C0F;&#xFF0C;strides&#x6B65;&#x957F;&#x548C;padding&#x586B;&#x5145;&#x65B9;&#x5F0F;&#x53EF;&#x4EE5;&#x5C06;&#x56FE;&#x50CF;&#x7684;&#x5206;&#x8FA8;&#x7387;&#x964D;&#x4F4E;&#xFF0C;&#x76F8;&#x53CD;&#x7684;&#x53CD;&#x5377;&#x79EF;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8BBE;&#x7F6E;kernel_size&#x5377;&#x79EF;&#x6838;&#x5927;&#x5C0F;&#xFF0C;strides&#x6B65;&#x957F;&#x548C;padding&#x586B;&#x5145;&#x65B9;&#x5F0F;&#x5148;&#x5BF9;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x586B;&#x5145;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8FDB;&#x884C;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x56FE;&#x50CF;&#x7684;&#x5206;&#x8FA8;&#x7387;&#x589E;&#x52A0;&#x3002;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x4E0D;&#x63A8;&#x8350;&#x7ECF;&#x5E38;&#x4F7F;&#x7528;&#xFF0C;&#x56E0;&#x4E3A;&#x5B58;&#x5728;&#x5927;&#x91CF;&#x53C2;&#x6570;&#xFF0C;&#x800C;&#x4E14;&#x53EF;&#x80FD;&#x4F1A;&#x5B58;&#x5728;&#x68CB;&#x76D8;&#x683C;&#x6548;&#x5E94;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x68CB;&#x76D8;&#x683C;&#x53EF;&#x89C6;&#x5316;&#x3002; Squeeze-and-Excitation&#x2003;&#x2003;Squeeze-and-Excitation&#xFF1A;&#x53C8;&#x79F0;&#x4E3A;&#x7279;&#x5F81;&#x91CD;&#x6807;&#x5B9A;&#x5377;&#x79EF;&#xFF0C;&#x6216;&#x8005;&#x6CE8;&#x610F;&#x529B;&#x673A;&#x5236;&#x3002;&#x5177;&#x4F53;&#x6765;&#x8BF4;&#xFF0C;&#x5C31;&#x662F;&#x901A;&#x8FC7;&#x5B66;&#x4E60;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x81EA;&#x52A8;&#x83B7;&#x53D6;&#x5230;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x7684;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;&#xFF0C;&#x7136;&#x540E;&#x4F9D;&#x7167;&#x8FD9;&#x4E2A;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;&#x53BB;&#x63D0;&#x5347;&#x6709;&#x7528;&#x7684;&#x7279;&#x5F81;&#x5E76;&#x6291;&#x5236;&#x5BF9;&#x5F53;&#x524D;&#x4EFB;&#x52A1;&#x7528;&#x5904;&#x4E0D;&#x5927;&#x7684;&#x7279;&#x5F81;,&#x5728;SENet&#xFF0C;MobileNet-V3&#xFF0C;EfficientNet&#x7F51;&#x7EDC;&#x4E2D;&#x6709;&#x5927;&#x91CF;&#x4F7F;&#x7528;&#x3002;&#x2003;&#x2003;&#x9996;&#x5148;&#x662F; Squeeze&#x64CD;&#x4F5C;&#xFF0C;&#x5148;&#x8FDB;&#x884C;&#x5168;&#x5C40;&#x6C60;&#x5316;&#xFF0C;&#x5177;&#x6709;&#x5168;&#x5C40;&#x7684;&#x611F;&#x53D7;&#x91CE;&#xFF0C;&#x5E76;&#x4E14;&#x8F93;&#x51FA;&#x7684;&#x7EF4;&#x5EA6;&#x548C;&#x8F93;&#x5165;&#x7684;&#x7279;&#x5F81;&#x901A;&#x9053;&#x6570;&#x76F8;&#x5339;&#x914D;&#xFF0C;&#x5B83;&#x8868;&#x5F81;&#x7740;&#x5728;&#x7279;&#x5F81;&#x901A;&#x9053;&#x4E0A;&#x54CD;&#x5E94;&#x7684;&#x5168;&#x5C40;&#x5206;&#x5E03;&#x3002;&#x2003;&#x2003;&#x7136;&#x540E;&#x662F;Excitation&#x64CD;&#x4F5C;&#xFF0C;&#x901A;&#x8FC7;&#x5168;&#x8FDE;&#x63A5;&#x5C42;&#x4E3A;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x751F;&#x6210;&#x6743;&#x91CD;&#xFF0C;&#x5EFA;&#x7ACB;&#x901A;&#x9053;&#x95F4;&#x7684;&#x76F8;&#x5173;&#x6027;&#xFF0C;&#x8F93;&#x51FA;&#x7684;&#x6743;&#x91CD;&#x770B;&#x505A;&#x662F;&#x8FDB;&#x8FC7;&#x7279;&#x5F81;&#x9009;&#x62E9;&#x540E;&#x7684;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x7684;&#x91CD;&#x8981;&#x6027;&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x4E58;&#x6CD5;&#x9010;&#x901A;&#x9053;&#x52A0;&#x6743;&#x5230;&#x5148;&#x524D;&#x7684;&#x7279;&#x5F81;&#x4E0A;&#xFF0C;&#x5B8C;&#x6210;&#x5728;&#x901A;&#x9053;&#x7EF4;&#x5EA6;&#x4E0A;&#x7684;&#x5BF9;&#x539F;&#x59CB;&#x7279;&#x5F81;&#x7684;&#x91CD;&#x6807;&#x5B9A;&#x3002; &#x5C0F;&#x7ED3;&#x2003;&#x2003;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x662F;CNN&#x7684;&#x6838;&#x5FC3;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x5B66;&#x4E60;&#x65F6;&#x5E38;&#x5E38;&#x4F1A;&#x548C;&#x5B83;&#x4EEC;&#x6253;&#x4EA4;&#x9053;&#xFF0C;&#x56E0;&#x6B64;&#x7CFB;&#x7EDF;&#x7684;&#x5B66;&#x4E60;&#x5404;&#x79CD;&#x5377;&#x79EF;&#x7684;&#x4F18;&#x7F3A;&#x70B9;&#x4EE5;&#x53CA;&#x5229;&#x7528;&#x573A;&#x666F;&#xFF0C;&#x5BF9;&#x4ECA;&#x540E;&#x7684;&#x5B66;&#x4E60;&#x5DE5;&#x4F5C;&#x662F;&#x975E;&#x5E38;&#x6709;&#x5E2E;&#x52A9;&#x7684;&#xFF0C;&#x5E0C;&#x671B;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x90FD;&#x53EF;&#x4EE5;&#x5B66;&#x4E60;&#x548C;&#x638C;&#x63E1;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>常用技巧</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[各种激活函数黑科技]]></title>
    <url>%2F2020%2F05%2F02%2Fdeep%20learning%20activation%2F</url>
    <content type="text"><![CDATA[Activation &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;Activation(&#x6FC0;&#x6D3B;&#x51FD;&#x6570;):&#x5728;&#x591A;&#x5C42;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4E2D;&#xFF0C;&#x4E0A;&#x5C42;&#x8282;&#x70B9;&#x7684;&#x8F93;&#x51FA;&#x548C;&#x4E0B;&#x5C42;&#x8282;&#x70B9;&#x7684;&#x8F93;&#x5165;&#x4E4B;&#x95F4;&#x5177;&#x6709;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x5173;&#x7CFB;&#xFF0C;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x79F0;&#x4E3A;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x3002;&#x5982;&#x679C;&#x4E0D;&#x7528;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x6BCF;&#x4E00;&#x5C42;&#x8282;&#x70B9;&#x7684;&#x8F93;&#x5165;&#x90FD;&#x662F;&#x4E0A;&#x5C42;&#x8F93;&#x51FA;&#x7684;&#x7EBF;&#x6027;&#x51FD;&#x6570;&#xFF0C;&#x5F88;&#x5BB9;&#x6613;&#x9A8C;&#x8BC1;&#xFF0C;&#x65E0;&#x8BBA;&#x4F60;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x6709;&#x591A;&#x5C11;&#x5C42;&#xFF0C;&#x8F93;&#x51FA;&#x90FD;&#x662F;&#x8F93;&#x5165;&#x7684;&#x7EBF;&#x6027;&#x7EC4;&#x5408;&#xFF0C;&#x4E0E;&#x6CA1;&#x6709;&#x9690;&#x85CF;&#x5C42;&#x6548;&#x679C;&#x76F8;&#x5F53;&#xFF0C;&#x8FD9;&#x6837;&#x4F1A;&#x5BFC;&#x81F4;&#x7F51;&#x7EDC;&#x7684;&#x903C;&#x8FD1;&#x80FD;&#x529B;&#x5927;&#x5927;&#x964D;&#x4F4E;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x5F15;&#x5165;&#x975E;&#x7EBF;&#x6027;&#x51FD;&#x6570;&#x4F5C;&#x4E3A;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x63D0;&#x9AD8;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8868;&#x8FBE;&#x80FD;&#x529B;&#xFF0C;&#x53EF;&#x4EE5;&#x903C;&#x8FD1;&#x4EFB;&#x610F;&#x51FD;&#x6570;&#xFF0C;&#x4E0D;&#x518D;&#x662F;&#x8F93;&#x5165;&#x7684;&#x7EBF;&#x6027;&#x7EC4;&#x5408;&#x3002; Sigmoid&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$$ f(z) = \frac{1}{1+e^{-z}} $$ tanh&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$$ f(x) = \frac{e^{x}-e^{-x}}{e^{x}+e^{-x}} $$ ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$$ f(x) = \max(0, x) $$ Leaky-ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$$ f(x) = \max(\alpha x, x), \alpha=0.01 $$ ReLU6&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$$ f(x) = \min(6, \max(0, x)) $$ ELU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$$ f(x) = \begin{cases} x &amp; x &gt; 0 \\ \alpha(e^{x} - 1) &amp; x \le 0 \end{cases}, \alpha=1 $$ SELU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$$ f(x) = \lambda \begin{cases} x &amp; x &gt; 0 \\ \alpha(e^{x} - 1) &amp; x \le 0 \end{cases}$$$$ \begin{cases} \lambda=1.0507009873554804934193349852946 \\ \alpha=1.6732632423543772848170429916717 \end{cases}$$ Swish&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$$ f(x) = x * sigmoid(x) $$ H-Swish&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$$ f(x) = x * \frac{ReLU6(x + 3)}{6} $$ Softmax&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$$ \sigma_{i}(z) = \frac{e^{z_i}}{\sum_{j=1}^{m}{e^{z_j}}} $$ &#x4F18;&#x7F3A;&#x70B9;&#x6BD4;&#x8F83;Sigmoid&#x51FD;&#x6570;&#x4F18;&#x70B9;&#xFF1A;Sigmoid&#x51FD;&#x6570;&#x5904;&#x5904;&#x8FDE;&#x7EED;&#xFF0C;&#x5904;&#x5904;&#x53EF;&#x5BFC;&#x3002;&#x4E14;&#x80FD;&#x591F;&#x63A7;&#x5236;&#x6570;&#x503C;&#x7684;&#x5E45;&#x5EA6;&#xFF0C;&#x4E0D;&#x4F1A;&#x4EA7;&#x751F;&#x5F88;&#x5927;&#x7684;&#x53D8;&#x5316;&#xFF0C;&#x53EF;&#x4EE5;&#x4F5C;&#x4E3A;&#x4E8C;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x7684;&#x8F93;&#x51FA;&#xFF0C;&#x800C;ReLU&#x7C7B;&#x578B;&#x7684;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x5BF9;&#x5927;&#x4E8E;0&#x7684;&#x503C;&#x51E0;&#x4E4E;&#x6CA1;&#x6709;&#x7EA6;&#x675F;&#x3002;Sigmoid&#x51FD;&#x6570;&#x7F3A;&#x70B9;&#xFF1A;&#x9971;&#x548C;&#x533A;&#x7684;&#x795E;&#x7ECF;&#x5143;&#x4F1A;&#x4EA7;&#x751F;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x73B0;&#x8C61;&#xFF0C;&#x4F7F;&#x5F97;&#x5B66;&#x4E60;&#x901F;&#x5EA6;&#x5927;&#x5927;&#x4E0B;&#x964D;&#xFF0C;&#x5E76;&#x4E14;&#x6307;&#x6570;&#x51FD;&#x6570;&#x8BA1;&#x7B97;&#x8017;&#x65F6;&#x3002;tanh&#x51FD;&#x6570;&#x4F18;&#x70B9;&#xFF1A;tanh&#x51FD;&#x6570;&#x548C;Sigmoid&#x7C7B;&#x4F3C;&#xFF0C;&#x4F46;&#x662F;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;tanh&#x7684;&#x5BFC;&#x6570;&#x7684;&#x503C;&#x57DF;&#x4E3A;(0, 1]&#xFF0C;&#x800C;Sigmoid&#x7684;&#x5BFC;&#x6570;&#x7684;&#x503C;&#x57DF;&#x4E3A;(0, 0.25]&#xFF0C;&#x56E0;&#x6B64;&#x76F8;&#x5F53;&#x4E8E;&#x5EF6;&#x8FDF;&#x4E86;&#x9971;&#x548C;&#x5468;&#x671F;&#x3002;tanh&#x51FD;&#x6570;&#x7F3A;&#x70B9;&#xFF1A;tanh&#x51FD;&#x6570;&#x548C;Sigmoid&#x7C7B;&#x4F3C;&#xFF0C;&#x4E5F;&#x5177;&#x6709;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x95EE;&#x9898;&#xFF0C;&#x548C;&#x6307;&#x6570;&#x8BA1;&#x7B97;&#x8017;&#x65F6;&#x95EE;&#x9898;&#x3002;ReLU&#x7C7B;&#x51FD;&#x6570;&#x4F18;&#x70B9;&#xFF1A;ReLU&#x7C7B;&#x578B;&#x51FD;&#x6570;&#x4F1A;&#x4F7F;&#x4E00;&#x90E8;&#x5206;&#x795E;&#x7ECF;&#x5143;&#x4E3A;0&#x6216;&#x8005;&#x975E;&#x5E38;&#x5C0F;&#xFF0C;&#x4F7F;&#x5F97;&#x7F51;&#x7EDC;&#x5177;&#x6709;&#x7A00;&#x758F;&#x6027;&#xFF0C;&#x51CF;&#x5C11;&#x4E86;&#x53C2;&#x6570;&#x7684;&#x76F8;&#x4E92;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;&#xFF0C;&#x7F13;&#x89E3;&#x4E86;&#x8FC7;&#x62DF;&#x5408;&#xFF0C;&#x800C;&#x4E14;ReLU&#x51FD;&#x6570;&#x53CA;&#x5176;&#x5BFC;&#x6570;&#x7684;&#x8BA1;&#x7B97;&#x975E;&#x5E38;&#x7B80;&#x5355;&#x3002;ReLU&#x7C7B;&#x51FD;&#x6570;&#x7F3A;&#x70B9;&#xFF1A;&#x53EF;&#x80FD;&#x5B58;&#x5728;&#x795E;&#x7ECF;&#x5143;&#x574F;&#x6B7B;&#x73B0;&#x8C61;&#xFF0C;&#x5728;x&lt;0&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x68AF;&#x5EA6;&#x4E3A;0&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x4F7F;&#x8FD9;&#x4E2A;&#x795E;&#x7ECF;&#x5143;&#x5F88;&#x96BE;&#x518D;&#x88AB;&#x6FC0;&#x6D3B;&#xFF0C;&#x4E14;ReLU&#x51FD;&#x6570;&#x4E0D;&#x80FD;&#x63A7;&#x5236;&#x53C2;&#x6570;&#x7684;&#x5E45;&#x5EA6;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x4EA7;&#x751F;&#x68AF;&#x5EA6;&#x7206;&#x70B8;&#x73B0;&#x8C61;&#x3002;Swish&#x7C7B;&#x51FD;&#x6570;&#x4F18;&#x70B9;&#xFF1A;Swish&#x51FD;&#x6570;&#x662F;&#x4ECB;&#x4E8E;ReLU&#x51FD;&#x6570;&#x548C;Sigmoid&#x51FD;&#x6570;&#x4E4B;&#x95F4;&#x7684;&#x4E00;&#x79CD;&#x5E73;&#x6ED1;&#x51FD;&#x6570;&#xFF0C;&#x5177;&#x6709;&#x4E24;&#x8005;&#x7684;&#x4F18;&#x70B9;&#xFF0C;&#x4E0D;&#x4F1A;&#x50CF;Sigmoid&#x51FD;&#x6570;&#x4E00;&#x6837;&#x4EA7;&#x751F;&#x9971;&#x548C;&#x533A;&#xFF0C;&#x4E5F;&#x4E0D;&#x4F1A;&#x50CF;ReLU&#x51FD;&#x6570;&#x4E00;&#x6837;&#x5B58;&#x5728;&#x574F;&#x6B7B;&#x795E;&#x7ECF;&#x5143;&#x3002;Swish&#x7C7B;&#x51FD;&#x6570;&#x7F3A;&#x70B9;&#xFF1A;Swish&#x51FD;&#x6570;&#x4E5F;&#x5177;&#x6709;&#x4E24;&#x8005;&#x7684;&#x7F3A;&#x70B9;&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;Sigmoid&#x51FD;&#x6570;&#x8BA1;&#x7B97;&#x8017;&#x65F6;&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;ReLU&#x51FD;&#x6570;&#x96BE;&#x4EE5;&#x63A7;&#x5236;&#x53C2;&#x6570;&#x5E45;&#x5EA6;&#xFF0C;&#x4F46;&#x6574;&#x4F53;&#x8868;&#x73B0;&#x8F83;&#x597D;&#x3002;Softmax&#x51FD;&#x6570;&#x7279;&#x70B9;&#xFF1A;Softmax&#x51FD;&#x6570;&#x548C;&#x5176;&#x4ED6;&#x7684;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x4E0D;&#x540C;&#xFF0C;Softmax&#x4E3B;&#x8981;&#x7528;&#x4E8E;&#x591A;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x4E2D;&#xFF0C;&#x5982;&#x56FE;&#x50CF;&#x5206;&#x5272;&#xFF0C;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#xFF0C;&#x9700;&#x8981;&#x5224;&#x65AD;&#x67D0;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x6216;&#x8005;&#x67D0;&#x4E00;&#x4E2A;&#x9884;&#x6D4B;&#x6846;&#x5C5E;&#x4E8E;&#x54EA;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#x3002;Softmax&#x5C06;&#x8F93;&#x5165;&#x5F52;&#x4E00;&#x5316;&#x5230;[0, 1]&#x4E4B;&#x95F4;&#xFF0C;&#x5E76;&#x4E14;&#x4FDD;&#x8BC1;&#x548C;&#x4E3A;1&#xFF0C;&#x4F7F;&#x4EBA;&#x80FD;&#x591F;&#x8054;&#x60F3;&#x5230;&#x6982;&#x7387;&#x7684;&#x6761;&#x4EF6;&#xFF0C;&#x4E5F;&#x662F;&#x5C5E;&#x4E8E;[0, 1]&#xFF0C;&#x5E76;&#x4E14;&#x548C;&#x4E3A;1&#x3002;&#x52A0;&#x4E0A;&#x6307;&#x6570;&#x7684;&#x4F5C;&#x7528;&#x662F;&#x589E;&#x52A0;&#x6837;&#x672C;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x8DDD;&#xFF0C;&#x5982;&#x679C;&#x8F93;&#x5165;&#x4E3A;90&#x4E2A;1&#x548C;1&#x4E2A;10&#xFF0C;&#x5219;&#x76F4;&#x63A5;&#x5F52;&#x4E00;&#x5316;&#x7684;&#x7ED3;&#x679C;&#x4E3A;90&#x4E2A;0.01&#x548C;1&#x4E2A;0.1&#xFF0C;&#x5982;&#x679C;10&#x662F;&#x5BF9;&#x5E94;&#x7684;&#x7C7B;&#x522B;&#xFF0C;&#x5373;&#x4F7F;&#x5DF2;&#x7ECF;&#x5206;&#x7C7B;&#x7684;&#x8F83;&#x597D;&#xFF0C;&#x4ECD;&#x7136;&#x4F1A;&#x4F7F;&#x5F97;&#x8BEF;&#x5DEE;&#x8F83;&#x5927;&#x3002;&#x52A0;&#x4E0A;&#x6307;&#x6570;&#x8FD0;&#x7B97;&#x540E;&#xFF0C;&#x5F52;&#x4E00;&#x5316;&#x7684;&#x7ED3;&#x679C;&#x4E3A;90&#x4E2A;0.000122&#xFF0C;1&#x4E2A;0.989&#xFF0C;&#x8FD9;&#x6837;&#x8BEF;&#x5DEE;&#x5C31;&#x4F1A;&#x8F83;&#x5C0F;&#xFF0C;&#x66F4;&#x52A0;&#x63A5;&#x8FD1;&#x4E8E;&#x771F;&#x5B9E;&#x7684;&#x60C5;&#x51B5;&#x3002; &#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x7684;&#x9009;&#x62E9; &#x9996;&#x5148;&#x5224;&#x65AD;&#x4EFB;&#x52A1;&#x7C7B;&#x578B;&#xFF0C;&#x662F;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x8FD8;&#x662F;&#x4F5C;&#x4E3A;&#x9690;&#x85CF;&#x5C42;&#x975E;&#x7EBF;&#x6027;&#x5355;&#x5143;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x591A;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x5219;&#x8003;&#x8651;Softmax&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x4E8C;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x5219;&#x8003;&#x8651;Sigmoid&#xFF0C;tanh&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x9690;&#x85CF;&#x5C42;&#x975E;&#x7EBF;&#x6027;&#x5355;&#x5143;&#x5219;&#x8003;&#x8651;Sigmoid&#xFF0C;tanh&#xFF0C;ReLU&#xFF0C;Swish&#x7B49;&#x7B49;&#x3002; &#x5982;&#x679C;&#x662F;&#x9690;&#x85CF;&#x5C42;&#x975E;&#x7EBF;&#x6027;&#x5355;&#x5143;&#xFF0C;&#x9996;&#x5148;&#x5C1D;&#x8BD5;ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#xFF0C;&#x5982;&#x679C;ReLU&#x6548;&#x679C;&#x6B20;&#x4F73;&#x5219;&#x8003;&#x8651;ReLU&#x53D8;&#x79CD;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#xFF0C;ReLU6&#xFF0C;Leaky_ReLU&#xFF0C;SELU&#xFF0C;ELU&#x7B49;&#x7B49; &#x5982;&#x679C;&#x6548;&#x679C;&#x4E0D;&#x597D;&#xFF0C;&#x518D;&#x8003;&#x8651;Swish&#x7C7B;&#x51FD;&#x6570;&#x548C;Sigmoid&#xFF0C;tanh&#x51FD;&#x6570;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x53D1;&#x73B0;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x95EE;&#x9898;&#xFF0C;&#x5219;&#x907F;&#x514D;&#x4F7F;&#x7528;Sigmoid&#x548C;tanh&#x51FD;&#x6570;&#x3002;4.&#x5982;&#x679C;&#x90FD;&#x4E0D;&#x597D;&#x7528;&#xFF0C;&#x5219;&#x8003;&#x8651;&#x662F;&#x5426;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#xFF0C;&#x8D85;&#x53C2;&#x6570;&#xFF0C;&#x635F;&#x5931;&#x51FD;&#x6570;&#x8BBE;&#x8BA1;&#x51FA;&#x73B0;&#x95EE;&#x9898;&#x3002; &#x5C0F;&#x7ED3;&#x2003;&#x2003;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x5DE5;&#x7A0B;&#x95EE;&#x9898;&#x662F;&#x4E00;&#x7C7B;&#x975E;&#x5E38;&#x590D;&#x6742;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x5F80;&#x5F80;&#x9700;&#x8981;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#xFF0C;&#x8D85;&#x53C2;&#x6570;&#xFF0C;&#x635F;&#x5931;&#x51FD;&#x6570;&#xFF0C;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x76F8;&#x4E92;&#x914D;&#x5408;&#x5DE5;&#x4F5C;&#xFF0C;&#x53EF;&#x80FD;&#x67D0;&#x4E2A;&#x7ED3;&#x6784;&#x6216;&#x8005;&#x67D0;&#x4E2A;&#x53C2;&#x6570;&#x9002;&#x5408;&#x67D0;&#x4E2A;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#xFF0C;&#x800C;&#x53E6;&#x5916;&#x7684;&#x7ED3;&#x6784;&#x9002;&#x5408;&#x5176;&#x4ED6;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x3002;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5728;&#x5B9E;&#x9645;&#x7684;&#x5DE5;&#x7A0B;&#x4EFB;&#x52A1;&#x4E2D;&#x6162;&#x6162;&#x6478;&#x7D22;&#xFF0C;&#x591A;&#x591A;&#x5C1D;&#x8BD5;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>常用技巧</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[目标检测数据集]]></title>
    <url>%2F2020%2F04%2F30%2FObject%20detection%20Dataset%2F</url>
    <content type="text"><![CDATA[Data Set &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;&#x76EE;&#x6807;&#x68C0;&#x6D4B;:&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x7684;&#x57FA;&#x7840;&#x4EFB;&#x52A1;&#xFF0C;&#x8FD1;&#x51E0;&#x5E74;&#x6765;&#xFF0C;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x7B97;&#x6CD5;&#x53D6;&#x5F97;&#x4E86;&#x5F88;&#x5927;&#x7684;&#x7A81;&#x7834;&#xFF0C;&#x4E3B;&#x6D41;&#x8D8B;&#x52BF;&#x662F;&#x4E24;&#x79CD;&#xFF0C;&#x4E00;&#x79CD;&#x662F;one-stage&#x7B97;&#x6CD5;&#xFF0C;&#x4EE5;SSD&#xFF0C;YOLO&#x4E3A;&#x4EE3;&#x8868;&#xFF0C;&#x53E6;&#x4E00;&#x7C7B;&#x662F;two-stage&#x7B97;&#x6CD5;&#xFF0C;&#x4EE5;Faster R-CNN&#x4E3A;&#x4EE3;&#x8868;&#x3002;&#x5E7F;&#x6CDB;&#x5E94;&#x7528;&#x4E8E;&#x751F;&#x6D3B;&#x4E4B;&#x4E2D;&#xFF0C;&#x5305;&#x62EC;&#x4EBA;&#x8138;&#x68C0;&#x6D4B;&#xFF0C;&#x81EA;&#x52A8;&#x9A7E;&#x9A76;&#x7B49;&#x7B49;&#x65B9;&#x9762;&#xFF0C;&#x5728;&#x8FD1;&#x671F;&#x7684;&#x75AB;&#x60C5;&#x4E4B;&#x4E2D;&#x4E5F;&#x53D1;&#x6325;&#x4E86;&#x5DE8;&#x5927;&#x7684;&#x4F5C;&#x7528;&#xFF0C;&#x5728;&#x706B;&#x8F66;&#x7AD9;&#xFF0C;&#x5730;&#x94C1;&#x53E3;&#x90FD;&#x5E94;&#x7528;&#x5230;&#x4E86;&#x4EBA;&#x8138;&#x68C0;&#x6D4B;&#x65B9;&#x6CD5;&#xFF0C;&#x68C0;&#x6D4B;&#x5230;&#x4EBA;&#x8138;&#x540E;&#x5229;&#x7528;&#x7EA2;&#x5916;&#x5BF9;&#x4F53;&#x6E29;&#x8FDB;&#x884C;&#x6D4B;&#x91CF;&#xFF0C;&#x56E0;&#x6B64;&#x80FD;&#x624B;&#x52A8;&#x642D;&#x5EFA;&#x4E00;&#x4E9B;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x7F51;&#x7EDC;&#xFF0C;&#x5BF9;&#x4ECA;&#x540E;&#x7684;&#x5B66;&#x4E60;&#x5DE5;&#x4F5C;&#x90FD;&#x662F;&#x975E;&#x5E38;&#x6709;&#x5E2E;&#x52A9;&#x7684;&#x3002; &#x4E00;&#x6B65;&#x6CD5;&#x548C;&#x4E24;&#x6B65;&#x6CD5;&#x7684;&#x533A;&#x522B;&#x4E00;&#x6B65;&#x6CD5;&#xFF1A;&#x5728;&#x539F;&#x56FE;&#x50CF;&#x4E0A;&#x9762;&#x94FA;&#x8BBE;&#x5927;&#x91CF;&#x951A;&#x70B9;&#x6846;(anchor)&#xFF0C;&#x7136;&#x540E;&#x5728;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7684;&#x65F6;&#x5019;&#x5BF9;&#x951A;&#x70B9;&#x6846;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x56DE;&#x5F52;&#x548C;&#x5206;&#x7C7B;&#xFF0C;&#x5F97;&#x5230;&#x6700;&#x7EC8;&#x7684;&#x68C0;&#x6D4B;&#x7ED3;&#x679C;&#x4E24;&#x6B65;&#x6CD5;&#xFF1A;&#x5728;&#x539F;&#x56FE;&#x50CF;&#x4E0A;&#x9762;&#x94FA;&#x8BBE;&#x5927;&#x91CF;&#x951A;&#x70B9;&#x6846;(anchor)&#xFF0C;&#x7136;&#x540E;&#x5148;&#x5229;&#x7528;&#x4E00;&#x4E2A;&#x7F51;&#x7EDC;&#x5BF9;&#x951A;&#x70B9;&#x6846;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x5206;&#x7C7B;&#x548C;&#x56DE;&#x5F52;(&#x7C97;&#x7B5B;&#x9009;)&#xFF0C;&#x5F97;&#x5230;&#x5EFA;&#x8BAE;&#x6846;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5BF9;&#x5EFA;&#x8BAE;&#x6846;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x56DE;&#x5F52;&#x548C;&#x5206;&#x7C7B;&#x5F97;&#x5230;&#x6700;&#x7EC8;&#x7684;&#x68C0;&#x6D4B;&#x7ED3;&#x679C;&#x3002;&#x4F18;&#x7F3A;&#x70B9;&#xFF1A;&#x7ECF;&#x8FC7;&#x4E0A;&#x9762;&#x7684;&#x63CF;&#x8FF0;&#xFF0C;&#x5BB9;&#x6613;&#x770B;&#x51FA;&#xFF0C;&#x4E00;&#x6B65;&#x6CD5;&#x7684;&#x4F18;&#x70B9;&#x662F;&#x6548;&#x7387;&#x9AD8;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x4E00;&#x6B65;&#x5373;&#x53EF;&#x5B8C;&#x6210;&#x6700;&#x7EC8;&#x68C0;&#x6D4B;&#xFF0C;&#x6CA1;&#x6709;&#x8017;&#x65F6;&#x7684;&#x7B2C;&#x4E8C;&#x6B65;&#xFF0C;&#x4F46;&#x662F;&#x7F3A;&#x70B9;&#x4E5F;&#x5F88;&#x660E;&#x663E;&#xFF0C;&#x56E0;&#x4E3A;&#x6CA1;&#x6709;&#x7C97;&#x7B5B;&#x9009;&#xFF0C;&#x5BFC;&#x81F4;&#x6B63;&#x8D1F;&#x6837;&#x672C;&#x6781;&#x7AEF;&#x4E0D;&#x5E73;&#x8861;&#xFF0C;&#x56E0;&#x6B64;&#x68C0;&#x6D4B;&#x7CBE;&#x5EA6;&#x7565;&#x4F4E;&#x4E8E;&#x4E24;&#x6B65;&#x6CD5;&#x3002;&#x4E24;&#x6B65;&#x6CD5;&#x867D;&#x7136;&#x68C0;&#x6D4B;&#x901F;&#x5EA6;&#x6162;&#xFF0C;&#x4F46;&#x662F;&#x68C0;&#x6D4B;&#x7CBE;&#x5EA6;&#x7565;&#x9AD8;&#x4E8E;&#x4E00;&#x6B65;&#x6CD5;&#x3002;&#x968F;&#x7740;&#x7F51;&#x7EDC;&#x7684;&#x53D1;&#x5C55;&#xFF0C;&#x786C;&#x4EF6;&#x6C34;&#x5E73;&#x7684;&#x63D0;&#x9AD8;&#xFF0C;&#x4E24;&#x7C7B;&#x7B97;&#x6CD5;&#x90FD;&#x5728;&#x4E0D;&#x65AD;&#x7684;&#x8FDB;&#x6B65;&#x4E4B;&#x4E2D;&#xFF0C;&#x901F;&#x5EA6;&#x548C;&#x7CBE;&#x5EA6;&#x90FD;&#x53EF;&#x4EE5;&#x53D6;&#x5F97;&#x8F83;&#x597D;&#x7684;&#x7ED3;&#x679C;&#x3002; &#x6570;&#x636E;&#x96C6;&#x4EE5;&#x53CA;IOU&#xFF0C;NMS&#x4ECB;&#x7ECD;&#x6570;&#x636E;&#x96C6;&#xFF1A;&#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#x6A21;&#x578B;&#x8C03;&#x8BD5;&#x7684;&#x65B9;&#x4FBF;&#xFF0C;&#x6211;&#x7684;&#x535A;&#x5BA2;&#x4E2D;&#x4ECB;&#x7ECD;&#x7684;&#x6570;&#x636E;&#x96C6;&#x662F;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x7684;Shape&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x53EA;&#x6709;1000&#x4E2A;&#x8BAD;&#x7EC3;&#x6837;&#x672C;&#xFF0C;&#x4E3A;&#x4E86;&#x52A0;&#x5FEB;&#x8BAD;&#x7EC3;&#x901F;&#x5EA6;&#xFF0C;&#x6570;&#x636E;&#x96C6;&#x7684;&#x5927;&#x5C0F;&#x6211;&#x4E5F;&#x8C03;&#x6574;&#x4E3A;128x128&#xFF0C;&#x8FD9;&#x4E2A;&#x6570;&#x636E;&#x96C6;&#x53EA;&#x6709;&#x4E09;&#x7C7B;&#x7269;&#x4F53;&#xFF0C;&#x5206;&#x522B;&#x662F;&#x5706;&#x5F62;&#xFF0C;&#x4E09;&#x89D2;&#x5F62;&#x548C;&#x6B63;&#x65B9;&#x5F62;&#xFF0C;&#x56FE;&#x50CF;&#x6570;&#x636E;&#x4E3A;jpg&#x6587;&#x4EF6;&#xFF0C;&#x6807;&#x7B7E;&#x6570;&#x636E;&#x4E3A;xml&#x6587;&#x4EF6;&#xFF0C;&#x5176;&#x4E2D;&#x8BB0;&#x5F55;&#x4E86;&#x7269;&#x4F53;&#x51FA;&#x73B0;&#x7684;&#x5DE6;&#x4E0A;&#x89D2;&#x548C;&#x53F3;&#x4E0B;&#x89D2;&#x5750;&#x6807;&#x3002;IOU(Intersection Over Union&#xFF0C;&#x4EA4;&#x5E76;&#x6BD4;)&#xFF1A;&#x7528;&#x4E8E;&#x8BC4;&#x4F30;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x7B97;&#x6CD5;&#x6027;&#x80FD;&#x7684;&#x6307;&#x6807;&#x662F;&#x5E73;&#x5747;IOU&#xFF0C;&#x4EA4;&#x5E76;&#x6BD4;&#x4E5F;&#x975E;&#x5E38;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x7B97;&#x6CD5;&#x7684;&#x7ED3;&#x679C;&#x4E0E;&#x771F;&#x5B9E;&#x7269;&#x4F53;&#x8FDB;&#x884C;&#x4EA4;&#x8FD0;&#x7B97;&#x7684;&#x7ED3;&#x679C;&#x9664;&#x4EE5;&#x8FDB;&#x884C;&#x5E76;&#x8FD0;&#x7B97;&#x7684;&#x7ED3;&#x679C;&#x3002;&#x901A;&#x8FC7;&#x4E0B;&#x56FE;&#x53EF;&#x4EE5;&#x76F4;&#x89C2;&#x7684;&#x770B;&#x51FA;IOU&#x7684;&#x8BA1;&#x7B97;&#x65B9;&#x6CD5;&#x3002;NMS(Non-Maximum Suppression&#xFF0C;&#x975E;&#x6781;&#x5927;&#x503C;&#x6291;&#x5236;)&#xFF1A;&#x7B80;&#x5355;&#x5730;&#x8BF4;&#xFF0C;&#x4E0D;&#x662F;&#x6700;&#x5927;&#x7684;&#x6211;&#x4E0D;&#x8981;&#xFF0C;&#x5728;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x4E2D;&#xFF0C;&#x5F80;&#x5F80;&#x56FE;&#x50CF;&#x4E0A;&#x5B58;&#x5728;&#x5927;&#x91CF;&#x5148;&#x9A8C;&#x6846;&#xFF0C;&#x4F1A;&#x5BFC;&#x81F4;&#x5F88;&#x591A;&#x9644;&#x8FD1;&#x7684;&#x6846;&#x90FD;&#x4F1A;&#x9884;&#x6D4B;&#x51FA;&#x540C;&#x4E00;&#x4E2A;&#x7269;&#x4F53;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x53EA;&#x4FDD;&#x7559;&#x6700;&#x5927;&#x7684;&#x4E00;&#x4E2A;&#x9884;&#x6D4B;&#x7ED3;&#x679C;&#xFF0C;&#x8FD9;&#x5C31;&#x662F;&#x975E;&#x6781;&#x5927;&#x503C;&#x6291;&#x5236;&#x3002;&#x6B65;&#x9AA4;&#xFF1A;(1)&#x4ECE;&#x6700;&#x5927;&#x6982;&#x7387;&#x77E9;&#x5F62;&#x6846;F&#x5F00;&#x59CB;&#xFF0C;&#x5206;&#x522B;&#x5224;&#x65AD;A~E&#x4E0E;F&#x7684;IOU&#x662F;&#x5426;&#x5927;&#x4E8E;&#x67D0;&#x4E2A;&#x8BBE;&#x5B9A;&#x7684;&#x9608;&#x503C;&#xFF0C;&#x5047;&#x8BBE;B&#x3001;D&#x4E0E;F&#x7684;&#x91CD;&#x53E0;&#x5EA6;&#x8D85;&#x8FC7;&#x9608;&#x503C;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x6254;&#x6389;B&#x3001;D&#xFF1B;&#x5E76;&#x6807;&#x8BB0;&#x7B2C;&#x4E00;&#x4E2A;&#x77E9;&#x5F62;&#x6846;F&#xFF0C;&#x662F;&#x6211;&#x4EEC;&#x4FDD;&#x7559;&#x4E0B;&#x6765;&#x7684;&#x3002;(2)&#x4ECE;&#x5269;&#x4E0B;&#x7684;&#x77E9;&#x5F62;&#x6846;A&#x3001;C&#x3001;E&#x4E2D;&#xFF0C;&#x9009;&#x62E9;&#x6982;&#x7387;&#x6700;&#x5927;&#x7684;E&#xFF0C;&#x7136;&#x540E;&#x5224;&#x65AD;E&#x4E0E;A&#x3001;C&#x7684;&#x91CD;&#x53E0;&#x5EA6;&#xFF0C;&#x91CD;&#x53E0;&#x5EA6;&#x5927;&#x4E8E;&#x4E00;&#x5B9A;&#x7684;&#x9608;&#x503C;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x6254;&#x6389;&#xFF1B;&#x5E76;&#x6807;&#x8BB0;E&#x662F;&#x6211;&#x4EEC;&#x4FDD;&#x7559;&#x4E0B;&#x6765;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x77E9;&#x5F62;&#x6846;&#x3002;(3)&#x91CD;&#x590D;&#x6B65;&#x9AA4;(2)&#xFF0C;&#x76F4;&#x5230;&#x6240;&#x6709;&#x7684;&#x6846;&#x90FD;&#x88AB;&#x629B;&#x5F03;&#x6216;&#x8005;&#x4FDD;&#x7559;&#x3002; &#x4E00;&#x4E9B;&#x8BF4;&#x660E; &#x5728;&#x5B66;&#x4E60;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x53EF;&#x80FD;&#x4F1A;&#x9047;&#x5230;&#x4E00;&#x4E9B;&#x4EE3;&#x7801;&#x4E0A;&#x7684;&#x56F0;&#x96BE;&#xFF0C;&#x5982;tensorflow&#xFF0C;numpy&#xFF0C;opencv&#x7684;&#x7528;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x6211;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x6846;&#x67B6;&#x548C;Python&#x5E38;&#x7528;&#x5E93;&#x76F8;&#x5173;&#x6587;&#x7AE0;&#xFF0C;&#x91CC;&#x9762;&#x4F1A;&#x6709;&#x4E00;&#x4E9B;&#x7B80;&#x5355;&#x7684;&#x4ECB;&#x7ECD;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x5B66;&#x4E60;&#xFF0C;&#x6700;&#x597D;&#x662F;&#x624B;&#x52A8;&#x6572;&#x4E00;&#x6572;&#xFF0C;&#x770B;&#x4E00;&#x770B;&#x3002; &#x56E0;&#x4E3A;&#x8FD9;&#x4E2A;&#x535A;&#x5BA2;&#x662F;&#x5BF9;&#x5B66;&#x4E60;&#x7684;&#x4E00;&#x4E9B;&#x603B;&#x7ED3;&#x548C;&#x8BB0;&#x5F55;&#xFF0C;&#x610F;&#x5728;&#x548C;&#x5B66;&#x4E60;&#x8005;&#x63A2;&#x8BA8;&#x548C;&#x4EA4;&#x6D41;&#xFF0C;&#x5E76;&#x4E14;&#x7ED9;&#x51C6;&#x5907;&#x5165;&#x95E8;&#x7684;&#x540C;&#x5B66;&#x4E00;&#x4E9B;&#x624B;&#x628A;&#x624B;&#x7684;&#x6559;&#x5B66;&#xFF0C;&#x56E0;&#x6B64;&#x5173;&#x4E8E;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x7684;&#x7B97;&#x6CD5;&#x53C2;&#x6570;&#x8BBE;&#x8BA1;&#xFF0C;&#x6211;&#x90FD;&#x662F;&#x81EA;&#x5DF1;&#x5C1D;&#x8BD5;&#x7684;&#xFF0C;&#x4E0D;&#x662F;&#x9488;&#x5BF9;&#x4E8E;&#x8FD9;&#x4E2A;&#x6570;&#x636E;&#x96C6;&#x6700;&#x4F18;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x5927;&#x5BB6;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x7684;&#x5B9E;&#x9645;&#x9700;&#x8981;&#x4FEE;&#x6539;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x3002; &#x5B9E;&#x9645;&#x7684;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x5E38;&#x5E38;&#x8FD8;&#x9700;&#x8981;&#x5BF9;&#x6570;&#x636E;&#x96C6;&#x8FDB;&#x884C;&#x5927;&#x5C0F;&#x8C03;&#x6574;&#x548C;&#x589E;&#x5F3A;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x4E3A;&#x4E86;&#x7B80;&#x5355;&#x8D77;&#x89C1;&#xFF0C;&#x6CA1;&#x6709;&#x8FDB;&#x884C;&#x590D;&#x6742;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5E94;&#x7528;&#x4E2D;&#x8981;&#x8BB0;&#x5F97;&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x7684;&#x9700;&#x8981;&#xFF0C;&#x5BF9;&#x56FE;&#x50CF;&#x8FDB;&#x884C;resize&#x6216;&#x8005;padding&#xFF0C;&#x7136;&#x540E;&#x65CB;&#x8F6C;&#xFF0C;&#x5BF9;&#x6BD4;&#x5EA6;&#x589E;&#x5F3A;&#xFF0C;&#x4EFF;&#x5C04;&#x8FD0;&#x7B97;&#x7B49;&#x7B49;&#x64CD;&#x4F5C;&#xFF0C;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x9C81;&#x68D2;&#x6027;&#xFF0C;&#x5E76;&#x4E14;&#x5B9E;&#x9645;&#x4E2D;&#x7684;&#x56FE;&#x50CF;&#x4E0D;&#x4E00;&#x5B9A;&#x6309;&#x7167;&#x987A;&#x5E8F;&#x547D;&#x540D;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x5E94;&#x7528;&#x4E2D;&#x4E5F;&#x8981;&#x6CE8;&#x610F;&#x56FE;&#x50CF;&#x8BFB;&#x53D6;&#x7684;&#x6587;&#x4EF6;&#x540D;&#x3002; &#x4E3A;&#x4E86;&#x8BA9;&#x5B66;&#x4E60;&#x8005;&#x770B;&#x7684;&#x65B9;&#x4FBF;&#x548C;&#x6E05;&#x6670;&#xFF0C;&#x6211;&#x6CA1;&#x6709;&#x4F7F;&#x7528;&#x591A;&#x4E2A;&#x6587;&#x4EF6;&#x5BF9;&#x7A0B;&#x5E8F;&#x8FDB;&#x884C;&#x5C01;&#x88C5;&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x5728;&#x521A;&#x5F00;&#x59CB;&#x5B66;&#x4E60;&#x6A21;&#x578B;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x67E5;&#x770B;GitHub&#x4EE3;&#x7801;&#xFF0C;&#x4E00;&#x4E2A;&#x6A21;&#x578B;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x597D;&#x51E0;&#x4E2A;&#x6587;&#x4EF6;&#x5939;&#xFF0C;&#x6BCF;&#x4E2A;&#x6587;&#x4EF6;&#x5939;&#x91CC;&#x9762;&#x53C8;&#x6709;&#x5F88;&#x591A;&#x7684;&#x4EE3;&#x7801;&#x6587;&#x4EF6;&#xFF0C;&#x5176;&#x4E2D;&#x5F88;&#x591A;&#x6587;&#x4EF6;&#x4E92;&#x76F8;&#x8C03;&#x7528;&#x3002;&#x867D;&#x7136;&#x8FD9;&#x6837;&#x7684;&#x5DE5;&#x7A0B;&#x9879;&#x76EE;&#x662F;&#x975E;&#x5E38;&#x597D;&#x7BA1;&#x7406;&#x548C;&#x8FD0;&#x884C;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x7ED9;&#x521D;&#x5B66;&#x8005;&#x4E00;&#x79CD;&#x4E08;&#x4E8C;&#x548C;&#x5C1A;&#x6478;&#x4E0D;&#x7740;&#x5934;&#x8111;&#x7684;&#x611F;&#x89C9;&#xFF0C;&#x5BF9;&#x6B64;&#x6211;&#x6DF1;&#x6709;&#x4F53;&#x4F1A;&#x3002;&#x6240;&#x4EE5;&#x6211;&#x5C31;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;.py&#x6587;&#x4EF6;&#x6765;&#x5C01;&#x88C5;&#xFF0C;&#x56E0;&#x6B64;&#x4EE3;&#x7801;&#x53EF;&#x80FD;&#x4F1A;&#x6709;&#x51E0;&#x767E;&#x884C;&#xFF0C;&#x4F46;&#x662F;&#x5176;&#x4E2D;&#x7684;&#x5404;&#x4E2A;&#x51FD;&#x6570;&#x548C;&#x7C7B;&#x90FD;&#x6709;&#x81EA;&#x5DF1;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x53EF;&#x4EE5;&#x4FDD;&#x8BC1;&#x5B66;&#x4E60;&#x8005;&#x4E0D;&#x4F1A;&#x88AB;&#x7EB8;&#x8001;&#x864E;&#x5413;&#x4F4F;&#x3002; &#x5728;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x5B66;&#x4E60;&#x4E2D;&#xFF0C;&#x6211;&#x4F1A;&#x5217;&#x4E3E;&#x51FA;&#x4E00;&#x4E9B;&#x7ECF;&#x5178;&#x7684;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x6A21;&#x578B;&#xFF0C;&#x56E0;&#x4E3A;&#x6A21;&#x578B;&#x592A;&#x591A;&#xFF0C;&#x5E76;&#x4E14;&#x4ECD;&#x5728;&#x4E0D;&#x65AD;&#x7684;&#x66F4;&#x65B0;&#x8FDB;&#x6B65;&#x4E4B;&#x4E2D;&#xFF0C;&#x6240;&#x4EE5;&#x5927;&#x5BB6;&#x53EF;&#x4EE5;&#x8054;&#x7CFB;&#x6211;&#xFF0C;&#x548C;&#x6211;&#x8FDB;&#x884C;&#x6C9F;&#x901A;&#x548C;&#x4EA4;&#x6D41;&#xFF0C;&#x6216;&#x8005;&#x63A8;&#x8350;&#x7ED9;&#x6211;&#x4E00;&#x4E9B;&#x4F18;&#x79C0;&#x7684;&#x6A21;&#x578B;&#x3002; &#x5173;&#x4E8E;&#x95EE;&#x9898;&#x7684;&#x4EA4;&#x6D41;&#xFF0C;&#x56FE;&#x50CF;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x9700;&#x8981;&#x7684;&#x540C;&#x5B66;&#x53EF;&#x4EE5;&#x5230;&#x4E3B;&#x9875;&#x67E5;&#x770B;&#x6211;&#x7684;QQ&#x6216;&#x8005;&#x90AE;&#x7BB1;&#xFF0C;&#x6211;&#x4F1A;&#x975E;&#x5E38;&#x8363;&#x5E78;&#x7684;&#x63D0;&#x4F9B;&#x529B;&#x6240;&#x80FD;&#x53CA;&#x7684;&#x5E2E;&#x52A9;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x52A0;&#x597D;&#x53CB;&#x7684;&#x65F6;&#x5019;&#x4E00;&#x5B9A;&#x8981;&#x8BB0;&#x5F97;&#x5907;&#x6CE8;&#xFF0C;&#x4E0D;&#x7136;&#x6211;&#x53EF;&#x80FD;&#x4F1A;&#x5FFD;&#x89C6;&#x4E00;&#x4E9B;&#x7C97;&#x5FC3;&#x7684;&#x5C0F;&#x4F19;&#x4F34;&#x3002; &#x5C0F;&#x7ED3;&#x2003;&#x2003;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x7684;&#x57FA;&#x7840;&#x4EFB;&#x52A1;&#xFF0C;&#x4E5F;&#x662F;&#x975E;&#x5E38;&#x91CD;&#x8981;&#x7684;&#x4EFB;&#x52A1;&#x4E4B;&#x4E00;&#xFF0C;&#x81EA;&#x4ECE;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7684;&#x65F6;&#x4EE3;&#x5230;&#x6765;&#xFF0C;&#x5404;&#x79CD;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x767E;&#x82B1;&#x9F50;&#x653E;&#xFF0C;&#x5F88;&#x96BE;&#x8BF4;&#x51FA;&#x6700;&#x597D;&#x7684;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x65B9;&#x6CD5;&#xFF0C;&#x53EF;&#x80FD;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x9002;&#x7528;&#x4E8E;&#x5F88;&#x591A;&#x6570;&#x636E;&#xFF0C;&#x4F46;&#x4E5F;&#x4E0D;&#x80FD;&#x8BF4;&#x660E;&#x67D0;&#x4E00;&#x4E2A;&#x7B97;&#x6CD5;&#x4E00;&#x5B9A;&#x4F18;&#x4E8E;&#x53E6;&#x4E00;&#x4E2A;&#x7B97;&#x6CD5;&#xFF0C;&#x6211;&#x4EEC;&#x8981;&#x505A;&#x7684;&#x5C31;&#x662F;&#x5C3D;&#x53EF;&#x80FD;&#x591A;&#x7684;&#x5B66;&#x4E60;&#x5404;&#x79CD;&#x5404;&#x6837;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x6A21;&#x578B;&#xFF0C;&#x7136;&#x540E;&#x5438;&#x53D6;&#x8FD9;&#x4E9B;&#x6A21;&#x578B;&#x6210;&#x529F;&#x7684;&#x539F;&#x56E0;&#xFF0C;&#x6295;&#x5165;&#x5230;&#x81EA;&#x5DF1;&#x7684;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x4E4B;&#x4E2D;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>目标检测网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[DeepLab-V3+]]></title>
    <url>%2F2020%2F04%2F27%2FSemantic_segmentation%20DeepLab_V3%2B%2F</url>
    <content type="text"><![CDATA[DeepLab-V3+ &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;DeepLab-V3+:&#x4E8E;2018&#x5E74;&#x53D1;&#x8868;&#x5728;CVPR&#x4E0A;&#xFF0C;&#x5E94;&#x7528;&#x6539;&#x8FDB;&#x7684;Xception&#x4F5C;&#x4E3A;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#xFF0C;&#x5E76;&#x5C06;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x4E0E;ASPP(Atrous Spatial Pyramid Pooling&#xFF0C;&#x7A7A;&#x6D1E;&#x7A7A;&#x95F4;&#x5377;&#x79EF;&#x6C60;&#x5316;&#x91D1;&#x5B57;&#x5854;)&#x7ED3;&#x5408;&#xFF0C;&#x5927;&#x91CF;&#x7F29;&#x5C0F;&#x6A21;&#x578B;&#x53C2;&#x6570;&#xFF0C;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x73B0;&#x5728;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x6A21;&#x578B;&#x7684;&#x65B0;&#x9AD8;&#x5CF0;&#x3002; DeepLab-V3+&#x7279;&#x70B9;&#x2003;&#x2003;&#x6539;&#x8FDB;&#x4E86;Xception&#xFF0C;&#x5C06;Middle Flow&#x4ECE;8&#x5C42;&#x53D8;&#x4E3A;16&#x5C42;&#xFF0C;&#x52A0;&#x6DF1;&#x7F51;&#x7EDC;&#x5C42;&#x6570;&#xFF0C;&#x4E14;&#x5C06;&#x6C60;&#x5316;&#x5C42;&#x66FF;&#x6362;&#x4E3A;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x5C42;&#xFF0C;&#x5E76;&#x4E14;&#x5728;3x3&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x5C42;&#x540E;&#x6DFB;&#x52A0;BN&#x5C42;&#x548C;ReLU&#x5C42;&#x3002;&#x2003;&#x2003;&#x4F7F;&#x7528;ASPP&#x7ED3;&#x6784;&#xFF0C;&#x5176;&#x4E2D;&#x8BBE;&#x7F6E;&#x4E0D;&#x540C;&#x7684;dilation_rate&#x63D0;&#x53D6;&#x4E0D;&#x540C;&#x5C3A;&#x5EA6;&#x7684;&#x7279;&#x5F81;&#x3002;&#x2003;&#x2003;&#x4ECE;Xception&#x6D45;&#x5C42;&#x7F51;&#x7EDC;&#x4E2D;&#x63D0;&#x53D6;&#x51FA;&#x4E00;&#x4E2A;&#x5206;&#x652F;&#xFF0C;&#x4F5C;&#x4E3A;&#x6D45;&#x5C42;&#x7279;&#x5F81;&#xFF0C;&#x548C;ASPP&#x7ED3;&#x6784;&#x4EA7;&#x751F;&#x7684;&#x6DF1;&#x5C42;&#x7279;&#x5F81;&#x8FDB;&#x884C;&#x878D;&#x5408; &#x7A7A;&#x6D1E;&#x5377;&#x79EF;(atrous convolutions)&#x548C;&#x666E;&#x901A;&#x5377;&#x79EF;&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;&#x2003;&#x2003;&#x7A7A;&#x6D1E;&#x5377;&#x79EF;(atrous convolutions)&#x53C8;&#x79F0;&#x81A8;&#x80C0;&#x5377;&#x79EF;(dilated convolutions)&#xFF0C;&#x5728;&#x5377;&#x79EF;&#x5C42;&#x5F15;&#x5165;&#x4E86;&#x4E00;&#x4E2A;&#x81A8;&#x80C0;&#x7387;(dilation rate)&#x53C2;&#x6570;&#xFF0C;&#x5B9A;&#x4E49;&#x4E86;&#x5377;&#x79EF;&#x6838;&#x7684;&#x95F4;&#x9694;&#x6570;&#x91CF;&#xFF0C;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x5377;&#x79EF;&#x6838;dilation rate=1&#x2003;&#x2003;&#x4F18;&#x70B9;&#xFF1A;&#x6269;&#x5927;&#x611F;&#x53D7;&#x91CE;&#xFF0C;&#x76F8;&#x90BB;&#x7684;&#x50CF;&#x7D20;&#x70B9;&#x53EF;&#x80FD;&#x5B58;&#x5728;&#x5927;&#x91CF;&#x5197;&#x4F59;&#x4FE1;&#x606F;&#xFF0C;&#x6269;&#x5927;&#x611F;&#x53D7;&#x91CE;&#x53EF;&#x80FD;&#x4F1A;&#x83B7;&#x53D6;&#x591A;&#x5C3A;&#x5EA6;&#x4FE1;&#x606F;&#xFF0C;&#x8FD9;&#x5728;&#x89C6;&#x89C9;&#x4EFB;&#x52A1;&#x4E0A;&#x975E;&#x5E38;&#x91CD;&#x8981;&#xFF0C;&#x4E14;&#x4E0D;&#x9700;&#x8981;&#x5F15;&#x5165;&#x989D;&#x5916;&#x53C2;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x589E;&#x52A0;&#x5206;&#x8FA8;&#x7387;&#x6216;&#x8005;&#x91C7;&#x7528;&#x5927;&#x5C3A;&#x5BF8;&#x7684;&#x5377;&#x79EF;&#x6838;&#x5219;&#x4F1A;&#x5927;&#x5927;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x3002;&#x2003;&#x2003;&#x7F3A;&#x70B9;&#xFF1A;&#x7531;&#x4E8E;&#x7A7A;&#x6D1E;&#x5377;&#x79EF;&#x7684;&#x8BA1;&#x7B97;&#x65B9;&#x5F0F;&#x7C7B;&#x4F3C;&#x4E8E;&#x68CB;&#x76D8;&#x683C;&#x5F0F;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x80FD;&#x4EA7;&#x751F;&#x68CB;&#x76D8;&#x683C;&#x6548;&#x5E94;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x68CB;&#x76D8;&#x683C;&#x53EF;&#x89C6;&#x5316;&#x3002;&#x5982;&#x679C;&#x81A8;&#x80C0;&#x7387;&#x592A;&#x5927;&#x5377;&#x79EF;&#x7ED3;&#x679C;&#x4E4B;&#x95F4;&#x6CA1;&#x6709;&#x76F8;&#x5173;&#x6027;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x4E22;&#x5931;&#x5C40;&#x90E8;&#x4FE1;&#x606F;&#x3002; DeepLab-V3+&#x56FE;&#x50CF;&#x5206;&#x6790; TensorFlow2.0&#x5B9E;&#x73B0;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156import tensorflow as tfimport tensorflow.keras as kerasclass Convs(keras.Model): def __init__(self, filters, kernel_size=(3, 3), strides=(1, 1), name=&apos;Convs&apos;): super(Convs, self).__init__() self.blocks = keras.Sequential(name=name) self.blocks.add(keras.layers.Conv2D(filters, kernel_size=kernel_size, strides=strides, padding=&apos;same&apos;)) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU()) def call(self, inputs, training=None, mask=None): return self.blocks(inputs)class DepthwiseConv(keras.Model): def __init__(self, filters, kernel_size=(3, 3), strides=(1, 1), dilation_rate=1): super(DepthwiseConv, self).__init__() self.blocks = keras.Sequential() self.blocks.add(keras.layers.DepthwiseConv2D(kernel_size=kernel_size, strides=strides, padding=&apos;same&apos;, dilation_rate=dilation_rate)) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU()) self.blocks.add(keras.layers.Conv2D(filters, (1, 1), (1, 1), padding=&apos;same&apos;)) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU()) def call(self, inputs, training=None, mask=None): return self.blocks(inputs)class Block(keras.Model): def __init__(self, filters, strides=(1, 1), type=None, dilation_rate=1): super(Block, self).__init__() self.type = type self.block = keras.Sequential() for i in range(len(filters) - 1): self.block.add(DepthwiseConv(filters[i], dilation_rate=dilation_rate)) self.block.add(DepthwiseConv(filters[-1], strides=strides, dilation_rate=dilation_rate)) self.block1 = keras.Sequential() self.block1.add(keras.layers.Conv2D(filters[-1], (1, 1), strides=strides)) self.block1.add(keras.layers.BatchNormalization()) def call(self, inputs, training=None, mask=None): block = self.block(inputs) if self.type == &apos;conv&apos;: conv = self.block1(inputs) output = block + conv elif self.type == &apos;sum&apos;: output = block + inputs else: output = block return outputclass ASPP(keras.Model): def __init__(self, input_channel, filters, dilation_rate): super(ASPP, self).__init__() self.block1 = keras.Sequential() self.block1.add(keras.layers.GlobalAveragePooling2D()) self.block1.add(keras.layers.Reshape((1, 1, input_channel))) self.block1.add(Convs(filters, (1, 1))) self.block2 = keras.Sequential() self.block2.add(Convs(filters, (1, 1))) self.block3 = keras.Sequential() self.block3.add(DepthwiseConv(filters, dilation_rate=dilation_rate[0])) self.block4 = keras.Sequential() self.block4.add(DepthwiseConv(filters, dilation_rate=dilation_rate[1])) self.block5 = keras.Sequential() self.block5.add(DepthwiseConv(filters, dilation_rate=dilation_rate[2])) self.concatenate = keras.layers.Concatenate() def call(self, inputs, training=None, mask=None): block1 = self.block1(inputs) block1 = tf.image.resize(block1, (inputs.shape[1], inputs.shape[2])) block2 = self.block2(inputs) block3 = self.block3(inputs) block4 = self.block4(inputs) block5 = self.block5(inputs) output = self.concatenate([block1, block2, block3, block4, block5]) return outputclass DeepLab_V3_Plus(keras.Model): def __init__(self): super(DeepLab_V3_Plus, self).__init__() self.conv_block = keras.Sequential(name=&apos;Conv_Block&apos;) self.conv_block.add(Convs(32, strides=(2, 2))) self.conv_block.add(Convs(64)) self.entry_block1 = keras.Sequential(name=&apos;Entry_Block1&apos;) self.entry_block1.add(Block([128, 128, 128], strides=(2, 2), type=&apos;conv&apos;)) self.skip = keras.Sequential([DepthwiseConv(256)], name=&apos;Skip&apos;) self.entry_block2 = keras.Sequential(name=&apos;Entry_Block2&apos;) self.entry_block2.add(Block([256, 256], strides=(2, 2), type=&apos;conv&apos;)) self.entry_block3 = keras.Sequential(name=&apos;Entry_Block3&apos;) self.entry_block3.add(Block([728, 728, 728], strides=(2, 2), type=&apos;conv&apos;)) self.middle_block = keras.Sequential(name=&apos;Middle_Block&apos;) for i in range(16): self.middle_block.add(Block([728, 728, 728], type=&apos;sum&apos;)) self.exit_block1 = keras.Sequential(name=&apos;Exit_Block1&apos;) self.exit_block1.add(Block([728, 1024, 1024], type=&apos;conv&apos;)) self.exit_block2 = keras.Sequential(name=&apos;Exit_Block2&apos;) self.exit_block2.add(Block([1536, 1536, 2048], dilation_rate=2)) self.aspp = keras.Sequential(name=&apos;ASPP&apos;) self.aspp.add(ASPP(input_channel=2048, filters=256, dilation_rate=[6, 12, 18])) self.aspp.add(Convs(256, (1, 1))) self.aspp.add(keras.layers.Dropout(0.1)) self.skip_conv = keras.Sequential([Convs(48, (1, 1))], name=&apos;Skip_Conv&apos;) self.concatenate = keras.layers.Concatenate(name=&apos;Concatenate&apos;) self.dw_block = keras.Sequential(name=&apos;DepthwiseConv_Block&apos;) self.dw_block.add(DepthwiseConv(256)) self.dw_block.add(DepthwiseConv(256)) self.dw_block.add(keras.layers.Conv2D(21, (1, 1))) self.softmax = keras.layers.Softmax(name=&apos;Softmax&apos;) def call(self, inputs, training=None, mask=None): conv_block = self.conv_block(inputs) entry_block1 = self.entry_block1(conv_block) skip = self.skip(entry_block1) entry_block2 = self.entry_block2(skip) entry_block3 = self.entry_block3(entry_block2) middle_block = self.middle_block(entry_block3) exit_block1 = self.exit_block1(middle_block) exit_block2 = self.exit_block2(exit_block1) aspp = self.aspp(exit_block2) aspp = tf.image.resize(aspp, (128, 128)) skip_conv = self.skip_conv(skip) concatenate = self.concatenate([aspp, skip_conv]) dw_block = self.dw_block(concatenate) dw_block = tf.image.resize(dw_block, (512, 512)) output = self.softmax(dw_block) return outputif __name__ == &apos;__main__&apos;: model = DeepLab_V3_Plus() model.build(input_shape=(None, 512, 512, 3)) model.summary() Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E; project shape train_imgs(&#x8BAD;&#x7EC3;&#x96C6;&#x56FE;&#x50CF;&#x6587;&#x4EF6;&#x5939;) train_mask(&#x8BAD;&#x7EC3;&#x96C6;&#x63A9;&#x6A21;&#x6587;&#x4EF6;&#x5939;) test_imgs(&#x6D4B;&#x8BD5;&#x96C6;&#x56FE;&#x50CF;&#x6587;&#x4EF6;&#x5939;) DeepLab-V3+_weight(&#x6A21;&#x578B;&#x6743;&#x91CD;&#x6587;&#x4EF6;&#x5939;) DeepLab-V3+_test_result(&#x6D4B;&#x8BD5;&#x96C6;&#x7ED3;&#x679C;&#x6587;&#x4EF6;&#x5939;) DeepLab-V3+.py &#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E; &#x8BED;&#x4E49;&#x5206;&#x5272;&#x5B9E;&#x6218;&#x8FD0;&#x884C;&#x8F83;&#x4E3A;&#x7B80;&#x5355;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x7684;&#x8F93;&#x5165;&#x7684;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x4E3A;&#x56FE;&#x50CF;&#xFF0C;&#x8F93;&#x5165;&#x7684;&#x6807;&#x7B7E;&#x6570;&#x636E;&#x4E5F;&#x662F;&#x56FE;&#x50CF;&#xFF0C;&#x9996;&#x5148;&#x8981;&#x5BF9;&#x8F93;&#x5165;&#x7684;&#x6807;&#x7B7E;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x7F16;&#x7801;&#xFF0C;&#x8F6C;&#x6362;&#x4E3A;&#x7C7B;&#x522B;&#x4FE1;&#x606F;&#xFF0C;&#x8981;&#x548C;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x7EF4;&#x5EA6;&#x76F8;&#x5339;&#x914D;&#xFF0C;&#x4ECE;(batch_size, height, width, 1)&#x8F6C;&#x6362;&#x4E3A;(batch_size, height, width, num_class + 1)&#xFF0C;&#x67D0;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x4E3A;&#x54EA;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#xFF0C;&#x5219;&#x5728;&#x8BE5;&#x901A;&#x9053;&#x4E0A;&#x7F6E;1&#xFF0C;&#x5176;&#x4F59;&#x901A;&#x9053;&#x7F6E;0&#x3002;&#x5373;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x5165;&#x5927;&#x5C0F;&#x4E3A;(batch_size, height, width, 3)&#xFF0C;&#x8F93;&#x51FA;&#x5927;&#x5C0F;&#x4E3A;(batch_size, height, width, num_class + 1)&#x3002; &#x8BBE;&#x8BA1;&#x635F;&#x5931;&#x51FD;&#x6570;&#xFF0C;&#x7B80;&#x5355;&#x60C5;&#x51B5;&#x8BBE;&#x7F6E;&#x4EA4;&#x53C9;&#x71B5;&#x635F;&#x5931;&#x51FD;&#x6570;&#x5373;&#x53EF;&#x8FBE;&#x5230;&#x8F83;&#x597D;&#x6548;&#x679C;&#x3002; &#x642D;&#x5EFA;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;&#x8BBE;&#x7F6E;&#x5408;&#x9002;&#x53C2;&#x6570;&#xFF0C;&#x8FDB;&#x884C;&#x8BAD;&#x7EC3;&#x3002; &#x9884;&#x6D4B;&#x65F6;&#xFF0C;&#x9700;&#x8981;&#x6839;&#x636E;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x8FDB;&#x884C;&#x9006;&#x5411;&#x89E3;&#x7801;(&#x7F16;&#x7801;&#x7684;&#x53CD;&#x8FC7;&#x7A0B;)&#xFF0C;&#x5BFB;&#x627E;&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#xFF0C;&#x54EA;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x4E0A;&#x503C;&#x6700;&#x5927;&#x5219;&#x5F52;&#x4E3A;&#x54EA;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#xFF0C;&#x5373;&#x53EF;&#x5B8C;&#x6210;&#x5B9E;&#x6218;&#x7684;&#x8FC7;&#x7A0B;&#x3002; &#x5C0F;&#x6280;&#x5DE7; &#x8BBE;&#x7F6E;&#x7684;&#x56FE;&#x50CF;&#x7C7B;&#x522B;&#x6570;&#x4E3A;&#x5B9E;&#x9645;&#x7C7B;&#x522B;&#x6570;+1&#xFF0C;1&#x4EE3;&#x8868;&#x80CC;&#x666F;&#x7C7B;&#x522B;&#xFF0C;&#x6B64;&#x6570;&#x636E;&#x96C6;&#x4E3A;3&#x7C7B;&#xFF0C;&#x6700;&#x540E;&#x7684;&#x901A;&#x9053;&#x6570;&#x4E3A;4&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x9884;&#x6D4B;&#x4E00;&#x7C7B;&#x7269;&#x4F53;&#x3002;&#x5728;&#x901A;&#x9053;&#x65B9;&#x5411;&#x6C42;Softmax&#xFF0C;&#x5E76;&#x4E14;&#x6C42;&#x51FA;&#x6700;&#x5927;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;0&#x5219;&#x4EE3;&#x8868;&#x80CC;&#x666F;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;1&#x5219;&#x4EE3;&#x8868;&#x5706;&#x5F62;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;2&#x5219;&#x4EE3;&#x8868;&#x4E09;&#x89D2;&#x5F62;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;3&#x5219;&#x4EE3;&#x8868;&#x6B63;&#x65B9;&#x5F62;&#x3002; ASPP&#x6A21;&#x5757;&#x4E2D;&#x7684;&#x81A8;&#x80C0;&#x7387;&#xFF0C;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x8C03;&#x6574;&#xFF0C;&#x8BBA;&#x6587;&#x4E2D;&#x81A8;&#x80C0;&#x7387;&#x5206;&#x522B;&#x4E3A;6&#xFF0C; 12&#xFF0C; 18&#xFF0C;&#x5728;&#x8FD9;&#x4E2A;&#x7B80;&#x5355;&#x6570;&#x636E;&#x96C6;&#x4E2D;&#xFF0C;&#x8F93;&#x5165;&#x5C3A;&#x5BF8;&#x4E3A;16&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x9009;&#x62E9;&#x7684;&#x81A8;&#x80C0;&#x7387;&#x662F;2&#xFF0C;4&#xFF0C;8&#x3002; &#x8BBE;&#x7F6E;&#x4E86;&#x6743;&#x91CD;&#x7684;&#x4FDD;&#x5B58;&#x65B9;&#x5F0F;&#xFF0C;&#x5B66;&#x4E60;&#x7387;&#x7684;&#x4E0B;&#x964D;&#x65B9;&#x5F0F;&#x548C;&#x65E9;&#x505C;&#x65B9;&#x5F0F;&#x3002; &#x4F7F;&#x7528;yield&#x5173;&#x952E;&#x5B57;&#xFF0C;&#x4EA7;&#x751F;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#xFF0C;&#x4E0D;&#x7528;&#x5C06;&#x6240;&#x6709;&#x7684;&#x6570;&#x636E;&#x90FD;&#x4FDD;&#x5B58;&#x4E0B;&#x6765;&#xFF0C;&#x5927;&#x5927;&#x8282;&#x7EA6;&#x5185;&#x5B58;&#x3002; &#x5176;&#x4E2D;&#x5C06;1000&#x4E2A;&#x6570;&#x636E;&#xFF0C;&#x5206;&#x6210;800&#x4E2A;&#x8BAD;&#x7EC3;&#x96C6;&#xFF0C;100&#x4E2A;&#x9A8C;&#x8BC1;&#x96C6;&#x548C;100&#x4E2A;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x81EA;&#x884C;&#x4FEE;&#x6539;&#x3002; &#x6CE8;&#x610F;&#x5176;&#x4E2D;&#x7684;&#x4E00;&#x4E9B;&#x7EF4;&#x5EA6;&#x53D8;&#x6362;&#x548C;numpy&#xFF0C;tensorflow&#x5E38;&#x7528;&#x64CD;&#x4F5C;&#xFF0C;&#x5426;&#x5219;&#x5728;&#x9605;&#x8BFB;&#x4EE3;&#x7801;&#x65F6;&#x53EF;&#x80FD;&#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x56F0;&#x96BE;&#x3002; DeepLab-V3+&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x4E3A;&#x6539;&#x8FDB;&#x7684;Xception&#xFF0C;&#x8BBA;&#x6587;&#x4E2D;&#x4E5F;&#x6BD4;&#x8F83;&#x4E86;ResNet&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x7684;&#x6027;&#x80FD;&#x3002;&#x5B9E;&#x6218;&#x4E2D;&#x6211;&#x9009;&#x62E9;&#x7684;&#x662F;Middle Flow&#x4E3A;8&#x7684;Xception&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x90E8;&#x5206;&#x5185;&#x5BB9;&#xFF0C;&#x9009;&#x62E9;&#x5176;&#x4ED6;&#x7684;&#x7F51;&#x7EDC;&#x8FDB;&#x884C;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#xFF0C;&#x6BD4;&#x8F83;&#x4E0D;&#x540C;&#x7F51;&#x7EDC;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x8FD0;&#x884C;&#x901F;&#x5EA6;&#xFF0C;&#x6700;&#x7EC8;&#x7ED3;&#x679C;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x5F02;&#x3002; &#x5173;&#x4E8E;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#xFF0C;&#x8BBA;&#x6587;&#x4E2D;&#x7ED9;&#x51FA;&#x539F;&#x5C3A;&#x5BF8;&#x7F29;&#x5C0F;16&#x500D;&#x7684;&#x548C;&#x7F29;&#x5C0F;8&#x500D;&#x7684;&#xFF0C;&#x4E24;&#x8005;&#x7ED3;&#x6784;&#x5DEE;&#x5F02;&#x4EC5;&#x5728;&#x7F29;&#x5C0F;16&#x500D;&#x7684;Entry Flow&#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x6A21;&#x5757;strides=(2, 2)&#xFF0C;&#x6027;&#x80FD;&#x5DEE;&#x5F02;&#x4E0D;&#x5927;&#xFF0C;&#x4F46;&#x662F;&#x7F29;&#x5C0F;8&#x500D;&#x7684;&#x7F51;&#x7EDC;&#x53C2;&#x6570;&#x91CF;&#x5927;&#x5927;&#x589E;&#x52A0;&#x3002;&#x5728;&#x5B9E;&#x6218;&#x4E2D;&#xFF0C;&#x6570;&#x636E;&#x96C6;&#x7684;&#x5C3A;&#x5BF8;&#x8F83;&#x5C0F;&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x9009;&#x62E9;&#x4E86;&#x7F29;&#x5C0F;8&#x500D;&#x7684;&#x7F51;&#x7EDC;&#x53C2;&#x6570;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5728;&#x4F7F;&#x7528;&#x65F6;&#x53EF;&#x4EE5;&#x914C;&#x60C5;&#x4FEE;&#x6539;&#x3002; &#x56FE;&#x50CF;&#x8F93;&#x5165;&#x53EF;&#x4EE5;&#x5148;&#x5C06;&#x5176;&#x5F52;&#x4E00;&#x5316;&#x5230;0-1&#x4E4B;&#x95F4;&#x6216;&#x8005;-1-1&#x4E4B;&#x95F4;&#xFF0C;&#x56E0;&#x4E3A;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x4E00;&#x822C;&#x90FD;&#x6BD4;&#x8F83;&#x5C0F;&#xFF0C;&#x6240;&#x4EE5;&#x5F52;&#x4E00;&#x5316;&#x540E;&#x8BA1;&#x7B97;&#x65B9;&#x4FBF;&#xFF0C;&#x6536;&#x655B;&#x8F83;&#x5FEB;&#x3002; &#x5B9E;&#x9645;&#x7684;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x5E38;&#x5E38;&#x8FD8;&#x9700;&#x8981;&#x5BF9;&#x6570;&#x636E;&#x96C6;&#x8FDB;&#x884C;&#x5927;&#x5C0F;&#x8C03;&#x6574;&#x548C;&#x589E;&#x5F3A;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x4E3A;&#x4E86;&#x7B80;&#x5355;&#x8D77;&#x89C1;&#xFF0C;&#x6CA1;&#x6709;&#x8FDB;&#x884C;&#x590D;&#x6742;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5E94;&#x7528;&#x4E2D;&#x8981;&#x8BB0;&#x5F97;&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x7684;&#x9700;&#x8981;&#xFF0C;&#x5BF9;&#x56FE;&#x50CF;&#x8FDB;&#x884C;resize&#x6216;&#x8005;padding&#xFF0C;&#x7136;&#x540E;&#x65CB;&#x8F6C;&#xFF0C;&#x5BF9;&#x6BD4;&#x5EA6;&#x589E;&#x5F3A;&#xFF0C;&#x4EFF;&#x5C04;&#x8FD0;&#x7B97;&#x7B49;&#x7B49;&#x64CD;&#x4F5C;&#xFF0C;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x9C81;&#x68D2;&#x6027;&#xFF0C;&#x5E76;&#x4E14;&#x5B9E;&#x9645;&#x4E2D;&#x7684;&#x56FE;&#x50CF;&#x4E0D;&#x4E00;&#x5B9A;&#x6309;&#x7167;&#x987A;&#x5E8F;&#x547D;&#x540D;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x5E94;&#x7528;&#x4E2D;&#x4E5F;&#x8981;&#x6CE8;&#x610F;&#x56FE;&#x50CF;&#x8BFB;&#x53D6;&#x7684;&#x6587;&#x4EF6;&#x540D;&#x3002; &#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263import osimport numpy as npimport cv2 as cvimport tensorflow as tfimport tensorflow.keras as kerasclass Convs(keras.Model): def __init__(self, filters, kernel_size=(3, 3), strides=(1, 1), name=&apos;Convs&apos;): super(Convs, self).__init__() self.blocks = keras.Sequential(name=name) self.blocks.add(keras.layers.Conv2D(filters, kernel_size=kernel_size, strides=strides, padding=&apos;same&apos;)) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU()) def call(self, inputs, training=None, mask=None): return self.blocks(inputs)class DepthwiseConv(keras.Model): def __init__(self, filters, kernel_size=(3, 3), strides=(1, 1), dilation_rate=1): super(DepthwiseConv, self).__init__() self.blocks = keras.Sequential() self.blocks.add(keras.layers.DepthwiseConv2D(kernel_size=kernel_size, strides=strides, padding=&apos;same&apos;, dilation_rate=dilation_rate)) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU()) self.blocks.add(keras.layers.Conv2D(filters, (1, 1), (1, 1), padding=&apos;same&apos;)) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU()) def call(self, inputs, training=None, mask=None): return self.blocks(inputs)class Block(keras.Model): def __init__(self, filters, strides=(1, 1), type=None, dilation_rate=1): super(Block, self).__init__() self.type = type self.block = keras.Sequential() for i in range(len(filters) - 1): self.block.add(DepthwiseConv(filters[i], dilation_rate=dilation_rate)) self.block.add(DepthwiseConv(filters[-1], strides=strides, dilation_rate=dilation_rate)) self.block1 = keras.Sequential() self.block1.add(keras.layers.Conv2D(filters[-1], (1, 1), strides=strides)) self.block1.add(keras.layers.BatchNormalization()) def call(self, inputs, training=None, mask=None): block = self.block(inputs) if self.type == &apos;conv&apos;: conv = self.block1(inputs) output = block + conv elif self.type == &apos;sum&apos;: output = block + inputs else: output = block return outputclass ASPP(keras.Model): def __init__(self, input_channel, filters, dilation_rate): super(ASPP, self).__init__() self.block1 = keras.Sequential() self.block1.add(keras.layers.GlobalAveragePooling2D()) self.block1.add(keras.layers.Reshape((1, 1, input_channel))) self.block1.add(Convs(filters, (1, 1))) self.block2 = keras.Sequential() self.block2.add(Convs(filters, (1, 1))) self.block3 = keras.Sequential() self.block3.add(DepthwiseConv(filters, dilation_rate=dilation_rate[0])) self.block4 = keras.Sequential() self.block4.add(DepthwiseConv(filters, dilation_rate=dilation_rate[1])) self.block5 = keras.Sequential() self.block5.add(DepthwiseConv(filters, dilation_rate=dilation_rate[2])) self.concatenate = keras.layers.Concatenate() def call(self, inputs, training=None, mask=None): block1 = self.block1(inputs) block1 = tf.image.resize(block1, (inputs.shape[1], inputs.shape[2])) block2 = self.block2(inputs) block3 = self.block3(inputs) block4 = self.block4(inputs) block5 = self.block5(inputs) output = self.concatenate([block1, block2, block3, block4, block5]) return outputclass Small_DeepLab_V3_Plus(keras.Model): def __init__(self): super(Small_DeepLab_V3_Plus, self).__init__() self.conv_block = keras.Sequential(name=&apos;Conv_Block&apos;) self.conv_block.add(Convs(32, strides=(2, 2))) self.entry_block1 = keras.Sequential(name=&apos;Entry_Block1&apos;) self.entry_block1.add(Block([128, 128, 128], strides=(2, 2), type=&apos;conv&apos;)) self.skip = keras.Sequential([DepthwiseConv(256)], name=&apos;Skip&apos;) self.entry_block2 = keras.Sequential(name=&apos;Entry_Block2&apos;) self.entry_block2.add(Block([256, 728], strides=(2, 2), type=&apos;conv&apos;)) self.middle_block = keras.Sequential(name=&apos;Middle_Block&apos;) for i in range(8): self.middle_block.add(Block([728, 728, 728], type=&apos;sum&apos;)) self.exit_block1 = keras.Sequential(name=&apos;Exit_Block1&apos;) self.exit_block1.add(Block([728, 1024, 1024], type=&apos;conv&apos;)) self.exit_block2 = keras.Sequential(name=&apos;Exit_Block2&apos;) self.exit_block2.add(Block([1536, 1536, 2048], dilation_rate=2)) self.aspp = keras.Sequential(name=&apos;ASPP&apos;) self.aspp.add(ASPP(input_channel=2048, filters=256, dilation_rate=[2, 4, 8])) self.aspp.add(Convs(256, (1, 1))) self.aspp.add(keras.layers.Dropout(0.1)) self.skip_conv = keras.Sequential([Convs(24, (1, 1))], name=&apos;Skip_Conv&apos;) self.concatenate = keras.layers.Concatenate(name=&apos;Concatenate&apos;) self.dw_block = keras.Sequential(name=&apos;DepthwiseConv_Block&apos;) self.dw_block.add(DepthwiseConv(256)) self.dw_block.add(DepthwiseConv(256)) self.dw_block.add(keras.layers.Conv2D(num_class, (1, 1))) self.softmax = keras.layers.Softmax(name=&apos;Softmax&apos;) def call(self, inputs, training=None, mask=None): conv_block = self.conv_block(inputs) entry_block1 = self.entry_block1(conv_block) skip = self.skip(entry_block1) entry_block2 = self.entry_block2(skip) middle_block = self.middle_block(entry_block2) exit_block1 = self.exit_block1(middle_block) exit_block2 = self.exit_block2(exit_block1) aspp = self.aspp(exit_block2) aspp = tf.image.resize(aspp, (32, 32)) skip_conv = self.skip_conv(skip) concatenate = self.concatenate([aspp, skip_conv]) dw_block = self.dw_block(concatenate) dw_block = tf.image.resize(dw_block, (img_size[0], img_size[1])) output = self.softmax(dw_block) return outputdef generate_arrays_from_file(train_data, batch_size): # &#x83B7;&#x53D6;&#x603B;&#x957F;&#x5EA6; n = len(train_data) i = 0 while 1: X_train = [] Y_train = [] # &#x83B7;&#x53D6;&#x4E00;&#x4E2A;batch_size&#x5927;&#x5C0F;&#x7684;&#x6570;&#x636E; for _ in range(batch_size): if i == 0: np.random.shuffle(train_data) # &#x4ECE;&#x6587;&#x4EF6;&#x4E2D;&#x8BFB;&#x53D6;&#x56FE;&#x50CF; img = cv.imread(imgs_path + &apos;\\&apos; + str(train_data[i]) + &apos;.jpg&apos;) img = img / 127.5 - 1 X_train.append(img) # &#x4ECE;&#x6587;&#x4EF6;&#x4E2D;&#x8BFB;&#x53D6;&#x56FE;&#x50CF; img = cv.imread(mask_path + &apos;\\&apos; + str(train_data[i]) + &apos;.png&apos;) seg_labels = np.zeros((img_size[0], img_size[1], num_class)) for c in range(num_class): seg_labels[:, :, c] = (img[:, :, 0] == c).astype(int) Y_train.append(seg_labels) # &#x8BFB;&#x5B8C;&#x4E00;&#x4E2A;&#x5468;&#x671F;&#x540E;&#x91CD;&#x65B0;&#x5F00;&#x59CB; i = (i + 1) % n yield tf.constant(X_train), tf.constant(Y_train)if __name__ == &apos;__main__&apos;: # &#x5305;&#x62EC;&#x80CC;&#x666F; num_class = 4 train_data = list(range(800)) validation_data = list(range(800, 900)) test_data = range(900, 1000) epochs = 50 batch_size = 16 tf.random.set_seed(22) img_size = (128, 128) colors = [[0, 0, 0], [0, 0, 128], [0, 128, 0], [128, 0, 0]] mask_path = r&apos;.\shape\train_mask&apos; imgs_path = r&apos;.\shape\train_imgs&apos; test_path = r&apos;.\shape\test_imgs&apos; save_path = r&apos;.\DeepLab_V3_Plus_test_result&apos; weight_path = r&apos;.\DeepLab_V3_Plus_weight&apos; try: os.mkdir(save_path) except FileExistsError: print(save_path + &apos;has been exist&apos;) try: os.mkdir(weight_path) except FileExistsError: print(weight_path + &apos;has been exist&apos;) model = Small_DeepLab_V3_Plus() model.build(input_shape=(None, img_size[0], img_size[1], 3)) model.summary() optimizor = keras.optimizers.Adam(lr=1e-3) lossor = keras.losses.BinaryCrossentropy() model.compile(optimizer=optimizor, loss=lossor, metrics=[&apos;accuracy&apos;]) # &#x4FDD;&#x5B58;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;3&#x4E16;&#x4EE3;&#x4FDD;&#x5B58;&#x4E00;&#x6B21; checkpoint_period = keras.callbacks.ModelCheckpoint( weight_path + &apos;\\&apos; + &apos;ep{epoch:03d}-loss{loss:.3f}-val_loss{val_loss:.3f}.h5&apos;, monitor=&apos;val_loss&apos;, save_weights_only=True, save_best_only=True, period=3 ) # &#x5B66;&#x4E60;&#x7387;&#x4E0B;&#x964D;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;val_loss3&#x6B21;&#x4E0D;&#x4E0B;&#x964D;&#x5C31;&#x4E0B;&#x964D;&#x5B66;&#x4E60;&#x7387;&#x7EE7;&#x7EED;&#x8BAD;&#x7EC3; reduce_lr = keras.callbacks.ReduceLROnPlateau( monitor=&apos;val_loss&apos;, factor=0.5, patience=3, verbose=1 ) # &#x662F;&#x5426;&#x9700;&#x8981;&#x65E9;&#x505C;&#xFF0C;&#x5F53;val_loss&#x4E00;&#x76F4;&#x4E0D;&#x4E0B;&#x964D;&#x7684;&#x65F6;&#x5019;&#x610F;&#x5473;&#x7740;&#x6A21;&#x578B;&#x57FA;&#x672C;&#x8BAD;&#x7EC3;&#x5B8C;&#x6BD5;&#xFF0C;&#x53EF;&#x4EE5;&#x505C;&#x6B62; early_stopping = keras.callbacks.EarlyStopping( monitor=&apos;val_loss&apos;, min_delta=0, patience=10, verbose=1 ) model.fit_generator(generate_arrays_from_file(train_data, batch_size), steps_per_epoch=max(1, len(train_data) // batch_size), validation_data=generate_arrays_from_file(validation_data, batch_size), validation_steps=max(1, len(validation_data) // batch_size), epochs=epochs, callbacks=[checkpoint_period, reduce_lr, early_stopping]) for name in test_data: test_img_path = test_path + &apos;\\&apos; + str(name) + &apos;.jpg&apos; save_img_path = save_path + &apos;\\&apos; + str(name) + &apos;.png&apos; test_img = cv.imread(test_img_path) test_img = tf.constant([test_img / 127.5 - 1]) test_mask = model.predict(test_img) test_mask = np.reshape(test_mask, (img_size[0], img_size[1], num_class)) test_mask = np.argmax(test_mask, axis=-1) seg_img = np.zeros((img_size[0], img_size[1], 3)) for c in range(num_class): seg_img[:, :, 0] += ((test_mask == c) * (colors[c][0])) seg_img[:, :, 1] += ((test_mask == c) * (colors[c][1])) seg_img[:, :, 2] += ((test_mask == c) * (colors[c][2])) seg_img = seg_img.astype(np.uint8) cv.imwrite(save_img_path, seg_img) &#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C; DeepLab-V3+&#x5C0F;&#x7ED3;&#x2003;&#x2003;DeepLab-V3+&#x662F;&#x4E00;&#x79CD;&#x9AD8;&#x6548;&#x7684;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x7F51;&#x7EDC;&#xFF0C;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;DeepLab-V3+&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x53EA;&#x6709;41M&#xFF0C;&#x5C31;&#x76EE;&#x524D;&#x6765;&#x8BF4;&#xFF0C;DeepLab-V3+&#x662F;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x516C;&#x8BA4;&#x7684;&#x6700;&#x9AD8;&#x5CF0;&#xFF0C;&#x4E3B;&#x8981;&#x6765;&#x6E90;&#x4E8E;ASPP&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x548C;&#x6DF1;&#x6D45;&#x5C42;&#x7279;&#x5F81;&#x878D;&#x5408;&#xFF0C;&#x662F;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x9700;&#x8981;&#x638C;&#x63E1;&#x7684;&#x4E00;&#x4E2A;&#x6A21;&#x578B;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>语义分割网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PSPNet]]></title>
    <url>%2F2020%2F04%2F24%2FSemantic_segmentation%20PSPNet%2F</url>
    <content type="text"><![CDATA[PSPNet &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;PSPNet:&#x7531;&#x9999;&#x6E2F;&#x4E2D;&#x6587;&#x5927;&#x5B66;&#x548C;&#x5546;&#x6C64;&#x79D1;&#x6280;&#x63D0;&#x51FA;&#xFF0C;&#x83B7;&#x5F97;2016&#x5E74;ImageNet&#x573A;&#x666F;&#x89E3;&#x6790;&#x6311;&#x6218;&#x7684;&#x51A0;&#x519B;&#xFF0C;&#x4E8E;2017&#x53D1;&#x8868;&#x5728;CVPR&#xFF0C;&#x901A;&#x8FC7;&#x4F7F;&#x7528;&#x91D1;&#x5B57;&#x5854;&#x6C60;&#x5316;&#x6A21;&#x5757;&#x5B8C;&#x6210;&#x56FE;&#x50CF;&#x5206;&#x5272;&#xFF0C;&#x662F;&#x4E00;&#x79CD;&#x9AD8;&#x6548;&#x7684;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x6A21;&#x578B;&#x3002; PSPNet&#x7279;&#x70B9;&#x2003;&#x2003;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x9009;&#x62E9;&#x65BD;&#x52A0;&#x7A7A;&#x6D1E;&#x5377;&#x79EF;(atrous convolutions)&#x7684;ResNet&#xFF0C;&#x5E76;&#x4E14;&#x9009;&#x62E9;AL(auxiliary loss, &#x8F85;&#x52A9;&#x635F;&#x5931;)&#x5BF9;ResNet&#x8FDB;&#x884C;&#x8BAD;&#x7EC3;&#xFF0C;&#x901A;&#x5E38;&#x5728;&#x67D0;&#x4E00;&#x5C42;&#x540E;&#x63A5;&#x7740;&#x51E0;&#x4E2A;&#x8F6C;&#x6362;&#x5C42;&#x548C;&#x5168;&#x8FDE;&#x63A5;&#x5C42;&#xFF0C;&#x6700;&#x540E;&#x5206;&#x7C7B;&#x9884;&#x6D4B;&#xFF0C;&#x5E76;&#x4E14;&#x7ED9;&#x4E88;&#x635F;&#x5931;&#x5C0F;&#x4E8E;1&#x7684;&#x6743;&#x91CD;&#xFF0C;&#x5B8C;&#x6210;&#x8F85;&#x52A9;&#x635F;&#x5931;&#xFF0C;&#x76EE;&#x7684;&#x662F;&#x7F13;&#x89E3;&#x6DF1;&#x5EA6;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4E2D;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x7684;&#x95EE;&#x9898;&#x3002;&#x2003;&#x2003;&#x4F7F;&#x7528;&#x91D1;&#x5B57;&#x5854;&#x6C60;&#x5316;&#x6A21;&#x5757;&#x805A;&#x5408;&#x4FE1;&#x606F;&#xFF0C;&#x6839;&#x636E;&#x4E0D;&#x540C;&#x5185;&#x6838;&#x7684;&#x6C60;&#x5316;&#x5C42;&#xFF0C;&#x83B7;&#x53D6;&#x4E0D;&#x540C;&#x5C3A;&#x5EA6;&#x7684;&#x56FE;&#x50CF;&#x4FE1;&#x606F;&#xFF0C;&#x7136;&#x540E;&#x518D;Concatenate&#xFF0C;&#x5B8C;&#x6210;&#x4FE1;&#x606F;&#x7684;&#x878D;&#x5408;&#x3002; &#x7A7A;&#x6D1E;&#x5377;&#x79EF;(atrous convolutions)&#x548C;&#x666E;&#x901A;&#x5377;&#x79EF;&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;&#x2003;&#x2003;&#x7A7A;&#x6D1E;&#x5377;&#x79EF;(atrous convolutions)&#x53C8;&#x79F0;&#x81A8;&#x80C0;&#x5377;&#x79EF;(dilated convolutions)&#xFF0C;&#x5728;&#x5377;&#x79EF;&#x5C42;&#x5F15;&#x5165;&#x4E86;&#x4E00;&#x4E2A;&#x81A8;&#x80C0;&#x7387;(dilation rate)&#x53C2;&#x6570;&#xFF0C;&#x5B9A;&#x4E49;&#x4E86;&#x5377;&#x79EF;&#x6838;&#x7684;&#x95F4;&#x9694;&#x6570;&#x91CF;&#xFF0C;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x5377;&#x79EF;&#x6838;dilation rate=1&#x2003;&#x2003;&#x4F18;&#x70B9;&#xFF1A;&#x6269;&#x5927;&#x611F;&#x53D7;&#x91CE;&#xFF0C;&#x76F8;&#x90BB;&#x7684;&#x50CF;&#x7D20;&#x70B9;&#x53EF;&#x80FD;&#x5B58;&#x5728;&#x5927;&#x91CF;&#x5197;&#x4F59;&#x4FE1;&#x606F;&#xFF0C;&#x6269;&#x5927;&#x611F;&#x53D7;&#x91CE;&#x53EF;&#x80FD;&#x4F1A;&#x83B7;&#x53D6;&#x591A;&#x5C3A;&#x5EA6;&#x4FE1;&#x606F;&#xFF0C;&#x8FD9;&#x5728;&#x89C6;&#x89C9;&#x4EFB;&#x52A1;&#x4E0A;&#x975E;&#x5E38;&#x91CD;&#x8981;&#xFF0C;&#x4E14;&#x4E0D;&#x9700;&#x8981;&#x5F15;&#x5165;&#x989D;&#x5916;&#x53C2;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x589E;&#x52A0;&#x5206;&#x8FA8;&#x7387;&#x6216;&#x8005;&#x91C7;&#x7528;&#x5927;&#x5C3A;&#x5BF8;&#x7684;&#x5377;&#x79EF;&#x6838;&#x5219;&#x4F1A;&#x5927;&#x5927;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x3002;&#x2003;&#x2003;&#x7F3A;&#x70B9;&#xFF1A;&#x7531;&#x4E8E;&#x7A7A;&#x6D1E;&#x5377;&#x79EF;&#x7684;&#x8BA1;&#x7B97;&#x65B9;&#x5F0F;&#x7C7B;&#x4F3C;&#x4E8E;&#x68CB;&#x76D8;&#x683C;&#x5F0F;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x80FD;&#x4EA7;&#x751F;&#x68CB;&#x76D8;&#x683C;&#x6548;&#x5E94;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x68CB;&#x76D8;&#x683C;&#x53EF;&#x89C6;&#x5316;&#x3002;&#x5982;&#x679C;&#x81A8;&#x80C0;&#x7387;&#x592A;&#x5927;&#x5377;&#x79EF;&#x7ED3;&#x679C;&#x4E4B;&#x95F4;&#x6CA1;&#x6709;&#x76F8;&#x5173;&#x6027;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x4E22;&#x5931;&#x5C40;&#x90E8;&#x4FE1;&#x606F;&#x3002; PSPNet&#x56FE;&#x50CF;&#x5206;&#x6790; TensorFlow2.0&#x5B9E;&#x73B0;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132import tensorflow as tfimport tensorflow.keras as kerasclass Block(keras.Model): def __init__(self, filters, strides=(1, 1), dilation_rate=(1, 1), type=&apos;Conv_Block&apos;): super(Block, self).__init__() self.blocks = keras.Sequential() self.blocks.add(keras.layers.Conv2D(filters // 4, (1, 1))) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU()) self.blocks.add(keras.layers.Conv2D(filters // 4, (3, 3), strides, padding=&apos;same&apos;, dilation_rate=dilation_rate)) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU()) self.blocks.add(keras.layers.Conv2D(filters, (1, 1))) self.blocks.add(keras.layers.BatchNormalization()) self.conv = keras.layers.Conv2D(filters, (1, 1), strides) self.relu = keras.layers.ReLU() self.type = type def call(self, inputs, training=None, mask=None): blocks = self.blocks(inputs) if self.type == &apos;Conv_Block&apos;: inputs = self.conv(inputs) blocks = self.relu(blocks + inputs) return blocksdef add_block(filters, strides=(1, 1), dilation_rate=(1, 1), name=&apos;Block&apos;, times=1): block = keras.Sequential(name=name) block.add(Block(filters, strides)) for i in range(times - 1): block.add(Block(filters, dilation_rate=dilation_rate, type=&apos;identity_block&apos;)) return blockclass Convs(keras.Model): def __init__(self, filters, kernel_size, strides, padding): super(Convs, self).__init__() self.block = keras.Sequential() self.block.add(keras.layers.Conv2D(filters, kernel_size, strides, padding=padding)) self.block.add(keras.layers.BatchNormalization()) self.block.add(keras.layers.ReLU()) def call(self, inputs, training=None, mask=None): return self.block(inputs)class PSPBlock(keras.Model): def __init__(self, input_channel, input_size): super(PSPBlock, self).__init__() self.shape = input_size self.block1 = keras.Sequential() self.block1.add(keras.layers.MaxPool2D(input_size, input_size)) self.block1.add(Convs(input_channel // 4, (1, 1), (1, 1), padding=&apos;same&apos;)) self.block2 = keras.Sequential() self.block2.add(keras.layers.MaxPool2D((input_size[0] // 2, input_size[1] // 2), (input_size[0] // 2, input_size[1] // 2))) self.block2.add(Convs(input_channel // 4, (1, 1), (1, 1), padding=&apos;same&apos;)) self.block3 = keras.Sequential() self.block3.add(keras.layers.MaxPool2D((input_size[0] // 3, input_size[1] // 3), (input_size[0] // 3, input_size[1] // 3))) self.block3.add(Convs(input_channel // 4, (1, 1), (1, 1), padding=&apos;same&apos;)) self.block4 = keras.Sequential() self.block4.add(keras.layers.MaxPool2D((input_size[0] // 6, input_size[1] // 6), (input_size[0] // 6, input_size[1] // 6))) self.block4.add(Convs(input_channel // 4, (1, 1), (1, 1), padding=&apos;same&apos;)) self.concatenate = keras.layers.Concatenate() def call(self, inputs, training=None, mask=None): block1 = self.block1(inputs) block2 = self.block2(inputs) block3 = self.block3(inputs) block4 = self.block4(inputs) resize1 = tf.image.resize(block1, self.shape) resize2 = tf.image.resize(block2, self.shape) resize3 = tf.image.resize(block3, self.shape) resize4 = tf.image.resize(block4, self.shape) output = self.concatenate([resize1, resize2, resize3, resize4, inputs]) return outputclass PSPNet(keras.Model): def __init__(self): super(PSPNet, self).__init__() self.resnet_block0 = keras.Sequential(name=&apos;ResNet101_Block0&apos;) self.resnet_block0.add(Convs(64, (3, 3), (2, 2), &apos;same&apos;)) self.resnet_block0.add(Convs(64, (3, 3), (1, 1), &apos;same&apos;)) self.resnet_block0.add(Convs(128, (3, 3), (1, 1), &apos;same&apos;)) self.resnet_block0.add(keras.layers.MaxPool2D((3, 3), (2, 2), &apos;same&apos;)) self.resnet_block1 = add_block(256, (1, 1), name=&apos;ResNet101_Block1&apos;, times=3) self.resnet_block2 = add_block(512, (2, 2), name=&apos;ResNet101_Block2&apos;, times=4) self.resnet_block3 = add_block(1024, (1, 1), dilation_rate=(2, 2), name=&apos;ResNet101_Block3&apos;, times=23) self.resnet_block4 = add_block(2048, (1, 1), dilation_rate=(4, 4), name=&apos;ResNet101_Block4&apos;, times=3) self.psp = keras.Sequential([PSPBlock(2048, (60, 60))], name=&apos;PSPBlock&apos;) self.conv = keras.Sequential(name=&apos;Conv&apos;) self.conv.add(Convs(512, (1, 1), (1, 1), &apos;same&apos;)) self.conv.add(keras.layers.Dropout(0.1)) self.conv.add(keras.layers.Conv2D(21, (1, 1), (1, 1), &apos;same&apos;)) self.softmax = keras.layers.Softmax(name=&apos;SoftMax&apos;) def call(self, inputs, training=None, mask=None): resnet_block0 = self.resnet_block0(inputs) resnet_block1 = self.resnet_block1(resnet_block0) resnet_block2 = self.resnet_block2(resnet_block1) resnet_block3 = self.resnet_block3(resnet_block2) resnet_block4 = self.resnet_block4(resnet_block3) psp = self.psp(resnet_block4) conv = self.conv(psp) resize = tf.image.resize(conv, (473, 473)) output = self.softmax(resize) return outputif __name__ == &apos;__main__&apos;: model = PSPNet() model.build(input_shape=(None, 473, 473, 3)) model.summary() Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E; project shape train_imgs(&#x8BAD;&#x7EC3;&#x96C6;&#x56FE;&#x50CF;&#x6587;&#x4EF6;&#x5939;) train_mask(&#x8BAD;&#x7EC3;&#x96C6;&#x63A9;&#x6A21;&#x6587;&#x4EF6;&#x5939;) test_imgs(&#x6D4B;&#x8BD5;&#x96C6;&#x56FE;&#x50CF;&#x6587;&#x4EF6;&#x5939;) PSPNet_weight(&#x6A21;&#x578B;&#x6743;&#x91CD;&#x6587;&#x4EF6;&#x5939;) PSPNet_test_result(&#x6D4B;&#x8BD5;&#x96C6;&#x7ED3;&#x679C;&#x6587;&#x4EF6;&#x5939;) PSPNet.py &#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E; &#x8BED;&#x4E49;&#x5206;&#x5272;&#x5B9E;&#x6218;&#x8FD0;&#x884C;&#x8F83;&#x4E3A;&#x7B80;&#x5355;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x7684;&#x8F93;&#x5165;&#x7684;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x4E3A;&#x56FE;&#x50CF;&#xFF0C;&#x8F93;&#x5165;&#x7684;&#x6807;&#x7B7E;&#x6570;&#x636E;&#x4E5F;&#x662F;&#x56FE;&#x50CF;&#xFF0C;&#x9996;&#x5148;&#x8981;&#x5BF9;&#x8F93;&#x5165;&#x7684;&#x6807;&#x7B7E;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x7F16;&#x7801;&#xFF0C;&#x8F6C;&#x6362;&#x4E3A;&#x7C7B;&#x522B;&#x4FE1;&#x606F;&#xFF0C;&#x8981;&#x548C;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x7EF4;&#x5EA6;&#x76F8;&#x5339;&#x914D;&#xFF0C;&#x4ECE;(batch_size, height, width, 1)&#x8F6C;&#x6362;&#x4E3A;(batch_size, height, width, num_class + 1)&#xFF0C;&#x67D0;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x4E3A;&#x54EA;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#xFF0C;&#x5219;&#x5728;&#x8BE5;&#x901A;&#x9053;&#x4E0A;&#x7F6E;1&#xFF0C;&#x5176;&#x4F59;&#x901A;&#x9053;&#x7F6E;0&#x3002;&#x5373;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x5165;&#x5927;&#x5C0F;&#x4E3A;(batch_size, height, width, 3)&#xFF0C;&#x8F93;&#x51FA;&#x5927;&#x5C0F;&#x4E3A;(batch_size, height, width, num_class + 1)&#x3002; &#x8BBE;&#x8BA1;&#x635F;&#x5931;&#x51FD;&#x6570;&#xFF0C;&#x7B80;&#x5355;&#x60C5;&#x51B5;&#x8BBE;&#x7F6E;&#x4EA4;&#x53C9;&#x71B5;&#x635F;&#x5931;&#x51FD;&#x6570;&#x5373;&#x53EF;&#x8FBE;&#x5230;&#x8F83;&#x597D;&#x6548;&#x679C;&#x3002; &#x642D;&#x5EFA;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;&#x8BBE;&#x7F6E;&#x5408;&#x9002;&#x53C2;&#x6570;&#xFF0C;&#x8FDB;&#x884C;&#x8BAD;&#x7EC3;&#x3002; &#x9884;&#x6D4B;&#x65F6;&#xFF0C;&#x9700;&#x8981;&#x6839;&#x636E;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x8FDB;&#x884C;&#x9006;&#x5411;&#x89E3;&#x7801;(&#x7F16;&#x7801;&#x7684;&#x53CD;&#x8FC7;&#x7A0B;)&#xFF0C;&#x5BFB;&#x627E;&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#xFF0C;&#x54EA;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x4E0A;&#x503C;&#x6700;&#x5927;&#x5219;&#x5F52;&#x4E3A;&#x54EA;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#xFF0C;&#x5373;&#x53EF;&#x5B8C;&#x6210;&#x5B9E;&#x6218;&#x7684;&#x8FC7;&#x7A0B;&#x3002; &#x5C0F;&#x6280;&#x5DE7; &#x8BBE;&#x7F6E;&#x7684;&#x56FE;&#x50CF;&#x7C7B;&#x522B;&#x6570;&#x4E3A;&#x5B9E;&#x9645;&#x7C7B;&#x522B;&#x6570;+1&#xFF0C;1&#x4EE3;&#x8868;&#x80CC;&#x666F;&#x7C7B;&#x522B;&#xFF0C;&#x6B64;&#x6570;&#x636E;&#x96C6;&#x4E3A;3&#x7C7B;&#xFF0C;&#x6700;&#x540E;&#x7684;&#x901A;&#x9053;&#x6570;&#x4E3A;4&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x9884;&#x6D4B;&#x4E00;&#x7C7B;&#x7269;&#x4F53;&#x3002;&#x5728;&#x901A;&#x9053;&#x65B9;&#x5411;&#x6C42;Softmax&#xFF0C;&#x5E76;&#x4E14;&#x6C42;&#x51FA;&#x6700;&#x5927;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;0&#x5219;&#x4EE3;&#x8868;&#x80CC;&#x666F;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;1&#x5219;&#x4EE3;&#x8868;&#x5706;&#x5F62;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;2&#x5219;&#x4EE3;&#x8868;&#x4E09;&#x89D2;&#x5F62;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;3&#x5219;&#x4EE3;&#x8868;&#x6B63;&#x65B9;&#x5F62;&#x3002; &#x5728;PSPNet&#x4E2D;&#x53EA;&#x4F7F;&#x7528;ResNet101&#x7684;&#x6700;&#x540E;&#x4E00;&#x5C42;&#xFF0C;&#x53EF;&#x4EE5;&#x501F;&#x9274;UNet&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x591A;&#x5C42;&#x8F93;&#x51FA;&#xFF0C;&#x5B9E;&#x73B0;&#x591A;&#x5C3A;&#x5EA6;&#x7279;&#x5F81;&#x878D;&#x5408;&#x3002; &#x8BBE;&#x7F6E;&#x4E86;&#x6743;&#x91CD;&#x7684;&#x4FDD;&#x5B58;&#x65B9;&#x5F0F;&#xFF0C;&#x5B66;&#x4E60;&#x7387;&#x7684;&#x4E0B;&#x964D;&#x65B9;&#x5F0F;&#x548C;&#x65E9;&#x505C;&#x65B9;&#x5F0F;&#x3002; &#x4F7F;&#x7528;yield&#x5173;&#x952E;&#x5B57;&#xFF0C;&#x4EA7;&#x751F;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#xFF0C;&#x4E0D;&#x7528;&#x5C06;&#x6240;&#x6709;&#x7684;&#x6570;&#x636E;&#x90FD;&#x4FDD;&#x5B58;&#x4E0B;&#x6765;&#xFF0C;&#x5927;&#x5927;&#x8282;&#x7EA6;&#x5185;&#x5B58;&#x3002; &#x5176;&#x4E2D;&#x5C06;1000&#x4E2A;&#x6570;&#x636E;&#xFF0C;&#x5206;&#x6210;800&#x4E2A;&#x8BAD;&#x7EC3;&#x96C6;&#xFF0C;100&#x4E2A;&#x9A8C;&#x8BC1;&#x96C6;&#x548C;100&#x4E2A;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x81EA;&#x884C;&#x4FEE;&#x6539;&#x3002; &#x6CE8;&#x610F;&#x5176;&#x4E2D;&#x7684;&#x4E00;&#x4E9B;&#x7EF4;&#x5EA6;&#x53D8;&#x6362;&#x548C;numpy&#xFF0C;tensorflow&#x5E38;&#x7528;&#x64CD;&#x4F5C;&#xFF0C;&#x5426;&#x5219;&#x5728;&#x9605;&#x8BFB;&#x4EE3;&#x7801;&#x65F6;&#x53EF;&#x80FD;&#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x56F0;&#x96BE;&#x3002; &#x91D1;&#x5B57;&#x5854;&#x6C60;&#x5316;&#x6A21;&#x5757;&#x4E2D;&#x7684;&#x6C60;&#x5316;&#x6838;&#xFF0C;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x8C03;&#x6574;&#xFF0C;&#x8BBA;&#x6587;&#x4E2D;&#x91D1;&#x5B57;&#x5854;&#x6C60;&#x5316;&#x6A21;&#x5757;&#x7684;&#x8F93;&#x5165;&#x5C3A;&#x5BF8;&#x4E3A;60x60&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;60x60&#xFF0C;30x30&#xFF0C;20x20&#xFF0C;10x10&#x7684;&#x6C60;&#x5316;&#x6838;&#xFF0C;&#x5728;&#x8FD9;&#x4E2A;&#x7B80;&#x5355;&#x6570;&#x636E;&#x96C6;&#x4E2D;&#xFF0C;&#x8F93;&#x5165;&#x5C3A;&#x5BF8;&#x4E3A;8&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x9009;&#x62E9;&#x7684;&#x662F;8x8&#xFF0C;4x4&#xFF0C;2x2&#xFF0C;1x1&#x7684;&#x6C60;&#x5316;&#x6838;&#x3002; PSPNet&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x4E3A;ResNet101&#xFF0C;&#x5B9E;&#x6218;&#x4E2D;&#x6211;&#x9009;&#x62E9;&#x7684;&#x662F;ResNet50&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x90E8;&#x5206;&#x5185;&#x5BB9;&#xFF0C;&#x9009;&#x62E9;&#x5176;&#x4ED6;&#x7684;&#x7F51;&#x7EDC;&#x8FDB;&#x884C;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#xFF0C;&#x6BD4;&#x8F83;&#x4E0D;&#x540C;&#x7F51;&#x7EDC;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x8FD0;&#x884C;&#x901F;&#x5EA6;&#xFF0C;&#x6700;&#x7EC8;&#x7ED3;&#x679C;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x5F02;&#x3002; &#x5728;&#x8BBA;&#x6587;&#x4E2D;&#x63D0;&#x5230;&#x7684;AL(&#x8F85;&#x52A9;&#x635F;&#x5931;)&#x662F;&#x5728;&#x6784;&#x5EFA;ResNet101&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x65F6;&#x4F7F;&#x7528;&#x7684;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x4E3A;&#x4E86;&#x7B80;&#x5355;&#x8D77;&#x89C1;&#xFF0C;&#x76F4;&#x63A5;&#x4F7F;&#x7528;ResNet50&#x3002; &#x56FE;&#x50CF;&#x8F93;&#x5165;&#x53EF;&#x4EE5;&#x5148;&#x5C06;&#x5176;&#x5F52;&#x4E00;&#x5316;&#x5230;0-1&#x4E4B;&#x95F4;&#x6216;&#x8005;-1-1&#x4E4B;&#x95F4;&#xFF0C;&#x56E0;&#x4E3A;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x4E00;&#x822C;&#x90FD;&#x6BD4;&#x8F83;&#x5C0F;&#xFF0C;&#x6240;&#x4EE5;&#x5F52;&#x4E00;&#x5316;&#x540E;&#x8BA1;&#x7B97;&#x65B9;&#x4FBF;&#xFF0C;&#x6536;&#x655B;&#x8F83;&#x5FEB;&#x3002; &#x5B9E;&#x9645;&#x7684;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x5E38;&#x5E38;&#x8FD8;&#x9700;&#x8981;&#x5BF9;&#x6570;&#x636E;&#x96C6;&#x8FDB;&#x884C;&#x5927;&#x5C0F;&#x8C03;&#x6574;&#x548C;&#x589E;&#x5F3A;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x4E3A;&#x4E86;&#x7B80;&#x5355;&#x8D77;&#x89C1;&#xFF0C;&#x6CA1;&#x6709;&#x8FDB;&#x884C;&#x590D;&#x6742;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5E94;&#x7528;&#x4E2D;&#x8981;&#x8BB0;&#x5F97;&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x7684;&#x9700;&#x8981;&#xFF0C;&#x5BF9;&#x56FE;&#x50CF;&#x8FDB;&#x884C;resize&#x6216;&#x8005;padding&#xFF0C;&#x7136;&#x540E;&#x65CB;&#x8F6C;&#xFF0C;&#x5BF9;&#x6BD4;&#x5EA6;&#x589E;&#x5F3A;&#xFF0C;&#x4EFF;&#x5C04;&#x8FD0;&#x7B97;&#x7B49;&#x7B49;&#x64CD;&#x4F5C;&#xFF0C;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x9C81;&#x68D2;&#x6027;&#xFF0C;&#x5E76;&#x4E14;&#x5B9E;&#x9645;&#x4E2D;&#x7684;&#x56FE;&#x50CF;&#x4E0D;&#x4E00;&#x5B9A;&#x6309;&#x7167;&#x987A;&#x5E8F;&#x547D;&#x540D;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x5E94;&#x7528;&#x4E2D;&#x4E5F;&#x8981;&#x6CE8;&#x610F;&#x56FE;&#x50CF;&#x8BFB;&#x53D6;&#x7684;&#x6587;&#x4EF6;&#x540D;&#x3002; &#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252import osimport numpy as npimport cv2 as cvimport tensorflow as tfimport tensorflow.keras as kerasclass Block(keras.Model): def __init__(self, filters, strides=(1, 1), dilation_rate=(1, 1), type=&apos;Conv_Block&apos;): super(Block, self).__init__() self.blocks = keras.Sequential() self.blocks.add(keras.layers.Conv2D(filters // 4, (1, 1))) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU()) self.blocks.add(keras.layers.Conv2D(filters // 4, (3, 3), strides, padding=&apos;same&apos;, dilation_rate=dilation_rate)) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU()) self.blocks.add(keras.layers.Conv2D(filters, (1, 1))) self.blocks.add(keras.layers.BatchNormalization()) self.conv = keras.layers.Conv2D(filters, (1, 1), strides) self.relu = keras.layers.ReLU() self.type = type def call(self, inputs, training=None, mask=None): blocks = self.blocks(inputs) if self.type == &apos;Conv_Block&apos;: inputs = self.conv(inputs) blocks = self.relu(blocks + inputs) return blocksdef add_block(filters, strides=(1, 1), dilation_rate=(1, 1), name=&apos;Block&apos;, times=1): block = keras.Sequential(name=name) block.add(Block(filters, strides)) for i in range(times - 1): block.add(Block(filters, dilation_rate=dilation_rate, type=&apos;identity_block&apos;)) return blockclass Convs(keras.Model): def __init__(self, filters, kernel_size, strides, padding): super(Convs, self).__init__() self.block = keras.Sequential() self.block.add(keras.layers.Conv2D(filters, kernel_size, strides, padding=padding)) self.block.add(keras.layers.BatchNormalization()) self.block.add(keras.layers.ReLU()) def call(self, inputs, training=None, mask=None): return self.block(inputs)class PSPBlock(keras.Model): def __init__(self, input_channel, input_size): super(PSPBlock, self).__init__() self.shape = input_size self.block1 = keras.Sequential() self.block1.add(keras.layers.MaxPool2D(input_size, input_size)) self.block1.add(Convs(input_channel // 4, (1, 1), (1, 1), padding=&apos;same&apos;)) self.block2 = keras.Sequential() self.block2.add(keras.layers.MaxPool2D((input_size[0] // 2, input_size[1] // 2), (input_size[0] // 2, input_size[1] // 2))) self.block2.add(Convs(input_channel // 4, (1, 1), (1, 1), padding=&apos;same&apos;)) self.block3 = keras.Sequential() self.block3.add(keras.layers.MaxPool2D((input_size[0] // 4, input_size[1] // 4), (input_size[0] // 4, input_size[1] // 4))) self.block3.add(Convs(input_channel // 4, (1, 1), (1, 1), padding=&apos;same&apos;)) self.block4 = keras.Sequential() self.block4.add(keras.layers.MaxPool2D((input_size[0] // 8, input_size[1] // 8), (input_size[0] // 8, input_size[1] // 8))) self.block4.add(Convs(input_channel // 4, (1, 1), (1, 1), padding=&apos;same&apos;)) self.concatenate = keras.layers.Concatenate() def call(self, inputs, training=None, mask=None): block1 = self.block1(inputs) block2 = self.block2(inputs) block3 = self.block3(inputs) block4 = self.block4(inputs) resize1 = tf.image.resize(block1, self.shape) resize2 = tf.image.resize(block2, self.shape) resize3 = tf.image.resize(block3, self.shape) resize4 = tf.image.resize(block4, self.shape) output = self.concatenate([resize1, resize2, resize3, resize4, inputs]) return outputclass Small_PSPNet(keras.Model): def __init__(self): super(Small_PSPNet, self).__init__() self.resnet_block0 = keras.Sequential(name=&apos;ResNet101_Block0&apos;) self.resnet_block0.add(Convs(32, (3, 3), (2, 2), &apos;same&apos;)) self.resnet_block0.add(Convs(32, (3, 3), (1, 1), &apos;same&apos;)) self.resnet_block0.add(Convs(64, (3, 3), (1, 1), &apos;same&apos;)) self.resnet_block0.add(keras.layers.MaxPool2D((3, 3), (2, 2), &apos;same&apos;)) self.resnet_block1 = add_block(128, (1, 1), name=&apos;ResNet101_Block1&apos;, times=3) self.resnet_block2 = add_block(256, (2, 2), name=&apos;ResNet101_Block2&apos;, times=3) self.resnet_block3 = add_block(512, (2, 2), name=&apos;ResNet101_Block3&apos;, times=3) self.resnet_block4 = add_block(1024, (1, 1), dilation_rate=(2, 2), name=&apos;ResNet101_Block4&apos;, times=3) self.psp3 = keras.Sequential([PSPBlock(1024, (8, 8))], name=&apos;PSPBlock_3&apos;) self.upsample3 = keras.layers.UpSampling2D(name=&apos;UpSample_3&apos;) self.concatenate3 = keras.layers.Concatenate(name=&apos;Concatenate_3&apos;) self.conv3 = keras.Sequential([Convs(512, (1, 1), (1, 1), &apos;same&apos;)], name=&apos;Convs_3&apos;) self.psp2 = keras.Sequential([PSPBlock(512, (16, 16))], name=&apos;PSPBlock_2&apos;) self.conv = keras.Sequential(name=&apos;Conv&apos;) self.conv.add(Convs(128, (1, 1), (1, 1), &apos;same&apos;)) self.conv.add(keras.layers.Dropout(0.1)) self.conv.add(keras.layers.Conv2D(num_class, (1, 1), (1, 1), &apos;same&apos;)) self.softmax = keras.layers.Softmax(name=&apos;SoftMax&apos;) def call(self, inputs, training=None, mask=None): resnet_block0 = self.resnet_block0(inputs) resnet_block1 = self.resnet_block1(resnet_block0) resnet_block2 = self.resnet_block2(resnet_block1) resnet_block3 = self.resnet_block3(resnet_block2) resnet_block4 = self.resnet_block4(resnet_block3) psp3 = self.psp3(resnet_block4) upsample3 = self.upsample3(psp3) concatenate3 = self.concatenate3([resnet_block2, upsample3]) conv3 = self.conv3(concatenate3) psp2 = self.psp2(conv3) conv = self.conv(psp2) resize = tf.image.resize(conv, (img_size[0], img_size[1])) output = self.softmax(resize) return outputdef generate_arrays_from_file(train_data, batch_size): # &#x83B7;&#x53D6;&#x603B;&#x957F;&#x5EA6; n = len(train_data) i = 0 while 1: X_train = [] Y_train = [] # &#x83B7;&#x53D6;&#x4E00;&#x4E2A;batch_size&#x5927;&#x5C0F;&#x7684;&#x6570;&#x636E; for _ in range(batch_size): if i == 0: np.random.shuffle(train_data) # &#x4ECE;&#x6587;&#x4EF6;&#x4E2D;&#x8BFB;&#x53D6;&#x56FE;&#x50CF; img = cv.imread(imgs_path + &apos;\\&apos; + str(train_data[i]) + &apos;.jpg&apos;) img = img / 127.5 - 1 X_train.append(img) # &#x4ECE;&#x6587;&#x4EF6;&#x4E2D;&#x8BFB;&#x53D6;&#x56FE;&#x50CF; img = cv.imread(mask_path + &apos;\\&apos; + str(train_data[i]) + &apos;.png&apos;) seg_labels = np.zeros((img_size[0], img_size[1], num_class)) for c in range(num_class): seg_labels[:, :, c] = (img[:, :, 0] == c).astype(int) Y_train.append(seg_labels) # &#x8BFB;&#x5B8C;&#x4E00;&#x4E2A;&#x5468;&#x671F;&#x540E;&#x91CD;&#x65B0;&#x5F00;&#x59CB; i = (i + 1) % n yield tf.constant(X_train), tf.constant(Y_train)if __name__ == &apos;__main__&apos;: # &#x5305;&#x62EC;&#x80CC;&#x666F; num_class = 4 train_data = list(range(800)) validation_data = list(range(800, 900)) test_data = range(900, 1000) epochs = 50 batch_size = 16 tf.random.set_seed(22) img_size = (128, 128) colors = [[0, 0, 0], [0, 0, 128], [0, 128, 0], [128, 0, 0]] mask_path = r&apos;.\shape\train_mask&apos; imgs_path = r&apos;.\shape\train_imgs&apos; test_path = r&apos;.\shape\test_imgs&apos; save_path = r&apos;.\PSPNet_test_result&apos; weight_path = r&apos;.\PSPNet_weight&apos; try: os.mkdir(save_path) except FileExistsError: print(save_path + &apos;has been exist&apos;) try: os.mkdir(weight_path) except FileExistsError: print(weight_path + &apos;has been exist&apos;) model = Small_PSPNet() model.build(input_shape=(None, img_size[0], img_size[1], 3)) model.summary() optimizor = keras.optimizers.Adam(lr=1e-3) lossor = keras.losses.BinaryCrossentropy() model.compile(optimizer=optimizor, loss=lossor, metrics=[&apos;accuracy&apos;]) # &#x4FDD;&#x5B58;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;3&#x4E16;&#x4EE3;&#x4FDD;&#x5B58;&#x4E00;&#x6B21; checkpoint_period = keras.callbacks.ModelCheckpoint( weight_path + &apos;\\&apos; + &apos;ep{epoch:03d}-loss{loss:.3f}-val_loss{val_loss:.3f}.h5&apos;, monitor=&apos;val_loss&apos;, save_weights_only=True, save_best_only=True, period=3 ) # &#x5B66;&#x4E60;&#x7387;&#x4E0B;&#x964D;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;val_loss3&#x6B21;&#x4E0D;&#x4E0B;&#x964D;&#x5C31;&#x4E0B;&#x964D;&#x5B66;&#x4E60;&#x7387;&#x7EE7;&#x7EED;&#x8BAD;&#x7EC3; reduce_lr = keras.callbacks.ReduceLROnPlateau( monitor=&apos;val_loss&apos;, factor=0.5, patience=3, verbose=1 ) # &#x662F;&#x5426;&#x9700;&#x8981;&#x65E9;&#x505C;&#xFF0C;&#x5F53;val_loss&#x4E00;&#x76F4;&#x4E0D;&#x4E0B;&#x964D;&#x7684;&#x65F6;&#x5019;&#x610F;&#x5473;&#x7740;&#x6A21;&#x578B;&#x57FA;&#x672C;&#x8BAD;&#x7EC3;&#x5B8C;&#x6BD5;&#xFF0C;&#x53EF;&#x4EE5;&#x505C;&#x6B62; early_stopping = keras.callbacks.EarlyStopping( monitor=&apos;val_loss&apos;, min_delta=0, patience=10, verbose=1 ) model.fit_generator(generate_arrays_from_file(train_data, batch_size), steps_per_epoch=max(1, len(train_data) // batch_size), validation_data=generate_arrays_from_file(validation_data, batch_size), validation_steps=max(1, len(validation_data) // batch_size), epochs=epochs, callbacks=[checkpoint_period, reduce_lr, early_stopping]) for name in test_data: test_img_path = test_path + &apos;\\&apos; + str(name) + &apos;.jpg&apos; save_img_path = save_path + &apos;\\&apos; + str(name) + &apos;.png&apos; test_img = cv.imread(test_img_path) test_img = tf.constant([test_img / 127.5 - 1]) test_mask = model.predict(test_img) test_mask = np.reshape(test_mask, (img_size[0], img_size[1], num_class)) test_mask = np.argmax(test_mask, axis=-1) seg_img = np.zeros((img_size[0], img_size[1], 3)) for c in range(num_class): seg_img[:, :, 0] += ((test_mask == c) * (colors[c][0])) seg_img[:, :, 1] += ((test_mask == c) * (colors[c][1])) seg_img[:, :, 2] += ((test_mask == c) * (colors[c][2])) seg_img = seg_img.astype(np.uint8) cv.imwrite(save_img_path, seg_img) &#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C; PSPNet&#x5C0F;&#x7ED3;&#x2003;&#x2003;PSPNet&#x662F;&#x4E00;&#x79CD;&#x9AD8;&#x6548;&#x7684;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x7F51;&#x7EDC;&#xFF0C;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;PSPNet&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x6709;49M&#xFF0C;PSPNet&#x4E0D;&#x540C;&#x4E8E;SegNet&#x548C;UNet&#xFF0C;&#x6CA1;&#x6709;&#x5F88;&#x5BF9;&#x79F0;&#x7684;&#x7F16;&#x7801;&#x89E3;&#x7801;&#x7ED3;&#x6784;&#xFF0C;&#x5728;&#x7F16;&#x7801;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x4F7F;&#x7528;&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;&#x91D1;&#x5B57;&#x5854;&#x6C60;&#x5316;&#x6838;&#x5B8C;&#x6210;&#x5BF9;&#x4E0D;&#x540C;&#x5C3A;&#x5BF8;&#x7279;&#x5F81;&#x7684;&#x878D;&#x5408;&#xFF0C;&#x5728;&#x89E3;&#x7801;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#x7B80;&#x5355;&#x7684;resize&#x5B8C;&#x6210;&#x5BF9;&#x56FE;&#x50CF;&#x4FE1;&#x606F;&#x7684;&#x6062;&#x590D;&#xFF0C;&#x5BF9;&#x540E;&#x9762;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#x7684;&#x53D1;&#x5C55;&#x6709;&#x91CD;&#x8981;&#x7684;&#x5F71;&#x54CD;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>语义分割网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[UNet]]></title>
    <url>%2F2020%2F04%2F21%2FSemantic_segmentation%20UNet%2F</url>
    <content type="text"><![CDATA[UNet &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;UNet:&#x4E8E;2015&#x5E74;&#x53D1;&#x8868;&#x4E8E;MICCA&#xFF0C;&#x8BBE;&#x8BA1;&#x7684;&#x5C31;&#x662F;&#x5E94;&#x7528;&#x4E8E;&#x533B;&#x5B66;&#x56FE;&#x50CF;&#x7684;&#x5206;&#x5272;&#xFF0C;&#x7531;&#x4E8E;&#x533B;&#x5B66;&#x5F71;&#x54CD;&#x672C;&#x8EAB;&#x7684;&#x6027;&#x8D28;&#xFF0C;&#x8BED;&#x4E49;&#x8F83;&#x4E3A;&#x7B80;&#x5355;&#xFF0C;&#x7ED3;&#x6784;&#x8F83;&#x4E3A;&#x56FA;&#x5B9A;&#xFF0C;&#x6570;&#x636E;&#x91CF;&#x8F83;&#x5C11;&#x4E14;&#x5177;&#x6709;&#x591A;&#x6A21;&#x6001;&#x7684;&#x6027;&#x8D28;&#xFF0C;&#x6839;&#x636E;CT&#x704C;&#x6CE8;&#x65B9;&#x6CD5;&#x4E0D;&#x540C;&#xFF0C;&#x5177;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x6A21;&#x6001;&#x3002;UNet&#x5B9E;&#x73B0;&#x4E86;&#x4F7F;&#x7528;&#x5C11;&#x91CF;&#x6570;&#x636E;&#x96C6;&#x8FDB;&#x884C;&#x5927;&#x5C3A;&#x5BF8;&#x56FE;&#x50CF;&#x7684;&#x6709;&#x6548;&#x7B97;&#x6CD5;&#xFF0C;&#x56E0;&#x4E3A;&#x7ED3;&#x6784;&#x7C7B;&#x4F3C;U&#x578B;&#xFF0C;&#x6545;&#x79F0;&#x4E4B;&#x4E3A;UNet&#x3002; UNet&#x7279;&#x70B9;&#x2003;&#x2003;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x7B80;&#x5355;&#xFF0C;&#x6613;&#x4E8E;&#x5B9E;&#x73B0;&#x2003;&#x2003;&#x4F7F;&#x7528;Over-tile&#x7B56;&#x7565;&#xFF0C;&#x56E0;&#x4E3A;&#x533B;&#x5B66;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x7684;&#x56FE;&#x50CF;&#x5C3A;&#x5BF8;&#x8F83;&#x5927;&#xFF0C;&#x6211;&#x4EEC;&#x9488;&#x5BF9;&#x4E8E;&#x67D0;&#x4E00;&#x533A;&#x57DF;&#x8FDB;&#x884C;&#x5206;&#x5272;&#x65F6;&#xFF0C;&#x53EF;&#x4EE5;&#x83B7;&#x53D6;&#x5468;&#x56F4;&#x66F4;&#x5927;&#x5C3A;&#x5BF8;&#x7684;&#x4FE1;&#x606F;&#x4F5C;&#x4E3A;&#x4E0A;&#x4E0B;&#x6587;&#xFF0C;&#x5728;&#x5377;&#x79EF;&#x65F6;&#x53EA;&#x4F7F;&#x7528;&#x6709;&#x6548;&#x90E8;&#x5206;&#xFF0C;&#x8FD9;&#x6837;&#x9632;&#x6B62;padding=same&#x65F6;&#x6DFB;&#x52A0;&#x65E0;&#x6548;&#x4FE1;&#x606F;&#x3002;&#x56E0;&#x6B64;&#x56FE;&#x50CF;&#x7684;&#x5C3A;&#x5BF8;&#x4F1A;&#x7F29;&#x5C0F;&#xFF0C;&#x5728;&#x7F51;&#x7EDC;&#x4E2D;&#x9700;&#x8981;&#x5BF9;&#x6D45;&#x5C42;&#x7279;&#x5F81;&#x8FDB;&#x884C;Crop&#x4E4B;&#x540E;&#x624D;&#x53EF;&#x4EE5;&#x4E0E;&#x6DF1;&#x5C42;&#x7279;&#x5F81;&#x8FDB;&#x884C;Concatenate&#x3002;&#x2003;&#x2003;&#x4F7F;&#x7528;&#x968F;&#x673A;&#x5F39;&#x6027;&#x53D8;&#x5F62;&#x5BF9;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x589E;&#x5F3A;&#xFF0C;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x9C81;&#x68D2;&#x6027;&#x3002;&#x2003;&#x2003;&#x4F7F;&#x7528;&#x52A0;&#x6743;Loss&#xFF0C;&#x5BF9;&#x4E8E;&#x67D0;&#x4E00;&#x70B9;&#x5230;&#x8FB9;&#x754C;&#x7684;&#x8DDD;&#x79BB;&#x5448;&#x9AD8;&#x65AF;&#x5173;&#x7CFB;&#x7684;&#x6743;&#x91CD;&#xFF0C;&#x8DDD;&#x79BB;&#x8FB9;&#x754C;&#x8D8A;&#x8FD1;&#x6743;&#x91CD;&#x8D8A;&#x5927;&#xFF0C;&#x8DDD;&#x79BB;&#x8D8A;&#x8FDC;&#x6743;&#x91CD;&#x8D8A;&#x5C0F;&#x3002; UNet&#x56FE;&#x50CF;&#x5206;&#x6790; TensorFlow2.0&#x5B9E;&#x73B0;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293import tensorflow.keras as kerasclass Convs(keras.Model): def __init__(self, filters, times=2, maxpooling=True, name=&apos;Convs&apos;): super(Convs, self).__init__() self.blocks = keras.Sequential(name=name) if maxpooling: self.blocks.add(keras.layers.MaxPool2D(name=name + &apos;_maxpool&apos;)) for i in range(times): self.blocks.add(keras.layers.Conv2D(filters, (3, 3), (1, 1), padding=&apos;valid&apos;, activation=&apos;relu&apos;, name=name + &apos;_con&apos; + str(i + 1))) def call(self, inputs, training=None, mask=None): return self.blocks(inputs)class DeConvs(keras.Model): def __init__(self, filters, times=2, upsampling=True, name=&apos;DeConvs&apos;): super(DeConvs, self).__init__() self.blocks = keras.Sequential(name=name) for i in range(times): self.blocks.add(keras.layers.Conv2D(filters, (3, 3), (1, 1), padding=&apos;valid&apos;, activation=&apos;relu&apos;, name=name + &apos;_con&apos; + str(i + 1))) if upsampling: self.blocks.add(keras.layers.UpSampling2D()) def call(self, inputs, training=None, mask=None): output = self.blocks(inputs) return outputclass UNet(keras.Model): def __init__(self): super(UNet, self).__init__() self.encoder1 = keras.Sequential([Convs(64, maxpooling=False)], name=&apos;Encoder_1&apos;) self.crop1 = keras.layers.Cropping2D(((88, 88), (88, 88)), name=&apos;Crop_1&apos;) self.encoder2 = keras.Sequential([Convs(128)], name=&apos;Encoder_2&apos;) self.crop2 = keras.layers.Cropping2D(((40, 40), (40, 40)), name=&apos;Crop_2&apos;) self.encoder3 = keras.Sequential([Convs(256)], name=&apos;Encoder_3&apos;) self.crop3 = keras.layers.Cropping2D(((16, 16), (16, 16)), name=&apos;Crop_3&apos;) self.encoder4 = keras.Sequential([Convs(512)], name=&apos;Encoder_4&apos;) self.crop4 = keras.layers.Cropping2D(((4, 4), (4, 4)), name=&apos;Crop_4&apos;) self.encoder5 = keras.Sequential([Convs(1024)], name=&apos;Encoder_5&apos;) self.upsample = keras.layers.UpSampling2D(name=&apos;UpSample&apos;) self.concatenate4 = keras.layers.Concatenate(name=&apos;Concatenate_4&apos;) self.decoder3 = keras.Sequential([DeConvs(512)], name=&apos;Decoder_4&apos;) self.concatenate3 = keras.layers.Concatenate(name=&apos;Concatenate_3&apos;) self.decoder2 = keras.Sequential([DeConvs(256)], name=&apos;Decoder_3&apos;) self.concatenate2 = keras.layers.Concatenate(name=&apos;Concatenate_2&apos;) self.decoder1 = keras.Sequential([DeConvs(256)], name=&apos;Decoder_2&apos;) self.concatenate1 = keras.layers.Concatenate(name=&apos;Concatenate_1&apos;) self.decoder0 = keras.Sequential([DeConvs(64, upsampling=False)], name=&apos;Decoder_0&apos;) self.conv = keras.layers.Conv2D(21, (1, 1), padding=&apos;same&apos;, name=&apos;Conv&apos;) self.softmax = keras.layers.Softmax(name=&apos;SoftMax&apos;) def call(self, inputs, training=None, mask=None): encoder1 = self.encoder1(inputs) crop1 = self.crop1(encoder1) encoder2 = self.encoder2(encoder1) crop2 = self.crop2(encoder2) encoder3 = self.encoder3(encoder2) crop3 = self.crop3(encoder3) encoder4 = self.encoder4(encoder3) crop4 = self.crop4(encoder4) encoder5 = self.encoder5(encoder4) decoder4 = self.upsample(encoder5) concatenate4 = self.concatenate4([crop4, decoder4]) decoder3 = self.decoder3(concatenate4) concatenate3 = self.concatenate3([crop3, decoder3]) decoder2 = self.decoder2(concatenate3) concatenate2 = self.concatenate2([crop2, decoder2]) decoder1 = self.decoder1(concatenate2) concatenate1 = self.concatenate1([crop1, decoder1]) decoder0 = self.decoder0(concatenate1) conv = self.conv(decoder0) output = self.softmax(conv) return outputif __name__ == &apos;__main__&apos;: model = UNet() model.build(input_shape=(None, 572, 572, 3)) model.summary() Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E; project shape train_imgs(&#x8BAD;&#x7EC3;&#x96C6;&#x56FE;&#x50CF;&#x6587;&#x4EF6;&#x5939;) train_mask(&#x8BAD;&#x7EC3;&#x96C6;&#x63A9;&#x6A21;&#x6587;&#x4EF6;&#x5939;) test_imgs(&#x6D4B;&#x8BD5;&#x96C6;&#x56FE;&#x50CF;&#x6587;&#x4EF6;&#x5939;) UNet_weight(&#x6A21;&#x578B;&#x6743;&#x91CD;&#x6587;&#x4EF6;&#x5939;) UNet_test_result(&#x6D4B;&#x8BD5;&#x96C6;&#x7ED3;&#x679C;&#x6587;&#x4EF6;&#x5939;) UNet.py &#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E; &#x8BED;&#x4E49;&#x5206;&#x5272;&#x5B9E;&#x6218;&#x8FD0;&#x884C;&#x8F83;&#x4E3A;&#x7B80;&#x5355;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x7684;&#x8F93;&#x5165;&#x7684;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x4E3A;&#x56FE;&#x50CF;&#xFF0C;&#x8F93;&#x5165;&#x7684;&#x6807;&#x7B7E;&#x6570;&#x636E;&#x4E5F;&#x662F;&#x56FE;&#x50CF;&#xFF0C;&#x9996;&#x5148;&#x8981;&#x5BF9;&#x8F93;&#x5165;&#x7684;&#x6807;&#x7B7E;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x7F16;&#x7801;&#xFF0C;&#x8F6C;&#x6362;&#x4E3A;&#x7C7B;&#x522B;&#x4FE1;&#x606F;&#xFF0C;&#x8981;&#x548C;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x7EF4;&#x5EA6;&#x76F8;&#x5339;&#x914D;&#xFF0C;&#x4ECE;(batch_size, height, width, 1)&#x8F6C;&#x6362;&#x4E3A;(batch_size, height, width, num_class + 1)&#xFF0C;&#x67D0;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x4E3A;&#x54EA;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#xFF0C;&#x5219;&#x5728;&#x8BE5;&#x901A;&#x9053;&#x4E0A;&#x7F6E;1&#xFF0C;&#x5176;&#x4F59;&#x901A;&#x9053;&#x7F6E;0&#x3002;&#x5373;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x5165;&#x5927;&#x5C0F;&#x4E3A;(batch_size, height, width, 3)&#xFF0C;&#x8F93;&#x51FA;&#x5927;&#x5C0F;&#x4E3A;(batch_size, height, width, num_class + 1)&#x3002; &#x8BBE;&#x8BA1;&#x635F;&#x5931;&#x51FD;&#x6570;&#xFF0C;&#x7B80;&#x5355;&#x60C5;&#x51B5;&#x8BBE;&#x7F6E;&#x4EA4;&#x53C9;&#x71B5;&#x635F;&#x5931;&#x51FD;&#x6570;&#x5373;&#x53EF;&#x8FBE;&#x5230;&#x8F83;&#x597D;&#x6548;&#x679C;&#x3002; &#x642D;&#x5EFA;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;&#x8BBE;&#x7F6E;&#x5408;&#x9002;&#x53C2;&#x6570;&#xFF0C;&#x8FDB;&#x884C;&#x8BAD;&#x7EC3;&#x3002; &#x9884;&#x6D4B;&#x65F6;&#xFF0C;&#x9700;&#x8981;&#x6839;&#x636E;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x8FDB;&#x884C;&#x9006;&#x5411;&#x89E3;&#x7801;(&#x7F16;&#x7801;&#x7684;&#x53CD;&#x8FC7;&#x7A0B;)&#xFF0C;&#x5BFB;&#x627E;&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#xFF0C;&#x54EA;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x4E0A;&#x503C;&#x6700;&#x5927;&#x5219;&#x5F52;&#x4E3A;&#x54EA;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#xFF0C;&#x5373;&#x53EF;&#x5B8C;&#x6210;&#x5B9E;&#x6218;&#x7684;&#x8FC7;&#x7A0B;&#x3002; &#x5C0F;&#x6280;&#x5DE7; &#x8BBE;&#x7F6E;&#x7684;&#x56FE;&#x50CF;&#x7C7B;&#x522B;&#x6570;&#x4E3A;&#x5B9E;&#x9645;&#x7C7B;&#x522B;&#x6570;+1&#xFF0C;1&#x4EE3;&#x8868;&#x80CC;&#x666F;&#x7C7B;&#x522B;&#xFF0C;&#x6B64;&#x6570;&#x636E;&#x96C6;&#x4E3A;3&#x7C7B;&#xFF0C;&#x6700;&#x540E;&#x7684;&#x901A;&#x9053;&#x6570;&#x4E3A;4&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x9884;&#x6D4B;&#x4E00;&#x7C7B;&#x7269;&#x4F53;&#x3002;&#x5728;&#x901A;&#x9053;&#x65B9;&#x5411;&#x6C42;Softmax&#xFF0C;&#x5E76;&#x4E14;&#x6C42;&#x51FA;&#x6700;&#x5927;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;0&#x5219;&#x4EE3;&#x8868;&#x80CC;&#x666F;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;1&#x5219;&#x4EE3;&#x8868;&#x5706;&#x5F62;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;2&#x5219;&#x4EE3;&#x8868;&#x4E09;&#x89D2;&#x5F62;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;3&#x5219;&#x4EE3;&#x8868;&#x6B63;&#x65B9;&#x5F62;&#x3002; &#x5B9E;&#x9645;&#x4E2D;&#x7528;&#x5230;&#x7684;&#x56FE;&#x50CF;&#x7684;&#x5C3A;&#x5BF8;&#x4E00;&#x822C;&#x90FD;&#x4E0D;&#x662F;&#x7279;&#x522B;&#x5927;&#xFF0C;&#x56E0;&#x6B64;&#x4E0D;&#x9700;&#x8981;&#x5C06;&#x56FE;&#x50CF;&#x8FDB;&#x884C;Crop&#xFF0C;&#x6240;&#x4EE5;&#x5377;&#x79EF;&#x7684;padding&#x4FEE;&#x6539;&#x4E3A;same&#x3002; &#x635F;&#x5931;&#x51FD;&#x6570;&#x4F7F;&#x7528;&#x4EA4;&#x53C9;&#x71B5;&#x5373;&#x53EF;&#xFF0C;&#x4F7F;&#x7528;&#x52A0;&#x6743;Loss&#xFF0C;&#x8BA1;&#x7B97;&#x91CF;&#x8F83;&#x5927;&#xFF0C;&#x800C;&#x4E14;&#x9700;&#x8981;&#x8BA1;&#x7B97;&#x8FB9;&#x7F18;&#x64CD;&#x4F5C;&#x3002; &#x8BBE;&#x7F6E;&#x4E86;&#x6743;&#x91CD;&#x7684;&#x4FDD;&#x5B58;&#x65B9;&#x5F0F;&#xFF0C;&#x5B66;&#x4E60;&#x7387;&#x7684;&#x4E0B;&#x964D;&#x65B9;&#x5F0F;&#x548C;&#x65E9;&#x505C;&#x65B9;&#x5F0F;&#x3002; &#x4F7F;&#x7528;yield&#x5173;&#x952E;&#x5B57;&#xFF0C;&#x4EA7;&#x751F;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#xFF0C;&#x4E0D;&#x7528;&#x5C06;&#x6240;&#x6709;&#x7684;&#x6570;&#x636E;&#x90FD;&#x4FDD;&#x5B58;&#x4E0B;&#x6765;&#xFF0C;&#x5927;&#x5927;&#x8282;&#x7EA6;&#x5185;&#x5B58;&#x3002; &#x5176;&#x4E2D;&#x5C06;1000&#x4E2A;&#x6570;&#x636E;&#xFF0C;&#x5206;&#x6210;800&#x4E2A;&#x8BAD;&#x7EC3;&#x96C6;&#xFF0C;100&#x4E2A;&#x9A8C;&#x8BC1;&#x96C6;&#x548C;100&#x4E2A;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x81EA;&#x884C;&#x4FEE;&#x6539;&#x3002; &#x6CE8;&#x610F;&#x5176;&#x4E2D;&#x7684;&#x4E00;&#x4E9B;&#x7EF4;&#x5EA6;&#x53D8;&#x6362;&#x548C;numpy&#xFF0C;tensorflow&#x5E38;&#x7528;&#x64CD;&#x4F5C;&#xFF0C;&#x5426;&#x5219;&#x5728;&#x9605;&#x8BFB;&#x4EE3;&#x7801;&#x65F6;&#x53EF;&#x80FD;&#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x56F0;&#x96BE;&#x3002; UNet&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x7C7B;&#x4F3C;&#x4E8E;VGG&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x90E8;&#x5206;&#x5185;&#x5BB9;&#xFF0C;&#x9009;&#x62E9;&#x5176;&#x4ED6;&#x7684;&#x7F51;&#x7EDC;&#x8FDB;&#x884C;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#xFF0C;&#x6BD4;&#x8F83;&#x4E0D;&#x540C;&#x7F51;&#x7EDC;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x8FD0;&#x884C;&#x901F;&#x5EA6;&#xFF0C;&#x6700;&#x7EC8;&#x7ED3;&#x679C;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x5F02;&#x3002; &#x56FE;&#x50CF;&#x8F93;&#x5165;&#x53EF;&#x4EE5;&#x5148;&#x5C06;&#x5176;&#x5F52;&#x4E00;&#x5316;&#x5230;0-1&#x4E4B;&#x95F4;&#x6216;&#x8005;-1-1&#x4E4B;&#x95F4;&#xFF0C;&#x56E0;&#x4E3A;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x4E00;&#x822C;&#x90FD;&#x6BD4;&#x8F83;&#x5C0F;&#xFF0C;&#x6240;&#x4EE5;&#x5F52;&#x4E00;&#x5316;&#x540E;&#x8BA1;&#x7B97;&#x65B9;&#x4FBF;&#xFF0C;&#x6536;&#x655B;&#x8F83;&#x5FEB;&#x3002; &#x5B9E;&#x9645;&#x7684;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x5E38;&#x5E38;&#x8FD8;&#x9700;&#x8981;&#x5BF9;&#x6570;&#x636E;&#x96C6;&#x8FDB;&#x884C;&#x5927;&#x5C0F;&#x8C03;&#x6574;&#x548C;&#x589E;&#x5F3A;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x4E3A;&#x4E86;&#x7B80;&#x5355;&#x8D77;&#x89C1;&#xFF0C;&#x6CA1;&#x6709;&#x8FDB;&#x884C;&#x590D;&#x6742;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5E94;&#x7528;&#x4E2D;&#x8981;&#x8BB0;&#x5F97;&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x7684;&#x9700;&#x8981;&#xFF0C;&#x5BF9;&#x56FE;&#x50CF;&#x8FDB;&#x884C;resize&#x6216;&#x8005;padding&#xFF0C;&#x7136;&#x540E;&#x65CB;&#x8F6C;&#xFF0C;&#x5BF9;&#x6BD4;&#x5EA6;&#x589E;&#x5F3A;&#xFF0C;&#x4EFF;&#x5C04;&#x8FD0;&#x7B97;&#x7B49;&#x7B49;&#x64CD;&#x4F5C;&#xFF0C;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x9C81;&#x68D2;&#x6027;&#xFF0C;&#x5E76;&#x4E14;&#x5B9E;&#x9645;&#x4E2D;&#x7684;&#x56FE;&#x50CF;&#x4E0D;&#x4E00;&#x5B9A;&#x6309;&#x7167;&#x987A;&#x5E8F;&#x547D;&#x540D;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x5E94;&#x7528;&#x4E2D;&#x4E5F;&#x8981;&#x6CE8;&#x610F;&#x56FE;&#x50CF;&#x8BFB;&#x53D6;&#x7684;&#x6587;&#x4EF6;&#x540D;&#x3002; &#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196import osimport numpy as npimport cv2 as cvimport tensorflow as tfimport tensorflow.keras as kerasclass Convs(keras.Model): def __init__(self, filters, times=2, maxpooling=True, name=&apos;Convs&apos;): super(Convs, self).__init__() self.blocks = keras.Sequential(name=name) if maxpooling: self.blocks.add(keras.layers.MaxPool2D(name=name + &apos;_maxpool&apos;)) for i in range(times): self.blocks.add(keras.layers.Conv2D(filters, (3, 3), (1, 1), padding=&apos;same&apos;, activation=&apos;relu&apos;, name=name + &apos;_con&apos; + str(i + 1))) def call(self, inputs, training=None, mask=None): return self.blocks(inputs)class DeConvs(keras.Model): def __init__(self, filters, times=2, upsampling=True, name=&apos;DeConvs&apos;): super(DeConvs, self).__init__() self.blocks = keras.Sequential(name=name) for i in range(times): self.blocks.add(keras.layers.Conv2D(filters, (3, 3), (1, 1), padding=&apos;same&apos;, activation=&apos;relu&apos;, name=name + &apos;_con&apos; + str(i + 1))) if upsampling: self.blocks.add(keras.layers.UpSampling2D()) def call(self, inputs, training=None, mask=None): output = self.blocks(inputs) return outputclass Small_UNet(keras.Model): def __init__(self): super(Small_UNet, self).__init__() self.encoder1 = keras.Sequential([Convs(32, maxpooling=False)], name=&apos;Encoder_1&apos;) self.encoder2 = keras.Sequential([Convs(32)], name=&apos;Encoder_2&apos;) self.encoder3 = keras.Sequential([Convs(64)], name=&apos;Encoder_3&apos;) self.encoder4 = keras.Sequential([Convs(128)], name=&apos;Encoder_4&apos;) self.encoder5 = keras.Sequential([Convs(256)], name=&apos;Encoder_5&apos;) self.upsample = keras.layers.UpSampling2D(name=&apos;UpSample&apos;) self.concatenate4 = keras.layers.Concatenate(name=&apos;Concatenate_4&apos;) self.decoder3 = keras.Sequential([DeConvs(128)], name=&apos;Decoder_4&apos;) self.concatenate3 = keras.layers.Concatenate(name=&apos;Concatenate_3&apos;) self.decoder2 = keras.Sequential([DeConvs(64)], name=&apos;Decoder_3&apos;) self.concatenate2 = keras.layers.Concatenate(name=&apos;Concatenate_2&apos;) self.decoder1 = keras.Sequential([DeConvs(32)], name=&apos;Decoder_2&apos;) self.concatenate1 = keras.layers.Concatenate(name=&apos;Concatenate_1&apos;) self.decoder0 = keras.Sequential([DeConvs(32, upsampling=False)], name=&apos;Decoder_0&apos;) self.conv = keras.layers.Conv2D(num_class, (1, 1), padding=&apos;same&apos;, name=&apos;Convs&apos;) self.softmax = keras.layers.Softmax(name=&apos;SoftMax&apos;) def call(self, inputs, training=None, mask=None): encoder1 = self.encoder1(inputs) encoder2 = self.encoder2(encoder1) encoder3 = self.encoder3(encoder2) encoder4 = self.encoder4(encoder3) encoder5 = self.encoder5(encoder4) decoder4 = self.upsample(encoder5) concatenate4 = self.concatenate4([encoder4, decoder4]) decoder3 = self.decoder3(concatenate4) concatenate3 = self.concatenate3([encoder3, decoder3]) decoder2 = self.decoder2(concatenate3) concatenate2 = self.concatenate2([encoder2, decoder2]) decoder1 = self.decoder1(concatenate2) concatenate1 = self.concatenate1([encoder1, decoder1]) decoder0 = self.decoder0(concatenate1) conv = self.conv(decoder0) output = self.softmax(conv) return outputdef generate_arrays_from_file(train_data, batch_size): # &#x83B7;&#x53D6;&#x603B;&#x957F;&#x5EA6; n = len(train_data) i = 0 while 1: X_train = [] Y_train = [] # &#x83B7;&#x53D6;&#x4E00;&#x4E2A;batch_size&#x5927;&#x5C0F;&#x7684;&#x6570;&#x636E; for _ in range(batch_size): if i == 0: np.random.shuffle(train_data) # &#x4ECE;&#x6587;&#x4EF6;&#x4E2D;&#x8BFB;&#x53D6;&#x56FE;&#x50CF; img = cv.imread(imgs_path + &apos;\\&apos; + str(train_data[i]) + &apos;.jpg&apos;) img = img / 127.5 - 1 X_train.append(img) # &#x4ECE;&#x6587;&#x4EF6;&#x4E2D;&#x8BFB;&#x53D6;&#x56FE;&#x50CF; img = cv.imread(mask_path + &apos;\\&apos; + str(train_data[i]) + &apos;.png&apos;) seg_labels = np.zeros((img_size[0], img_size[1], num_class)) for c in range(num_class): seg_labels[:, :, c] = (img[:, :, 0] == c).astype(int) Y_train.append(seg_labels) # &#x8BFB;&#x5B8C;&#x4E00;&#x4E2A;&#x5468;&#x671F;&#x540E;&#x91CD;&#x65B0;&#x5F00;&#x59CB; i = (i + 1) % n yield tf.constant(X_train), tf.constant(Y_train)if __name__ == &apos;__main__&apos;: # &#x5305;&#x62EC;&#x80CC;&#x666F; num_class = 4 train_data = list(range(800)) validation_data = list(range(800, 900)) test_data = range(900, 1000) epochs = 50 batch_size = 16 tf.random.set_seed(22) img_size = (128, 128) colors = [[0, 0, 0], [0, 0, 128], [0, 128, 0], [128, 0, 0]] mask_path = r&apos;.\shape\train_mask&apos; imgs_path = r&apos;.\shape\train_imgs&apos; test_path = r&apos;.\shape\test_imgs&apos; save_path = r&apos;.\UNet_test_result&apos; weight_path = r&apos;.\UNet_weight&apos; try: os.mkdir(save_path) except FileExistsError: print(save_path + &apos;has been exist&apos;) try: os.mkdir(weight_path) except FileExistsError: print(weight_path + &apos;has been exist&apos;) model = Small_UNet() model.build(input_shape=(None, img_size[0], img_size[1], 3)) model.summary() optimizor = keras.optimizers.Adam(lr=1e-3) lossor = keras.losses.BinaryCrossentropy() model.compile(optimizer=optimizor, loss=lossor, metrics=[&apos;accuracy&apos;]) # &#x4FDD;&#x5B58;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;3&#x4E16;&#x4EE3;&#x4FDD;&#x5B58;&#x4E00;&#x6B21; checkpoint_period = keras.callbacks.ModelCheckpoint( weight_path + &apos;\\&apos; + &apos;ep{epoch:03d}-loss{loss:.3f}-val_loss{val_loss:.3f}.h5&apos;, monitor=&apos;val_loss&apos;, save_weights_only=True, save_best_only=True, period=3 ) # &#x5B66;&#x4E60;&#x7387;&#x4E0B;&#x964D;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;val_loss3&#x6B21;&#x4E0D;&#x4E0B;&#x964D;&#x5C31;&#x4E0B;&#x964D;&#x5B66;&#x4E60;&#x7387;&#x7EE7;&#x7EED;&#x8BAD;&#x7EC3; reduce_lr = keras.callbacks.ReduceLROnPlateau( monitor=&apos;val_loss&apos;, factor=0.5, patience=3, verbose=1 ) # &#x662F;&#x5426;&#x9700;&#x8981;&#x65E9;&#x505C;&#xFF0C;&#x5F53;val_loss&#x4E00;&#x76F4;&#x4E0D;&#x4E0B;&#x964D;&#x7684;&#x65F6;&#x5019;&#x610F;&#x5473;&#x7740;&#x6A21;&#x578B;&#x57FA;&#x672C;&#x8BAD;&#x7EC3;&#x5B8C;&#x6BD5;&#xFF0C;&#x53EF;&#x4EE5;&#x505C;&#x6B62; early_stopping = keras.callbacks.EarlyStopping( monitor=&apos;val_loss&apos;, min_delta=0, patience=10, verbose=1 ) model.fit_generator(generate_arrays_from_file(train_data, batch_size), steps_per_epoch=max(1, len(train_data) // batch_size), validation_data=generate_arrays_from_file(validation_data, batch_size), validation_steps=max(1, len(validation_data) // batch_size), epochs=epochs, callbacks=[checkpoint_period, reduce_lr, early_stopping]) for name in test_data: test_img_path = test_path + &apos;\\&apos; + str(name) + &apos;.jpg&apos; save_img_path = save_path + &apos;\\&apos; + str(name) + &apos;.png&apos; test_img = cv.imread(test_img_path) test_img = tf.constant([test_img / 127.5 - 1]) test_mask = model.predict(test_img) test_mask = np.reshape(test_mask, (img_size[0], img_size[1], num_class)) test_mask = np.argmax(test_mask, axis=-1) seg_img = np.zeros((img_size[0], img_size[1], 3)) for c in range(num_class): seg_img[:, :, 0] += ((test_mask == c) * (colors[c][0])) seg_img[:, :, 1] += ((test_mask == c) * (colors[c][1])) seg_img[:, :, 2] += ((test_mask == c) * (colors[c][2])) seg_img = seg_img.astype(np.uint8) cv.imwrite(save_img_path, seg_img) &#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C; UNet&#x5C0F;&#x7ED3;&#x2003;&#x2003;UNet&#x662F;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x7684;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x7F51;&#x7EDC;&#xFF0C;&#x5728;&#x8F93;&#x5165;&#x56FE;&#x50CF;&#x5C3A;&#x5BF8;&#x4E3A;572x572&#x65F6;&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x4E3A;32M&#x3002;&#x56E0;&#x4E3A;&#x5176;padding&#x65B9;&#x5F0F;&#x4F7F;&#x5176;&#x56FE;&#x50CF;&#x5C3A;&#x5BF8;&#x7F29;&#x5C0F;&#xFF0C;&#x9002;&#x5408;&#x4E8E;&#x5927;&#x5C3A;&#x5BF8;&#x56FE;&#x50CF;&#x7684;&#x5206;&#x5272;&#xFF0C;&#x5E76;&#x4E14;&#x91C7;&#x7528;&#x52A0;&#x6743;&#x635F;&#x5931;&#x51FD;&#x6570;&#x548C;&#x4F18;&#x79C0;&#x7684;&#x56FE;&#x50CF;&#x589E;&#x5F3A;&#x64CD;&#x4F5C;&#xFF0C;&#x4F7F;&#x5F97;&#x5176;&#x5728;&#x533B;&#x5B66;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x4E2D;&#x6709;&#x826F;&#x597D;&#x7684;&#x8868;&#x73B0;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>语义分割网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SegNet]]></title>
    <url>%2F2020%2F04%2F18%2FSemantic_segmentation%20SegNet%2F</url>
    <content type="text"><![CDATA[SegNet &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;SegNet:&#x7531;&#x5251;&#x6865;&#x5927;&#x5B66;&#x63D0;&#x51FA;&#xFF0C;2015&#x5E74;&#x88AB;&#x63D0;&#x4EA4;&#x5230;CVPR&#xFF0C;&#x4F46;&#x662F;&#x6700;&#x540E;&#x6CA1;&#x6709;&#x53D1;&#x8868;&#xFF0C;&#x53CD;&#x800C;&#x5728;2017&#x5E74;&#x53D1;&#x8868;&#x5728;TPAMI&#x4E0A;&#x3002;&#x662F;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x9AD8;&#x6548;&#x7684;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x6A21;&#x578B;&#x3002; SegNet&#x7279;&#x70B9;&#x2003;&#x2003;&#x7F51;&#x7EDC;&#x5206;&#x4E3A;&#x4E24;&#x4E2A;&#x90E8;&#x5206;&#xFF0C;&#x7F16;&#x7801;(Encoder)&#x548C;&#x89E3;&#x7801;(Decoder)&#xFF0C;&#x7ED3;&#x6784;&#x7B80;&#x5355;&#xFF0C;&#x7F51;&#x7EDC;&#x6613;&#x4E8E;&#x5B9E;&#x73B0;&#x2003;&#x2003;&#x4F7F;&#x7528;&#x4E86;Maxpooling-Indices(&#x6700;&#x5927;&#x6C60;&#x5316;&#x7D22;&#x5F15;)&#x6765;&#x8FDB;&#x884C;&#x56FE;&#x50CF;&#x5206;&#x8FA8;&#x7387;&#x7684;&#x63D0;&#x9AD8;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x91C7;&#x7528;&#x4E0A;&#x91C7;&#x6837;&#x6216;&#x8005;&#x53CD;&#x5377;&#x79EF;&#x3002; Maxpooling-Indices(&#x6700;&#x5927;&#x6C60;&#x5316;&#x7D22;&#x5F15;)&#x4E0E;Upsampling(&#x4E0A;&#x91C7;&#x6837;)&#x548C;Deconvolution(&#x53CD;&#x5377;&#x79EF;)&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;&#x2003;&#x2003;Maxpooling-Indices(&#x6700;&#x5927;&#x6C60;&#x5316;&#x7D22;&#x5F15;)&#xFF1A;&#x53C8;&#x79F0;&#x4E3A;Unpooling(&#x53CD;&#x6C60;&#x5316;)&#xFF0C;&#x6C60;&#x5316;&#x540E;&#x8BB0;&#x5F55;&#x6700;&#x5927;&#x503C;&#x6240;&#x5728;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x5728;&#x53CD;&#x6C60;&#x5316;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x7ED9;&#x76F8;&#x5E94;&#x4F4D;&#x7F6E;&#x4E0A;&#x5199;&#x5165;&#x503C;&#xFF0C;&#x5176;&#x4ED6;&#x4F4D;&#x7F6E;&#x4E3A;0&#x3002;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x5E76;&#x4E0D;&#x5E38;&#x7528;&#xFF0C;&#x56E0;&#x4E3A;&#x5B58;&#x5728;&#x5927;&#x91CF;&#x7684;&#x7A00;&#x758F;&#x6570;&#x636E;&#xFF0C;&#x4F7F;&#x6A21;&#x578B;&#x6536;&#x655B;&#x901F;&#x5EA6;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x3002;&#x2003;&#x2003;Upsampling(&#x4E0A;&#x91C7;&#x6837;)&#xFF1A;&#x5C06;&#x8F93;&#x5165;resize&#x5230;&#x8BBE;&#x7F6E;&#x5927;&#x5C0F;&#xFF0C;&#x7136;&#x540E;&#x5229;&#x7528;&#x6307;&#x5B9A;&#x7684;&#x63D2;&#x503C;&#x65B9;&#x6CD5;&#x5BF9;&#x5468;&#x56F4;&#x7684;&#x503C;&#x8FDB;&#x884C;&#x63D2;&#x503C;&#xFF0C;&#x5E38;&#x7528;&#x6700;&#x8FD1;&#x90BB;&#x63D2;&#x503C;&#x548C;&#x53CC;&#x7EBF;&#x6027;&#x63D2;&#x503C;&#x3002;&#x56E0;&#x4E3A;&#x76F8;&#x90BB;&#x533A;&#x57DF;&#x7684;&#x50CF;&#x7D20;&#x548C;&#x7279;&#x5F81;&#x5E94;&#x8BE5;&#x662F;&#x76F8;&#x4F3C;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x7279;&#x522B;&#x5E38;&#x7528;&#xFF0C;&#x65E2;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#xFF0C;&#x4E5F;&#x4E0D;&#x4F1A;&#x5B58;&#x5728;&#x7A00;&#x758F;&#x6570;&#x636E;&#x3002;&#x2003;&#x2003;Deconvolution(&#x53CD;&#x5377;&#x79EF;)&#xFF1A;&#x672C;&#x8D28;&#x662F;&#x5377;&#x79EF;&#xFF0C;&#x6CE8;&#x610F;&#x53CD;&#x5377;&#x79EF;&#x5E76;&#x4E0D;&#x80FD;&#x4ECE;&#x5377;&#x79EF;&#x7684;&#x7ED3;&#x679C;&#x8FD4;&#x56DE;&#x5230;&#x5377;&#x79EF;&#x524D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x53EA;&#x80FD;&#x8FD4;&#x56DE;&#x5230;&#x5377;&#x79EF;&#x524D;&#x7684;&#x5C3A;&#x5BF8;&#x3002;&#x5377;&#x79EF;&#x901A;&#x8FC7;&#x8BBE;&#x7F6E;kernel_size&#x5377;&#x79EF;&#x6838;&#x5927;&#x5C0F;&#xFF0C;strides&#x6B65;&#x957F;&#x548C;padding&#x586B;&#x5145;&#x65B9;&#x5F0F;&#x53EF;&#x4EE5;&#x5C06;&#x56FE;&#x50CF;&#x7684;&#x5206;&#x8FA8;&#x7387;&#x964D;&#x4F4E;&#xFF0C;&#x76F8;&#x53CD;&#x7684;&#x53CD;&#x5377;&#x79EF;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8BBE;&#x7F6E;kernel_size&#x5377;&#x79EF;&#x6838;&#x5927;&#x5C0F;&#xFF0C;strides&#x6B65;&#x957F;&#x548C;padding&#x586B;&#x5145;&#x65B9;&#x5F0F;&#x5148;&#x5BF9;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x586B;&#x5145;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8FDB;&#x884C;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x56FE;&#x50CF;&#x7684;&#x5206;&#x8FA8;&#x7387;&#x589E;&#x52A0;&#x3002;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x4E0D;&#x63A8;&#x8350;&#x7ECF;&#x5E38;&#x4F7F;&#x7528;&#xFF0C;&#x56E0;&#x4E3A;&#x5B58;&#x5728;&#x5927;&#x91CF;&#x53C2;&#x6570;&#xFF0C;&#x800C;&#x4E14;&#x53EF;&#x80FD;&#x4F1A;&#x5B58;&#x5728;&#x68CB;&#x76D8;&#x683C;&#x6548;&#x5E94;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x68CB;&#x76D8;&#x683C;&#x53EF;&#x89C6;&#x5316;&#x3002; SegNet&#x56FE;&#x50CF;&#x5206;&#x6790; TensorFlow2.0&#x5B9E;&#x73B0;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980import tensorflow as tfimport tensorflow.keras as kerasimport numpy as npdef indices_maxpool(val, index): input_size = index.shape output_size = [x * 2 if i == 0 or i == 1 else x for i, x in enumerate(input_size[1:])] output = tf.reshape(tf.scatter_nd(tf.reshape(index, (-1, 1)), tf.reshape(val, (-1, )), (batch_size * np.prod(output_size), )), [-1] + output_size) return outputclass Convs(keras.Model): def __init__(self, filters, times): super(Convs, self).__init__() self.blocks = keras.Sequential() for i in range(times): self.blocks.add(keras.layers.Conv2D(filters, (3, 3), (1, 1), padding=&apos;same&apos;)) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU()) def call(self, inputs, training=None, mask=None): output = self.blocks(inputs) return outputclass SegNet(keras.Model): def __init__(self): super(SegNet, self).__init__() self.encoder1 = keras.Sequential([Convs(64, 2)], name=&apos;Encoder1&apos;) self.encoder2 = keras.Sequential([Convs(128, 2)], name=&apos;Encoder2&apos;) self.encoder3 = keras.Sequential([Convs(256, 3)], name=&apos;Encoder3&apos;) self.encoder4 = keras.Sequential([Convs(512, 3)], name=&apos;Encoder4&apos;) self.encoder5 = keras.Sequential([Convs(512, 3)], name=&apos;Encoder5&apos;) self.decoder1 = keras.Sequential([Convs(64, 1), Convs(21, 1)], name=&apos;Decoder1&apos;) self.decoder2 = keras.Sequential([Convs(128, 1), Convs(64, 1)], name=&apos;Decoder2&apos;) self.decoder3 = keras.Sequential([Convs(256, 2), Convs(128, 1)], name=&apos;Decoder3&apos;) self.decoder4 = keras.Sequential([Convs(512, 2), Convs(256, 1)], name=&apos;Decoder4&apos;) self.decoder5 = keras.Sequential([Convs(512, 2), Convs(512, 1)], name=&apos;Decoder5&apos;) self.softmax = keras.layers.Softmax(name=&apos;Softmax&apos;) def call(self, inputs, training=None, mask=None): encoder1 = self.encoder1(inputs) val_1, index_1 = tf.nn.max_pool_with_argmax(encoder1, (2, 2), (2, 2), &apos;VALID&apos;) encoder2 = self.encoder2(val_1) val_2, index_2 = tf.nn.max_pool_with_argmax(encoder2, (2, 2), (2, 2), &apos;VALID&apos;) encoder3 = self.encoder3(val_2) val_3, index_3 = tf.nn.max_pool_with_argmax(encoder3, (2, 2), (2, 2), &apos;VALID&apos;) encoder4 = self.encoder4(val_3) val_4, index_4 = tf.nn.max_pool_with_argmax(encoder4, (2, 2), (2, 2), &apos;VALID&apos;) encoder5 = self.encoder5(val_4) val_5, index_5 = tf.nn.max_pool_with_argmax(encoder5, (2, 2), (2, 2), &apos;VALID&apos;) indices_maxpool5 = indices_maxpool(val_5, index_5) decoder5 = self.decoder5(indices_maxpool5) indices_maxpool4 = indices_maxpool(decoder5, index_4) decoder4 = self.decoder4(indices_maxpool4) indices_maxpool3 = indices_maxpool(decoder4, index_3) decoder3 = self.decoder3(indices_maxpool3) indices_maxpool2 = indices_maxpool(decoder3, index_2) decoder2 = self.decoder2(indices_maxpool2) indices_maxpool1 = indices_maxpool(decoder2, index_1) decoder1 = self.decoder1(indices_maxpool1) output = self.softmax(decoder1) return outputif __name__ == &apos;__main__&apos;: batch_size = 16 model = SegNet() model.build(input_shape=(batch_size, 512, 512, 3)) model.summary() Shape&#x6570;&#x636E;&#x96C6;&#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5173;&#x7CFB;&#x8BF4;&#x660E; project shape train_imgs(&#x8BAD;&#x7EC3;&#x96C6;&#x56FE;&#x50CF;&#x6587;&#x4EF6;&#x5939;) train_mask(&#x8BAD;&#x7EC3;&#x96C6;&#x63A9;&#x6A21;&#x6587;&#x4EF6;&#x5939;) test_imgs(&#x6D4B;&#x8BD5;&#x96C6;&#x56FE;&#x50CF;&#x6587;&#x4EF6;&#x5939;) SegNet_weight(&#x6A21;&#x578B;&#x6743;&#x91CD;&#x6587;&#x4EF6;&#x5939;) SegNet_test_result(&#x6D4B;&#x8BD5;&#x96C6;&#x7ED3;&#x679C;&#x6587;&#x4EF6;&#x5939;) SegNet.py &#x5B9E;&#x6218;&#x6B65;&#x9AA4;&#x8BF4;&#x660E; &#x8BED;&#x4E49;&#x5206;&#x5272;&#x5B9E;&#x6218;&#x8FD0;&#x884C;&#x8F83;&#x4E3A;&#x7B80;&#x5355;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x7684;&#x8F93;&#x5165;&#x7684;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x4E3A;&#x56FE;&#x50CF;&#xFF0C;&#x8F93;&#x5165;&#x7684;&#x6807;&#x7B7E;&#x6570;&#x636E;&#x4E5F;&#x662F;&#x56FE;&#x50CF;&#xFF0C;&#x9996;&#x5148;&#x8981;&#x5BF9;&#x8F93;&#x5165;&#x7684;&#x6807;&#x7B7E;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x7F16;&#x7801;&#xFF0C;&#x8F6C;&#x6362;&#x4E3A;&#x7C7B;&#x522B;&#x4FE1;&#x606F;&#xFF0C;&#x8981;&#x548C;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x7EF4;&#x5EA6;&#x76F8;&#x5339;&#x914D;&#xFF0C;&#x4ECE;(batch_size, height, width, 1)&#x8F6C;&#x6362;&#x4E3A;(batch_size, height, width, num_class + 1)&#xFF0C;&#x67D0;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x4E3A;&#x54EA;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#xFF0C;&#x5219;&#x5728;&#x8BE5;&#x901A;&#x9053;&#x4E0A;&#x7F6E;1&#xFF0C;&#x5176;&#x4F59;&#x901A;&#x9053;&#x7F6E;0&#x3002;&#x5373;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x5165;&#x5927;&#x5C0F;&#x4E3A;(batch_size, height, width, 3)&#xFF0C;&#x8F93;&#x51FA;&#x5927;&#x5C0F;&#x4E3A;(batch_size, height, width, num_class + 1)&#x3002; &#x8BBE;&#x8BA1;&#x635F;&#x5931;&#x51FD;&#x6570;&#xFF0C;&#x7B80;&#x5355;&#x60C5;&#x51B5;&#x8BBE;&#x7F6E;&#x4EA4;&#x53C9;&#x71B5;&#x635F;&#x5931;&#x51FD;&#x6570;&#x5373;&#x53EF;&#x8FBE;&#x5230;&#x8F83;&#x597D;&#x6548;&#x679C;&#x3002; &#x642D;&#x5EFA;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;&#x8BBE;&#x7F6E;&#x5408;&#x9002;&#x53C2;&#x6570;&#xFF0C;&#x8FDB;&#x884C;&#x8BAD;&#x7EC3;&#x3002; &#x9884;&#x6D4B;&#x65F6;&#xFF0C;&#x9700;&#x8981;&#x6839;&#x636E;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x51FA;&#x8FDB;&#x884C;&#x9006;&#x5411;&#x89E3;&#x7801;(&#x7F16;&#x7801;&#x7684;&#x53CD;&#x8FC7;&#x7A0B;)&#xFF0C;&#x5BFB;&#x627E;&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#xFF0C;&#x54EA;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x4E0A;&#x503C;&#x6700;&#x5927;&#x5219;&#x5F52;&#x4E3A;&#x54EA;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#xFF0C;&#x5373;&#x53EF;&#x5B8C;&#x6210;&#x5B9E;&#x6218;&#x7684;&#x8FC7;&#x7A0B;&#x3002; &#x5C0F;&#x6280;&#x5DE7; &#x8BBE;&#x7F6E;&#x7684;&#x56FE;&#x50CF;&#x7C7B;&#x522B;&#x6570;&#x4E3A;&#x5B9E;&#x9645;&#x7C7B;&#x522B;&#x6570;+1&#xFF0C;1&#x4EE3;&#x8868;&#x80CC;&#x666F;&#x7C7B;&#x522B;&#xFF0C;&#x6B64;&#x6570;&#x636E;&#x96C6;&#x4E3A;3&#x7C7B;&#xFF0C;&#x6700;&#x540E;&#x7684;&#x901A;&#x9053;&#x6570;&#x4E3A;4&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x9884;&#x6D4B;&#x4E00;&#x7C7B;&#x7269;&#x4F53;&#x3002;&#x5728;&#x901A;&#x9053;&#x65B9;&#x5411;&#x6C42;Softmax&#xFF0C;&#x5E76;&#x4E14;&#x6C42;&#x51FA;&#x6700;&#x5927;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;0&#x5219;&#x4EE3;&#x8868;&#x80CC;&#x666F;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;1&#x5219;&#x4EE3;&#x8868;&#x5706;&#x5F62;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;2&#x5219;&#x4EE3;&#x8868;&#x4E09;&#x89D2;&#x5F62;&#xFF0C;&#x7D22;&#x5F15;&#x4E3A;3&#x5219;&#x4EE3;&#x8868;&#x6B63;&#x65B9;&#x5F62;&#x3002; &#x6700;&#x5927;&#x6C60;&#x5316;&#x6536;&#x655B;&#x901F;&#x5EA6;&#x8F83;&#x6162;&#xFF0C;&#x56E0;&#x6B64;&#x6362;&#x6210;&#x4E0A;&#x91C7;&#x6837;&#xFF0C;&#x4E0D;&#x4F46;&#x53EF;&#x4EE5;&#x4F7F;&#x6A21;&#x578B;&#x66F4;&#x52A0;&#x7B80;&#x5355;&#xFF0C;&#x800C;&#x4E14;&#x53EF;&#x4EE5;&#x52A0;&#x5FEB;&#x7F51;&#x7EDC;&#x7684;&#x6536;&#x655B;&#x901F;&#x5EA6;&#x3002; &#x8BBE;&#x7F6E;&#x4E86;&#x6743;&#x91CD;&#x7684;&#x4FDD;&#x5B58;&#x65B9;&#x5F0F;&#xFF0C;&#x5B66;&#x4E60;&#x7387;&#x7684;&#x4E0B;&#x964D;&#x65B9;&#x5F0F;&#x548C;&#x65E9;&#x505C;&#x65B9;&#x5F0F;&#x3002; &#x4F7F;&#x7528;yield&#x5173;&#x952E;&#x5B57;&#xFF0C;&#x4EA7;&#x751F;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#xFF0C;&#x4E0D;&#x7528;&#x5C06;&#x6240;&#x6709;&#x7684;&#x6570;&#x636E;&#x90FD;&#x4FDD;&#x5B58;&#x4E0B;&#x6765;&#xFF0C;&#x5927;&#x5927;&#x8282;&#x7EA6;&#x5185;&#x5B58;&#x3002; &#x5176;&#x4E2D;&#x5C06;1000&#x4E2A;&#x6570;&#x636E;&#xFF0C;&#x5206;&#x6210;800&#x4E2A;&#x8BAD;&#x7EC3;&#x96C6;&#xFF0C;100&#x4E2A;&#x9A8C;&#x8BC1;&#x96C6;&#x548C;100&#x4E2A;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x81EA;&#x884C;&#x4FEE;&#x6539;&#x3002; &#x6CE8;&#x610F;&#x5176;&#x4E2D;&#x7684;&#x4E00;&#x4E9B;&#x7EF4;&#x5EA6;&#x53D8;&#x6362;&#x548C;numpy&#xFF0C;tensorflow&#x5E38;&#x7528;&#x64CD;&#x4F5C;&#xFF0C;&#x5426;&#x5219;&#x5728;&#x9605;&#x8BFB;&#x4EE3;&#x7801;&#x65F6;&#x53EF;&#x80FD;&#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x56F0;&#x96BE;&#x3002; SegNet&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;(&#x7F16;&#x7801;&#x7F51;&#x7EDC;)&#x7C7B;&#x4F3C;&#x4E8E;VGG&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x90E8;&#x5206;&#x5185;&#x5BB9;&#xFF0C;&#x9009;&#x62E9;&#x5176;&#x4ED6;&#x7684;&#x7F51;&#x7EDC;&#x8FDB;&#x884C;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#xFF0C;&#x6BD4;&#x8F83;&#x4E0D;&#x540C;&#x7F51;&#x7EDC;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x8FD0;&#x884C;&#x901F;&#x5EA6;&#xFF0C;&#x6700;&#x7EC8;&#x7ED3;&#x679C;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x5F02;&#x3002; &#x56FE;&#x50CF;&#x8F93;&#x5165;&#x53EF;&#x4EE5;&#x5148;&#x5C06;&#x5176;&#x5F52;&#x4E00;&#x5316;&#x5230;0-1&#x4E4B;&#x95F4;&#x6216;&#x8005;-1-1&#x4E4B;&#x95F4;&#xFF0C;&#x56E0;&#x4E3A;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x4E00;&#x822C;&#x90FD;&#x6BD4;&#x8F83;&#x5C0F;&#xFF0C;&#x6240;&#x4EE5;&#x5F52;&#x4E00;&#x5316;&#x540E;&#x8BA1;&#x7B97;&#x65B9;&#x4FBF;&#xFF0C;&#x6536;&#x655B;&#x8F83;&#x5FEB;&#x3002; &#x5B9E;&#x9645;&#x7684;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x5E38;&#x5E38;&#x8FD8;&#x9700;&#x8981;&#x5BF9;&#x6570;&#x636E;&#x96C6;&#x8FDB;&#x884C;&#x5927;&#x5C0F;&#x8C03;&#x6574;&#x548C;&#x589E;&#x5F3A;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x4E3A;&#x4E86;&#x7B80;&#x5355;&#x8D77;&#x89C1;&#xFF0C;&#x6CA1;&#x6709;&#x8FDB;&#x884C;&#x590D;&#x6742;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5E94;&#x7528;&#x4E2D;&#x8981;&#x8BB0;&#x5F97;&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x7684;&#x9700;&#x8981;&#xFF0C;&#x5BF9;&#x56FE;&#x50CF;&#x8FDB;&#x884C;resize&#x6216;&#x8005;padding&#xFF0C;&#x7136;&#x540E;&#x65CB;&#x8F6C;&#xFF0C;&#x5BF9;&#x6BD4;&#x5EA6;&#x589E;&#x5F3A;&#xFF0C;&#x4EFF;&#x5C04;&#x8FD0;&#x7B97;&#x7B49;&#x7B49;&#x64CD;&#x4F5C;&#xFF0C;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x9C81;&#x68D2;&#x6027;&#xFF0C;&#x5E76;&#x4E14;&#x5B9E;&#x9645;&#x4E2D;&#x7684;&#x56FE;&#x50CF;&#x4E0D;&#x4E00;&#x5B9A;&#x6309;&#x7167;&#x987A;&#x5E8F;&#x547D;&#x540D;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x5E94;&#x7528;&#x4E2D;&#x4E5F;&#x8981;&#x6CE8;&#x610F;&#x56FE;&#x50CF;&#x8BFB;&#x53D6;&#x7684;&#x6587;&#x4EF6;&#x540D;&#x3002; &#x5B8C;&#x6574;&#x5B9E;&#x6218;&#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176import osimport numpy as npimport cv2 as cvimport tensorflow as tfimport tensorflow.keras as kerasdef indices_maxpool(val, index): input_size = index.shape output_size = [x * 2 if i == 0 or i == 1 else x for i, x in enumerate(input_size[1:])] output = tf.reshape(tf.scatter_nd(tf.reshape(index, (-1, 1)), tf.reshape(val, (-1, )), (batch_size * np.prod(output_size), )), [-1] + output_size) return outputclass Convs(keras.Model): def __init__(self, filters, times): super(Convs, self).__init__() self.blocks = keras.Sequential() for i in range(times): self.blocks.add(keras.layers.Conv2D(filters, (3, 3), (1, 1), padding=&apos;same&apos;)) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU()) def call(self, inputs, training=None, mask=None): output = self.blocks(inputs) return outputclass Small_SegNet(keras.Model): def __init__(self): super(Small_SegNet, self).__init__() self.encoder1 = keras.Sequential([Convs(32, 2), keras.layers.MaxPool2D()], name=&apos;Encoder1&apos;) self.encoder2 = keras.Sequential([Convs(64, 2), keras.layers.MaxPool2D()], name=&apos;Encoder2&apos;) self.encoder3 = keras.Sequential([Convs(128, 2), keras.layers.MaxPool2D()], name=&apos;Encoder3&apos;) self.encoder4 = keras.Sequential([Convs(256, 2), keras.layers.MaxPool2D()], name=&apos;Encoder4&apos;) self.decoder1 = keras.Sequential([Convs(32, 2), keras.layers.UpSampling2D()], name=&apos;Decoder1&apos;) self.decoder2 = keras.Sequential([Convs(64, 2), keras.layers.UpSampling2D()], name=&apos;Decoder2&apos;) self.decoder3 = keras.Sequential([Convs(128, 2), keras.layers.UpSampling2D()], name=&apos;Decoder3&apos;) self.decoder4 = keras.Sequential([Convs(256, 2), keras.layers.UpSampling2D()], name=&apos;Decoder4&apos;) self.conv = keras.layers.Conv2D(num_class, (3, 3), (1, 1), padding=&apos;same&apos;, name=&apos;Conv&apos;) self.softmax = keras.layers.Softmax(name=&apos;Softmax&apos;) def call(self, inputs, training=None, mask=None): encoder1 = self.encoder1(inputs) encoder2 = self.encoder2(encoder1) encoder3 = self.encoder3(encoder2) encoder4 = self.encoder4(encoder3) decoder4 = self.decoder4(encoder4) decoder3 = self.decoder3(decoder4) decoder2 = self.decoder2(decoder3) decoder1 = self.decoder1(decoder2) conv = self.conv(decoder1) output = self.softmax(conv) return outputdef generate_arrays_from_file(train_data, batch_size): # &#x83B7;&#x53D6;&#x603B;&#x957F;&#x5EA6; n = len(train_data) i = 0 while 1: X_train = [] Y_train = [] # &#x83B7;&#x53D6;&#x4E00;&#x4E2A;batch_size&#x5927;&#x5C0F;&#x7684;&#x6570;&#x636E; for _ in range(batch_size): if i == 0: np.random.shuffle(train_data) # &#x4ECE;&#x6587;&#x4EF6;&#x4E2D;&#x8BFB;&#x53D6;&#x56FE;&#x50CF; img = cv.imread(imgs_path + &apos;\\&apos; + str(train_data[i]) + &apos;.jpg&apos;) img = img / 127.5 - 1 X_train.append(img) # &#x4ECE;&#x6587;&#x4EF6;&#x4E2D;&#x8BFB;&#x53D6;&#x56FE;&#x50CF; img = cv.imread(mask_path + &apos;\\&apos; + str(train_data[i]) + &apos;.png&apos;) seg_labels = np.zeros((img_size[0], img_size[1], num_class)) for c in range(num_class): seg_labels[:, :, c] = (img[:, :, 0] == c).astype(int) Y_train.append(seg_labels) # &#x8BFB;&#x5B8C;&#x4E00;&#x4E2A;&#x5468;&#x671F;&#x540E;&#x91CD;&#x65B0;&#x5F00;&#x59CB; i = (i + 1) % n yield tf.constant(X_train), tf.constant(Y_train)if __name__ == &apos;__main__&apos;: # &#x5305;&#x62EC;&#x80CC;&#x666F; num_class = 4 train_data = list(range(800)) validation_data = list(range(800, 900)) test_data = range(900, 1000) epochs = 50 batch_size = 16 tf.random.set_seed(22) img_size = (128, 128) colors = [[0, 0, 0], [0, 0, 128], [0, 128, 0], [128, 0, 0]] mask_path = r&apos;.\shape\train_mask&apos; imgs_path = r&apos;.\shape\train_imgs&apos; test_path = r&apos;.\shape\test_imgs&apos; save_path = r&apos;.\SegNet_test_result&apos; weight_path = r&apos;.\SegNet_weight&apos; try: os.mkdir(save_path) except FileExistsError: print(save_path + &apos;has been exist&apos;) try: os.mkdir(weight_path) except FileExistsError: print(weight_path + &apos;has been exist&apos;) model = Small_SegNet() model.build(input_shape=(None, img_size[0], img_size[1], 3)) model.summary() optimizor = keras.optimizers.Adam(lr=1e-3) lossor = keras.losses.BinaryCrossentropy() model.compile(optimizer=optimizor, loss=lossor, metrics=[&apos;accuracy&apos;]) # &#x4FDD;&#x5B58;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;3&#x4E16;&#x4EE3;&#x4FDD;&#x5B58;&#x4E00;&#x6B21; checkpoint_period = keras.callbacks.ModelCheckpoint( weight_path + &apos;\\&apos; + &apos;ep{epoch:03d}-loss{loss:.3f}-val_loss{val_loss:.3f}.h5&apos;, monitor=&apos;val_loss&apos;, save_weights_only=True, save_best_only=True, period=3 ) # &#x5B66;&#x4E60;&#x7387;&#x4E0B;&#x964D;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;val_loss3&#x6B21;&#x4E0D;&#x4E0B;&#x964D;&#x5C31;&#x4E0B;&#x964D;&#x5B66;&#x4E60;&#x7387;&#x7EE7;&#x7EED;&#x8BAD;&#x7EC3; reduce_lr = keras.callbacks.ReduceLROnPlateau( monitor=&apos;val_loss&apos;, factor=0.5, patience=3, verbose=1 ) # &#x662F;&#x5426;&#x9700;&#x8981;&#x65E9;&#x505C;&#xFF0C;&#x5F53;val_loss&#x4E00;&#x76F4;&#x4E0D;&#x4E0B;&#x964D;&#x7684;&#x65F6;&#x5019;&#x610F;&#x5473;&#x7740;&#x6A21;&#x578B;&#x57FA;&#x672C;&#x8BAD;&#x7EC3;&#x5B8C;&#x6BD5;&#xFF0C;&#x53EF;&#x4EE5;&#x505C;&#x6B62; early_stopping = keras.callbacks.EarlyStopping( monitor=&apos;val_loss&apos;, min_delta=0, patience=10, verbose=1 ) model.fit_generator(generate_arrays_from_file(train_data, batch_size), steps_per_epoch=max(1, len(train_data) // batch_size), validation_data=generate_arrays_from_file(validation_data, batch_size), validation_steps=max(1, len(validation_data) // batch_size), epochs=epochs, callbacks=[checkpoint_period, reduce_lr, early_stopping]) for name in test_data: test_img_path = test_path + &apos;\\&apos; + str(name) + &apos;.jpg&apos; save_img_path = save_path + &apos;\\&apos; + str(name) + &apos;.png&apos; test_img = cv.imread(test_img_path) test_img = tf.constant([test_img / 127.5 - 1]) test_mask = model.predict(test_img) test_mask = np.reshape(test_mask, (img_size[0], img_size[1], num_class)) test_mask = np.argmax(test_mask, axis=-1) seg_img = np.zeros((img_size[0], img_size[1], 3)) for c in range(num_class): seg_img[:, :, 0] += ((test_mask == c) * (colors[c][0])) seg_img[:, :, 1] += ((test_mask == c) * (colors[c][1])) seg_img[:, :, 2] += ((test_mask == c) * (colors[c][2])) seg_img = seg_img.astype(np.uint8) cv.imwrite(save_img_path, seg_img) &#x6A21;&#x578B;&#x8FD0;&#x884C;&#x7ED3;&#x679C; SegNet&#x5C0F;&#x7ED3;&#x2003;&#x2003;SegNet&#x662F;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x7684;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x7F51;&#x7EDC;&#xFF0C;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;SegNet&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x53EA;&#x6709;29M&#xFF0C;&#x867D;&#x7136;&#x73B0;&#x5728;SegNet&#x7F51;&#x7EDC;&#x4E0D;&#x662F;&#x6700;&#x597D;&#x7684;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x7F51;&#x7EDC;&#xFF0C;&#x4F46;&#x662F;&#x5176;&#x7F16;&#x7801;&#x89E3;&#x7801;&#x7ED3;&#x6784;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x5BF9;&#x540E;&#x9762;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#x7684;&#x53D1;&#x5C55;&#x6709;&#x91CD;&#x8981;&#x7684;&#x5F71;&#x54CD;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>语义分割网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[语义分割数据集]]></title>
    <url>%2F2020%2F04%2F15%2FSemantic_segmentation%20Dataset%2F</url>
    <content type="text"><![CDATA[Data Set &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;&#x8BED;&#x4E49;&#x5206;&#x5272;:&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x7684;&#x57FA;&#x7840;&#x4EFB;&#x52A1;&#xFF0C;&#x5728;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x4E2D;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5C06;&#x89C6;&#x89C9;&#x8F93;&#x5165;&#x5206;&#x4E3A;&#x4E0D;&#x540C;&#x7684;&#x53EF;&#x89E3;&#x91CA;&#x7C7B;&#x522B;&#xFF0C;&#x548C;&#x805A;&#x7C7B;&#x5206;&#x5272;&#x65B9;&#x6CD5;&#x4E0D;&#x540C;&#x70B9;&#x5728;&#x4E8E;&#x6B64;&#xFF0C;&#x5176;&#x7C7B;&#x522B;&#x5728;&#x771F;&#x5B9E;&#x4E16;&#x754C;&#x4E2D;&#x662F;&#x6709;&#x610F;&#x4E49;&#x7684;&#xFF0C;&#x800C;&#x805A;&#x7C7B;&#x5206;&#x5272;&#x662F;&#x53EF;&#x4EE5;&#x5C06;&#x7269;&#x4F53;&#x5206;&#x6210;&#x82E5;&#x5E72;&#x90E8;&#x5206;&#xFF0C;&#x4F46;&#x662F;&#x6BCF;&#x4E00;&#x90E8;&#x5206;&#x4E0D;&#x4E00;&#x5B9A;&#x662F;&#x6709;&#x8BED;&#x4E49;&#x7684;&#xFF0C;&#x5728;&#x81EA;&#x52A8;&#x9A7E;&#x9A76;&#xFF0C;&#x56FE;&#x50CF;&#x641C;&#x7D22;&#x7B49;&#x7B49;&#x9886;&#x57DF;&#x90FD;&#x662F;&#x975E;&#x5E38;&#x91CD;&#x8981;&#x7684;&#x3002; &#x6570;&#x636E;&#x96C6;&#x4EE5;&#x53CA;IOU&#x4ECB;&#x7ECD;&#x6570;&#x636E;&#x96C6;&#xFF1A;&#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#x6A21;&#x578B;&#x8C03;&#x8BD5;&#x7684;&#x65B9;&#x4FBF;&#xFF0C;&#x6211;&#x7684;&#x535A;&#x5BA2;&#x4E2D;&#x4ECB;&#x7ECD;&#x7684;&#x6570;&#x636E;&#x96C6;&#x662F;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x7684;Shape&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x53EA;&#x6709;1000&#x4E2A;&#x8BAD;&#x7EC3;&#x6837;&#x672C;&#xFF0C;&#x4E3A;&#x4E86;&#x52A0;&#x5FEB;&#x8BAD;&#x7EC3;&#x901F;&#x5EA6;&#xFF0C;&#x6570;&#x636E;&#x96C6;&#x7684;&#x5927;&#x5C0F;&#x6211;&#x4E5F;&#x8C03;&#x6574;&#x4E3A;128x128&#xFF0C;&#x8FD9;&#x4E2A;&#x6570;&#x636E;&#x96C6;&#x53EA;&#x6709;&#x4E09;&#x7C7B;&#x7269;&#x4F53;&#xFF0C;&#x5206;&#x522B;&#x662F;&#x5706;&#x5F62;&#xFF0C;&#x4E09;&#x89D2;&#x5F62;&#x548C;&#x6B63;&#x65B9;&#x5F62;&#xFF0C;&#x56FE;&#x50CF;&#x6570;&#x636E;&#x4E3A;jpg&#x6587;&#x4EF6;&#xFF0C;&#x63A9;&#x6A21;&#x6570;&#x636E;&#x4E3A;png&#x6587;&#x4EF6;&#x3002;mask&#x56FE;&#x50CF;&#xFF1A;mask&#x56FE;&#x50CF;&#x7ED9;&#x521D;&#x5B66;&#x8005;&#x7B2C;&#x4E00;&#x773C;&#x770B;&#x4E0A;&#x53BB;&#x662F;&#x61F5;&#x903C;&#x7684;&#xFF0C;&#x5F53;&#x7136;&#x5305;&#x62EC;&#x6211;&#x4E5F;&#x662F;&#xFF0C;&#x8FD9;&#x4E0D;&#x662F;&#x5168;&#x9ED1;&#x7684;&#x56FE;&#x50CF;&#x5417;&#xFF1F;&#x8FD9;&#x6709;&#x4F55;&#x610F;&#x4E49;&#x5462;&#xFF1F;&#x63A9;&#x6A21;&#x56FE;&#x50CF;&#x7684;&#x4FDD;&#x5B58;&#x662F;&#x4F7F;&#x7528;8&#x4F4D;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#xFF0C;&#x56E0;&#x6B64;&#x5B83;&#x7684;&#x503C;&#x4E3A;0-255&#xFF0C;&#x79F0;&#x4E4B;&#x4E3A;&#x7070;&#x5EA6;&#x503C;&#x3002;&#x6BCF;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#x7528;&#x4E00;&#x4E2A;&#x6570;&#x66FF;&#x4EE3;&#xFF0C;&#x4E3A;&#x4E86;&#x4F7F;&#x7528;&#x65B9;&#x4FBF;&#x5219;&#x6309;&#x987A;&#x5E8F;&#x4F7F;&#x7528;1&#xFF0C;2&#xFF0C;3&#x6765;&#x5206;&#x522B;&#x4EE3;&#x8868;&#x5706;&#x5F62;&#xFF0C;&#x4E09;&#x89D2;&#x5F62;&#x548C;&#x6B63;&#x65B9;&#x5F62;&#xFF0C;&#x5176;&#x4E2D;&#x80CC;&#x666F;&#x7528;0&#x8868;&#x793A;&#x3002;&#x5728;&#x56FE;&#x50CF;&#x4E2D;&#xFF0C;0&#x4E3A;&#x9ED1;&#x8272;&#xFF0C;255&#x4E3A;&#x767D;&#x8272;&#xFF0C;&#x7070;&#x5EA6;&#x503C;&#x8D8A;&#x63A5;&#x8FD1;0&#xFF0C;&#x5219;&#x56FE;&#x50CF;&#x8D8A;&#x9ED1;&#xFF0C;&#x8D8A;&#x63A5;&#x8FD1;255&#x5219;&#x56FE;&#x50CF;&#x8D8A;&#x767D;&#x3002;&#x56E0;&#x6B64;&#x5728;&#x8FD9;&#x4E2A;&#x4E09;&#x7C7B;&#x95EE;&#x9898;&#x4E2D;&#xFF0C;&#x56FE;&#x50CF;&#x7070;&#x5EA6;&#x6700;&#x5927;&#x4E3A;3&#xFF0C;&#x5F53;&#x7136;&#x770B;&#x8D77;&#x6765;&#x662F;&#x9ED1;&#x8272;&#x7684;&#x3002;&#x4E0D;&#x4FE1;&#x53EF;&#x4EE5;&#x5BF9;mask&#x4E58;85&#x5219;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x989C;&#x8272;&#x3002;IOU(Intersection Over Union&#xFF0C;&#x4EA4;&#x5E76;&#x6BD4;)&#xFF1A;&#x7528;&#x4E8E;&#x8BC4;&#x4F30;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x7B97;&#x6CD5;&#x6027;&#x80FD;&#x7684;&#x6307;&#x6807;&#x662F;&#x5E73;&#x5747;IOU&#xFF0C;&#x4EA4;&#x5E76;&#x6BD4;&#x4E5F;&#x975E;&#x5E38;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x7B97;&#x6CD5;&#x7684;&#x7ED3;&#x679C;&#x4E0E;&#x771F;&#x5B9E;&#x7269;&#x4F53;&#x8FDB;&#x884C;&#x4EA4;&#x8FD0;&#x7B97;&#x7684;&#x7ED3;&#x679C;&#x9664;&#x4EE5;&#x8FDB;&#x884C;&#x5E76;&#x8FD0;&#x7B97;&#x7684;&#x7ED3;&#x679C;&#x3002;&#x901A;&#x8FC7;&#x4E0B;&#x56FE;&#x53EF;&#x4EE5;&#x76F4;&#x89C2;&#x7684;&#x770B;&#x51FA;IOU&#x7684;&#x8BA1;&#x7B97;&#x65B9;&#x6CD5;&#x3002; &#x4E00;&#x4E9B;&#x8BF4;&#x660E; &#x5728;&#x5B66;&#x4E60;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x53EF;&#x80FD;&#x4F1A;&#x9047;&#x5230;&#x4E00;&#x4E9B;&#x4EE3;&#x7801;&#x4E0A;&#x7684;&#x56F0;&#x96BE;&#xFF0C;&#x5982;tensorflow&#xFF0C;numpy&#xFF0C;opencv&#x7684;&#x7528;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x6211;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x6846;&#x67B6;&#x548C;Python&#x5E38;&#x7528;&#x5E93;&#x76F8;&#x5173;&#x6587;&#x7AE0;&#xFF0C;&#x91CC;&#x9762;&#x4F1A;&#x6709;&#x4E00;&#x4E9B;&#x7B80;&#x5355;&#x7684;&#x4ECB;&#x7ECD;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x5B66;&#x4E60;&#xFF0C;&#x6700;&#x597D;&#x662F;&#x624B;&#x52A8;&#x6572;&#x4E00;&#x6572;&#xFF0C;&#x770B;&#x4E00;&#x770B;&#x3002; &#x56E0;&#x4E3A;&#x8FD9;&#x4E2A;&#x535A;&#x5BA2;&#x662F;&#x5BF9;&#x5B66;&#x4E60;&#x7684;&#x4E00;&#x4E9B;&#x603B;&#x7ED3;&#x548C;&#x8BB0;&#x5F55;&#xFF0C;&#x610F;&#x5728;&#x548C;&#x5B66;&#x4E60;&#x8005;&#x63A2;&#x8BA8;&#x548C;&#x4EA4;&#x6D41;&#xFF0C;&#x5E76;&#x4E14;&#x7ED9;&#x51C6;&#x5907;&#x5165;&#x95E8;&#x7684;&#x540C;&#x5B66;&#x4E00;&#x4E9B;&#x624B;&#x628A;&#x624B;&#x7684;&#x6559;&#x5B66;&#xFF0C;&#x56E0;&#x6B64;&#x5173;&#x4E8E;&#x56FE;&#x50CF;&#x5206;&#x5272;&#x7684;&#x7B97;&#x6CD5;&#x53C2;&#x6570;&#x8BBE;&#x8BA1;&#xFF0C;&#x6211;&#x90FD;&#x662F;&#x81EA;&#x5DF1;&#x5C1D;&#x8BD5;&#x7684;&#xFF0C;&#x4E0D;&#x662F;&#x9488;&#x5BF9;&#x4E8E;&#x8FD9;&#x4E2A;&#x6570;&#x636E;&#x96C6;&#x6700;&#x4F18;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x5927;&#x5BB6;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x7684;&#x5B9E;&#x9645;&#x9700;&#x8981;&#x4FEE;&#x6539;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x3002; &#x5B9E;&#x9645;&#x7684;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x5E38;&#x5E38;&#x8FD8;&#x9700;&#x8981;&#x5BF9;&#x6570;&#x636E;&#x96C6;&#x8FDB;&#x884C;&#x5927;&#x5C0F;&#x8C03;&#x6574;&#x548C;&#x589E;&#x5F3A;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x4E3A;&#x4E86;&#x7B80;&#x5355;&#x8D77;&#x89C1;&#xFF0C;&#x6CA1;&#x6709;&#x8FDB;&#x884C;&#x590D;&#x6742;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5E94;&#x7528;&#x4E2D;&#x8981;&#x8BB0;&#x5F97;&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x7684;&#x9700;&#x8981;&#xFF0C;&#x5BF9;&#x56FE;&#x50CF;&#x8FDB;&#x884C;resize&#x6216;&#x8005;padding&#xFF0C;&#x7136;&#x540E;&#x65CB;&#x8F6C;&#xFF0C;&#x5BF9;&#x6BD4;&#x5EA6;&#x589E;&#x5F3A;&#xFF0C;&#x4EFF;&#x5C04;&#x8FD0;&#x7B97;&#x7B49;&#x7B49;&#x64CD;&#x4F5C;&#xFF0C;&#x589E;&#x52A0;&#x6A21;&#x578B;&#x7684;&#x9C81;&#x68D2;&#x6027;&#xFF0C;&#x5E76;&#x4E14;&#x5B9E;&#x9645;&#x4E2D;&#x7684;&#x56FE;&#x50CF;&#x4E0D;&#x4E00;&#x5B9A;&#x6309;&#x7167;&#x987A;&#x5E8F;&#x547D;&#x540D;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x5E94;&#x7528;&#x4E2D;&#x4E5F;&#x8981;&#x6CE8;&#x610F;&#x56FE;&#x50CF;&#x8BFB;&#x53D6;&#x7684;&#x6587;&#x4EF6;&#x540D;&#x3002; &#x4E3A;&#x4E86;&#x8BA9;&#x5B66;&#x4E60;&#x8005;&#x770B;&#x7684;&#x65B9;&#x4FBF;&#x548C;&#x6E05;&#x6670;&#xFF0C;&#x6211;&#x6CA1;&#x6709;&#x4F7F;&#x7528;&#x591A;&#x4E2A;&#x6587;&#x4EF6;&#x5BF9;&#x7A0B;&#x5E8F;&#x8FDB;&#x884C;&#x5C01;&#x88C5;&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x5728;&#x521A;&#x5F00;&#x59CB;&#x5B66;&#x4E60;&#x6A21;&#x578B;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x67E5;&#x770B;GitHub&#x4EE3;&#x7801;&#xFF0C;&#x4E00;&#x4E2A;&#x6A21;&#x578B;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x597D;&#x51E0;&#x4E2A;&#x6587;&#x4EF6;&#x5939;&#xFF0C;&#x6BCF;&#x4E2A;&#x6587;&#x4EF6;&#x5939;&#x91CC;&#x9762;&#x53C8;&#x6709;&#x5F88;&#x591A;&#x7684;&#x4EE3;&#x7801;&#x6587;&#x4EF6;&#xFF0C;&#x5176;&#x4E2D;&#x5F88;&#x591A;&#x6587;&#x4EF6;&#x4E92;&#x76F8;&#x8C03;&#x7528;&#x3002;&#x867D;&#x7136;&#x8FD9;&#x6837;&#x7684;&#x5DE5;&#x7A0B;&#x9879;&#x76EE;&#x662F;&#x975E;&#x5E38;&#x597D;&#x7BA1;&#x7406;&#x548C;&#x8FD0;&#x884C;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x7ED9;&#x521D;&#x5B66;&#x8005;&#x4E00;&#x79CD;&#x4E08;&#x4E8C;&#x548C;&#x5C1A;&#x6478;&#x4E0D;&#x7740;&#x5934;&#x8111;&#x7684;&#x611F;&#x89C9;&#xFF0C;&#x5BF9;&#x6B64;&#x6211;&#x6DF1;&#x6709;&#x4F53;&#x4F1A;&#x3002;&#x6240;&#x4EE5;&#x6211;&#x5C31;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;.py&#x6587;&#x4EF6;&#x6765;&#x5C01;&#x88C5;&#xFF0C;&#x56E0;&#x6B64;&#x4EE3;&#x7801;&#x53EF;&#x80FD;&#x4F1A;&#x6709;&#x51E0;&#x767E;&#x884C;&#xFF0C;&#x4F46;&#x662F;&#x5176;&#x4E2D;&#x7684;&#x5404;&#x4E2A;&#x51FD;&#x6570;&#x548C;&#x7C7B;&#x90FD;&#x6709;&#x81EA;&#x5DF1;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x53EF;&#x4EE5;&#x4FDD;&#x8BC1;&#x5B66;&#x4E60;&#x8005;&#x4E0D;&#x4F1A;&#x88AB;&#x7EB8;&#x8001;&#x864E;&#x5413;&#x4F4F;&#x3002; &#x5728;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x5B66;&#x4E60;&#x4E2D;&#xFF0C;&#x6211;&#x4F1A;&#x5217;&#x4E3E;&#x51FA;&#x4E00;&#x4E9B;&#x7ECF;&#x5178;&#x7684;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x6A21;&#x578B;&#xFF0C;&#x56E0;&#x4E3A;&#x6A21;&#x578B;&#x592A;&#x591A;&#xFF0C;&#x5E76;&#x4E14;&#x4ECD;&#x5728;&#x4E0D;&#x65AD;&#x7684;&#x66F4;&#x65B0;&#x8FDB;&#x6B65;&#x4E4B;&#x4E2D;&#xFF0C;&#x6240;&#x4EE5;&#x5927;&#x5BB6;&#x53EF;&#x4EE5;&#x8054;&#x7CFB;&#x6211;&#xFF0C;&#x548C;&#x6211;&#x8FDB;&#x884C;&#x6C9F;&#x901A;&#x548C;&#x4EA4;&#x6D41;&#xFF0C;&#x6216;&#x8005;&#x63A8;&#x8350;&#x7ED9;&#x6211;&#x4E00;&#x4E9B;&#x4F18;&#x79C0;&#x7684;&#x6A21;&#x578B;&#x3002; &#x5173;&#x4E8E;&#x95EE;&#x9898;&#x7684;&#x4EA4;&#x6D41;&#xFF0C;&#x56FE;&#x50CF;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x9700;&#x8981;&#x7684;&#x540C;&#x5B66;&#x53EF;&#x4EE5;&#x5230;&#x4E3B;&#x9875;&#x67E5;&#x770B;&#x6211;&#x7684;QQ&#x6216;&#x8005;&#x90AE;&#x7BB1;&#xFF0C;&#x6211;&#x4F1A;&#x975E;&#x5E38;&#x8363;&#x5E78;&#x7684;&#x63D0;&#x4F9B;&#x529B;&#x6240;&#x80FD;&#x53CA;&#x7684;&#x5E2E;&#x52A9;&#xFF0C;&#x5C0F;&#x4F19;&#x4F34;&#x52A0;&#x597D;&#x53CB;&#x7684;&#x65F6;&#x5019;&#x4E00;&#x5B9A;&#x8981;&#x8BB0;&#x5F97;&#x5907;&#x6CE8;&#xFF0C;&#x4E0D;&#x7136;&#x6211;&#x53EF;&#x80FD;&#x4F1A;&#x5FFD;&#x89C6;&#x4E00;&#x4E9B;&#x7C97;&#x5FC3;&#x7684;&#x5C0F;&#x4F19;&#x4F34;&#x3002; &#x5C0F;&#x7ED3;&#x2003;&#x2003;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x7684;&#x57FA;&#x7840;&#x4EFB;&#x52A1;&#xFF0C;&#x4E5F;&#x662F;&#x975E;&#x5E38;&#x91CD;&#x8981;&#x7684;&#x4EFB;&#x52A1;&#x4E4B;&#x4E00;&#xFF0C;&#x81EA;&#x4ECE;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7684;&#x65F6;&#x4EE3;&#x5230;&#x6765;&#xFF0C;&#x5404;&#x79CD;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x767E;&#x82B1;&#x9F50;&#x653E;&#xFF0C;&#x5F88;&#x96BE;&#x8BF4;&#x51FA;&#x6700;&#x597D;&#x7684;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x65B9;&#x6CD5;&#xFF0C;&#x53EF;&#x80FD;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x9002;&#x7528;&#x4E8E;&#x5F88;&#x591A;&#x6570;&#x636E;&#xFF0C;&#x4F46;&#x4E5F;&#x4E0D;&#x80FD;&#x8BF4;&#x660E;&#x67D0;&#x4E00;&#x4E2A;&#x7B97;&#x6CD5;&#x4E00;&#x5B9A;&#x4F18;&#x4E8E;&#x53E6;&#x4E00;&#x4E2A;&#x7B97;&#x6CD5;&#xFF0C;&#x6211;&#x4EEC;&#x8981;&#x505A;&#x7684;&#x5C31;&#x662F;&#x5C3D;&#x53EF;&#x80FD;&#x591A;&#x7684;&#x5B66;&#x4E60;&#x5404;&#x79CD;&#x5404;&#x6837;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x6A21;&#x578B;&#xFF0C;&#x7136;&#x540E;&#x5438;&#x53D6;&#x8FD9;&#x4E9B;&#x6A21;&#x578B;&#x6210;&#x529F;&#x7684;&#x539F;&#x56E0;&#xFF0C;&#x6295;&#x5165;&#x5230;&#x81EA;&#x5DF1;&#x7684;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x4E4B;&#x4E2D;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>语义分割网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[GhostNet]]></title>
    <url>%2F2020%2F04%2F08%2Ffeature_extraction%20GhostNet%2F</url>
    <content type="text"><![CDATA[GhostNet &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;GhostNet:&#x6765;&#x81EA;&#x534E;&#x4E3A;&#x8BFA;&#x4E9A;&#x65B9;&#x821F;&#x5B9E;&#x9A8C;&#x5BA4;&#xFF0C;&#x4E8E;2020&#x5E74;&#x88AB;CVPR&#x63A5;&#x53D7;&#xFF0C;&#x501F;&#x9274;&#x4E86;&#x5927;&#x91CF;&#x4F18;&#x79C0;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x7279;&#x70B9;&#xFF0C;&#x63D0;&#x51FA;&#x4E86;&#x4E00;&#x79CD;&#x65B0;&#x578B;&#x7684;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x67B6;&#x6784;&#x3002; GhostNet&#x7279;&#x70B9;&#x2003;&#x2003;&#x5728;Ghost Module&#x4E2D;&#x5F15;&#x5165;&#x74F6;&#x9888;&#x7ED3;&#x6784;&#x548C;GroupConv&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x2003;&#x2003;&#x5728;Ghost Bottleneck&#x4E2D;&#x5F15;&#x5165;DepthwiseConv&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x548C;Squeeze-and-Excitation&#x6A21;&#x5757; Group Convolution&#x2003;&#x2003;Group Convolution(&#x5206;&#x7EC4;&#x5377;&#x79EF;)&#xFF1A;&#x4F20;&#x7EDF;&#x5377;&#x79EF;&#x662F;&#x91C7;&#x7528;&#x4E00;&#x79CD;&#x5377;&#x79EF;&#x5168;&#x8FDE;&#x63A5;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x7279;&#x5F81;&#x56FE;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x90FD;&#x7ED3;&#x5408;&#x4E86;&#x56FE;&#x50CF;&#x4E2D;&#x6240;&#x6709;&#x901A;&#x9053;&#x7684;&#x4FE1;&#x606F;&#x3002;&#x800C;&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x7279;&#x5F81;&#x56FE;&#x50CF;&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x53EA;&#x5229;&#x7528;&#x5230;&#x4E00;&#x90E8;&#x5206;&#x539F;&#x59CB;&#x56FE;&#x50CF;&#x7684;&#x901A;&#x9053;&#x3002;&#x2003;&#x2003;&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;5x5&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(256x5x5+1)=1638656&#xFF0C;&#x800C;&#x5206;&#x6210;32&#x7EC4;&#x7684;&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(8*5x5+1)=51456&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;32&#x500D;&#xFF0C;&#x5F53;&#x7EC4;&#x6570;&#x53D8;&#x6210;&#x901A;&#x9053;&#x6570;&#x65F6;&#xFF0C;&#x5219;&#x7C7B;&#x4F3C;&#x4E8E;Depthwise Convolution&#x6DF1;&#x5EA6;&#x5377;&#x79EF; Depthwise Convolution&#x2003;&#x2003;Depthwise Convolution(&#x6DF1;&#x5EA6;&#x5377;&#x79EF;)&#xFF1A;&#x5728;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x4E0A;&#x5355;&#x72EC;&#x8FDB;&#x884C;&#x5377;&#x79EF;&#x2003;&#x2003;&#x53C2;&#x6570;depth_multiplier&#x9ED8;&#x8BA4;&#x4E3A;1&#xFF0C;&#x4EE3;&#x8868;&#x6BCF;&#x4E2A;&#x901A;&#x9053;&#x6570;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x5355;&#x72EC;&#x5377;&#x79EF;&#xFF0C;&#x8F93;&#x51FA;&#x7684;&#x901A;&#x9053;&#x6570;&#x548C;&#x8F93;&#x5165;&#x901A;&#x9053;&#x6570;&#x76F8;&#x7B49;&#xFF0C;&#x8BBE;&#x7F6E;depth_multiplier=n&#xFF0C;&#x5219;&#x4EE3;&#x8868;&#x6BCF;&#x4E2A;&#x901A;&#x9053;&#x6570;&#x8FDB;&#x884C;n&#x6B21;&#x5355;&#x72EC;&#x5377;&#x79EF;&#xFF0C;&#x8F93;&#x51FA;&#x901A;&#x9053;&#x6570;&#x662F;&#x8F93;&#x5165;&#x901A;&#x9053;&#x6570;&#x7684;n&#x500D;&#x3002;&#x2003;&#x2003;&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;**&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;8x8x1024&#x7684;&#x7279;&#x5F81;&#x56FE;&#xFF0C;&#x7ECF;&#x8FC7;5x5&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;8x8x1024&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;1024x(1024x5x5+1)=26215424&#xFF0C;&#x800C;&#x6DF1;&#x5EA6;&#x5377;&#x79EF;&#x53C2;&#x6570;&#x91CF;&#x4E3A;1024x(1x5x5+1)=26624&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;1024&#x500D;&#x3002; Squeeze-and-Excitation&#x2003;&#x2003;Squeeze-and-Excitation&#xFF1A;&#x53C8;&#x79F0;&#x4E3A;&#x7279;&#x5F81;&#x91CD;&#x6807;&#x5B9A;&#x5377;&#x79EF;&#xFF0C;&#x6216;&#x8005;&#x6CE8;&#x610F;&#x529B;&#x673A;&#x5236;&#x3002;&#x5177;&#x4F53;&#x6765;&#x8BF4;&#xFF0C;&#x5C31;&#x662F;&#x901A;&#x8FC7;&#x5B66;&#x4E60;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x81EA;&#x52A8;&#x83B7;&#x53D6;&#x5230;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x7684;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;&#xFF0C;&#x7136;&#x540E;&#x4F9D;&#x7167;&#x8FD9;&#x4E2A;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;&#x53BB;&#x63D0;&#x5347;&#x6709;&#x7528;&#x7684;&#x7279;&#x5F81;&#x5E76;&#x6291;&#x5236;&#x5BF9;&#x5F53;&#x524D;&#x4EFB;&#x52A1;&#x7528;&#x5904;&#x4E0D;&#x5927;&#x7684;&#x7279;&#x5F81;&#x3002;&#x2003;&#x2003;&#x9996;&#x5148;&#x662F; Squeeze&#x64CD;&#x4F5C;&#xFF0C;&#x5148;&#x8FDB;&#x884C;&#x5168;&#x5C40;&#x6C60;&#x5316;&#xFF0C;&#x5177;&#x6709;&#x5168;&#x5C40;&#x7684;&#x611F;&#x53D7;&#x91CE;&#xFF0C;&#x5E76;&#x4E14;&#x8F93;&#x51FA;&#x7684;&#x7EF4;&#x5EA6;&#x548C;&#x8F93;&#x5165;&#x7684;&#x7279;&#x5F81;&#x901A;&#x9053;&#x6570;&#x76F8;&#x5339;&#x914D;&#xFF0C;&#x5B83;&#x8868;&#x5F81;&#x7740;&#x5728;&#x7279;&#x5F81;&#x901A;&#x9053;&#x4E0A;&#x54CD;&#x5E94;&#x7684;&#x5168;&#x5C40;&#x5206;&#x5E03;&#x3002;&#x2003;&#x2003;&#x7136;&#x540E;&#x662F;Excitation&#x64CD;&#x4F5C;&#xFF0C;&#x901A;&#x8FC7;&#x5168;&#x8FDE;&#x63A5;&#x5C42;&#x4E3A;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x751F;&#x6210;&#x6743;&#x91CD;&#xFF0C;&#x5EFA;&#x7ACB;&#x901A;&#x9053;&#x95F4;&#x7684;&#x76F8;&#x5173;&#x6027;&#xFF0C;&#x8F93;&#x51FA;&#x7684;&#x6743;&#x91CD;&#x770B;&#x505A;&#x662F;&#x8FDB;&#x8FC7;&#x7279;&#x5F81;&#x9009;&#x62E9;&#x540E;&#x7684;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x7684;&#x91CD;&#x8981;&#x6027;&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x4E58;&#x6CD5;&#x9010;&#x901A;&#x9053;&#x52A0;&#x6743;&#x5230;&#x5148;&#x524D;&#x7684;&#x7279;&#x5F81;&#x4E0A;&#xFF0C;&#x5B8C;&#x6210;&#x5728;&#x901A;&#x9053;&#x7EF4;&#x5EA6;&#x4E0A;&#x7684;&#x5BF9;&#x539F;&#x59CB;&#x7279;&#x5F81;&#x7684;&#x91CD;&#x6807;&#x5B9A;&#x3002; GhostNet&#x56FE;&#x50CF;&#x5206;&#x6790; TensorFlow2.0&#x5B9E;&#x73B0;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134import tensorflow as tfimport tensorflow.keras as kerasclass Ghost_Block(keras.Model): def __init__(self, out_channel, relu=True): super(Ghost_Block, self).__init__() self.conv = Conv_block(out_channel // 2, relu=relu) self.gconv = Conv_block(kernel_size=(3, 3), relu=relu) self.concatenate = keras.layers.Concatenate() def call(self, inputs, training=None, mask=None): conv = self.conv(inputs) gconv = self.gconv(conv) output = self.concatenate([conv, gconv]) return outputclass SE_Block(keras.Model): def __init__(self, out_channel): super(SE_Block, self).__init__() self.squeeze = keras.Sequential() self.squeeze.add(keras.layers.GlobalAveragePooling2D()) self.squeeze.add(keras.layers.Dense(out_channel // 4)) self.squeeze.add(keras.layers.ReLU()) self.squeeze.add(keras.layers.Dense(out_channel)) def call(self, inputs, training=None, mask=None): squeeze = self.squeeze(inputs) sigmoid = tf.nn.sigmoid(squeeze) reshape = tf.reshape(sigmoid, (-1, 1, 1, inputs.shape[-1])) output = inputs * reshape return outputclass Ghost_Bneck(keras.Model): def __init__(self, out_channel, exp_channel, kernel_size, strides=(1, 1), se=False): super(Ghost_Bneck, self).__init__() self.block = keras.Sequential() self.block.add(Ghost_Block(exp_channel)) if strides == (2, 2): self.block.add(Conv_block(kernel_size=kernel_size, strides=(2, 2))) if se: self.block.add(SE_Block(exp_channel)) self.block.add(Ghost_Block(out_channel, relu=False)) def call(self, inputs, training=None, mask=None): output = self.block(inputs) if output.shape[1:] == inputs.shape[1:]: output = inputs + output return outputclass Conv_block(keras.Model): def __init__(self, filters=None, kernel_size=(1, 1), strides=(1, 1), padding=&apos;same&apos;, relu=True, name=&apos;Conv_Block&apos;): super(Conv_block, self).__init__() self.block = keras.Sequential(name=name) if filters: self.block.add(keras.layers.Conv2D(filters=filters, kernel_size=kernel_size, strides=strides, padding=padding)) else: self.block.add(keras.layers.DepthwiseConv2D(kernel_size=kernel_size, strides=strides, padding=padding)) self.block.add(keras.layers.BatchNormalization()) if relu: self.block.add(keras.layers.ReLU()) def call(self, inputs, training=None, mask=None): return self.block(inputs)class GhostNet(keras.Model): def __init__(self): super(GhostNet, self).__init__() self.conv1 = keras.Sequential(name=&apos;Conv_Block1&apos;) self.conv1.add(Conv_block(16, (3, 3), (2, 2))) self.bneck1 = keras.Sequential(name=&apos;GBneck1&apos;) self.bneck1.add(Ghost_Bneck(out_channel=16, exp_channel=16, kernel_size=(3, 3))) self.bneck1.add(Ghost_Bneck(out_channel=24, exp_channel=48, kernel_size=(3, 3), strides=(2, 2))) self.bneck2 = keras.Sequential(name=&apos;GBneck2&apos;) self.bneck2.add(Ghost_Bneck(out_channel=24, exp_channel=72, kernel_size=(3, 3))) self.bneck2.add(Ghost_Bneck(out_channel=40, exp_channel=72, kernel_size=(5, 5), strides=(2, 2), se=True)) self.bneck3 = keras.Sequential(name=&apos;GBneck3&apos;) self.bneck3.add(Ghost_Bneck(out_channel=40, exp_channel=120, kernel_size=(5, 5), se=True)) self.bneck3.add(Ghost_Bneck(out_channel=80, exp_channel=240, kernel_size=(3, 3), strides=(2, 2))) self.bneck4 = keras.Sequential(name=&apos;GBneck4&apos;) self.bneck4.add(Ghost_Bneck(out_channel=80, exp_channel=200, kernel_size=(3, 3))) self.bneck4.add(Ghost_Bneck(out_channel=80, exp_channel=184, kernel_size=(3, 3))) self.bneck4.add(Ghost_Bneck(out_channel=80, exp_channel=184, kernel_size=(3, 3))) self.bneck4.add(Ghost_Bneck(out_channel=112, exp_channel=480, kernel_size=(3, 3), se=True)) self.bneck4.add(Ghost_Bneck(out_channel=112, exp_channel=672, kernel_size=(3, 3), se=True)) self.bneck4.add(Ghost_Bneck(out_channel=160, exp_channel=672, kernel_size=(5, 5), strides=(2, 2), se=True)) self.bneck5 = keras.Sequential(name=&apos;GBneck5&apos;) self.bneck5.add(Ghost_Bneck(out_channel=160, exp_channel=960, kernel_size=(5, 5))) self.bneck5.add(Ghost_Bneck(out_channel=160, exp_channel=960, kernel_size=(5, 5), se=True)) self.bneck5.add(Ghost_Bneck(out_channel=160, exp_channel=960, kernel_size=(5, 5))) self.bneck5.add(Ghost_Bneck(out_channel=160, exp_channel=960, kernel_size=(5, 5), se=True)) self.conv2 = keras.Sequential(name=&apos;Conv_Block2&apos;) self.conv2.add(Conv_block(960)) self.average_pooling = keras.layers.AveragePooling2D((7, 7), (7, 7), name=&apos;AveragePooling&apos;) self.conv3 = keras.Sequential(name=&apos;Conv_Block3&apos;) self.conv3.add(Conv_block(1280)) self.conv3.add(keras.layers.Conv2D(1000, (1, 1))) self.softmax = keras.layers.Softmax(name=&apos;Softmax&apos;) self.reshape = keras.layers.Reshape((1000,), name=&apos;Reshape&apos;) def call(self, inputs, training=None, mask=None): conv1 = self.conv1(inputs) bneck1 = self.bneck1(conv1) bneck2 = self.bneck2(bneck1) bneck3 = self.bneck3(bneck2) bneck4 = self.bneck4(bneck3) bneck5 = self.bneck5(bneck4) conv2 = self.conv2(bneck5) average_pooling = self.average_pooling(conv2) conv3 = self.conv3(average_pooling) softmax = self.softmax(conv3) output = self.reshape(softmax) return outputif __name__ == &apos;__main__&apos;: model = GhostNet() model.build(input_shape=(None, 224, 224, 3)) model.summary() GhostNet&#x5C0F;&#x7ED3;&#x2003;&#x2003;GhostNet&#x662F;&#x4E00;&#x79CD;&#x590D;&#x6742;&#x7684;&#x8F7B;&#x91CF;&#x7EA7;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x4E3A;5M&#xFF0C;&#x5176;&#x501F;&#x9274;&#x4E86;&#x5927;&#x91CF;&#x4F18;&#x79C0;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#x7684;&#x7CBE;&#x9AD3;&#xFF0C;&#x5982;MobileNet&#x7684;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x601D;&#x60F3;&#xFF0C;AlexNet&#x7684;&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x601D;&#x60F3;&#xFF0C;SENet&#x7684;&#x6CE8;&#x610F;&#x529B;&#x673A;&#x5236;&#xFF0C;&#x56E0;&#x6B64;&#x83B7;&#x5F97;&#x4E86;&#x8F83;&#x597D;&#x7684;&#x6548;&#x679C;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>特征提取网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ShuffleNet-V2]]></title>
    <url>%2F2020%2F04%2F02%2Ffeature_extraction%20ShuffleNet_V2%2F</url>
    <content type="text"><![CDATA[ShuffleNet-V2 &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;ShuffleNet-V2:2018&#x5E74;&#x53D1;&#x8868;&#x4E8E;ECCV&#xFF0C;&#x662F;&#x4E00;&#x79CD;&#x9AD8;&#x6548;&#x7684;&#x8F7B;&#x91CF;&#x7EA7;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x6A21;&#x578B;&#xFF0C;&#x5728;&#x540C;&#x7B49;&#x590D;&#x6742;&#x5EA6;&#x4E0B;&#xFF0C;ShuffleNet-V2&#x6BD4;ShuffleNet&#x548C;MobileNet&#x66F4;&#x51C6;&#x786E;&#x3002; ShuffleNet-V2&#x7279;&#x70B9;&#x2003;&#x2003;&#x501F;&#x9274;&#x4E86;AlexNet&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x5F15;&#x5165;&#x4E86;&#x901A;&#x9053;&#x5206;&#x79BB;&#x548C;&#x901A;&#x9053;&#x6D17;&#x724C;&#xFF0C;&#x5728;&#x51CF;&#x5C11;&#x53C2;&#x6570;&#x91CF;&#x7684;&#x540C;&#x65F6;&#xFF0C;&#x589E;&#x52A0;&#x4E86;&#x901A;&#x9053;&#x4E4B;&#x95F4;&#x7684;&#x8054;&#x7CFB;&#xFF0C;&#x5E76;&#x4E14;&#x5BF9;&#x6700;&#x540E;&#x7684;&#x7ED3;&#x679C;&#x8FDB;&#x884C;&#x901A;&#x9053;&#x5408;&#x5E76;&#xFF0C;&#x5B8C;&#x6210;&#x7279;&#x5F81;&#x878D;&#x5408;&#x3002;&#x2003;&#x2003;&#x5728;Block&#x4E2D;&#x4F7F;&#x7528;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x601D;&#x60F3;&#xFF0C;&#x51CF;&#x5C11;&#x6A21;&#x578B;&#x53C2;&#x6570;&#x91CF; Group Convolution&#x2003;&#x2003;Group Convolution(&#x5206;&#x7EC4;&#x5377;&#x79EF;)&#xFF1A;&#x4F20;&#x7EDF;&#x5377;&#x79EF;&#x662F;&#x91C7;&#x7528;&#x4E00;&#x79CD;&#x5377;&#x79EF;&#x5168;&#x8FDE;&#x63A5;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x7279;&#x5F81;&#x56FE;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x90FD;&#x7ED3;&#x5408;&#x4E86;&#x56FE;&#x50CF;&#x4E2D;&#x6240;&#x6709;&#x901A;&#x9053;&#x7684;&#x4FE1;&#x606F;&#x3002;&#x800C;&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x7279;&#x5F81;&#x56FE;&#x50CF;&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x53EA;&#x5229;&#x7528;&#x5230;&#x4E00;&#x90E8;&#x5206;&#x539F;&#x59CB;&#x56FE;&#x50CF;&#x7684;&#x901A;&#x9053;&#x3002;&#x2003;&#x2003;&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;5x5&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(256x5x5+1)=1638656&#xFF0C;&#x800C;&#x5206;&#x6210;32&#x7EC4;&#x7684;&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(8*5x5+1)=51456&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;32&#x500D;&#xFF0C;&#x5F53;&#x7EC4;&#x6570;&#x53D8;&#x6210;&#x901A;&#x9053;&#x6570;&#x65F6;&#xFF0C;&#x5219;&#x7C7B;&#x4F3C;&#x4E8E;Depthwise Convolution&#x6DF1;&#x5EA6;&#x5377;&#x79EF; Separable Convolution&#x2003;&#x2003;Separable Convolution(&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)&#xFF1A;&#x662F;&#x4E0A;&#x9762;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x5408;&#x4E8C;&#x4E3A;&#x4E00;&#x7684;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x3002;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x6B65;&#xFF1A;DepthwiseConv&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x8FDB;&#x884C;&#x5377;&#x79EF;&#x2003;&#x2003;&#x7B2C;&#x4E8C;&#x6B65;&#xFF1A;PointwiseConv&#xFF0C;&#x5BF9;&#x7B2C;&#x4E00;&#x6B65;&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#x8FDB;&#x884C;1x1&#x5377;&#x79EF;&#xFF0C;&#x5B9E;&#x73B0;&#x901A;&#x9053;&#x878D;&#x5408;&#x2003;&#x2003;&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;&#x8C03;&#x6574;&#x4E3A;&#x4EFB;&#x610F;&#x5408;&#x9002;&#x7684;&#x901A;&#x9053;&#x6570;&#x3002;&#x7B2C;&#x4E00;&#x6B65;&#x7684;&#x76EE;&#x7684;&#x662F;&#x51CF;&#x5C11;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x7B2C;&#x4E8C;&#x6B65;&#x662F;&#x8C03;&#x6574;&#x901A;&#x9053;&#x6570;&#xFF0C;&#x56E0;&#x6B64;&#x5C06;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x7ED3;&#x5408;&#xFF0C;&#x7EC4;&#x6210;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x3002; &#x4E0D;&#x540C;&#x5C3A;&#x5BF8;ShuffleNet-V2&#x7F51;&#x7EDC;&#x7ED3;&#x6784; ShuffleNet-V2&#x56FE;&#x50CF;&#x5206;&#x6790; TensorFlow2.0&#x5B9E;&#x73B0;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121import tensorflow as tfimport tensorflow.keras as kerasclass Channel_Split(keras.layers.Layer): def __init__(self): super(Channel_Split, self).__init__() def call(self, inputs, **kwargs): return inputs[..., :inputs.shape[-1] // 2], inputs[..., inputs.shape[-1] // 2:]class Channel_Shuffle(keras.layers.Layer): def __init__(self): super(Channel_Shuffle, self).__init__() def call(self, inputs, **kwargs): channel = inputs.shape[-1] reshape1 = tf.reshape(inputs, (-1, inputs.shape[1], inputs.shape[2], 2, channel // 2)) permute = tf.transpose(reshape1, perm=[0, 1, 2, 4, 3]) output = tf.reshape(permute, (-1, inputs.shape[1], inputs.shape[2], channel)) return outputclass Block(keras.Model): def __init__(self, out_channel, strides=(1, 1)): super(Block, self).__init__() self.strides = strides self.block1 = keras.Sequential() self.block1.add(Conv_block(out_channel // 2)) self.block1.add(Conv_block(kernel_size=(3, 3), strides=strides, relu=False)) self.block1.add(Conv_block(out_channel // 2)) if strides == (2, 2): self.block2 = keras.Sequential() self.block2.add(Conv_block(kernel_size=(3, 3), strides=strides, relu=False)) self.block2.add(Conv_block(out_channel // 2)) else: self.channel_split = Channel_Split() self.concatenate = keras.layers.Concatenate() self.channel_shuffle = Channel_Shuffle() def call(self, inputs, training=None, mask=None): if self.strides == (1, 1): split1, split2 = self.channel_split(inputs) else: split1, split2 = inputs, inputs block1 = self.block1(split1) if self.strides == (1, 1): block2 = split2 else: block2 = self.block2(split2) concatenate = self.concatenate([block1, block2]) output = self.channel_shuffle(concatenate) return outputclass Conv_block(keras.Model): def __init__(self, filters=None, kernel_size=(1, 1), strides=(1, 1), padding=&apos;same&apos;, relu=True, name=&apos;Conv_Block&apos;): super(Conv_block, self).__init__() self.block = keras.Sequential(name=name) if filters: self.block.add(keras.layers.Conv2D(filters=filters, kernel_size=kernel_size, strides=strides, padding=padding)) else: self.block.add(keras.layers.DepthwiseConv2D(kernel_size=kernel_size, strides=strides, padding=padding)) self.block.add(keras.layers.BatchNormalization()) if relu: self.block.add(keras.layers.ReLU()) def call(self, inputs, training=None, mask=None): return self.block(inputs)class ShuffleNet_V2(keras.Model): def __init__(self): super(ShuffleNet_V2, self).__init__() self.conv1 = keras.layers.Conv2D(24, (3, 3), (2, 2), padding=&apos;same&apos;, name=&apos;Conv1&apos;) self.maxpooling = keras.layers.MaxPool2D((3, 3), (2, 2), padding=&apos;same&apos;, name=&apos;MaxPool&apos;) self.block1 = keras.Sequential(name=&apos;Block_1&apos;) self.block1.add(Block(116, (2, 2))) for i in range(3): self.block1.add(Block(116)) self.block2 = keras.Sequential(name=&apos;Block_2&apos;) self.block2.add(Block(232, (2, 2))) for i in range(7): self.block2.add(Block(232)) self.block3 = keras.Sequential(name=&apos;Block_3&apos;) self.block3.add(Block(464, (2, 2))) for i in range(3): self.block3.add(Block(464)) self.conv2 = keras.layers.Conv2D(1024, (1, 1), (1, 1), padding=&apos;same&apos;, name=&apos;Conv2&apos;) self.global_average_pooling = keras.layers.GlobalAveragePooling2D(name=&apos;GlobalAveragePooling&apos;) self.dense = keras.layers.Dense(num_class, activation=&apos;softmax&apos;, name=&apos;Dense&apos;) def call(self, inputs, training=None, mask=None): conv1 = self.conv1(inputs) maxpooling = self.maxpooling(conv1) block1 = self.block1(maxpooling) block2 = self.block2(block1) block3 = self.block3(block2) conv2 = self.conv2(block3) global_average_pooling = self.global_average_pooling(conv2) output = self.dense(global_average_pooling) return outputif __name__ == &apos;__main__&apos;: model = ShuffleNet_V2() model.build(input_shape=(None, 224, 224, 3)) model.summary() ShuffleNet-V2&#x5C0F;&#x7ED3;&#x2003;&#x2003;ShuffleNet-V2&#x662F;&#x4E00;&#x79CD;&#x6709;&#x6548;&#x7684;&#x8F7B;&#x91CF;&#x7EA7;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x53EA;&#x6709;1M&#xFF0C;&#x5176;&#x4ECE;AlexNet&#x4E2D;&#x501F;&#x9274;&#x4E86;&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x5E76;&#x4E14;&#x8FD0;&#x7528;&#x4E86;&#x901A;&#x9053;&#x5206;&#x79BB;&#x548C;&#x6D17;&#x724C;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x4E0D;&#x4F46;&#x53EF;&#x4EE5;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x6A21;&#x578B;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;&#x63D0;&#x9AD8;&#x6A21;&#x578B;&#x7684;&#x9C81;&#x68D2;&#x6027;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>特征提取网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[EfficientNet]]></title>
    <url>%2F2020%2F03%2F31%2Ffeature_extraction%20EfficientNet%2F</url>
    <content type="text"><![CDATA[EfficientNet &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;EfficientNet:&#x662F;&#x8C37;&#x6B4C;&#x516C;&#x53F8;&#x4E8E;2019&#x5E74;&#x63D0;&#x51FA;&#x7684;&#x9AD8;&#x6548;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;&#x6545;&#x5F97;&#x540D;&#x4E3A;EfficientNet&#xFF0C;&#x5927;&#x5E45;&#x5EA6;&#x7684;&#x7F29;&#x5C0F;&#x4E86;&#x53C2;&#x6570;&#x7684;&#x540C;&#x65F6;&#x63D0;&#x9AD8;&#x4E86;&#x9884;&#x6D4B;&#x51C6;&#x786E;&#x5EA6;&#x3002; EfficientNet&#x7279;&#x70B9;&#x2003;&#x2003;&#x548C;MobileNet_V3&#x7C7B;&#x4F3C;&#xFF0C;&#x5728;Block&#x4E2D;&#x5148;&#x8FDB;&#x884C;1x1&#x5377;&#x79EF;&#x63D0;&#x5347;&#x901A;&#x9053;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x8FDB;&#x884C;DepthwiseConv&#x6DF1;&#x5EA6;&#x5377;&#x79EF;&#x51CF;&#x5C11;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x5E76;&#x4E14;&#x5728;Block&#x4E2D;&#x5F15;&#x5165;&#x6B8B;&#x5DEE;&#x7ED3;&#x6784;&#x548C;Squeeze-and-Excitation&#x6A21;&#x5757;&#x2003;&#x2003;&#x5EFA;&#x7ACB;&#x591A;&#x4E2A;&#x7F51;&#x7EDC;&#x6DF1;&#x5EA6;&#xFF0C;&#x7F51;&#x7EDC;&#x5BBD;&#x5EA6;&#xFF0C;&#x56FE;&#x50CF;&#x5206;&#x8FA8;&#x7387;&#x4E0D;&#x540C;&#x7684;&#x6A21;&#x578B;&#xFF0C;&#x4ECE;&#x4E09;&#x4E2A;&#x65B9;&#x9762;&#x62D3;&#x5C55;&#x7F51;&#x7EDC;&#x6027;&#x80FD; Depthwise Convolution&#x2003;&#x2003;Depthwise Convolution(&#x6DF1;&#x5EA6;&#x5377;&#x79EF;)&#xFF1A;&#x5728;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x4E0A;&#x5355;&#x72EC;&#x8FDB;&#x884C;&#x5377;&#x79EF;&#x2003;&#x2003;&#x53C2;&#x6570;depth_multiplier&#x9ED8;&#x8BA4;&#x4E3A;1&#xFF0C;&#x4EE3;&#x8868;&#x6BCF;&#x4E2A;&#x901A;&#x9053;&#x6570;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x5355;&#x72EC;&#x5377;&#x79EF;&#xFF0C;&#x8F93;&#x51FA;&#x7684;&#x901A;&#x9053;&#x6570;&#x548C;&#x8F93;&#x5165;&#x901A;&#x9053;&#x6570;&#x76F8;&#x7B49;&#xFF0C;&#x8BBE;&#x7F6E;depth_multiplier=n&#xFF0C;&#x5219;&#x4EE3;&#x8868;&#x6BCF;&#x4E2A;&#x901A;&#x9053;&#x6570;&#x8FDB;&#x884C;n&#x6B21;&#x5355;&#x72EC;&#x5377;&#x79EF;&#xFF0C;&#x8F93;&#x51FA;&#x901A;&#x9053;&#x6570;&#x662F;&#x8F93;&#x5165;&#x901A;&#x9053;&#x6570;&#x7684;n&#x500D;&#x3002;&#x2003;&#x2003;&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;**&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;8x8x1024&#x7684;&#x7279;&#x5F81;&#x56FE;&#xFF0C;&#x7ECF;&#x8FC7;5x5&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;8x8x1024&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;1024x(1024x5x5+1)=26215424&#xFF0C;&#x800C;&#x6DF1;&#x5EA6;&#x5377;&#x79EF;&#x53C2;&#x6570;&#x91CF;&#x4E3A;1024x(1x5x5+1)=26624&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;1024&#x500D;&#x3002; Squeeze-and-Excitation&#x2003;&#x2003;Squeeze-and-Excitation&#xFF1A;&#x53C8;&#x79F0;&#x4E3A;&#x7279;&#x5F81;&#x91CD;&#x6807;&#x5B9A;&#x5377;&#x79EF;&#xFF0C;&#x6216;&#x8005;&#x6CE8;&#x610F;&#x529B;&#x673A;&#x5236;&#x3002;&#x5177;&#x4F53;&#x6765;&#x8BF4;&#xFF0C;&#x5C31;&#x662F;&#x901A;&#x8FC7;&#x5B66;&#x4E60;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x81EA;&#x52A8;&#x83B7;&#x53D6;&#x5230;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x7684;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;&#xFF0C;&#x7136;&#x540E;&#x4F9D;&#x7167;&#x8FD9;&#x4E2A;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;&#x53BB;&#x63D0;&#x5347;&#x6709;&#x7528;&#x7684;&#x7279;&#x5F81;&#x5E76;&#x6291;&#x5236;&#x5BF9;&#x5F53;&#x524D;&#x4EFB;&#x52A1;&#x7528;&#x5904;&#x4E0D;&#x5927;&#x7684;&#x7279;&#x5F81;&#x3002;&#x2003;&#x2003;&#x9996;&#x5148;&#x662F; Squeeze&#x64CD;&#x4F5C;&#xFF0C;&#x5148;&#x8FDB;&#x884C;&#x5168;&#x5C40;&#x6C60;&#x5316;&#xFF0C;&#x5177;&#x6709;&#x5168;&#x5C40;&#x7684;&#x611F;&#x53D7;&#x91CE;&#xFF0C;&#x5E76;&#x4E14;&#x8F93;&#x51FA;&#x7684;&#x7EF4;&#x5EA6;&#x548C;&#x8F93;&#x5165;&#x7684;&#x7279;&#x5F81;&#x901A;&#x9053;&#x6570;&#x76F8;&#x5339;&#x914D;&#xFF0C;&#x5B83;&#x8868;&#x5F81;&#x7740;&#x5728;&#x7279;&#x5F81;&#x901A;&#x9053;&#x4E0A;&#x54CD;&#x5E94;&#x7684;&#x5168;&#x5C40;&#x5206;&#x5E03;&#x3002;&#x2003;&#x2003;&#x7136;&#x540E;&#x662F;Excitation&#x64CD;&#x4F5C;&#xFF0C;&#x901A;&#x8FC7;&#x5168;&#x8FDE;&#x63A5;&#x5C42;&#x4E3A;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x751F;&#x6210;&#x6743;&#x91CD;&#xFF0C;&#x5EFA;&#x7ACB;&#x901A;&#x9053;&#x95F4;&#x7684;&#x76F8;&#x5173;&#x6027;&#xFF0C;&#x8F93;&#x51FA;&#x7684;&#x6743;&#x91CD;&#x770B;&#x505A;&#x662F;&#x8FDB;&#x8FC7;&#x7279;&#x5F81;&#x9009;&#x62E9;&#x540E;&#x7684;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x7684;&#x91CD;&#x8981;&#x6027;&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x4E58;&#x6CD5;&#x9010;&#x901A;&#x9053;&#x52A0;&#x6743;&#x5230;&#x5148;&#x524D;&#x7684;&#x7279;&#x5F81;&#x4E0A;&#xFF0C;&#x5B8C;&#x6210;&#x5728;&#x901A;&#x9053;&#x7EF4;&#x5EA6;&#x4E0A;&#x7684;&#x5BF9;&#x539F;&#x59CB;&#x7279;&#x5F81;&#x7684;&#x91CD;&#x6807;&#x5B9A;&#x3002; EfficientNet&#x57FA;&#x6A21;&#x578B;B0&#x56FE;&#x50CF;&#x5206;&#x6790; &#x57FA;&#x6A21;&#x578B;B0&#x7684;TensorFlow2.0&#x5B9E;&#x73B0;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118import tensorflow as tfimport tensorflow.keras as kerasclass Swish(keras.layers.Layer): def __init__(self): super(Swish, self).__init__() def call(self, inputs, **kwargs): return inputs * tf.nn.sigmoid(inputs)class Block(keras.Model): def __init__(self, in_channel, out_channel, times1, times2=4, kernel_size=(1, 1), strides=(1, 1)): super(Block, self).__init__() self.block1 = keras.Sequential() self.block1.add(Conv_block(in_channel * times1)) self.block1.add(Conv_block(kernel_size=kernel_size, strides=strides)) self.block2 = keras.Sequential() self.block2.add(keras.layers.GlobalAveragePooling2D()) self.block2.add(keras.layers.Reshape((1, 1, in_channel * times1))) self.block2.add(keras.layers.Conv2D(in_channel // times2, (1, 1))) self.block2.add(keras.layers.Conv2D(in_channel * times1, (1, 1))) self.conv = Conv_block(out_channel) def call(self, inputs, training=None, mask=None): block1 = self.block1(inputs) block2 = self.block2(block1) output = block1 * block2 if output.shape[1:] == inputs.shape[1:]: output = output + inputs return outputclass Conv_block(keras.Model): def __init__(self, filters=None, kernel_size=(1, 1), strides=(1, 1), padding=&apos;same&apos;, name=&apos;Conv_Block&apos;): super(Conv_block, self).__init__() self.block = keras.Sequential(name=name) if filters: self.block.add(keras.layers.Conv2D(filters=filters, kernel_size=kernel_size, strides=strides, padding=padding)) else: self.block.add(keras.layers.DepthwiseConv2D(kernel_size=kernel_size, strides=strides, padding=padding)) self.block.add(keras.layers.BatchNormalization()) self.block.add(Swish()) def call(self, inputs, training=None, mask=None): return self.block(inputs)class EfficientNet(keras.Model): def __init__(self): super(EfficientNet, self).__init__() self.zeropadding = keras.layers.ZeroPadding2D(name=&apos;ZeroPadding&apos;) self.conv1 = keras.Sequential(name=&apos;Conv_Block_1&apos;) self.conv1.add(Conv_block(32, (3, 3), (2, 2), padding=&apos;valid&apos;)) self.block1 = keras.Sequential(name=&apos;Block_1&apos;) self.block1.add(Block(in_channel=32, out_channel=16, times1=1, kernel_size=(3, 3), strides=(1, 1))) self.block2 = keras.Sequential(name=&apos;Block_2&apos;) self.block2.add(Block(in_channel=16, out_channel=24, times1=6, kernel_size=(3, 3), strides=(2, 2))) self.block2.add(Block(in_channel=24, out_channel=24, times1=6, kernel_size=(3, 3))) self.block3 = keras.Sequential(name=&apos;Block_3&apos;) self.block3.add(Block(in_channel=24, out_channel=40, times1=6, kernel_size=(5, 5), strides=(2, 2))) self.block3.add(Block(in_channel=40, out_channel=40, times1=6, kernel_size=(5, 5))) self.block4 = keras.Sequential(name=&apos;Block_4&apos;) self.block4.add(Block(in_channel=40, out_channel=80, times1=6, kernel_size=(3, 3), strides=(2, 2))) self.block4.add(Block(in_channel=80, out_channel=80, times1=6, kernel_size=(3, 3))) self.block4.add(Block(in_channel=80, out_channel=80, times1=6, kernel_size=(3, 3))) self.block5 = keras.Sequential(name=&apos;Block_5&apos;) self.block5.add(Block(in_channel=80, out_channel=112, times1=6, kernel_size=(5, 5))) self.block5.add(Block(in_channel=112, out_channel=112, times1=6, kernel_size=(5, 5))) self.block5.add(Block(in_channel=112, out_channel=112, times1=6, kernel_size=(5, 5))) self.block6 = keras.Sequential(name=&apos;Block_6&apos;) self.block6.add(Block(in_channel=112, out_channel=192, times1=6, kernel_size=(5, 5), strides=(2, 2))) self.block6.add(Block(in_channel=192, out_channel=192, times1=6, kernel_size=(5, 5))) self.block6.add(Block(in_channel=192, out_channel=192, times1=6, kernel_size=(5, 5))) self.block6.add(Block(in_channel=192, out_channel=192, times1=6, kernel_size=(5, 5))) self.block7 = keras.Sequential(name=&apos;Block_7&apos;) self.block7.add(Block(in_channel=192, out_channel=320, times1=6, kernel_size=(3, 3))) self.conv2 = keras.Sequential(name=&apos;Conv_Block_2&apos;) self.conv2.add(Conv_block(1280)) self.global_average_pooling = keras.layers.GlobalAveragePooling2D(name=&apos;GlobalAveragePooling&apos;) self.dropout = keras.layers.Dropout(0.2, name=&apos;Dropout&apos;) self.dense = keras.layers.Dense(1000, activation=&apos;softmax&apos;, name=&apos;Dense&apos;) def call(self, inputs, training=None, mask=None): zeropadding = self.zeropadding(inputs) conv1 = self.conv1(zeropadding) block1 = self.block1(conv1) block2 = self.block2(block1) block3 = self.block3(block2) block4 = self.block4(block3) block5 = self.block5(block4) block6 = self.block6(block5) block7 = self.block7(block6) conv2 = self.conv2(block7) global_average_pooling = self.global_average_pooling(conv2) dropout = self.dropout(global_average_pooling) output = self.dense(dropout) return outputif __name__ == &apos;__main__&apos;: model = EfficientNet() model.build(input_shape=(None, 224, 224, 3)) model.summary() EfficientNet&#x5C0F;&#x7ED3;&#x2003;&#x2003;EfficientNet&#x662F;&#x4E00;&#x79CD;&#x590D;&#x6742;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;EfficientNet&#x57FA;&#x6A21;&#x578B;B0&#x7684;&#x53C2;&#x6570;&#x91CF;&#x6709;10M&#xFF0C;&#x5176;&#x8003;&#x8651;&#x7F51;&#x7EDC;&#x6DF1;&#x5EA6;&#xFF0C;&#x7F51;&#x7EDC;&#x5BBD;&#x5EA6;&#xFF0C;&#x56FE;&#x50CF;&#x5206;&#x8FA8;&#x7387;&#x7B49;&#x56E0;&#x7D20;&#x7684;&#x601D;&#x60F3;&#x503C;&#x5F97;&#x6211;&#x4EEC;&#x5B66;&#x4E60;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>特征提取网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[EffNet]]></title>
    <url>%2F2020%2F03%2F28%2Ffeature_extraction%20EffNet%2F</url>
    <content type="text"><![CDATA[EffNet &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;EffNet:2018&#x5E74;&#x53D1;&#x8868;&#x4E8E;ICIP&#xFF0C;&#x63D0;&#x51FA;&#x4E00;&#x79CD;&#x65B0;&#x9896;&#x7684;&#x5377;&#x79EF;&#x5757;&#x8BBE;&#x8BA1;&#xFF0C;&#x80FD;&#x591F;&#x663E;&#x8457;&#x51CF;&#x8F7B;&#x8BA1;&#x7B97;&#x8D1F;&#x62C5;&#xFF0C;&#x4E14;&#x6027;&#x80FD;&#x8FDC;&#x80DC;&#x5F53;&#x524D;&#x7684;&#x6700;&#x597D;&#x7684;&#x6A21;&#x578B;(&#x5BF9;&#x6BD4;MobileNet,ShuffleNet)&#x3002; EffNet&#x7279;&#x70B9;&#x2003;&#x2003;&#x501F;&#x9274;&#x4E86;Depthwise Convolution(&#x6DF1;&#x5EA6;&#x5377;&#x79EF;)&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x5E76;&#x4E14;&#x5C06;Inception&#x4E2D;spatial separable convolutions(&#x7A7A;&#x95F4;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)&#x7684;&#x601D;&#x60F3;&#x63A8;&#x5E7F;&#x5230;&#x6C60;&#x5316;&#x5206;&#x89E3;&#x3002;&#x91C7;&#x7528;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x4EE3;&#x66FF;&#x4F20;&#x7EDF;&#x7684;&#x5377;&#x79EF;&#xFF0C;&#x5E76;&#x4E14;&#x5377;&#x79EF;&#x6838;&#x91C7;&#x7528;1x3&#x548C;3x1&#x4EE3;&#x66FF;3x3&#xFF0C;&#x4E24;&#x6B21;&#x5377;&#x79EF;&#x6838;&#x4E4B;&#x95F4;&#x63D2;&#x5165;&#x4E00;&#x7EF4;&#x6C60;&#x5316;&#x6838;&#xFF0C;&#x53EF;&#x4EE5;&#x8FDB;&#x4E00;&#x6B65;&#x51CF;&#x5C11;&#x53C2;&#x6570;&#x91CF;&#x3002; Depthwise Convolution&#x2003;&#x2003;Depthwise Convolution(&#x6DF1;&#x5EA6;&#x5377;&#x79EF;)&#xFF1A;&#x5728;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x4E0A;&#x5355;&#x72EC;&#x8FDB;&#x884C;&#x5377;&#x79EF;&#x2003;&#x2003;&#x53C2;&#x6570;depth_multiplier&#x9ED8;&#x8BA4;&#x4E3A;1&#xFF0C;&#x4EE3;&#x8868;&#x6BCF;&#x4E2A;&#x901A;&#x9053;&#x6570;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x5355;&#x72EC;&#x5377;&#x79EF;&#xFF0C;&#x8F93;&#x51FA;&#x7684;&#x901A;&#x9053;&#x6570;&#x548C;&#x8F93;&#x5165;&#x901A;&#x9053;&#x6570;&#x76F8;&#x7B49;&#xFF0C;&#x8BBE;&#x7F6E;depth_multiplier=n&#xFF0C;&#x5219;&#x4EE3;&#x8868;&#x6BCF;&#x4E2A;&#x901A;&#x9053;&#x6570;&#x8FDB;&#x884C;n&#x6B21;&#x5355;&#x72EC;&#x5377;&#x79EF;&#xFF0C;&#x8F93;&#x51FA;&#x901A;&#x9053;&#x6570;&#x662F;&#x8F93;&#x5165;&#x901A;&#x9053;&#x6570;&#x7684;n&#x500D;&#x3002;&#x2003;&#x2003;&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;**&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;8x8x1024&#x7684;&#x7279;&#x5F81;&#x56FE;&#xFF0C;&#x7ECF;&#x8FC7;5x5&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;8x8x1024&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;1024x(1024x5x5+1)=26215424&#xFF0C;&#x800C;&#x6DF1;&#x5EA6;&#x5377;&#x79EF;&#x53C2;&#x6570;&#x91CF;&#x4E3A;1024x(1x5x5+1)=26624&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;1024&#x500D;&#x3002; Spatial Separable Convolution&#x2003;&#x2003;Spatial Separable Convolution(&#x7A7A;&#x95F4;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)&#xFF1A;&#x5C06;3x3&#x7684;&#x5377;&#x79EF;&#x5206;&#x89E3;&#x4E3A;3x1&#x7684;&#x5377;&#x79EF;&#x6838;1x3&#x7684;&#x5377;&#x79EF;&#xFF0C;&#x5C06;7x7&#x7684;&#x5377;&#x79EF;&#x5206;&#x89E3;&#x4E3A;7x1&#x7684;&#x5377;&#x79EF;&#x6838;1x7&#x7684;&#x5377;&#x79EF;.&#x3002;&#x2003;&#x2003;&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;64x64x256&#x7684;&#x7279;&#x5F81;&#x56FE;&#xFF0C;&#x7ECF;&#x8FC7;7x7&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(256x7x7+1)=3211520&#xFF0C;&#x800C;&#x7A7A;&#x95F4;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x53C2;&#x6570;&#x91CF;&#x4E3A;2x256x(256x7x1+1)=918016&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;3.5&#x500D;&#x3002; EffNet&#x56FE;&#x50CF;&#x5206;&#x6790; TensorFlow2.0&#x5B9E;&#x73B0;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364import tensorflow as tfimport tensorflow.keras as kerasclass Block(keras.Model): def __init__(self, in_channel, out_channel): super(Block, self).__init__() self.block = keras.Sequential() self.block.add(Conv_block(in_channel)) self.block.add(Conv_block(kernel_size=(1, 3))) self.block.add(keras.layers.MaxPool2D((1, 2), (1, 2))) self.block.add(Conv_block(kernel_size=(3, 1))) self.block.add(Conv_block(out_channel, strides=(2, 1))) def call(self, inputs, training=None, mask=None): return self.block(inputs)class Conv_block(keras.Model): def __init__(self, filters=None, kernel_size=(1, 1), strides=(1, 1), padding=&apos;same&apos;, name=&apos;Conv_Block&apos;): super(Conv_block, self).__init__() self.block = keras.Sequential(name=name) if filters: self.block.add(keras.layers.Conv2D(filters=filters, kernel_size=kernel_size, strides=strides, padding=padding)) else: self.block.add(keras.layers.DepthwiseConv2D(kernel_size=kernel_size, strides=strides, padding=padding)) self.block.add(keras.layers.BatchNormalization()) self.block.add(keras.layers.LeakyReLU()) def call(self, inputs, training=None, mask=None): return self.block(inputs)class EffNet(keras.Model): def __init__(self): super(EffNet, self).__init__() self.block1 = keras.Sequential(name=&apos;Block1&apos;) self.block1.add(Block(32, 64)) self.block2 = keras.Sequential(name=&apos;Block2&apos;) self.block2.add(Block(64, 128)) self.block3 = keras.Sequential(name=&apos;Block3&apos;) self.block3.add(Block(128, 256)) self.flatten = keras.layers.Flatten(name=&apos;Flatten&apos;) self.dense = keras.layers.Dense(10, activation=&apos;softmax&apos;, name=&apos;Dense&apos;) def call(self, inputs, training=None, mask=None): block1 = self.block1(inputs) block2 = self.block2(block1) block3 = self.block3(block2) flatten = self.flatten(block3) output = self.dense(flatten) return outputif __name__ == &apos;__main__&apos;: model = EffNet() model.build(input_shape=(None, 32, 32, 3)) model.summary() EffNet&#x5C0F;&#x7ED3;&#x2003;&#x2003;EffNet&#x7ED9;&#x6211;&#x4EEC;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x79CD;&#x4E00;&#x7EF4;&#x6C60;&#x5316;&#x7684;&#x601D;&#x8DEF;&#xFF0C;&#x867D;&#x7136;&#x8BBA;&#x6587;&#x4E2D;&#x4EE5;Cifar10&#x4F5C;&#x4E3A;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x65E0;&#x6CD5;&#x548C;&#x5176;&#x4ED6;&#x6A21;&#x578B;&#x8FDB;&#x884C;&#x76F4;&#x63A5;&#x7684;&#x5BF9;&#x6BD4;&#xFF0C;&#x4F46;&#x662F;&#x6A21;&#x578B;&#x7684;&#x4F7F;&#x7528;&#x6548;&#x679C;&#x5374;&#x4F18;&#x4E8E;MobileNet&#x548C;ShuffleNet&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>特征提取网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MobileNet-V3]]></title>
    <url>%2F2020%2F03%2F26%2Ffeature_extraction%20MobileNet_V3%2F</url>
    <content type="text"><![CDATA[MobileNet-V3 &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;MobileNet-V3:&#x662F;Google&#x7EE7;MobileNet-V2&#x4E4B;&#x540E;&#x7684;&#x53C8;&#x4E00;&#x529B;&#x4F5C;&#xFF0C;&#x4E8E;2019&#x5E74;&#x63D0;&#x51FA;&#xFF0C;&#x6548;&#x679C;&#x8F83;MobileNet-V2&#x6709;&#x6240;&#x63D0;&#x5347;&#x3002;MobileNet-V3&#x63D0;&#x4F9B;&#x4E86;&#x4E24;&#x4E2A;&#x7248;&#x672C;&#xFF0C;&#x5206;&#x522B;&#x4E3A;MobileNet-V3-Large&#x4EE5;&#x53CA;MobileNet-V3-Small&#xFF0C;&#x5206;&#x522B;&#x9002;&#x7528;&#x4E8E;&#x5BF9;&#x8D44;&#x6E90;&#x4E0D;&#x540C;&#x8981;&#x6C42;&#x7684;&#x60C5;&#x51B5;&#x3002; MobileNet-V3&#x7279;&#x70B9;&#x2003;&#x2003;&#x4FDD;&#x7559;MobileNet-V2&#x7684;SeparableConv&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x7ED3;&#x6784;&#x548C;&#x6B8B;&#x5DEE;&#x7ED3;&#x6784;&#x2003;&#x2003;&#x5F15;&#x5165;SE&#x7ED3;&#x6784;&#xFF0C;&#x5177;&#x6709;&#x8F7B;&#x91CF;&#x7EA7;&#x7684;&#x6CE8;&#x610F;&#x529B;&#x6A21;&#x578B;&#x2003;&#x2003;&#x5BF9;MobileNet-V2&#x7684;&#x5934;&#x90E8;&#x7ED3;&#x6784;&#x8FDB;&#x884C;&#x4F18;&#x5316;&#xFF0C;MobileNet-V2&#x4E2D;&#x7B2C;&#x4E8C;&#x5C42;&#x5F97;&#x5230;&#x7684;&#x7279;&#x5F81;&#x56FE;&#x5927;&#x5C0F;&#x4E3A;112x112x32&#xFF0C;&#x800C;&#x5728;MobileNet-V3&#x4E2D;&#xFF0C;&#x53EA;&#x9700;&#x8981;112x112x16&#x5373;&#x53EF;&#x4FDD;&#x8BC1;&#x7CBE;&#x5EA6;&#xFF0C;&#x5E76;&#x4E14;&#x63D0;&#x5347;&#x8FD0;&#x884C;&#x901F;&#x5EA6;&#x3002;&#x2003;&#x2003;&#x5BF9;MobileNet-V2&#x7684;&#x5C3E;&#x90E8;&#x7ED3;&#x6784;&#x8FDB;&#x884C;&#x4F18;&#x5316;&#xFF0C;MobileNet-V2&#x4E2D;&#x5BF9;7x7&#x7684;&#x7279;&#x5F81;&#x56FE;&#x8FDB;&#x884C;1x1&#x7684;&#x5377;&#x79EF;&#x63D0;&#x5347;&#x901A;&#x9053;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8FDB;&#x884C;&#x5168;&#x5C40;&#x5E73;&#x5747;&#x6C60;&#x5316;&#xFF0C;&#x800C;&#x5728;MobileNet-V3&#x4E2D;&#xFF0C;&#x5148;&#x5BF9;7x7&#x7684;&#x7279;&#x5F81;&#x56FE;&#x8FDB;&#x884C;&#x5168;&#x5C40;&#x5E73;&#x5747;&#x6C60;&#x5316;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8FDB;&#x884C;1x1&#x7684;&#x5377;&#x79EF;&#x63D0;&#x5347;&#x901A;&#x9053;&#x6570;&#xFF0C;&#x8282;&#x7EA6;&#x4E86;49&#x500D;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x3002;&#x2003;&#x2003;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x4F7F;&#x7528;h-swish&#x548C;ReLU6&#x5E76;&#x5B58;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x52A0;&#x5FEB;&#x4E86;&#x8FD0;&#x884C;&#x7684;&#x901F;&#x5EA6; Separable Convolution&#x2003;&#x2003;Separable Convolution(&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)&#xFF1A;&#x662F;&#x4E0A;&#x9762;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x5408;&#x4E8C;&#x4E3A;&#x4E00;&#x7684;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x3002;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x6B65;&#xFF1A;DepthwiseConv&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x8FDB;&#x884C;&#x5377;&#x79EF;&#x2003;&#x2003;&#x7B2C;&#x4E8C;&#x6B65;&#xFF1A;PointwiseConv&#xFF0C;&#x5BF9;&#x7B2C;&#x4E00;&#x6B65;&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#x8FDB;&#x884C;1x1&#x5377;&#x79EF;&#xFF0C;&#x5B9E;&#x73B0;&#x901A;&#x9053;&#x878D;&#x5408;&#x2003;&#x2003;&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;&#x8C03;&#x6574;&#x4E3A;&#x4EFB;&#x610F;&#x5408;&#x9002;&#x7684;&#x901A;&#x9053;&#x6570;&#x3002;&#x7B2C;&#x4E00;&#x6B65;&#x7684;&#x76EE;&#x7684;&#x662F;&#x51CF;&#x5C11;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x7B2C;&#x4E8C;&#x6B65;&#x662F;&#x8C03;&#x6574;&#x901A;&#x9053;&#x6570;&#xFF0C;&#x56E0;&#x6B64;&#x5C06;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x7ED3;&#x5408;&#xFF0C;&#x7EC4;&#x6210;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x3002; Squeeze-and-Excitation&#x2003;&#x2003;Squeeze-and-Excitation&#xFF1A;&#x53C8;&#x79F0;&#x4E3A;&#x7279;&#x5F81;&#x91CD;&#x6807;&#x5B9A;&#x5377;&#x79EF;&#xFF0C;&#x6216;&#x8005;&#x6CE8;&#x610F;&#x529B;&#x673A;&#x5236;&#x3002;&#x5177;&#x4F53;&#x6765;&#x8BF4;&#xFF0C;&#x5C31;&#x662F;&#x901A;&#x8FC7;&#x5B66;&#x4E60;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x81EA;&#x52A8;&#x83B7;&#x53D6;&#x5230;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x7684;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;&#xFF0C;&#x7136;&#x540E;&#x4F9D;&#x7167;&#x8FD9;&#x4E2A;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;&#x53BB;&#x63D0;&#x5347;&#x6709;&#x7528;&#x7684;&#x7279;&#x5F81;&#x5E76;&#x6291;&#x5236;&#x5BF9;&#x5F53;&#x524D;&#x4EFB;&#x52A1;&#x7528;&#x5904;&#x4E0D;&#x5927;&#x7684;&#x7279;&#x5F81;&#x3002;&#x2003;&#x2003;&#x9996;&#x5148;&#x662F; Squeeze&#x64CD;&#x4F5C;&#xFF0C;&#x5148;&#x8FDB;&#x884C;&#x5168;&#x5C40;&#x6C60;&#x5316;&#xFF0C;&#x5177;&#x6709;&#x5168;&#x5C40;&#x7684;&#x611F;&#x53D7;&#x91CE;&#xFF0C;&#x5E76;&#x4E14;&#x8F93;&#x51FA;&#x7684;&#x7EF4;&#x5EA6;&#x548C;&#x8F93;&#x5165;&#x7684;&#x7279;&#x5F81;&#x901A;&#x9053;&#x6570;&#x76F8;&#x5339;&#x914D;&#xFF0C;&#x5B83;&#x8868;&#x5F81;&#x7740;&#x5728;&#x7279;&#x5F81;&#x901A;&#x9053;&#x4E0A;&#x54CD;&#x5E94;&#x7684;&#x5168;&#x5C40;&#x5206;&#x5E03;&#x3002;&#x2003;&#x2003;&#x7136;&#x540E;&#x662F;Excitation&#x64CD;&#x4F5C;&#xFF0C;&#x901A;&#x8FC7;&#x5168;&#x8FDE;&#x63A5;&#x5C42;&#x4E3A;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x751F;&#x6210;&#x6743;&#x91CD;&#xFF0C;&#x5EFA;&#x7ACB;&#x901A;&#x9053;&#x95F4;&#x7684;&#x76F8;&#x5173;&#x6027;&#xFF0C;&#x8F93;&#x51FA;&#x7684;&#x6743;&#x91CD;&#x770B;&#x505A;&#x662F;&#x8FDB;&#x8FC7;&#x7279;&#x5F81;&#x9009;&#x62E9;&#x540E;&#x7684;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x7684;&#x91CD;&#x8981;&#x6027;&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x4E58;&#x6CD5;&#x9010;&#x901A;&#x9053;&#x52A0;&#x6743;&#x5230;&#x5148;&#x524D;&#x7684;&#x7279;&#x5F81;&#x4E0A;&#xFF0C;&#x5B8C;&#x6210;&#x5728;&#x901A;&#x9053;&#x7EF4;&#x5EA6;&#x4E0A;&#x7684;&#x5BF9;&#x539F;&#x59CB;&#x7279;&#x5F81;&#x7684;&#x91CD;&#x6807;&#x5B9A;&#x3002; &#x4E0D;&#x540C;&#x5C3A;&#x5BF8;MobileNet-V3&#x7F51;&#x7EDC;&#x7ED3;&#x6784; MobileNet-V3&#x56FE;&#x50CF;&#x5206;&#x6790; TensorFlow2.0&#x5B9E;&#x73B0;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123import tensorflow as tfimport tensorflow.keras as kerasclass H_Swish(keras.layers.Layer): def __init__(self): super(H_Swish, self).__init__() def call(self, inputs, **kwargs): return inputs * tf.nn.relu6(inputs + 3) / 6class Bneck(keras.Model): def __init__(self, filters, up_dim, kernel_size=(1, 1), strides=(1, 1), squeeze=False, activation=None): super(Bneck, self).__init__() self.squeeze = squeeze self.block1 = keras.Sequential() self.block1.add(Conv_block(up_dim, activation=activation)) self.block1.add(Conv_block(kernel_size=kernel_size, strides=strides, activation=activation)) if squeeze: self.squeeze = keras.Sequential() self.squeeze.add(keras.layers.GlobalAveragePooling2D()) self.squeeze.add(keras.layers.Dense(up_dim // 4)) self.squeeze.add(keras.layers.ReLU(6)) self.squeeze.add(keras.layers.Dense(up_dim)) self.squeeze.add(H_Swish()) self.squeeze.add(keras.layers.Reshape((1, 1, up_dim))) self.multiply = keras.layers.Multiply() self.conv = Conv_block(filters) def call(self, inputs, training=None, mask=None): block1 = self.block1(inputs) if self.squeeze: squeeze = self.squeeze(block1) block1 = self.multiply([block1, squeeze]) output = self.conv(block1) if output.shape[1:] == inputs.shape[1:]: output = output + inputs return outputclass Conv_block(keras.Model): def __init__(self, filters=None, kernel_size=(1, 1), strides=(1, 1), activation=None): super(Conv_block, self).__init__() self.block = keras.Sequential() if filters: self.block.add(keras.layers.Conv2D(filters=filters, kernel_size=kernel_size, strides=strides, padding=&apos;same&apos;)) else: self.block.add(keras.layers.DepthwiseConv2D(kernel_size=kernel_size, strides=strides, padding=&apos;same&apos;)) self.block.add(keras.layers.BatchNormalization()) if activation == &apos;relu6&apos;: self.block.add(keras.layers.ReLU(6)) elif activation == &apos;h_swish&apos;: self.block.add(H_Swish()) def call(self, inputs, training=None, mask=None): return self.block(inputs)class MobileNet_v3(keras.Model): def __init__(self): super(MobileNet_v3, self).__init__() self.conv1 = keras.Sequential(name=&apos;Conv_Block1&apos;) self.conv1.add(Conv_block(16, (3, 3), (2, 2), activation=&apos;h_swish&apos;)) self.bneck1 = keras.Sequential(name=&apos;Bneck1&apos;) self.bneck1.add(Bneck(16, 16, (3, 3), activation=&apos;relu6&apos;)) self.bneck2 = keras.Sequential(name=&apos;Bneck2&apos;) self.bneck2.add(Bneck(24, 64, (3, 3), strides=(2, 2), activation=&apos;relu6&apos;)) self.bneck2.add(Bneck(24, 72, (3, 3), activation=&apos;relu6&apos;)) self.bneck3 = keras.Sequential(name=&apos;Bneck3&apos;) self.bneck3.add(Bneck(40, 72, (5, 5), strides=(2, 2), squeeze=True, activation=&apos;relu6&apos;)) self.bneck3.add(Bneck(40, 120, (5, 5), squeeze=True, activation=&apos;relu6&apos;)) self.bneck3.add(Bneck(40, 120, (5, 5), squeeze=True, activation=&apos;relu6&apos;)) self.bneck4 = keras.Sequential(name=&apos;Bneck4&apos;) self.bneck4.add(Bneck(80, 240, (3, 3), strides=(2, 2), activation=&apos;h_swish&apos;)) self.bneck4.add(Bneck(80, 200, (3, 3), activation=&apos;h_swish&apos;)) self.bneck4.add(Bneck(80, 184, (3, 3), activation=&apos;h_swish&apos;)) self.bneck4.add(Bneck(80, 184, (3, 3), activation=&apos;h_swish&apos;)) self.bneck5 = keras.Sequential(name=&apos;Bneck5&apos;) self.bneck5.add(Bneck(112, 480, (3, 3), squeeze=True, activation=&apos;h_swish&apos;)) self.bneck5.add(Bneck(112, 672, (3, 3), squeeze=True, activation=&apos;h_swish&apos;)) self.bneck6 = keras.Sequential(name=&apos;Bneck&apos;) self.bneck6.add(Bneck(160, 672, (5, 5), strides=(2, 2), squeeze=True, activation=&apos;h_swish&apos;)) self.bneck6.add(Bneck(160, 960, (5, 5), squeeze=True, activation=&apos;h_swish&apos;)) self.bneck6.add(Bneck(160, 960, (5, 5), squeeze=True, activation=&apos;h_swish&apos;)) self.conv2 = keras.Sequential(name=&apos;Conv_Block2&apos;) self.conv2.add(Conv_block(960, activation=&apos;h_swish&apos;)) self.global_average_pooling = keras.layers.GlobalAveragePooling2D(name=&apos;GlobalAveragePooling&apos;) self.reshape1 = keras.layers.Reshape((1, 1, 960), name=&apos;Reshape1&apos;) self.conv3 = keras.Sequential(name=&apos;Conv_Block3&apos;) self.conv3.add(Conv_block(1280, activation=&apos;h_swish&apos;)) self.conv3.add(keras.layers.Conv2D(1000, (1, 1))) self.softmax = keras.layers.Softmax(name=&apos;Softmax&apos;) self.reshape2 = keras.layers.Reshape((1000,), name=&apos;Reshape2&apos;) def call(self, inputs, training=None, mask=None): conv1 = self.conv1(inputs) bneck1 = self.bneck1(conv1) bneck2 = self.bneck2(bneck1) bneck3 = self.bneck3(bneck2) bneck4 = self.bneck4(bneck3) bneck5 = self.bneck5(bneck4) bneck6 = self.bneck6(bneck5) conv2 = self.conv2(bneck6) global_average_pooling = self.global_average_pooling(conv2) reshape = self.reshape1(global_average_pooling) conv3 = self.conv3(reshape) softmax = self.softmax(conv3) output = self.reshape2(softmax) return outputif __name__ == &apos;__main__&apos;: model = MobileNet_V3() model.build(input_shape=(None, 224, 224, 3)) model.summary() MobileNet-V3&#x5C0F;&#x7ED3;&#x2003;&#x2003;MobileNet-V3&#x662F;&#x4E00;&#x79CD;&#x590D;&#x6742;&#x7684;&#x8F7B;&#x91CF;&#x7EA7;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;MobileNet-V3&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;5M&#xFF0C;&#x5176;&#x5728;MobileNet-V2&#x7684;&#x57FA;&#x7840;&#x4E0A;&#x52A0;&#x5165;&#x4E86;&#x5927;&#x91CF;&#x9ED1;&#x79D1;&#x6280;&#xFF0C;&#x56E0;&#x6B64;&#x83B7;&#x5F97;&#x4E86;&#x66F4;&#x597D;&#x7684;&#x6548;&#x679C;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>特征提取网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MobileNet-V2]]></title>
    <url>%2F2020%2F03%2F22%2Ffeature_extraction%20MobileNet_V2%2F</url>
    <content type="text"><![CDATA[MobileNet-V2 &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;MobileNet-V2:&#x662F;MobileNet&#x7684;&#x5347;&#x7EA7;&#x7248;&#x672C;&#xFF0C;Google&#x516C;&#x53F8;&#x4E8E;2018&#x5E74;&#x63D0;&#x51FA;&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x7ED3;&#x6784;&#x7B80;&#x5355;&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x8F83;&#x5C11;&#x7684;&#x8F7B;&#x91CF;&#x7EA7;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#x6A21;&#x578B;&#x3002; MobileNet-V2&#x7279;&#x70B9;&#x2003;&#x2003;&#x4FDD;&#x7559;MobileNet&#x7684;SeparableConv&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x7ED3;&#x6784;&#xFF0C;&#x5E76;&#x4E14;&#x5728;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x524D;&#x901A;&#x8FC7;1x1&#x5377;&#x79EF;&#x63D0;&#x5347;&#x901A;&#x9053;&#x6570;&#x3002;&#x2003;&#x2003;&#x5F15;&#x5165;&#x4E86;&#x53CD;&#x6B8B;&#x5DEE;&#x7ED3;&#x6784;&#xFF0C;&#x501F;&#x9274;&#x4E86;ResNet&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x8054;&#x7CFB;&#x4E86;&#x4E0D;&#x540C;&#x5C3A;&#x5EA6;&#x7684;&#x7279;&#x5F81;&#x2003;&#x2003;&#x5F15;&#x5165;&#x4E86;&#x7EBF;&#x6027;&#x74F6;&#x9888;&#x7ED3;&#x6784;&#xFF0C;&#x5728;&#x6B8B;&#x5DEE;&#x76F8;&#x52A0;&#x524D;&#x4E0D;&#x4F7F;&#x7528;ReLU6&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#xFF0C;&#x907F;&#x514D;&#x7834;&#x574F;&#x7279;&#x5F81; Separable Convolution&#x2003;&#x2003;Separable Convolution(&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)&#xFF1A;&#x662F;&#x4E0A;&#x9762;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x5408;&#x4E8C;&#x4E3A;&#x4E00;&#x7684;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x3002;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x6B65;&#xFF1A;DepthwiseConv&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x8FDB;&#x884C;&#x5377;&#x79EF;&#x2003;&#x2003;&#x7B2C;&#x4E8C;&#x6B65;&#xFF1A;PointwiseConv&#xFF0C;&#x5BF9;&#x7B2C;&#x4E00;&#x6B65;&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#x8FDB;&#x884C;1x1&#x5377;&#x79EF;&#xFF0C;&#x5B9E;&#x73B0;&#x901A;&#x9053;&#x878D;&#x5408;&#x2003;&#x2003;&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;&#x8C03;&#x6574;&#x4E3A;&#x4EFB;&#x610F;&#x5408;&#x9002;&#x7684;&#x901A;&#x9053;&#x6570;&#x3002;&#x7B2C;&#x4E00;&#x6B65;&#x7684;&#x76EE;&#x7684;&#x662F;&#x51CF;&#x5C11;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x7B2C;&#x4E8C;&#x6B65;&#x662F;&#x8C03;&#x6574;&#x901A;&#x9053;&#x6570;&#xFF0C;&#x56E0;&#x6B64;&#x5C06;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x7ED3;&#x5408;&#xFF0C;&#x7EC4;&#x6210;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x3002; MobileNet-V2&#x56FE;&#x50CF;&#x5206;&#x6790; TensorFlow2.0&#x5B9E;&#x73B0;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485import tensorflow as tfimport tensorflow.keras as kerasclass Block(keras.Model): def __init__(self, filters, t, s=(1, 1), name=&apos;Block&apos;): super(Block, self).__init__() self.blocks = keras.Sequential(name=name) self.blocks.add(keras.layers.Conv2D(t * filters, (1, 1))) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU(6)) self.blocks.add(keras.layers.DepthwiseConv2D((3, 3), strides=s, padding=&apos;same&apos;)) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU(6)) self.blocks.add(keras.layers.Conv2D(filters, (1, 1))) self.blocks.add(keras.layers.BatchNormalization()) def call(self, inputs, training=None, mask=None): output = self.blocks(inputs) if output.shape == inputs.shape: output += inputs return outputdef add_block(filters, t, s, name, times): block = keras.Sequential(name=name) block.add(Block(filters, t, s)) for i in range(times - 1): block.add(Block(filters, t)) return blockclass MobileNet_v2(keras.Model): def __init__(self): super(MobileNet_v2, self).__init__() self.zeropadding = keras.layers.ZeroPadding2D((1, 1), name=&apos;Zero_Padding&apos;) self.conv1 = keras.layers.Conv2D(32, (3, 3), strides=(2, 2), padding=&apos;same&apos;, name=&apos;Conv1&apos;) self.bn1 = keras.layers.BatchNormalization(name=&apos;BatchNormalization2&apos;) self.relu1 = keras.layers.ReLU(6, name=&apos;Relu6&apos;) self.blocks1 = add_block(16, 1, (1, 1), &apos;Block1&apos;, 1) self.blocks2 = add_block(24, 6, (2, 2), &apos;Block2&apos;, 2) self.blocks3 = add_block(32, 6, (2, 2), &apos;Block3&apos;, 3) self.blocks4 = add_block(64, 6, (1, 1), &apos;Block4&apos;, 4) self.blocks5 = add_block(96, 6, (2, 2), &apos;Block5&apos;, 3) self.blocks6 = add_block(160, 6, (2, 2), &apos;Block6&apos;, 3) self.blocks7 = add_block(320, 6, (1, 1), &apos;Block7&apos;, 1) self.conv2 = keras.layers.Conv2D(1280, (1, 1), name=&apos;Conv2&apos;) self.bn2 = keras.layers.BatchNormalization(name=&apos;BatchNormalization2&apos;) self.relu2 = keras.layers.ReLU(6, name=&apos;Relu6&apos;) self.global_average_pool = keras.layers.GlobalAveragePooling2D(name=&apos;Global_average_pooling&apos;) self.dense = keras.layers.Dense(1000, activation=&apos;softmax&apos;) def call(self, inputs, training=None, mask=None): zeropadding = self.zeropadding(inputs) conv1 = self.conv1(zeropadding) bn1 = self.bn1(conv1) relu1 = self.relu1(bn1) blocks1 = self.blocks1(relu1) blocks2 = self.blocks2(blocks1) blocks3 = self.blocks3(blocks2) blocks4 = self.blocks4(blocks3) blocks5 = self.blocks5(blocks4) blocks6 = self.blocks6(blocks5) blocks7 = self.blocks7(blocks6) conv2 = self.conv2(blocks7) bn2 = self.bn2(conv2) relu2 = self.relu2(bn2) global_average_pool = self.global_average_pool(relu2) output = self.dense(global_average_pool) return outputif __name__ == &apos;__main__&apos;: model = MobileNet_V2() model.build(input_shape=(None, 224, 224, 3)) model.summary() MobileNet-V2&#x5C0F;&#x7ED3;&#x2003;&#x2003;MobileNet-V2&#x662F;&#x4E00;&#x79CD;&#x9AD8;&#x6548;&#x7684;&#x8F7B;&#x91CF;&#x7EA7;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;MobileNet-V2&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x548C;MobileNet&#x51E0;&#x4E4E;&#x76F8;&#x540C;&#xFF0C;&#x90FD;&#x662F;4M&#x7684;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x56E0;&#x4E3A;&#x5176;&#x7ED3;&#x5408;&#x4E86;&#x4E0D;&#x540C;&#x5C3A;&#x5EA6;&#x7684;&#x7279;&#x5F81;&#xFF0C;&#x56E0;&#x6B64;&#x6548;&#x679C;&#x4F18;&#x4E8E;MobileNet&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>特征提取网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MobileNet]]></title>
    <url>%2F2020%2F03%2F20%2Ffeature_extraction%20MobileNet%2F</url>
    <content type="text"><![CDATA[MobileNet &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;MobileNet:&#x662F;2017&#x5E74;Google&#x9488;&#x5BF9;&#x624B;&#x673A;&#x7B49;&#x5D4C;&#x5165;&#x5F0F;&#x8BBE;&#x5907;&#x63D0;&#x51FA;&#x7684;&#x4E00;&#x79CD;&#x8F7B;&#x91CF;&#x7EA7;&#x7684;&#x6DF1;&#x5C42;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;&#x6545;&#x79F0;&#x4E4B;&#x4E3A;MobileNet&#xFF0C;&#x7531;&#x4E8E;&#x5176;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x7B80;&#x5355;&#xFF0C;&#x73B0;&#x5728;&#x4ECD;&#x7136;&#x5177;&#x6709;&#x5F88;&#x597D;&#x7684;&#x9002;&#x7528;&#x6027;&#x3002; MobileNet&#x7279;&#x70B9;&#x2003;&#x2003;&#x7ED3;&#x6784;&#x548C;VGG&#x7C7B;&#x4F3C;&#xFF0C;&#x53EA;&#x662F;&#x5C06;&#x6807;&#x51C6;&#x5377;&#x79EF;&#x6362;&#x6210;SeparableConv&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x2003;&#x2003;&#x5F15;&#x5165;ReLU6&#x4EE3;&#x66FF;ReLU&#xFF0C;&#x4F7F;&#x5F97;&#x5927;&#x4E8E;0&#x7684;&#x6570;&#x503C;&#x4E5F;&#x5177;&#x6709;&#x975E;&#x7EBF;&#x6027; Separable Convolution&#x2003;&#x2003;Separable Convolution(&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)&#xFF1A;&#x662F;&#x4E0A;&#x9762;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x5408;&#x4E8C;&#x4E3A;&#x4E00;&#x7684;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x3002;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x6B65;&#xFF1A;DepthwiseConv&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x8FDB;&#x884C;&#x5377;&#x79EF;&#x2003;&#x2003;&#x7B2C;&#x4E8C;&#x6B65;&#xFF1A;PointwiseConv&#xFF0C;&#x5BF9;&#x7B2C;&#x4E00;&#x6B65;&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#x8FDB;&#x884C;1x1&#x5377;&#x79EF;&#xFF0C;&#x5B9E;&#x73B0;&#x901A;&#x9053;&#x878D;&#x5408;&#x2003;&#x2003;&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;&#x8C03;&#x6574;&#x4E3A;&#x4EFB;&#x610F;&#x5408;&#x9002;&#x7684;&#x901A;&#x9053;&#x6570;&#x3002;&#x7B2C;&#x4E00;&#x6B65;&#x7684;&#x76EE;&#x7684;&#x662F;&#x51CF;&#x5C11;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x7B2C;&#x4E8C;&#x6B65;&#x662F;&#x8C03;&#x6574;&#x901A;&#x9053;&#x6570;&#xFF0C;&#x56E0;&#x6B64;&#x5C06;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x7ED3;&#x5408;&#xFF0C;&#x7EC4;&#x6210;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x3002; MobileNet&#x56FE;&#x50CF;&#x5206;&#x6790; TensorFlow2.0&#x5B9E;&#x73B0;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364import tensorflow as tfimport tensorflow.keras as kerasclass Block(keras.Model): def __init__(self, filters, strides, name=&apos;Block&apos;): super(Block, self).__init__() self.blocks = keras.Sequential(name=name) self.blocks.add(keras.layers.DepthwiseConv2D((3, 3), strides=strides, padding=&apos;same&apos;)) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU(6)) self.blocks.add(keras.layers.Conv2D(filters, (1, 1))) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU(6)) def call(self, inputs, training=None, mask=None): return self.blocks(inputs)class MobileNet(keras.Model): def __init__(self): super(MobileNet, self).__init__() self.conv1 = keras.layers.Conv2D(32, (3, 3), strides=(2, 2), padding=&apos;same&apos;, name=&apos;Conv&apos;) self.bn1 = keras.layers.BatchNormalization(name=&apos;BatchNormalization&apos;) self.relu1 = keras.layers.ReLU(6, name=&apos;Relu&apos;) self.blocks = keras.Sequential(name=&apos;Block&apos;) self.blocks.add(Block(64, (1, 1))) self.blocks.add(Block(128, (2, 2))) self.blocks.add(Block(128, (1, 1))) self.blocks.add(Block(256, (2, 2))) self.blocks.add(Block(256, (1, 1))) self.blocks.add(Block(512, (2, 2))) for i in range(5): self.blocks.add(Block(512, (1, 1))) self.blocks.add(Block(1024, (2, 2))) self.blocks.add(Block(1024, (1, 1))) self.global_average_pool = keras.layers.GlobalAveragePooling2D(name=&apos;Global_average_pooling&apos;) self.reshape1 = keras.layers.Reshape((1, 1, 1024), name=&apos;Reshape&apos;) self.dropout = keras.layers.Dropout(0.2, name=&apos;Dropout&apos;) self.conv2 = keras.layers.Conv2D(1000, (1, 1), name=&apos;Conv&apos;) self.reshape2 = keras.layers.Reshape((1000, ), name=&apos;Reshape&apos;) self.softmax = keras.layers.Softmax(name=&apos;softmax&apos;) def call(self, inputs, training=None, mask=None): conv1 = self.conv1(inputs) bn1 = self.bn1(conv1) relu1 = self.relu1(bn1) blocks = self.blocks(relu1) global_average_pool = self.global_average_pool(blocks) reshape1 = self.reshape1(global_average_pool) dropout = self.dropout(reshape1) conv2 = self.conv2(dropout) reshape2 = self.reshape2(conv2) output = self.softmax(reshape2) return outputif __name__ == &apos;__main__&apos;: model = MobileNet() model.build(input_shape=(None, 224, 224, 3)) model.summary() MobileNet&#x5C0F;&#x7ED3;&#x2003;&#x2003;MobileNet&#x662F;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x7684;&#x8F7B;&#x91CF;&#x7EA7;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;MobileNet&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x53EA;&#x6709;4M&#xFF0C;&#x5728;&#x79FB;&#x52A8;&#x8BBE;&#x5907;&#x4E2D;&#x6709;&#x826F;&#x597D;&#x8868;&#x73B0;&#xFF0C;&#x6709;&#x65F6;&#x4E5F;&#x53EF;&#x4F5C;&#x4E3A;&#x66FF;&#x4EE3;VGG&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>特征提取网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SqueezeNet]]></title>
    <url>%2F2020%2F03%2F18%2Ffeature_extraction%20SqueezeNet%2F</url>
    <content type="text"><![CDATA[SqueezeNet &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;SqueezeNet:&#x662F;&#x4E00;&#x79CD;&#x8F7B;&#x91CF;&#x7EA7;&#x6DF1;&#x5EA6;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x6A21;&#x578B;&#xFF0C;&#x5728;2017&#x5E74;&#x53D1;&#x8868;&#x4E8E;ICLR&#xFF0C;&#x4F5C;&#x8005;&#x6765;&#x81EA;Berkeley&#x548C;Stanford&#xFF0C;&#x5176;&#x53EA;&#x7528;1/50&#x7684;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x53EF;&#x4EE5;&#x8FBE;&#x5230;&#x4E0E;AlexNet&#x76F8;&#x540C;&#x7684;&#x7CBE;&#x5EA6;&#xFF0C;&#x5176;&#x6838;&#x5FC3;&#x7ED3;&#x6784;&#x4E3A;Fire Module&#x3002; SqueezeNet&#x7279;&#x70B9;&#x2003;&#x2003;&#x5F15;&#x5165;Fire Module&#xFF0C;&#x6839;&#x636E;&#x964D;&#x7EF4;&#x601D;&#x60F3;&#xFF0C;&#x5148;&#x901A;&#x8FC7;1x1&#x7684;&#x5377;&#x79EF;&#x6838;&#x5BF9;&#x53C2;&#x6570;&#x91CF;&#x8FDB;&#x884C;&#x538B;&#x7F29;&#xFF0C;&#x7136;&#x540E;&#x91C7;&#x7528;&#x4E86;Inception&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x8FDB;&#x884C;&#x591A;&#x8DEF;&#x878D;&#x5408;&#x3002; SqueezeNet&#x56FE;&#x50CF;&#x5206;&#x6790; TensorFlow2.0&#x5B9E;&#x73B0;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172import tensorflow as tfimport tensorflow.keras as kerasclass Fire_Block(keras.Model): def __init__(self, s1, e1, e3): super(Fire_Block, self).__init__() self.conv = keras.layers.Conv2D(s1, (1, 1), activation=&apos;relu&apos;) self.conv2_1 = keras.layers.Conv2D(e1, (1, 1), activation=&apos;relu&apos;) self.conv2_2 = keras.layers.Conv2D(e3, (3, 3), padding=&apos;same&apos;, activation=&apos;relu&apos;) self.concatenate = keras.layers.Concatenate() def call(self, inputs, training=None, mask=None): s1 = self.conv(inputs) e1 = self.conv2_1(s1) e3 = self.conv2_2(s1) output = self.concatenate([e1, e3]) return outputclass SqueezeNet(keras.Model): def __init__(self): super(SqueezeNet, self).__init__() self.conv1 = keras.layers.Conv2D(96, (7, 7), (2, 2), padding=&apos;same&apos;, activation=&apos;relu&apos;, name=&apos;Conv1&apos;) self.maxpooling = keras.layers.MaxPool2D((3, 3), (2, 2), name=&apos;MaxPooling&apos;) self.block1 = keras.Sequential(name=&apos;Fire_Block1&apos;) self.block1.add(Fire_Block(16, 64, 64)) self.block1.add(Fire_Block(16, 64, 64)) self.block2 = keras.Sequential(name=&apos;Fire_Block2&apos;) self.block2.add(Fire_Block(32, 128, 128)) self.block2.add(keras.layers.MaxPool2D((3, 3), (2, 2))) self.block2.add(Fire_Block(32, 128, 128)) self.block3 = keras.Sequential(name=&apos;Fire_Block3&apos;) self.block3.add(Fire_Block(48, 192, 192)) self.block3.add(Fire_Block(48, 192, 192)) self.block4 = keras.Sequential(name=&apos;Fire_Block4&apos;) self.block4.add(Fire_Block(64, 256, 256)) self.block4.add(keras.layers.MaxPool2D((3, 3), (2, 2))) self.block4.add(Fire_Block(64, 256, 256)) self.dropout = keras.layers.Dropout(0.5, name=&apos;Dropout&apos;) self.conv2 = keras.layers.Conv2D(1000, (1, 1), activation=&apos;relu&apos;) self.global_average_pooling = keras.layers.GlobalAveragePooling2D(name=&apos;GlobalAveragePooling&apos;) self.softmax = keras.layers.Softmax(name=&apos;Softmax&apos;) def call(self, inputs, training=None, mask=None): conv1 = self.conv1(inputs) maxpooling = self.maxpooling(conv1) block1 = self.block1(maxpooling) block2 = self.block2(block1) block3 = self.block3(block2) block4 = self.block4(block3) dropout = self.dropout(block4) conv2 = self.conv2(dropout) global_average_pooling = self.global_average_pooling(conv2) output = self.softmax(global_average_pooling) return outputif __name__ == &apos;__main__&apos;: model = SqueezeNet() model.build(input_shape=(None, 224, 224, 3)) model.summary() SqueezeNet&#x5C0F;&#x7ED3;&#x2003;&#x2003;SqueezeNet&#x662F;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x7684;&#x8F7B;&#x91CF;&#x7EA7;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;SqueezeNet&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x53EA;&#x6709;1M&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x67D0;&#x4E9B;&#x7279;&#x6B8A;&#x573A;&#x5408;&#x4E2D;&#x80FD;&#x591F;&#x53D1;&#x6325;&#x51FA;&#x5F88;&#x597D;&#x7684;&#x6548;&#x679C;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>特征提取网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SENet]]></title>
    <url>%2F2020%2F03%2F17%2Ffeature_extraction%20SENet%2F</url>
    <content type="text"><![CDATA[SENet &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;SENet:&#x662F;2017&#x5E74;&#x53D1;&#x8868;&#x5728;CVPR&#x4E0A;&#x7684;&#x4E00;&#x4E2A;&#x6A21;&#x578B;&#xFF0C;&#x4E5F;&#x662F;&#x6700;&#x540E;&#x4E00;&#x5C4A;ImageNet 2017&#x7ADE;&#x8D5B;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x7684;&#x51A0;&#x519B;&#xFF0C;&#x5176;&#x521B;&#x65B0;&#x70B9;&#x662F;&#x5F15;&#x5165;&#x4E86;&#x6CE8;&#x610F;&#x529B;Squeeze-and-Excitation (SE)&#x6A21;&#x5757;&#x3002; SENet&#x7279;&#x70B9;&#x2003;&#x2003;&#x5F15;&#x5165;&#x4E86;&#x6CE8;&#x610F;&#x529B;Squeeze-and-Excitation(SE)&#x6A21;&#x5757;&#x2003;&#x2003;&#x7531;&#x4E8E;SE&#x6A21;&#x5757;&#x7B80;&#x5355;&#x6709;&#x6548;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x5F88;&#x5BB9;&#x6613;&#x7684;&#x548C;&#x5176;&#x4ED6;&#x6A21;&#x578B;&#x8026;&#x5408;&#xFF0C;&#x548C;ResNet&#x8026;&#x5408;&#x53D8;&#x6210;SE-ResNet&#xFF0C;&#x548C;Inception-V3&#x8026;&#x5408;&#x53D8;&#x6210;SE-Inception-V3&#x7B49;&#x7B49; Squeeze-and-Excitation&#x2003;&#x2003;Squeeze-and-Excitation&#xFF1A;&#x53C8;&#x79F0;&#x4E3A;&#x7279;&#x5F81;&#x91CD;&#x6807;&#x5B9A;&#x5377;&#x79EF;&#xFF0C;&#x6216;&#x8005;&#x6CE8;&#x610F;&#x529B;&#x673A;&#x5236;&#x3002;&#x5177;&#x4F53;&#x6765;&#x8BF4;&#xFF0C;&#x5C31;&#x662F;&#x901A;&#x8FC7;&#x5B66;&#x4E60;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x81EA;&#x52A8;&#x83B7;&#x53D6;&#x5230;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x7684;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;&#xFF0C;&#x7136;&#x540E;&#x4F9D;&#x7167;&#x8FD9;&#x4E2A;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;&#x53BB;&#x63D0;&#x5347;&#x6709;&#x7528;&#x7684;&#x7279;&#x5F81;&#x5E76;&#x6291;&#x5236;&#x5BF9;&#x5F53;&#x524D;&#x4EFB;&#x52A1;&#x7528;&#x5904;&#x4E0D;&#x5927;&#x7684;&#x7279;&#x5F81;&#x3002;&#x2003;&#x2003;&#x9996;&#x5148;&#x662F; Squeeze&#x64CD;&#x4F5C;&#xFF0C;&#x5148;&#x8FDB;&#x884C;&#x5168;&#x5C40;&#x6C60;&#x5316;&#xFF0C;&#x5177;&#x6709;&#x5168;&#x5C40;&#x7684;&#x611F;&#x53D7;&#x91CE;&#xFF0C;&#x5E76;&#x4E14;&#x8F93;&#x51FA;&#x7684;&#x7EF4;&#x5EA6;&#x548C;&#x8F93;&#x5165;&#x7684;&#x7279;&#x5F81;&#x901A;&#x9053;&#x6570;&#x76F8;&#x5339;&#x914D;&#xFF0C;&#x5B83;&#x8868;&#x5F81;&#x7740;&#x5728;&#x7279;&#x5F81;&#x901A;&#x9053;&#x4E0A;&#x54CD;&#x5E94;&#x7684;&#x5168;&#x5C40;&#x5206;&#x5E03;&#x3002;&#x2003;&#x2003;&#x7136;&#x540E;&#x662F;Excitation&#x64CD;&#x4F5C;&#xFF0C;&#x901A;&#x8FC7;&#x5168;&#x8FDE;&#x63A5;&#x5C42;&#x4E3A;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x751F;&#x6210;&#x6743;&#x91CD;&#xFF0C;&#x5EFA;&#x7ACB;&#x901A;&#x9053;&#x95F4;&#x7684;&#x76F8;&#x5173;&#x6027;&#xFF0C;&#x8F93;&#x51FA;&#x7684;&#x6743;&#x91CD;&#x770B;&#x505A;&#x662F;&#x8FDB;&#x8FC7;&#x7279;&#x5F81;&#x9009;&#x62E9;&#x540E;&#x7684;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x9053;&#x7684;&#x91CD;&#x8981;&#x6027;&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x4E58;&#x6CD5;&#x9010;&#x901A;&#x9053;&#x52A0;&#x6743;&#x5230;&#x5148;&#x524D;&#x7684;&#x7279;&#x5F81;&#x4E0A;&#xFF0C;&#x5B8C;&#x6210;&#x5728;&#x901A;&#x9053;&#x7EF4;&#x5EA6;&#x4E0A;&#x7684;&#x5BF9;&#x539F;&#x59CB;&#x7279;&#x5F81;&#x7684;&#x91CD;&#x6807;&#x5B9A;&#x3002; SE-ResNet50&#x56FE;&#x50CF;&#x5206;&#x6790; TensorFlow2.0&#x5B9E;&#x73B0;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990import tensorflow as tfimport tensorflow.keras as kerasclass SE_Block(keras.Model): def __init__(self, out_channel): super(SE_Block, self).__init__() self.squeeze = keras.Sequential() self.squeeze.add(keras.layers.GlobalAveragePooling2D()) self.squeeze.add(keras.layers.Dense(out_channel // 16)) self.squeeze.add(keras.layers.ReLU()) self.squeeze.add(keras.layers.Dense(out_channel)) def call(self, inputs, training=None, mask=None): squeeze = self.squeeze(inputs) sigmoid = tf.nn.sigmoid(squeeze) reshape = tf.reshape(sigmoid, (-1, 1, 1, inputs.shape[-1])) output = inputs * reshape return outputclass Block(keras.Model): def __init__(self, filters, strides=(1, 1), name=&apos;Conv_Block&apos;, type=&apos;Conv_Block&apos;): super(Block, self).__init__() self.blocks = keras.Sequential(name=name) self.blocks.add(keras.layers.Conv2D(filters // 4, (1, 1))) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU()) self.blocks.add(keras.layers.Conv2D(filters // 4, (3, 3), strides, padding=&apos;same&apos;)) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU()) self.blocks.add(keras.layers.Conv2D(filters, (1, 1))) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(SE_Block(filters)) self.conv = keras.layers.Conv2D(filters, (1, 1), strides) self.relu = keras.layers.ReLU() self.type = type def call(self, inputs, training=None, mask=None): blocks = self.blocks(inputs) if self.type == &apos;Conv_Block&apos;: inputs = self.conv(inputs) blocks = self.relu(blocks + inputs) return blocksdef add_block(filters, strides=(1, 1), name=&apos;Block&apos;, times=1): block = keras.Sequential(name=name) block.add(Block(filters, strides)) for i in range(times - 1): block.add(Block(filters, type=&apos;identity_block&apos;)) return blockclass SE_ResNet50(keras.Model): def __init__(self): super(SE_ResNet50, self).__init__() self.zeropadding = keras.layers.ZeroPadding2D((3, 3), name=&apos;Zero_Padding&apos;) self.conv1 = keras.layers.Conv2D(64, (7, 7), (2, 2), name=&apos;Conv2d&apos;) self.bn1 = keras.layers.BatchNormalization(name=&apos;BatchNormalization&apos;) self.relu1 = keras.layers.ReLU(name=&apos;Relu&apos;) self.max_pooling = keras.layers.MaxPool2D((3, 3), (2, 2), padding=&apos;same&apos;, name=&apos;Max_Pooling&apos;) self.block1 = add_block(256, name=&apos;Block1&apos;, times=3) self.block2 = add_block(512, strides=(2, 2), name=&apos;Block2&apos;, times=4) self.block3 = add_block(1024, strides=(2, 2), name=&apos;Block3&apos;, times=6) self.block4 = add_block(2048, strides=(2, 2), name=&apos;Block4&apos;, times=3) self.average_pooling = keras.layers.GlobalAveragePooling2D(name=&apos;Average_Pooling&apos;) self.dense = keras.layers.Dense(1000, activation=&apos;softmax&apos;, name=&apos;Dense&apos;) def call(self, inputs, training=None, mask=None): zeropadding = self.zeropadding(inputs) conv1 = self.conv1(zeropadding) bn1 = self.bn1(conv1) relu1 = self.relu1(bn1) max_pooling = self.max_pooling(relu1) block1 = self.block1(max_pooling) block2 = self.block2(block1) block3 = self.block3(block2) block4 = self.block4(block3) average_pooling = self.average_pooling(block4) out_put = self.dense(average_pooling) return out_putif __name__ == &apos;__main__&apos;: model = SE_ResNet50() model.build(input_shape=(None, 224, 224, 3)) model.summary() SENet&#x5C0F;&#x7ED3;&#x2003;&#x2003;SENet&#x662F;&#x4E00;&#x79CD;&#x975E;&#x5E38;&#x597D;&#x7684;&#x601D;&#x8DEF;&#xFF0C;&#x5176;&#x6A21;&#x578B;&#x53C2;&#x6570;&#x9700;&#x8981;&#x6839;&#x636E;&#x9009;&#x62E9;&#x7684;&#x8026;&#x5408;&#x6A21;&#x578B;&#x786E;&#x5B9A;&#xFF0C;&#x5982;&#x679C;&#x8026;&#x5408;&#x6A21;&#x578B;&#x4E3A;SE-ResNet50&#xFF0C;&#x5219;&#x53C2;&#x6570;&#x91CF;&#x4E3A;28M&#xFF0C;&#x5176;&#x6CE8;&#x610F;&#x529B;&#x673A;&#x5236;&#x975E;&#x5E38;&#x6709;&#x6548;&#xFF0C;&#x4E3A;MobileNet-V3&#x7684;&#x53D1;&#x5C55;&#xFF0C;EfficientNet&#xFF0C;GhostNet&#x7B49;&#x7F51;&#x7EDC;&#x8D77;&#x5230;&#x4E86;&#x63A8;&#x52A8;&#x4F5C;&#x7528;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>特征提取网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[DenseNet]]></title>
    <url>%2F2020%2F03%2F16%2Ffeature_extraction%20DenseNet%2F</url>
    <content type="text"><![CDATA[DenseNet &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;DenseNet:&#x4F5C;&#x4E3A;CVPR2017&#x5E74;&#x7684;Best Paper&#xFF0C;DenseNet&#x8131;&#x79BB;&#x4E86;&#x52A0;&#x6DF1;&#x7F51;&#x7EDC;&#x5C42;&#x6570;(ResNet)&#x548C;&#x52A0;&#x5BBD;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;(Inception)&#x6765;&#x63D0;&#x5347;&#x7F51;&#x7EDC;&#x6027;&#x80FD;&#x7684;&#x5B9A;&#x5F0F;&#x601D;&#x7EF4;&#xFF0C;&#x901A;&#x8FC7;&#x7279;&#x5F81;&#x91CD;&#x7528;&#x548C;&#x65C1;&#x8DEF;,&#x65E2;&#x5927;&#x5E45;&#x5EA6;&#x51CF;&#x5C11;&#x4E86;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;,&#x53C8;&#x5728;&#x4E00;&#x5B9A;&#x7A0B;&#x5EA6;&#x4E0A;&#x7F13;&#x89E3;&#x4E86;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x95EE;&#x9898;&#x7684;&#x4EA7;&#x751F;&#x3002; DenseNet&#x7279;&#x70B9;&#x2003;&#x2003;&#x540C;&#x6837;&#x6DF1;&#x5EA6;&#x7684;DenseNet&#x6240;&#x9700;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x76F8;&#x6BD4;ResNet&#x5927;&#x5E45;&#x51CF;&#x5C11;&#x2003;&#x2003;Dense Block&#x7C7B;&#x4F3C;&#x4E8E;ResNet&#x4E2D;&#x7684;Identity Block&#xFF0C;Transition Block&#x7C7B;&#x4F3C;&#x4E8E;ResNet&#x4E2D;&#x7684;Conv Block&#x2003;&#x2003;&#x7ED3;&#x6784;&#x7B80;&#x5355;&#xFF0C;&#x7EFC;&#x5408;&#x4E86;&#x4E0D;&#x540C;&#x5C3A;&#x5EA6;&#x7684;&#x611F;&#x53D7;&#x91CE;&#xFF0C;&#x63D0;&#x5347;&#x7F51;&#x7EDC;&#x6027;&#x80FD; &#x4E0D;&#x540C;&#x5C3A;&#x5BF8;DenseNet&#x7F51;&#x7EDC;&#x7ED3;&#x6784; DenseNet121&#x56FE;&#x50CF;&#x5206;&#x6790; TensorFlow2.0&#x5B9E;&#x73B0;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596import tensorflow as tfimport tensorflow.keras as kerasclass DenseBlock(keras.Model): def __init__(self): super(DenseBlock, self).__init__() self.block = keras.Sequential() self.block.add(Conv_block(128)) self.block.add(Conv_block(32, (3, 3))) self.concatenate = keras.layers.Concatenate() def call(self, inputs, training=None, mask=None): return self.concatenate([inputs, self.block(inputs)])class TransitionBlock(keras.Model): def __init__(self, filters): super(TransitionBlock, self).__init__() self.block = keras.Sequential() self.block.add(Conv_block(filters)) self.block.add(keras.layers.AveragePooling2D()) self.filters = filters def call(self, inputs, training=None, mask=None): return self.block(inputs)class Conv_block(keras.Model): def __init__(self, filters, kernel_size=(1, 1), strides=(1, 1), padding=&apos;same&apos;, name=&apos;Conv_Block&apos;): super(Conv_block, self).__init__() self.block = keras.Sequential(name=name) self.block.add(keras.layers.Conv2D(filters=filters, kernel_size=kernel_size, strides=strides, padding=padding)) self.block.add(keras.layers.BatchNormalization()) self.block.add(keras.layers.ReLU()) def call(self, inputs, training=None, mask=None): return self.block(inputs)class DenseNet121(keras.Model): def __init__(self): super(DenseNet121, self).__init__() self.zeropadding1 = keras.layers.ZeroPadding2D((3, 3), name=&apos;Zero_Padding1&apos;) self.conv = keras.layers.Conv2D(64, (7, 7), (2, 2), name=&apos;Conv&apos;) self.bn = keras.layers.BatchNormalization(name=&apos;BatchNormalization&apos;) self.relu = keras.layers.ReLU(name=&apos;Relu&apos;) self.zeropadding2 = keras.layers.ZeroPadding2D((1, 1), name=&apos;Zero_Padding2&apos;) self.maxpooling = keras.layers.MaxPool2D((3, 3), (2, 2), name=&apos;Max_Pooling&apos;) self.block1 = keras.Sequential(name=&apos;Block1&apos;) for i in range(6): self.block1.add(DenseBlock()) self.block1.add(TransitionBlock(128)) self.block2 = keras.Sequential(name=&apos;Block2&apos;) for i in range(12): self.block2.add(DenseBlock()) self.block2.add(TransitionBlock(256)) self.block3 = keras.Sequential(name=&apos;Block3&apos;) for i in range(24): self.block3.add(DenseBlock()) self.block3.add(TransitionBlock(512)) self.block4 = keras.Sequential(name=&apos;Block4&apos;) for i in range(16): self.block4.add(DenseBlock()) self.global_average_pooling = keras.layers.GlobalAveragePooling2D(name=&apos;Average_Pooling&apos;) self.dense = keras.layers.Dense(1000, activation=&apos;softmax&apos;, name=&apos;Dense&apos;) def call(self, inputs, training=None, mask=None): zeropadding1 = self.zeropadding1(inputs) conv = self.conv(zeropadding1) bn = self.bn(conv) relu = self.relu(bn) zeropadding2 = self.zeropadding2(relu) maxpooling = self.maxpooling(zeropadding2) block1 = self.block1(maxpooling) block2 = self.block2(block1) block3 = self.block3(block2) block4 = self.block4(block3) global_average_pooling = self.global_average_pooling(block4) out_put = self.dense(global_average_pooling) return out_putif __name__ == &apos;__main__&apos;: model = DenseNet() model.build(input_shape=(None, 224, 224, 3)) model.summary() DenseNet&#x5C0F;&#x7ED3;&#x2003;&#x2003;DenseNet&#x662F;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x4E5F;&#x662F;&#x4E00;&#x79CD;&#x975E;&#x5E38;&#x6709;&#x6548;&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x6A21;&#x578B;&#x3002;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;DenseNet121&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x53EA;&#x6709;8M&#xFF0C;&#x751A;&#x81F3;&#x662F;ResNet50&#x7684;&#x53C2;&#x6570;&#x91CF;&#x7684;&#x4E09;&#x5206;&#x4E4B;&#x4E00;&#xFF0C;&#x56E0;&#x6B64;&#x5B9E;&#x9645;&#x4EFB;&#x52A1;&#x4E2D;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;DenseNet&#x4F5C;&#x4E3A;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#xFF0C;&#x65E2;&#x9AD8;&#x6548;&#x53C8;&#x8282;&#x7EA6;&#x5185;&#x5B58;&#x548C;&#x8BA1;&#x7B97;&#x91CF;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>特征提取网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Xception]]></title>
    <url>%2F2020%2F03%2F14%2Ffeature_extraction%20Xception%2F</url>
    <content type="text"><![CDATA[Xception &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;Xception:&#x662F;&#x8C37;&#x6B4C;&#x516C;&#x53F8;&#x5BF9;Inception-V3&#x7684;&#x6539;&#x8FDB;&#xFF0C;&#x88AB;CVPR2017&#x5E74;&#x6536;&#x5F55;&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x597D;&#x7684;&#x56FE;&#x50CF;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x6A21;&#x578B;&#x3002; Xception&#x7279;&#x70B9;&#x2003;&#x2003;&#x9664;&#x4E86;Inception&#x7684;&#x7279;&#x70B9;&#x4EE5;&#x5916;&#xFF0C;&#x91C7;&#x7528;&#x4E86;SeparableConv(&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)&#x4EE3;&#x66FF;Inception&#x4E2D;&#x7684;(Conv)&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#xFF0C;&#x5927;&#x5927;&#x8282;&#x7EA6;&#x4E86;&#x53C2;&#x6570;&#x91CF; Separable Convolution&#x2003;&#x2003;Separable Convolution(&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)&#xFF1A;&#x662F;&#x4E0A;&#x9762;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x5408;&#x4E8C;&#x4E3A;&#x4E00;&#x7684;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x3002;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x6B65;&#xFF1A;DepthwiseConv&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x901A;&#x9053;&#x8FDB;&#x884C;&#x5377;&#x79EF;&#x2003;&#x2003;&#x7B2C;&#x4E8C;&#x6B65;&#xFF1A;PointwiseConv&#xFF0C;&#x5BF9;&#x7B2C;&#x4E00;&#x6B65;&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#x8FDB;&#x884C;1x1&#x5377;&#x79EF;&#xFF0C;&#x5B9E;&#x73B0;&#x901A;&#x9053;&#x878D;&#x5408;&#x2003;&#x2003;&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;&#x8C03;&#x6574;&#x4E3A;&#x4EFB;&#x610F;&#x5408;&#x9002;&#x7684;&#x901A;&#x9053;&#x6570;&#xFF0C;&#x5728;Xception&#xFF0C;MobileNet&#xFF0C;EfficientNet&#xFF0C;ShuffleNet&#x7F51;&#x7EDC;&#x4E2D;&#x6709;&#x5927;&#x91CF;&#x4F7F;&#x7528;&#x3002;&#x7B2C;&#x4E00;&#x6B65;&#x7684;&#x76EE;&#x7684;&#x662F;&#x51CF;&#x5C11;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x7B2C;&#x4E8C;&#x6B65;&#x662F;&#x8C03;&#x6574;&#x901A;&#x9053;&#x6570;&#xFF0C;&#x56E0;&#x6B64;&#x5C06;&#x4E24;&#x4E2A;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x7ED3;&#x5408;&#xFF0C;&#x7EC4;&#x6210;&#x6DF1;&#x5EA6;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x3002; Xception&#x56FE;&#x50CF;&#x5206;&#x6790; TensorFlow2.0&#x5B9E;&#x73B0;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102import tensorflow as tfimport tensorflow.keras as kerasclass SeparableConv_Bn_Relu(keras.Model): def __init__(self, filters, kernel_size, strides=(1, 1), padding=&apos;same&apos;, name=&apos;Conv_Bn&apos;, use_separable=True, use_relu=True): super(SeparableConv_Bn_Relu, self).__init__() self.block = keras.Sequential(name=name) if use_separable: self.block.add(keras.layers.SeparableConv2D(filters, kernel_size, strides, padding=padding)) else: self.block.add(keras.layers.Conv2D(filters, kernel_size, strides, padding=padding)) self.block.add(keras.layers.BatchNormalization()) if use_relu: self.block.add(keras.layers.ReLU()) def call(self, inputs, training=None, mask=None): return self.block(inputs)class Entry_Exit_Block(keras.Model): def __init__(self, filters, relu=True, name=&apos;Entry_Exit_Block&apos;): super(Entry_Exit_Block, self).__init__() self.block = keras.Sequential(name=name) if relu: self.block.add(keras.layers.ReLU()) self.block.add(SeparableConv_Bn_Relu(filters, (3, 3))) self.block.add(SeparableConv_Bn_Relu(filters, (3, 3), use_relu=False)) self.block.add(keras.layers.MaxPool2D((3, 3), (2, 2), padding=&apos;same&apos;)) self.conv_bn = SeparableConv_Bn_Relu(filters, (1, 1), (2, 2), use_separable=False, use_relu=False) self.relu = keras.layers.ReLU() self.concatenate = keras.layers.Concatenate() def call(self, inputs, training=None, mask=None): block = self.block(inputs) conv_bn = self.conv_bn(inputs) output = self.concatenate([block, conv_bn]) return outputclass Middle_Block(keras.Model): def __init__(self, filters, name=&apos;Middle_Block&apos;): super(Middle_Block, self).__init__() self.block = keras.Sequential(name=name) self.block.add(keras.layers.ReLU()) self.block.add(SeparableConv_Bn_Relu(filters, (3, 3))) self.block.add(SeparableConv_Bn_Relu(filters, (3, 3))) self.block.add(SeparableConv_Bn_Relu(filters, (3, 3), use_relu=False)) self.concatenate = keras.layers.Concatenate() self.relu = keras.layers.ReLU() def call(self, inputs, training=None, mask=None): block = self.block(inputs) output = self.concatenate([block, inputs]) return outputclass Xception(keras.Model): def __init__(self): super(Xception, self).__init__() self.conv_bn_relu1 = SeparableConv_Bn_Relu(32, (3, 3), (2, 2), padding=&apos;valid&apos;, name=&apos;Conv_Bn_Relu1&apos;, use_separable=False) self.conv_bn_relu2 = SeparableConv_Bn_Relu(64, (3, 3), padding=&apos;valid&apos;, name=&apos;Conv_Bn_Relu2&apos;, use_separable=False) self.entry_block = keras.Sequential(name=&apos;Entry_Block&apos;) entry_filters = [128, 256, 728] self.entry_block.add(Entry_Exit_Block(entry_filters[0], relu=False)) for i in range(1, len(entry_filters)): self.entry_block.add(Entry_Exit_Block(entry_filters[i])) self.middle_block = keras.Sequential(name=&apos;Middle_Block&apos;) for i in range(8): self.middle_block.add(Middle_Block(728)) self.exit_block = keras.Sequential(name=&apos;Exit_Block&apos;) self.exit_block.add(Entry_Exit_Block(1024)) self.separableconv_bn_relu1 = SeparableConv_Bn_Relu(1536, (3, 3), name=&apos;SeparableConv_Bn_Relu1&apos;) self.separableconv_bn_relu2 = SeparableConv_Bn_Relu(2048, (3, 3), name=&apos;SeparableConv_Bn_Relu2&apos;) self.global_average_pooling = keras.layers.GlobalAveragePooling2D(name=&apos;Global_AveragePooling&apos;) self.dense = keras.layers.Dense(1000, activation=&apos;softmax&apos;, name=&apos;Dense&apos;) def call(self, inputs, training=None, mask=None): conv_bn_relu1 = self.conv_bn_relu1(inputs) conv_bn_relu2 = self.conv_bn_relu2(conv_bn_relu1) entry_filters = self.entry_block(conv_bn_relu2) middle_block = self.middle_block(entry_filters) exit_block = self.exit_block(middle_block) separableconv_bn_relu1 = self.separableconv_bn_relu1(exit_block) separableconv_bn_relu2 = self.separableconv_bn_relu2(separableconv_bn_relu1) global_average_pooling = self.global_average_pooling(separableconv_bn_relu2) output = self.dense(global_average_pooling) return outputif __name__ == &apos;__main__&apos;: model = Xception() model.build(input_shape=(None, 299, 299, 3)) model.summary() Xception&#x5C0F;&#x7ED3;&#x2003;&#x2003;Xception&#x662F;&#x4E00;&#x79CD;&#x590D;&#x6742;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;Xception&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x53EF;&#x8FBE;58M&#xFF0C;&#x56E0;&#x4E3A;&#x5176;&#x4F18;&#x79C0;&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x80FD;&#x529B;&#xFF0C;&#x5E76;&#x4E14;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x76F8;&#x6BD4;Inception-V3&#x8F83;&#x4E3A;&#x7B80;&#x5355;&#x3002;&#x56E0;&#x6B64;&#x5B9E;&#x9645;&#x4EFB;&#x52A1;&#x7ECF;&#x5E38;&#x4F7F;&#x7528;&#xFF0C;&#x5982;&#x8BED;&#x4E49;&#x5206;&#x5272;&#x7F51;&#x7EDC;DeepLab-V3+&#x4F7F;&#x7528;&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x5C31;&#x662F;Xception&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>特征提取网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ResNeXt]]></title>
    <url>%2F2020%2F03%2F13%2Ffeature_extraction%20ResNeXt%2F</url>
    <content type="text"><![CDATA[ResNeXt &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;ResNeXt:&#x662F;2017&#x5E74;&#x53D1;&#x8868;&#x4E8E;CVPR&#x7684;&#x4E00;&#x4E2A;&#x6A21;&#x578B;&#xFF0C;&#x662F;ResNet&#x7F51;&#x7EDC;&#x7684;&#x5347;&#x7EA7;&#x7248;&#x672C;&#x3002;&#x548C;Inception-ResNet&#x7C7B;&#x4F3C;&#xFF0C;Inception-ResNet&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x662F;Inception&#x6A21;&#x578B;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#x5438;&#x6536;ResNet&#x6B8B;&#x5DEE;&#x601D;&#x60F3;&#xFF0C;&#x800C;ResNext&#x5219;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x662F;ResNet&#x6A21;&#x578B;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#x5438;&#x6536;Inception&#x5206;&#x5757;&#x5408;&#x5E76;&#x601D;&#x60F3;&#x3002; ResNeXt&#x7279;&#x70B9;&#x2003;&#x2003;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x548C;ResNet&#x76F8;&#x540C;&#xFF0C;&#x6839;&#x636E;ResNet50&#xFF0C;&#x5219;&#x53EF;&#x4EE5;&#x4FEE;&#x6539;&#x4E3A;ResNeXt50&#xFF0C;&#x6839;&#x636E;ResNet101&#xFF0C;&#x5219;&#x53EF;&#x4EE5;&#x4FEE;&#x6539;&#x4E3A;ResNeXt101&#xFF0C;&#x7B49;&#x7B49;&#x2003;&#x2003;&#x5F15;&#x5165;Inception&#x6A21;&#x578B;&#x5206;&#x5757;&#x5408;&#x5E76;&#x601D;&#x60F3;&#xFF0C;&#x5C06;ResNet&#x4E2D;Conv Block&#x548C;Identity Block&#x4E2D;&#x7684;&#x666E;&#x901A;&#x5377;&#x79EF;&#x53D8;&#x6210;GroupConv&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x3002;&#x63D0;&#x51FA;&#x4E86;cardinality(&#x57FA;&#x6570;)&#x540D;&#x8BCD;&#xFF0C;&#x57FA;&#x6570;&#x4E3A;32&#xFF0C;&#x76F8;&#x5F53;&#x4E8E;&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x7684;&#x7EC4;&#x6570;&#x4E3A;32&#xFF0C;&#x6700;&#x540E;&#x5C06;32&#x7EC4;&#x5377;&#x79EF;&#x7ED3;&#x679C;&#x5408;&#x5E76; Group Convolution&#x2003;&#x2003;Group Convolution(&#x5206;&#x7EC4;&#x5377;&#x79EF;)&#xFF1A;&#x4F20;&#x7EDF;&#x5377;&#x79EF;&#x662F;&#x91C7;&#x7528;&#x4E00;&#x79CD;&#x5377;&#x79EF;&#x5168;&#x8FDE;&#x63A5;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x7279;&#x5F81;&#x56FE;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x90FD;&#x7ED3;&#x5408;&#x4E86;&#x56FE;&#x50CF;&#x4E2D;&#x6240;&#x6709;&#x901A;&#x9053;&#x7684;&#x4FE1;&#x606F;&#x3002;&#x800C;&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x7279;&#x5F81;&#x56FE;&#x50CF;&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x53EA;&#x5229;&#x7528;&#x5230;&#x4E00;&#x90E8;&#x5206;&#x539F;&#x59CB;&#x56FE;&#x50CF;&#x7684;&#x901A;&#x9053;&#x3002;&#x2003;&#x2003;&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;5x5&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(256x5x5+1)=1638656&#xFF0C;&#x800C;&#x5206;&#x6210;32&#x7EC4;&#x7684;&#x5206;&#x7EC4;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(8*5x5+1)=51456&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;32&#x500D;&#xFF0C;&#x5F53;&#x7EC4;&#x6570;&#x53D8;&#x6210;&#x901A;&#x9053;&#x6570;&#x65F6;&#xFF0C;&#x5219;&#x7C7B;&#x4F3C;&#x4E8E;Depthwise Convolution&#x6DF1;&#x5EA6;&#x5377;&#x79EF; ResNeXt50&#x56FE;&#x50CF;&#x5206;&#x6790; TensorFlow2.0&#x5B9E;&#x73B0;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990import tensorflow as tfimport tensorflow.keras as kerasclass GroupConv(keras.layers.Layer): def __init__(self, filters, strides=(1, 1), g_num=32): super(GroupConv, self).__init__() self.g_num = g_num self.groupconv = [] for i in range(g_num): self.groupconv.append(keras.layers.Conv2D(filters // g_num, (3, 3), strides=strides, padding=&apos;same&apos;)) self.concatenate = keras.layers.Concatenate() def call(self, inputs, **kwargs): groupconv = [] split = tf.split(inputs, self.g_num, axis=-1) for i in range(self.g_num): groupconv.append(self.groupconv[i](split[i])) output = self.concatenate(groupconv) return outputclass Block(keras.Model): def __init__(self, filters, strides=(1, 1), name=&apos;Conv_Block&apos;, type=&apos;Conv_Block&apos;): super(Block, self).__init__() self.blocks = keras.Sequential(name=name) self.blocks.add(keras.layers.Conv2D(filters // 2, (1, 1))) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU()) self.blocks.add(GroupConv(filters // 2, strides=strides)) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU()) self.blocks.add(keras.layers.Conv2D(filters, (1, 1))) self.blocks.add(keras.layers.BatchNormalization()) self.conv = keras.layers.Conv2D(filters, (1, 1), strides) self.relu = keras.layers.ReLU() self.type = type def call(self, inputs, training=None, mask=None): blocks = self.blocks(inputs) if self.type == &apos;Conv_Block&apos;: inputs = self.conv(inputs) blocks = self.relu(blocks + inputs) return blocksdef add_block(filters, strides=(1, 1), name=&apos;Block&apos;, times=1): block = keras.Sequential(name=name) block.add(Block(filters, strides)) for i in range(times - 1): block.add(Block(filters, type=&apos;identity_block&apos;)) return blockclass ResNeXt50(keras.Model): def __init__(self): super(ResNeXt50, self).__init__() self.zeropadding = keras.layers.ZeroPadding2D((3, 3), name=&apos;Zero_Padding&apos;) self.conv1 = keras.layers.Conv2D(64, (7, 7), (2, 2), name=&apos;Conv2d&apos;) self.bn1 = keras.layers.BatchNormalization(name=&apos;BatchNormalization&apos;) self.relu1 = keras.layers.ReLU(name=&apos;Relu&apos;) self.max_pooling = keras.layers.MaxPool2D((3, 3), (2, 2), padding=&apos;valid&apos;, name=&apos;Max_Pooling&apos;) self.block1 = add_block(256, name=&apos;Block1&apos;, times=3) self.block2 = add_block(512, strides=(2, 2), name=&apos;Block2&apos;, times=4) self.block3 = add_block(1024, strides=(2, 2), name=&apos;Block3&apos;, times=6) self.block4 = add_block(2048, strides=(2, 2), name=&apos;Block4&apos;, times=3) self.average_pooling = keras.layers.GlobalAveragePooling2D(name=&apos;Average_Pooling&apos;) self.dense = keras.layers.Dense(1000, activation=&apos;softmax&apos;, name=&apos;Dense&apos;) def call(self, inputs, training=None, mask=None): zeropadding = self.zeropadding(inputs) conv1 = self.conv1(zeropadding) bn1 = self.bn1(conv1) relu1 = self.relu1(bn1) max_pooling = self.max_pooling(relu1) block1 = self.block1(max_pooling) block2 = self.block2(block1) block3 = self.block3(block2) block4 = self.block4(block3) average_pooling = self.average_pooling(block4) out_put = self.dense(average_pooling) return out_putif __name__ == &apos;__main__&apos;: model = ResNeXt50() model.build(input_shape=(None, 224, 224, 3)) model.summary() ResNeXt&#x5C0F;&#x7ED3;&#x2003;&#x2003;ResNeXt&#x662F;&#x4E00;&#x79CD;&#x975E;&#x5E38;&#x6709;&#x6548;&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#xFF0C;ResNeXt&#x53C2;&#x6570;&#x91CF;&#x4E3A;25M&#xFF0C;&#x548C;&#x76F8;&#x540C;&#x7ED3;&#x6784;&#x7684;ResNet&#x51E0;&#x4E4E;&#x76F8;&#x540C;&#xFF0C;&#x4F46;&#x662F;&#x6548;&#x679C;&#x4F18;&#x4E8E;ResNet&#xFF0C;&#x56E0;&#x6B64;&#x662F;&#x4E00;&#x79CD;&#x5B9E;&#x7528;&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>特征提取网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Inception-ResNet-V2]]></title>
    <url>%2F2020%2F03%2F12%2Ffeature_extraction%20Inception-ResNet_V2%2F</url>
    <content type="text"><![CDATA[Inception-ResNet-V2 &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;Inception-ResNet-V2:&#x548C;Inception-V4&#xFF0C;Inception-ResNet-V1&#x4E8E;2017&#x5E74;&#x53D1;&#x8868;&#x5728;AAAI&#x540C;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;&#x4E2D;&#xFF0C;&#x4E09;&#x8005;&#x7684;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x57FA;&#x672C;&#x76F8;&#x540C;&#x3002;&#x7ED3;&#x5408;&#x4E86;Inception-V3&#x548C;ResNet&#x7684;&#x4F18;&#x70B9;&#x800C;&#x6210;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#x3002; Inception-ResNet-V2&#x7279;&#x70B9;&#x2003;&#x2003;&#x5728;Inception-V3&#x7684;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x589E;&#x52A0;&#x4E86;&#x6B8B;&#x5DEE;&#x7ED3;&#x6784;&#x2003;&#x2003;&#x5BF9;&#x7F51;&#x7EDC;&#x7684;&#x8F93;&#x5165;&#x589E;&#x52A0;&#x4E86;Stem&#x5C42;&#xFF0C;&#x4E0D;&#x518D;&#x662F;Inception-V3&#x4E2D;&#x7B80;&#x5355;&#x7684;&#x5377;&#x79EF;&#x64CD;&#x4F5C; Spatial Separable Convolution&#x2003;&#x2003;Spatial Separable Convolution(&#x7A7A;&#x95F4;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)&#xFF1A;&#x5C06;3x3&#x7684;&#x5377;&#x79EF;&#x5206;&#x89E3;&#x4E3A;3x1&#x7684;&#x5377;&#x79EF;&#x6838;1x3&#x7684;&#x5377;&#x79EF;&#xFF0C;&#x5C06;7x7&#x7684;&#x5377;&#x79EF;&#x5206;&#x89E3;&#x4E3A;7x1&#x7684;&#x5377;&#x79EF;&#x6838;1x7&#x7684;&#x5377;&#x79EF;.&#x3002;&#x2003;&#x2003;&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;64x64x256&#x7684;&#x7279;&#x5F81;&#x56FE;&#xFF0C;&#x7ECF;&#x8FC7;7x7&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(256x7x7+1)=3211520&#xFF0C;&#x800C;&#x7A7A;&#x95F4;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x53C2;&#x6570;&#x91CF;&#x4E3A;2x256x(256x7x1+1)=918016&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;3.5&#x500D;&#x3002; Inception-ResNet-V2&#x56FE;&#x50CF;&#x5206;&#x6790; TensorFlow2.0&#x5B9E;&#x73B0;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259import tensorflow as tfimport tensorflow.keras as kerasclass Conv_Bn_Relu(keras.Model): def __init__(self, filters, kernel_size, strides=(1, 1), padding=&apos;same&apos;, name=&apos;Conv_Bn_Relu&apos;): super(Conv_Bn_Relu, self).__init__() self.block = keras.Sequential(name=name) self.block.add(keras.layers.Conv2D(filters, kernel_size, strides, padding=padding)) self.block.add(keras.layers.BatchNormalization()) self.block.add(keras.layers.ReLU()) def call(self, inputs, training=None, mask=None): return self.block(inputs)class Stem_Block(keras.Model): def __init__(self): super(Stem_Block, self).__init__() self.block = keras.Sequential() self.block.add(Conv_Bn_Relu(32, (3, 3), (2, 2), padding=&apos;valid&apos;)) self.block.add(Conv_Bn_Relu(32, (3, 3), padding=&apos;valid&apos;)) self.block.add(Conv_Bn_Relu(64, (3, 3))) self.maxpooling1 = keras.layers.MaxPool2D((3, 3), (2, 2)) self.conv1 = Conv_Bn_Relu(96, (3, 3), (2, 2), &apos;valid&apos;) self.concatenate1 = keras.layers.Concatenate() self.conv2_1 = keras.Sequential() self.conv2_1.add(Conv_Bn_Relu(64, (1, 1))) self.conv2_1.add(Conv_Bn_Relu(96, (3, 3), padding=&apos;valid&apos;)) self.conv2_2 = keras.Sequential() self.conv2_2.add(Conv_Bn_Relu(64, (1, 1))) self.conv2_2.add(Conv_Bn_Relu(64, (1, 7))) self.conv2_2.add(Conv_Bn_Relu(64, (7, 1))) self.conv2_2.add(Conv_Bn_Relu(96, (3, 3), padding=&apos;valid&apos;)) self.concatenate2 = keras.layers.Concatenate() self.maxpooling3 = keras.layers.MaxPool2D((3, 3), (2, 2)) self.conv3 = Conv_Bn_Relu(192, (3, 3), (2, 2), &apos;valid&apos;) self.concatenate3 = keras.layers.Concatenate() self.relu = keras.layers.ReLU() def call(self, inputs, training=None, mask=None): block = self.block(inputs) maxpooling1 = self.maxpooling1(block) conv1 = self.conv1(block) concatenate1 = self.concatenate1([maxpooling1, conv1]) conv2_1 = self.conv2_1(concatenate1) conv2_2 = self.conv2_2(concatenate1) concatenate2 = self.concatenate2([conv2_1, conv2_2]) maxpooling3 = self.maxpooling3(concatenate2) conv3 = self.conv3(concatenate2) concatenate3 = self.concatenate3([maxpooling3, conv3]) output = self.relu(concatenate3) return outputclass Inception_ResNet_A(keras.Model): def __init__(self): super(Inception_ResNet_A, self).__init__() self.block1 = keras.Sequential() self.block1.add(Conv_Bn_Relu(32, (1, 1))) self.block2 = keras.Sequential() self.block2.add(Conv_Bn_Relu(32, (1, 1))) self.block2.add(Conv_Bn_Relu(32, (3, 3))) self.block3 = keras.Sequential() self.block2.add(Conv_Bn_Relu(32, (1, 1))) self.block3.add(Conv_Bn_Relu(48, (3, 3))) self.block3.add(Conv_Bn_Relu(64, (3, 3))) self.concatenate = keras.layers.Concatenate() self.conv = Conv_Bn_Relu(384, (1, 1)) self.relu = keras.layers.ReLU() def call(self, inputs, training=None, mask=None): block1 = self.block1(inputs) block2 = self.block2(inputs) block3 = self.block3(inputs) concatenate = self.concatenate([block1, block2, block3]) conv = self.conv(concatenate) output = self.relu(conv + inputs) return outputclass Reduction_A(keras.Model): def __init__(self): super(Reduction_A, self).__init__() self.block1 = keras.Sequential() self.block1.add(Conv_Bn_Relu(384, (3, 3), (2, 2), padding=&apos;valid&apos;)) self.block2 = keras.Sequential() self.block2.add(Conv_Bn_Relu(256, (1, 1))) self.block2.add(Conv_Bn_Relu(256, (3, 3))) self.block2.add(Conv_Bn_Relu(384, (3, 3), (2, 2), padding=&apos;valid&apos;)) self.block3 = keras.Sequential() self.block3.add(keras.layers.MaxPool2D((3, 3), (2, 2), padding=&apos;valid&apos;)) self.concatenate = keras.layers.Concatenate() def call(self, inputs, training=None, mask=None): block1 = self.block1(inputs) block2 = self.block2(inputs) block3 = self.block3(inputs) output = self.concatenate([block1, block2, block3]) return outputclass Inception_ResNet_B(keras.Model): def __init__(self): super(Inception_ResNet_B, self).__init__() self.block1 = keras.Sequential() self.block1.add(Conv_Bn_Relu(192, (1, 1))) self.block2 = keras.Sequential() self.block2.add(Conv_Bn_Relu(128, (1, 1))) self.block2.add(Conv_Bn_Relu(160, (1, 7))) self.block2.add(Conv_Bn_Relu(192, (7, 1))) self.concatenate = keras.layers.Concatenate() self.conv = Conv_Bn_Relu(1152, (1, 1)) self.relu = keras.layers.ReLU() def call(self, inputs, training=None, mask=None): block1 = self.block1(inputs) block2 = self.block2(inputs) concatenate = self.concatenate([block1, block2]) conv = self.conv(concatenate) output = self.relu(conv + inputs) return outputclass Reduction_B(keras.Model): def __init__(self): super(Reduction_B, self).__init__() self.block1 = keras.Sequential() self.block1.add(Conv_Bn_Relu(256, (1, 1))) self.block1.add(Conv_Bn_Relu(384, (3, 3), (2, 2), padding=&apos;valid&apos;)) self.block2 = keras.Sequential() self.block2.add(Conv_Bn_Relu(256, (1, 1))) self.block2.add(Conv_Bn_Relu(288, (3, 3), (2, 2), padding=&apos;valid&apos;)) self.block3 = keras.Sequential() self.block3.add(Conv_Bn_Relu(256, (1, 1))) self.block3.add(Conv_Bn_Relu(288, (3, 3))) self.block3.add(Conv_Bn_Relu(320, (3, 3), (2, 2), padding=&apos;valid&apos;)) self.block4 = keras.Sequential() self.block4.add(keras.layers.MaxPool2D((3, 3), (2, 2), padding=&apos;valid&apos;)) self.concatenate = keras.layers.Concatenate() def call(self, inputs, training=None, mask=None): block1 = self.block1(inputs) block2 = self.block2(inputs) block3 = self.block3(inputs) block4 = self.block4(inputs) output = self.concatenate([block1, block2, block3, block4]) return outputclass Inception_ResNet_C(keras.Model): def __init__(self): super(Inception_ResNet_C, self).__init__() self.block1 = keras.Sequential() self.block1.add(Conv_Bn_Relu(192, (1, 1))) self.block2 = keras.Sequential() self.block2.add(Conv_Bn_Relu(192, (1, 1))) self.block2.add(Conv_Bn_Relu(224, (1, 7))) self.block2.add(Conv_Bn_Relu(256, (7, 1))) self.concatenate = keras.layers.Concatenate() self.conv = Conv_Bn_Relu(2144, (1, 1)) self.relu = keras.layers.ReLU() def call(self, inputs, training=None, mask=None): block1 = self.block1(inputs) block2 = self.block2(inputs) concatenate = self.concatenate([block1, block2]) conv = self.conv(concatenate) output = self.relu(conv + inputs) return outputclass Inception_ResNet_v2(keras.Model): def __init__(self): super(Inception_ResNet_v2, self).__init__() self.stem = keras.Sequential(name=&apos;Stem_Block&apos;) self.stem.add(Stem_Block()) self.inception_resnet_a = keras.Sequential(name=&apos;Inception_ResNet_A&apos;) for i in range(10): self.inception_resnet_a.add(Inception_ResNet_A()) self.reduction_a = keras.Sequential(name=&apos;Reduction_A&apos;) self.reduction_a.add(Reduction_A()) self.inception_resnet_b = keras.Sequential(name=&apos;Inception_ResNet_B&apos;) for i in range(20): self.inception_resnet_b.add(Inception_ResNet_B()) self.reduction_b = keras.Sequential(name=&apos;Reduction_B&apos;) self.reduction_b.add(Reduction_B()) self.inception_resnet_c = keras.Sequential(name=&apos;Inception_ResNet_C&apos;) for i in range(10): self.inception_resnet_c.add(Inception_ResNet_C()) self.average_pooling = keras.layers.AveragePooling2D((8, 8), (8, 8), name=&apos;AveragePooling&apos;) self.dropout = keras.layers.Dropout(0.2) self.flatten = keras.layers.Flatten(name=&apos;Flatten&apos;) self.dense = keras.layers.Dense(1000, activation=&apos;softmax&apos;, name=&apos;Dense&apos;) def call(self, inputs, training=None, mask=None): stem = self.stem(inputs) inception_resnet_a = self.inception_resnet_a(stem) reduction_a = self.reduction_a(inception_resnet_a) inception_resnet_b = self.inception_resnet_b(reduction_a) reduction_b = self.reduction_b(inception_resnet_b) inception_resnet_c = self.inception_resnet_c(reduction_b) average_pooling = self.average_pooling(inception_resnet_c) dropout = self.dropout(average_pooling) flatten = self.flatten(dropout) output = self.dense(flatten) return outputif __name__ == &apos;__main__&apos;: model = Inception_ResNet_v2() model.build(input_shape=(None, 299, 299, 3)) model.summary() Inception-ResNet-V2&#x5C0F;&#x7ED3;&#x2003;&#x2003;Inception-ResNet-V2&#x662F;&#x4E00;&#x79CD;&#x96C6;Inception-V3&#x548C;ResNet&#x6240;&#x957F;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;Inception-ResNet-V2&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x8FBE;&#x5230;61M&#xFF0C;&#x4F46;&#x662F;&#x7531;&#x4E8E;&#x5176;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x592A;&#x590D;&#x6742;&#xFF0C;&#x6BD4;Inception-V3&#x8981;&#x590D;&#x6742;&#x5F97;&#x591A;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x5B9E;&#x9645;&#x4E2D;&#x4E5F;&#x8F83;&#x5C11;&#x4F7F;&#x7528;&#x5176;&#x4F5C;&#x4E3A;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>特征提取网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Inception-V3]]></title>
    <url>%2F2020%2F03%2F10%2Ffeature_extraction%20Inception_V3%2F</url>
    <content type="text"><![CDATA[Inception-V3 &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;Inception-V3:&#x7531;&#x8C37;&#x6B4C;&#x516C;&#x53F8;2015&#x5E74;&#x63D0;&#x51FA;&#xFF0C;&#x521D;&#x59CB;&#x7248;&#x672C;&#x662F;GoogleNet&#xFF0C;&#x662F;2014&#x5E74;ILSVRC&#x7ADE;&#x8D5B;&#x7684;&#x7B2C;&#x4E00;&#x540D;&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x8F83;&#x4E3A;&#x590D;&#x6742;&#x7684;&#x56FE;&#x50CF;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x6A21;&#x578B;&#x3002; Inception-V3&#x7279;&#x70B9;&#x2003;&#x2003;&#x91C7;&#x7528;&#x4E0D;&#x540C;&#x5927;&#x5C0F;&#x7684;&#x5377;&#x79EF;&#x6838;&#xFF0C;&#x610F;&#x5473;&#x7740;&#x4E0D;&#x540C;&#x5927;&#x5C0F;&#x7684;&#x611F;&#x53D7;&#x91CE;&#xFF0C;&#x5F97;&#x5230;&#x4E0D;&#x540C;&#x5C3A;&#x5EA6;&#x7684;&#x7279;&#x5F81;&#xFF0C;&#x6700;&#x540E;&#x5C06;&#x4E0D;&#x540C;&#x5C3A;&#x5EA6;&#x7684;&#x7279;&#x5F81;&#x8FDB;&#x884C;&#x62FC;&#x63A5;&#x878D;&#x5408;&#x2003;&#x2003;&#x63D0;&#x51FA;&#x5377;&#x79EF;&#x5206;&#x89E3;&#x601D;&#x60F3;&#xFF0C;&#x5C06;&#x4E00;&#x4E2A;5x5&#x7684;&#x5377;&#x79EF;&#xFF0C;&#x5206;&#x89E3;&#x4E3A;&#x4E24;&#x4E2A;3x3&#x7684;&#x5377;&#x79EF;&#xFF0C;&#x800C;&#x4E14;&#x5C06;3x3&#x7684;&#x5377;&#x79EF;&#x5206;&#x89E3;&#x6210;&#x4E00;&#x4E2A;1x3&#x7684;&#x5377;&#x79EF;&#x548C;&#x4E00;&#x4E2A;3*1&#x7684;&#x5377;&#x79EF; Spatial Separable Convolution&#x2003;&#x2003;Spatial Separable Convolution(&#x7A7A;&#x95F4;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;)&#xFF1A;&#x5C06;3x3&#x7684;&#x5377;&#x79EF;&#x5206;&#x89E3;&#x4E3A;3x1&#x7684;&#x5377;&#x79EF;&#x6838;1x3&#x7684;&#x5377;&#x79EF;&#xFF0C;&#x5C06;7x7&#x7684;&#x5377;&#x79EF;&#x5206;&#x89E3;&#x4E3A;7x1&#x7684;&#x5377;&#x79EF;&#x6838;1x7&#x7684;&#x5377;&#x79EF;.&#x3002;&#x2003;&#x2003;&#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;64x64x256&#x7684;&#x7279;&#x5F81;&#x56FE;&#xFF0C;&#x7ECF;&#x8FC7;7x7&#x7684;&#x5377;&#x79EF;&#x6838;&#x540E;&#x53D8;&#x4E3A;64x64x256&#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x7ECF;&#x8FC7;&#x666E;&#x901A;&#x5377;&#x79EF;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x4E3A;256x(256x7x7+1)=3211520&#xFF0C;&#x800C;&#x7A7A;&#x95F4;&#x53EF;&#x5206;&#x79BB;&#x5377;&#x79EF;&#x53C2;&#x6570;&#x91CF;&#x4E3A;2x256x(256x7x1+1)=918016&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x7F29;&#x5C0F;&#x4E86;&#x7EA6;3.5&#x500D;&#x3002; Inception-V3&#x56FE;&#x50CF;&#x5206;&#x6790; TensorFlow2.0&#x5B9E;&#x73B0;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235import tensorflow as tfimport tensorflow.keras as kerasclass Conv_Bn_Relu(keras.Model): def __init__(self, filters, kernel_size, strides=(1, 1), padding=&apos;same&apos;, name=&apos;Conv_Bn_Relu&apos;): super(Conv_Bn_Relu, self).__init__() self.block = keras.Sequential(name=name) self.block.add(keras.layers.Conv2D(filters, kernel_size, strides, padding=padding)) self.block.add(keras.layers.BatchNormalization()) self.block.add(keras.layers.ReLU()) def call(self, inputs, training=None, mask=None): return self.block(inputs)class Pooling_Block1(keras.Model): def __init__(self, name=&apos;Pooling_Block&apos;): super(Pooling_Block1, self).__init__() self.block1 = keras.Sequential(name=&apos;Pooling_Block1_1&apos;) self.block1.add(keras.layers.MaxPooling2D((3, 3), (2, 2))) self.block2 = keras.Sequential(name=&apos;Pooling_Block1_2&apos;) self.block2.add(Conv_Bn_Relu(64, (1, 1))) self.block2.add(Conv_Bn_Relu(96, (3, 3))) self.block2.add(Conv_Bn_Relu(96, (3, 3), (2, 2), padding=&apos;valid&apos;)) self.block3 = keras.Sequential(name=&apos;Pooling_Block1_3&apos;) self.block3.add(Conv_Bn_Relu(384, (3, 3), (2, 2), padding=&apos;valid&apos;)) self.concatenate = keras.layers.Concatenate(name=&apos;Pooling_Block1_Concatenate&apos;) def call(self, inputs, training=None, mask=None): block1 = self.block1(inputs) block2 = self.block2(inputs) block3 = self.block3(inputs) output = self.concatenate([block1, block2, block3]) return outputclass Pooling_Block2(keras.Model): def __init__(self, name=&apos;Pooling_Block&apos;): super(Pooling_Block2, self).__init__() self.block1 = keras.Sequential(name=&apos;Pooling_Block2_1&apos;) self.block1.add(keras.layers.MaxPooling2D((3, 3), (2, 2))) self.block2 = keras.Sequential(name=&apos;Pooling_Block2_2&apos;) self.block2.add(Conv_Bn_Relu(192, (1, 1))) self.block2.add(Conv_Bn_Relu(192, (1, 7))) self.block2.add(Conv_Bn_Relu(192, (7, 1))) self.block2.add(Conv_Bn_Relu(192, (3, 3), (2, 2), padding=&apos;valid&apos;)) self.block3 = keras.Sequential(name=&apos;Pooling_Block2_3&apos;) self.block3.add(Conv_Bn_Relu(192, (1, 1))) self.block3.add(Conv_Bn_Relu(320, (3, 3), (2, 2), padding=&apos;valid&apos;)) self.concatenate = keras.layers.Concatenate(name=&apos;Pooling_Block2_Concatenate&apos;) def call(self, inputs, training=None, mask=None): block1 = self.block1(inputs) block2 = self.block2(inputs) block3 = self.block3(inputs) output = self.concatenate([block1, block2, block3]) return outputclass Block1(keras.Model): def __init__(self, filters, name=&apos;Conv_Block&apos;): super(Block1, self).__init__() self.block1 = keras.Sequential(name=&apos;Block1_1&apos;) self.block1.add(keras.layers.AveragePooling2D((2, 2), (1, 1), padding=&apos;same&apos;)) self.block1.add(Conv_Bn_Relu(filters - 224, (1, 1))) self.block2 = keras.Sequential(name=&apos;Block1_2&apos;) self.block2.add(Conv_Bn_Relu(64, (1, 1))) self.block2.add(Conv_Bn_Relu(96, (3, 3))) self.block2.add(Conv_Bn_Relu(96, (3, 3))) self.block3 = keras.Sequential(name=&apos;Block1_3&apos;) self.block3.add(Conv_Bn_Relu(48, (1, 1))) self.block3.add(Conv_Bn_Relu(64, (5, 5))) self.block4 = keras.Sequential(name=&apos;Block1_4&apos;) self.block4.add(Conv_Bn_Relu(64, (1, 1))) self.concatenate = keras.layers.Concatenate(name=&apos;Block_1_Concatenate&apos;) def call(self, inputs, training=None, mask=None): block1 = self.block1(inputs) block2 = self.block2(inputs) block3 = self.block3(inputs) block4 = self.block4(inputs) output = self.concatenate([block1, block2, block3, block4]) return outputclass Block2(keras.Model): def __init__(self, name=&apos;Conv_Block&apos;): super(Block2, self).__init__() self.block1 = keras.Sequential(name=&apos;Block2_1&apos;) self.block1.add(keras.layers.AveragePooling2D((2, 2), (1, 1), padding=&apos;same&apos;)) self.block1.add(Conv_Bn_Relu(192, (1, 1))) self.block2 = keras.Sequential(name=&apos;Block2_2&apos;) self.block2.add(Conv_Bn_Relu(128, (1, 1))) self.block2.add(Conv_Bn_Relu(128, (7, 1))) self.block2.add(Conv_Bn_Relu(128, (1, 7))) self.block2.add(Conv_Bn_Relu(128, (7, 1))) self.block2.add(Conv_Bn_Relu(192, (1, 7))) self.block3 = keras.Sequential(name=&apos;Block2_3&apos;) self.block3.add(Conv_Bn_Relu(128, (1, 1))) self.block3.add(Conv_Bn_Relu(128, (7, 1))) self.block3.add(Conv_Bn_Relu(192, (1, 7))) self.block4 = keras.Sequential(name=&apos;Block2_4&apos;) self.block4.add(Conv_Bn_Relu(192, (1, 1))) self.concatenate = keras.layers.Concatenate(name=&apos;Block2_Concatenate&apos;) def call(self, inputs, training=None, mask=None): block1 = self.block1(inputs) block2 = self.block2(inputs) block3 = self.block3(inputs) block4 = self.block4(inputs) output = self.concatenate([block1, block2, block3, block4]) return outputclass Block3(keras.Model): def __init__(self, name=&apos;Conv_Block&apos;): super(Block3, self).__init__() self.block1 = keras.Sequential(name=&apos;Block3_1&apos;) self.block1.add(keras.layers.AveragePooling2D((2, 2), (1, 1), padding=&apos;same&apos;)) self.block1.add(Conv_Bn_Relu(192, (1, 1))) self.block2 = keras.Sequential(name=&apos;Block3_2&apos;) self.block2.add(Conv_Bn_Relu(448, (1, 1))) self.block2.add(Conv_Bn_Relu(384, (3, 3))) self.conv_bn_relu2_1 = Conv_Bn_Relu(384, (1, 3), name=&apos;Block3_2_1Conv_Bn_Relu&apos;) self.conv_bn_relu2_2 = Conv_Bn_Relu(384, (3, 1), name=&apos;Block3_2_2Conv_Bn_Relu&apos;) self.concatenate2 = keras.layers.Concatenate(name=&apos;Block3_2_Concatenate&apos;) self.block3 = keras.Sequential(name=&apos;Block3_3&apos;) self.block3.add(Conv_Bn_Relu(384, (1, 1))) self.conv_bn_relu3_1 = Conv_Bn_Relu(384, (1, 3), name=&apos;Block3_3_1Conv_Bn_Relu&apos;) self.conv_bn_relu3_2 = Conv_Bn_Relu(384, (3, 1), name=&apos;Block3_3_2Conv_Bn_Relu&apos;) self.concatenate3 = keras.layers.Concatenate(name=&apos;Block3_3_Concatenate&apos;) self.block4 = keras.Sequential(name=&apos;Block3_4&apos;) self.block4.add(Conv_Bn_Relu(320, (1, 1))) self.concatenate = keras.layers.Concatenate(name=&apos;Block_3_Concatenate&apos;) def call(self, inputs, training=None, mask=None): block1 = self.block1(inputs) block2 = self.block2(inputs) block3 = self.block3(inputs) block4 = self.block4(inputs) block2_1 = self.conv_bn_relu2_1(block2) block2_2 = self.conv_bn_relu2_2(block2) block2 = self.concatenate2([block2_1, block2_2]) block3_1 = self.conv_bn_relu3_1(block3) block3_2 = self.conv_bn_relu3_2(block3) block3 = self.concatenate3([block3_1, block3_2]) output = self.concatenate([block1, block2, block3, block4]) return outputclass Inception_v3(keras.Model): def __init__(self): super(Inception_v3, self).__init__() self.conv_bn_relu1 = Conv_Bn_Relu(32, (3, 3), (2, 2), padding=&apos;valid&apos;, name=&apos;Conv_Bn_Relu1&apos;) self.conv_bn_relu2 = Conv_Bn_Relu(32, (3, 3), padding=&apos;valid&apos;, name=&apos;Conv_Bn_Relu2&apos;) self.conv_bn_relu3 = Conv_Bn_Relu(64, (3, 3), name=&apos;Conv_Bn_Relu3&apos;) self.maxpooling1 = keras.layers.MaxPool2D((3, 3), (2, 2), name=&apos;MaxPooling1&apos;) self.conv_bn_relu4 = Conv_Bn_Relu(80, (1, 1), name=&apos;Conv_Bn_Relu4&apos;) self.conv_bn_relu5 = Conv_Bn_Relu(192, (3, 3), padding=&apos;valid&apos;, name=&apos;Conv_Bn_Relu5&apos;) self.maxpooling2 = keras.layers.MaxPool2D((3, 3), (2, 2), name=&apos;MaxPooling2&apos;) self.block1 = keras.Sequential(name=&apos;Block1&apos;) self.block1.add(Block1(256)) self.block1.add(Block1(288)) self.block1.add(Block1(288)) self.block1.add(Pooling_Block1()) self.block2 = keras.Sequential(name=&apos;Block2&apos;) self.block2.add(Block2()) self.block2.add(Block2()) self.block2.add(Block2()) self.block2.add(Block2()) self.block2.add(Pooling_Block2()) self.block3 = keras.Sequential(name=&apos;Block3&apos;) self.block3.add(Block3()) self.block3.add(Block3()) self.global_average_pooling = keras.layers.GlobalAveragePooling2D(name=&apos;Global_AveragePooling&apos;) self.dense = keras.layers.Dense(1000, activation=&apos;softmax&apos;, name=&apos;Dense&apos;) def call(self, inputs, training=None, mask=None): conv_bn_relu1 = self.conv_bn_relu1(inputs) conv_bn_relu2 = self.conv_bn_relu2(conv_bn_relu1) conv_bn_relu3 = self.conv_bn_relu3(conv_bn_relu2) maxpooling1 = self.maxpooling1(conv_bn_relu3) conv_bn_relu4 = self.conv_bn_relu4(maxpooling1) conv_bn_relu5 = self.conv_bn_relu5(conv_bn_relu4) maxpooling2 = self.maxpooling2(conv_bn_relu5) block1 = self.block1(maxpooling2) block2 = self.block2(block1) block3 = self.block3(block2) global_average_pooling = self.global_average_pooling(block3) out_put = self.dense(global_average_pooling) return out_putif __name__ == &apos;__main__&apos;: model = Inception_v3() model.build(input_shape=(None, 299, 299, 3)) model.summary() Inception-V3&#x5C0F;&#x7ED3;&#x2003;&#x2003;Inception-V3&#x662F;&#x4E00;&#x79CD;&#x590D;&#x6742;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x4E3A;22M&#xFF0C;&#x7531;&#x4E8E;&#x5176;&#x7ED3;&#x6784;&#x8FC7;&#x4E8E;&#x590D;&#x6742;&#xFF0C;&#x5F88;&#x5C11;&#x88AB;&#x5176;&#x4ED6;&#x7F51;&#x7EDC;&#x6240;&#x4F7F;&#x7528;&#xFF0C;&#x4F46;&#x662F;&#x5176;&#x4E0D;&#x540C;&#x611F;&#x53D7;&#x91CE;&#x548C;&#x5377;&#x79EF;&#x5206;&#x89E3;&#x7684;&#x601D;&#x60F3;&#x7ED9;&#x5176;&#x4ED6;&#x7F51;&#x7EDC;&#x63D0;&#x4F9B;&#x4E86;&#x601D;&#x8DEF;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>特征提取网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ResNet]]></title>
    <url>%2F2020%2F03%2F09%2Ffeature_extraction%20ResNet%2F</url>
    <content type="text"><![CDATA[ResNet &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;ResNet:&#x7531;&#x534E;&#x4EBA;&#x5B66;&#x8005;&#x4F55;&#x51EF;&#x660E;&#x5927;&#x795E;&#x4E8E;2015&#x5E74;&#x63D0;&#x51FA;&#xFF0C;&#x5176;&#x4E3B;&#x8981;&#x4F53;&#x73B0;&#x51FA;&#x4E86;&#x6B8B;&#x5DEE;&#x76F8;&#x8FDE;&#x7684;&#x4F18;&#x52BF;&#xFF0C;&#x6545;&#x7B80;&#x79F0;ResNet&#xFF0C;&#x662F;2015&#x5E74;ILSVRC&#x7ADE;&#x8D5B;&#x7684;&#x7B2C;&#x4E00;&#x540D;&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x597D;&#x7684;&#x56FE;&#x50CF;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x6A21;&#x578B;&#x3002; ResNet&#x7279;&#x70B9;&#x2003;&#x2003;&#x4F7F;&#x7528;&#x6B8B;&#x5DEE;&#x5757;&#x7ED3;&#x6784;&#xFF0C;&#x4F7F;&#x5F97;&#x7F51;&#x7EDC;&#x80FD;&#x591F;&#x66F4;&#x591A;&#x83B7;&#x53D6;&#x4E4B;&#x524D;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x5E76;&#x4E14;&#x4F7F;&#x5B66;&#x4E60;&#x7ED3;&#x679C;&#x5BF9;&#x4E8E;&#x6743;&#x91CD;&#x7684;&#x53D8;&#x5316;&#x66F4;&#x52A0;&#x654F;&#x611F;&#x2003;&#x2003;&#x4F7F;&#x7528;&#x74F6;&#x9888;&#x7ED3;&#x6784;&#xFF0C;&#x5148;&#x4F7F;&#x7528;1x1&#x7684;&#x5377;&#x79EF;&#x6838;&#x8FDB;&#x884C;&#x964D;&#x7EF4;&#xFF0C;&#x6700;&#x540E;&#x518D;&#x6B21;&#x4F7F;&#x7528;1x1&#x7684;&#x5377;&#x79EF;&#x6838;&#x5347;&#x7EF4;&#xFF0C;&#x53EF;&#x4EE5;&#x964D;&#x4F4E;&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x2003;&#x2003;Conv Block&#xFF1A;&#x4F5C;&#x7528;&#x662F;&#x6539;&#x53D8;&#x56FE;&#x50CF;&#x5927;&#x5C0F;&#xFF0C;&#x8F93;&#x5165;&#x548C;&#x8F93;&#x51FA;&#x7684;&#x5C3A;&#x5BF8;&#x4E0D;&#x540C;&#xFF0C;&#x56E0;&#x6B64;&#x65E0;&#x6CD5;&#x76F4;&#x63A5;&#x6B8B;&#x5DEE;&#x76F8;&#x8FDE;&#xFF0C;&#x2003;&#x2003;Identity Block&#xFF1A;&#x4F5C;&#x7528;&#x662F;&#x589E;&#x52A0;&#x7F51;&#x7EDC;&#x6DF1;&#x5EA6;&#xFF0C;&#x8F93;&#x5165;&#x548C;&#x8F93;&#x51FA;&#x7684;&#x5C3A;&#x5BF8;&#x76F8;&#x540C;&#xFF0C;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x6B8B;&#x5DEE;&#x76F8;&#x8FDE; &#x4E0D;&#x540C;&#x5C3A;&#x5BF8;ResNet&#x7F51;&#x7EDC;&#x7ED3;&#x6784; ResNet50&#x56FE;&#x50CF;&#x5206;&#x6790; TensorFlow2.0&#x5B9E;&#x73B0;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071import tensorflow as tfimport tensorflow.keras as kerasclass Block(keras.Model): def __init__(self, filters, strides=(1, 1), name=&apos;Conv_Block&apos;, type=&apos;Conv_Block&apos;): super(Block, self).__init__() self.blocks = keras.Sequential(name=name) self.blocks.add(keras.layers.Conv2D(filters // 4, (1, 1))) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU()) self.blocks.add(keras.layers.Conv2D(filters // 4, (3, 3), strides, padding=&apos;same&apos;)) self.blocks.add(keras.layers.BatchNormalization()) self.blocks.add(keras.layers.ReLU()) self.blocks.add(keras.layers.Conv2D(filters, (1, 1))) self.blocks.add(keras.layers.BatchNormalization()) self.conv = keras.layers.Conv2D(filters, (1, 1), strides) self.relu = keras.layers.ReLU() self.type = type def call(self, inputs, training=None, mask=None): blocks = self.blocks(inputs) if self.type == &apos;Conv_Block&apos;: inputs = self.conv(inputs) blocks = self.relu(blocks + inputs) return blocksdef add_block(filters, strides=(1, 1), name=&apos;Block&apos;, times=1): block = keras.Sequential(name=name) block.add(Block(filters, strides)) for i in range(times - 1): block.add(Block(filters, type=&apos;identity_block&apos;)) return blockclass ResNet50(keras.Model): def __init__(self): super(ResNet50, self).__init__() self.zeropadding = keras.layers.ZeroPadding2D((3, 3), name=&apos;Zero_Padding&apos;) self.conv1 = keras.layers.Conv2D(64, (7, 7), (2, 2), name=&apos;Conv2d&apos;) self.bn1 = keras.layers.BatchNormalization(name=&apos;BatchNormalization&apos;) self.relu1 = keras.layers.ReLU(name=&apos;Relu&apos;) self.max_pooling = keras.layers.MaxPool2D((3, 3), (2, 2), padding=&apos;same&apos;, name=&apos;Max_Pooling&apos;) self.block1 = add_block(256, name=&apos;Block1&apos;, times=3) self.block2 = add_block(512, strides=(2, 2), name=&apos;Block2&apos;, times=4) self.block3 = add_block(1024, strides=(2, 2), name=&apos;Block3&apos;, times=6) self.block4 = add_block(2048, strides=(2, 2), name=&apos;Block4&apos;, times=3) self.average_pooling = keras.layers.GlobalAveragePooling2D(name=&apos;Average_Pooling&apos;) self.dense = keras.layers.Dense(1000, activation=&apos;softmax&apos;, name=&apos;Dense&apos;) def call(self, inputs, training=None, mask=None): zeropadding = self.zeropadding(inputs) conv1 = self.conv1(zeropadding) bn1 = self.bn1(conv1) relu1 = self.relu1(bn1) max_pooling = self.max_pooling(relu1) block1 = self.block1(max_pooling) block2 = self.block2(block1) block3 = self.block3(block2) block4 = self.block4(block3) average_pooling = self.average_pooling(block4) out_put = self.dense(average_pooling) return out_putif __name__ == &apos;__main__&apos;: model = ResNet50() model.build(input_shape=(None, 224, 224, 3)) model.summary() ResNet&#x5C0F;&#x7ED3;&#x2003;&#x2003;ResNet&#x662F;&#x4E00;&#x79CD;&#x975E;&#x5E38;&#x6709;&#x6548;&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#xFF0C;&#x7531;&#x4E8E;&#x51CF;&#x5C11;&#x4E86;Dense&#x5C42;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x56E0;&#x6B64;&#x53C2;&#x6570;&#x91CF;&#x76F8;&#x6BD4;&#x4E8E;VGG&#x5927;&#x5927;&#x51CF;&#x5C11;&#xFF0C;&#x53C2;&#x6570;&#x91CF;&#x53EA;&#x6709;25M&#xFF0C;&#x56E0;&#x6B64;&#x5B9E;&#x9645;&#x4EFB;&#x52A1;&#x7ECF;&#x5E38;&#x4F7F;&#x7528;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>特征提取网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[VGG]]></title>
    <url>%2F2020%2F03%2F08%2Ffeature_extraction%20VGG%2F</url>
    <content type="text"><![CDATA[VGG &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;VGG:&#x6765;&#x6E90;&#x4E8E;&#x725B;&#x6D25;&#x5927;&#x5B66;&#x89C6;&#x89C9;&#x51E0;&#x4F55;&#x7EC4;Visual Geometry Group&#xFF0C;&#x6545;&#x7B80;&#x79F0;VGG&#xFF0C;&#x662F;2014&#x5E74;ILSVRC&#x7ADE;&#x8D5B;&#x7684;&#x7B2C;&#x4E8C;&#x540D;&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x597D;&#x7684;&#x56FE;&#x50CF;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x6A21;&#x578B;&#x3002; VGG&#x7279;&#x70B9;&#x2003;&#x2003;&#x5377;&#x79EF;&#x6838;&#xFF1A;VGG&#x5168;&#x7531;3x3&#x5C0F;&#x5377;&#x79EF;&#x6838;&#x6784;&#x6210;&#xFF0C;&#x6B65;&#x957F;&#x4E3A;1&#xFF0C;&#x586B;&#x5145;&#x65B9;&#x5F0F;&#x4E3A;same&#x2003;&#x2003;&#x6C60;&#x5316;&#x6838;&#xFF1A;VGG&#x5168;&#x7531;2x2&#x6C60;&#x5316;&#x6838;&#x6784;&#x6210;&#xFF0C;&#x6B65;&#x957F;&#x4E3A;2&#x2003;&#x2003;&#x7F51;&#x7EDC;&#x5C42;&#xFF1A;VGG&#x5177;&#x6709;&#x8F83;&#x6DF1;&#x7684;&#x7F51;&#x7EDC;&#x5C42;&#xFF0C;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x8C03;&#x6574;&#x2003;&#x2003;&#x53C2;&#x6570;&#x91CF;&#xFF1A;VGG&#x5177;&#x6709;&#x8F83;&#x5927;&#x53C2;&#x6570;&#x91CF;&#xFF0C;&#x4E3B;&#x8981;&#x6765;&#x6E90;&#x4E8E;Flatten&#x5C42;&#x540E;&#x9762;&#x7684;&#x5168;&#x8FDE;&#x63A5;&#x5C42; &#x4E0D;&#x540C;&#x5C3A;&#x5BF8;VGG&#x7F51;&#x7EDC;&#x7ED3;&#x6784; VGG16&#x56FE;&#x50CF;&#x5206;&#x6790; TensorFlow2.0&#x5B9E;&#x73B0;123456789101112131415161718192021222324252627282930313233343536373839404142434445import tensorflow as tfimport tensorflow.keras as kerasclass Convs(keras.Model): def __init__(self, times, filters, name): super(Convs, self).__init__() self.blocks = keras.Sequential(name=name) for i in range(times): self.blocks.add(keras.layers.Conv2D(filters, (3, 3), (1, 1), padding=&apos;same&apos;, activation=&apos;relu&apos;, name=name + &apos;_con&apos; + str(i + 1))) self.blocks.add(keras.layers.MaxPool2D(name=name + &apos;_maxpool&apos;)) def call(self, inputs, training=None, mask=None): return self.blocks(inputs)class VGG16(keras.Model): def __init__(self): super(VGG16, self).__init__() times = [2, 2, 3, 3, 5] filters = [64, 128, 256, 512, 512] self.blocks = keras.Sequential(name=&apos;Conv_block&apos;) for i in range(len(times)): self.blocks.add(Convs(times=times[i], filters=filters[i], name=&apos;block1&apos;)) self.flatten = keras.layers.Flatten(name=&apos;flatten&apos;) self.dense1 = keras.layers.Dense(4096, activation=&apos;relu&apos;, name=&apos;dense_1&apos;) self.dense2 = keras.layers.Dense(4096, activation=&apos;relu&apos;, name=&apos;dense_2&apos;) self.dense3 = keras.layers.Dense(1000, activation=&apos;softmax&apos;, name=&apos;dense_3&apos;) def call(self, inputs, training=None, mask=None): block = self.blocks(inputs) flatten = self.flatten(block) dense1 = self.dense1(flatten) dense2 = self.dense2(dense1) output = self.dense3(dense2) return outputif __name__ == &apos;__main__&apos;: model = VGG16() model.build(input_shape=(None, 224, 224, 3)) model.summary() VGG&#x5C0F;&#x7ED3;&#x2003;&#x2003;VGG&#x662F;&#x6700;&#x7B80;&#x5355;&#x7684;&#x4E00;&#x79CD;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#xFF0C;&#x4E5F;&#x662F;&#x4E00;&#x79CD;&#x975E;&#x5E38;&#x6709;&#x6548;&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x6A21;&#x578B;&#x3002;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;VGG16&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x91CF;&#x8FBE;&#x5230;143M&#xFF0C;&#x56E0;&#x4E3A;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x65F6;&#x4E0D;&#x9700;&#x8981;&#x540E;&#x9762;&#x7684;Dense&#x5C42;&#xFF0C;&#x53EF;&#x4EE5;&#x5927;&#x5927;&#x964D;&#x4F4E;&#x7F51;&#x7EDC;&#x7684;&#x89C4;&#x6A21;&#x3002;&#x56E0;&#x6B64;&#x5B9E;&#x9645;&#x4EFB;&#x52A1;&#x6240;&#x4F7F;&#x7528;&#xFF0C;&#x5982;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x7B97;&#x6CD5;SSD&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7F51;&#x7EDC;&#x5C31;&#x662F;VGG&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>特征提取网络</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux(操作系统)]]></title>
    <url>%2F2019%2F09%2F23%2Fskill%20Linux%2F</url>
    <content type="text"><![CDATA[Linux Linux&#x4ECB;&#x7ECD;&#x2003;&#x2003;Linux:&#x5728;1991&#x5E74;10&#x6708;&#x88AB;Linus Torvalds(&#x6797;&#x7EB3;&#x65AF;&#xB7;&#x6258;&#x74E6;&#x5179;)&#x521B;&#x5EFA;&#xFF0C;&#x5E76;&#x4E8E;1994&#x5E74;&#x53D1;&#x5E03;&#x4E86;Linux-v1.0&#x3002;&#x662F;&#x4E00;&#x5957;&#x514D;&#x8D39;&#x4F7F;&#x7528;&#x548C;&#x81EA;&#x7531;&#x4F20;&#x64AD;&#x7684;&#x7C7B;Unix&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x57FA;&#x4E8E;POSIX&#x548C;Unix&#x7684;&#x591A;&#x7528;&#x6237;&#x3001;&#x591A;&#x4EFB;&#x52A1;&#x3001;&#x652F;&#x6301;&#x591A;&#x7EBF;&#x7A0B;&#x548C;&#x591A;CPU&#x7684;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x3002; Linux&#x7279;&#x70B9;&#x2003;&#x2003;Linux&#x662F;&#x4E00;&#x6B3E;&#x5B8C;&#x5168;&#x514D;&#x8D39;&#x7684;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#xFF0C;&#x7528;&#x6237;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5404;&#x79CD;&#x6E20;&#x9053;&#x4E0B;&#x8F7D;&#x4F7F;&#x7528;&#x3002;&#x2003;&#x2003;Linux&#x662F;&#x4E00;&#x6B3E;&#x5B8C;&#x5168;&#x5F00;&#x6E90;&#x7684;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#xFF0C;&#x7528;&#x6237;&#x53EF;&#x4EE5;&#x4EFB;&#x610F;&#x4FEE;&#x6539;&#x5176;&#x6E90;&#x4EE3;&#x7801;&#x3002;&#x2003;&#x2003;Linux&#x652F;&#x6301;&#x591A;&#x7528;&#x6237;&#xFF0C;&#x591A;&#x4EFB;&#x52A1;&#x7684;&#x4F7F;&#x7528;&#x65B9;&#x5F0F;&#xFF0C;&#x5BF9;&#x4E0D;&#x540C;&#x7684;&#x7528;&#x6237;&#x6709;&#x7740;&#x4E0D;&#x540C;&#x7684;&#x6743;&#x5229;&#x3002;&#x2003;&#x2003;Linux&#x5177;&#x6709;&#x826F;&#x597D;&#x7684;&#x754C;&#x9762;&#xFF0C;&#x540C;&#x65F6;&#x5177;&#x6709;&#x5B57;&#x7B26;&#x754C;&#x9762;&#x548C;&#x56FE;&#x5F62;&#x754C;&#x9762;&#x3002;&#x2003;&#x2003;Linux&#x652F;&#x6301;&#x591A;&#x5E73;&#x53F0;&#xFF0C;&#x53EF;&#x4EE5;&#x8FD0;&#x884C;&#x5728;&#x591A;&#x79CD;&#x786C;&#x4EF6;&#x5E73;&#x53F0;&#x4E0A;&#x3002;&#x2003;&#x2003;Linux&#x5185;&#x6838;&#x9AD8;&#x6548;&#x7A33;&#x5B9A;&#xFF0C;&#x53EF;&#x4F7F;&#x7528;&#x6237;&#x65B9;&#x4FBF;&#x5730;&#x5EFA;&#x7ACB;&#x9632;&#x706B;&#x5899;&#xFF0C;&#x670D;&#x52A1;&#x5668;&#x3002; Linux&#x6CE8;&#x610F;&#x4E8B;&#x9879;&#x2003;&#x2003;Linux&#x4E25;&#x683C;&#x533A;&#x5206;&#x5927;&#x5C0F;&#x5199;&#xFF0C;&#x5927;&#x5C0F;&#x5199;&#x4E0D;&#x540C;&#xFF0C;&#x547D;&#x4EE4;&#x4E0D;&#x540C;&#x3002;&#x2003;&#x2003;Linux&#x4E2D;&#x6240;&#x6709;&#x5185;&#x5BB9;&#x4EE5;&#x6587;&#x4EF6;&#x5F62;&#x5F0F;&#x4FDD;&#x5B58;&#xFF0C;&#x5305;&#x62EC;&#x786C;&#x4EF6;&#x3002;&#x2003;&#x2003;Linux&#x548C;Windows&#x4E0D;&#x540C;&#xFF0C;&#x4E0D;&#x9760;&#x6269;&#x5C55;&#x540D;&#x6765;&#x533A;&#x5206;&#x6587;&#x4EF6;&#x7C7B;&#x578B;&#x3002;&#x2003;&#x2003;Linux&#x6240;&#x6709;&#x7684;&#x8BBE;&#x5907;&#x90FD;&#x9700;&#x8981;&#x5148;&#x6302;&#x8F7D;&#x4E4B;&#x540E;&#x624D;&#x80FD;&#x4F7F;&#x7528;&#x3002;&#x2003;&#x2003;Windows&#x4E0B;&#x7684;&#x7A0B;&#x5E8F;&#x4E0D;&#x80FD;&#x76F4;&#x63A5;&#x5728;Linux&#x4E2D;&#x5B89;&#x88C5;&#x8FD0;&#x884C;&#x3002; Linux&#x5E38;&#x7528;&#x547D;&#x4EE4;&#x2003;&#x2003;&#x6B64;&#x547D;&#x4EE4;&#x90FD;&#x662F;&#x8FD0;&#x884C;&#x5728;Ubuntu&#x7CFB;&#x7EDF;&#x4E2D;&#xFF0C;&#x4E0D;&#x540C;&#x7684;Linux&#x7CFB;&#x5217;&#xFF0C;&#x5982;Debian&#x7CFB;&#x5217;&#x548C;Redhat&#x547D;&#x4EE4;&#x5927;&#x540C;&#x5C0F;&#x5F02;&#x3002; &#x663E;&#x793A;&#x76EE;&#x5F55;&#x6587;&#x4EF6; &#x547D;&#x4EE4; &#x8BF4;&#x660E; ls -a &#x663E;&#x793A;&#x6240;&#x6709;&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x5305;&#x62EC;&#x9690;&#x542B;&#x6587;&#x4EF6;(&#x4EE5;.&#x5F00;&#x5934;) ls -l &#x663E;&#x793A;&#x6587;&#x4EF6;&#x7684;&#x8BE6;&#x7EC6;&#x4FE1;&#x606F;&#xFF0C;&#x4E0D;&#x5305;&#x62EC;&#x9690;&#x542B;&#x6587;&#x4EF6; ls -h &#x4EE5;&#x4EBA;&#x6027;&#x5316;&#x5F62;&#x5F0F;&#x663E;&#x793A;&#x6587;&#x4EF6;&#xFF0C;&#x4E0D;&#x5305;&#x62EC;&#x9690;&#x542B;&#x6587;&#x4EF6; ls -i &#x67E5;&#x770B;&#x6587;&#x4EF6;&#x7684;i&#x7ED3;&#x70B9;&#xFF0C;&#x4E0D;&#x5305;&#x62EC;&#x9690;&#x542B;&#x6587;&#x4EF6; &#x2003;&#x2003;&#x6587;&#x4EF6;&#x4FE1;&#x606F;&#x5B57;&#x6BB5;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x9879;&#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x6BCD;&#xFF1A;&#x6587;&#x4EF6;&#x7684;&#x7C7B;&#x578B;&#xFF0C;-&#x4EE3;&#x8868;&#x4E8C;&#x8FDB;&#x5236;&#x6587;&#x4EF6;&#xFF0C;d&#x4EE3;&#x8868;&#x76EE;&#x5F55;&#xFF0C;l&#x4EE3;&#x8868;&#x8F6F;&#x8FDE;&#x63A5;&#x6587;&#x4EF6;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x9879;&#x7B2C;&#x4E8C;&#x4E2A;&#x5B57;&#x6BCD;&#x5230;&#x7B2C;&#x56DB;&#x4E2A;&#x5B57;&#x6BCD;&#xFF1A;&#x6587;&#x4EF6;&#x6240;&#x6709;&#x8005;&#x53EF;&#x5BF9;&#x6587;&#x4EF6;&#x7684;&#x64CD;&#x4F5C;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x9879;&#x7B2C;&#x4E94;&#x4E2A;&#x5B57;&#x6BCD;&#x5230;&#x7B2C;&#x4E03;&#x4E2A;&#x5B57;&#x6BCD;&#xFF1A;&#x7EC4;&#x5185;&#x6210;&#x5458;&#x53EF;&#x5BF9;&#x6587;&#x4EF6;&#x7684;&#x64CD;&#x4F5C;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x9879;&#x7B2C;&#x516B;&#x4E2A;&#x5B57;&#x6BCD;&#x5230;&#x7B2C;&#x5341;&#x4E2A;&#x5B57;&#x6BCD;&#xFF1A;&#x5176;&#x4ED6;&#x7528;&#x6237;&#x53EF;&#x5BF9;&#x6587;&#x4EF6;&#x7684;&#x64CD;&#x4F5C;&#x2003;&#x2003;&#x4E09;&#x4E2A;&#x5B57;&#x6BCD;&#x4E3A;&#x4E00;&#x7EC4;&#xFF0C;&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#x5206;&#x522B;&#x662F;&#x8BFB;(r)&#xFF0C;&#x5199;(w)&#xFF0C;&#x6267;&#x884C;(x)&#x2003;&#x2003;&#x7B2C;&#x4E8C;&#x9879;&#xFF1A;&#x6587;&#x4EF6;&#x786C;&#x94FE;&#x63A5;&#x6570;&#x2003;&#x2003;&#x7B2C;&#x4E09;&#x9879;&#xFF1A;&#x6587;&#x4EF6;&#x7684;&#x6240;&#x6709;&#x8005;&#x2003;&#x2003;&#x7B2C;&#x56DB;&#x9879;&#xFF1A;&#x6587;&#x4EF6;&#x7684;&#x6240;&#x5C5E;&#x7EC4;&#x2003;&#x2003;&#x7B2C;&#x4E94;&#x9879;&#xFF1A;&#x6587;&#x4EF6;&#x6240;&#x5360;&#x7528;&#x7684;&#x5B57;&#x8282;&#x7A7A;&#x95F4;&#x2003;&#x2003;&#x7B2C;&#x516D;&#x9879;&#xFF1A;&#x6587;&#x4EF6;&#x6700;&#x8FD1;&#x7684;&#x8BBF;&#x95EE;&#x65F6;&#x95F4;&#x2003;&#x2003;&#x7B2C;&#x4E03;&#x9879;&#xFF1A;&#x6587;&#x4EF6;&#x540D; &#x76EE;&#x5F55;&#x5904;&#x7406;&#x547D;&#x4EE4; &#x547D;&#x4EE4; &#x8BF4;&#x660E; mkdir -p dicname &#x9012;&#x5F52;&#x521B;&#x5EFA;&#x540D;&#x4E3A;dicname&#x7684;&#x6587;&#x4EF6;&#x5939; mkdir dicname &#x521B;&#x5EFA;&#x540D;&#x4E3A;dicname&#x7684;&#x6587;&#x4EF6;&#x5939; cd dicname &#x5207;&#x6362;&#x76EE;&#x5F55; cd .. &#x8FD4;&#x56DE;&#x4E0A;&#x4E00;&#x7EA7;&#x76EE;&#x5F55; pwd &#x663E;&#x793A;&#x5F53;&#x524D;&#x76EE;&#x5F55; rmdir dicname &#x5220;&#x9664;&#x7A7A;&#x76EE;&#x5F55; cp old new &#x590D;&#x5236;&#x6587;&#x4EF6; cp -r old new &#x590D;&#x5236;&#x76EE;&#x5F55; cp -p old new &#x4FDD;&#x7559;&#x5C5E;&#x6027;&#x590D;&#x5236; mv old new &#x526A;&#x5207;&#x6587;&#x4EF6; rm filename &#x5220;&#x9664;&#x6587;&#x4EF6; rm -r dicname &#x5220;&#x9664;&#x76EE;&#x5F55; rm -f &#x5F3A;&#x5236;&#x6267;&#x884C; &#x6587;&#x4EF6;&#x5904;&#x7406;&#x547D;&#x4EE4; &#x547D;&#x4EE4; &#x8BF4;&#x660E; touch filename &#x521B;&#x5EFA;&#x540D;&#x4E3A;filename&#x7684;&#x7A7A;&#x6587;&#x4EF6; cat filename &#x663E;&#x793A;filename&#x6587;&#x4EF6;&#x5185;&#x5BB9; cat -n filename &#x663E;&#x793A;filename&#x6587;&#x4EF6;&#x5185;&#x5BB9;&#xFF0C;&#x5E76;&#x663E;&#x793A;&#x884C;&#x53F7; tac &#x53CD;&#x5411;&#x663E;&#x793A;&#x6587;&#x4EF6;&#x5185;&#x5BB9; less &#x5206;&#x9875;&#x663E;&#x793A;&#x6587;&#x4EF6;&#x5185;&#x5BB9;(pageup&#x548C;pagedown) head -n m &#x663E;&#x793A;&#x6587;&#x4EF6;&#x524D;m&#x884C; tail -n m &#x663E;&#x793A;&#x6587;&#x4EF6;&#x540E;m&#x884C; &#x94FE;&#x63A5;&#x547D;&#x4EE4; &#x547D;&#x4EE4; &#x8BF4;&#x660E; ln filename hardlink &#x751F;&#x6210;&#x94FE;&#x63A5;&#x5230;filename&#x7684;&#x786C;&#x94FE;&#x63A5; ln -s filename softlink &#x751F;&#x6210;&#x94FE;&#x63A5;&#x5230;filename&#x7684;&#x8F6F;&#x94FE;&#x63A5; &#x2003;&#x2003;&#x786C;&#x94FE;&#x63A5;&#x2003;&#x2003;&#x786C;&#x94FE;&#x63A5;&#x9664;&#x4E86;&#x6587;&#x4EF6;&#x540D;&#x6240;&#x5728;&#x5730;&#xFF0C;&#x5176;&#x4F59;&#x4FE1;&#x606F;&#x90FD;&#x76F8;&#x540C;&#x3002;&#x2003;&#x2003;&#x786C;&#x94FE;&#x63A5;&#x540E;&#xFF0C;&#x6587;&#x4EF6;&#x4FE1;&#x606F;&#x4E2D;&#x7684;&#x94FE;&#x63A5;&#x6570;&#x4F1A;&#x52A0;1&#x3002;&#x2003;&#x2003;&#x786C;&#x94FE;&#x63A5;&#x6587;&#x4EF6;&#x7684;i&#x8282;&#x70B9;&#x548C;&#x6E90;&#x6587;&#x4EF6;&#x76F8;&#x540C;&#x3002;&#x2003;&#x2003;&#x786C;&#x94FE;&#x63A5;&#x4E0D;&#x80FD;&#x8DE8;&#x5206;&#x533A;&#x3002;&#x2003;&#x2003;&#x786C;&#x94FE;&#x63A5;&#x4E0D;&#x80FD;&#x9488;&#x5BF9;&#x76EE;&#x5F55;&#x3002;&#x2003;&#x2003;&#x6E90;&#x6587;&#x4EF6;&#x4E22;&#x5931;&#xFF0C;&#x4ECD;&#x7136;&#x53EF;&#x4EE5;&#x8BBF;&#x95EE;&#x786C;&#x94FE;&#x63A5;&#x3002; &#x2003;&#x2003;&#x8F6F;&#x94FE;&#x63A5;&#x2003;&#x2003;&#x8F6F;&#x94FE;&#x63A5;&#x7C7B;&#x4F3C;&#x4E8E;Windows&#x4E2D;&#x7684;&#x5FEB;&#x6377;&#x65B9;&#x5F0F;&#xFF0C;&#x6709;&#x7BAD;&#x5934;&#x6307;&#x5411;&#x3002;&#x2003;&#x2003;&#x8F6F;&#x94FE;&#x63A5;&#x540E;&#xFF0C;&#x6587;&#x4EF6;&#x4FE1;&#x606F;&#x4E2D;&#x7684;&#x94FE;&#x63A5;&#x6570;&#x4E0D;&#x53D8;&#x3002;&#x2003;&#x2003;&#x8F6F;&#x94FE;&#x63A5;&#x6587;&#x4EF6;&#x7684;i&#x8282;&#x70B9;&#x548C;&#x6E90;&#x6587;&#x4EF6;&#x4E0D;&#x540C;&#x3002;&#x2003;&#x2003;&#x8F6F;&#x94FE;&#x63A5;&#x53EF;&#x4EE5;&#x8DE8;&#x5206;&#x533A;&#x3002;&#x2003;&#x2003;&#x8F6F;&#x94FE;&#x63A5;&#x53EF;&#x4EE5;&#x9488;&#x5BF9;&#x76EE;&#x5F55;&#x3002;&#x2003;&#x2003;&#x6E90;&#x6587;&#x4EF6;&#x4E22;&#x5931;&#xFF0C;&#x4E0D;&#x80FD;&#x8BBF;&#x95EE;&#x8F6F;&#x94FE;&#x63A5;&#x3002; &#x6743;&#x9650;&#x7BA1;&#x7406;&#x547D;&#x4EE4; &#x547D;&#x4EE4; &#x8BF4;&#x660E; chmod op filename &#x4FEE;&#x6539;filename&#x6587;&#x4EF6;&#x7684;&#x6743;&#x9650; chmod -R op dicname &#x4FEE;&#x6539;dicname&#x76EE;&#x5F55;&#x4E0B;&#x6240;&#x6709;&#x6587;&#x4EF6;&#x7684;&#x6743;&#x9650; chown own filename_or_dicname &#x4FEE;&#x6539;&#x6587;&#x4EF6;&#x6216;&#x76EE;&#x5F55;&#x7684;&#x6240;&#x6709;&#x8005; chgrp grp filename_or_dicname &#x4FEE;&#x6539;&#x6587;&#x4EF6;&#x6216;&#x76EE;&#x5F55;&#x7684;&#x6240;&#x5C5E;&#x7EC4; umask &#x67E5;&#x770B;&#x5F53;&#x524D;&#x7528;&#x6237;&#x65B0;&#x5EFA;&#x6587;&#x4EF6;&#x7684;&#x7F3A;&#x7701;&#x6743;&#x9650; &#x2003;&#x2003;&#x6587;&#x4EF6;&#x6743;&#x9650;&#x2003;&#x2003;r&#xFF1A;&#x8BFB;&#x6743;&#x9650;&#xFF0C;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x6587;&#x4EF6;&#x5185;&#x5BB9;&#xFF0C;&#x5982;cat, tac, less, head, tail&#x7B49;&#x2003;&#x2003;w&#xFF1A;&#x5199;&#x6743;&#x9650;&#xFF0C;&#x53EF;&#x4EE5;&#x4FEE;&#x6539;&#x6587;&#x4EF6;&#x5185;&#x5BB9;&#xFF0C;&#x5982;vi, vim&#x7B49;&#x2003;&#x2003;x&#xFF1A;&#x6267;&#x884C;&#x6743;&#x9650;&#xFF0C;&#x53EF;&#x4EE5;&#x6267;&#x884C;&#x6587;&#x4EF6;&#xFF0C;&#x5982;script, command&#x7B49; &#x2003;&#x2003;&#x76EE;&#x5F55;&#x6743;&#x9650;&#x2003;&#x2003;r&#xFF1A;&#x8BFB;&#x6743;&#x9650;&#xFF0C;&#x53EF;&#x4EE5;&#x5217;&#x51FA;&#x76EE;&#x5F55;&#x5185;&#x5BB9;&#xFF0C;&#x5982;ls&#x7B49;&#x2003;&#x2003;w&#xFF1A;&#x5199;&#x6743;&#x9650;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x76EE;&#x5F55;&#x4E2D;&#x521B;&#x5EFA;&#x5220;&#x9664;&#x6587;&#x4EF6;&#xFF0C;&#x5982;touch, mkdir, rmdir, rm&#x7B49;&#x2003;&#x2003;x&#xFF1A;&#x6267;&#x884C;&#x6743;&#x9650;&#xFF0C;&#x53EF;&#x4EE5;&#x8FDB;&#x5165;&#x76EE;&#x5F55;&#xFF0C;&#x5982;cd&#x7B49; &#x2003;&#x2003;&#x4FEE;&#x6539;&#x6743;&#x9650;&#x4E24;&#x79CD;&#x64CD;&#x4F5C;&#x2003;&#x2003;u/g/o/a +/-/= r/w/x&#x5BF9;&#x6240;&#x6709;&#x8005;/&#x6240;&#x5C5E;&#x7EC4;/&#x5176;&#x4ED6;&#x7528;&#x6237;/&#x6240;&#x6709;&#x4EBA; &#x52A0;/&#x51CF;/&#x8D4B;&#x503C; &#x8BFB;/&#x5199;/&#x6267;&#x884C;&#x6743;&#x9650;&#x2003;&#x2003;&#x5982; chmod g+w, o-r filename &#x5BF9;filename&#x7684;&#x6240;&#x5C5E;&#x7EC4;&#x6DFB;&#x52A0;&#x5199;&#x6743;&#x9650;&#xFF0C;&#x5BF9;&#x5176;&#x4ED6;&#x7528;&#x6237;&#x5220;&#x9664;&#x8BFB;&#x6743;&#x9650; &#x2003;&#x2003;&#x76F4;&#x63A5;&#x5229;&#x7528;&#x6570;&#x5B57;&#x8FDB;&#x884C;&#x8D4B;&#x503C;&#x6743;&#x9650;&#x2003;&#x2003;&#x5982; chmod 644 filename &#x5BF9;filename&#x7684;&#x6240;&#x6709;&#x8005;&#x6DFB;&#x52A0;&#x8BFB;&#x5199;&#x6743;&#x9650;&#xFF0C;&#x5BF9;&#x6240;&#x5C5E;&#x7EC4;&#x548C;&#x5176;&#x4ED6;&#x7528;&#x6237;&#x6DFB;&#x52A0;&#x8BFB;&#x6743;&#x9650; &#x6587;&#x4EF6;&#x641C;&#x7D22;&#x547D;&#x4EE4; &#x547D;&#x4EE4; &#x8BF4;&#x660E; find range condition &#x67E5;&#x627E;range&#x8303;&#x56F4;&#x5185;&#x7B26;&#x5408;&#x6761;&#x4EF6;&#x7684;&#x6587;&#x4EF6;&#x6216;&#x76EE;&#x5F55; locate filename &#x4ECE;&#x6587;&#x4EF6;&#x8D44;&#x6599;&#x5E93;&#x4E2D;&#x67E5;&#x627E;&#x6587;&#x4EF6; which command &#x641C;&#x7D22;&#x547D;&#x4EE4;&#x6240;&#x5728;&#x76EE;&#x5F55;&#x53CA;&#x522B;&#x540D;&#x4FE1;&#x606F; whereis command &#x641C;&#x7D22;&#x547D;&#x4EE4;&#x6240;&#x5728;&#x76EE;&#x5F55;&#x53CA;&#x5E2E;&#x52A9;&#x6587;&#x6863;&#x8DEF;&#x5F84; grep string file &#x5728;&#x6587;&#x4EF6;&#x4E2D;&#x641C;&#x7D22;&#x5B57;&#x7B26;&#x4E32;&#x5339;&#x914D;&#x7684;&#x884C;&#x5E76;&#x8F93;&#x51FA; grep -i string file &#x4E0D;&#x533A;&#x5206;&#x5B57;&#x7B26;&#x4E32;&#x5927;&#x5C0F;&#x5199;&#x641C;&#x7D22;&#x5339;&#x914D;&#x7684;&#x884C;&#x5E76;&#x8F93;&#x51FA; grep -v string file &#x5728;&#x6587;&#x4EF6;&#x4E2D;&#x6392;&#x9664;&#x4E0E;&#x5B57;&#x7B26;&#x4E32;&#x5339;&#x914D;&#x7684;&#x884C;&#x5E76;&#x8F93;&#x51FA; grep -n string file &#x5728;&#x6587;&#x4EF6;&#x4E2D;&#x641C;&#x7D22;&#x5B57;&#x7B26;&#x4E32;&#x5339;&#x914D;&#x7684;&#x884C;&#x5E76;&#x8F93;&#x51FA;&#xFF0C;&#x5E76;&#x663E;&#x793A;&#x884C;&#x6570; &#x2003;&#x2003;find&#x641C;&#x7D22;&#x5339;&#x914D;&#x6761;&#x4EF6;&#x2003;&#x2003;*&#xFF1A;&#x5339;&#x914D;&#x5B57;&#x7B26;&#x591A;&#x4E2A;&#x2003;&#x2003;&#x5982;*init&#x6307;&#x4EE5;init&#x7ED3;&#x5C3E;&#x7684;&#x6587;&#x4EF6;&#x540D;&#xFF0C;*init*&#x6307;&#x5305;&#x542B;init&#x7684;&#x6587;&#x4EF6;&#x540D;&#x2003;&#x2003;?&#xFF1A;&#x5339;&#x914D;&#x5355;&#x4E2A;&#x5B57;&#x7B26;&#x2003;&#x2003;&#x5982;???init&#x6307;&#x4EE5;init&#x7ED3;&#x5C3E;&#x957F;&#x5EA6;&#x4E3A;7&#x7684;&#x6587;&#x4EF6;&#x540D; &#x5E2E;&#x52A9;&#x547D;&#x4EE4; &#x547D;&#x4EE4; &#x8BF4;&#x660E; man command &#x83B7;&#x5F97;&#x547D;&#x4EE4;&#x7684;&#x5E2E;&#x52A9;&#x4FE1;&#x606F; whatis command &#x67E5;&#x770B;&#x547D;&#x4EE4;&#x7684;&#x529F;&#x80FD; apropos filename &#x67E5;&#x770B;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x7684;&#x7B80;&#x8981;&#x4FE1;&#x606F; command &#x2013;help &#x67E5;&#x770B;&#x547D;&#x4EE4;&#x7684;&#x5E38;&#x89C1;&#x9009;&#x9879; help command &#x67E5;&#x770B;shell&#x5185;&#x7F6E;&#x547D;&#x4EE4;&#x7684;&#x5E2E;&#x52A9;&#x4FE1;&#x606F; &#x7F51;&#x7EDC;&#x547D;&#x4EE4; &#x547D;&#x4EE4; &#x8BF4;&#x660E; write username &#x7ED9;&#x7528;&#x6237;&#x53D1;&#x4FE1;&#x606F; wall &#x53D1;&#x5E7F;&#x64AD;&#x4FE1;&#x606F; ping ip &#x5BF9;ip&#x5730;&#x5740;&#x53D1;&#x6570;&#x636E;&#x5305;&#x68C0;&#x6D4B;&#x7F51;&#x7EDC;&#x8FDE;&#x901A;&#x6027;&#xFF0C;&#x4E00;&#x76F4;&#x5728;&#x53D1;&#x9001; ping -c n ip &#x5BF9;ip&#x5730;&#x5740;&#x53D1;&#x6570;&#x636E;&#x5305;&#x68C0;&#x6D4B;&#x7F51;&#x7EDC;&#x8FDE;&#x901A;&#x6027;&#xFF0C;&#x53D1;&#x9001;n&#x6B21; ifconfig net_card ip &#x914D;&#x7F6E;&#x7F51;&#x5361;&#x7684;ip&#x5730;&#x5740; mail username &#x67E5;&#x770B;&#x53D1;&#x9001;&#x7684;&#x7535;&#x5B50;&#x90AE;&#x4EF6; last &#x5217;&#x51FA;&#x767B;&#x5F55;&#x7CFB;&#x7EDF;&#x7684;&#x7528;&#x6237;&#x4FE1;&#x606F; lastlog &#x67E5;&#x770B;&#x6240;&#x6709;&#x7528;&#x6237;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x767B;&#x5F55;&#x7684;&#x65F6;&#x95F4; lastlog -u userid &#x67E5;&#x770B;&#x7528;&#x6237;id&#x4E3A;userid(&#x4E0D;&#x662F;&#x7528;&#x6237;&#x540D;)&#x7684;&#x7528;&#x6237;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x767B;&#x5F55;&#x65F6;&#x95F4; traceroute url &#x67E5;&#x770B;&#x6570;&#x636E;&#x5305;&#x5230;&#x4E3B;&#x673A;&#x95F4;&#x7684;&#x8DEF;&#x5F84; netstat -t &#x663E;&#x793A;&#x7F51;&#x7EDC;&#x4E2D;&#x7684;TCP&#x534F;&#x8BAE; netstat -u &#x663E;&#x793A;&#x7F51;&#x7EDC;&#x4E2D;&#x7684;UDP&#x534F;&#x8BAE; netstat -l &#x76D1;&#x542C;&#x7F51;&#x7EDC;&#x670D;&#x52A1; netstat -r &#x67E5;&#x770B;&#x8DEF;&#x7531;&#x8868; netstat -n &#x663E;&#x793A;ip&#x5730;&#x5740;&#x548C;&#x7AEF;&#x53E3;&#x53F7; &#x5173;&#x673A;&#x91CD;&#x542F;&#x547D;&#x4EE4; &#x547D;&#x4EE4; &#x8BF4;&#x660E; shutdown -c &#x53D6;&#x6D88;&#x4E0A;&#x4E00;&#x4E2A;&#x5173;&#x673A;&#x547D;&#x4EE4; shutdown -h +n n&#x5206;&#x949F;&#x540E;&#x5173;&#x673A; shutdown -h time &#x5230;&#x8FBE;&#x65F6;&#x95F4;time&#x5173;&#x673A; shutdown -h now &#x73B0;&#x5728;&#x5173;&#x673A; shutdown -r +n n&#x5206;&#x949F;&#x540E;&#x91CD;&#x542F; shutdown -r time &#x5230;&#x8FBE;&#x65F6;&#x95F4;time&#x91CD;&#x542F; shutdown -r now &#x73B0;&#x5728;&#x91CD;&#x542F; &#x4FEE;&#x6539;&#x7CFB;&#x7EDF;&#x9ED8;&#x8BA4;&#x8FD0;&#x884C;&#x7EA7;&#x522B; &#x547D;&#x4EE4; &#x8BF4;&#x660E; vim /etc/inittab &#x4FEE;&#x6539;&#x7CFB;&#x7EDF;&#x9ED8;&#x8BA4;&#x8FD0;&#x884C;&#x7EA7;&#x522B; runlevel &#x67E5;&#x770B;&#x7CFB;&#x7EDF;&#x8FD0;&#x884C;&#x7EA7;&#x522B; &#x2003;&#x2003;&#x7CFB;&#x7EDF;&#x8FD0;&#x884C;&#x7EA7;&#x522B;&#x2003;&#x2003;0&#xFF1A;&#x5173;&#x673A;&#x2003;&#x2003;1&#xFF1A;&#x5355;&#x7528;&#x6237;&#x6A21;&#x5F0F;&#x2003;&#x2003;2&#xFF1A;&#x4E0D;&#x5B8C;&#x5168;&#x591A;&#x7528;&#x6237;&#x6A21;&#x5F0F;&#xFF0C;&#x4E0D;&#x542B; NFS&#x670D;&#x52A1;&#x2003;&#x2003;3&#xFF1A;&#x5B8C;&#x5168;&#x591A;&#x7528;&#x6237;&#x6A21;&#x5F0F;&#x52A1;&#x2003;&#x2003;4&#xFF1A;&#x672A;&#x5206;&#x914D;&#x2003;&#x2003;5&#xFF1A;&#x56FE;&#x5F62;&#x754C;&#x9762;&#x2003;&#x2003;6&#xFF1A;&#x91CD;&#x542F; &#x7528;&#x6237;&#x914D;&#x7F6E;&#x6587;&#x4EF6; &#x547D;&#x4EE4; &#x8BF4;&#x660E; less /etc/passwd &#x67E5;&#x770B;&#x7528;&#x6237;&#x4FE1;&#x606F;&#x6587;&#x4EF6; less /etc/shadow &#x67E5;&#x770B;&#x7528;&#x6237;&#x5F71;&#x5B50;&#x6587;&#x4EF6; less /etc/group &#x67E5;&#x770B;&#x7EC4;&#x4FE1;&#x606F;&#x6587;&#x4EF6; less /etc/gshadow &#x67E5;&#x770B;&#x7EC4;&#x5F71;&#x5B50;&#x6587;&#x4EF6; &#x2003;&#x2003;&#x7528;&#x6237;&#x4FE1;&#x606F;&#x6587;&#x4EF6;&#x5B57;&#x6BB5;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7528;&#x6237;&#x540D;&#x79F0;&#x2003;&#x2003;&#x7B2C;&#x4E8C;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x5BC6;&#x7801;&#x6807;&#x5FD7;&#x2003;&#x2003;&#x7B2C;&#x4E09;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7528;&#x6237;ID(UID)&#x2003;&#x2003;&#x7B2C;&#x56DB;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7528;&#x6237;&#x521D;&#x59CB;&#x7EC4;ID(GID)&#x2003;&#x2003;&#x7B2C;&#x4E94;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7528;&#x6237;&#x8BF4;&#x660E;&#x2003;&#x2003;&#x7B2C;&#x516D;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x5BB6;&#x7528;&#x6237;&#x2003;&#x2003;&#x7B2C;&#x4E03;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x767B;&#x5F55;&#x540E;&#x7684;shell &#x2003;&#x2003;&#x7528;&#x6237;&#x5F71;&#x5B50;&#x6587;&#x4EF6;&#x5B57;&#x6BB5;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7528;&#x6237;&#x540D;&#x79F0;&#x2003;&#x2003;&#x7B2C;&#x4E8C;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x52A0;&#x5BC6;&#x5BC6;&#x7801;&#x2003;&#x2003;&#x7B2C;&#x4E09;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x5BC6;&#x7801;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x4FEE;&#x6539;&#x65F6;&#x95F4;&#x2003;&#x2003;&#x7B2C;&#x56DB;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x4E24;&#x6B21;&#x5BC6;&#x7801;&#x4FEE;&#x6539;&#x95F4;&#x9694;&#x2003;&#x2003;&#x7B2C;&#x4E94;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x5BC6;&#x7801;&#x6709;&#x6548;&#x671F;&#x2003;&#x2003;&#x7B2C;&#x516D;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x5BC6;&#x7801;&#x5230;&#x671F;&#x524D;&#x7684;&#x8B66;&#x544A;&#x5929;&#x6570;&#x2003;&#x2003;&#x7B2C;&#x4E03;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x5BC6;&#x7801;&#x8FC7;&#x671F;&#x540E;&#x7684;&#x5BBD;&#x9650;&#x5929;&#x6570;&#x2003;&#x2003;&#x7B2C;&#x516B;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x8D26;&#x53F7;&#x5931;&#x6548;&#x65F6;&#x95F4;&#x2003;&#x2003;&#x7B2C;&#x4E5D;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x4FDD;&#x7559;&#x5B57;&#x6BB5; &#x2003;&#x2003;&#x7EC4;&#x4FE1;&#x606F;&#x6587;&#x4EF6;&#x5B57;&#x6BB5;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7EC4;&#x540D;&#x79F0;&#x2003;&#x2003;&#x7B2C;&#x4E8C;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7EC4;&#x5BC6;&#x7801;&#x6807;&#x5FD7;&#x2003;&#x2003;&#x7B2C;&#x4E09;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7EC4;ID(GID)&#x2003;&#x2003;&#x7B2C;&#x56DB;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7EC4;&#x4E2D;&#x9644;&#x52A0;&#x7528;&#x6237; &#x2003;&#x2003;&#x7EC4;&#x5F71;&#x5B50;&#x6587;&#x4EF6;&#x5B57;&#x6BB5;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7EC4;&#x540D;&#x79F0;&#x2003;&#x2003;&#x7B2C;&#x4E8C;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7EC4;&#x5BC6;&#x7801;&#x2003;&#x2003;&#x7B2C;&#x4E09;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7EC4;&#x7BA1;&#x7406;&#x5458;&#x7528;&#x6237;&#x540D;&#x2003;&#x2003;&#x7B2C;&#x56DB;&#x4E2A;&#x5B57;&#x6BB5;&#xFF1A;&#x7EC4;&#x4E2D;&#x9644;&#x52A0;&#x7528;&#x6237; &#x7528;&#x6237;&#x7BA1;&#x7406;&#x547D;&#x4EE4; &#x547D;&#x4EE4; &#x8BF4;&#x660E; useradd username &#x6DFB;&#x52A0;&#x65B0;&#x7528;&#x6237; useradd -u username &#x6DFB;&#x52A0;&#x65B0;&#x7528;&#x6237;&#xFF0C;&#x624B;&#x52A8;&#x6307;&#x5B9A;&#x7528;&#x6237;id useradd -d username &#x6DFB;&#x52A0;&#x65B0;&#x7528;&#x6237;&#xFF0C;&#x624B;&#x52A8;&#x6307;&#x5B9A;&#x5BB6;&#x76EE;&#x5F55; useradd -c username &#x6DFB;&#x52A0;&#x65B0;&#x7528;&#x6237;&#xFF0C;&#x624B;&#x52A8;&#x6307;&#x5B9A;&#x7528;&#x6237;&#x8BF4;&#x660E; useradd -G username &#x6DFB;&#x52A0;&#x65B0;&#x7528;&#x6237;&#xFF0C;&#x624B;&#x52A8;&#x6307;&#x5B9A;&#x9644;&#x52A0;&#x7EC4; useradd -g username &#x6DFB;&#x52A0;&#x65B0;&#x7528;&#x6237;&#xFF0C;&#x624B;&#x52A8;&#x6307;&#x5B9A;&#x521D;&#x59CB;&#x7EC4; useradd -s username &#x6DFB;&#x52A0;&#x65B0;&#x7528;&#x6237;&#xFF0C;&#x624B;&#x52A8;&#x6307;&#x5B9A;&#x767B;&#x5F55;shell passwd username &#x8BBE;&#x7F6E;&#x7528;&#x6237;&#x5BC6;&#x7801; passwd -s username &#x67E5;&#x8BE2;&#x7528;&#x6237;&#x5BC6;&#x7801;&#x72B6;&#x6001; passwd -l username &#x6682;&#x65F6;&#x9501;&#x5B9A;&#x7528;&#x6237; passwd -u username &#x89E3;&#x9501;&#x7528;&#x6237; userdel username &#x5220;&#x9664;&#x7528;&#x6237; change -l username &#x5217;&#x51FA;&#x7528;&#x6237;&#x7684;&#x8BE6;&#x7EC6;&#x5BC6;&#x7801;&#x72B6;&#x6001; change -d username &#x4FEE;&#x6539;&#x5BC6;&#x7801;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x66F4;&#x6539;&#x65E5;&#x671F; change -m username &#x4FEE;&#x6539;&#x4E24;&#x6B21;&#x5BC6;&#x7801;&#x4FEE;&#x6539;&#x95F4;&#x9694; change -M username &#x4FEE;&#x6539;&#x5BC6;&#x7801;&#x6709;&#x6548;&#x671F; change -W username &#x4FEE;&#x6539;&#x5BC6;&#x7801;&#x8FC7;&#x671F;&#x524D;&#x8B66;&#x544A;&#x5929;&#x6570; change -I username &#x4FEE;&#x6539;&#x5BC6;&#x7801;&#x8FC7;&#x671F;&#x540E;&#x5BBD;&#x9650;&#x5929;&#x6570; change -E username &#x4FEE;&#x6539;&#x8D26;&#x53F7;&#x5931;&#x6548;&#x65F6;&#x95F4; &#x7528;&#x6237;&#x7EC4;&#x7BA1;&#x7406;&#x547D;&#x4EE4; &#x547D;&#x4EE4; &#x8BF4;&#x660E; groupadd groupname &#x6DFB;&#x52A0;&#x65B0;&#x7528;&#x6237;&#x7EC4; groupadd -g groupname &#x6DFB;&#x52A0;&#x65B0;&#x7528;&#x6237;&#xFF0C;&#x624B;&#x52A8;&#x6307;&#x5B9A;&#x7EC4;id groupmod -g groupname &#x4FEE;&#x6539;&#x7EC4;id groupmod -n groupname &#x4FEE;&#x6539;&#x7EC4;&#x540D; groupdel groupname &#x5220;&#x9664;&#x7528;&#x6237;&#x7EC4; gpasswd -a groupname &#x5C06;&#x7528;&#x6237;&#x52A0;&#x5165;&#x7528;&#x6237;&#x7EC4; gpasswd -a groupname &#x5C06;&#x7528;&#x6237;&#x4ECE;&#x7528;&#x6237;&#x7EC4;&#x5220;&#x9664; &#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#x7BA1;&#x7406;&#x547D;&#x4EE4; &#x547D;&#x4EE4; &#x8BF4;&#x660E; df -a dirname &#x663E;&#x793A;&#x6587;&#x4EF6;&#x7684;&#x7CFB;&#x7EDF;&#x4FE1;&#x606F; df -h dirname &#x4EE5;&#x4EBA;&#x6027;&#x5316;&#x65B9;&#x5F0F;&#x663E;&#x793A;&#x6587;&#x4EF6;&#x7684;&#x7CFB;&#x7EDF;&#x4FE1;&#x606F; df -a dirname &#x663E;&#x793A;&#x6587;&#x4EF6;&#x7684;&#x7CFB;&#x7EDF;&#x7C7B;&#x578B; du -a dicname &#x663E;&#x793A;&#x6BCF;&#x4E2A;&#x5B50;&#x6587;&#x4EF6;&#x7684;&#x78C1;&#x76D8;&#x5360;&#x7528;&#x91CF; du -h dicname &#x4EE5;&#x4EBA;&#x6027;&#x5316;&#x65B9;&#x5F0F;&#x663E;&#x793A;&#x6BCF;&#x4E2A;&#x5B50;&#x6587;&#x4EF6;&#x7684;&#x78C1;&#x76D8;&#x5360;&#x7528;&#x91CF; du -s dicname &#x7EDF;&#x8BA1;&#x603B;&#x5360;&#x7528;&#x91CF; fdisk -l &#x67E5;&#x770B;u&#x76D8;&#x7684;&#x8BBE;&#x5907;&#x6587;&#x4EF6;&#x540D; mount -t vfat device dicname &#x5C06;u&#x76D8;&#x6587;&#x4EF6;&#x540D;device&#x6302;&#x8F7D;&#x5230;dicname&#x6587;&#x4EF6;&#x540D;&#x4E2D; umount device &#x5378;&#x8F7D;&#x6302;&#x8F7D;device &#x7EC8;&#x7AEF;&#x5E38;&#x7528;&#x547D;&#x4EE4; &#x547D;&#x4EE4; &#x8BF4;&#x660E; Ctrl + Alt +t &#x6253;&#x5F00;&#x7EC8;&#x7AEF; Ctrl + d &#x9000;&#x51FA;&#x7EC8;&#x7AEF; Ctrl + c &#x7EC8;&#x6B62;&#x6B63;&#x5728;&#x8FD0;&#x884C;&#x7684;&#x7A0B;&#x5E8F; Ctrl + l &#x6E05;&#x5C4F; Ctrl + s &#x9501;&#x4F4F;&#x7EC8;&#x7AEF; Ctrl + q &#x89E3;&#x9501;&#x7EC8;&#x7AEF; Ctrl + r &#x67E5;&#x627E;&#x5386;&#x53F2;&#x547D;&#x4EE4; ^up &#x67E5;&#x770B;&#x4E0A;&#x4E00;&#x4E2A;&#x5386;&#x53F2;&#x8BB0;&#x5F55; ^down &#x67E5;&#x770B;&#x4E0B;&#x4E00;&#x4E2A;&#x5386;&#x53F2;&#x8BB0;&#x5F55; su &#x5207;&#x6362;&#x5230;root&#x7528;&#x6237; su username &#x5207;&#x6362;&#x5230;username&#x7528;&#x6237; sudo command &#x4EE5;root&#x6743;&#x9650;&#x6267;&#x884C;&#x547D;&#x4EE4; TAB &#x547D;&#x4EE4;&#x4E0E;&#x6587;&#x4EF6;&#x8865;&#x5168; alias &#x67E5;&#x770B;&#x547D;&#x4EE4;&#x7684;&#x522B;&#x540D; alias newname command &#x7ED9;&#x539F;&#x547D;&#x4EE4;&#x8D77;&#x4E00;&#x4E2A;&#x522B;&#x540D; &#x91CD;&#x5B9A;&#x5411;&#x547D;&#x4EE4; &#x547D;&#x4EE4; &#x8BF4;&#x660E; command &gt; filename &#x5C06;&#x6B63;&#x786E;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8986;&#x76D6;&#x5230;filename&#x6587;&#x4EF6;&#x4E2D; command &gt;&gt; filename &#x5C06;&#x6B63;&#x786E;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8FFD;&#x52A0;&#x5230;filename&#x6587;&#x4EF6;&#x4E2D; command 2&gt; filename &#x5C06;&#x9519;&#x8BEF;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8986;&#x76D6;&#x5230;filename&#x6587;&#x4EF6;&#x4E2D; command 2&gt;&gt; filename &#x5C06;&#x9519;&#x8BEF;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8FFD;&#x52A0;&#x5230;filename&#x6587;&#x4EF6;&#x4E2D; command &amp;&gt; filename &#x5C06;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8986;&#x76D6;&#x5230;filename&#x6587;&#x4EF6;&#x4E2D;(&#x65E0;&#x8BBA;&#x6B63;&#x786E;&#x4E0E;&#x5426;) command &amp;&gt;&gt; filename &#x5C06;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8FFD;&#x52A0;&#x5230;filename&#x6587;&#x4EF6;&#x4E2D;(&#x65E0;&#x8BBA;&#x6B63;&#x786E;&#x4E0E;&#x5426;) command &gt;&gt; filename1 &amp;&gt;&gt; filename2 &#x5C06;&#x6B63;&#x786E;&#x7684;&#x547D;&#x4EE4;&#x7ED3;&#x679C;&#x8FFD;&#x52A0;&#x5230;filename1&#xFF0C;&#x9519;&#x8BEF;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8FFD;&#x52A0;&#x5230;&#x5230;filename2 &#x591A;&#x547D;&#x4EE4; &#x547D;&#x4EE4; &#x8BF4;&#x660E; command1 ; command2 ; &#x2026; &#x591A;&#x4E2A;&#x547D;&#x4EE4;&#x987A;&#x5E8F;&#x6267;&#x884C;&#xFF0C;&#x547D;&#x4EE4;1&#x51FA;&#x9519;&#x547D;&#x4EE4;2&#x4E5F;&#x4F1A;&#x6267;&#x884C; command1 &amp;&amp; command2 &amp;&amp; &#x2026; &#x903B;&#x8F91;&#x4E0E;&#xFF0C;&#x547D;&#x4EE4;1&#x6B63;&#x786E;&#x6267;&#x884C;&#xFF0C;&#x547D;&#x4EE4;2&#x624D;&#x4F1A;&#x6267;&#x884C; command1 ll command2 ll &#x2026; &#x903B;&#x8F91;&#x6216;&#xFF0C;&#x547D;&#x4EE4;1&#x4E0D;&#x6B63;&#x786E;&#x6267;&#x884C;&#xFF0C;&#x547D;&#x4EE4;2&#x624D;&#x4F1A;&#x6267;&#x884C; command 2&gt;&gt; filename &#x5C06;&#x9519;&#x8BEF;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8FFD;&#x52A0;&#x5230;filename&#x6587;&#x4EF6;&#x4E2D; command &amp;&gt; filename &#x5C06;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8986;&#x76D6;&#x5230;filename&#x6587;&#x4EF6;&#x4E2D;(&#x65E0;&#x8BBA;&#x6B63;&#x786E;&#x4E0E;&#x5426;) command &amp;&gt;&gt; filename &#x5C06;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8FFD;&#x52A0;&#x5230;filename&#x6587;&#x4EF6;&#x4E2D;(&#x65E0;&#x8BBA;&#x6B63;&#x786E;&#x4E0E;&#x5426;) command &gt;&gt; filename1 &amp;&gt;&gt; filename2 &#x5C06;&#x6B63;&#x786E;&#x7684;&#x547D;&#x4EE4;&#x7ED3;&#x679C;&#x8FFD;&#x52A0;&#x5230;filename1&#xFF0C;&#x9519;&#x8BEF;&#x547D;&#x4EE4;&#x7684;&#x7ED3;&#x679C;&#x8FFD;&#x52A0;&#x5230;&#x5230;filename2 command1 l command2 &#x7BA1;&#x9053;&#x7B26;&#xFF0C;&#x547D;&#x4EE4;1&#x7684;&#x6B63;&#x786E;&#x8F93;&#x51FA;&#x4F5C;&#x4E3A;&#x547D;&#x4EE4;2&#x7684;&#x64CD;&#x4F5C;&#x5BF9;&#x8C61; &#x7279;&#x6B8A;&#x7B26;&#x53F7; &#x7B26;&#x53F7; &#x8BF4;&#x660E; ? &#x5339;&#x914D;&#x4E00;&#x4E2A;&#x4EFB;&#x610F;&#x5B57;&#x7B26; * &#x5339;&#x914D;&#x4EFB;&#x610F;&#x591A;&#x4E2A;&#x5B57;&#x7B26; [] &#x5339;&#x914D;[]&#x4E2D;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x5B57;&#x7B26; [-] &#x5339;&#x914D;[]&#x4E2D;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#xFF0C;-&#x4EE3;&#x8868;&#x8303;&#x56F4;&#xFF0C;&#x5982;0-9 [^] &#x5339;&#x914D;&#x4E0D;&#x5728;[]&#x4E2D;&#x7684;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x5B57;&#x7B26; &#x2018;&#x2019; &#x5355;&#x5F15;&#x53F7;&#x5C06;&#x5176;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x6574;&#x4F53;&#xFF0C;&#x5176;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x7279;&#x6B8A;&#x7B26;&#x53F7;&#x90FD;&#x662F;&#x666E;&#x901A;&#x7B26;&#x53F7; &#x201C;&#x201D; &#x53CC;&#x5F15;&#x53F7;&#x4E2D;$&#x8C03;&#x7528;&#x53D8;&#x91CF;&#x7684;&#x503C;&#xFF0C;`&#x5F15;&#x7528;&#x547D;&#x4EE4;&#xFF0C;\&#x8F6C;&#x4E49;&#x5B57;&#x7B26; `` &#x53CD;&#x5F15;&#x53F7;&#x4E2D;&#x7684;&#x5185;&#x5BB9;&#x4E3A;&#x7CFB;&#x7EDF;&#x547D;&#x4EE4; $ &#x7F8E;&#x5143;&#x7B26;&#x53F7;&#x8C03;&#x7528;&#x53D8;&#x91CF;&#x7684;&#x503C; \ &#x53CD;&#x659C;&#x6760;&#x6307;&#x8F6C;&#x4E49;&#x7B26; # &#x6CE8;&#x91CA;&#x7B26; &#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x2003;&#x2003;&#x5728;Linux&#x4E2D;&#xFF0C;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x662F;&#x7528;&#x6765;&#x5728;&#x6587;&#x4EF6;&#x4E2D;&#x5339;&#x914D;&#x7B26;&#x5408;&#x6761;&#x4EF6;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x6B63;&#x5219;&#x662F;&#x5305;&#x542B;&#x5339;&#x914D;&#xFF0C;grep&#xFF0C;awk&#xFF0C;sed&#x7B49;&#x547D;&#x4EE4;&#x652F;&#x6301;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x3002;&#x2003;&#x2003;&#x5728;Linux&#x4E2D;&#xFF0C;&#x901A;&#x914D;&#x7B26;&#x662F;&#x7528;&#x6765;&#x5339;&#x914D;&#x7B26;&#x5408;&#x6761;&#x4EF6;&#x7684;&#x6587;&#x4EF6;&#x540D;&#xFF0C;&#x901A;&#x914D;&#x7B26;&#x662F;&#x5B8C;&#x5168;&#x5339;&#x914D;&#xFF0C;ls&#xFF0C;find&#xFF0C;cp&#x7B49;&#x547D;&#x4EE4;&#x4E0D;&#x652F;&#x6301;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x53EA;&#x80FD;&#x4F7F;&#x7528;&#x901A;&#x914D;&#x7B26;&#x8FDB;&#x884C;&#x5339;&#x914D;&#x3002; &#x7B26;&#x53F7; &#x8BF4;&#x660E; * &#x524D;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x5339;&#x914D;0&#x6B21;&#x6216;&#x4EFB;&#x610F;&#x591A;&#x6B21; . &#x5339;&#x914D;&#x9664;&#x6362;&#x884C;&#x7B26;&#x5916;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x5B57;&#x7B26; ^ &#x5339;&#x914D;&#x884C;&#x9996; $ &#x5339;&#x914D;&#x884C;&#x5C3E; [] &#x5339;&#x914D;&#x62EC;&#x53F7;&#x4E2D;&#x6307;&#x5B9A;&#x7684;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x5B57;&#x7B26; [^] &#x5339;&#x914D;&#x9664;&#x4E86;&#x62EC;&#x53F7;&#x4E2D;&#x6307;&#x5B9A;&#x7684;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x5B57;&#x7B26; \ &#x8F6C;&#x4E49;&#x5B57;&#x7B26; {n} &#x8868;&#x793A;&#x524D;&#x9762;&#x7684;&#x5B57;&#x7B26;&#x51FA;&#x73B0;n&#x6B21; {n,} &#x8868;&#x793A;&#x524D;&#x9762;&#x7684;&#x5B57;&#x7B26;&#x51FA;&#x73B0;&#x4E0D;&#x5C0F;&#x4E8E;n&#x6B21; {n,m} &#x8868;&#x793A;&#x524D;&#x9762;&#x7684;&#x5B57;&#x7B26;&#x81F3;&#x5C11;&#x51FA;&#x73B0;n&#x6B21;&#xFF0C;&#x81F3;&#x591A;m&#x6B21; &#x5B57;&#x7B26;&#x5904;&#x7406;&#x547D;&#x4EE4;| &#x7B26;&#x53F7; | &#x8BF4;&#x660E; || cut -f n filename | &#x63D0;&#x53D6;&#x6587;&#x4EF6;&#x7B2C;n&#x5217; || cut -d interval -f n filename | &#x8BBE;&#x5B9A;&#x5206;&#x9694;&#x7B26;&#x63D0;&#x53D6;&#x6587;&#x4EF6;&#x7B2C;n&#x5217; || printf &#x201C;type_and_format&#x201D; content | &#x683C;&#x5F0F;&#x5316;&#x8F93;&#x51FA; || awk &#x201C;condition1 {action1} condition2 {action2} &#x2026;&#x201D; filename | &#x5BF9;filename&#x4E2D;&#x7B26;&#x5408;condition&#x7684;&#x8FDB;&#x884C;action&#x64CD;&#x4F5C; || awk &#x201C;BEGIN{action} condition1 {action1} condition2 {action2} &#x2026;&#x201D; filename | &#x5728;&#x5BF9;filename&#x64CD;&#x4F5C;&#x4E4B;&#x524D;&#x8FDB;&#x884C;action&#x64CD;&#x4F5C; || awk &#x201C;BEGIN{FS=&#x2019;c&#x2019;} condition1 {action1} condition2 {action2} &#x2026;&#x201D; filename | &#x4EE5;c&#x4E3A;&#x5206;&#x9694;&#x7B26;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#xFF0C;&#x9ED8;&#x8BA4;&#x5206;&#x9694;&#x7B26;&#x4E3A;&#x5236;&#x8868;&#x7B26; || awk &#x201C;END{action} condition1 {action1} condition2 {action2} &#x2026;&#x201D; filename | &#x5728;&#x5BF9;filename&#x64CD;&#x4F5C;&#x4E4B;&#x540E;&#x8FDB;&#x884C;action&#x64CD;&#x4F5C; || sed -n | &#x628A;&#x53EA;&#x7ECF;&#x8FC7;sed&#x5904;&#x7406;&#x7684;&#x8F93;&#x51FA;&#xFF0C;&#x539F;&#x6587;&#x4EF6;&#x4E0D;&#x53D8;&#x5316; || sed -e | &#x5141;&#x8BB8;&#x5BF9;&#x8F93;&#x5165;&#x6570;&#x636E;&#x5E94;&#x7528;&#x591A;&#x6761;sed&#x547D;&#x4EE4; || sed -i | &#x76F4;&#x63A5;&#x5BF9;&#x6587;&#x4EF6;&#x8FDB;&#x884C;&#x4FEE;&#x6539;&#xFF0C;&#x4E0D;&#x663E;&#x793A;&#x8F93;&#x51FA; || sed a | &#x5728;&#x5F53;&#x524D;&#x884C;&#x540E;&#x6DFB;&#x52A0;&#x4E00;&#x884C;&#x6216;&#x591A;&#x884C; || sed c | &#x5BF9;&#x5F53;&#x524D;&#x884C;&#x66FF;&#x6362; || sed i | &#x5BF9;&#x5F53;&#x524D;&#x884C;&#x63D2;&#x5165; || sed d | &#x5220;&#x9664;&#x6307;&#x5B9A;&#x7684;&#x884C; || sed p | &#x6253;&#x5370;&#x6307;&#x5B9A;&#x7684;&#x884C; || sed s | &#x5B57;&#x7B26;&#x66FF;&#x6362;&#xFF0C;&#x683C;&#x5F0F;&#x4E3A;&#x201D;&#x884C;&#x8303;&#x56F4;/s/old_str/new_str/g&#x201D; || sort | &#x4EE5;&#x6570;&#x503C;&#x578B;&#x6392;&#x5E8F; || sort -f | &#x5FFD;&#x7565;&#x5927;&#x5C0F;&#x5199;&#x6392;&#x5E8F; || sort -n | &#x4EE5;&#x6570;&#x503C;&#x578B;&#x6392;&#x5E8F; || sort -r | &#x53CD;&#x5411;&#x6392;&#x5E8F; || sort -t | &#x6307;&#x5B9A;&#x5206;&#x9694;&#x7B26;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x5236;&#x8868;&#x7B26; || sort -k n[,m] | &#x6309;&#x7167;&#x6307;&#x5B9A;&#x7684;&#x5B57;&#x6BB5;&#xFF0C;&#x4ECE;n&#x5F00;&#x59CB;&#x5230;m&#x7ED3;&#x675F; || wc | &#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;Ctrl+d&#x7ED3;&#x675F;&#xFF0C;&#x7EDF;&#x8BA1;&#x884C;&#x6570;&#xFF0C;&#x5355;&#x8BCD;&#x6570;&#x548C;&#x5B57;&#x7B26;&#x6570; || wc filename | &#x7EDF;&#x8BA1;filename&#x6587;&#x4EF6;&#x4E2D;&#x7684;&#x884C;&#x6570;&#xFF0C;&#x5355;&#x8BCD;&#x6570;&#x548C;&#x5B57;&#x7B26;&#x6570; || wc -c | &#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;Ctrl+d&#x7ED3;&#x675F;&#xFF0C;&#x7EDF;&#x8BA1;&#x5B57;&#x7B26;&#x6570; || wc -w | &#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;Ctrl+d&#x7ED3;&#x675F;&#xFF0C;&#x7EDF;&#x8BA1;&#x5355;&#x8BCD;&#x6570; || wc -l | &#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;Ctrl+d&#x7ED3;&#x675F;&#xFF0C;&#x7EDF;&#x8BA1;&#x884C;&#x6570; | &#x7CFB;&#x7EDF;&#x7BA1;&#x7406; &#x547D;&#x4EE4; &#x8BF4;&#x660E; ps aux &#x67E5;&#x770B;&#x7CFB;&#x7EDF;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x8FDB;&#x7A0B; top &#x67E5;&#x770B;&#x7CFB;&#x7EDF;&#x7684;&#x5065;&#x5EB7;&#x72B6;&#x6001;&#xFF0C;&#x9ED8;&#x8BA4;&#x6BCF;3&#x79D2;&#x66F4;&#x65B0;&#x4E00;&#x6B21; top -d &#x8BBE;&#x7F6E;&#x66F4;&#x65B0;&#x7684;&#x79D2;&#x6570; top P &#x4EE5;CPU&#x4F7F;&#x7528;&#x7387;&#x6392;&#x5E8F; top M &#x4EE5;&#x5185;&#x5B58;&#x4F7F;&#x7528;&#x7387;&#x6392;&#x5E8F; top N &#x4EE5;&#x8FDB;&#x7A0B;&#x53F7;(PID)&#x6392;&#x5E8F; q &#x9000;&#x51FA;top pstree &#x67E5;&#x770B;&#x8FDB;&#x7A0B;&#x6811; pstree -p &#x67E5;&#x770B;&#x8FDB;&#x7A0B;&#x6811;&#xFF0C;&#x5E76;&#x663E;&#x793A;&#x8FDB;&#x7A0B;&#x53F7; pstree -u &#x67E5;&#x770B;&#x8FDB;&#x7A0B;&#x6811;&#xFF0C;&#x5E76;&#x663E;&#x793A;&#x6240;&#x5C5E;&#x7528;&#x6237; kill -l &#x67E5;&#x770B;&#x53EF;&#x7528;&#x7684;&#x8FDB;&#x7A0B;&#x4FE1;&#x53F7; kill PID &#x6B63;&#x5E38;&#x5173;&#x95ED;&#x8FDB;&#x7A0B;&#x53F7;&#x4E3A;PID&#x7684;&#x8FDB;&#x7A0B; kill -n PID &#x5BF9;&#x8FDB;&#x7A0B;&#x53F7;&#x4E3A;PID&#x7684;&#x8FDB;&#x7A0B;&#x8FDB;&#x884C;n&#x64CD;&#x4F5C;&#xFF0C;n&#x53EF;&#x4EE5;&#x901A;&#x8FC7;kill -l&#x67E5;&#x8BE2; killall p_name &#x6740;&#x6B7B;&#x8FDB;&#x7A0B;&#x540D;&#x4E3A;p_name&#x7684;&#x8FDB;&#x7A0B; killall p_name &#x6740;&#x6B7B;&#x8FDB;&#x7A0B;&#x540D;&#x4E3A;p_name&#x7684;&#x8FDB;&#x7A0B; killall p_name &#x6740;&#x6B7B;&#x8FDB;&#x7A0B;&#x540D;&#x4E3A;p_name&#x7684;&#x8FDB;&#x7A0B; command &amp; &#x5C06;&#x547D;&#x4EE4;&#x653E;&#x5728;&#x540E;&#x53F0;&#x6267;&#x884C; command + Ctrl + z &#x5C06;&#x547D;&#x4EE4;&#x653E;&#x5728;&#x540E;&#x53F0;&#xFF0C;&#x4E14;&#x4E0D;&#x6267;&#x884C; jobs &#x663E;&#x793A;&#x540E;&#x53F0;&#x7684;&#x8FDB;&#x7A0B; jobs -l &#x663E;&#x793A;&#x540E;&#x53F0;&#x7684;&#x8FDB;&#x7A0B;&#xFF0C;&#x5E76;&#x663E;&#x793A;PID fg &#x6062;&#x590D;&#x7B2C;&#x4E00;&#x4E2A;&#x540E;&#x53F0;&#x6682;&#x505C;&#x7684;&#x8FDB;&#x7A0B;&#x5230;&#x524D;&#x53F0;&#x6267;&#x884C; fg %work_id &#x6062;&#x590D;&#x5DE5;&#x4F5C;&#x53F7;&#x4E3A;work_id&#x540E;&#x53F0;&#x6682;&#x505C;&#x7684;&#x8FDB;&#x7A0B;&#x5230;&#x524D;&#x53F0;&#x6267;&#x884C;&#xFF0C;&#x6CE8;&#x610F;&#x5DE5;&#x4F5C;&#x53F7;&#x548C;PID&#x4E0D;&#x540C; bg &#x6062;&#x590D;&#x7B2C;&#x4E00;&#x4E2A;&#x540E;&#x53F0;&#x6682;&#x505C;&#x7684;&#x8FDB;&#x7A0B;&#x5230;&#x540E;&#x53F0;&#x6267;&#x884C; bg %work_id &#x6062;&#x590D;&#x5DE5;&#x4F5C;&#x53F7;&#x4E3A;work_id&#x540E;&#x53F0;&#x6682;&#x505C;&#x7684;&#x8FDB;&#x7A0B;&#x5230;&#x540E;&#x53F0;&#x6267;&#x884C;&#xFF0C;&#x6CE8;&#x610F;&#x5DE5;&#x4F5C;&#x53F7;&#x548C;PID&#x4E0D;&#x540C; vmstat flu_time flu_num &#x67E5;&#x770B;&#x7CFB;&#x7EDF;&#x8D44;&#x6E90;&#xFF0C;&#x95F4;&#x9694;&#x4E3A;flu_time&#xFF0C;&#x6B21;&#x6570;&#x4E3A;flu_num free -b &#x4EE5;&#x5B57;&#x8282;&#x4E3A;&#x5355;&#x4F4D;&#x67E5;&#x770B;&#x5185;&#x5B58;&#x4F7F;&#x7528;&#x72B6;&#x6001; free -k &#x4EE5;KB&#x4E3A;&#x5355;&#x4F4D;&#x67E5;&#x770B;&#x5185;&#x5B58;&#x4F7F;&#x7528;&#x72B6;&#x6001;&#xFF0C;&#x9ED8;&#x8BA4;&#x4EE5;KB&#x4E3A;&#x5355;&#x4F4D; free -m &#x4EE5;MB&#x4E3A;&#x5355;&#x4F4D;&#x67E5;&#x770B;&#x5185;&#x5B58;&#x4F7F;&#x7528;&#x72B6;&#x6001; free -g &#x4EE5;GB&#x4E3A;&#x5355;&#x4F4D;&#x67E5;&#x770B;&#x5185;&#x5B58;&#x4F7F;&#x7528;&#x72B6;&#x6001; free -b &#x4EE5;&#x5B57;&#x8282;&#x4E3A;&#x5355;&#x4F4D;&#x67E5;&#x770B;&#x5185;&#x5B58;&#x4F7F;&#x7528;&#x72B6;&#x6001; cat /proc/cpuinfo &#x67E5;&#x770B;CPU&#x7684;&#x8BE6;&#x7EC6;&#x4FE1;&#x606F; uptime &#x663E;&#x793A;&#x7CFB;&#x7EDF;&#x7684;&#x542F;&#x52A8;&#x65F6;&#x95F4;&#x548C;&#x5E73;&#x5747;&#x8D1F;&#x8F7D; uptime -a &#x67E5;&#x770B;&#x7CFB;&#x7EDF;&#x6240;&#x6709;&#x76F8;&#x5173;&#x4FE1;&#x606F; uptime -r &#x67E5;&#x770B;&#x5185;&#x6838;&#x7248;&#x672C; uptime -s &#x67E5;&#x770B;&#x5185;&#x6838;&#x540D;&#x79F0; file /bin/ls &#x67E5;&#x770B;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x7684;&#x4F4D;&#x6570; lsb_release -a &#x67E5;&#x8BE2;Linux&#x7684;&#x53D1;&#x884C;&#x7248;&#x672C; lsof -c string &#x5217;&#x51FA;&#x4EE5;&#x5B57;&#x7B26;&#x4E32;&#x5F00;&#x5934;&#x7684;&#x8FDB;&#x7A0B;&#x6253;&#x5F00;&#x7684;&#x6587;&#x4EF6; lsof -u username &#x5217;&#x51FA;&#x67D0;&#x4E2A;&#x7528;&#x6237;&#x7684;&#x8FDB;&#x7A0B;&#x6253;&#x5F00;&#x7684;&#x6587;&#x4EF6; lsof -p pid &#x5217;&#x51FA;&#x67D0;&#x4E2A;PID&#x8FDB;&#x7A0B;&#x6253;&#x5F00;&#x7684;&#x6587;&#x4EF6; &#x5B9A;&#x65F6;&#x4EFB;&#x52A1; &#x547D;&#x4EE4; &#x8BF4;&#x660E; crontab -e &#x7F16;&#x8F91;&#x5B9A;&#x65F6;&#x4EFB;&#x52A1; crontab -l &#x67E5;&#x8BE2;&#x5B9A;&#x65F6;&#x4EFB;&#x52A1; crontab -r &#x5220;&#x9664;&#x6240;&#x6709;&#x5B9A;&#x65F6;&#x4EFB;&#x52A1; &#x2003;&#x2003;&#x7F16;&#x8F91;&#x5B9A;&#x65F6;&#x4EFB;&#x52A1;&#x683C;&#x5F0F;&#x2003;&#x2003;* * * * * &#x6267;&#x884C;&#x7684;&#x4EFB;&#x52A1;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x4E2A;*&#xFF1A;&#x4E00;&#x5C0F;&#x65F6;&#x5F53;&#x4E2D;&#x7684;&#x7B2C;&#x51E0;&#x5206;&#x949F;(0-59)&#x2003;&#x2003;&#x7B2C;&#x4E8C;&#x4E2A;*&#xFF1A;&#x4E00;&#x5929;&#x5F53;&#x4E2D;&#x7684;&#x7B2C;&#x51E0;&#x5C0F;&#x65F6;(0-23)&#x2003;&#x2003;&#x7B2C;&#x4E09;&#x4E2A;*&#xFF1A;&#x4E00;&#x4E2A;&#x6708;&#x5F53;&#x4E2D;&#x7684;&#x7B2C;&#x51E0;&#x5929;(1-31)&#x2003;&#x2003;&#x7B2C;&#x56DB;&#x4E2A;*&#xFF1A;&#x4E00;&#x5E74;&#x5F53;&#x4E2D;&#x7684;&#x7B2C;&#x51E0;&#x6708;(1-12)&#x2003;&#x2003;&#x7B2C;&#x4E94;&#x4E2A;*&#xFF1A;&#x4E00;&#x5468;&#x5F53;&#x4E2D;&#x7684;&#x661F;&#x671F;&#x51E0;(0-7) &#x2003;&#x2003;&#x7F16;&#x8F91;&#x5B9A;&#x65F6;&#x4EFB;&#x52A1;&#x7279;&#x6B8A;&#x7B26;&#x53F7;&#x2003;&#x2003;*&#xFF1A;&#x4EE3;&#x8868;&#x4EFB;&#x4F55;&#x65F6;&#x95F4;&#x2003;&#x2003;,&#xFF1A;&#x4EE3;&#x8868;&#x4E0D;&#x8FDE;&#x7EED;&#x65F6;&#x95F4;&#x2003;&#x2003;-&#xFF1A;&#x4EE3;&#x8868;&#x8FDE;&#x7EED;&#x7684;&#x65F6;&#x95F4;&#x8303;&#x56F4;&#x2003;&#x2003;*/n&#xFF1A;&#x4EE3;&#x8868;&#x6BCF;&#x9694;&#x591A;&#x4E45;&#x6267;&#x884C;&#x4E00;&#x6B21; &#x2003;&#x2003;&#x7F16;&#x8F91;&#x5B9A;&#x65F6;&#x4EFB;&#x52A1;&#x4F8B;&#x5B50;&#x2003;&#x2003;45 22 * * * command&#xFF1A;&#x6BCF;&#x5929;&#x7684;22:45&#x6267;&#x884C;&#x547D;&#x4EE4;&#x2003;&#x2003;30 12 * * 1 command&#xFF1A;&#x6BCF;&#x5468;&#x4E00;&#x7684;12:30&#x6267;&#x884C;&#x547D;&#x4EE4;&#x2003;&#x2003;0 8,12,16 * * * command&#xFF1A;&#x6BCF;&#x5929;&#x7684;8:00&#xFF0C;12:00&#x548C;16:00&#x90FD;&#x6267;&#x884C;&#x547D;&#x4EE4;&#x2003;&#x2003;0 5 * * 1-6 command&#xFF1A;&#x6BCF;&#x5468;&#x4E00;&#x7684;5:00&#x6267;&#x884C;&#x547D;&#x4EE4;&#x2003;&#x2003;0/10 4 * * * command&#xFF1A;&#x6BCF;&#x5929;&#x7684;&#x51CC;&#x6668;4&#x70B9;&#xFF0C;&#x6BCF;&#x9694;10&#x5206;&#x949F;&#x6267;&#x884C;&#x4E00;&#x6B21;&#x2003;&#x2003;0 0 1,15 * 1 command&#xFF1A;&#x6BCF;&#x5468;&#x4E00;&#x7684;0:00&#x548C;&#x6BCF;&#x4E2A;&#x6708;&#x7684;1&#x53F7;&#x548C;15&#x53F7;&#x90FD;&#x4F1A;&#x6267;&#x884C;&#x547D;&#x4EE4;&#xFF0C;&#x5C3D;&#x91CF;&#x4E0D;&#x8981;&#x8FD9;&#x6837;&#x5199; &#x5907;&#x4EFD;&#x4E0E;&#x6062;&#x590D; &#x547D;&#x4EE4; &#x8BF4;&#x660E; dump -level &#x8BBE;&#x5B9A;level&#x5907;&#x4EFD;&#x7EA7;&#x522B;&#xFF0C;0&#x4E3A;&#x5B8C;&#x5168;&#x5907;&#x4EFD;&#xFF0C;1-9&#x4E3A;&#x589E;&#x91CF;&#x5907;&#x4EFD;&#xFF0C;&#x5BF9;&#x5206;&#x533A;&#x53EF;&#x4EE5;&#x589E;&#x91CF;&#x5907;&#x4EFD;&#xFF0C;&#x5BF9;&#x4E8E;&#x6587;&#x4EF6;&#x6216;&#x76EE;&#x5F55;&#x53EA;&#x80FD;&#x5B8C;&#x5168;&#x5907;&#x4EFD; dump -f b_file o_file &#x5C06;o_file&#x5907;&#x4EFD;&#x5230;b_file&#x4E2D; dump -u &#x5907;&#x4EFD;&#x6210;&#x529F;&#x540E;&#xFF0C;&#x628A;&#x5907;&#x4EFD;&#x65F6;&#x95F4;&#x8BB0;&#x5F55;&#x5728;/etc/dumpdates&#x6587;&#x4EF6; dump -v &#x663E;&#x793A;&#x5907;&#x4EFD;&#x8FC7;&#x7A0B;&#x4E2D;&#x66F4;&#x591A;&#x7684;&#x8F93;&#x51FA;&#x4FE1;&#x606F; dump -j &#x8C03;&#x7528;bzlib&#x5E93;&#x538B;&#x7F29;&#x5907;&#x4EFD;&#x6587;&#x4EF6;&#xFF0C;&#x5C06;&#x5907;&#x4EFD;&#x6587;&#x4EF6;&#x538B;&#x7F29;&#x4E3A;.bz2&#x683C;&#x5F0F; dump -W &#x663E;&#x793A;&#x5141;&#x8BB8;&#x88AB;dump&#x7684;&#x5206;&#x533A;&#x7684;&#x5907;&#x4EFD;&#x7B49;&#x7EA7;&#x53CA;&#x5907;&#x4EFD;&#x65F6;&#x95F4; restore -C &#x6BD4;&#x8F83;&#x5907;&#x4EFD;&#x6570;&#x636E;&#x548C;&#x5B9E;&#x9645;&#x6570;&#x636E;&#x7684;&#x53D8;&#x6362; restore -i &#x8FDB;&#x5165;&#x4EA4;&#x4E92;&#x6A21;&#x5F0F;&#xFF0C;&#x624B;&#x5DE5;&#x9009;&#x62E9;&#x9700;&#x8981;&#x6062;&#x590D;&#x7684;&#x6587;&#x4EF6; restore -t &#x67E5;&#x770B;&#x6A21;&#x5F0F;&#xFF0C;&#x7528;&#x4E8E;&#x67E5;&#x770B;&#x5907;&#x4EFD;&#x6587;&#x4EF6;&#x4E2D;&#x62E5;&#x6709;&#x54EA;&#x4E9B;&#x6570;&#x636E; restore -r &#x8FD8;&#x539F;&#x6A21;&#x5F0F;&#xFF0C;&#x7528;&#x4E8E;&#x6570;&#x636E;&#x8FD8;&#x539F; restore -f &#x6307;&#x5B9A;&#x5907;&#x4EFD;&#x6587;&#x4EF6;&#x7684;&#x6587;&#x4EF6;&#x540D; Shell&#x57FA;&#x7840;&#x2003;&#x2003;Shell&#x662F;&#x4E00;&#x4E2A;&#x547D;&#x4EE4;&#x884C;&#x89E3;&#x91CA;&#x5668;&#xFF0C;&#x4E3A;&#x7528;&#x6237;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x5411;Linux&#x5185;&#x6838;&#x53D1;&#x9001;&#x8BF7;&#x6C42;&#x4EE5;&#x4FBF;&#x8FD0;&#x884C;&#x7A0B;&#x5E8F;&#x7684;&#x7CFB;&#x7EDF;&#x7EA7;&#x7A0B;&#x5E8F;&#xFF0C;&#x7528;&#x6237;&#x53EF;&#x4EE5;&#x7528;Shell&#x542F;&#x52A8;&#xFF0C;&#x6302;&#x8D77;&#xFF0C;&#x505C;&#x6B62;&#x751A;&#x81F3;&#x7F16;&#x5199;&#x7A0B;&#x5E8F; &#x2003;&#x2003;Shell&#x662F;&#x4E00;&#x4E2A;&#x529F;&#x80FD;&#x5F3A;&#x5927;&#x7684;&#x89E3;&#x91CA;&#x6027;&#x811A;&#x672C;&#x8BED;&#x8A00;&#xFF0C;&#x6613;&#x7F16;&#x5199;&#xFF0C;&#x6613;&#x8C03;&#x8BD5;&#xFF0C;&#x7075;&#x6D3B;&#x6027;&#x5F3A;&#xFF0C;&#x4E14;&#x5728;Shell&#x4E2D;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x8C03;&#x7528;Linux&#x7CFB;&#x7EDF;&#x547D;&#x4EE4;&#x3002; &#x2003;&#x2003;Bash&#x662F;Linux&#x7684;&#x57FA;&#x672C;Shell&#xFF0C;&#x6267;&#x884C;&#x65F6;&#x4F7F;&#x7528;/&#x6587;&#x4EF6;&#x540D;&#x6216;&#x8005;bash &#x6587;&#x4EF6;&#x540D; &#x5B9A;&#x4E49;&#x53D8;&#x91CF; &#x547D;&#x4EE4; &#x8BF4;&#x660E; var_name=&#x2019;xxx&#x2019; &#x5B9A;&#x4E49;&#x53D8;&#x91CF;&#xFF0C;&#x7B49;&#x4E8E;&#x53F7;&#x524D;&#x540E;&#x4E0D;&#x8981;&#x52A0;&#x7A7A;&#x683C; $var_name &#x8C03;&#x7528;&#x53D8;&#x91CF; unset var_name &#x5220;&#x9664;&#x53D8;&#x91CF; set &#x67E5;&#x770B;&#x6240;&#x6709;&#x53D8;&#x91CF; echo &#x8F93;&#x51FA; read -t n var_name &#x7ED9;var_name&#x8BFB;&#x5165;&#x4E00;&#x4E2A;&#x503C;&#xFF0C;&#x7B49;&#x5F85;n&#x79D2; read -p str var_name &#x663E;&#x793A;str&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x518D;&#x7ED9;var_name&#x8BFB;&#x5165;&#x4E00;&#x4E2A;&#x503C; &#x4F4D;&#x7F6E;&#x53C2;&#x6570;&#x53D8;&#x91CF; &#x547D;&#x4EE4; &#x8BF4;&#x660E; $n 0&#x4EE3;&#x8868;&#x547D;&#x4EE4;&#x672C;&#x8EAB;&#xFF0C;1-9&#x4EE3;&#x8868;&#x7B2C;&#x4E00;&#x5230;&#x7B2C;&#x4E5D;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;10&#x4EE5;&#x4E0A;&#x8981;&#x7528;{}&#x62EC;&#x8D77;&#x6765; $* &#x6240;&#x6709;&#x53C2;&#x6570;&#xFF0C;&#x770B;&#x4F5C;&#x4E00;&#x4E2A;&#x6574;&#x4F53; $@ &#x6240;&#x6709;&#x53C2;&#x6570;&#xFF0C;&#x6BCF;&#x4E2A;&#x53C2;&#x6570;&#x5206;&#x5F00;&#x5BF9;&#x5F85; $# &#x6240;&#x6709;&#x53C2;&#x6570;&#x7684;&#x4E2A;&#x6570; &#x9884;&#x5B9A;&#x4E49;&#x53D8;&#x91CF; &#x547D;&#x4EE4; &#x8BF4;&#x660E; $? &#x5224;&#x65AD;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x6267;&#x884C;&#x547D;&#x4EE4;&#x7684;&#x8FD4;&#x56DE;&#x72B6;&#x6001;&#xFF0C;&#x4E3A;0&#x5219;&#x6B63;&#x786E;&#xFF0C;&#x5426;&#x5219;&#x9519;&#x8BEF; $$ &#x5F53;&#x524D;&#x8FDB;&#x7A0B;&#x7684;&#x8FDB;&#x7A0B;&#x53F7;(PID) $! &#x540E;&#x53F0;&#x8FD0;&#x884C;&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x7684;&#x8FDB;&#x7A0B;&#x53F7; &#x58F0;&#x660E;&#x53D8;&#x91CF;&#x7C7B;&#x578B; &#x547D;&#x4EE4; &#x8BF4;&#x660E; declare - var_name &#x7ED9;&#x53D8;&#x91CF;&#x8BBE;&#x5B9A;&#x7C7B;&#x578B;&#x5C5E;&#x6027; declare + var_name &#x53D6;&#x6D88;&#x53D8;&#x91CF;&#x7684;&#x7C7B;&#x578B;&#x5C5E;&#x6027; declare -i var_name &#x5C06;&#x53D8;&#x91CF;&#x58F0;&#x660E;&#x4E3A;&#x6574;&#x578B; declare -x var_name &#x5C06;&#x53D8;&#x91CF;&#x58F0;&#x660E;&#x4E3A;&#x73AF;&#x5883;&#x53D8;&#x91CF; declare -p var_name &#x663E;&#x793A;&#x53D8;&#x91CF;&#x7684;&#x7C7B;&#x578B; &#x2003;&#x2003;Linux&#x4E2D;&#x7684;&#x53D8;&#x91CF;&#x90FD;&#x9ED8;&#x8BA4;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#x578B;&#xFF0C;&#x6570;&#x503C;&#x8FD0;&#x7B97;&#x65F6;&#x8981;&#x91C7;&#x7528;var_name=$((&#x8FD0;&#x7B97;&#x5F0F;))&#x7684;&#x683C;&#x5F0F;&#x3002; &#x6761;&#x4EF6;&#x5224;&#x65AD; &#x547D;&#x4EE4; &#x8BF4;&#x660E; [ -d filename ] &#x6CE8;&#x610F;&#x4E2D;&#x62EC;&#x53F7;&#x524D;&#x540E;&#x90FD;&#x6709;&#x7A7A;&#x683C;&#xFF0C;&#x5224;&#x65AD;&#x6587;&#x4EF6;&#x662F;&#x5426;&#x5B58;&#x5728;&#xFF0C;&#x5E76;&#x4E14;&#x662F;&#x5426;&#x4E3A;&#x76EE;&#x5F55;&#x6587;&#x4EF6;&#xFF0C;&#x662F;&#x76EE;&#x5F55;&#x6587;&#x4EF6;&#x4E3A;&#x771F; [ -e filename ] &#x5224;&#x65AD;&#x6587;&#x4EF6;&#x662F;&#x5426;&#x5B58;&#x5728;&#xFF0C;&#x5B58;&#x5728;&#x4E3A;&#x771F; [ -f filename ] &#x5224;&#x65AD;&#x6587;&#x4EF6;&#x662F;&#x5426;&#x5B58;&#x5728;&#xFF0C;&#x5E76;&#x4E14;&#x662F;&#x5426;&#x4E3A;&#x666E;&#x901A;&#x6587;&#x4EF6;&#xFF0C;&#x662F;&#x666E;&#x901A;&#x6587;&#x4EF6;&#x4E3A;&#x771F; [ -r filename ] &#x5224;&#x65AD;&#x6587;&#x4EF6;&#x662F;&#x5426;&#x5B58;&#x5728;&#xFF0C;&#x5E76;&#x4E14;&#x662F;&#x5426;&#x5177;&#x6709;&#x8BFB;&#x6743;&#x9650;(&#x65E0;&#x8BBA;&#x662F;&#x62E5;&#x6709;&#x8005;&#x8FD8;&#x662F;&#x6240;&#x5C5E;&#x7EC4;&#x8FD8;&#x662F;&#x5176;&#x4ED6;&#x7528;&#x6237;&#xFF0C;&#x53EA;&#x8981;&#x6709;&#x5C31;&#x4E3A;&#x771F;) [ -w filename ] &#x5224;&#x65AD;&#x6587;&#x4EF6;&#x662F;&#x5426;&#x5B58;&#x5728;&#xFF0C;&#x5E76;&#x4E14;&#x662F;&#x5426;&#x5177;&#x6709;&#x5199;&#x6743;&#x9650; [ -x filename ] &#x5224;&#x65AD;&#x6587;&#x4EF6;&#x662F;&#x5426;&#x5B58;&#x5728;&#xFF0C;&#x5E76;&#x4E14;&#x662F;&#x5426;&#x5177;&#x6709;&#x6267;&#x884C;&#x6743;&#x9650; [ filename1 -nt filename2 ] &#x5224;&#x65AD;&#x6587;&#x4EF6;1&#x662F;&#x5426;&#x6BD4;&#x6587;&#x4EF6;2&#x65B0;(&#x4FEE;&#x6539;&#x65F6;&#x95F4;) [ filename1 -ot filename2 ] &#x5224;&#x65AD;&#x6587;&#x4EF6;1&#x662F;&#x5426;&#x6BD4;&#x6587;&#x4EF6;2&#x65E7; [ filename1 -ef filename2 ] &#x5224;&#x65AD;&#x6587;&#x4EF6;1&#x548C;&#x6587;&#x4EF6;2&#x7684;i&#x8282;&#x70B9;&#x662F;&#x5426;&#x4E00;&#x81F4;&#xFF0C;&#x53EF;&#x4EE5;&#x5224;&#x65AD;&#x786C;&#x94FE;&#x63A5; [ int1 -eq int2 ] &#x5224;&#x65AD;&#x6574;&#x6570;1&#x662F;&#x5426;&#x7B49;&#x4E8E;&#x6574;&#x6570;2 [ int1 -ne int2 ] &#x5224;&#x65AD;&#x6574;&#x6570;1&#x662F;&#x5426;&#x4E0D;&#x7B49;&#x4E8E;&#x6574;&#x6570;2 [ int1 -gt int2 ] &#x5224;&#x65AD;&#x6574;&#x6570;1&#x662F;&#x5426;&#x5927;&#x4E8E;&#x6574;&#x6570;2 [ int1 -lt int2 ] &#x5224;&#x65AD;&#x6574;&#x6570;1&#x662F;&#x5426;&#x5C0F;&#x4E8E;&#x6574;&#x6570;2 [ int1 -ge int2 ] &#x5224;&#x65AD;&#x6574;&#x6570;1&#x662F;&#x5426;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;&#x6574;&#x6570;2 [ int1 -le int2 ] &#x5224;&#x65AD;&#x6574;&#x6570;1&#x662F;&#x5426;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;&#x6574;&#x6570;2 [ -z str ] &#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x4E3A;&#x7A7A; [ -n str ] &#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x975E;&#x7A7A; [ str1==str2 ] &#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;1&#x662F;&#x5426;&#x7B49;&#x4E8E;&#x5B57;&#x7B26;&#x4E32;2 [ str1!=str2 ] &#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;1&#x662F;&#x5426;&#x4E0D;&#x7B49;&#x4E8E;&#x5B57;&#x7B26;&#x4E32;2 [ judge1 -a judge2 ] &#x903B;&#x8F91;&#x4E0E;&#xFF0C;&#x5224;&#x65AD;1&#x548C;&#x5224;&#x65AD;2&#x90FD;&#x4E3A;&#x771F;&#x5219;&#x4E3A;&#x771F; [ judge1 -o judge2 ] &#x903B;&#x8F91;&#x6216;&#xFF0C;&#x5224;&#x65AD;1&#x548C;&#x5224;&#x65AD;2&#x90FD;&#x4E3A;&#x5047;&#x5219;&#x4E3A;&#x5047; [ !judge ] &#x903B;&#x8F91;&#x975E;&#xFF0C;&#x5224;&#x65AD;&#x53D6;&#x53CD; &#x6D41;&#x7A0B;&#x63A7;&#x5236;&#x2003;&#x2003;Linux&#x4E2D;Shell&#x811A;&#x672C;&#x7684;&#x7B2C;&#x4E00;&#x53E5;&#x4E3A;#!bin/bash&#xFF0C;&#x8BF4;&#x660E;&#x4E0B;&#x9762;&#x7684;&#x5185;&#x5BB9;&#x90FD;&#x662F;Shell&#x811A;&#x672C;&#x3002; &#x2003;&#x2003;&#x6267;&#x884C;&#x811A;&#x672C;&#x65F6;&#xFF0C;&#x5148;&#x5C06;&#x6587;&#x4EF6;&#x7684;&#x6743;&#x9650;&#x53D8;&#x4E3A;&#x53EF;&#x6267;&#x884C;&#x6587;&#x4EF6;&#xFF0C;&#x7136;&#x540E;./filename&#x6216;&#x8005;&#x76F4;&#x63A5;&#x4F7F;&#x7528;bash filename if&#x6761;&#x4EF6;&#x6D41;&#x7A0B;&#x63A7;&#x5236;12345678910111213141516# &#x5355;&#x5206;&#x652F;if&#x6761;&#x4EF6;&#x8BED;&#x53E5;&#x683C;&#x5F0F;# if [ condition ]# then# &#x7A0B;&#x5E8F;# fi# &#x5982;&#x679C;condition&#x6210;&#x7ACB;&#x5219;&#x6267;&#x884C;&#x7A0B;&#x5E8F;&#xFF0C;&#x5426;&#x5219;&#x4E0D;&#x6267;&#x884C;# &#x53CC;&#x5206;&#x652F;if&#x6761;&#x4EF6;&#x8BED;&#x53E5;&#x683C;&#x5F0F;# if [ condition ]# then# &#x7A0B;&#x5E8F;1# else# &#x7A0B;&#x5E8F;2# fi# &#x5982;&#x679C;condition&#x6210;&#x7ACB;&#x5219;&#x6267;&#x884C;&#x7A0B;&#x5E8F;1&#xFF0C;&#x5426;&#x5219;&#x6267;&#x884C;&#x7A0B;&#x5E8F;2 case&#x6761;&#x4EF6;&#x6D41;&#x7A0B;&#x63A7;&#x5236;12345678910111213# &#x591A;&#x5206;&#x652F;case&#x6761;&#x4EF6;&#x8BED;&#x53E5;# case $&#x53D8;&#x91CF;&#x540D; in# &quot;value1&quot;)# &#x7A0B;&#x5E8F;1# ;;# &quot;value2&quot;)# &#x7A0B;&#x5E8F;2# ;;# *)# &#x7A0B;&#x5E8F;n# ;;# esac# &#x5982;&#x679C;&#x53D8;&#x91CF;&#x7684;&#x503C;&#x4E3A;value1&#x6267;&#x884C;&#x7A0B;&#x5E8F;1&#xFF0C;&#x53D8;&#x91CF;&#x503C;&#x4E3A;value2&#x6267;&#x884C;&#x7A0B;&#x5E8F;2&#xFF0C;...&#xFF0C;&#x5982;&#x679C;&#x90FD;&#x4E0D;&#x7B49;&#x4E8E;&#x5219;&#x6267;&#x884C;&#x7A0B;&#x5E8F;n for&#x5FAA;&#x73AF;&#x6D41;&#x7A0B;&#x63A7;&#x5236;123456789101112# for &#x53D8;&#x91CF; in value1 value2 ...# do# &#x7A0B;&#x5E8F;# done# &#x548C;Python&#x8BED;&#x8A00;&#x7684;for&#x5FAA;&#x73AF;&#x7C7B;&#x4F3C;&#xFF0C;&#x5C06;value1&#xFF0C;value2&#xFF0C;...&#xFF0C;&#x4F9D;&#x6B21;&#x5E26;&#x5165;&#x7A0B;&#x5E8F;&#xFF0C;&#x4E0D;&#x540C;value&#x4E4B;&#x95F4;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;# for ((&#x521D;&#x59CB;&#x503C;;&#x5FAA;&#x73AF;&#x63A7;&#x5236;&#x6761;&#x4EF6;;&#x53D8;&#x91CF;&#x53D8;&#x6362;))# do# &#x7A0B;&#x5E8F;# done# &#x548C;C&#x8BED;&#x8A00;&#x7684;for&#x5FAA;&#x73AF;&#x7C7B;&#x4F3C;&#xFF0C;&#x5C06;&#x53D8;&#x91CF;&#x5E26;&#x5165;&#x7A0B;&#x5E8F;&#xFF0C;&#x6BCF;&#x6B21;&#x5FAA;&#x73AF;&#x7ED3;&#x675F;&#x65F6;&#x66F4;&#x6539;&#x53D8;&#x91CF;&#x7684;&#x503C;&#xFF0C;&#x5E76;&#x4E14;&#x5224;&#x65AD;&#x5FAA;&#x73AF;&#x6761;&#x4EF6;&#x662F;&#x5426;&#x6EE1;&#x8DB3; while&#x5FAA;&#x73AF;&#x6D41;&#x7A0B;&#x63A7;&#x5236;12345# while [ condition ]# do# &#x7A0B;&#x5E8F;# done# &#x5982;&#x679C;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#x5219;&#x8FDB;&#x5165;&#x5FAA;&#x73AF;&#xFF0C;&#x6BCF;&#x6B21;&#x5FAA;&#x73AF;&#x7ED3;&#x675F;&#x8981;&#x91CD;&#x65B0;&#x5224;&#x65AD;&#x662F;&#x5426;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6; until&#x5FAA;&#x73AF;&#x6D41;&#x7A0B;&#x63A7;&#x5236;12345# until [ condition ]# do# &#x7A0B;&#x5E8F;# done# &#x5982;&#x679C;&#x4E0D;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#x5219;&#x8FDB;&#x5165;&#x5FAA;&#x73AF;&#xFF0C;&#x6BCF;&#x6B21;&#x5FAA;&#x73AF;&#x7ED3;&#x675F;&#x8981;&#x91CD;&#x65B0;&#x5224;&#x65AD;&#x662F;&#x5426;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6; Linux&#x5C0F;&#x7ED3;&#x2003;&#x2003;&#x56E0;&#x4E3A;Linux&#x7684;&#x5B89;&#x5168;&#x6027;&#x548C;&#x5F00;&#x6E90;&#x7279;&#x6027;&#xFF0C;&#x4F7F;&#x5F97;Linux&#x53D7;&#x5230;&#x5E7F;&#x6CDB;&#x7684;&#x9752;&#x7750;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x5728;&#x516C;&#x53F8;&#x5C42;&#x9762;&#x3002;&#x5728;&#x4E2A;&#x4EBA;&#x673A;&#x4E0A;&#xFF0C;&#x591A;&#x6570;&#x4EBA;&#x4E3A;&#x4E86;&#x4F7F;&#x7528;&#x65B9;&#x4FBF;&#xFF0C;&#x91C7;&#x7528;Windows&#x7CFB;&#x7EDF;&#x3002;&#x4F46;&#x662F;&#x4E3A;&#x4E86;&#x516C;&#x53F8;&#x670D;&#x52A1;&#x5668;&#x8FD0;&#x7EF4;&#x7A33;&#x5B9A;&#xFF0C;&#x53EF;&#x9760;&#xFF0C;&#x65B9;&#x4FBF;&#xFF0C;Linux&#x662F;&#x4F7F;&#x7528;&#x6700;&#x5E7F;&#x6CDB;&#x7684;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x3002;&#x56E0;&#x6B64;&#x5B66;&#x4F1A;Linux&#x662F;&#x7A0B;&#x5E8F;&#x5458;&#x7684;&#x5FC5;&#x4FEE;&#x8BFE;&#x4E4B;&#x4E00;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>程序员必备技能</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Vim(文本编辑器)]]></title>
    <url>%2F2019%2F09%2F22%2Fskill%20Vim%2F</url>
    <content type="text"><![CDATA[Vim &#x539F;&#x7406;&#x4ECB;&#x7ECD;&#x2003;&#x2003;Vim&#x662F;&#x4E00;&#x4E2A;&#x7C7B;&#x4F3C;&#x4E8E;Vi&#x7684;&#x8457;&#x540D;&#x7684;&#x529F;&#x80FD;&#x5F3A;&#x5927;&#x3001;&#x9AD8;&#x5EA6;&#x53EF;&#x5B9A;&#x5236;&#x7684;&#x6587;&#x672C;&#x7F16;&#x8F91;&#x5668;&#x3002;&#x4EE3;&#x7801;&#x8865;&#x5168;&#x3001;&#x7F16;&#x8BD1;&#x53CA;&#x9519;&#x8BEF;&#x8DF3;&#x8F6C;&#x7B49;&#x65B9;&#x4FBF;&#x7F16;&#x7A0B;&#x7684;&#x529F;&#x80FD;&#x7279;&#x522B;&#x4E30;&#x5BCC;&#xFF0C;&#x5728;&#x7A0B;&#x5E8F;&#x5458;&#x4E2D;&#x88AB;&#x5E7F;&#x6CDB;&#x4F7F;&#x7528;&#xFF0C;&#x662F;&#x7C7B;Unix&#x7CFB;&#x7EDF;&#x7528;&#x6237;&#x6700;&#x559C;&#x6B22;&#x7684;&#x6587;&#x672C;&#x7F16;&#x8F91;&#x5668;&#x3002; Vim&#x7279;&#x70B9;&#x2003;&#x2003;&#x89E3;&#x653E;&#x7A0B;&#x5E8F;&#x5458;&#x7684;&#x53CC;&#x624B;&#xFF0C;&#x8FD9;&#x4E00;&#x70B9;&#x975E;&#x5E38;&#x91CD;&#x8981;&#xFF0C;&#x4F7F;&#x5F97;&#x7A0B;&#x5E8F;&#x5458;&#x5728;&#x7F16;&#x8F91;&#x6587;&#x6863;&#x65F6;&#x53EF;&#x4EE5;&#x4E0D;&#x518D;&#x4F9D;&#x8D56;&#x4E8E;&#x9F20;&#x6807;&#x2003;&#x2003;Vim&#x5177;&#x6709;&#x9AD8;&#x6548;&#x7387;&#x7684;&#x79FB;&#x52A8;&#xFF0C;&#x5728;&#x884C;&#x5185;&#xFF0C;&#x6587;&#x4EF6;&#x5185;&#x53EF;&#x4EE5;&#x968F;&#x610F;&#x7684;&#x79FB;&#x52A8;&#xFF0C;&#x53EF;&#x4EE5;&#x8282;&#x7EA6;&#x5927;&#x91CF;&#x65F6;&#x95F4;&#x3002;&#x2003;&#x2003;Vim&#x5177;&#x6709;&#x9AD8;&#x6548;&#x7387;&#x7684;&#x8F93;&#x5165;&#xFF0C;&#x53EF;&#x4EE5;&#x6709;&#x5F88;&#x591A;&#x7684;&#x63D2;&#x5165;&#x65B9;&#x5F0F;&#xFF0C;&#x590D;&#x5236;&#xFF0C;&#x7C98;&#x8D34;&#xFF0C;&#x526A;&#x5207;&#x90FD;&#x975E;&#x5E38;&#x65B9;&#x4FBF;&#x3002; Vim&#x5173;&#x7CFB;&#x56FE; Vim&#x5E94;&#x7528; &#x8FDB;&#x5165;Vim&#x2003;&#x2003;&#x5728;&#x7EC8;&#x7AEF;&#x4E2D;&#x8F93;&#x5165;vim filename &#x8FDB;&#x5165;Vim&#xFF0C;&#x5982;&#x679C;&#x5B58;&#x5728;&#x8BE5;&#x6587;&#x4EF6;&#x5219;&#x7F16;&#x8F91;&#x8BE5;&#x6587;&#x4EF6;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x5B58;&#x5728;&#x8BE5;&#x6587;&#x4EF6;&#x5219;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x6587;&#x4EF6;&#x5E76;&#x7F16;&#x8F91;&#x8BE5;&#x6587;&#x4EF6; &#x63D2;&#x5165;&#x2003;&#x2003;&#x4E00;&#x822C;&#x662F;&#x7531;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x8FDB;&#x5165;&#x63D2;&#x5165;&#x6A21;&#x5F0F; &#x7B26;&#x53F7; &#x8BF4;&#x660E; a &#x5728;&#x5149;&#x6807;&#x6240;&#x5728;&#x5B57;&#x7B26;&#x540E;&#x63D2;&#x5165; A &#x5728;&#x5149;&#x6807;&#x6240;&#x5728;&#x884C;&#x5C3E;&#x63D2;&#x5165; i &#x5728;&#x5149;&#x6807;&#x6240;&#x5728;&#x5B57;&#x7B26;&#x524D;&#x63D2;&#x5165; I &#x5728;&#x5149;&#x6807;&#x6240;&#x5728;&#x884C;&#x9996;&#x63D2;&#x5165; o &#x5728;&#x5149;&#x6807;&#x4E0B;&#x63D2;&#x5165;&#x65B0;&#x884C; O &#x5728;&#x5149;&#x6807;&#x4E0A;&#x63D2;&#x5165;&#x65B0;&#x884C; &#x5149;&#x6807;&#x79FB;&#x52A8;&#x2003;&#x2003;&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B; &#x7B26;&#x53F7; &#x8BF4;&#x660E; k &#x5149;&#x6807;&#x5411;&#x4E0A;&#x79FB;&#x52A8;&#x4E00;&#x884C; nk &#x5149;&#x6807;&#x5411;&#x4E0A;&#x79FB;&#x52A8;n&#x884C; j &#x5149;&#x6807;&#x5411;&#x4E0B;&#x79FB;&#x52A8;&#x4E00;&#x884C; nj &#x5149;&#x6807;&#x5411;&#x4E0B;&#x79FB;&#x52A8;n&#x884C; h &#x5149;&#x6807;&#x5411;&#x5DE6;&#x79FB;&#x52A8;&#x4E00;&#x884C; nh &#x5149;&#x6807;&#x5411;&#x5DE6;&#x79FB;&#x52A8;n&#x884C; l &#x5149;&#x6807;&#x5411;&#x53F3;&#x79FB;&#x52A8;&#x4E00;&#x884C; nl &#x5149;&#x6807;&#x5411;&#x53F3;&#x79FB;&#x52A8;n&#x884C; &#x7B26;&#x53F7; &#x8BF4;&#x660E; b &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x524D;&#x4E00;&#x4E2A;&#x5355;&#x8BCD;&#x7684;&#x9996;&#x5B57;&#x6BCD;&#x4E0A; nb &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x524D;n&#x4E2A;&#x5355;&#x8BCD;&#x7684;&#x9996;&#x5B57;&#x6BCD;&#x4E0A; w &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x540E;&#x4E00;&#x4E2A;&#x5355;&#x8BCD;&#x7684;&#x9996;&#x5B57;&#x6BCD;&#x4E0A; nw &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x540E;n&#x4E2A;&#x5355;&#x8BCD;&#x7684;&#x9996;&#x5B57;&#x6BCD;&#x4E0A; ge &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x524D;&#x4E00;&#x4E2A;&#x5355;&#x8BCD;&#x7684;&#x5C3E;&#x5B57;&#x6BCD;&#x4E0A; nge &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x524D;n&#x4E2A;&#x5355;&#x8BCD;&#x7684;&#x5C3E;&#x5B57;&#x6BCD;&#x4E0A; e &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x540E;&#x4E00;&#x4E2A;&#x5355;&#x8BCD;&#x7684;&#x5C3E;&#x5B57;&#x6BCD;&#x4E0A; ne &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x540E;n&#x4E2A;&#x5355;&#x8BCD;&#x7684;&#x5C3E;&#x5B57;&#x6BCD;&#x4E0A; n &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x540E;n&#x4E2A;&#x5B57;&#x7B26;&#x4E0A; &#x7B26;&#x53F7; &#x8BF4;&#x660E; gg &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x7B2C;&#x4E00;&#x884C;&#x9996; G &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x6700;&#x540E;&#x4E00;&#x884C;&#x9996; ngg&#x6216;nG&#x6216;:n &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x7B2C;n&#x884C;&#x9996; - &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x4E0A;&#x4E00;&#x884C;&#x884C;&#x9996; n- &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x4E0A;n&#x884C;&#x884C;&#x9996; + &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x4E0B;&#x4E00;&#x884C;&#x884C;&#x9996; n+ &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x4E0B;n&#x884C;&#x884C;&#x9996; 0 &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x8BE5;&#x884C;&#x884C;&#x9996; $ &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x8BE5;&#x884C;&#x884C;&#x5C3E; n$ &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x4E0B;n&#x884C;&#x884C;&#x5C3E; ^ &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x8BE5;&#x884C;&#x9996;&#x5B57;&#x6BCD; &#x7B26;&#x53F7; &#x8BF4;&#x660E; Home &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x8BE5;&#x884C;&#x884C;&#x9996;(&#x53EF;&#x4EE5;&#x5728;&#x63D2;&#x5165;&#x6A21;&#x5F0F;&#x4E0B;&#x4F7F;&#x7528;) End &#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x8BE5;&#x884C;&#x884C;&#x5C3E;(&#x53EF;&#x4EE5;&#x5728;&#x63D2;&#x5165;&#x6A21;&#x5F0F;&#x4E0B;&#x4F7F;&#x7528;) &#x5220;&#x9664;(&#x526A;&#x5207;)&#x5B57;&#x7B26;&#x2003;&#x2003;&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B; &#x7B26;&#x53F7; &#x8BF4;&#x660E; x &#x5220;&#x9664;&#x5149;&#x6807;&#x6240;&#x5728;&#x5B57;&#x7B26; nx &#x5220;&#x9664;&#x5149;&#x6807;&#x5904;&#x53CA;&#x540E;n-1&#x4E2A;&#x5B57;&#x7B26; X &#x5220;&#x9664;&#x5149;&#x6807;&#x524D;&#x4E00;&#x4E2A;&#x5B57;&#x7B26; nX &#x5220;&#x9664;&#x5149;&#x6807;&#x524D;n&#x4E2A;&#x5B57;&#x7B26; dd &#x5220;&#x9664;&#x5149;&#x6807;&#x6240;&#x5728;&#x884C; ndd &#x5220;&#x9664;&#x5149;&#x6807;&#x6240;&#x5728;&#x884C;&#x53CA;&#x540E;n-1&#x884C; dw &#x5220;&#x9664;&#x5149;&#x6807;&#x6240;&#x5728;&#x5904;&#x7684;&#x5355;&#x8BCD; dnw &#x5220;&#x9664;&#x5149;&#x6807;&#x6240;&#x5728;&#x5904;&#x53CA;&#x540E;n-1&#x4E2A;&#x5355;&#x8BCD; dG &#x5220;&#x9664;&#x5149;&#x6807;&#x6240;&#x5728;&#x884C;&#x5230;&#x6587;&#x4EF6;&#x672B;&#x5C3E;&#x7684;&#x6240;&#x6709;&#x884C; dgg &#x5220;&#x9664;&#x5149;&#x6807;&#x6240;&#x5728;&#x884C;&#x5230;&#x6587;&#x4EF6;&#x5F00;&#x59CB;&#x7684;&#x6240;&#x6709;&#x884C; d/word &#x5220;&#x9664;&#x4ECE;&#x5149;&#x6807;&#x6240;&#x5728;&#x5904;&#x5230;&#x5355;&#x8BCD;word&#x7684;&#x6240;&#x6709;&#x6587;&#x672C; D &#x5220;&#x9664;&#x5149;&#x6807;&#x6240;&#x5728;&#x5904;&#x5230;&#x8BE5;&#x884C;&#x5C3E;&#x7684;&#x6240;&#x6709;&#x5185;&#x5BB9; :nd &#x5220;&#x9664;&#x7B2C;n&#x884C; :n1,n2d &#x5220;&#x9664;n1&#x884C;&#x5230;n2&#x884C; &#x590D;&#x5236;&#x2003;&#x2003;&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B; &#x7B26;&#x53F7; &#x8BF4;&#x660E; yy &#x590D;&#x5236;&#x5149;&#x6807;&#x6240;&#x5728;&#x884C; nyy &#x590D;&#x5236;&#x5149;&#x6807;&#x6240;&#x5728;&#x884C;&#x53CA;&#x540E;n-1&#x884C; yw &#x590D;&#x5236;&#x5149;&#x6807;&#x6240;&#x5728;&#x5904;&#x7684;&#x5355;&#x8BCD; ynw &#x590D;&#x5236;&#x5149;&#x6807;&#x6240;&#x5728;&#x5904;&#x53CA;&#x540E;n-1&#x4E2A;&#x5355;&#x8BCD; yG &#x590D;&#x5236;&#x5149;&#x6807;&#x6240;&#x5728;&#x884C;&#x5230;&#x6587;&#x4EF6;&#x672B;&#x5C3E;&#x7684;&#x6240;&#x6709;&#x884C; ygg &#x590D;&#x5236;&#x5149;&#x6807;&#x6240;&#x5728;&#x884C;&#x5230;&#x6587;&#x4EF6;&#x5F00;&#x59CB;&#x7684;&#x6240;&#x6709;&#x884C; y/word &#x590D;&#x5236;&#x4ECE;&#x5149;&#x6807;&#x6240;&#x5728;&#x5904;&#x5230;&#x5355;&#x8BCD;word&#x7684;&#x6240;&#x6709;&#x6587;&#x672C; Y &#x590D;&#x5236;&#x5149;&#x6807;&#x6240;&#x5728;&#x5904;&#x5230;&#x8BE5;&#x884C;&#x5C3E;&#x7684;&#x6240;&#x6709;&#x5185;&#x5BB9; :ny &#x590D;&#x5236;&#x7B2C;n&#x884C; :n1,n2y &#x590D;&#x5236;n1&#x884C;&#x5230;n2&#x884C; &#x7C98;&#x8D34;&#x2003;&#x2003;&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B; &#x7B26;&#x53F7; &#x8BF4;&#x660E; p &#x7C98;&#x8D34;&#x5728;&#x5F53;&#x524D;&#x5149;&#x6807;&#x4E0B; P &#x7C98;&#x8D34;&#x5728;&#x5F53;&#x524D;&#x5149;&#x6807;&#x4E0A; &#x53EF;&#x89C6;&#x2003;&#x2003;&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B; &#x7B26;&#x53F7; &#x8BF4;&#x660E; v &#x8FDB;&#x5165;&#x53EF;&#x89C6;(&#x9009;&#x62E9;)&#x6A21;&#x5F0F; d &#x5220;&#x9664;&#x5149;&#x6807;&#x5185;&#x5BB9; y &#x590D;&#x5236;&#x5149;&#x6807;&#x5185;&#x5BB9; &#x53EF;&#x89C6;&#x2003;&#x2003;&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B; &#x7B26;&#x53F7; &#x8BF4;&#x660E; v &#x8FDB;&#x5165;&#x53EF;&#x89C6;(&#x9009;&#x62E9;)&#x6A21;&#x5F0F; y &#x590D;&#x5236;&#x5149;&#x6807;&#x5185;&#x5BB9; d &#x526A;&#x5207;&#x5149;&#x6807;&#x5185;&#x5BB9; &#x64A4;&#x56DE;&#x548C;&#x6062;&#x590D;&#x2003;&#x2003;&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B; &#x7B26;&#x53F7; &#x8BF4;&#x660E; u &#x590D;&#x539F;&#x524D;&#x4E00;&#x6B21;&#x64CD;&#x4F5C; Ctrl + r &#x91CD;&#x505A;&#x4E0A;&#x4E2A;&#x52A8;&#x4F5C; &#x7FFB;&#x9875;&#x64CD;&#x4F5C;&#x2003;&#x2003;&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B; &#x7B26;&#x53F7; &#x8BF4;&#x660E; Ctrl + f &#x5C4F;&#x5E55;&#x5411;&#x4E0B;&#x79FB;&#x52A8;&#x4E00;&#x9875; Ctrl + b &#x5C4F;&#x5E55;&#x5411;&#x4E0A;&#x79FB;&#x52A8;&#x4E00;&#x9875; Ctrl + d &#x5C4F;&#x5E55;&#x5411;&#x4E0B;&#x79FB;&#x52A8;&#x534A;&#x9875; Ctrl + u &#x5C4F;&#x5E55;&#x5411;&#x4E0B;&#x79FB;&#x52A8;&#x534A;&#x9875; &#x8BBE;&#x7F6E;&#x884C;&#x53F7;&#x2003;&#x2003;&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B; &#x7B26;&#x53F7; &#x8BF4;&#x660E; :set nu &#x663E;&#x793A;&#x6240;&#x6709;&#x7684;&#x884C;&#x53F7; :set nonu &#x53D6;&#x6D88;&#x663E;&#x793A;&#x884C;&#x53F7; &#x641C;&#x7D22;&#x2003;&#x2003;&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B; &#x7B26;&#x53F7; &#x8BF4;&#x660E; /word &#x5411;&#x5149;&#x6807;&#x4E4B;&#x4E0B;&#x5BFB;&#x627E;/word&#x7684;&#x5B57;&#x7B26;&#x4E32; ?word &#x5411;&#x5149;&#x6807;&#x4E4B;&#x4E0A;&#x5BFB;&#x627E;/word&#x7684;&#x5B57;&#x7B26;&#x4E32; n &#x7EE7;&#x7EED;&#x5411;&#x4E0B;&#x67E5;&#x627E;&#x4E0B;&#x4E00;&#x4E2A;&#x5339;&#x914D;&#x7684;&#x5B57;&#x7B26;&#x4E32; N &#x7EE7;&#x7EED;&#x5411;&#x4E0A;&#x67E5;&#x627E;&#x4E0B;&#x4E00;&#x4E2A;&#x5339;&#x914D;&#x7684;&#x5B57;&#x7B26;&#x4E32; :noh &#x53D6;&#x6D88;&#x9AD8;&#x4EAE;&#x663E;&#x793A; :set ic &#x67E5;&#x627E;&#x5FFD;&#x7565;&#x5927;&#x5C0F;&#x5199; :set noic &#x67E5;&#x627E;&#x4E0D;&#x5FFD;&#x7565;&#x5927;&#x5C0F;&#x5199; &#x66FF;&#x6362;&#x2003;&#x2003;&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B; &#x7B26;&#x53F7; &#x8BF4;&#x660E; r &#x53D6;&#x4EE3;&#x5149;&#x6807;&#x5904;&#x7684;&#x5B57;&#x7B26;&#x4E32; R &#x4ECE;&#x5149;&#x6807;&#x5904;&#x5F00;&#x59CB;&#x66FF;&#x6362;&#x5B57;&#x7B26;&#xFF0C;Esc&#x7ED3;&#x675F;&#x66FF;&#x6362; :n1,n2s/word1/word2/g &#x5728;n1&#x5230;n2&#x884C;&#x4E4B;&#x95F4;&#x5C06;word1&#x6362;&#x6210;word2 :%s/word1/word2/g &#x5C06;&#x6587;&#x6863;&#x4E2D;&#x6240;&#x6709;&#x7684;word1&#x6362;&#x6210;word2 :%s/word1/word2/g &#x5C06;&#x6587;&#x6863;&#x4E2D;&#x6240;&#x6709;&#x7684;word1&#x6362;&#x6210;word2&#xFF0C;&#x53D6;&#x4EE3;&#x524D;&#x8BE2;&#x95EE; &#x66FF;&#x6362;&#x2003;&#x2003;&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B; &#x7B26;&#x53F7; &#x8BF4;&#x660E; r &#x53D6;&#x4EE3;&#x5149;&#x6807;&#x5904;&#x7684;&#x5B57;&#x7B26;&#x4E32; R &#x4ECE;&#x5149;&#x6807;&#x5904;&#x5F00;&#x59CB;&#x66FF;&#x6362;&#x5B57;&#x7B26;&#xFF0C;Esc&#x7ED3;&#x675F;&#x66FF;&#x6362; :n1,n2s/word1/word2/g &#x5728;n1&#x5230;n2&#x884C;&#x4E4B;&#x95F4;&#x5C06;word1&#x6362;&#x6210;word2 :%s/word1/word2/g &#x5C06;&#x6587;&#x6863;&#x4E2D;&#x6240;&#x6709;&#x7684;word1&#x6362;&#x6210;word2 :%s/word1/word2/g &#x5C06;&#x6587;&#x6863;&#x4E2D;&#x6240;&#x6709;&#x7684;word1&#x6362;&#x6210;word2&#xFF0C;&#x53D6;&#x4EE3;&#x524D;&#x8BE2;&#x95EE; :ab word1 word2 &#x6587;&#x6863;&#x4E2D;&#x4EE5;&#x540E;&#x51FA;&#x73B0;&#x7684;word1&#x5B57;&#x7B26;&#x81EA;&#x52A8;&#x8F6C;&#x6362;&#x4E3A;word2 &#x5B9A;&#x4E49;&#x5FEB;&#x6377;&#x952E;&#x2003;&#x2003;&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B;&#x2003;&#x2003;:map ctrl+v+&#x5B57;&#x7B26; &#x547D;&#x4EE4; &#x53EF;&#x4EE5;&#x7528;&#x6765;&#x5B9A;&#x4E49;&#x5FEB;&#x6377;&#x952E; &#x7B26;&#x53F7; &#x8BF4;&#x660E; :map ctrl+v+p I# &#x6309;ctrl+v+p&#x5219;&#x4F1A;&#x5728;&#x884C;&#x9996;&#x52A0;#&#x6CE8;&#x91CA; :map ctrl+v+H iHello World ! &#x6309;ctrl+v+H&#x4F1A;&#x63D2;&#x5165;Hello World ! &#x8FDE;&#x7EED;&#x884C;&#x6CE8;&#x91CA;&#x2003;&#x2003;&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B; &#x7B26;&#x53F7; &#x8BF4;&#x660E; :n1,n2s/^/xxx/g &#x5728;n1&#x5230;n2&#x884C;&#x7684;&#x884C;&#x9996;&#x52A0;xxx :n1,n2s/^xxx//g &#x5C06;n1&#x5230;n2&#x884C;&#x884C;&#x9996;&#x7684;xxx&#x5220;&#x53BB; :n1,n2s/^/\/\//g &#x5728;n1&#x5230;n2&#x884C;&#x7684;&#x884C;&#x9996;&#x52A0;//&#xFF0C;\/&#x4EE3;&#x8868;/ &#x4FDD;&#x5B58;&#x548C;&#x9000;&#x51FA;&#x2003;&#x2003;&#x5728;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#x4E0B; &#x7B26;&#x53F7; &#x8BF4;&#x660E; :w &#x4FDD;&#x5B58;&#x4FEE;&#x6539; :w filename &#x53E6;&#x5B58;&#x4E3A;filename&#x6587;&#x4EF6; :Wq&#x6216;:wq!&#x6216;ZZ &#x4FDD;&#x5B58;&#x4FEE;&#x6539;&#x5E76;&#x9000;&#x51FA; :q! &#x4E0D;&#x4FDD;&#x5B58;&#x4FEE;&#x6539;&#x5E76;&#x9000;&#x51FA; Vim&#x5C0F;&#x7ED3;&#x2003;&#x2003;Vim&#x4F5C;&#x4E3A;&#x4E00;&#x6B3E;&#x53E4;&#x8001;&#x7684;&#x6587;&#x672C;&#x7F16;&#x8F91;&#x5668;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x5177;&#x6709;&#x8BB8;&#x591A;&#x6709;&#x7528;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x4F7F;&#x5176;&#x53EF;&#x4EE5;&#x4E0E;&#x73B0;&#x4EE3;&#x6587;&#x672C;&#x7F16;&#x8F91;&#x5668;&#x7ADE;&#x4E89;&#xFF0C;&#x4E5F;&#x662F;&#x4F5C;&#x4E3A;Linux&#x7CFB;&#x7EDF;&#x81EA;&#x5E26;&#x7684;&#x6587;&#x672C;&#x7F16;&#x8F91;&#x5668;Vi&#x7684;&#x5347;&#x7EA7;&#x7248;&#xFF0C;&#x53EF;&#x4EE5;&#x5B8C;&#x5168;&#x89E3;&#x653E;&#x53CC;&#x624B;&#xFF0C;&#x5BF9;&#x4E8E;&#x7A0B;&#x5E8F;&#x5458;&#x6765;&#x8BF4;&#xFF0C;Vim&#x662F;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x7684;&#x6280;&#x80FD;&#x4E4B;&#x4E00;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>程序员必备技能</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Markdown]]></title>
    <url>%2F2019%2F09%2F21%2Fskill%20Markdown%2F</url>
    <content type="text"><![CDATA[Markdown Markdown&#x4ECB;&#x7ECD;&#x2003;&#x2003;Markdown:&#x662F;&#x4E00;&#x79CD;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x666E;&#x901A;&#x6587;&#x672C;&#x7F16;&#x8F91;&#x5668;&#x7F16;&#x5199;&#x7684;&#x6807;&#x8BB0;&#x8BED;&#x8A00;&#xFF0C;&#x901A;&#x8FC7;&#x7B80;&#x5355;&#x7684;&#x6807;&#x8BB0;&#x8BED;&#x6CD5;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x4F7F;&#x666E;&#x901A;&#x6587;&#x672C;&#x5185;&#x5BB9;&#x5177;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x683C;&#x5F0F;&#x3002; Markdown&#x8BED;&#x6CD5;&#x6807;&#x9898;&#x2003;&#x2003;&#x7528;#&#x8868;&#x793A;&#x6807;&#x9898;&#xFF0C;&#x51E0;&#x7EA7;&#x6807;&#x9898;&#x5BF9;&#x5E94;&#x51E0;&#x4E2A;#&#xFF0C;&#x6700;&#x591A;6&#x4E2A;&#xFF0C;&#x6CE8;&#x610F;#&#x548C;&#x6807;&#x9898;&#x76F4;&#x63A5;&#x6709;&#x7A7A;&#x683C;&#x2003;&#x2003;# &#x4E00;&#x7EA7;&#x6807;&#x9898;&#x2003;&#x2003;## &#x4E8C;&#x7EA7;&#x6807;&#x9898;&#x2003;&#x2003;### &#x4E09;&#x7EA7;&#x6807;&#x9898;&#x2003;&#x2003;#### &#x56DB;&#x7EA7;&#x6807;&#x9898;&#x2003;&#x2003;##### &#x4E94;&#x7EA7;&#x6807;&#x9898;&#x2003;&#x2003;###### &#x516D;&#x7EA7;&#x6807;&#x9898; &#x5B57;&#x4F53; &#x7B26;&#x53F7; &#x6548;&#x679C; *&#x659C;&#x4F53;&#x6587;&#x672C;* &#x659C;&#x4F53;&#x6587;&#x672C; _&#x659C;&#x4F53;&#x6587;&#x672C;_ &#x659C;&#x4F53;&#x6587;&#x672C; **&#x7C97;&#x4F53;&#x6587;&#x672C;** &#x7C97;&#x4F53;&#x6587;&#x672C; __&#x7C97;&#x4F53;&#x6587;&#x672C;__ &#x7C97;&#x4F53;&#x6587;&#x672C; ***&#x7C97;&#x659C;&#x4F53;&#x6587;&#x672C;*** &#x7C97;&#x659C;&#x4F53;&#x6587;&#x672C; ___&#x7C97;&#x659C;&#x4F53;&#x6587;&#x672C;___ &#x7C97;&#x659C;&#x4F53;&#x6587;&#x672C; &#x5206;&#x5272;&#x7EBF;&#x2003;&#x2003;*** &#x2003;&#x2003;&#x661F;&#x53F7;&#x4E2D;&#x95F4;&#x53EF;&#x4EE5;&#x6709;&#x7A7A;&#x683C;&#x4E5F;&#x53EF;&#x4EE5;&#x6CA1;&#x6709;&#x7A7A;&#x683C; &#x2003;&#x2003;- - - &#x2003;&#x2003;&#x51CF;&#x53F7;&#x4E2D;&#x95F4;&#x5FC5;&#x987B;&#x6709;&#x7A7A;&#x683C; &#x5220;&#x9664;&#x7EBF;&#x2003;&#x2003;&lt;u&gt;&#x8FD9;&#x662F;&#x4E00;&#x6761;&#x5220;&#x9664;&#x7EBF;&lt;\u&gt;&#x2003;&#x2003;&#x8FD9;&#x662F;&#x4E00;&#x6761;&#x5220;&#x9664;&#x7EBF; &#x811A;&#x6CE8;&#x2003;&#x2003;&#x7528;&#x4E2D;&#x62EC;&#x53F7;&#x521B;&#x5EFA;[&#x811A;&#x6CE8;]&#x3002;&#x2003;&#x2003;[&#x811A;&#x6CE8;]: &#x811A;&#x6CE8;&#x4E2D;&#x7684;&#x5185;&#x5BB9; &#x2003;&#x2003;&#x7528;&#x4E2D;&#x62EC;&#x53F7;&#x521B;&#x5EFA;[&#x811A;&#x6CE8;]&#x3002;[&#x811A;&#x6CE8;]: &#x811A;&#x6CE8;&#x4E2D;&#x7684;&#x5185;&#x5BB9; &#x65E0;&#x5E8F;&#x5217;&#x8868;&#x2003;&#x2003;&#x65E0;&#x5E8F;&#x5217;&#x8868;&#x4F7F;&#x7528;*&#x6216;+&#x6216;-&#x4F5C;&#x4E3A;&#x5217;&#x8868;&#x6807;&#x8BB0;&#x2003;&#x2003;&#x7B26;&#x53F7;&#x548C;&#x5185;&#x5BB9;&#x4E4B;&#x95F4;&#x8981;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00; &#x2003;&#x2003;- &#x7B2C;&#x4E00;&#x9879;&#x2003;&#x2003;* &#x7B2C;&#x4E8C;&#x9879;&#x2003;&#x2003;+ &#x7B2C;&#x4E09;&#x9879; &#x7B2C;&#x4E00;&#x9879; &#x7B2C;&#x4E8C;&#x9879; &#x7B2C;&#x4E09;&#x9879; &#x6709;&#x5E8F;&#x5217;&#x8868;&#x2003;&#x2003;&#x65E0;&#x5E8F;&#x5217;&#x8868;&#x4F7F;&#x7528;&#x6570;&#x5B57;&#x52A0;&#x4E0A;.&#x4F5C;&#x4E3A;&#x5217;&#x8868;&#x6807;&#x8BB0;&#x2003;&#x2003;&#x7B26;&#x53F7;&#x548C;&#x5185;&#x5BB9;&#x4E4B;&#x95F4;&#x8981;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00; &#x7B2C;&#x4E00;&#x9879; &#x7B2C;&#x4E8C;&#x9879; &#x7B2C;&#x4E09;&#x9879; &#x5217;&#x8868;&#x5D4C;&#x5957;&#x2003;&#x2003;&#x5217;&#x8868;&#x5D4C;&#x5957;&#x53EA;&#x8981;&#x5728;&#x5B50;&#x5217;&#x8868;&#x4E2D;&#x6DFB;&#x52A0;&#x56DB;&#x4E2A;&#x7A7A;&#x683C;&#x5373;&#x4E3A;&#x4E0B;&#x4E00;&#x5C42;&#x5217;&#x8868; &#x2003;&#x2003;1. &#x7B2C;&#x4E00;&#x5C42;&#xFF1A;&#x2003;&#x2003;&#x2002;&#x2002;&#x2002;&#x2002;- &#x7B2C;&#x4E00;&#x5C42;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5185;&#x5BB9;&#x2003;&#x2003;&#x2002;&#x2002;&#x2002;&#x2002;- &#x7B2C;&#x4E00;&#x5C42;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x5185;&#x5BB9;&#x2003;&#x2003;2. &#x7B2C;&#x4E8C;&#x5C42;&#xFF1A;&#x2003;&#x2003;&#x2002;&#x2002;&#x2002;&#x2002;- &#x7B2C;&#x4E8C;&#x5C42;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5185;&#x5BB9;&#x2003;&#x2003;&#x2002;&#x2002;&#x2002;&#x2002;- &#x7B2C;&#x4E8C;&#x5C42;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x5185;&#x5BB9; &#x7B2C;&#x4E00;&#x5C42;&#xFF1A; &#x7B2C;&#x4E00;&#x5C42;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5185;&#x5BB9; &#x7B2C;&#x4E00;&#x5C42;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x5185;&#x5BB9; &#x7B2C;&#x4E8C;&#x5C42;&#xFF1A; &#x7B2C;&#x4E8C;&#x5C42;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5185;&#x5BB9; &#x7B2C;&#x4E8C;&#x5C42;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x5185;&#x5BB9; &#x533A;&#x5757;&#x2003;&#x2003;&#x533A;&#x5757;&#x4F7F;&#x7528;&#x5927;&#x4E8E;&#x53F7;&gt;&#x4F5C;&#x4E3A;&#x6807;&#x8BB0;&#x2003;&#x2003;&#x7B26;&#x53F7;&#x548C;&#x5185;&#x5BB9;&#x4E4B;&#x95F4;&#x8981;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00; &#x2003;&#x2003;&gt; &#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x533A;&#x5757;&#x2003;&#x2003;&gt; &gt; &#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x5B50;&#x533A;&#x5757; &#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x533A;&#x5757; &#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x5B50;&#x533A;&#x5757; &#x4EE3;&#x7801;&#x5F15;&#x7528;&#x2003;&#x2003;&#x4EE3;&#x7801;&#x5F15;&#x7528;&#x4F7F;&#x7528;&#x53CD;&#x5F15;&#x53F7;`&#x4F5C;&#x4E3A;&#x6807;&#x8BB0;&#x2003;&#x2003;&#x8FD8;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x53CD;&#x5F15;&#x53F7;```&#x5927;&#x6BB5;&#x4EE3;&#x7801;``` &#x2003;&#x2003;`print(&#x2018;Hello Markdown&#x2019;)`&#x2003;&#x2003;print(&apos;Hello Markdown&apos;) &#x2003;&#x2003;```&#x2003;&#x2003;def my_print():&#x2003;&#x2003;&#x2002;&#x2002;&#x2002;&#x2002;print(&#x2018;Hello&#x2019;)&#x2003;&#x2003;&#x2002;&#x2002;&#x2002;&#x2002;print(&#x2018;Markdown&#x2019;)&#x2003;&#x2003;```123def my_print(): print(&apos;Hello&apos;) print(&apos;Markdown&apos;) &#x94FE;&#x63A5;&#x2003;&#x2003;&#x5F15;&#x7528;&#x94FE;&#x63A5;&#x7684;&#x683C;&#x5F0F;&#x4E3A;&#xFF1A;[&#x94FE;&#x63A5;&#x540D;&#x79F0;](&#x94FE;&#x63A5;&#x5730;&#x5740;) &#x2003;&#x2003;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x641C;&#x7D22;&#x5F15;&#x64CE;[&#x767E;&#x5EA6;](www.baidu.com) &#x2003;&#x2003;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x767E;&#x5EA6; &#x56FE;&#x7247;&#x2003;&#x2003;&#x653E;&#x7F6E;&#x56FE;&#x7247;&#x7684;&#x683C;&#x5F0F;&#x4E3A;&#xFF1A;![&#x56FE;&#x7247;&#x6587;&#x5B57;](&#x56FE;&#x7247;&#x5730;&#x5740;) &#x2003;&#x2003;![&#x672C;&#x5730;&#x56FE;&#x7247;](/images/SKILL/markdown1.jpg) &#x8868;&#x683C;&#x2003;&#x2003;&#x8868;&#x683C;&#x7684;&#x683C;&#x5F0F;&#x4E3A;&#xFF1A;&#x2003;&#x2003;| &#x8868;&#x5934;1 | &#x8868;&#x5934;2 |&#x2003;&#x2003;| --- | --- |&#x2003;&#x2003;| &#x5355;&#x5143;&#x683C;1 | &#x5355;&#x5143;&#x683C;2 |&#x2003;&#x2003;| &#x5355;&#x5143;&#x683C;3 | &#x5355;&#x5143;&#x683C;4 | &#x8868;&#x5934;1 &#x8868;&#x5934;2 &#x5355;&#x5143;&#x683C;1 &#x5355;&#x5143;&#x683C;2 &#x5355;&#x5143;&#x683C;3 &#x5355;&#x5143;&#x683C;4 HTML&#x5143;&#x7D20;&#x2003;&#x2003;Markdown&#x652F;&#x6301;&#x5F88;&#x591A;HTML&#x5143;&#x7D20;&#xFF0C;&#x4E0D;&#x9010;&#x4E00;&#x4ECB;&#x7ECD;&#xFF0C;&#x611F;&#x5174;&#x8DA3;&#x53EF;&#x4EE5;&#x67E5;&#x9605;HTML&#x5143;&#x7D20; &#x2003;&#x2003;5&lt;sup&gt;2&lt;/sup&gt; + x&lt;sub&gt;n&lt;/sub&gt; &#x2003;&#x2003;52 + xn &#x516C;&#x5F0F;&#x2003;&#x2003;Markdown&#x4F7F;&#x7528;TeX&#x6216;LaTeX&#x683C;&#x5F0F;&#x7684;&#x6570;&#x5B66;&#x516C;&#x5F0F;&#x6765;&#x5B9E;&#x73B0;&#xFF0C;&#x4F1A;&#x6839;&#x636E;&#x9700;&#x8981;&#x52A0;&#x8F7D; Mathjax &#x5BF9;&#x6570;&#x5B66;&#x516C;&#x5F0F;&#x8FDB;&#x884C;&#x6E32;&#x67D3;&#x3002; &#x2003;&#x2003;Markdown&#x5728;&#x516C;&#x5F0F;&#x4E24;&#x7AEF;&#x52A0;&#x4E0A;\$&#x8F93;&#x5165;&#x6587;&#x4E2D;&#x516C;&#x5F0F; &#x2003;&#x2003;&#x5E73;&#x65B9;&#x548C;&#x516C;&#x5F0F;&#xFF1A;$(a + b)^2 = a^2 + 2ab + b^2$ &#x2003;&#x2003;Markdown&#x5728;&#x516C;&#x5F0F;&#x4E24;&#x7AEF;&#x52A0;&#x4E0A;$\$&#x53E6;&#x8D77;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x516C;&#x5F0F; &#x2003;&#x2003;&#x5E73;&#x65B9;&#x5DEE;&#x516C;&#x5F0F;&#xFF1A;$$(a - b)^2 = a^2 - 2ab + b^2$$ &#x8F6C;&#x4E49;&#x5B57;&#x7B26;&#x2003;&#x2003;&#x7EDD;&#x5927;&#x591A;&#x6570;&#x5B57;&#x7B26;&#x90FD;&#x53EF;&#x4EE5;&#x7528;\&#x8F6C;&#x4E49;&#xFF0C;&#x4F46;&#x662F;&#x4E0B;&#x8868;&#x5B57;&#x7B26;&#x8981;&#x7528;&#x6307;&#x5B9A;&#x7684;&#x7F16;&#x53F7;&#x8F6C;&#x4E49; &#x540D;&#x79F0; &#x7B26;&#x53F7; &#x6548;&#x679C; &#x7A7A;&#x683C; &amp;nbsp; &#xA0; &#x5C0F;&#x4E8E;&#x53F7; &amp;lt; &lt; &#x5927;&#x4E8E;&#x53F7; &amp;gt; &gt; &#x4E0E;&#x7B26;&#x53F7; &amp;amp; &amp; &#x5355;&#x5F15;&#x53F7; &amp;apos; &apos; &#x53CC;&#x5F15;&#x53F7; &amp;quot; &quot; Markdown&#x5C0F;&#x7ED3;&#x2003;&#x2003;Markdown&#x7684;&#x8BED;&#x6CD5;&#x7B80;&#x6D01;&#x660E;&#x4E86;&#xFF0C;&#x5B66;&#x4E60;&#x5BB9;&#x6613;&#xFF0C;&#x800C;&#x4E14;&#x529F;&#x80FD;&#x5F3A;&#x5927;&#xFF0C;&#x56E0;&#x6B64;&#x5F88;&#x591A;&#x4EBA;&#x7528;&#x5B83;&#x5199;&#x535A;&#x5BA2;&#xFF0C;&#x6211;&#x7684;&#x6240;&#x6709;&#x535A;&#x5BA2;&#x90FD;&#x662F;&#x91C7;&#x7528;Markdown&#x6765;&#x5199;&#x7684;&#xFF0C;&#x4E5F;&#x662F;&#x4E3A;&#x4E86;&#x67E5;&#x8BE2;&#x7684;&#x65B9;&#x4FBF;&#xFF0C;&#x6545;&#x5199;&#x4E0B;&#x4E86;&#x8FD9;&#x7BC7;&#x6587;&#x5B57;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>程序员必备技能</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LaTeX]]></title>
    <url>%2F2019%2F09%2F20%2Fskill%20Latex%2F</url>
    <content type="text"><![CDATA[LaTeX LaTeX&#x4ECB;&#x7ECD;&#x2003;&#x2003;LaTeX:&#x662F;&#x4E00;&#x79CD;&#x57FA;&#x4E8E;TEX&#x7684;&#x6392;&#x7248;&#x7CFB;&#x7EDF;&#xFF0C;&#x7531;&#x7F8E;&#x56FD;&#x8BA1;&#x7B97;&#x673A;&#x5B66;&#x5BB6;&#x83B1;&#x65AF;&#x5229;&#xB7;&#x5170;&#x4F2F;&#x7279;(Leslie Lamport)&#x5728;20&#x4E16;&#x7EAA;80&#x5E74;&#x4EE3;&#x521D;&#x671F;&#x5F00;&#x53D1;&#xFF0C;&#x5229;&#x7528;&#x8FD9;&#x79CD;&#x683C;&#x5F0F;&#xFF0C;&#x5BF9;&#x4E8E;&#x751F;&#x6210;&#x590D;&#x6742;&#x8868;&#x683C;&#x548C;&#x6570;&#x5B66;&#x516C;&#x5F0F;&#xFF0C;&#x8868;&#x73B0;&#x5F97;&#x5C24;&#x4E3A;&#x7A81;&#x51FA;&#x3002; LaTeX&#x6570;&#x5B66;&#x516C;&#x5F0F;&#x683C;&#x5F0F;&#x8BF4;&#x660E; &#x5E38;&#x89C1;&#x5E0C;&#x814A;&#x5B57;&#x6BCD; &#x9876;&#x90E8;&#x7B26;&#x53F7; &#x5E38;&#x7528;&#x51FD;&#x6570; &#x7B97;&#x672F;&#x8FD0;&#x7B97; &#x5FAE;&#x5206;&#x8FD0;&#x7B97; &#x5173;&#x7CFB;&#x8FD0;&#x7B97; &#x903B;&#x8F91;&#x8FD0;&#x7B97; &#x96C6;&#x5408;&#x8FD0;&#x7B97; &#x7279;&#x6B8A;&#x7B26;&#x53F7; &#x7A7A;&#x683C; &#x5B57;&#x4F53;&#x989C;&#x8272; &#x5E38;&#x7528;&#x6570;&#x5B66;&#x7B26;&#x53F7; &#x591A;&#x884C;&#x7B26;&#x53F7; LaTeX&#x5C0F;&#x7ED3;&#x2003;&#x2003;LaTeX&#x4F5C;&#x4E3A;&#x5F53;&#x4E0B;&#x6D41;&#x884C;&#x7684;&#x6392;&#x7248;&#x7CFB;&#x7EDF;&#xFF0C;&#x8BB8;&#x591A;&#x6587;&#x6863;&#x90FD;&#x662F;&#x4EE5;LaTeX&#x6392;&#x7248;&#x7684;&#xFF0C;&#x5BF9;&#x4E8E;&#x516C;&#x5F0F;&#x8F83;&#x591A;&#x7684;&#x5B66;&#x672F;&#x6587;&#x6863;&#xFF0C;LaTeX&#x662F;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x7684;&#x3002;&#x6B64;&#x7F51;&#x9875;&#x4E0A;&#x7684;&#x6240;&#x6709;&#x516C;&#x5F0F;&#x90FD;&#x662F;&#x4F7F;&#x7528;LaTeX&#x7F16;&#x8F91;&#x7684;&#xFF0C;&#x4E5F;&#x662F;&#x4E3A;&#x4E86;&#x67E5;&#x8BE2;&#x7684;&#x65B9;&#x4FBF;&#xFF0C;&#x6545;&#x5199;&#x4E0B;&#x4E86;&#x8FD9;&#x7BC7;&#x6587;&#x5B57;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>程序员必备技能</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Object-Oriented(面向对象)]]></title>
    <url>%2F2019%2F09%2F18%2Fpython_class%2F</url>
    <content type="text"><![CDATA[Object-Oriented&#x4ECB;&#x7ECD;&#x2003;&#x2003;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x662F;&#x4E00;&#x79CD;&#x975E;&#x5E38;&#x91CD;&#x8981;&#x7684;&#x7F16;&#x7A0B;&#x601D;&#x60F3;&#xFF0C;&#x628A;&#x6570;&#x636E;&#x548C;&#x64CD;&#x4F5C;&#x653E;&#x5728;&#x4E00;&#x8D77;&#xFF0C;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x6574;&#x4F53;&#xFF0C;&#x79F0;&#x4E3A;&#x5BF9;&#x8C61;&#x3002;Python&#x7684;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x548C;C++&#x7C7B;&#x4F3C;&#xFF0C;&#x4E5F;&#x5177;&#x6709;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7684;&#x4E09;&#x5927;&#x7279;&#x70B9;&#xFF0C;&#x5C01;&#x88C5;&#xFF0C;&#x7EE7;&#x627F;&#x548C;&#x591A;&#x6001;&#x3002; &#x9762;&#x5411;&#x8FC7;&#x7A0B;&#x4E0E;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x9762;&#x5411;&#x8FC7;&#x7A0B;&#x7684;&#x7F16;&#x7A0B;&#x601D;&#x60F3;&#x2003;&#x2003;&#x81EA;&#x4E0A;&#x800C;&#x4E0B;&#x987A;&#x5E8F;&#x6267;&#x884C;&#xFF0C;&#x9010;&#x6B65;&#x6C42;&#x7CBE;&#x3002;&#x2003;&#x2003;&#x7A0B;&#x5E8F;&#x7ED3;&#x6784;&#x6309;&#x7167;&#x529F;&#x80FD;&#x5206;&#x4E3A;&#x82E5;&#x5E72;&#x6A21;&#x5757;&#xFF0C;&#x5404;&#x90E8;&#x5206;&#x76F8;&#x5BF9;&#x72EC;&#x7ACB;&#x3002;&#x2003;&#x2003;&#x6BCF;&#x4E00;&#x6A21;&#x5757;&#x5185;&#x90E8;&#x5747;&#x662F;&#x7531;&#x987A;&#x5E8F;&#xFF0C;&#x9009;&#x62E9;&#xFF0C;&#x5FAA;&#x73AF;&#x4E09;&#x79CD;&#x57FA;&#x672C;&#x7ED3;&#x6784;&#x3002;&#x2003;&#x2003;&#x7A0B;&#x5E8F;&#x6D41;&#x7A0B;&#x5728;&#x5199;&#x7A0B;&#x5E8F;&#x65F6;&#x5C31;&#x5DF2;&#x7ECF;&#x786E;&#x5B9A;&#x3002; &#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7684;&#x7F16;&#x7A0B;&#x601D;&#x60F3;&#x2003;&#x2003;&#x628A;&#x6570;&#x636E;&#x548C;&#x64CD;&#x4F5C;&#x653E;&#x5728;&#x4E00;&#x8D77;&#xFF0C;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x6574;&#x4F53;&#xFF0C;&#x79F0;&#x4E3A;&#x5BF9;&#x8C61;&#x3002;&#x2003;&#x2003;&#x5BF9;&#x540C;&#x7C7B;&#x5BF9;&#x8C61;&#x62BD;&#x8C61;&#x51FA;&#x5176;&#x5171;&#x6027;&#xFF0C;&#x5F62;&#x6210;&#x7C7B;&#x3002;&#x2003;&#x2003;&#x7C7B;&#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x5916;&#x90E8;&#x63A5;&#x53E3;&#x4E0E;&#x5916;&#x754C;&#x64CD;&#x4F5C;&#x3002;&#x2003;&#x2003;&#x7A0B;&#x5E8F;&#x6D41;&#x7A0B;&#x5728;&#x7528;&#x6237;&#x4F7F;&#x7528;&#x65F6;&#x51B3;&#x5B9A;&#x3002; Python&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x5E94;&#x7528;Python&#x521B;&#x5EFA;&#x7C7B;12345678910111213141516171819# &#x7C7B;&#x5C31;&#x662F;&#x4E00;&#x79CD;&#x7269;&#x4F53;&#x7684;&#x603B;&#x79F0;&#xFF0C;&#x5177;&#x6709;&#x5C5E;&#x6027;(&#x6210;&#x5458;&#x53D8;&#x91CF;)&#x548C;&#x884C;&#x4E3A;(&#x6210;&#x5458;&#x65B9;&#x6CD5;)&#x4E24;&#x4E2A;&#x7279;&#x5F81;&#x3002;&#x5176;&#x672C;&#x8EAB;&#x5E76;&#x4E0D;&#x5360;&#x7528;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#xFF0C;&#x5176;&#x5B9E;&#x4F8B;&#x5316;&#x7684;&#x5BF9;&#x8C61;&#x5360;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#x3002;# class &#x7C7B;&#x540D;(&#x7236;&#x7C7B;): # &#x5C5E;&#x6027;# &#x884C;&#x4E3A;# &#x7C7B;&#x540D;&#x4E00;&#x822C;&#x9996;&#x5B57;&#x6BCD;&#x5927;&#x5199;&#xFF0C;object&#x662F;&#x6240;&#x6709;&#x7C7B;&#x7684;&#x7236;&#x7C7B;&#xFF0C;&#x4E00;&#x822C;&#x6CA1;&#x6709;&#x5408;&#x9002;&#x7684;&#x7236;&#x7C7B;&#x5C31;&#x5199;object&#x3002;class Person(object):# &#x5B9A;&#x4E49;&#x5C5E;&#x6027; name = &apos;&apos; age = 0 height = 0 weight = 0# &#x5B9A;&#x4E49;&#x884C;&#x4E3A;&#xFF0C;&#x6CE8;&#x610F;&#x6210;&#x5458;&#x65B9;&#x6CD5;&#x7684;&#x53C2;&#x6570;&#x4E00;&#x822C;&#x4EE5;self&#x5F53;&#x4F5C;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;(&#x53EF;&#x4EE5;&#x4E3A;&#x5176;&#x4ED6;&#x7684;&#x5355;&#x8BCD;&#xFF0C;&#x4F46;&#x662F;&#x51E0;&#x4E4E;&#x90FD;&#x4F7F;&#x7528;self)&#xFF0C;&#x5176;&#x4E2D;self&#x5C31;&#x4EE3;&#x8868;&#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#xFF0C;&#x54EA;&#x4E2A;&#x5BF9;&#x8C61;&#x8C03;&#x7528;&#x65B9;&#x6CD5;&#x54EA;&#x4E2A;&#x5BF9;&#x8C61;&#x5C31;&#x662F;self&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;C/C++&#x4E2D;&#x7684;this&#x6307;&#x9488;&#x3002; def eat(self, food): print(&apos;eat&apos; + food) def sleep(self): print(&apos;I need sleep&apos;) Python&#x5B9E;&#x4F8B;&#x5316;&#x5BF9;&#x8C61;12345678910111213141516class Person(object): name = &apos;&apos; age = 0 height = 0 weight = 0 def eat(self, food): print(&apos;eat&apos; + food) def sleep(self): print(&apos;I need sleep&apos;)# &#x7C7B;&#x4F3C;&#x4E8E;&#x5973;&#x5A32;&#x9020;&#x4EBA;&#x4E00;&#x6837;&#xFF0C;&#x6709;&#x4E86;&#x4EBA;&#x578B;&#x6A21;&#x5177;&#xFF0C;&#x5973;&#x5A32;&#x53EF;&#x4EE5;&#x6309;&#x7167;&#x6A21;&#x5177;&#x521B;&#x5EFA;&#x4EBA;&#x7C7B;&#x5BF9;&#x8C61;# &#x5BF9;&#x8C61;&#x540D; = &#x7C7B;&#x540D;(&#x53C2;&#x6570;&#x5217;&#x8868;) &#x7528;&#x7C7B;&#x540D;&#x5B9E;&#x4F8B;&#x5316;&#x5BF9;&#x8C61;&#xFF0C;&#x6CE8;&#x610F;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#xFF0C;&#x4E5F;&#x4E0D;&#x80FD;&#x7701;&#x7565;&#x62EC;&#x53F7;&#x3002;per = Person()print(per) Python&#x8BBF;&#x95EE;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;1234567891011121314151617class Person(object): name = &apos;&apos; age = 0 height = 0 weight = 0 def eat(self, food): print(&apos;eat &apos; + food) def sleep(self): print(&apos;I need sleep&apos;)# &#x5BF9;&#x8C61;&#x540D;.&#x5C5E;&#x6027;&#x540D; &#x8BBF;&#x95EE;&#x8BE5;&#x5BF9;&#x8C61;&#x7684;&#x67D0;&#x4E00;&#x4E2A;&#x5C5E;&#x6027;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x5BF9;&#x8BE5;&#x5BF9;&#x8C61;&#x7684;&#x67D0;&#x4E00;&#x5C5E;&#x6027;&#x8D4B;&#x503C;per = Person()print(per.name + &apos;&#x7684;&#x5E74;&#x9F84;&#x4E3A;&#xFF1A;&apos; + str(per.age))per.name, per.age = &apos;&#x5F20;&#x4E09;&apos;, 18print(per.name + &apos;&#x7684;&#x5E74;&#x9F84;&#x4E3A;&#xFF1A;&apos; + str(per.age)) Python&#x8BBF;&#x95EE;&#x5BF9;&#x8C61;&#x65B9;&#x6CD5;12345678910111213141516class Person(object): name = &apos;&apos; age = 0 height = 0 weight = 0 def eat(self, food): print(&apos;eat &apos; + food) def sleep(self): print(&apos;I need sleep&apos;)# &#x5BF9;&#x8C61;&#x540D;.&#x65B9;&#x6CD5;&#x540D;(&#x53C2;&#x6570;&#x5217;&#x8868;) &#x8BBF;&#x95EE;&#x8BE5;&#x5BF9;&#x8C61;&#x7684;&#x67D0;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x6CE8;&#x610F;self&#x53C2;&#x6570;&#x4E0D;&#x9700;&#x8981;&#x4F20;&#x503C;per = Person()per.eat(&apos;apple&apos;)per.sleep() Python&#x7C7B;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;1234567891011121314151617# def __init__(self, &#x53C2;&#x6570;&#x5217;&#x8868;): &#x6784;&#x9020;&#x51FD;&#x6570;&#x5728;&#x4F7F;&#x7528;&#x7C7B;&#x521B;&#x5EFA;&#x5BF9;&#x8C61;&#x7684;&#x65F6;&#x5019;&#x81EA;&#x52A8;&#x8C03;&#x7528;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x663E;&#x793A;&#x7684;&#x5199;&#x51FA;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x9ED8;&#x8BA4;&#x81EA;&#x52A8;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x7A7A;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;class Person(object): def __init__(self, name, age, height, weight): self.name = name self.age = age self.height = height self.weight = weight def eat(self, food): print(&apos;eat &apos; + food) def sleep(self): print(&apos;I need sleep&apos;)# &#x7C7B;&#x540D;&#x5B9E;&#x4F8B;&#x5316;&#x5BF9;&#x8C61;&#x65F6;&#x7ED9;&#x5BF9;&#x8C61;&#x7684;&#x5C5E;&#x6027;&#x8D4B;&#x503C;per = Person(&apos;&#x674E;&#x56DB;&apos;, 20, 180, 140)print(per.name + &apos;&#x7684;&#x5E74;&#x9F84;&#x4E3A;&#xFF1A;&apos; + str(per.age)) Python&#x7C7B;&#x7684;&#x6790;&#x6784;&#x51FD;&#x6570;1234567891011121314# def __del__(self): &#x6790;&#x6784;&#x51FD;&#x6570;&#x5728;&#x91CA;&#x653E;&#x5BF9;&#x8C61;&#x7684;&#x65F6;&#x5019;&#x81EA;&#x52A8;&#x8C03;&#x7528;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x663E;&#x793A;&#x7684;&#x5199;&#x51FA;&#x6790;&#x6784;&#x51FD;&#x6570;&#xFF0C;&#x9ED8;&#x8BA4;&#x81EA;&#x52A8;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x7A7A;&#x7684;&#x6790;&#x6784;&#x51FD;&#x6570;class Person(object): def __del__(self): print(&apos;Destroy the object&apos;) def eat(self, food): print(&apos;eat &apos; + food) def sleep(self): print(&apos;I need sleep&apos;)# &#x7C7B;&#x540D;&#x5B9E;&#x4F8B;&#x5316;&#x5BF9;&#x8C61;&#x65F6;&#x7ED9;&#x5BF9;&#x8C61;&#x7684;&#x5C5E;&#x6027;&#x8D4B;&#x503C;per = Person()del per Python&#x4E2D;&#x7C7B;&#x5C5E;&#x6027;&#x548C;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;12345678910111213141516171819class Person(object): talent = None def __init__(self, name, age): self.name = name self.age = age# &#x7C7B;&#x5C5E;&#x6027;&#x662F;&#x5199;&#x5728;&#x7C7B;&#x5185;&#x90E8;&#x7684;&#x5C5E;&#x6027;&#xFF0C;&#x800C;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;&#x662F;&#x7528;self&#x5B9A;&#x4E49;&#x6216;&#x8005;&#x5728;&#x5916;&#x90E8;&#x52A8;&#x6001;&#x5B9A;&#x4E49;&#x7684;&#x3002;# &#x5BF9;&#x8C61;&#x5C5E;&#x6027;&#x7684;&#x4F18;&#x5148;&#x7EA7;&#x9AD8;&#x4E8E;&#x7C7B;&#x5C5E;&#x6027;&#xFF0C;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x6CA1;&#x6709;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;&#xFF0C;&#x5219;&#x4F7F;&#x7528;&#x5176;&#x7C7B;&#x5C5E;&#x6027;&#xFF0C;&#x5982;&#x679C;&#x6DFB;&#x52A0;&#x4E86;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;&#xFF0C;&#x5219;&#x4F7F;&#x7528;&#x5176;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;&#x3002;# &#x5728;&#x6B64;&#x4EE3;&#x7801;&#x4E2D;talent&#x5C5E;&#x4E8E;&#x7C7B;&#x5C5E;&#x6027;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x7C7B;&#x540D;.&#x5C5E;&#x6027;&#x8C03;&#x7528;&#xFF0C;name&#x548C;age&#x5C5E;&#x4E8E;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;&#xFF0C;&#x901A;&#x8FC7;&#x5BF9;&#x8C61;&#x540D;.&#x5C5E;&#x6027;&#x8C03;&#x7528;&#x3002;# &#x6CE8;&#x610F;&#xFF1A;&#x5C3D;&#x91CF;&#x4E0D;&#x8981;&#x5C06;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;&#x4E0E;&#x7C7B;&#x5C5E;&#x6027;&#x540C;&#x540D;&#xFF0C;&#x56E0;&#x4E3A;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;&#x4F1A;&#x5C4F;&#x853D;&#x7C7B;&#x5C5E;&#x6027;&#xFF0C;&#x5F53;&#x5220;&#x9664;&#x5BF9;&#x8C61;&#x5C5E;&#x6027;&#x540E;&#xFF0C;&#x53C8;&#x80FD;&#x4F7F;&#x7528;&#x7C7B;&#x5C5E;&#x6027;&#x4E86;&#x3002;per = Person(&apos;&#x5F20;&#x4E09;&apos;, 18)print(Person.talent)print(per.talent)per.talent = &apos;Python&apos;print(Person.talent)print(per.talent)# &#x7C7B;&#x65B9;&#x6CD5;&#x548C;&#x5BF9;&#x8C61;&#x65B9;&#x6CD5;&#x7C7B;&#x4F3C;&#xFF0C;&#x7C7B;&#x65B9;&#x6CD5;&#x662F;&#x5728;&#x7C7B;&#x5185;&#x90E8;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x800C;&#x5BF9;&#x8C61;&#x65B9;&#x5F0F;&#x662F;&#x5728;&#x5916;&#x90E8;&#x52A8;&#x6001;&#x5B9A;&#x4E49;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x4E00;&#x822C;&#x4E0D;&#x5E38;&#x7528;&#xFF0C;&#x4F5C;&#x4E3A;&#x4E86;&#x89E3;&#x5373;&#x53EF;&#x3002; Python&#x7C7B;&#x6253;&#x5370;&#x51FD;&#x6570;12345678910111213# def __str__(self): &#x5728;&#x8C03;&#x7528;print&#x6253;&#x5370;&#x5BF9;&#x8C61;&#x65F6;&#x81EA;&#x52A8;&#x8C03;&#x7528;&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x7ED9;&#x7528;&#x6237;&#x4F7F;&#x7528;&#x7684;&#x63CF;&#x8FF0;&#x5BF9;&#x8C61;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x663E;&#x793A;&#x7684;&#x5199;&#x51FA;&#xFF0C;&#x9ED8;&#x8BA4;&#x8FD4;&#x56DE;&#x7C7B;&#x7684;&#x540D;&#x79F0;&#x548C;&#x6240;&#x5904;&#x7684;&#x5185;&#x5B58;&#x5730;&#x5740;class Person(object): def __init__(self, name, age, height, weight): self.name = name self.age = age self.height = height self.weight = weight def __str__(self): return &quot;&#x59D3;&#x540D;&#xFF1A;%s &#x5E74;&#x9F84;&#xFF1A;%d&#xFF0C;&#x8EAB;&#x9AD8;&#xFF1A;%.1f&#xFF0C;&#x4F53;&#x91CD;&#xFF1A;%.1f&quot; %(self.name, self.age, self.height, self.weight)per = Person(&apos;&#x738B;&#x4E94;&apos;, 21, 178, 160)print(per) Python&#x52A8;&#x6001;&#x8BED;&#x8A00;12345678910111213141516171819202122232425class Person(object): def __init__(self, name, age, height, weight): self.name = name self.age = age self.height = height self.weight = weightper = Person(&apos;&#x8D75;&#x516D;&apos;, 22, 186, 170)print(per.name + &apos;&#x7684;&#x5B58;&#x6B3E;&#x4E3A;&#xFF1A;&apos; + str(per.money))# per&#x672C;&#x6765;&#x6CA1;&#x6709;money&#x5C5E;&#x6027;&#xFF0C;&#x53EF;&#x4EE5;&#x52A8;&#x6001;&#x6DFB;&#x52A0;money&#x5C5E;&#x6027;per.money = 10000print(per.name + &apos;&#x7684;&#x5B58;&#x6B3E;&#x4E3A;&#xFF1A;&apos; + str(per.money))# &#x8FD8;&#x53EF;&#x4EE5;&#x52A8;&#x6001;&#x6DFB;&#x52A0;&#x65B9;&#x6CD5;&#xFF0C;&#x9700;&#x8981;&#x4ECE;types&#x4E2D;&#x5BFC;&#x5165;Method&#x7C7B;from types import MethodType def say(self): print(&apos;my name is &apos; + self.name)per.say()# &#x5BF9;&#x8C61;&#x540D;.&#x65B9;&#x6CD5;&#x540D; = MethodType(&#x6DFB;&#x52A0;&#x7684;&#x51FD;&#x6570;&#x540D;, &#x5BF9;&#x8C61;&#x540D;)per.say = MethodType(say, per)per.say() Python&#x4E2D;&#x52A8;&#x6001;&#x6DFB;&#x52A0;&#x9650;&#x5236;12345678910111213141516171819from types import MethodType # &#x901A;&#x8FC7;&#x5B9A;&#x4E49;__slots__ = (&#x6210;&#x5458;&#x5C5E;&#x6027;&#x6216;&#x8005;&#x6210;&#x5458;&#x65B9;&#x6CD5;&#x540D;) &#x4F7F;&#x5BF9;&#x8C61;&#x4E2D;&#x7684;&#x6210;&#x5458;&#x5FC5;&#x987B;&#x5B58;&#x5728;&#x4E8E;&#x5143;&#x7EC4;&#x4E4B;&#x4E2D;&#xFF0C;&#x53EF;&#x4EE5;&#x9650;&#x5236;&#x5BF9;&#x8C61;&#x968F;&#x610F;&#x52A8;&#x6001;&#x6DFB;&#x52A0;&#x6210;&#x5458;class Person(object): __slots__ = (&apos;name&apos;, &apos;age&apos;, &apos;money&apos;) def __init__(self, name, age): self.name = name self.age = ageper = Person(&apos;&#x8D75;&#x516D;&apos;, 22)per.money = 10000print(per.name + &apos;&#x7684;&#x5B58;&#x6B3E;&#x4E3A;&#xFF1A;&apos; + str(per.money))per.weight = 160def say(self): print(&apos;my name is &apos; + self.name)per.say = MethodType(say, per) Python&#x7C7B;&#x4E2D;&#x7684;&#x5171;&#x6709;&#x548C;&#x79C1;&#x6709;1234567891011121314151617181920212223# __&#x5C5E;&#x6027;&#x540D;/&#x51FD;&#x6570;&#x540D; &#x5982;&#x679C;&#x60F3;&#x8BA9;&#x5185;&#x90E8;&#x6210;&#x5458;&#x4E0D;&#x88AB;&#x5916;&#x90E8;&#x76F4;&#x63A5;&#x8BBF;&#x95EE;&#xFF0C;&#x5728;&#x6210;&#x5458;&#x5C5E;&#x6027;&#x6216;&#x65B9;&#x6CD5;&#x524D;&#x52A0;__(&#x4E24;&#x4E2A;&#x4E0B;&#x5212;&#x7EBF;)&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x5185;&#x90E8;&#x662F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x7684;# &#x5982;&#x679C;&#x60F3;&#x4FEE;&#x6539;&#x5176;&#x503C;&#x53EA;&#x80FD;&#x901A;&#x8FC7;&#x81EA;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x5B9E;&#x73B0;&#x5BF9;&#x67D0;&#x4E9B;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x8FDB;&#x884C;&#x4FEE;&#x6539;&#x64CD;&#x4F5C;&#xFF0C;&#x8FD9;&#x6837;&#x4E5F;&#x8FBE;&#x5230;&#x4E86;&#x4E00;&#x79CD;&#x4FDD;&#x62A4;&#x4F5C;&#x7528;class Person(object): def __init__(self, name, age, height, weight): self.name = name self.age = age self.height = height self.__weight = weight def set_weight(self, weight): self.__weight = weight def enquire(self): print(&apos;&#x4F53;&#x91CD;&#x4E3A;&#xFF1A;&apos; + str(self.__weight))per = Person(&apos;&#x738B;&#x4E94;&apos;, 21, 178, 160)per.enquire()print(per.__weight)per.set_weight(150)per.enquire()# &#x539F;&#x56E0;&#x662F;Python&#x89E3;&#x91CA;&#x5668;&#x5C06;__&#x6210;&#x5458;&#x53D8;&#x6210;&#x4E86;_(&#x4E00;&#x4E2A;&#x4E0B;&#x5212;&#x7EBF;)&#x7C7B;&#x540D;__(&#x4E24;&#x4E2A;&#x4E0B;&#x5212;&#x7EBF;)&#x6210;&#x5458;&#x540D;(&#x5373;&#x5728;&#x6B64;&#x5C06;__weight&#x6539;&#x6210;&#x4E86;_Person__weight)&#xFF0C;&#x56E0;&#x6B64;&#x4E0D;&#x662F;&#x7EDD;&#x5BF9;&#x79C1;&#x6709;&#x7684;print(per._Person__weight) Python&#x7C7B;&#x4E2D;&#x7684;@property&#x88C5;&#x9970;&#x5668;1234567891011121314151617181920212223242526272829303132333435# &#x5BF9;&#x79C1;&#x6709;&#x6210;&#x5458;&#x60F3;&#x8981;&#x4FBF;&#x6377;&#x7684;&#x8BBF;&#x95EE;&#x548C;&#x4FEE;&#x6539;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;@property&#x88C5;&#x9970;&#x5668;&#xFF0C;&#x76F8;&#x5F53;&#x4E8E;&#x8C03;&#x7528;&#x4E86;get&#x548C;set&#x65B9;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x8BA9;&#x53D7;&#x9650;&#x5236;&#x7684;&#x6210;&#x5458;&#x4E5F;&#x80FD;&#x591F;&#x76F4;&#x63A5;&#x4F7F;&#x7528;.&#x8BED;&#x6CD5;# @property # def &#x53D8;&#x91CF;&#x540D;(self):# return self.__&#x53D8;&#x91CF;&#x540D;# @&#x53D8;&#x91CF;&#x540D;.setter# def &#x53D8;&#x91CF;&#x540D;(self, &#x53D8;&#x91CF;&#x540D;):# xxx# &#x4EE5;&#x4E0A;&#x53D8;&#x91CF;&#x540D;&#x90FD;&#x662F;&#x672A;&#x52A0;&#x4E0B;&#x5212;&#x7EBF;&#x7684;&#x53D8;&#x91CF;&#x540D;&#xFF0C;@property&#x4E0B;&#x9762;&#x7684;&#x5185;&#x5BB9;&#x76F8;&#x5F53;&#x4E8E;get&#x65B9;&#x6CD5;&#xFF0C;@&#x53D8;&#x91CF;&#x540D;.setter&#x4E0B;&#x9762;&#x7684;&#x5185;&#x5BB9;&#x76F8;&#x5F53;&#x4E8E;set&#x65B9;&#x6CD5;&#x3002;class Person(object): def __init__(self, name, age, height, weight): self.name = name self.age = age self.height = height self.__weight = weight def set_weight(self, weight): self.__weight = weight @property def weight(self): return self.__weight @weight.setter def weight(self, weight): self.__weight = weightper = Person(&apos;&#x738B;&#x4E94;&apos;, 21, 178, 160)# &#x8C03;&#x7528;&#x65F6;&#x4E5F;&#x662F;&#x76F4;&#x63A5;&#x8C03;&#x7528;&#x5BF9;&#x8C61;&#x540D;.&#x539F;&#x540D;&#x5373;&#x53EF;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x52A0;&#x53CC;&#x4E0B;&#x5212;&#x7EBF;__print(per.weight)per.weight = 150print(per.weight)# &#x539F;&#x56E0;&#x662F;Python&#x89E3;&#x91CA;&#x5668;&#x5C06;__&#x6210;&#x5458;&#x53D8;&#x6210;&#x4E86;_(&#x4E00;&#x4E2A;&#x4E0B;&#x5212;&#x7EBF;)&#x7C7B;&#x540D;__(&#x4E24;&#x4E2A;&#x4E0B;&#x5212;&#x7EBF;)&#x6210;&#x5458;&#x540D;(&#x5373;&#x5728;&#x6B64;&#x5C06;__weight&#x6539;&#x6210;&#x4E86;_Person__weight)&#xFF0C;&#x56E0;&#x6B64;&#x4E0D;&#x662F;&#x7EDD;&#x5BF9;&#x79C1;&#x6709;&#x7684;print(per._Person__weight) Python&#x7C7B;&#x7684;&#x5355;&#x7EE7;&#x627F;1234567891011121314151617181920212223242526class Person(object): def __init__(self, name, age, height, weight): self.name = name self.age = age self.height = height self.weight = weight def eat(self, food): print(&apos;eat &apos; + food) def sleep(self): print(&apos;I need sleep&apos;)# &#x5BF9;&#x4E8E;&#x4E16;&#x95F4;&#x4E07;&#x7269;&#xFF0C;&#x5927;&#x591A;&#x6570;&#x90FD;&#x6709;&#x8FD9;&#x4E00;&#x822C;&#x548C;&#x7279;&#x6B8A;&#x7684;&#x5173;&#x7CFB;&#xFF0C;&#x5982;&#x4EBA;&#x548C;&#x7A0B;&#x5E8F;&#x5458;&#x4E4B;&#x95F4;&#x7684;&#x5173;&#x7CFB;&#xFF0C;&#x7A0B;&#x5E8F;&#x5458;&#x7EE7;&#x627F;&#x4E86;&#x4EBA;&#x7684;&#x6240;&#x6709;&#x7279;&#x70B9;&#xFF0C;&#x4F46;&#x662F;&#x53C8;&#x6709;&#x4E00;&#x4E9B;&#x7279;&#x6B8A;&#x7684;&#x7279;&#x70B9;&#x3002;&#x5C06;&#x4EBA;&#x8FD9;&#x4E2A;&#x7C7B;&#x522B;&#x79F0;&#x4E3A;&#x5B50;&#x7C7B;(&#x57FA;&#x7C7B;)&#xFF0C;&#x5C06;&#x7A0B;&#x5E8F;&#x5458;&#x8FD9;&#x4E2A;&#x7C7B;&#x522B;&#x79F0;&#x4E3A;&#x7236;&#x7C7B;(&#x8D85;&#x7C7B;)&#x3002;# &#x6240;&#x6709;&#x7684;&#x7C7B;&#x90FD;&#x662F;&#x7EE7;&#x627F;&#x4E8E;object&#x7C7B;&#xFF0C;&#x7EE7;&#x627F;&#x53EF;&#x4EE5;&#x5927;&#x5927;&#x7B80;&#x5316;&#x4EE3;&#x7801;&#xFF0C;&#x63D0;&#x9AD8;&#x4EE3;&#x7801;&#x7684;&#x5065;&#x58EE;&#x6027;&#x548C;&#x5B89;&#x5168;&#x6027;&#x3002;# class &#x7C7B;&#x540D;(&#x7236;&#x7C7B;): &#x5B50;&#x7C7B;&#x7EE7;&#x627F;&#x7236;&#x7C7B;&#xFF0C;&#x9700;&#x8981;&#x5728;&#x7C7B;&#x540D;&#x540E;&#x9762;&#x7684;&#x62EC;&#x53F7;&#x4E2D;&#x5199;&#x5165;&#x7236;&#x7C7B;&#x540D;&#xFF0C;&#x7EE7;&#x627F;&#x65F6;&#x8C03;&#x7528;&#x7236;&#x7C7B;&#x7684;__init__&#x53EA;&#x9700;&#x8981;&#x5199;super(&#x5B50;&#x7C7B;&#x540D;, self).__init__(&#x53C2;&#x6570;&#x5217;&#x8868;)&#x5373;&#x53EF;&#xFF0C;&#x53C2;&#x6570;&#x5217;&#x8868;&#x4E2D;&#x4E0D;&#x9700;&#x8981;&#x5199;self# &#x6CE8;&#x610F;&#x7236;&#x7C7B;&#x7684;&#x79C1;&#x6709;&#x6210;&#x5458;&#x5B50;&#x7C7B;&#x53EF;&#x4EE5;&#x7EE7;&#x627F;&#x8FC7;&#x6765;&#xFF0C;&#x4F46;&#x662F;&#x65E0;&#x6CD5;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#xFF0C;&#x53EA;&#x80FD;&#x901A;&#x8FC7;&#x7236;&#x7C7B;&#x7684;&#x81EA;&#x5B9A;&#x4E49;&#x51FD;&#x6570;&#x8BBF;&#x95EE;&#x3002;# &#x5B50;&#x7C7B;&#x7279;&#x6709;&#x7684;&#x6210;&#x5458;&#x548C;&#x4E4B;&#x524D;&#x5B9A;&#x4E49;&#x666E;&#x901A;&#x7C7B;&#x65F6;&#x76F8;&#x540C;class Programmer(Person): def __init__(self, name, age, height, weight, language): super(Programmer, self).__init__(name, age, height, weight) self.language = languagepro = Programmer(&apos;&#x94B1;&#x4E03;&apos;, 23, 181, 135, &apos;Python&apos;)pro.eat(&apos;watermelon&apos;)print(pro.language) Python&#x7C7B;&#x7684;&#x591A;&#x7EE7;&#x627F;12345678910111213141516171819202122232425262728293031323334353637383940class Father(object): def __init__(self, name, age, talent): self.name = name self.age = age self.talent = talent def play(self): print(&apos;play computer games&apos;) def sleep(self): print(&apos;Father need sleep&apos;)class Mother(object): def __init__(self, name, age, beauty): self.name = name self.age = age self.beauty = beauty def shopping(self): print(&apos;go shopping&apos;) def sleep(self): print(&apos;Mother need sleep&apos;)# &#x9664;&#x4E86;&#x5355;&#x7EE7;&#x627F;&#x5916;&#x4E5F;&#x6709;&#x591A;&#x7EE7;&#x627F;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x6BD4;&#x5982;&#x9057;&#x4F20;&#x5C31;&#x662F;&#x4E00;&#x79CD;&#x5178;&#x578B;&#x7684;&#x591A;&#x7EE7;&#x627F;&#xFF0C;&#x5B69;&#x5B50;&#x8981;&#x7EE7;&#x627F;&#x7236;&#x4EB2;&#x548C;&#x6BCD;&#x4EB2;&#x7684;&#x7279;&#x70B9;# class &#x7C7B;&#x540D;(&#x7236;&#x7C7B;): &#x5B50;&#x7C7B;&#x7EE7;&#x627F;&#x7236;&#x7C7B;&#xFF0C;&#x5982;&#x679C;&#x9700;&#x8981;&#x591A;&#x7EE7;&#x627F;&#xFF0C;&#x5219;&#x5728;&#x7C7B;&#x540D;&#x540E;&#x9762;&#x7684;&#x62EC;&#x53F7;&#x4E2D;&#x5199;&#x5165;&#x591A;&#x4E2A;&#x7236;&#x7C7B;&#x540D;# &#x7EE7;&#x627F;&#x65F6;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E2D;&#x8C03;&#x7528;&#x7236;&#x7C7B;&#x7684;__init__&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x5199;&#x7236;&#x7C7B;&#x540D;.__init__(self, &#x53C2;&#x6570;&#x5217;&#x8868;)&#x5373;&#x53EF;&#x4F7F;&#x7528;&#xFF0C;&#x6CE8;&#x610F;&#x8981;&#x5199;self# &#x6CE8;&#x610F;&#x7236;&#x7C7B;&#x4E2D;&#x65B9;&#x6CD5;&#x540D;&#x76F8;&#x540C;&#xFF0C;&#x9ED8;&#x8BA4;&#x8C03;&#x7528;&#x7684;&#x662F;&#x5728;&#x62EC;&#x53F7;&#x4E2D;&#x6392;&#x5728;&#x524D;&#x9762;&#x7684;&#x7236;&#x7C7B;&#x4E2D;&#x7684;&#x65B9;&#x6CD5;class Child(Father, Mother): def __init__(self, name, age, talent, beauty): Father.__init__(self, name, age, talent) Mother.__init__(self, name, age, beauty)chi = Child(&apos;&#x8F9B;&#x5DF4;&apos;, 22, &apos;Python&apos;, 99)print(chi.name + &apos;&#x7684;&#x5E74;&#x9F84;&#x4E3A;&#xFF1A;&apos; + str(chi.age))print(&apos;&#x6211;&#x7684;&#x624D;&#x80FD;&#x662F;&#xFF1A;&apos; + chi.talent)print(&apos;&#x6211;&#x7684;&#x989C;&#x503C;&#x662F;&#xFF1A;&apos; + str(chi.beauty))chi.play()chi.shopping()chi.sleep() Python&#x7C7B;&#x7684;&#x591A;&#x6001;12345678910111213141516171819202122232425262728class Animal(object): def __init__(self, name): self.name = name def eat(self, food): print(self.name + &apos; eat &apos; + food)class Cat(Animal): def __init__(self, name): super(Cat, self).__init__(name)class Mouse(Animal): def __init__(self, name): super(Mouse, self).__init__(name)class Person(object): def feed(self, animal, food): animal.eat(food)# &#x5BF9;&#x4E8E;&#x7EE7;&#x627F;&#x81EA;&#x540C;&#x4E00;&#x7C7B;&#x7684;&#x591A;&#x4E2A;&#x7C7B;&#x5177;&#x6709;&#x591A;&#x6001;&#x7684;&#x6027;&#x8D28;&#xFF0C;&#x5373;&#x5B50;&#x7C7B;&#x6709;&#x591A;&#x79CD;&#x8868;&#x73B0;&#x5F62;&#x6001;# &#x6B64;&#x4EE3;&#x7801;&#x4E2D;&#x52A8;&#x7269;&#x7C7B;&#x5C31;&#x662F;&#x7236;&#x7C7B;&#xFF0C;&#x732B;&#x7C7B;&#x548C;&#x8001;&#x9F20;&#x7C7B;&#x90FD;&#x7EE7;&#x627F;&#x81EA;&#x52A8;&#x7269;&#x7C7B;&#xFF0C;&#x6240;&#x4EE5;&#x732B;&#x7C7B;&#x548C;&#x9F20;&#x7C7B;&#x90FD;&#x6709;&#x7236;&#x7C7B;&#x7684;&#x65B9;&#x6CD5;# &#x56E0;&#x6B64;&#x4F20;&#x5165;&#x4E0D;&#x540C;&#x7684;&#x5B50;&#x7C7B;&#x5BF9;&#x8C61;&#x5177;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x8868;&#x73B0;&#x5F62;&#x6001;per = Person()tom = Cat(&apos;Tom&apos;)jerry = Mouse(&apos;Jerry&apos;)per.feed(tom, &apos;fish&apos;)per.feed(jerry, &apos;rice&apos;) Python&#x8FD0;&#x7B97;&#x7B26;&#x91CD;&#x8F7D;$$ \begin{array}{|c|c|c|} &#x7279;&#x6B8A;&#x51FD;&#x6570; &amp; &#x63CF;&#x8FF0; &amp; &#x8C03;&#x7528;&#x65B9;&#x6CD5; \ __init__ &amp; &#x6784;&#x9020;&#x51FD;&#x6570; &amp; X = Class(args) \ __del__ &amp; &#x6790;&#x6784;&#x51FD;&#x6570; &amp; del X \ __call__ &amp; &#x51FD;&#x6570;&#x8C03;&#x7528; &amp; X(*args) \ __getitem__ &amp; &#x7D22;&#x5F15;&#x8FD0;&#x7B97; &amp; X[key] \ __setitem__ &amp; &#x7D22;&#x5F15;&#x8D4B;&#x503C; &amp; X[key] = Y \ __len__ &amp; &#x83B7;&#x5F97;&#x957F;&#x5EA6; &amp; len(X) \ __add/sub/mul/truediv__ &amp; &#x52A0;/&#x51CF;/&#x4E58;/&#x9664;&#x8FD0;&#x7B97;&#x7B26; &amp; X +/-/\times/\div Y \ __and/or__ &amp; &#x4E0E;&#x6216;&#x8FD0;&#x7B97;&#x7B26; &amp; X \&amp; / | Y \ __lt/gt/eq/ne__ &amp; &#x5C0F;&#x4E8E;/&#x5927;&#x4E8E;/&#x7B49;&#x4E8E;/&#x4E0D;&#x7B49;&#x4E8E; &amp; X&lt;/&gt;/==/!=Y \ \end{array} $$123456789101112131415161718192021# &#x4E3A;&#x4E86;&#x4F7F;&#x8FD0;&#x7B97;&#x65B9;&#x4FBF;&#xFF0C;&#x6709;&#x65F6;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x8FD0;&#x7B97;&#x7B26;&#x91CD;&#x8F7D;&#xFF0C;&#x5178;&#x578B;&#x7684;&#x5C31;&#x662F;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x76F8;&#x52A0;&#xFF0C;1 + 2 = 3&#xFF0C;&#x4F46;&#x662F;&#x5B57;&#x7B26;&#x4E32;&#x76F8;&#x52A0;&#x5C31;&#x662F;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x8FDE;&#x63A5;&#x3002;# &#x8BF4;&#x660E;&#x5BF9;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x52A0;&#x6CD5;&#x8FDB;&#x884C;&#x4E86;&#x91CD;&#x65B0;&#x5B9A;&#x4E49;&#xFF0C;&#x4F7F;&#x5176;&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x76F8;&#x52A0;&#x64CD;&#x4F5C;&#x3002;&#x540C;&#x7406;&#xFF0C;&#x5BF9;&#x81EA;&#x5DF1;&#x5199;&#x7684;&#x7C7B;&#x4E5F;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x8FD0;&#x7B97;&#x7B26;&#x91CD;&#x8F7D;&#xFF0C;&#x4F7F;&#x4E24;&#x4E2A;&#x7C7B;&#x53EF;&#x4EE5;&#x505A;&#x8FD0;&#x7B97;&#x3002;# &#x8981;&#x91CD;&#x8F7D;&#x4EC0;&#x4E48;&#x64CD;&#x4F5C;&#x5C31;&#x67E5;&#x64CD;&#x4F5C;&#x5BF9;&#x5E94;&#x7684;&#x7279;&#x6B8A;&#x51FD;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x5176;&#x91CD;&#x8F7D;&#x5373;&#x53EF;&#x3002;class Person(object): def __init__(self, money): self.money = money def __add__(self, other): return Person(self.money + other.money) def __str__(self): return &apos;money&#xFF1A;&apos; + str(self.money)# &#x6B64;&#x4EE3;&#x7801;&#x91CD;&#x8F7D;&#x4E86;&#x52A0;&#x6CD5;&#x8FD0;&#x7B97;&#x7B26;&#x548C;&#x6253;&#x5370;&#x64CD;&#x4F5C;per1 = Person(100)print(per1)per2 = Person(200)print(per2)per3 = per1 + per2print(per3) Object-Oriented&#x5C0F;&#x7ED3;&#x2003;&#x2003;Object-Oriented&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x8BED;&#x8A00;&#x4E2D;&#x4E00;&#x79CD;&#x91CD;&#x8981;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x5B83;&#x7684;&#x51FA;&#x73B0;&#x5C06;&#x7A0B;&#x5E8F;&#x5458;&#x4ECE;&#x4E00;&#x4E2A;&#x6267;&#x884C;&#x8005;&#x53D8;&#x6210;&#x4E86;&#x4E00;&#x4E2A;&#x7BA1;&#x7406;&#x8005;&#xFF0C;&#x7A0B;&#x5E8F;&#x5458;&#x5728;&#x4F7F;&#x7528;&#x65F6;&#x53EA;&#x9700;&#x8981;&#x77E5;&#x9053;&#x80FD;&#x505A;&#x4EC0;&#x4E48;&#xFF0C;&#x800C;&#x4E0D;&#x9700;&#x8981;&#x77E5;&#x9053;&#x5177;&#x4F53;&#x5982;&#x4F55;&#x5B9E;&#x73B0;&#xFF0C;&#x800C;&#x4E14;&#x6BCF;&#x6B21;&#x521B;&#x5EFA;&#x5BF9;&#x8C61;&#x65F6;&#x53EA;&#x9700;&#x8981;&#x4E00;&#x884C;&#x4EE3;&#x7801;&#xFF0C;&#x8C03;&#x7528;&#x67D0;&#x4E00;&#x51FD;&#x6570;&#x65F6;&#x4E5F;&#x4E0D;&#x9700;&#x8981;&#x5173;&#x5FC3;&#x5185;&#x90E8;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x5927;&#x5927;&#x51CF;&#x5C11;&#x4E86;&#x9605;&#x8BFB;&#x4EE3;&#x7801;&#x7684;&#x65F6;&#x95F4;&#x548C;&#x5185;&#x5B58;&#x7684;&#x5360;&#x7528;&#x60C5;&#x51B5;&#x3002;&#x56E0;&#x6B64;&#x9762;&#x5411;&#x8FC7;&#x7A0B;&#x662F;&#x7A0B;&#x5E8F;&#x5458;&#x7684;&#x5FC5;&#x7ECF;&#x4E4B;&#x8DEF;&#xFF0C;&#x9700;&#x8981;&#x719F;&#x7EC3;&#x7684;&#x638C;&#x63E1;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>语言学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Import(导入模块)]]></title>
    <url>%2F2019%2F09%2F17%2Fpython_import%2F</url>
    <content type="text"><![CDATA[Import&#x4ECB;&#x7ECD;&#x2003;&#x2003;Python&#x4E2D;&#x4F7F;&#x7528;Import&#x5BFC;&#x5165;&#x6A21;&#x5757;&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;C/C++&#x4E2D;&#x7684;include&#xFF0C;&#x4F46;&#x662F;&#x4F7F;&#x7528;&#x8D77;&#x6765;&#x66F4;&#x52A0;&#x7075;&#x6D3B;&#x548C;&#x65B9;&#x4FBF;&#xFF0C;&#x53EF;&#x4EE5;&#x5BFC;&#x5165;&#x6574;&#x4E2A;&#x6A21;&#x5757;&#x6216;&#x8005;&#x5BFC;&#x5165;&#x6A21;&#x5757;&#x7684;&#x67D0;&#x4E00;&#x90E8;&#x5206;&#x3002; Import&#x5E94;&#x7528;&#x5BFC;&#x5165;&#x8DEF;&#x5F84;1234import sys# sys.path &#x67E5;&#x8BE2;&#x5BFC;&#x5305;&#x65F6;&#x7684;&#x8DEF;&#x5F84;&#x987A;&#x5E8F;&#xFF0C;&#x5F53;&#x6709;&#x76F8;&#x540C;&#x540D;&#x5B57;&#x7684;&#x5305;&#x51FA;&#x73B0;&#x65F6;&#xFF0C;&#x5219;&#x6309;&#x7167;&#x987A;&#x5E8F;&#x67E5;&#x8BE2;&#x662F;&#x5426;&#x5728;&#x6B64;&#x8DEF;&#x5F84;&#xFF0C;&#x8DEF;&#x5F84;&#x4E2D;&#x5982;&#x679C;&#x542B;&#x6709;&#x4E24;&#x4E2A;&#x6587;&#x4EF6;&#x5939;&#x5373;&#x4E24;&#x4E2A;&#x5305;&#xFF0C;&#x90FD;&#x542B;&#x6709;&#x76F8;&#x540C;&#x540D;&#x5B57;&#x7684;.py&#x6587;&#x4EF6;&#xFF0C;&#x5F53;&#x5BFC;&#x5165;&#x8BE5;.py&#x6587;&#x4EF6;&#x65F6;&#xFF0C;&#x9700;&#x8981;&#x5199;&#x6E05;&#x695A;&#x5305;&#x540D;.&#x6587;&#x4EF6;&#x540D;print(sys.path) &#x5B89;&#x88C5;&#x7B2C;&#x4E09;&#x65B9;&#x6A21;&#x5757;1# &#x5728;&#x865A;&#x62DF;&#x73AF;&#x5883;&#x4E2D;&#x8F93;&#x5165;pip install xxx &#x5B89;&#x88C5;xxx&#x6A21;&#x5757; import&#x8BED;&#x53E5;1234567891011# import module1, module2, ... &#x4E00;&#x6B21;&#x6027;&#x5F15;&#x5165;&#x591A;&#x4E2A;&#x6A21;&#x5757;&#xFF0C;&#x4F7F;&#x7528;&#x6A21;&#x5757;&#x65F6;&#x683C;&#x5F0F;&#x4E3A;&#xFF1A;&#x6A21;&#x5757;&#x540D;.&#x51FD;&#x6570;&#x540D;/&#x53D8;&#x91CF;&#x540D;import sys, timestart = time.clock()end = time.clock()res = end - start# import module as module_name &#x4E00;&#x4E2A;&#x6A21;&#x5757;&#x540D;&#x5982;&#x679C;&#x8F83;&#x957F;&#xFF0C;&#x4E66;&#x5199;&#x4E0D;&#x65B9;&#x4FBF;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x5176;&#x6539;&#x540D;&#x4E3A;module_nameimport numpy as npa = np.array([1, 2, 3]) from &#x2026; import&#x8BED;&#x53E5;1234567891011121314151617181920212223242526# from module import name1, name2, ... &#x4ECE;module&#x6A21;&#x5757;&#x4E2D;&#x5F15;&#x5165;&#x4E00;&#x4E2A;&#x6307;&#x5B9A;&#x7684;&#x90E8;&#x5206;&#x5230;&#x5F53;&#x524D;&#x547D;&#x540D;&#x7A7A;&#x95F4;&#xFF0C;&#x4F7F;&#x7528;&#x65F6;&#x4E0D;&#x9700;&#x8981;&#x52A0;&#x6A21;&#x5757;&#x540D;from numpy import array, arangea = array([1, 2, 3])b = arange(5) # from module import name as new_name &#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x540D;&#x6216;&#x53D8;&#x91CF;&#x540D;&#x5982;&#x679C;&#x8F83;&#x957F;&#xFF0C;&#x4E66;&#x5199;&#x4E0D;&#x65B9;&#x4FBF;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x5176;&#x6539;&#x540D;&#x4E3A;new_namefrom numpy import linspace as lspc = lsp(0, 10, 6)# from module import * &#x628A;module&#x6A21;&#x5757;&#x4E2D;&#x6240;&#x6709;&#x7684;&#x5185;&#x5BB9;&#x5168;&#x90E8;&#x5BFC;&#x5165;&#x5F53;&#x524D;&#x6A21;&#x5757;from numpy import *d = zeros((3, 3))# from .... import&#x8BED;&#x53E5;&#x5B58;&#x5728;&#x7740;&#x5371;&#x9669;&#x6027;&#xFF0C;&#x5982;&#x679C;&#x4E0B;&#x9762;&#x5B9A;&#x4E49;&#x4E86;&#x540C;&#x540D;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x5219;&#x4F1A;&#x8986;&#x76D6;&#x5F15;&#x5165;&#x7684;&#x51FD;&#x6570;from numpy import *def zeros(* par): return 0e = zeros((3, 3))# &#x5982;&#x679C;&#x6709;&#x4E00;&#x4E2A;.py&#x6587;&#x4EF6;&#x9700;&#x8981;&#x88AB;&#x5BFC;&#x5165;&#xFF0C;&#x4E5F;&#x9700;&#x8981;&#x5355;&#x72EC;&#x7684;&#x8FD0;&#x884C;&#x6B64;&#x6587;&#x4EF6;&#x3002;&#x4F46;&#x662F;&#x5982;&#x679C;&#x76F4;&#x63A5;&#x5BFC;&#x5165;&#x8BE5;&#x6587;&#x4EF6;&#xFF0C;&#x4F1A;&#x81EA;&#x52A8;&#x6267;&#x884C;&#x8BE5;&#x6587;&#x4EF6;&#xFF0C;&#x5982;&#x679C;&#x5E0C;&#x671B;&#x8FD0;&#x884C;&#x65F6;&#x4E0D;&#x6267;&#x884C;&#x8BE5;&#x6587;&#x4EF6;&#x9700;&#x8981;&#x5728;.py&#x6587;&#x4EF6;&#x4E2D;&#x5199;&#x5165;# if __name__ == &quot;__main__&quot;: &#x7136;&#x540E;&#x4E3B;&#x7A0B;&#x5E8F;&#x7A0B;&#x5E8F;&#x5199;&#x5728;&#x4E0B;&#x9762;&#xFF0C;&#x8FD9;&#x6837;&#x5355;&#x72EC;&#x8FD0;&#x884C;&#x8BE5;&#x6587;&#x4EF6;&#x65F6;&#x4F1A;&#x6267;&#x884C;&#x4E3B;&#x7A0B;&#x5E8F;&#xFF0C;&#x88AB;&#x5BFC;&#x5165;&#x65F6;&#x4E0D;&#x4F1A;&#x6267;&#x884C;&#x4E3B;&#x7A0B;&#x5E8F;&#x3002; Import&#x5C0F;&#x7ED3;&#x2003;&#x2003;Python&#x4E4B;&#x6240;&#x4EE5;&#x88AB;&#x79F0;&#x4E3A;&#x80F6;&#x6C34;&#x8BED;&#x8A00;&#xFF0C;&#x4E3B;&#x8981;&#x5F52;&#x529F;&#x4E8E;Import&#x7684;&#x5F3A;&#x5927;&#x529F;&#x80FD;&#x3002;&#x968F;&#x7740;Python&#x7684;&#x706B;&#x70ED;&#xFF0C;&#x5404;&#x4E2A;&#x9886;&#x57DF;&#x90FD;&#x4E3A;Python&#x63D0;&#x4F9B;&#x529F;&#x80FD;&#x5F3A;&#x5927;&#x7684;&#x63A5;&#x53E3;&#xFF0C;&#x5982;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x9886;&#x57DF;&#x6709;opencv&#x5E93;&#xFF0C;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x9886;&#x57DF;&#x6709;sklearn&#x5E93;&#xFF0C;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x9886;&#x57DF;&#x6709;TensorFlow, Torch&#x5E93;&#xFF0C;&#x6570;&#x636E;&#x5206;&#x6790;&#x9886;&#x57DF;&#x6709;Numpy, Matplotlib&#x5E93;&#x7B49;&#x7B49;&#xFF0C;&#x8FD9;&#x4E3A;Python&#x7684;&#x4F7F;&#x7528;&#x8005;&#x63D0;&#x4F9B;&#x975E;&#x5E38;&#x5927;&#x7684;&#x4FBF;&#x6377;&#x3002;&#x800C;&#x4E14;&#x5728;&#x5927;&#x578B;&#x7684;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x5F80;&#x5F80;&#x9700;&#x8981;&#x5199;&#x5F88;&#x591A;&#x7684;&#x5B50;&#x6587;&#x4EF6;&#xFF0C;&#x4E5F;&#x9700;&#x8981;Import&#x7684;&#x5E2E;&#x52A9;&#xFF0C;&#x56E0;&#x6B64;&#x8981;&#x719F;&#x7EC3;&#x638C;&#x63E1;&#x8FD9;&#x4E9B;&#x5BFC;&#x5165;&#x6A21;&#x5757;&#x7684;&#x5E94;&#x7528;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>语言学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Function(函数)]]></title>
    <url>%2F2019%2F09%2F16%2Fpython_function%2F</url>
    <content type="text"><![CDATA[Function&#x4ECB;&#x7ECD;&#x2003;&#x2003;Python&#x4E2D;&#x7684;Function&#x4E00;&#x79CD;&#x91CD;&#x8981;&#x7684;&#x8C03;&#x7528;&#x65B9;&#x5F0F;&#xFF0C;&#x548C;C/C++&#x7C7B;&#x4F3C;&#xFF0C;&#x901A;&#x8FC7;&#x53C2;&#x6570;&#x7684;&#x4F20;&#x9012;&#x548C;&#x6570;&#x636E;&#x7684;&#x8FD4;&#x56DE;&#x5B8C;&#x6210;&#x6240;&#x9884;&#x671F;&#x7684;&#x76EE;&#x7684;&#x3002; Python&#x5185;&#x7F6E;FunctionPython&#x6C42;&#x548C;&#x51FD;&#x6570;&#xFF0C;&#x6700;&#x5927;&#x503C;&#x6700;&#x5C0F;&#x503C;&#x51FD;&#x6570;1234567891011# sum(iterable) &#x5BF9;&#x4E8E;&#x5217;&#x8868;&#xFF0C;&#x5143;&#x7EC4;&#xFF0C; &#x96C6;&#x5408;&#x6765;&#x8BF4;sum&#x662F;&#x6307;&#x6240;&#x6709;&#x5143;&#x7D20;&#x4E4B;&#x548C;&#xFF0C;&#x524D;&#x63D0;&#x662F;&#x5143;&#x7D20;&#x53EF;&#x4EE5;&#x6C42;&#x548C;&#xFF0C;&#x5BF9;&#x4E8E;&#x5B57;&#x5178;&#x6765;&#x8BF4;sum&#x662F;&#x6307;&#x5173;&#x952E;&#x5B57;Key&#x6C42;&#x548C;sum({1, 2, 3, 4})sum({1:11, 2:22, 3:33, 4:44})# max(iterable) &#x7528;&#x6CD5;&#x540C;sum&#xFF0C;&#x6C42;&#x5143;&#x7D20;&#x7684;&#x6700;&#x5927;&#x503C;max({1, 2, 3, 4})max({1:11, 2:22, 3:33, 4:44})# min(iterable) &#x7528;&#x6CD5;&#x540C;sum&#xFF0C;&#x6C42;&#x5143;&#x7D20;&#x7684;&#x6700;&#x5C0F;&#x503C;min({1, 2, 3, 4})min({1:11, 2:22, 3:33, 4:44}) Python&#x957F;&#x5EA6;&#x51FD;&#x6570;1234# len(iterable) &#x6C42;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#x7684;&#x957F;&#x5EA6;&#xFF0C;&#x5373;&#x5176;&#x4E2D;&#x5305;&#x542B;&#x7684;&#x5143;&#x7D20;&#x4E2A;&#x6570;len([1, 2, 3, 4])len((1, 2, (3, [4, 5]), 6))len({1:11, 2:22, 3:33, 4:44}) Python&#x6392;&#x5E8F;&#x51FD;&#x6570;12345678910a = [1,5,3,2,4]b = {1:11, 5:55, 3:33, 2:22, 4:44}c = [(1, 5), (4, 8), (3, 7), (2, 9)]# sorted(iterable, key, reverse=False) &#x5BF9;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#x6309;&#x7167;key&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x5982;&#x679C;&#x5BF9;&#x5B57;&#x5178;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x5219;&#x5BF9;&#x5176;&#x5173;&#x952E;&#x5B57;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;reverse&#x4E3A;True&#x6307;&#x4ECE;&#x5927;&#x5230;&#x5C0F;&#x6392;&#x5E8F;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;sorted(a)sorted(b)sorted(c)sorted(c, key=lambda x:(x[1], x[0]))sorted(c, key=lambda x:(x[1], x[0]), reverse=True) Python&#x7FFB;&#x8F6C;&#x51FD;&#x6570;1234567a = [1,5,3,2,4]b = [(1, 5), (4, 8), (3, 7), (2, 9)]# reversed(iterable) &#x8FD4;&#x56DE;&#x7FFB;&#x8F6C;&#x540E;&#x7684;&#x8FED;&#x4EE3;&#x5668;&#x5BF9;&#x8C61;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;list&#xFF0C;tuple&#x7B49;&#x8FDB;&#x884C;&#x8F6C;&#x6362;&#xFF0C;&#x5B57;&#x5178;&#x65E0;&#x6CD5;&#x8FDB;&#x884C;&#x7FFB;&#x8F6C;&#x64CD;&#x4F5C;reversed(a)list(reversed(a))tuple(reversed(b)) Python&#x679A;&#x4E3E;&#x51FD;&#x6570;12345678910a = [1,5,3,2,4]b = {1:11, 5:55, 3:33, 2:22, 4:44}c = [(1, 5), (4, 8), (3, 7), (2, 9)]# enumerate(iterable) &#x8FD4;&#x56DE;&#x4ECE;0&#x5F00;&#x59CB;&#x679A;&#x4E3E;&#x7684;&#x8FED;&#x4EE3;&#x5668;&#x5BF9;&#x8C61;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;list&#xFF0C;tuple&#x7B49;&#x8FDB;&#x884C;&#x8F6C;&#x6362;&#xFF0C;&#x5BF9;&#x5B57;&#x5178;&#x679A;&#x4E3E;&#x5219;&#x5BF9;&#x5176;&#x5173;&#x952E;&#x5B57;&#x8FDB;&#x884C;&#x679A;&#x4E3E;reversed(a)enumerate(a)list(enumerate(a))list(enumerate(b))tuple(enumerate(c)) Python&#x6253;&#x5305;&#x51FD;&#x6570;12345678a = [1,5,3,2,4]b = {1:11, 5:55, 3:33, 2:22, 4:44}c = [(1, 5), (4, 8), (3, 7), (2, 9)]# zip(iterable1, iterable2) &#x5C06;&#x4E24;&#x4E2A;&#x8FED;&#x4EE3;&#x5668;&#x5BF9;&#x8C61;&#x6253;&#x5305;&#xFF0C;&#x5408;&#x5E76;&#x6210;&#x4E00;&#x4E2A;&#x8FED;&#x4EE3;&#x5668;&#x5BF9;&#x8C61;&#xFF0C;&#x6253;&#x5305;&#x5143;&#x7D20;&#x6309;&#x7167;&#x5143;&#x7D20;&#x6570;&#x91CF;&#x5C11;&#x7684;&#x8FDB;&#x884C;&#x6253;&#x5305;&#xFF0C;&#x5BF9;&#x5B57;&#x5178;&#x6253;&#x5305;&#x5219;&#x5BF9;&#x5176;&#x5173;&#x952E;&#x5B57;&#x8FDB;&#x884C;&#x6253;&#x5305;zip(a, b)list(zip(a, b))tuple(zip(a, c)) Python&#x5220;&#x9664;&#x51FD;&#x6570;123456a = Trueb = [1,5,3,2,4]# del obj &#x5C06;obj&#x5220;&#x9664;&#xFF0C;&#x4E0D;&#x5B58;&#x5728;&#x8BE5;&#x5BF9;&#x8C61;del adel b Python&#x4E2D;input&#x51FD;&#x6570;12# input() &#x4ECE;&#x6807;&#x51C6;&#x8F93;&#x5165;&#x4E2D;&#x8BFB;&#x53D6;&#x4E00;&#x884C;&#x6587;&#x672C;&#xFF0C;&#x8FD4;&#x56DE;&#x8BE5;&#x5185;&#x5BB9;&#x7684;&#x5B57;&#x7B26;&#x4E32;str = input(&apos;&#x8BF7;&#x8F93;&#x5165;:&apos;) Python&#x4E2D;print&#x51FD;&#x6570;123# print(obj1, obj2, ..., end=&apos;\n&apos;) &#x5C06;obj1, obj2, ...&#x6309;&#x987A;&#x5E8F;&#x8F93;&#x51FA;&#xFF0C;&#x4EE5;&#x7A7A;&#x683C;&#x5206;&#x5F00;&#xFF0C;end&#x662F;&#x8F93;&#x51FA;&#x540E;&#x7684;&#x7ED3;&#x5C3E;&#x5B57;&#x7B26;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x6362;&#x884C;&#x7B26;print([1, 2, 3], (4, 5, 6))print(&apos;hello world&apos; + &apos;\n&apos; + &apos;hello python &apos;, end=&apos;end&apos;) Python&#x63A8;&#x5BFC;&#x5F0F;1234567891011a = [1, 2, 3, 4, 5]# [x for x in iterable] &#x4ECE;iterable&#x4E2D;&#x9010;&#x4E00;&#x83B7;&#x53D6;&#x5143;&#x7D20;&#xFF0C;&#x5E76;&#x751F;&#x6210;&#x5217;&#x8868;[2 ** x for x in a][[i + j * 3 for i in range(3)] for j in range(3)]# {x for x in iterable} &#x4ECE;iterable&#x4E2D;&#x9010;&#x4E00;&#x83B7;&#x53D6;&#x5143;&#x7D20;&#xFF0C;&#x5E76;&#x751F;&#x6210;&#x96C6;&#x5408;{2 ** x for x in a}# {x: y for x in iterable} &#x4ECE;iterable&#x4E2D;&#x9010;&#x4E00;&#x83B7;&#x53D6;&#x5143;&#x7D20;&#xFF0C;&#x5E76;&#x751F;&#x6210;&#x5B57;&#x5178;{x: 2 ** x for x in a} Python&#x4E2D;lambda&#x8868;&#x8FBE;&#x5F0F;123# lambda arg1, arg2: function &#x4E00;&#x884C;&#x8868;&#x8FBE;&#x5F0F;&#x7B80;&#x5355;&#x5B9E;&#x73B0;&#x51FD;&#x6570;&#xFF0C;&#x53C2;&#x6570;&#x4E3A;arg1, arg2, ...&#xFF0C;&#x51FD;&#x6570;&#x4F53;&#x4E3A;functionf = lambda x, y: x * yf(3, 4) Python&#x4E2D;filter&#x51FD;&#x6570;123456# filter(function or None, iterable) &#x82E5;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x4E3A;None&#x5219;&#x8FD4;&#x56DE;iterable&#x4E2D;&#x4E3A;&#x771F;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x5E76;&#x751F;&#x6210;&#x8FED;&#x4EE3;&#x5668;&#x5BF9;&#x8C61;&#xFF0C;&#x82E5;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x4E3A;function&#xFF0C;&#x5219;&#x5C06;iterable&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x5E26;&#x5165;&#x51FD;&#x6570;&#xFF0C;&#x5C06;&#x4E3A;&#x771F;&#x7684;&#x5143;&#x7D20;&#x751F;&#x6210;&#x8FED;&#x4EE3;&#x5668;&#x5BF9;&#x8C61;filter(None, [x % 3 for x in range(10)])list(filter(None, [x % 3 for x in range(10)]))filter(lambda x: x % 3, range(10))list(filter(lambda x: x % 3, range(10))) Python&#x4E2D;map&#x51FD;&#x6570;123456789a = &apos;12345&apos;f = lambda x: 2 ** x# map(function, iterable) &#x5C06;iterable&#x4E2D;&#x7684;&#x5143;&#x7D20;&#x5E26;&#x5165;&#x51FD;&#x6570;&#xFF0C;&#x8FD4;&#x56DE;&#x51FD;&#x6570;&#x751F;&#x6210;&#x7684;&#x8FED;&#x4EE3;&#x5668;&#x5BF9;&#x8C61;map(int, a)list(map(int, a))map(f, range(5))tuple(map(f, range(5))) Python&#x81EA;&#x5B9A;&#x4E49;FunctionPython&#x4E2D;def&#x5B9A;&#x4E49;&#x51FD;&#x6570;1234567891011# &#x5B9A;&#x4E49;&#x540D;&#x4E3A;function_name&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x5F62;&#x5F0F;&#x53C2;&#x6570;&#x4E3A;arg1, arg2, ...&#xFF0C;&#x51FD;&#x6570;&#x4F53;&#x4E3A;function&#xFF0C;&#x8FD4;&#x56DE;&#x503C;&#x4E3A;value(&#x53EF;&#x4EE5;&#x65E0;&#x8FD4;&#x56DE;&#x503C;)&#xFF0C;&#x4E0E;C/C++&#x4E0D;&#x540C;&#xFF0C;&#x53EF;&#x4EE5;&#x6709;&#x591A;&#x4E2A;&#x8FD4;&#x56DE;&#x503C;# def function_name(arg1, arg2, ...): # function# return valuedef my_pow(a, b): return a ** b, b ** a# function_name(x1, x2, ...) &#x8C03;&#x7528;&#x540D;&#x4E3A;function_name&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x5B9E;&#x9645;&#x53C2;&#x6570;&#x4E3A;x1, x2, ...&#xFF0C;&#x8C03;&#x7528;&#x65F6;&#x5C06;&#x5B9E;&#x53C2;&#x672C;&#x8EAB;&#x4F20;&#x9012;&#x5230;&#x5F62;&#x53C2;&#xFF0C;&#x53EF;&#x4EE5;&#x6309;&#x987A;&#x5E8F;&#x4F20;&#x5165;&#x53C2;&#x6570;&#x6216;&#x8005;&#x624B;&#x52A8;&#x6307;&#x5B9A;&#x53C2;&#x6570;c, d = my_pow(3, 4)e, f = my_pow(b=4, a=3) Python&#x51FD;&#x6570;&#x7684;&#x9ED8;&#x8BA4;&#x53C2;&#x6570;123456# def function_name(arg1, arg2=x) &#x8BBE;&#x7F6E;&#x51FD;&#x6570;&#x7684;&#x9ED8;&#x8BA4;&#x53C2;&#x6570;&#x4E3A;arg2&#xFF0C;&#x5176;&#x503C;&#x4E3A;x&#xFF0C;&#x8C03;&#x7528;&#x65F6;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x8D4B;&#x503C;&#x5219;&#x8D4B;&#x503C;&#x4E3A;x&#xFF0C;&#x6CE8;&#x610F;&#x9ED8;&#x8BA4;&#x53C2;&#x6570;&#x53EA;&#x80FD;&#x653E;&#x5728;&#x975E;&#x9ED8;&#x8BA4;&#x53C2;&#x6570;&#x4E4B;&#x540E;def my_pow(a, b=2): return b ** aa = my_pow(5)b = my_pow(3, 3) Python&#x51FD;&#x6570;&#x7684;&#x6536;&#x96C6;&#x53C2;&#x6570;123456789101112131415# def function_name(*args) &#x5C06;&#x6240;&#x6709;&#x7684;&#x53C2;&#x6570;&#x90FD;&#x6253;&#x5305;&#x8D77;&#x6765;&#xFF0C;&#x8C03;&#x7528;&#x65F6;&#x4F20;&#x5165;&#x591A;&#x5C11;&#x4E2A;&#x90FD;&#x53EF;&#x4EE5;&#xFF0C;&#x90FD;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x5143;&#x7EC4;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x4F20;&#x5165;&#x53C2;&#x6570;&#x5219;&#x662F;&#x4E00;&#x4E2A;&#x7A7A;&#x5143;&#x7EC4;&#x3002;def my_func(*par): print(par) print(&apos;&#x53C2;&#x6570;&#x7684;&#x4E2A;&#x6570;&#x4E3A;:&apos;, len(par))my_func(1, 2, [3, 4], &apos;56&apos;, {7, 8, 9})# def function_name(**kwargs) &#x5C06;&#x6240;&#x6709;&#x7684;&#x53C2;&#x6570;&#x90FD;&#x6253;&#x5305;&#x8D77;&#x6765;&#xFF0C;&#x8C03;&#x7528;&#x65F6;&#x4F20;&#x5165;&#x591A;&#x5C11;&#x4E2A;&#x90FD;&#x53EF;&#x4EE5;&#xFF0C;&#x90FD;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x5B57;&#x5178;&#xFF0C;&#x4F20;&#x5165;&#x53C2;&#x6570;&#x65F6;&#x5FC5;&#x987B;&#x4F7F;&#x7528;&#x952E;&#x503C;&#x5BF9;&#x7684;&#x5F62;&#x5F0F;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x4F20;&#x5165;&#x53C2;&#x6570;&#x5219;&#x662F;&#x4E00;&#x4E2A;&#x7A7A;&#x5B57;&#x5178;&#x3002;def my_func(**par): print(par) print(&apos;&#x53C2;&#x6570;&#x7684;&#x4E2A;&#x6570;&#x4E3A;:&apos;, len(par))my_func(a=1, b=2, c=[1, 2]) Python&#x51FD;&#x6570;&#x7684;&#x5168;&#x5C40;&#x53D8;&#x91CF;1234567891011121314151617181920# &#x5728;&#x51FD;&#x6570;&#x4E2D;&#x4F7F;&#x7528;&#x548C;&#x5916;&#x90E8;&#x540D;&#x79F0;&#x76F8;&#x540C;&#x7684;&#x53D8;&#x91CF;&#x65F6;&#xFF0C;&#x4F1A;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x540C;&#x540D;&#x7684;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#xFF0C;&#x5373;&#x4F7F;&#x4FEE;&#x6539;&#x4E86;&#x5176;&#x503C;&#xFF0C;&#x4E5F;&#x53EA;&#x662F;&#x4FEE;&#x6539;&#x4E86;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x989D;&#x503C;&#xFF0C;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x5B8C;&#x6BD5;&#x540E;&#xFF0C;&#x5916;&#x90E8;&#x7684;&#x53D8;&#x91CF;&#x4ECD;&#x7136;&#x6CA1;&#x6709;&#x88AB;&#x4FEE;&#x6539;a = 10def my_func(): a = 5 print(a)my_func()print(a)# &#x5982;&#x679C;&#x60F3;&#x5728;&#x51FD;&#x6570;&#x4E2D;&#x4FEE;&#x6539;&#x5916;&#x90E8;&#x53D8;&#x91CF;&#x7684;&#x503C;&#xFF0C;&#x5219;&#x9700;&#x8981;&#x5C06;&#x5176;&#x58F0;&#x660E;&#x4E3A;&#x5168;&#x5C40;&#x53D8;&#x91CF;&#xFF0C;&#x548C;C/C++&#x4E0D;&#x540C;&#xFF0C;C/C++&#x662F;&#x5728;&#x5B9A;&#x4E49;&#x65F6;&#x5C06;&#x53D8;&#x91CF;&#x58F0;&#x660E;&#x4E3A;&#x5168;&#x5C40;&#xFF0C;&#x800C;Python&#x4E2D;&#x662F;&#x5728;&#x5916;&#x90E8;&#x5148;&#x5B9A;&#x4E49;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x51FD;&#x6570;&#x5185;&#x90E8;&#x4F7F;&#x7528;&#x5173;&#x952E;&#x5B57;global&#x5C06;&#x5176;&#x58F0;&#x660E;&#x4E3A;&#x5168;&#x5C40;a = 10def my_func(): global a a = 5 print(a)my_func()print(a) Python&#x5185;&#x5D4C;&#x51FD;&#x6570;123456789# &#x5728;&#x51FD;&#x6570;&#x5185;&#x90E8;&#x53EF;&#x4EE5;&#x5B9A;&#x4E49;&#x53E6;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x8FD9;&#x6837;&#x5916;&#x90E8;&#x51FD;&#x6570;&#x65E0;&#x6CD5;&#x8C03;&#x7528;&#x8BE5;&#x51FD;&#x6570;&#xFF0C;&#x4EC5;&#x4EC5;&#x80FD;&#x5728;&#x5B9A;&#x4E49;&#x8BE5;&#x51FD;&#x6570;&#x7684;&#x51FD;&#x6570;&#x4E2D;&#x4F7F;&#x7528;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x4F7F;&#x4E3B;&#x7A0B;&#x5E8F;&#x66F4;&#x52A0;&#x6E05;&#x6670;&#x3002;&#x5185;&#x5D4C;&#x51FD;&#x6570;&#x7684;&#x4F7F;&#x7528;&#x9891;&#x7387;&#x8F83;&#x4F4E;&#xFF0C;&#x4E86;&#x89E3;&#x5373;&#x53EF;&#x3002;def test1(): print(&apos;This is test1&apos;) def test2(): print(&apos;This is test2&apos;) test2()test1()test2() Python&#x51FD;&#x6570;&#x95ED;&#x5305;123456789# &#x6307;&#x51FD;&#x6570;&#x5D4C;&#x5957;&#x65F6;&#x5C06;&#x5D4C;&#x5957;&#x51FD;&#x6570;&#x89C6;&#x4E3A;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x4F5C;&#x4E3A;&#x5B9A;&#x4E49;&#x5176;&#x51FD;&#x6570;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#xFF0C;&#x6B64;&#x65F6;&#x8FD4;&#x56DE;&#x503C;&#x662F;&#x4E00;&#x4E2A;&#x51FD;&#x6570;(&#x5B9A;&#x4E49;&#x7684;&#x5185;&#x5D4C;&#x51FD;&#x6570;)&#xFF0C;&#x4F7F;&#x7528;&#x8BE5;&#x51FD;&#x6570;&#x7684;&#x4F7F;&#x7528;&#x65B9;&#x5F0F;&#x548C;&#x666E;&#x901A;&#x51FD;&#x6570;&#x76F8;&#x540C;&#xFF0C;&#x95ED;&#x5305;&#x7684;&#x4F7F;&#x7528;&#x9891;&#x7387;&#x8F83;&#x4F4E;&#xFF0C;&#x4E86;&#x89E3;&#x5373;&#x53EF;&#x3002;def func1(x): def func2(y): return x * y return func2f = func1(8)print(f)print(f(5)) Python&#x51FD;&#x6570;&#x88C5;&#x9970;&#x5668;1234567891011121314151617# &#x88C5;&#x9970;&#x5668;&#x5B9E;&#x9645;&#x4E0A;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x95ED;&#x5305;&#xFF0C;&#x628A;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#xFF0C;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x66FF;&#x4EE3;&#x7248;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x5176;&#x672C;&#x8D28;&#x5C31;&#x8BF4;&#x4E00;&#x4E2A;&#x8FD4;&#x56DE;&#x51FD;&#x6570;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x539F;&#x51FD;&#x6570;&#x4E4B;&#x524D;&#x6216;&#x4E4B;&#x540E;&#x589E;&#x52A0;&#x5185;&#x5BB9;&#x3002;# &#x4EE5;&#x6B64;&#x4EE3;&#x7801;&#x4E3E;&#x4F8B;&#xFF0C;&#x6709;&#x4E00;&#x4E2A;say&#x51FD;&#x6570;&#xFF0C;&#x8F93;&#x51FA;Hello Python !&#xFF0C;&#x4F46;&#x662F;&#x60F3;&#x5728;&#x4E4B;&#x524D;&#x8FD8;&#x6253;&#x5370;&#x522B;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x4FEE;&#x6539;say&#x51FD;&#x6570;&#x3002;# &#x53EF;&#x4EE5;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x95ED;&#x5305;outer&#xFF0C;&#x7136;&#x540E;&#x5199;say = outer(say)&#xFF0C;inner&#x91CC;&#x9762;&#x53EF;&#x4EE5;&#x5199;&#x5165;&#x9700;&#x8981;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x5373;&#x53EF;&#x5B8C;&#x6210;&#x76F8;&#x5E94;&#x7684;&#x529F;&#x80FD;&#x3002;# &#x5728;Python&#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x5199;&#x6CD5;&#xFF0C;&#x5728;&#x8981;&#x4FEE;&#x6539;&#x7684;&#x51FD;&#x6570;&#x540D;&#x4E0A;&#x9762;&#x5199;@&#x95ED;&#x5305;&#x540D;&#xFF0C;&#x7B49;&#x4EF7;&#x4E8E;&#x51FD;&#x6570;&#x540D; = &#x95ED;&#x5305;&#x540D;(&#x51FD;&#x6570;&#x540D;)&#x3002;def outer(func): def inner(): print(&apos;&#x8BF4;&#x70B9;&#x4EC0;&#x4E48;&#x5427;&#xFF01;&apos;) func() return inner# @outer &#x7B49;&#x4EF7;&#x4E8E; say = outer(say)@outerdef say(): print(&apos;Hello Python !&apos;)# &#x6CE8;&#x610F;&#x987A;&#x5E8F;&#x5E94;&#x8BE5;&#x5148;&#x5199;&#x95ED;&#x5305;&#x518D;&#x5199;&#x8981;&#x4FEE;&#x6539;&#x7684;&#x51FD;&#x6570;say() Python&#x504F;&#x51FD;&#x6570;123456789# &#x504F;&#x51FD;&#x6570;&#x662F;&#x6307;&#x5BF9;&#x51FD;&#x6570;&#x53C2;&#x6570;&#x4E2D;&#x9ED8;&#x8BA4;&#x503C;&#x7684;&#x63A7;&#x5236;# functools&#x6A21;&#x5757;&#x4E2D;&#x6709;&#x4E00;&#x4E2A;partial&#x65B9;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x5BF9;&#x9ED8;&#x8BA4;&#x503C;&#x7684;&#x63A7;&#x5236;# new_func = functools.partial(old_func, para=x) &#x5C06;&#x539F;&#x51FD;&#x6570;old_func&#x4E2D;&#x7684;para&#x53C2;&#x6570;&#x56FA;&#x5B9A;&#x4E3A;ximport functoolsa = int(&apos;1010&apos;, base=2)int2 = functools.partial(int, base=2)b = int2(&apos;1010&apos;) Function&#x5C0F;&#x7ED3;&#x2003;&#x2003;Function&#x51FD;&#x6570;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x8BED;&#x8A00;&#x4E2D;&#x4E00;&#x79CD;&#x91CD;&#x8981;&#x7684;&#x8C03;&#x7528;&#x65B9;&#x5F0F;&#xFF0C;&#x65E0;&#x8BBA;&#x662F;&#x5728;&#x4F55;&#x79CD;&#x8BED;&#x8A00;&#x4E2D;&#xFF0C;&#x51FD;&#x6570;&#x7684;&#x4F7F;&#x7528;&#x90FD;&#x662F;&#x81F3;&#x5173;&#x91CD;&#x8981;&#x7684;&#xFF0C;&#x6709;&#x4E86;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x4F7F;&#x4EE3;&#x7801;&#x66F4;&#x52A0;&#x6574;&#x6D01;&#x548C;&#x6E05;&#x6670;&#xFF0C;&#x6A21;&#x5757;&#x4E0E;&#x6A21;&#x5757;&#x4E4B;&#x95F4;&#x8FBE;&#x5230;&#x9AD8;&#x5185;&#x805A;&#x4F4E;&#x8026;&#x5408;&#xFF0C;&#x5927;&#x5927;&#x63D0;&#x9AD8;&#x4EE3;&#x7801;&#x7684;&#x53EF;&#x8BFB;&#x6027;&#x3002;&#x53EF;&#x4EE5;&#x8282;&#x7701;&#x5927;&#x56E0;&#x6B64;&#x4F7F;&#x7528;&#x7684;&#x9891;&#x7387;&#x975E;&#x5E38;&#x9AD8;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x7075;&#x6D3B;&#x638C;&#x63E1;Function&#x7684;&#x5E94;&#x7528;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>语言学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Special Structure(特殊结构)]]></title>
    <url>%2F2019%2F09%2F15%2Fpython_special%2F</url>
    <content type="text"><![CDATA[Special Structure&#x4ECB;&#x7ECD;&#x2003;&#x2003;Python&#x4E2D;&#x7684;&#x7279;&#x6B8A;&#x7ED3;&#x6784;&#x6307;&#x9664;&#x4E86;&#x6761;&#x4EF6;&#xFF0C;&#x5FAA;&#x73AF;&#x4E4B;&#x5916;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x5982;&#x5F02;&#x5E38;&#x5904;&#x7406;&#x7ED3;&#x6784;&#xFF0C;else&#x8BED;&#x53E5;&#xFF0C;with&#x8BED;&#x53E5;&#x4EE5;&#x53CA;assert&#x8BED;&#x53E5;&#x3002; Special Structure&#x5206;&#x7C7B;&#x5F02;&#x5E38;&#x5904;&#x7406;$$ \begin{array}{|c|c|} &#x540D;&#x79F0; &amp; &#x63CF;&#x8FF0; \ AssertionError &amp; &#x65AD;&#x8A00;&#x5931;&#x8D25; \ AttributeError &amp; &#x8BBF;&#x95EE;&#x4F4D;&#x7F6E;&#x7684;&#x5BF9;&#x8C61;&#x5C5E;&#x6027; \ IndexError &amp; &#x7D22;&#x5F15;&#x9519;&#x8BEF; \ KeyError &amp; &#x5173;&#x952E;&#x5B57;&#x9519;&#x8BEF; \ NameError &amp; &#x8BBF;&#x95EE;&#x4E0D;&#x5B58;&#x5728;&#x7684;&#x53D8;&#x91CF; \ OSError &amp; &#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x5F02;&#x5E38; \ OverflowError &amp; &#x6570;&#x503C;&#x8FD0;&#x7B97;&#x8D85;&#x8FC7;&#x9650;&#x5236; \ SyntaxError &amp; &#x8BED;&#x6CD5;&#x9519;&#x8BEF; \ TypeError &amp; &#x4E0D;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x65E0;&#x6548;&#x64CD;&#x4F5C; \ ZeroDivisionError &amp; &#x9664;&#x6570;&#x4E3A;0 \ \end{array} $$123456789101112131415161718# try: &#x8BED;&#x53E5;1 except: &#x8BED;&#x53E5;2 (finally: &#x8BED;&#x53E5;3) &#x6267;&#x884C;&#x8BED;&#x53E5;1&#x5982;&#x679C;&#x53D1;&#x751F;&#x5F02;&#x5E38;&#x5219;&#x76F4;&#x63A5;&#x8DF3;&#x5230;except&#x4E2D;&#x6267;&#x884C;&#x8BED;&#x53E5;2&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x5F02;&#x5E38;&#x5219;&#x4E0D;&#x6267;&#x884C;&#x8BED;&#x53E5;2&#xFF0C;&#x6700;&#x7EC8;&#x90FD;&#x8981;&#x6267;&#x884C;finally&#x4E2D;&#x7684;&#x8BED;&#x53E5;3&#xFF0C;finally&#x53EF;&#x7701;&#x7565;# try:# &#x8BED;&#x53E5;1(&#x53EF;&#x80FD;&#x51FA;&#x9519;&#x7684;&#x6B65;&#x9AA4;)# except ErrorName(&#x9ED8;&#x8BA4;&#x4E3A;&#x6240;&#x6709;&#x5F02;&#x5E38;&#x90FD;&#x629B;&#x5F03;):# &#x8BED;&#x53E5;2(&#x51FA;&#x73B0;&#x9519;&#x8BEF;&#x7684;&#x5904;&#x7406;&#x8FC7;&#x7A0B;)# finally:# &#x8BED;&#x53E5;3(&#x6700;&#x7EC8;&#x90FD;&#x8981;&#x6267;&#x884C;&#x7684;&#x4EE3;&#x7801;)try: print(&apos;&#x9664;&#x4EE5;0&#x4E4B;&#x524D;&apos;) a = 5 / 0 print(&apos;&#x9664;&#x4EE5;0&#x4E4B;&#x540E;&apos;)except ZeroDivisionError: a = 5 print(&apos;except&apos;)finally: print(&apos;finally&apos;)print(a) else&#x8BED;&#x53E5;1234567891011121314151617181920212223242526272829303132333435363738394041424344# else&#x8BED;&#x53E5;&#x6709;4&#x79CD;&#x7EC4;&#x5408;&#x65B9;&#x5F0F;&#xFF0C;&#x53EF;&#x4EE5;&#x548C;if&#x7EC4;&#x5408;&#x6210;if condition: &#x8BED;&#x53E5;1 else: &#x8BED;&#x53E5;2&#xFF0C;&#x53EF;&#x4EE5;&#x548C;while&#x7EC4;&#x5408;&#x6210;while condition: &#x5FAA;&#x73AF;&#x8BED;&#x53E5; else &#x8BED;&#x53E5;&#xFF0C;&#x53EF;&#x4EE5;&#x548C;for&#x7EC4;&#x5408;&#x6210;for target in iterable: &#x5FAA;&#x73AF;&#x8BED;&#x53E5; else: &#x8BED;&#x53E5;&#xFF0C;&#x53EF;&#x4EE5;&#x548C;try&#x7EC4;&#x5408;&#x6210;try: &#x8BED;&#x53E5;1 except: &#x8BED;&#x53E5;2 else: &#x8BED;&#x53E5;3# if condition: &#x8BED;&#x53E5;1 else: &#x8BED;&#x53E5;2&#xFF0C;&#x5982;&#x679C;condition&#x6B63;&#x786E;&#x5219;&#x6267;&#x884C;&#x8BED;&#x53E5;1&#xFF0C;&#x5426;&#x5219;&#x6267;&#x884C;&#x8BED;&#x53E5;2# if condition:# &#x8BED;&#x53E5;1# else:# &#x8BED;&#x53E5;2# while condition: &#x5FAA;&#x73AF;&#x8BED;&#x53E5; else &#x8BED;&#x53E5;&#xFF0C;&#x5982;&#x679C;&#x5FAA;&#x73AF;&#x6267;&#x884C;&#x5B8C;&#x6BD5;&#x5219;&#x6267;&#x884C;else&#x4E2D;&#x7684;&#x8BED;&#x53E5;&#xFF0C;&#x5982;&#x679C;&#x4E2D;&#x95F4;&#x8DF3;&#x51FA;&#x5FAA;&#x73AF;&#x5219;&#x4E0D;&#x6267;&#x884C;else&#x4E2D;&#x7684;&#x8BED;&#x53E5;# while condition:# &#x5FAA;&#x73AF;&#x8BED;&#x53E5;# else:# &#x8BED;&#x53E5;a = 3while a &gt; 0: a -= 1else: print(&apos;else&apos;)# for target in iterable: &#x5FAA;&#x73AF;&#x8BED;&#x53E5; else: &#x8BED;&#x53E5;&#xFF0C;&#x5982;&#x679C;&#x5FAA;&#x73AF;&#x6267;&#x884C;&#x5B8C;&#x6BD5;&#x5219;&#x6267;&#x884C;else&#x4E2D;&#x7684;&#x8BED;&#x53E5;&#xFF0C;&#x5982;&#x679C;&#x4E2D;&#x95F4;&#x8DF3;&#x51FA;&#x5FAA;&#x73AF;&#x5219;&#x4E0D;&#x6267;&#x884C;else&#x4E2D;&#x7684;&#x8BED;&#x53E5;# for target in iterable: # &#x5FAA;&#x73AF;&#x8BED;&#x53E5;# else:# &#x8BED;&#x53E5;a = 3for i in range(3): a -= 1else: print(&apos;else&apos;)# try: &#x8BED;&#x53E5;1 except: &#x8BED;&#x53E5;2 else: &#x8BED;&#x53E5;3&#xFF0C;&#x5982;&#x679C;&#x53D1;&#x751F;&#x5F02;&#x5E38;&#x5219;&#x4E0D;&#x6267;&#x884C;else&#x540E;&#x9762;&#x7684;&#x8BED;&#x53E5;3&#xFF0C;&#x6CA1;&#x6709;&#x5F02;&#x5E38;&#x5219;&#x6267;&#x884C;else&#x540E;&#x9762;&#x7684;&#x8BED;&#x53E5;3# try:# &#x8BED;&#x53E5;1# except:# &#x8BED;&#x53E5;2# else: # &#x8BED;&#x53E5;3try: a = 4 / 0except: a = 4 / 1else: print(&apos;else&apos;) with&#x8BED;&#x53E5;1234567891011# with &#x8BED;&#x53E5;1: &#x8BED;&#x53E5;2 &#x7528;&#x4E8E;&#x6587;&#x4EF6;&#x64CD;&#x4F5C;&#x6216;&#x8005;&#x8FDB;&#x7A0B;&#x7EBF;&#x7A0B;&#x4E92;&#x65A5;&#x65F6;&#xFF0C;&#x8BED;&#x53E5;2&#x6267;&#x884C;&#x5B8C;&#x4E4B;&#x540E;&#x4F1A;&#x81EA;&#x52A8;&#x91CA;&#x653E;&#x8BED;&#x53E5;1&#x6240;&#x4EA7;&#x751F;&#x7684;&#x8D44;&#x6E90;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x518D;&#x624B;&#x52A8;&#x5B8C;&#x6210;&#x540E;&#x7EED;&#x5904;&#x7406;# with &#x8BED;&#x53E5;1:# &#x8BED;&#x53E5;2with open(&apos;dm01.txt&apos;) as f: print(f.read())print(f.closed)``` ![74](/images/LANGUAGE/python74.png)## &lt;font size=4&gt;assert&#x8BED;&#x53E5;&lt;/font&gt; assert condition &#x5F53;condition&#x4E3A;&#x5047;&#xFF0C;&#x7A0B;&#x5E8F;&#x81EA;&#x52A8;&#x5D29;&#x6E83;&#xFF0C;&#x5E76;&#x4E14;&#x629B;&#x51FA;AssertError&#x5F02;&#x5E38;&#xFF0C;condition&#x4E3A;&#x771F;&#xFF0C;&#x4E0D;&#x505A;&#x4EFB;&#x4F55;&#x64CD;&#x4F5C;assert conditionassert 3 &lt; 0print(f.closed)` Special Structure&#x5C0F;&#x7ED3;&#x2003;&#x2003;Special Structure&#x7279;&#x6B8A;&#x7ED3;&#x6784;&#x4F7F;&#x7528;&#x9891;&#x7387;&#x76F8;&#x5BF9;&#x8F83;&#x4F4E;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x7EF4;&#x62A4;&#x4EE3;&#x7801;&#x7A33;&#x5B9A;&#x6027;&#x65B9;&#x9762;&#x6709;&#x7740;&#x91CD;&#x8981;&#x7684;&#x5E94;&#x7528;&#xFF0C;&#x5F53;&#x51FA;&#x73B0;&#x5F02;&#x5E38;&#x65F6;&#x4E0D;&#x4F1A;&#x7EC8;&#x6B62;&#x7A0B;&#x5E8F;&#xFF0C;&#x800C;&#x662F;&#x5177;&#x6709;&#x53CB;&#x5584;&#x7684;&#x63D0;&#x793A;&#x754C;&#x9762;&#xFF0C;&#x9002;&#x5408;&#x4E8E;&#x4F01;&#x4E1A;&#x7EA7;&#x5E94;&#x7528;&#x5F00;&#x53D1;&#xFF0C;&#x56E0;&#x6B64;&#x8981;&#x719F;&#x7EC3;&#x638C;&#x63E1;&#x8FD9;&#x4E9B;&#x7279;&#x6B8A;&#x7ED3;&#x6784;&#x7684;&#x5E94;&#x7528;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>语言学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[File(文件)]]></title>
    <url>%2F2019%2F09%2F15%2Fpython_file%2F</url>
    <content type="text"><![CDATA[File&#x4ECB;&#x7ECD;&#x2003;&#x2003;&#x5B66;&#x4E60;&#x4E00;&#x95E8;&#x8BED;&#x8A00;&#xFF0C;&#x6700;&#x7EC8;&#x76EE;&#x7684;&#x662F;&#x89E3;&#x51B3;&#x5B9E;&#x9645;&#x7684;&#x751F;&#x6D3B;&#x95EE;&#x9898;&#xFF0C;&#x5C24;&#x5176;&#x662F;Python&#x8BED;&#x8A00;&#xFF0C;&#x51FA;&#x8272;&#x7684;&#x5E94;&#x7528;&#x5728;&#x4EBA;&#x5DE5;&#x667A;&#x80FD;&#x9886;&#x57DF;&#x3002;&#x4F46;&#x662F;&#x9762;&#x5BF9;&#x5927;&#x6570;&#x636E;&#x7684;&#x6D6A;&#x6F6E;&#xFF0C;&#x6570;&#x636E;&#x7684;&#x8BFB;&#x53D6;&#x662F;&#x4E00;&#x4E2A;&#x5173;&#x952E;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x56E0;&#x6B64;&#x6587;&#x4EF6;&#x64CD;&#x4F5C;&#x662F;&#x6211;&#x4EEC;&#x5FC5;&#x987B;&#x8981;&#x638C;&#x63E1;&#x7684;&#x5185;&#x5BB9;&#x3002; File&#x5E94;&#x7528;File&#x6253;&#x5F00;$$ \begin{array}{|c|c|} &#x6A21;&#x5F0F; &amp; &#x63CF;&#x8FF0; \ x &amp; &#x5199;&#x6A21;&#x5F0F;&#xFF0C;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#xFF0C;&#x5982;&#x679C;&#x8BE5;&#x6587;&#x4EF6;&#x5DF2;&#x5B58;&#x5728;&#x5219;&#x4F1A;&#x62A5;&#x9519;&#x3002; \ b &amp; &#x4E8C;&#x8FDB;&#x5236;&#x6A21;&#x5F0F;&#x3002; \ + &amp; &#x6253;&#x5F00;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#x8FDB;&#x884C;&#x66F4;&#x65B0;(&#x53EF;&#x8BFB;&#x53EF;&#x5199;)&#x3002; \ r &amp; &#x4EE5;&#x53EA;&#x8BFB;&#x65B9;&#x5F0F;&#x6253;&#x5F00;&#x6587;&#x4EF6;&#x3002;&#x6587;&#x4EF6;&#x7684;&#x6307;&#x9488;&#x5C06;&#x4F1A;&#x653E;&#x5728;&#x6587;&#x4EF6;&#x7684;&#x5F00;&#x5934;&#x3002; \ w &amp; &#x4EE5;&#x5199;&#x5165;&#x65B9;&#x5F0F;&#x6253;&#x5F00;&#x6587;&#x4EF6;&#x3002;&#x5982;&#x679C;&#x8BE5;&#x6587;&#x4EF6;&#x5DF2;&#x5B58;&#x5728;&#x5219;&#x4ECE;&#x5F00;&#x5934;&#x5F00;&#x59CB;&#x7F16;&#x8F91;&#x3002;&#x5426;&#x5219;&#x521B;&#x5EFA;&#x65B0;&#x6587;&#x4EF6;&#x3002; \ a &amp; &#x4EE5;&#x8FFD;&#x52A0;&#x65B9;&#x5F0F;&#x6253;&#x5F00;&#x6587;&#x4EF6;&#xFF0C;&#x5982;&#x679C;&#x8BE5;&#x6587;&#x4EF6;&#x4E0D;&#x5B58;&#x5728;&#x5219;&#x521B;&#x5EFA;&#x65B0;&#x6587;&#x4EF6;&#x5199;&#x5165;&#x3002; \ \end{array} $$12# open(file, mode=&apos;r&apos;, buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None) &#x6700;&#x91CD;&#x8981;&#x7684;f = open(&apos;dm01.txt&apos;, mode=&apos;a+&apos;) &#x4EE5;&#x8BFB;&#x5199;&#x7684;&#x65B9;&#x5F0F;&#x6253;&#x5F00;&#x6587;&#x4EF6;dm01.txt&#xFF0C;&#x7528;&#x4E8E;&#x5728;&#x6587;&#x4EF6;&#x540E;&#x8FFD;&#x52A0;&#x5185;&#x5BB9; File&#x64CD;&#x4F5C;1234567891011121314151617181920212223242526# file.flush() &#x5237;&#x65B0;&#x5185;&#x90E8;&#x7F13;&#x5B58;&#xFF0C;&#x5C06;&#x7F13;&#x5B58;&#x533A;&#x7684;&#x6570;&#x636E;&#x5199;&#x5165;&#x6587;&#x4EF6;# file.read(size) &#x4ECE;&#x6587;&#x4EF6;&#x8BFB;&#x53D6;size&#x5927;&#x5C0F;&#x7684;&#x5B57;&#x8282;&#xFF0C;&#x9ED8;&#x8BA4;&#x8BFB;&#x53D6;&#x6240;&#x6709;&#x5B57;&#x8282; # file.readline() &#x8BFB;&#x53D6;&#x6574;&#x884C;&#xFF0C;&#x5305;&#x62EC;&#x6362;&#x884C;&#x7B26;# file.readlines() &#x8BFB;&#x53D6;&#x6240;&#x6709;&#x884C;&#xFF0C;&#x5E76;&#x4EE5;&#x5217;&#x8868;&#x5F62;&#x5F0F;&#x8FD4;&#x56DE;# file.seek(n) &#x8BBE;&#x7F6E;&#x6587;&#x4EF6;&#x6307;&#x9488;&#x5F53;&#x524D;&#x4F4D;&#x7F6E;&#x6307;&#x5411;n# file.tell() &#x8FD4;&#x56DE;&#x6587;&#x4EF6;&#x6307;&#x9488;&#x5F53;&#x524D;&#x4F4D;&#x7F6E; # file.write() &#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x5199;&#x5165;&#x6587;&#x4EF6;&#xFF0C;&#x8FD4;&#x56DE;&#x5199;&#x5165;&#x7684;&#x5B57;&#x7B26;&#x957F;&#x5EA6;# file.writelines() &#x5411;&#x6587;&#x4EF6;&#x5199;&#x5165;&#x4E00;&#x4E2A;&#x5E8F;&#x5217;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x5217;&#x8868;&#xFF0C;&#x5982;&#x679C;&#x9700;&#x8981;&#x6362;&#x884C;&#x5219;&#x52A0;&#x5165;&#x6BCF;&#x884C;&#x7684;&#x6362;&#x884C;&#x7B26;# flie.close() &#x5173;&#x95ED;&#x6587;&#x4EF6;&#xFF0C;&#x5173;&#x95ED;&#x540E;&#x65E0;&#x6CD5;&#x8FDB;&#x884C;&#x8BFB;&#x5199;&#x64CD;&#x4F5C;f = open(&apos;dm01.txt&apos;, mode=&apos;r+&apos;, encoding=&apos;utf-8&apos;)ff.tell()f.seek(0)f.readlines()f.writelines([&apos;\nfile append1\nfile append2&apos;])f.seek(0)f.readlines()f.close() File&#x5C0F;&#x7ED3;&#x2003;&#x2003;&#x5BF9;&#x6587;&#x4EF6;&#x7684;&#x64CD;&#x4F5C;&#x7ECF;&#x5E38;&#x4F7F;&#x7528;&#x4E8E;&#x6587;&#x672C;&#x7684;&#x6279;&#x91CF;&#x5316;&#x4FEE;&#x6539;&#xFF0C;&#x5927;&#x6570;&#x636E;&#x7684;&#x8BFB;&#x53D6;&#x6216;&#x8005;&#x7F51;&#x9875;&#x722C;&#x866B;&#x7684;&#x5E94;&#x7528;&#x3002;&#x8FD9;&#x4E9B;&#x90FD;&#x5C5E;&#x4E8E;&#x8F83;&#x9AD8;&#x7EA7;&#x522B;&#x7684;&#x5E94;&#x7528;&#x9886;&#x57DF;&#xFF0C;&#x56E0;&#x6B64;&#x521D;&#x5B66;&#x8005;&#x5F88;&#x5C11;&#x4F7F;&#x7528;&#x5230;File&#x6587;&#x4EF6;&#x64CD;&#x4F5C;&#xFF0C;&#x4F46;&#x662F;&#x4E3A;&#x4E86;&#x4EE5;&#x540E;&#x5E94;&#x7528;&#x7684;&#x65B9;&#x4FBF;&#xFF0C;&#x5B66;&#x597D;&#x6587;&#x4EF6;&#x64CD;&#x4F5C;&#x662F;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x7684;&#xFF01; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>语言学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Set(集合)]]></title>
    <url>%2F2019%2F09%2F14%2Fpython_set%2F</url>
    <content type="text"><![CDATA[Set&#x4ECB;&#x7ECD;&#x2003;&#x2003;Python&#x4E2D;&#x7684;Set&#x662F;&#x96C6;&#x5408;&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x5176;&#x548C;&#x5217;&#x8868;&#xFF0C;&#x5143;&#x7EC4;&#x6700;&#x5927;&#x7684;&#x533A;&#x522B;&#x662F;&#x96C6;&#x5408;&#x4E2D;&#x4E0D;&#x5B58;&#x5728;&#x76F8;&#x540C;&#x7684;&#x5143;&#x7D20;&#x3002; Set&#x64CD;&#x4F5C;Python&#x521B;&#x5EFA;&#x96C6;&#x5408;12345# set(iterable) &#x5C06;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#x8F6C;&#x6362;&#x4E3A;set&#x7C7B;&#x578B;a = set(range(5))# {a, b, c, ...} &#x521B;&#x5EFA;&#x5143;&#x7D20;&#x4E3A;a, b, c, ...&#x7684;&#x96C6;&#x5408;&#xFF0C;&#x6CE8;&#x610F;&#x7A7A;&#x96C6;&#x5408;&#x4E0D;&#x80FD;&#x5199;{}&#xFF0C;&#x8981;&#x7528;set()&#x5B9A;&#x4E49;&#xFF0C;{}&#x9ED8;&#x8BA4;&#x4E3A;&#x5B57;&#x5178;&#x7C7B;&#x578B;b = {1, 2, 3, 4, 5} Python&#x96C6;&#x5408;&#x8FD0;&#x7B97;1234567a = {1, 2, 3, 4, 5}b = {3, 4, 5, 6, 7}# |(&#x6C42;&#x5E76;&#x96C6;)&#xFF0C;&amp;(&#x6C42;&#x4EA4;&#x96C6;)&#xFF0C;-(&#x6C42;&#x5DEE;&#x96C6;)&#xFF0C;^(&#x6C42;&#x5BF9;&#x79F0;&#x5DEE;&#x96C6;)&#xFF0C;==(&#x6BD4;&#x8F83;&#x662F;&#x5426;&#x76F8;&#x7B49;)&#xFF0C;!=(&#x6BD4;&#x8F83;&#x662F;&#x5426;&#x4E0D;&#x7B49;)&#xFF0C;&lt;(&#x6BD4;&#x8F83;&#x662F;&#x5426;&#x4E3A;&#x771F;&#x5B50;&#x96C6;)&#xFF0C;&lt;=(&#x6BD4;&#x8F83;&#x662F;&#x5426;&#x4E3A;&#x5B50;&#x96C6;)&#xFF0C;&gt;(&#x6BD4;&#x8F83;&#x662F;&#x5426;&#x4E3A;&#x771F;&#x8D85;&#x96C6;)&#xFF0C;&gt;=(&#x6BD4;&#x8F83;&#x662F;&#x5426;&#x4E3A;&#x8D85;&#x96C6;)a | ba &amp; ba - b Python&#x5411;&#x96C6;&#x5408;&#x4E2D;&#x589E;&#x52A0;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x4FEE;&#x6539;&#x5143;&#x7D20;1234567891011121314151617a = {1, 2, 3, 4, 5}# obj.add(ele) &#x5411;&#x96C6;&#x5408;&#x4E2D;&#x6DFB;&#x52A0;&#x5143;&#x7D20;&#xFF0C;&#x4E0D;&#x80FD;&#x6DFB;&#x52A0;&#x96C6;&#x5408;&#xFF0C;&#x5217;&#x8868;&#xFF0C;&#x5B57;&#x5178;&#x7C7B;&#x578B;&#xFF0C;&#x53EF;&#x4EE5;&#x6DFB;&#x52A0;&#x6570;&#x5B57;&#xFF0C;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x5143;&#x7EC4;&#x7C7B;&#x578B;&#xFF0C;&#x5982;&#x679C;&#x5DF2;&#x7ECF;&#x5B58;&#x5728;&#x4E8E;&#x96C6;&#x5408;&#x4E2D;&#xFF0C;&#x5219;&#x4E0D;&#x505A;&#x4EFB;&#x4F55;&#x64CD;&#x4F5C;a.add(6)a.add(3)# obj.remove(ele) &#x4ECE;&#x96C6;&#x5408;&#x4E2D;&#x5220;&#x9664;&#x5143;&#x7D20;ele&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x8BE5;&#x5143;&#x7D20;&#x4F1A;&#x62A5;&#x9519;a.remove(1)# obj.discard(ele) &#x4ECE;&#x96C6;&#x5408;&#x4E2D;&#x5220;&#x9664;&#x5143;&#x7D20;ele&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x8BE5;&#x5143;&#x7D20;&#x4E0D;&#x4F1A;&#x62A5;&#x9519;a.discard(2)# obj.pop() &#x4ECE;&#x96C6;&#x5408;&#x4E2D;&#x5220;&#x9664;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5E76;&#x8FD4;&#x56DE;&#x8BE5;&#x5143;&#x7D20;a.pop()# obj.clear() &#x5220;&#x9664;&#x6240;&#x6709;&#x5143;&#x7D20;a.clear() Set&#x5C0F;&#x7ED3;&#x2003;&#x2003;Set&#x96C6;&#x5408;&#x662F;&#x4F7F;&#x7528;&#x9891;&#x7387;&#x76F8;&#x5BF9;&#x8F83;&#x4F4E;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x4F7F;&#x7528;&#x5219;&#x4F1A;&#x5927;&#x5927;&#x63D0;&#x9AD8;&#x6548;&#x7387;&#xFF0C;&#x5728;&#x7EDF;&#x8BA1;&#x7C7B;&#x522B;&#x65F6;&#xFF0C;&#x5F88;&#x591A;&#x7269;&#x54C1;&#x5C5E;&#x4E8E;&#x540C;&#x4E00;&#x7C7B;&#xFF0C;&#x6B64;&#x65F6;&#x4E0D;&#x9700;&#x8981;&#x5173;&#x5FC3;&#x8BE5;&#x7269;&#x54C1;&#xFF0C;&#x5EFA;&#x7ACB;&#x96C6;&#x5408;&#x65F6;&#xFF0C;&#x53EF;&#x4EE5;&#x8282;&#x7701;&#x5927;&#x91CF;&#x7684;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#x548C;&#x7528;&#x6237;&#x67E5;&#x8BE2;&#x65F6;&#x95F4;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x67D0;&#x4E9B;&#x7279;&#x5B9A;&#x60C5;&#x51B5;&#x4E0B;&#x80FD;&#x53D1;&#x6325;&#x72EC;&#x7279;&#x7684;&#x4F18;&#x52BF;&#xFF0C;&#x6240;&#x4EE5;&#x4E5F;&#x8981;&#x719F;&#x7EC3;&#x638C;&#x63E1;Set&#x7684;&#x5E94;&#x7528;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>语言学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Dict(字典)]]></title>
    <url>%2F2019%2F09%2F14%2Fpython_dict%2F</url>
    <content type="text"><![CDATA[Dict&#x4ECB;&#x7ECD;&#x2003;&#x2003;Python&#x4E2D;&#x7684;Dict&#x662F;&#x4E00;&#x79CD;&#x54C8;&#x5E0C;&#x8868;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x662F;&#x7531;&#x952E;&#x503C;&#x5BF9;&#x6784;&#x6210;&#x7684;&#xFF0C;&#x4E00;&#x4E2A;Key&#x5BF9;&#x5E94;&#x4E00;&#x4E2A;Value&#xFF0C;&#x65B9;&#x4FBF;&#x6570;&#x636E;&#x7684;&#x67E5;&#x627E;&#x3002; Dict&#x64CD;&#x4F5C;Python&#x521B;&#x5EFA;&#x5B57;&#x5178;12345# dict.fromkeys(key, value) &#x751F;&#x6210;&#x4EE5;key&#x4E3A;&#x5173;&#x952E;&#x5B57;&#xFF0C;value&#x4E3A;&#x503C;&#x7684;&#x5B57;&#x5178;&#xFF0C;&#x521D;&#x59CB;&#x65F6;&#x6240;&#x6709;&#x7684;key&#x5BF9;&#x5E94;&#x7684;&#x503C;&#x90FD;&#x76F8;&#x540C;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;Nonea = dict.fromkeys([1, 2, 3])# {a:aa, b:bb, ...}&#x521B;&#x5EFA;Key&#x4E3A;a, b, ...&#xFF0C;Value&#x4E3A;aa, bb, ...&#x7684;&#x5B57;&#x5178;b = {1:None, 2:None, 3:None} Python&#x7D22;&#x5F15;&#x5B57;&#x5178;&#x5143;&#x7D20;12345678910a = {1:&apos;one&apos;, 2:2, 3:True}# &#x548C;&#x5217;&#x8868;&#xFF0C;&#x5143;&#x7EC4;&#xFF0C;&#x5B57;&#x7B26;&#x4E32;&#x4E0D;&#x540C;&#xFF0C;&#x5B57;&#x5178;&#x7684;&#x7D22;&#x5F15;&#x662F;&#x65E0;&#x5E8F;&#x7684;&#xFF0C;&#x53EA;&#x80FD;&#x6839;&#x636E;Key&#x6765;&#x7D22;&#x5F15;a[1]# obj.get(key, value) &#x82E5;key&#x5728;&#x5173;&#x952E;&#x5B57;&#x4E2D;&#xFF0C;&#x5219;&#x8FD4;&#x56DE;&#x5176;&#x503C;&#xFF0C;&#x5426;&#x5219;&#x8FD4;&#x56DE;value&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;Nonea.get(1)# obj.setdefault(key, value) &#x82E5;key&#x5728;&#x5173;&#x952E;&#x5B57;&#x4E2D;&#xFF0C;&#x5219;&#x8FD4;&#x56DE;&#x5176;&#x503C;&#xFF0C;&#x5426;&#x5219;&#x7ED9;&#x5B57;&#x5178;&#x6DFB;&#x52A0;(key, value)value&#x9ED8;&#x8BA4;&#x4E3A;Nonea.setdefault(4, &apos;four&apos;) Python&#x83B7;&#x5F97;&#x6240;&#x6709;&#x7684;&#x952E;&#xFF0C;&#x503C;&#x4FE1;&#x606F;12345678910a = {1:&apos;one&apos;, 2:2, 3:True}# obj.keys() &#x83B7;&#x53D6;&#x5B57;&#x5178;&#x7684;&#x6240;&#x6709;&#x952E;a.keys()# obj.values() &#x83B7;&#x53D6;&#x5B57;&#x5178;&#x7684;&#x6240;&#x6709;&#x503C;a.values()# obj.items() &#x83B7;&#x53D6;&#x5B57;&#x5178;&#x7684;&#x6240;&#x6709;&#x952E;&#x503C;&#x5BF9;a.items() Python&#x589E;&#x52A0;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x4FEE;&#x6539;&#x5B57;&#x5178;&#x5143;&#x7D20;1234567891011121314151617a = {1:&apos;one&apos;, 2:2, 3:True}# obj[key] = value &#x5C06;&#x5B57;&#x5178;&#x7684;key&#x5BF9;&#x5E94;&#x7684;&#x503C;&#x6539;&#x4E3A;value&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x5B58;&#x5728;&#x5219;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x952E;&#x503C;&#x5BF9;(key, value)a[3] = Falsea[4] = &apos;FOUR&apos;# del obj[key] &#x5C06;&#x5B57;&#x5178;&#x4E2D;&#x7684;key&#x5BF9;&#x5E94;&#x7684;&#x952E;&#x503C;&#x5BF9;&#x5220;&#x9664;del a[4]# obj.pop(key) &#x5F39;&#x51FA;&#x5173;&#x952E;&#x5B57;&#x4F4D;key&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x5176;Valuea.pop(1)# obj.popitem() &#x5F39;&#x51FA;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x5176;&#x952E;&#x503C;&#x5BF9;a.popitem()# obj.clear() &#x5220;&#x9664;&#x6240;&#x6709;&#x5143;&#x7D20;a.clear() Python&#x5B57;&#x5178;&#x5408;&#x5E76;12345a = {1:&apos;one&apos;, 2:2, 3:True}b = {1:&apos;ONE&apos;, 4:4, 5:False}# obj.update(obj1) &#x7ED9;&#x5B57;&#x5178;obj&#x6DFB;&#x52A0;&#x53E6;&#x4E00;&#x4E2A;&#x5B57;&#x5178;obj1&#xFF0C;&#x4E24;&#x4E2A;&#x5B57;&#x5178;&#x53D6;&#x5E76;&#x96C6;&#xFF0C;&#x5982;&#x679C;&#x5177;&#x6709;&#x76F8;&#x540C;&#x7684;Key&#x5219;&#x503C;&#x4E3A;obj1&#x4E2D;key&#x5BF9;&#x5E94;&#x7684;&#x503C;a.update(b) Python&#x5224;&#x65AD;&#x5173;&#x952E;&#x5B57;&#x662F;&#x5426;&#x5728;&#x5B57;&#x5178;&#x4E2D;12345a = {1:&apos;one&apos;, 2:2, 3:True}# key in obj&#xFF0C;&#x5224;&#x65AD;key&#x662F;&#x5426;&#x5728;obj&#x7684;&#x5173;&#x952E;&#x5B57;&#x4E2D;&#xFF0C;key not in obj&#xFF0C;&#x5224;&#x65AD;key&#x662F;&#x5426;&#x4E0D;&#x5728;obj&#x7684;&#x5173;&#x952E;&#x5B57;&#x4E2D;b = 2 in ac = 4 not in a Dict&#x5C0F;&#x7ED3;&#x2003;&#x2003;Dict&#x5B57;&#x5178;&#x662F;Python&#x4E2D;&#x4E00;&#x79CD;&#x91CD;&#x8981;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x5728;&#x5927;&#x6570;&#x636E;&#x7684;&#x5B58;&#x50A8;&#x6216;&#x8005;&#x7EDF;&#x8BA1;&#x5404;&#x5206;&#x6570;&#x6BB5;&#x4EBA;&#x6570;&#x65F6;&#xFF0C;&#x6709;&#x65F6;&#x4E3A;&#x4E86;&#x4FBF;&#x4E8E;&#x67E5;&#x8BE2;&#xFF0C;&#x9700;&#x8981;&#x5EFA;&#x7ACB;&#x5B57;&#x5178;&#xFF0C;&#x7D22;&#x5F15;&#x65F6;&#x53EA;&#x9700;&#x8981;&#x5173;&#x952E;&#x5B57;Key&#xFF0C;&#x53EF;&#x4EE5;&#x8282;&#x7701;&#x5927;&#x91CF;&#x7684;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#x548C;&#x7528;&#x6237;&#x67E5;&#x8BE2;&#x65F6;&#x95F4;&#xFF0C;&#x56E0;&#x6B64;&#x4F7F;&#x7528;&#x7684;&#x9891;&#x7387;&#x975E;&#x5E38;&#x9AD8;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x7075;&#x6D3B;&#x638C;&#x63E1;Dict&#x7684;&#x5E94;&#x7528;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>语言学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Str(字符串)]]></title>
    <url>%2F2019%2F09%2F13%2Fpython_str%2F</url>
    <content type="text"><![CDATA[Str&#x4ECB;&#x7ECD;&#x2003;&#x2003;Python&#x4E2D;&#x7684;Str&#x662F;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;C/C++&#x4E2D;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x4F46;&#x662F;&#x66F4;&#x52A0;&#x7075;&#x6D3B;&#xFF0C;&#x5177;&#x6709;&#x5F88;&#x591A;&#x5185;&#x7F6E;&#x7684;API&#x3002; Str&#x64CD;&#x4F5C;Python&#x521B;&#x5EFA;&#x5B57;&#x7B26;&#x4E32;12345678# str(obj) &#x5C06;obj&#x8F6C;&#x6362;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x4E00;&#x822C;&#x7528;&#x6765;&#x5C06;&#x6570;&#x5B57;&#x8F6C;&#x6362;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;a = str(123)# &apos;abc...&apos;&#x6216;&#x8005;&quot;abc...&quot; &#x521B;&#x5EFA;&#x503C;&#x4E3A;abc...&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x5982;&#x679C;&#x5B57;&#x7B26;&#x4E32;&#x672C;&#x8EAB;&#x5177;&#x6709;&#x5355;&#x5F15;&#x53F7;&#x5219;&#x521B;&#x5EFA;&#x65F6;&#x8981;&#x7528;&#x53CC;&#x5F15;&#x53F7;&#xFF0C;&#x5982;&#x679C;&#x5B57;&#x7B26;&#x4E32;&#x672C;&#x8EAB;&#x5177;&#x6709;&#x53CC;&#x5F15;&#x53F7;&#xFF0C;&#x5219;&#x521B;&#x5EFA;&#x65F6;&#x8981;&#x7528;&#x5355;&#x5F15;&#x53F7;b = &apos;Hello Python&apos;c = &quot;Hello World&quot;d = &apos;I love &quot;Python&quot;&apos;e = &quot;I love &apos;coding&apos;&quot; Python&#x7D22;&#x5F15;&#x5B57;&#x7B26;&#x4E32;&#x5143;&#x7D20;1234# &#x548C;C/C++&#x76F8;&#x540C;&#xFF0C;&#x901A;&#x8FC7;&#x4E2D;&#x62EC;&#x53F7;[]&#x7D22;&#x5F15;&#x5B57;&#x7B26;&#x4E32;&#x5143;&#x7D20;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;:&#x8FD0;&#x7B97;&#x7B26;&#x83B7;&#x53D6;&#x8FDE;&#x7EED;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x8D1F;&#x6570;&#x7D22;&#x5F15;&#x4E3A;&#x4ECE;&#x540E;&#x5411;&#x524D;&#x7D22;&#x5F15;&#xFF0C;-1&#x4EE3;&#x8868;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;-2&#x4EE3;&#x8868;&#x5012;&#x6570;&#x7B2C;&#x4E8C;&#x4E2A;&#x5143;&#x7D20;a = &apos;Hello Python&apos;b = a[:2]c = a[4] Python&#x5411;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x589E;&#x52A0;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x4FEE;&#x6539;&#x5143;&#x7D20;123# Python&#x4E2D;&#x5B57;&#x7B26;&#x4E32;&#x6CA1;&#x6709;append&#xFF0C;pop&#x7B49;API&#xFF0C;&#x5982;&#x679C;&#x60F3;&#x4FEE;&#x6539;&#x5143;&#x7D20;&#x5FC5;&#x987B;&#x91C7;&#x7528;&#x7B97;&#x672F;&#x8FD0;&#x7B97;&#x4FEE;&#x6539;&#x5143;&#x7D20;a = &apos;Hello pythan&apos;a = a[:-2] + &apos;o&apos; + a[-1] Python&#x5B57;&#x7B26;&#x4E32;&#x5927;&#x5C0F;&#x5199;&#x8F6C;&#x6362;12345678910111213141516a = &apos;heLLo pythOn&apos;# obj.capitalize() &#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x6539;&#x4E3A;&#x5927;&#x5199;&#xFF0C;&#x5176;&#x4ED6;&#x5B57;&#x7B26;&#x6539;&#x4E3A;&#x5C0F;&#x5199;&#x5E76;&#x8FD4;&#x56DE;b = a.capitalize()# obj.title() &#x5C06;&#x6BCF;&#x4E2A;&#x5355;&#x8BCD;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x6539;&#x4E3A;&#x5927;&#x5199;&#xFF0C;&#x5176;&#x4ED6;&#x5B57;&#x7B26;&#x6539;&#x4E3A;&#x5C0F;&#x5199;&#x5E76;&#x8FD4;&#x56DE;c = a.title()# obj.lower() &#x5C06;&#x5927;&#x5199;&#x8F6C;&#x6362;&#x4E3A;&#x5C0F;&#x5199;d =a.lower()# obj.upper() &#x5C06;&#x5C0F;&#x5199;&#x8F6C;&#x6362;&#x4E3A;&#x5927;&#x5199;e = a.upper()# obj.swapcase() &#x5C06;&#x5927;&#x5C0F;&#x5199;&#x5B57;&#x7B26;&#x7FFB;&#x8F6C;&#xFF0C;&#x5927;&#x5199;&#x53D8;&#x5C0F;&#x5199;&#xFF0C;&#x5C0F;&#x5199;&#x53D8;&#x5927;&#x5199;f = a.swapcase() Python&#x5B57;&#x7B26;&#x4E32;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;1234# obj1 op obj2 &#x5C06;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x8FDB;&#x884C;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;&#xFF0C;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5F00;&#x59CB;&#x6BD4;&#x8F83;&#xFF0C;&#x5982;&#x679C;&#x76F8;&#x540C;&#x7EE7;&#x7EED;&#x6BD4;&#x8F83;a = &apos;hello world&apos;b = &apos;hello python&apos;a &gt; b Python&#x5B57;&#x7B26;&#x4E32;&#x4E58;&#x6CD5;123# obj * n&#xFF0C;n&#x4E3A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x5C06;obj&#x590D;&#x5236;n&#x6B21;a = &apos;hello world &apos;b = a * 3 Python&#x5224;&#x65AD;&#x5143;&#x7D20;&#x662F;&#x5426;&#x5728;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;1234# data in obj&#xFF0C;&#x5224;&#x65AD;data&#x662F;&#x5426;&#x5728;obj&#x4E2D;&#xFF0C;data not in obj&#xFF0C;&#x5224;&#x65AD;data&#x662F;&#x5426;&#x4E0D;&#x5728;obj&#x4E2D;a = &apos;hello world&apos;b = &apos;he&apos; in ac = &apos;she&apos; not in a Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;123# obj.count(data) &#x6C42;data&#x5728;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;a = &apos;hello world&apos;a.count(&apos;l&apos;) Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;1234# obj.index(data, begin, end) &#x4ECE;begin&#x5230;end-1&#x4E2D;&#x7D22;&#x5F15;&#x7B2C;&#x4E00;&#x6B21;&#x51FA;&#x73B0;data&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x9ED8;&#x8BA4;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;a = &apos;hello world&apos;a.index(&apos;l&apos;)a.index(&apos;l&apos;, 4) Python&#x5B57;&#x7B26;&#x4E32;&#x4E0E;&#x5217;&#x8868;&#x6216;&#x5143;&#x7EC4;&#x7684;&#x8F6C;&#x6362;1234567891011a = &apos;string&apos;b = [&apos;L&apos;, &apos;i&apos;, &apos;s&apos;, &apos;t&apos;]c = (&apos;T&apos;, &apos;u&apos;, &apos;p&apos;, &apos;l&apos;, &apos;e&apos;)# list(obj)&#x6216;&#x8005;tuple(obj) &#x5B57;&#x7B26;&#x4E32;&#x8F6C;&#x6362;&#x6210;&#x5217;&#x8868;&#x6216;&#x8005;&#x5143;&#x7EC4;&#xFF0C;&#x8F6C;&#x6362;&#x540E;&#x5217;&#x8868;&#x6216;&#x8005;&#x5143;&#x7EC4;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x4E3A;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;d = list(a)e = tuple(a)# &apos;&apos;.join(obj) &#x5C06;obj&#x8F6C;&#x6362;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;f = &apos;&apos;.join(b)g = &apos;&apos;.join(c) Python&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x7FFB;&#x8F6C;123456789a = &apos;hello python&apos;# &#x901A;&#x8FC7;&#x7D22;&#x5F15;&#x7FFB;&#x8F6C;[::-1]a[::-1]# Python&#x4E0D;&#x5141;&#x8BB8;&#x5B57;&#x7B26;&#x4E32;&#x8FDB;&#x884C;&#x7FFB;&#x8F6C;&#xFF0C;&#x4F46;&#x662F;&#x53EF;&#x4EE5;&#x501F;&#x52A9;&#x5217;&#x8868;&#x8FDB;&#x884C;&#x7FFB;&#x8F6C;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8F6C;&#x6362;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#x5373;&#x53EF;a = list(a)a.reverse()a = &apos;&apos;.join(a) Python&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x6392;&#x5E8F;123456a = &apos;abcabbc&apos;# Python&#x4E0D;&#x5141;&#x8BB8;&#x5B57;&#x7B26;&#x4E32;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x4F46;&#x662F;&#x53EF;&#x4EE5;&#x501F;&#x52A9;&#x5217;&#x8868;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8F6C;&#x6362;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#x5373;&#x53EF;a = list(a)a.sort()a = &apos;&apos;.join(a) Python&#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x7C7B;&#x578B;123456789101112131415161718a = &apos;1a2b3c&apos;b = &apos;abcdef&apos;c = &apos;123456&apos;# obj.isalnum() &#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x5168;&#x662F;&#x5B57;&#x6BCD;&#x6216;&#x6570;&#x5B57;a.isalnum()# obj.isalpha() &#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x5168;&#x662F;&#x5B57;&#x7B26;b.isalpha()# obj.isdigit() &#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x5168;&#x662F;&#x6570;&#x5B57;c.isdigit()# obj.islower() &#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x5168;&#x662F;&#x5C0F;&#x5199;&#x5B57;&#x6BCD;b.islower()# obj.isupper() &#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x5168;&#x662F;&#x5927;&#x5199;&#x5B57;&#x6BCD;b.isupper() Python&#x5B57;&#x7B26;&#x4E32;&#x5C45;&#x4E2D;1234a = &apos;----------&apos;# obj.center(width, fillchar) &#x5B57;&#x7B26;&#x4E32;&#x5C45;&#x4E2D;&#xFF0C;&#x603B;&#x957F;&#x5EA6;&#x4E3A;width&#xFF0C;&#x4E24;&#x8FB9;&#x586B;&#x5145;&#x7684;&#x5B57;&#x7B26;&#x4E3A;fillchar&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x7A7A;&#x683C;a.center(20) Python&#x67E5;&#x627E;&#x5B50;&#x4E32;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;12345a = &apos;abcabbc&apos;# obj.count(str, begin, end) &#x67E5;&#x627E;&#x5B50;&#x4E32;str&#x4ECE;begin&#x5230;end-1&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x9ED8;&#x8BA4;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;a.count(&apos;ab&apos;)a.count(&apos;ab&apos;, 1) Python&#x67E5;&#x8BE2;&#x5B57;&#x7B26;&#x4E32;&#x5F00;&#x5934;&#x6216;&#x8005;&#x7ED3;&#x5C3E;&#x662F;&#x5426;&#x4E3A;&#x67D0;&#x4E00;&#x5B50;&#x4E32;1234567a = &apos;abcabbc&apos;# obj.startswith(str, begin, end) &#x5224;&#x65AD;obj&#x4ECE;begin&#x5230;end-1&#x662F;&#x5426;&#x4EE5;str&#x5F00;&#x5934;a.startswith(&apos;abc&apos;)# obj.endswith(str, begin, end) &#x5224;&#x65AD;obj&#x4ECE;begin&#x5230;end-1&#x662F;&#x5426;&#x4EE5;str&#x7ED3;&#x5C3E;a.endswith(&apos;bc&apos;) Python&#x6C42;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x5B50;&#x4E32;&#x7684;&#x7D22;&#x5F15;123456789a = &apos;abcabbc&apos;# obj.find(str, begin, end) &#x4ECE;&#x5DE6;&#x8FB9;&#x67E5;&#x627E;&#x5B50;&#x4E32;str&#x4ECE;begin&#x5230;end-1&#x51FA;&#x73B0;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x9ED8;&#x8BA4;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;a.find(&apos;abb&apos;)a.find(&apos;abbds&apos;)# obj.rfind(str, begin, end) &#x4ECE;&#x53F3;&#x8FB9;&#x67E5;&#x627E;&#x5B50;&#x4E32;str&#x4ECE;begin&#x5230;end-1&#x51FA;&#x73B0;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x9ED8;&#x8BA4;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;a.rfind(&apos;abb&apos;)a.rfind(&apos;abbds&apos;) Python&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x5DE6;&#x8FB9;&#x6216;&#x53F3;&#x8FB9;&#x7684;&#x5B57;&#x7B26;&#x5220;&#x53BB;12345678910a = &apos;abcabba&apos;# obj.lstrip(str) &#x5C06;&#x5DE6;&#x8FB9;&#x7684;str&#x5B57;&#x7B26;&#x5220;&#x53BB;&#xFF0C;&#x5982;&#x679C;str&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#x5219;&#x4EE3;&#x8868;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x5B57;&#x7B26;&#x90FD;&#x5220;&#x53BB;a.lstrip(&apos;a&apos;)# obj.rstrip(str) &#x5C06;&#x53F3;&#x8FB9;&#x7684;str&#x5B57;&#x7B26;&#x5220;&#x53BB;&#xFF0C;&#x5982;&#x679C;str&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#x5219;&#x4EE3;&#x8868;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x5B57;&#x7B26;&#x90FD;&#x5220;&#x53BB;a.rstrip(&apos;a&apos;)# obj.strip(str) &#x5C06;&#x5DE6;&#x8FB9;&#x548C;&#x53F3;&#x8FB9;&#x7684;str&#x5B57;&#x7B26;&#x5220;&#x53BB;&#xFF0C;&#x5982;&#x679C;str&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#x5219;&#x4EE3;&#x8868;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x5B57;&#x7B26;&#x90FD;&#x5220;&#x53BB;a.strip(&apos;a&apos;) Python&#x66FF;&#x6362;&#x5B57;&#x7B26;&#x4E32;1234a = &apos;abcabbc&apos;# obj.replace(old, new) &#x5C06;old&#x5B50;&#x4E32;&#x7528;new&#x66FF;&#x4EE3;a.replace(&apos;abb&apos;, &apos;cdd&apos;) Python&#x62C6;&#x5206;&#x5B57;&#x7B26;&#x4E32;12345a = &apos;abcabbc&apos;# obj.partition(str) &#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x62C6;&#x5206;&#x4E3A;3&#x90E8;&#x5206;&#xFF0C;str&#x4E4B;&#x524D;&#x7684;&#x90E8;&#x5206;&#xFF0C;str&#xFF0C;str&#x4E4B;&#x540E;&#x7684;&#x90E8;&#x5206;# obj.split(str) &#x5C06;obj&#x6309;&#x7167;str&#x62C6;&#x5206;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x7A7A;&#x683C;&#x62C6;&#x5206; Python&#x5B57;&#x7B26;&#x4E32;&#x683C;&#x5F0F;&#x5316;$$ \begin{array}{|c|c|} &#x683C;&#x5F0F; &amp; &#x63CF;&#x8FF0; \ \%c &amp; &#x4EE5;ASCII&#x7801;&#x683C;&#x5F0F;&#x5316;&#x5B57;&#x7B26; \ \%s &amp; &#x683C;&#x5F0F;&#x5316;&#x5B57;&#x7B26;&#x4E32; \ \%d &amp; &#x683C;&#x5F0F;&#x5316;&#x6574;&#x6570; \ \%m.nf &amp; &#x683C;&#x5F0F;&#x5316;&#x6D6E;&#x70B9;&#x6570;&#xFF0C;m&#x6307;&#x603B;&#x957F;&#x5EA6;&#xFF0C;n&#x6307;&#x5C0F;&#x6570;&#x70B9;&#x540E;&#x9762;&#x7684;&#x7CBE;&#x5EA6;&#xFF0C;&#x4E0D;&#x591F;&#x5728;&#x5DE6;&#x4FA7;&#x8865;&#x7A7A;&#x683C; \ \%-m.nf &amp; &#x683C;&#x5F0F;&#x5316;&#x6D6E;&#x70B9;&#x6570;&#xFF0C;m&#x6307;&#x603B;&#x957F;&#x5EA6;&#xFF0C;n&#x6307;&#x5C0F;&#x6570;&#x70B9;&#x540E;&#x9762;&#x7684;&#x7CBE;&#x5EA6;&#xFF0C;&#x4E0D;&#x591F;&#x5728;&#x53F3;&#x4FA7;&#x8865;&#x7A7A;&#x683C; \ \end{array} $$12345678910# &apos;{}...{}...&apos;.format(&apos;xxx&apos;, &apos;yyy&apos;, ...) &#x5C06;xxx&#xFF0C;yyy&#x586B;&#x5165;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x82B1;&#x62EC;&#x53F7;&#x4E2D;s1 = &apos;{}&#x7684;&#x7F51;&#x5740;&#x662F;&quot;{}&quot;&apos;.format(&apos;&#x963F;&#x91CC;&#x5DF4;&#x5DF4;&apos;, &apos;www.alibabagroup.com&apos;)s2 = &apos;{0}&#x7684;&#x7F51;&#x5740;&#x662F;&quot;{1}&quot;&apos;.format(&apos;&#x817E;&#x8BAF;&apos;, &apos;www.tencent.com&apos;)s3 = &apos;{name}&#x7684;&#x7F51;&#x5740;&#x662F;&quot;{site}&quot;&apos;.format(name=&apos;&#x767E;&#x5EA6;&apos;, site=&apos;www.baidu.com&apos;)# &apos;{0:x}...{1:y}...&apos;.format(&apos;xxx&apos;, &apos;yyy&apos;, ...) &#x5C06;xxx&#xFF0C;yyy&#x586B;&#x5165;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x82B1;&#x62EC;&#x53F7;&#x4E2D;&#xFF0C;x&#x548C;y&#x6307;&#x8F93;&#x5165;&#x7684;&#x683C;&#x5F0F;&#xFF0C;&#x53EF;&#x4EE5;&#x8FBE;&#x5230;&#x7F8E;&#x5316;&#x6548;&#x679C;s4 = &apos;{name:10s}==&gt;{id:10d}&apos;.format(name=&apos;&#x5F20;&#x4E09;&apos;, id=1)# &apos;&#x683C;&#x5F0F;1, &#x683C;&#x5F0F;2, &#x683C;&#x5F0F;3&apos; %(&#x6570;&#x636E;1, &#x6570;&#x636E;2, &#x6570;&#x636E;3) &#x5C06;&#x6570;&#x636E;1&#x4EE5;&#x683C;&#x5F0F;1&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x6570;&#x636E;2&#x4EE5;&#x683C;&#x5F0F;2&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x6570;&#x636E;3&#x4EE5;&#x683C;&#x5F0F;3&#x7684;&#x65B9;&#x5F0F;&#x653E;&#x5165;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#xFF0C;&#x6CE8;&#x610F;&#x683C;&#x5F0F;&#x4E0E;&#x6570;&#x636E;&#x76F4;&#x63A5;&#x6CA1;&#x6709;&#x9017;&#x53F7;&#x8FDE;&#x63A5;s5 = &apos;%s&#xFF1A;%d/%d/%d&apos; %(&apos;&#x4ECA;&#x5929;&#x7684;&#x65E5;&#x671F;&#x4E3A;&apos;, 2019, 9, 18) Str&#x5C0F;&#x7ED3;&#x2003;&#x2003;Str&#x5B57;&#x7B26;&#x4E32;&#x662F;Python&#x4E2D;&#x4E00;&#x79CD;&#x5E38;&#x89C1;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x5728;&#x5B9E;&#x9645;&#x7684;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x7ECF;&#x5E38;&#x6709;&#x8BB8;&#x591A;&#x6570;&#x636E;&#x65E0;&#x6CD5;&#x7528;&#x6570;&#x5B57;&#x8868;&#x793A;&#xFF0C;&#x5982;&#x59D3;&#x540D;&#xFF0C;&#x5730;&#x5740;&#x7B49;&#x4FE1;&#x606F;&#xFF0C;&#x56E0;&#x6B64;&#x4F7F;&#x7528;&#x7684;&#x9891;&#x7387;&#x4E5F;&#x662F;&#x975E;&#x5E38;&#x9AD8;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x7075;&#x6D3B;&#x638C;&#x63E1;Str&#x7684;&#x5E94;&#x7528;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>语言学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Tuple(元组)]]></title>
    <url>%2F2019%2F09%2F12%2Fpython_tuple%2F</url>
    <content type="text"><![CDATA[Tuple&#x4ECB;&#x7ECD;&#x2003;&#x2003;Python&#x4E2D;&#x7684;Tuple&#x7C7B;&#x4F3C;&#x4E8E;&#x4E00;&#x79CD;&#x5E26;&#x4E0A;&#x67B7;&#x9501;&#x7684;&#x5217;&#x8868;&#xFF0C;&#x529F;&#x80FD;&#x548C;List&#x7C7B;&#x4F3C;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x80FD;&#x591F;&#x4FEE;&#x6539;&#x5176;&#x4E2D;&#x7684;&#x5143;&#x7D20;&#x548C;&#x987A;&#x5E8F;&#x3002; Tuple&#x64CD;&#x4F5C;Python&#x521B;&#x5EFA;&#x5143;&#x7EC4;1234567# tuple(iterable) &#x5C06;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#x8F6C;&#x6362;&#x4E3A;tuple&#x7C7B;&#x578B;a = tuple(range(5))# (a, b, c, ...) &#x6216;&#x8005; a, b, c, ...&#x521B;&#x5EFA;&#x5143;&#x7D20;&#x4E3A;a, b, c, ...&#x7684;&#x5143;&#x7EC4;&#xFF0C;&#x521B;&#x5EFA;&#x5355;&#x5143;&#x7D20;&#x5143;&#x7EC4;&#x65F6;&#xFF0C;&#x9700;&#x8981;&#x52A0;&#x9017;&#x53F7;,b = (1, 3.14, &apos;hello world&apos;, True, [1, 2, 3])c = 1, 2, 3d = (2,) Python&#x7D22;&#x5F15;&#x5143;&#x7EC4;&#x5143;&#x7D20;12345# &#x901A;&#x8FC7;&#x4E2D;&#x62EC;&#x53F7;[]&#x7D22;&#x5F15;&#x5143;&#x7EC4;&#x5143;&#x7D20;&#xFF0C;&#x548C;List&#x76F8;&#x540C;a = (1, 3.14, &apos;hello world&apos;, True, (1, 2, 3)) b = a[1:3]c = a[4]d = a[4][1] Python&#x5411;&#x5143;&#x7EC4;&#x4E2D;&#x589E;&#x52A0;&#xFF0C;&#x5220;&#x9664;&#xFF0C;&#x4FEE;&#x6539;&#x5143;&#x7D20;1234a = (1, 3, 6, 7, 9)# Python&#x4E2D;&#x4E0D;&#x5141;&#x8BB8;&#x5728;&#x539F;&#x6765;&#x7684;&#x5143;&#x7EC4;&#x4E0A;&#x4FEE;&#x6539;&#x4EFB;&#x4F55;&#x5143;&#x7D20;&#xFF0C;List&#x4E2D;&#x7684;append&#xFF0C;pop&#xFF0C;&#x90FD;&#x65E0;&#x6CD5;&#x4F7F;&#x7528;&#xFF0C;&#x5982;&#x679C;&#x60F3;&#x4FEE;&#x6539;&#x5143;&#x7D20;&#x5FC5;&#x987B;&#x91C7;&#x7528;&#x7B97;&#x672F;&#x8FD0;&#x7B97;&#x4FEE;&#x6539;&#x5143;&#x7D20;b = a[:2] + (5,) + a[3:] Python&#x5143;&#x7EC4;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;1234# obj1 op obj2 &#x5C06;&#x4E24;&#x4E2A;&#x5143;&#x7EC4;&#x8FDB;&#x884C;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;&#xFF0C;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5F00;&#x59CB;&#x6BD4;&#x8F83;&#xFF0C;&#x5982;&#x679C;&#x76F8;&#x540C;&#x7EE7;&#x7EED;&#x6BD4;&#x8F83;a = (1, 3.14, &apos;hello world&apos;, True, [1, 2, 3])b = (1, 2.71, &apos;hello world&apos;, True, [1, 2, 3]) a &gt; b Python&#x5143;&#x7EC4;&#x4E58;&#x6CD5;123# obj * n&#xFF0C;n&#x4E3A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x5C06;obj&#x590D;&#x5236;n&#x6B21;a = (1, 3.14, True, [1, 2, 3])b = a * 3 Python&#x5224;&#x65AD;&#x5143;&#x7D20;&#x662F;&#x5426;&#x5728;&#x5143;&#x7EC4;&#x4E2D;1234# data in obj&#xFF0C;&#x5224;&#x65AD;data&#x662F;&#x5426;&#x5728;obj&#x4E2D;&#xFF0C;data not in obj&#xFF0C;&#x5224;&#x65AD;data&#x662F;&#x5426;&#x4E0D;&#x5728;obj&#x4E2D;a = (1, 3.14, True, [1, 2, 3])b = 3.14 in ac = True not in a Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;123# obj.count(data) &#x6C42;data&#x5728;&#x5143;&#x7EC4;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;a = (1, 3, 1, 2, 5)a.count(1) Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;1234# obj.index(data, begin, end) &#x4ECE;begin&#x5230;end-1&#x4E2D;&#x7D22;&#x5F15;&#x7B2C;&#x4E00;&#x6B21;&#x51FA;&#x73B0;data&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x9ED8;&#x8BA4;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;a = (1, 3, 1, 2, 5)a.index(1)a.index(1, 1, 3) Python&#x5C06;&#x5143;&#x7EC4;&#x7FFB;&#x8F6C;123456789a = (1, 3, 1, 2, 5)# &#x901A;&#x8FC7;&#x7D22;&#x5F15;&#x7FFB;&#x8F6C;[::-1]a[::-1]# Python&#x4E0D;&#x5141;&#x8BB8;&#x5143;&#x7EC4;&#x8FDB;&#x884C;&#x7FFB;&#x8F6C;&#xFF0C;&#x4F46;&#x662F;&#x5143;&#x7EC4;&#x548C;&#x5217;&#x8868;&#x90FD;&#x662F;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#xFF0C;&#x53EF;&#x4EE5;&#x4E92;&#x76F8;&#x8F6C;&#x6362;&#xFF0C;&#x4E8E;&#x662F;&#x53EF;&#x4EE5;&#x5148;&#x8F6C;&#x6362;&#x4E3A;&#x5217;&#x8868;&#x8FDB;&#x884C;&#x7FFB;&#x8F6C;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8F6C;&#x6362;&#x4E3A;&#x5143;&#x7EC4;&#x5373;&#x53EF;a = list(a)a.reverse()a = tuple(a) Python&#x5C06;&#x5217;&#x8868;&#x6392;&#x5E8F;12345# Python&#x4E0D;&#x5141;&#x8BB8;&#x5143;&#x7EC4;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x4F46;&#x662F;&#x5143;&#x7EC4;&#x548C;&#x5217;&#x8868;&#x90FD;&#x662F;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#xFF0C;&#x53EF;&#x4EE5;&#x4E92;&#x76F8;&#x8F6C;&#x6362;&#xFF0C;&#x4E8E;&#x662F;&#x53EF;&#x4EE5;&#x5148;&#x8F6C;&#x6362;&#x4E3A;&#x5217;&#x8868;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8F6C;&#x6362;&#x4E3A;&#x5143;&#x7EC4;&#x5373;&#x53EF;a = (1, 3, 1, 2, 5)a = list(a)a.sort()a = tuple(a) Tuple&#x5C0F;&#x7ED3;&#x2003;&#x2003;Tuple&#x5143;&#x7EC4;&#x662F;Python&#x4E2D;&#x4E00;&#x79CD;&#x5E38;&#x89C1;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x7531;&#x4E8E;&#x5143;&#x7EC4;&#x7684;&#x5143;&#x7D20;&#x64CD;&#x4F5C;&#x5B58;&#x5728;&#x9650;&#x5236;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x5B58;&#x50A8;&#x56FA;&#x5B9A;&#x4E0D;&#x53D8;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x9632;&#x6B62;&#x51FA;&#x73B0;&#x8BEF;&#x64CD;&#x4F5C;&#x4F7F;&#x6570;&#x636E;&#x4FEE;&#x6539;&#xFF0C;&#x5982;&#x5B58;&#x653E;&#x4E2A;&#x4EBA;&#x51FA;&#x751F;&#x5E74;&#x6708;&#xFF0C;&#x8EAB;&#x4EFD;&#x8BC1;&#x53F7;&#x7B49;&#x4FE1;&#x606F;&#xFF0C;&#x56E0;&#x6B64;&#x4F7F;&#x7528;&#x7684;&#x9891;&#x7387;&#x4E5F;&#x662F;&#x975E;&#x5E38;&#x9AD8;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x7075;&#x6D3B;&#x638C;&#x63E1;Tuple&#x7684;&#x5E94;&#x7528;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>语言学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[List(列表)]]></title>
    <url>%2F2019%2F09%2F11%2Fpython_list%2F</url>
    <content type="text"><![CDATA[List&#x4ECB;&#x7ECD;&#x2003;&#x2003;Python&#x4E2D;&#x7684;List&#x662F;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;C/C++&#x4E2D;&#x7684;&#x6570;&#x7EC4;&#xFF0C;&#x4F46;&#x662F;&#x6BD4;&#x6570;&#x7EC4;&#x66F4;&#x52A0;&#x7075;&#x6D3B;&#xFF0C;&#x53EF;&#x4EE5;&#x52A8;&#x6001;&#x7684;&#x968F;&#x610F;&#x589E;&#x52A0;&#x548C;&#x5220;&#x9664;&#x5143;&#x7D20;&#xFF0C;&#x8FD8;&#x53EF;&#x4EE5;&#x5B58;&#x50A8;&#x4E0D;&#x540C;&#x7684;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x3002; List&#x64CD;&#x4F5C;Python&#x521B;&#x5EFA;&#x5217;&#x8868;12345# list(iterable) &#x5C06;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#x8F6C;&#x6362;&#x4E3A;list&#x7C7B;&#x578B;a = list(range(5))# [a, b, c, ...] &#x521B;&#x5EFA;&#x5143;&#x7D20;&#x4E3A;a, b, c, ...&#x7684;&#x5217;&#x8868;b = [1, 3.14, &apos;hello world&apos;, True, [1, 2, 3]] Python&#x7D22;&#x5F15;&#x5217;&#x8868;&#x5143;&#x7D20;12345# &#x548C;C/C++&#x76F8;&#x540C;&#xFF0C;&#x901A;&#x8FC7;&#x4E2D;&#x62EC;&#x53F7;[]&#x7D22;&#x5F15;&#x5217;&#x8868;&#x5143;&#x7D20;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;:&#x8FD0;&#x7B97;&#x7B26;&#x83B7;&#x53D6;&#x8FDE;&#x7EED;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x8D1F;&#x6570;&#x7D22;&#x5F15;&#x4E3A;&#x4ECE;&#x540E;&#x5411;&#x524D;&#x7D22;&#x5F15;&#xFF0C;-1&#x4EE3;&#x8868;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;-2&#x4EE3;&#x8868;&#x5012;&#x6570;&#x7B2C;&#x4E8C;&#x4E2A;&#x5143;&#x7D20;a = [1, 3.14, &apos;hello world&apos;, True, [1, 2, 3]] b = a[1:3]c = a[4]d = a[4][1] Python&#x5411;&#x5217;&#x8868;&#x4E2D;&#x589E;&#x52A0;&#x5143;&#x7D20;12345678# obj.append(obj1) &#x5728;obj&#x672B;&#x5C3E;&#x8FFD;&#x52A0;obj1&#xFF0C;&#x53EF;&#x4EE5;&#x8FFD;&#x52A0;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x8FFD;&#x52A0;&#x4E00;&#x4E2A;&#x5217;&#x8868;a = [1, 3.14, &apos;hello world&apos;, True, [1, 2, 3]] a.append(-1)a.append([1, 2, 3])# obj1 + obj2 &#x5C06;&#x4E24;&#x4E2A;&#x5217;&#x8868;&#x76F8;&#x52A0;&#xFF0C;obj2&#x4F1A;&#x8FFD;&#x52A0;&#x5728;obj1&#x7684;&#x540E;&#x9762;b = a + [[1, 2, 3]] # &#x5F97;&#x5230;&#x7684;&#x503C;&#x7B49;&#x4EF7;&#x4E8E;a.append([1, 2, 3])&#xFF0C;&#x4F46;&#x662F;a.append()&#x53EA;&#x80FD;&#x5728;a&#x540E;&#x9762;&#x8FFD;&#x52A0;&#xFF0C;&#x5982;&#x679C;&#x60F3;&#x8D4B;&#x503C;&#x7ED9;b&#x800C;&#x4E0D;&#x60F3;&#x6539;&#x53D8;a&#x5C31;&#x8981;&#x901A;&#x8FC7;&#x52A0;&#x6CD5;&#x8FD0;&#x7B97;c = a + [1] # &#x5F97;&#x5230;&#x7684;&#x503C;&#x7B49;&#x4EF7;&#x4E8E;a.append(1) Python&#x4ECE;&#x5217;&#x8868;&#x4E2D;&#x5220;&#x9664;&#x5143;&#x7D20;12345678910111213a = [1, 3.14, &apos;hello world&apos;, True, [1, 2, 3]] # obj.remove(data) &#x4ECE;obj&#x4E2D;&#x5220;&#x9664;&#x9996;&#x6B21;&#x51FA;&#x73B0;&#x503C;&#x4E3A;data&#x7684;&#x5143;&#x7D20;a.remove(3.14)# del obj &#x5220;&#x9664;obj&#x6570;&#x636E;&#xFF0C;&#x662F;&#x7528;&#x6765;&#x5220;&#x9664;&#x4E0D;&#x7528;&#x7684;&#x53D8;&#x91CF;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x5220;&#x9664;&#x5217;&#x8868;&#x4E2D;&#x7684;&#x67D0;&#x4E2A;&#x5143;&#x7D20;del a[1]# obj.pop(n) &#x5F39;&#x51FA;&#x7B2C;n&#x4E2A;&#x5143;&#x7D20;&#x5E76;&#x8FD4;&#x56DE;&#x8BE5;&#x5143;&#x7D20;b = a.pop(-1)# obj.clear() &#x5220;&#x9664;&#x6240;&#x6709;&#x5143;&#x7D20;a.clear() Python&#x5217;&#x8868;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;1234# obj1 op obj2 &#x5C06;&#x4E24;&#x4E2A;&#x5217;&#x8868;&#x8FDB;&#x884C;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;&#xFF0C;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5F00;&#x59CB;&#x6BD4;&#x8F83;&#xFF0C;&#x5982;&#x679C;&#x76F8;&#x540C;&#x7EE7;&#x7EED;&#x6BD4;&#x8F83;a = [1, 3.14, &apos;hello world&apos;, True, [1, 2, 3]] b = [1, 2.71, &apos;hello world&apos;, True, [1, 2, 3]] a &gt; b Python&#x5217;&#x8868;&#x4E58;&#x6CD5;123# obj * n&#xFF0C;n&#x4E3A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x5C06;obj&#x590D;&#x5236;n&#x6B21;a = [1, 3.14, True, [1, 2, 3]] b = a * 3 Python&#x5224;&#x65AD;&#x5143;&#x7D20;&#x662F;&#x5426;&#x5728;&#x5217;&#x8868;&#x4E2D;1234# data in obj&#xFF0C;&#x5224;&#x65AD;data&#x662F;&#x5426;&#x5728;obj&#x4E2D;&#xFF0C;data not in obj&#xFF0C;&#x5224;&#x65AD;data&#x662F;&#x5426;&#x4E0D;&#x5728;obj&#x4E2D;a = [1, 3.14, True, [1, 2, 3]]b = 3.14 in ac = True not in a Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;123# obj.count(data) &#x6C42;data&#x5728;&#x5217;&#x8868;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;a = [1, 3, 1, 2, 5]a.count(1) Python&#x6C42;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;1234# obj.index(data, begin, end) &#x4ECE;begin&#x5230;end-1&#x4E2D;&#x7D22;&#x5F15;&#x7B2C;&#x4E00;&#x6B21;&#x51FA;&#x73B0;data&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x9ED8;&#x8BA4;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;a = [1, 3, 1, 2, 5]a.index(1)a.index(1, 1, 3) Python&#x5C06;&#x5217;&#x8868;&#x7FFB;&#x8F6C;1234567a = [1, 3, 1, 2, 5]# &#x901A;&#x8FC7;&#x7D22;&#x5F15;&#x7FFB;&#x8F6C;[::-1]a[::-1]# obj.reverse() &#x5C06;&#x5217;&#x8868;&#x53CD;&#x8F6C;a.reverse() Python&#x5C06;&#x5217;&#x8868;&#x6392;&#x5E8F;1234# obj.sort(key, reverse=False) &#x5C06;obj&#x6309;&#x7167;&#x5173;&#x952E;&#x5B57;key&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;reverse=False&#x9ED8;&#x8BA4;&#x4E3A;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;&#xFF0C;reverse=True&#x4E3A;&#x4ECE;&#x5927;&#x5230;&#x5C0F;&#x6392;&#x5E8F;a = [1, 3, 1, 2, 5]a.sort()a.sort(reverse=True) List&#x5C0F;&#x7ED3;&#x2003;&#x2003;List&#x5217;&#x8868;&#x662F;Python&#x4E2D;&#x6700;&#x7075;&#x6D3B;&#x7684;&#x4E00;&#x79CD;&#x7ED3;&#x6784;&#xFF0C;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x7684;&#x9650;&#x5236;&#xFF0C;&#x53EF;&#x4EE5;&#x4EE3;&#x66FF;&#x6808;&#x548C;&#x961F;&#x5217;&#x7684;&#x5404;&#x79CD;&#x64CD;&#x4F5C;&#xFF0C;&#x56E0;&#x6B64;&#x4F7F;&#x7528;&#x7684;&#x9891;&#x7387;&#x4E5F;&#x662F;&#x975E;&#x5E38;&#x9AD8;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x7075;&#x6D3B;&#x638C;&#x63E1;List&#x7684;&#x5E94;&#x7528;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>语言学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python基础]]></title>
    <url>%2F2019%2F09%2F10%2Fpython_foundation%2F</url>
    <content type="text"><![CDATA[Python&#x4ECB;&#x7ECD;&#x2003;&#x2003;&#x5728;&#x524D;&#x9762;&#x5DF2;&#x7ECF;&#x4ECB;&#x7ECD;&#x4E86;Python&#x7684;&#x7531;&#x6765;&#xFF0C;&#x8FD9;&#x91CC;&#x4E3B;&#x8981;&#x4ECB;&#x7ECD;Python&#x7684;&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#xFF0C;&#x5305;&#x62EC;Python&#x8FD0;&#x7B97;&#x548C;Python&#x7ED3;&#x6784;&#x3002; Python&#x8FD0;&#x7B97; Python&#x521B;&#x5EFA;&#x53D8;&#x91CF;123456789# Python&#x4E2D;&#x7684;&#x5E38;&#x7528;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x8D4B;&#x503C;&#x5373;&#x5B9A;&#x4E49;&#xFF0C;&#x548C;C&#xFF0C;Java&#x7B49;&#x8BED;&#x8A00;&#x4E0D;&#x540C;&#xFF0C;&#x4E14;&#x53EF;&#x4EE5;&#x540C;&#x65F6;&#x8D4B;&#x503C;&#x591A;&#x4E2A;&#x53D8;&#x91CF;a = 10b = 3.14c, d = &apos;Hello Python&apos;, True# &#x53EF;&#x4EE5;&#x7528;type(obj) &#x67E5;&#x770B;&#x521B;&#x5EFA;&#x7684;&#x53D8;&#x91CF;&#x7C7B;&#x578B;&#xFF0C;isinstance(obj, type)&#x67E5;&#x770B;&#x53D8;&#x91CF;obj&#x548C;type&#x662F;&#x5426;&#x4E3A;&#x76F8;&#x540C;&#x7C7B;&#x578B;type(a)type(b)isinstance(c, str) Python&#x7B97;&#x672F;&#x8FD0;&#x7B97;12345# +(&#x52A0;)&#xFF0C;-(&#x51CF;)&#xFF0C;*(&#x4E58;)&#xFF0C;/(&#x9664;)&#xFF0C;//(&#x5730;&#x677F;&#x9664;)&#xFF0C;**(&#x4E58;&#x65B9;)&#xFF0C;%(&#x6C42;&#x4F59;)&#xFF0C;&#x6574;&#x6570;&#x9664;&#x6CD5;/&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x5C0F;&#x6570;&#xFF0C;&#x548C;C&#xFF0C;Java&#x7B49;&#x8BED;&#x8A00;&#x4E0D;&#x540C;a, b = 9, 4a / ba // ba ** b Python&#x5173;&#x7CFB;&#x8FD0;&#x7B97;12345# &gt;(&#x5927;&#x4E8E;)&#xFF0C;&lt;(&#x5C0F;&#x4E8E;)&#xFF0C;&gt;=(&#x5927;&#x4E8E;&#x7B49;&#x4E8E;)&#xFF0C;&lt;=(&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;)&#xFF0C;==(&#x7B49;&#x4E8E;)&#xFF0C;!=(&#x4E0D;&#x7B49;&#x4E8E;)&#xFF0C;&#x548C;C&#xFF0C;Java&#x7B49;&#x8BED;&#x8A00;&#x4E0D;&#x540C;&#xFF0C;&#x5B57;&#x7B26;&#x4E32;&#x4E5F;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x6BD4;&#x8F83;&#x5927;&#x5C0F;&#xFF0C;&#x5B57;&#x7B26;&#x4E32;&#x4E4B;&#x95F4;&#x6839;&#x636E;ASCII&#x7801;&#x503C;&#x8D8A;&#x5927;&#x5219;&#x5B57;&#x7B26;&#x4E32;&#x8D8A;&#x5927;&#xFF0C;&#x5148;&#x6BD4;&#x8F83;&#x7B2C;&#x4E00;&#x4E2A;&#xFF0C;&#x5982;&#x679C;&#x76F8;&#x540C;&#x7EE7;&#x7EED;&#x5411;&#x4E0B;&#x6BD4;&#x8F83;a, b = 3.14, 1.414c, d = &apos;Hello&apos;, &apos;Python&apos;a &gt; bc &gt; d Python&#x903B;&#x8F91;&#x8FD0;&#x7B97;12345# and(&#x4E0E;)&#xFF0C;or(&#x6216;)&#xFF0C;not(&#x975E;)&#xFF0C;&#x548C;C&#xFF0C;Java&#x7B49;&#x8BED;&#x8A00;&#x4E0D;&#x540C;&#xFF0C;&#x7528;&amp;&amp;&#xFF0C;||&#xFF0C;!&#x8868;&#x793A;&#x4E0E;&#x6216;&#x975E;a, b = True, Falsea and ba or bnot a Python&#x6761;&#x4EF6;&#x8868;&#x8FBE;&#x5F0F;123# x if condition else y &#x5224;&#x65AD;condition&#xFF0C;&#x4E3A;&#x771F;&#x5219;x&#xFF0C;&#x4E3A;&#x5047;&#x5219;y&#xFF0C;&#x548C;C&#xFF0C;Java&#x7B49;&#x8BED;&#x8A00;&#x4E0D;&#x540C;(b?x:y)a, b, c, d = 1, 2, 3, 4x = a if c &gt; d else b Python&#x7ED3;&#x6784; Python&#x6761;&#x4EF6;&#x7ED3;&#x6784;12345678910111213# Python&#x6761;&#x4EF6;&#x7ED3;&#x6784;if condition1: &#x8BED;&#x53E5;1 elif condition2: &#x8BED;&#x53E5;2 else &#x8BED;&#x53E5;3 &#x5148;&#x5224;&#x65AD;if&#x540E;&#x9762;&#x7684;condition1&#x662F;&#x5426;&#x6210;&#x7ACB;&#xFF0C;&#x5982;&#x679C;&#x6210;&#x7ACB;&#x5219;&#x6267;&#x884C;&#x8BED;&#x53E5;1&#x5E76;&#x7ED3;&#x675F;&#x5224;&#x65AD;&#xFF0C;&#x5426;&#x5219;&#x5224;&#x65AD;elif&#x540E;&#x9762;&#x7684;condition2&#x662F;&#x5426;&#x6210;&#x7ACB;&#xFF0C;&#x5982;&#x679C;&#x6210;&#x7ACB;&#x5219;&#x6267;&#x884C;&#x8BED;&#x53E5;2&#x5E76;&#x7ED3;&#x675F;&#x5224;&#x65AD;&#xFF0C;&#x5426;&#x5219;&#x6267;&#x884C;&#x8BED;&#x53E5;3&#xFF0C;&#x548C;C&#xFF0C;Java&#x7B49;&#x8BED;&#x8A00;&#x4E0D;&#x540C;(if ... else if ... else ...)# if condition1:# &#x8BED;&#x53E5;1# elif condition2:# &#x8BED;&#x53E5;2# else:# &#x8BED;&#x53E5;3if 3 &gt; 5: a = 1elif 3 &lt; 5: a = 2else: a = 3 Python&#x5FAA;&#x73AF;&#x7ED3;&#x6784;(while)123456# while condition: &#x5FAA;&#x73AF;&#x8BED;&#x53E5; while&#x5FAA;&#x73AF;&#xFF0C;&#x5148;&#x5224;&#x65AD;condition&#x662F;&#x5426;&#x6EE1;&#x8DB3;&#xFF0C;&#x5982;&#x679C;&#x6EE1;&#x8DB3;&#x5219;&#x8FDB;&#x5165;&#x5FAA;&#x73AF;&#x6267;&#x884C;&#x5FAA;&#x73AF;&#x8BED;&#x53E5;&#xFF0C;&#x5426;&#x5219;&#x5FAA;&#x73AF;&#x7ED3;&#x675F;&#xFF0C;&#x548C;C&#xFF0C;Java&#x7B49;&#x8BED;&#x8A00;&#x4E0D;&#x540C;(&#x8FD8;&#x6709;do ... while)# while condition:# &#x5FAA;&#x73AF;&#x8BED;&#x53E5;res, i = 0, 1while i &lt; 10: res, i = res + i, i + 1 Python&#x5FAA;&#x73AF;&#x7ED3;&#x6784;(for)12345678# range(start=0, end, step=1) &#x4ECE;start&#x5F00;&#x59CB;&#x5230;end-1&#xFF0C;start&#x9ED8;&#x8BA4;&#x4E3A;0&#xFF0C;step&#x9ED8;&#x8BA4;&#x4E3A;1&#xFF0C;&#x8FD4;&#x56DE;&#x6B65;&#x957F;&#x4E3A;step&#x7684;&#x6240;&#x6709;&#x6570;&#x5B57;&#x7EC4;&#x6210;&#x7684;&#x8FED;&#x4EE3;&#x5668;# for target in iterable: &#x5FAA;&#x73AF;&#x8BED;&#x53E5; for&#x5FAA;&#x73AF;&#xFF0C;target&#x4ECE;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;iterable&#x4E2D;&#x9010;&#x6B21;&#x53D6;&#x51FA;&#x7136;&#x540E;&#x6267;&#x884C;&#x5FAA;&#x73AF;&#x8BED;&#x53E5;&#xFF0C;&#x548C;C&#xFF0C;Java&#x7B49;&#x8BED;&#x8A00;&#x4E0D;&#x540C;(for(&#x521D;&#x59CB;&#x6761;&#x4EF6;;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;;&#x81EA;&#x53D8;&#x91CF;&#x53D8;&#x5316;&#x64CD;&#x4F5C;))# for target in iterable:# &#x5FAA;&#x73AF;&#x8BED;&#x53E5;res = 0for i in range(1, 10): res += i break&#xFF0C;continue&#x8BED;&#x53E5;1234567891011121314151617# &#x5BF9;&#x4E8E;&#x5FAA;&#x73AF;&#x7ED3;&#x6784;&#x6765;&#x8BF4;&#xFF0C;break&#x548C;continue&#x8BED;&#x53E5;&#x975E;&#x5E38;&#x91CD;&#x8981;&#xFF0C;&#x7528;&#x6CD5;&#x548C;C&#xFF0C;Java&#x7B49;&#x8BED;&#x8A00;&#x76F8;&#x540C;# break&#xFF1A;&#x7EC8;&#x6B62;&#x5E76;&#x8DF3;&#x51FA;&#x5FAA;&#x73AF;# continue&#xFF1A;&#x7EC8;&#x6B62;&#x672C;&#x6B21;&#x5FAA;&#x73AF;&#xFF0C;&#x8FDB;&#x5165;&#x4E0B;&#x4E00;&#x6B21;&#x5FAA;&#x73AF;res_break, res_continue = 0, 0# 1 + 2 + 3 + 4 = 10for i in range(1, 10): if i == 5: break res_break += i# 1 + 2 + 3 + 4 + 6 + 7 + 8 + 9 = 40for i in range(1, 10): if i == 5: continue res_continue += i Python&#x5C0F;&#x7ED3;&#x2003;&#x2003;&#x57FA;&#x7840;&#x90E8;&#x5206;&#x6BCF;&#x79CD;&#x8BED;&#x8A00;&#x90FD;&#x5927;&#x540C;&#x5C0F;&#x5F02;&#xFF0C;&#x56E0;&#x4E3A;&#x57FA;&#x7840;&#x90E8;&#x5206;&#x662F;&#x6240;&#x6709;&#x8BED;&#x8A00;&#x7684;&#x57FA;&#x7840;&#xFF0C;&#x5B66;&#x4E60;&#x6BCF;&#x4E00;&#x79CD;&#x8BED;&#x8A00;&#x90FD;&#x79BB;&#x4E0D;&#x5F00;&#x8FD0;&#x7B97;&#x64CD;&#x4F5C;&#x548C;&#x7B97;&#x6CD5;&#x7ED3;&#x6784;&#xFF0C;&#x867D;&#x7136;&#x96BE;&#x5EA6;&#x8F83;&#x5C0F;&#xFF0C;&#x4F46;&#x662F;&#x975E;&#x5E38;&#x91CD;&#x8981;&#xFF0C;&#x65E0;&#x8BBA;&#x4EE5;&#x540E;&#x4ECE;&#x4E8B;&#x4EC0;&#x4E48;&#x6837;&#x7684;&#x7814;&#x7A76;&#xFF0C;&#x57FA;&#x7840;&#x80FD;&#x529B;&#x90FD;&#x662F;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x719F;&#x7EC3;&#x638C;&#x63E1;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>语言学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Git(分布式版本控制系统)]]></title>
    <url>%2F2019%2F09%2F10%2Fskill%20Git%2F</url>
    <content type="text"><![CDATA[Git &#x539F;&#x7406;&#x4ECB;&#x7ECD;&#x2003;&#x2003;Git:&#x662F;&#x4E00;&#x4E2A;&#x5F00;&#x6E90;&#x7684;&#x5206;&#x5E03;&#x5F0F;&#x7248;&#x672C;&#x63A7;&#x5236;&#x7CFB;&#x7EDF;&#xFF0C;&#x53EF;&#x4EE5;&#x6709;&#x6548;&#x3001;&#x9AD8;&#x901F;&#x5730;&#x5904;&#x7406;&#x4ECE;&#x5F88;&#x5C0F;&#x5230;&#x975E;&#x5E38;&#x5927;&#x7684;&#x9879;&#x76EE;&#x7248;&#x672C;&#x7BA1;&#x7406;&#x3002;&#x7279;&#x522B;&#x9002;&#x5408;&#x4E8E;&#x4F01;&#x4E1A;&#x7EA7;&#x9879;&#x76EE;&#x7684;&#x4F7F;&#x7528;&#xFF0C;&#x56E0;&#x6B64;&#x4E5F;&#x6210;&#x4E3A;&#x4E86;&#x7A0B;&#x5E8F;&#x5458;&#x5FC5;&#x5907;&#x6280;&#x80FD;&#x4E4B;&#x4E00;&#x3002;Git&#x4E2D;&#x7684;&#x5927;&#x591A;&#x6570;&#x8BED;&#x53E5;&#x662F;Linux&#x8BED;&#x53E5;&#xFF0C;&#x56E0;&#x4E3A;&#x6700;&#x521D;&#x5B83;&#x5C31;&#x662F;&#x7531;Linux&#x4E4B;&#x7236;Linus Torvalds&#x5E2E;&#x52A9;&#x7BA1;&#x7406; Linux &#x5185;&#x6838;&#x5F00;&#x53D1;&#x800C;&#x5F00;&#x53D1;&#x7684;&#x3002; Git&#x7279;&#x70B9;&#x2003;&#x2003;&#x76F4;&#x63A5;&#x8BB0;&#x5F55;&#x5FEB;&#x7167;&#xFF0C;&#x800C;&#x975E;&#x5DEE;&#x5F02;&#x6BD4;&#x8F83;&#xFF0C;&#x901F;&#x5EA6;&#x975E;&#x5E38;&#x5FEB;&#x3002;&#x2003;&#x2003;&#x51E0;&#x4E4E;&#x6240;&#x6709;&#x64CD;&#x4F5C;&#x90FD;&#x662F;&#x672C;&#x5730;&#x6267;&#x884C;&#xFF0C;&#x65B9;&#x4FBF;&#x7BA1;&#x7406;&#x3002;&#x2003;&#x2003;&#x65F6;&#x523B;&#x4FDD;&#x5B58;&#x6570;&#x636E;&#x5B8C;&#x6574;&#x6027;&#xFF0C;&#x4FDD;&#x8BC1;&#x4FE1;&#x606F;&#x7684;&#x4E0D;&#x4E22;&#x5931;&#x3002;&#x2003;&#x2003;&#x9002;&#x5408;&#x4E8E;&#x5206;&#x5E03;&#x5F0F;&#x5F00;&#x53D1;&#xFF0C;&#x670D;&#x52A1;&#x5668;&#x538B;&#x529B;&#x5C0F;&#x3002;&#x2003;&#x2003;&#x5F00;&#x53D1;&#x8005;&#x4E4B;&#x95F4;&#x53EF;&#x4EE5;&#x5BB9;&#x6613;&#x7684;&#x89E3;&#x51B3;&#x51B2;&#x7A81;&#x3002; Git&#x5173;&#x7CFB;&#x56FE;&#x2003;&#x2003;Git&#x7684;&#x903B;&#x8F91;&#x8F83;&#x4E3A;&#x590D;&#x6742;&#xFF0C;&#x4E00;&#x5B9A;&#x8981;&#x7406;&#x89E3;&#x903B;&#x8F91;&#x56FE;&#xFF0C;&#x5E76;&#x8BB0;&#x4F4F;&#x72B6;&#x6001;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x4E92;&#x8F6C;&#x6362;&#x3002; Git&#x5E94;&#x7528;&#x521B;&#x5EFA;&#x7BA1;&#x7406;&#x5458;&#x8EAB;&#x4EFD;123# git config --global user.name XXX &#x521B;&#x5EFA;&#x7BA1;&#x7406;&#x5458;&#x7528;&#x6237;&#x540D;XXX# git config --global user.email YYY &#x521B;&#x5EFA;&#x7BA1;&#x7406;&#x5458;&#x90AE;&#x7BB1;YYY &#x5C06;&#x6587;&#x4EF6;&#x5939;&#x53D8;&#x6210;&#x7BA1;&#x7406;&#x5E93;&#x6587;&#x4EF6;&#x5939;1# git init &#x521B;&#x5EFA;&#x7BA1;&#x7406;&#x5E93;&#x6587;&#x4EF6;&#x5939; &#x5728;&#x6587;&#x4EF6;&#x5939;&#x4E2D;&#x6DFB;&#x52A0;&#x6587;&#x4EF6;12# touch xxx &#x6DFB;&#x52A0;&#x6587;&#x4EF6;xxxtouch dm01.py &#x67E5;&#x770B;&#x6587;&#x4EF6;&#x7684;&#x72B6;&#x6001;123# git status &#x67E5;&#x770B;&#x6587;&#x4EF6;&#x72B6;&#x6001;(&#x8BE6;&#x7EC6;&#x53D9;&#x8FF0;)# git status -s &#x67E5;&#x770B;&#x6587;&#x4EF6;&#x72B6;&#x6001;(&#x7B80;&#x5199;) &#x5C06;&#x6587;&#x4EF6;&#x52A0;&#x5165;&#x6587;&#x4EF6;&#x7BA1;&#x7406;&#x5E93;1234# git add xxx &#x5C06;xxx&#x6587;&#x4EF6;&#x52A0;&#x5165;&#x6587;&#x4EF6;&#x7BA1;&#x7406;&#x5E93;git add dm01.py# git add . &#x5C06;&#x6240;&#x6709;&#x6587;&#x4EF6;&#x52A0;&#x5165;&#x6587;&#x4EF6;&#x7BA1;&#x7406;&#x5E93; &#x63D0;&#x4EA4;&#x6587;&#x4EF6;12345678910# git commit -m xxx yyy &#x63D0;&#x4EA4;yyy&#x6587;&#x4EF6;&#x5230;xxx&#x7248;&#x672C;&#x4E2D;&#xFF0C;&#x5982;&#x679C;&#x53EA;&#x6709;xxx&#xFF0C;&#x5219;&#x63D0;&#x4EA4;&#x5F53;&#x524D;&#x6240;&#x6709;&#x53EF;&#x63D0;&#x4EA4;&#x6587;&#x4EF6;&#x81F3;xxx&#x7248;&#x672C;git commit -m dm01.py# git commit --amend --no-edit xxx &#x5C06;xxx&#x6587;&#x4EF6;&#x6DFB;&#x52A0;&#x5230;&#x6700;&#x65B0;&#x7684;&#x7248;&#x672C;# git commit --amend -m xxx &#x4E3A;&#x6700;&#x540E;&#x7684;&#x7248;&#x672C;&#x6DFB;&#x52A0;xxx&#x8BF4;&#x660E;# git commit --amend &#x7F16;&#x8F91;&#x6587;&#x672C;&#x8BF4;&#x660E;# git commit -am xxx &#x5C06;&#x6240;&#x6709;&#x6587;&#x4EF6;&#x5148;&#x6DFB;&#x52A0;&#x4E3A;Staged&#x72B6;&#x6001;&#xFF0C;&#x518D;&#x8FDB;&#x884C;&#x63D0;&#x4EA4;&#xFF0C;&#x7B49;&#x4EF7;&#x4E8E;git add . + git commit -m xxx &#x7F16;&#x8F91;&#x6587;&#x4EF6;1234# vim xxx &#x7528;vim&#x7F16;&#x8F91;xxx&#x6587;&#x4EF6;&#xFF0C;&#x6587;&#x4EF6;&#x72B6;&#x6001;&#x7531;Unmodified&#x53D8;&#x4E3A;Modified&#xFF0C;&#x518D;&#x6B21;&#x63D0;&#x4EA4;&#x65F6;&#x9700;&#x8981;&#x5148;add&#x53D8;&#x6210;Staged&#x72B6;&#x6001;vim dm01.pyprint(&apos;First addition!&apos;) &#x67E5;&#x770B;&#x4E4B;&#x524D;&#x5DF2;&#x63D0;&#x4EA4;&#x7684;&#x66F4;&#x6539;1234567# git log &#x67E5;&#x770B;&#x6587;&#x4EF6;&#x7684;&#x5177;&#x4F53;&#x4FE1;&#x606F;# git log --oneline &#x67E5;&#x770B;&#x6587;&#x4EF6;&#x7684;&#x7B80;&#x8981;&#x4FE1;&#x606F;# git log --graph &#x4EE5;&#x56FE;&#x7684;&#x5F62;&#x5F0F;&#x67E5;&#x770B;&#x6587;&#x4EF6;&#x7684;&#x5177;&#x4F53;&#x4FE1;&#x606F;# git log --graph --oneline &#x4EE5;&#x56FE;&#x7684;&#x5F62;&#x5F0F;&#x67E5;&#x770B;&#x6587;&#x4EF6;&#x7684;&#x7B80;&#x8981;&#x4FE1;&#x606F; &#x67E5;&#x770B;&#x4E4B;&#x524D;&#x66F4;&#x6539;&#x7684;&#x5185;&#x5BB9;1234567891011# git diff &#x67E5;&#x770B;Modified&#x4E0E;&#x4E4B;&#x524D;&#x63D0;&#x4EA4;&#x7684;&#x533A;&#x522B;# git diff --cached &#x67E5;&#x770B;Stage&#x4E0E;&#x4E4B;&#x524D;&#x63D0;&#x4EA4;&#x7684;&#x533A;&#x522B;# git diff HEAD &#x540C;&#x65F6;&#x6709;Modified&#x548C;Stage&#x72B6;&#x6001;&#xFF0C;&#x67E5;&#x770B;&#x603B;&#x533A;&#x522B;# git diff ID1, ID2 &#x67E5;&#x770B;&#x4E24;&#x4E2A;&#x5386;&#x53F2;&#x5FEB;&#x7167;&#x7684;&#x533A;&#x522B;&#xFF0C;ID1&#x4E3A;&#x4E4B;&#x524D;&#x7684;&#xFF0C;ID2&#x662F;&#x540E;&#x9762;&#x7684;&#xFF0C;&#x5176;&#x4E2D;&#x8F93;&#x5165;git log --oneline&#x4E2D;&#x663E;&#x793A;&#x5728;&#x6700;&#x524D;&#x9762;&#x7684;&#x7F16;&#x53F7;&#x5373;&#x4E3A;IDgit diff 84cefee 521a873# git diff ID &#x6BD4;&#x8F83;ID&#x4E0E;&#x5F53;&#x524D;&#x76EE;&#x5F55;&#x5185;&#x5BB9;git diff 84cefee &#x5C06;&#x6587;&#x4EF6;&#x4ECE;Staged&#x72B6;&#x6001;&#x8FD4;&#x56DE;&#x81F3;Modified&#x72B6;&#x6001;123456vim dm01.py # &#x5C06;dm01&#x72B6;&#x6001;&#x53D8;&#x4E3A;&#x7EA2;&#x8272;&#x7684;M&#xFF0C;&#x5373;&#x4E3A;Modified&#x72B6;&#x6001;git add dm01.py #&#x5C06;dm01&#x4ECE;&#x7EA2;&#x8272;&#x7684;M&#x53D8;&#x6210;&#x7EFF;&#x8272;&#x7684;M&#xFF0C;&#x5373;&#x4E3A;Staged&#x72B6;&#x6001;# git reset xxx &#x5C06;xxx&#x4ECE;Staged&#x72B6;&#x6001;&#x8FD4;&#x56DE;&#x81F3;Modified&#x72B6;&#x6001;git reset dm01.py &#x67E5;&#x770B;&#x6BCF;&#x4E00;&#x6B65;&#x7684;&#x53D8;&#x5316;1# git reflog &#x67E5;&#x770B;&#x5BF9;&#x6587;&#x4EF6;&#x5939;&#x8FDB;&#x884C;&#x7684;&#x6240;&#x6709;&#x64CD;&#x4F5C;&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;&#x5F97;&#x5230;ID&#x53F7;&#x548C;&#x5BF9;&#x5E94;&#x7684;&#x6307;&#x9488; &#x56DE;&#x5230;&#x8FC7;&#x53BB;12345# git reset --method HEAD~n &#x56DE;&#x5230;&#x524D;n&#x4E2A;&#x7248;&#x672C;&#xFF0C;method=soft&#x4E3A;&#x56DE;&#x6EDA;&#x5FEB;&#x7167;&#xFF0C;&#x79FB;&#x52A8;HEAD&#x6307;&#x5411;(&#x4ED3;&#x5E93;&#x533A;&#x57DF;)&#xFF0C;method=mixed(&#x9ED8;&#x8BA4;)&#x4E3A;&#x5C06;&#x5FEB;&#x7167;&#x56DE;&#x6EDA;&#x5230;&#x4E34;&#x65F6;&#x533A;&#x57DF;&#xFF0C;method=hard&#x5C06;&#x5FEB;&#x7167;&#x8FD8;&#x539F;&#x5230;&#x5DE5;&#x4F5C;&#x533A;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x6253;&#x5F00;&#x6587;&#x4EF6;&#x770B;&#x5230;# git reset --method ID/point &#x56DE;&#x5230;&#x6307;&#x5B9A;&#x7684;&#x6587;&#x4EF6;&#x53F7;/&#x6307;&#x9488;&#xFF0C;method&#x540C;&#x4E0A;# git checkout ID -- xxx &#x5BF9;xxx&#x6587;&#x4EF6;&#x56DE;&#x5230;ID&#x72B6;&#x6001;&#xFF0C;&#x5185;&#x5BB9;&#x4E5F;&#x4F1A;&#x6539;&#x53D8; &#x521B;&#x5EFA;&#x5206;&#x652F;1234567# git branch &#x67E5;&#x770B;&#x6240;&#x6709;&#x5206;&#x652F;&#x548C;&#x5F53;&#x524D;&#x6240;&#x5904;&#x5206;&#x652F;# git branch xxx &#x521B;&#x5EFA;xxx&#x5206;&#x652F;git branch br01# git checkout -b xxx &#x521B;&#x5EFA;xxx&#x5206;&#x652F;git checkout -b br02 &#x5207;&#x6362;&#x5206;&#x652F;12# git checkout xxx &#x5207;&#x6362;&#x5230;xxx&#x5206;&#x652F;git checkout br01 &#x5220;&#x9664;&#x5206;&#x652F;1234# git branch -d xxx &#x5220;&#x9664;xxx&#x5206;&#x652F;&#xFF0C;&#x5220;&#x9664;&#x65F6;&#x4E0D;&#x80FD;&#x4F4D;&#x4E8E;&#x8BE5;&#x5206;&#x652F;&#xFF0C;&#x8BE5;&#x65B9;&#x6CD5;&#x4E0D;&#x80FD;&#x5220;&#x9664;&#x672A;&#x5408;&#x5E76;&#x7684;&#x5206;&#x652F;git branch -d br02# git branch -D xxx &#x5220;&#x9664;&#x672A;&#x5408;&#x5E76;&#x7684;xxx&#x5206;&#x652F; &#x5408;&#x5E76;&#x5206;&#x652F;1234# git merge xxx &#x5728;&#x5F53;&#x524D;&#x5206;&#x652F;&#x4E0B;&#xFF0C;&#x5408;&#x5E76;xxx&#x5206;&#x652F;git merge br01# &#x5982;&#x679C;&#x5728;&#x65B0;&#x5206;&#x652F;&#x91CC;&#x9762;&#x4FEE;&#x6539;&#x63D0;&#x4EA4;&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x5728;&#x539F;&#x5206;&#x652F;&#x4E5F;&#x7ECF;&#x8FC7;&#x4E86;&#x4FEE;&#x6539;&#x63D0;&#x4EA4;&#xFF0C;&#x5219;&#x4F1A;&#x51FA;&#x73B0;&#x62A5;&#x9519;&#xFF0C;&#x9700;&#x8981;&#x624B;&#x52A8;&#x4FEE;&#x6539;&#x6587;&#x4EF6;&#x5185;&#x5BB9;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x6DFB;&#x52A0;&#x63D0;&#x4EA4;&#x5373;&#x53EF; &#x67E5;&#x770B;&#x5DF2;&#x5408;&#x5E76;&#x7684;&#x5206;&#x652F;&#x548C;&#x672A;&#x5408;&#x5E76;&#x7684;&#x5206;&#x652F;123# git branch --merged &#x67E5;&#x770B;&#x5DF2;&#x5408;&#x5E76;&#x7684;&#x5206;&#x652F;#git branch --no-merged &#x67E5;&#x770B;&#x672A;&#x5408;&#x5E76;&#x7684;&#x5206;&#x652F; &#x6362;&#x57FA;&#x64CD;&#x4F5C;1# git rebase xxx &#x5F53;&#x4E00;&#x4E2A;&#x5206;&#x652F;&#x6DFB;&#x52A0;&#x529F;&#x80FD;&#x65F6;&#xFF0C;&#x6B64;&#x65F6;&#x5982;&#x679C;&#x4E3B;&#x5206;&#x652F;&#x53D1;&#x751F;&#x4FEE;&#x6539;&#xFF0C;&#x5F00;&#x53D1;&#x4EBA;&#x5458;&#x60F3;&#x57FA;&#x4E8E;&#x4FEE;&#x6539;&#x8FC7;&#x7684;&#x4E3B;&#x5206;&#x652F;&#x63A5;&#x7740;&#x6DFB;&#x52A0;&#x529F;&#x80FD;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x6362;&#x57FA;&#x64CD;&#x4F5C;&#xFF0C;&#x7D27;&#x63A5;&#x7740;xxx&#x4E4B;&#x540E;&#x8FDB;&#x884C;&#x4FEE;&#x6539; &#x6682;&#x5B58;&#x533A;123456789# git stash &#x5C06;&#x73B0;&#x5728;&#x7684;&#x6587;&#x4EF6;&#x653E;&#x5230;&#x6682;&#x5B58;&#x533A;&#x4E2D;(&#x5206;&#x652F;&#x4E2D;&#x5B58;&#x5728;&#x672A;&#x63D0;&#x4EA4;&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x65E0;&#x6CD5;&#x5207;&#x6362;&#x5206;&#x652F;&#x3002;&#x6B64;&#x65F6;&#x53EF;&#x4EE5;&#x5C06;&#x73B0;&#x5728;&#x7684;&#x6587;&#x4EF6;&#x653E;&#x5230;&#x6682;&#x5B58;&#x533A;&#x4E2D;&#xFF0C;&#x7136;&#x540E;&#x5207;&#x6362;&#x5206;&#x652F;)&#x3002;# git stash list &#x67E5;&#x770B;&#x6682;&#x5B58;&#x533A;&#x7684;&#x6587;&#x4EF6;# git stash apply stash@{n} &#x4ECE;&#x6682;&#x5B58;&#x533A;&#x4E2D;&#x6062;&#x590D;&#x7F16;&#x53F7;&#x4E3A;n&#x7684;&#x6587;&#x4EF6;(&#x9ED8;&#x8BA4;&#x4E3A;&#x6700;&#x8FD1;&#x4E00;&#x4E2A;)&#xFF0C;&#x6682;&#x5B58;&#x533A;&#x6587;&#x4EF6;&#x4E0D;&#x53D8;# git stash drop stash@{n} &#x4ECE;&#x6682;&#x5B58;&#x533A;&#x4E2D;&#x5220;&#x9664;&#x7F16;&#x53F7;&#x4E3A;n&#x7684;&#x6587;&#x4EF6;(&#x9ED8;&#x8BA4;&#x4E3A;&#x6700;&#x8FD1;&#x4E00;&#x4E2A;)# git stash pop &#x4ECE;&#x6682;&#x5B58;&#x533A;&#x4E2D;&#x53D6;&#x51FA;&#x6700;&#x8FD1;&#x7684;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#xFF0C;&#x6682;&#x5B58;&#x533A;&#x4E2D;&#x5C11;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;&#x6808;&#x7684;pop&#xFF0C;&#x7B49;&#x4EF7;&#x4E8E;git stash apply + git stash drop &#x94FE;&#x63A5;&#x5230;GitHub12345# &#x6253;&#x5F00;GitHub&#xFF0C;&#x5E76;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x4ED3;&#x5E93;# git remote add origin xxx &#x94FE;&#x63A5;&#x5230;&#x8FDC;&#x7A0B;xxx&#x5730;&#x5740;&#xFF0C;&#x5373;&#x4E3A;GitHub&#x4ED3;&#x5E93;&#x5730;&#x5740;# git push -u origin yyy &#x5C06;yyy&#x5206;&#x652F;&#x63A8;&#x4E0A;&#x53BB;&#xFF0C;&#x4E00;&#x822C;&#x662F;master&#x5206;&#x652F; Git&#x4E09;&#x4E2A;&#x533A;&#x57DF;12345# &#x5DE5;&#x4F5C;&#x533A;&#x57DF;&#xFF1A;&#x5B58;&#x653E;&#x9879;&#x76EE;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x53EF;&#x4EE5;&#x89C2;&#x5BDF;&#x5230;&#x7684;&#x6587;&#x4EF6;&#x5939;&#x5373;&#x4E3A;&#x5DE5;&#x4F5C;&#x533A;&#x57DF;&#xFF0C;&#x4FEE;&#x6539;&#x7684;&#x5185;&#x5BB9;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x6253;&#x5F00;&#x6587;&#x4EF6;&#x770B;&#x5230;# &#x4E34;&#x65F6;&#x533A;&#x57DF;&#xFF1A;stage&#x533A;&#x57DF;&#xFF0C;&#x7528;&#x4E8E;&#x4E34;&#x65F6;&#x5B58;&#x653E;&#x6539;&#x52A8;&#xFF0C;&#x5373;&#x5C06;&#x63D0;&#x4EA4;&#x7684;&#x533A;&#x57DF;# &#x4ED3;&#x5E93;&#x533A;&#x57DF;&#xFF1A;&#x6700;&#x7EC8;&#x5B58;&#x653E;&#x7684;&#x7248;&#x672C;&#x6570;&#x636E;&#xFF0C;HEAD&#x6307;&#x5411;&#x6700;&#x7EC8;&#x63D0;&#x4EA4;&#x7684;&#x5185;&#x5BB9; &#x5220;&#x9664;&#x6587;&#x4EF6;123456# git rm &#x5220;&#x9664;&#x5DE5;&#x4F5C;&#x533A;&#x57DF;&#x548C;&#x4E34;&#x65F6;&#x533A;&#x57DF;&#x4E2D;&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x4F46;&#x662F;&#x4ED3;&#x5E93;&#x533A;&#x57DF;&#x4F9D;&#x7136;&#x53EF;&#x4EE5;&#x770B;&#x5230;# git rm -f &#x5F3A;&#x884C;&#x5220;&#x9664;&#x5DE5;&#x4F5C;&#x533A;&#x57DF;&#x548C;&#x4E34;&#x65F6;&#x533A;&#x57DF;&#x4E2D;&#x7684;&#x6587;&#x4EF6;git rm -f dm01.py# git rm --cached &#x5220;&#x9664;&#x4E34;&#x65F6;&#x533A;&#x7684;&#x6587;&#x4EF6; &#x4FEE;&#x6539;&#x6587;&#x4EF6;&#x540D;12# git mv old_name new_name &#x5C06;&#x539F;&#x6587;&#x4EF6;&#x540D;old_name&#x6362;&#x4E3A;new_namegit mv dm02.py dm03.py Git&#x5C0F;&#x7ED3;&#x2003;&#x2003;Git&#x4F5C;&#x4E3A;&#x5F53;&#x4E0B;&#x6700;&#x7EA2;&#x7684;&#x5206;&#x5E03;&#x5F0F;&#x7248;&#x672C;&#x63A7;&#x5236;&#x7CFB;&#x7EDF;&#xFF0C;&#x4F7F;&#x5F97;&#x7A0B;&#x5E8F;&#x5458;&#x4E4B;&#x95F4;&#x7684;&#x534F;&#x4F5C;&#x66F4;&#x4E3A;&#x65B9;&#x4FBF;&#xFF0C;&#x56E0;&#x6B64;&#x5404;&#x5927;&#x516C;&#x53F8;&#x90FD;&#x4F7F;&#x7528;Git&#x4F5C;&#x4E3A;&#x4E00;&#x9879;&#x5FC5;&#x5907;&#x6280;&#x80FD;&#x3002;&#x56E0;&#x4E3A;Git&#x7684;&#x547D;&#x4EE4;&#x5927;&#x591A;&#x4E3A;Linux&#x8BED;&#x8A00;&#xFF0C;&#x6240;&#x4EE5;&#x4E60;&#x60EF;&#x4E8E;Windows&#x5E73;&#x53F0;&#x7684;&#x7528;&#x6237;&#x9700;&#x8981;&#x591A;&#x591A;&#x7EC3;&#x4E60;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>程序员必备技能</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python介绍]]></title>
    <url>%2F2019%2F09%2F10%2Fpython_introduction%2F</url>
    <content type="text"><![CDATA[python&#x7531;&#x6765;&#x2003;&#x2003;python&#x662F;&#x7531;&#x8377;&#x5170;&#x4EBA;Python&#x7684;&#x521B;&#x59CB;&#x4EBA;&#x4E3A;&#x8377;&#x5170;&#x4EBA;&#x5409;&#x591A;&#xB7;&#x8303;&#x7F57;&#x82CF;&#x59C6;(Guido van Rossum)&#x3002;1989&#x5E74;&#x5723;&#x8BDE;&#x8282;&#x671F;&#x95F4;&#xFF0C;&#x5728;&#x963F;&#x59C6;&#x65AF;&#x7279;&#x4E39;&#xFF0C;Guido&#x4E3A;&#x4E86;&#x6253;&#x53D1;&#x5723;&#x8BDE;&#x8282;&#x7684;&#x65E0;&#x8DA3;&#xFF0C;&#x51B3;&#x5FC3;&#x5F00;&#x53D1;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x811A;&#x672C;&#x89E3;&#x91CA;&#x7A0B;&#x5E8F;&#x3002;&#x9009;&#x4E2D;Python&#x4F5C;&#x4E3A;&#x8BE5;&#x7F16;&#x7A0B;&#x8BED;&#x8A00;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x662F;&#x53D6;&#x81EA;&#x82F1;&#x56FD;20&#x4E16;&#x7EAA;70&#x5E74;&#x4EE3;&#x9996;&#x64AD;&#x7684;&#x7535;&#x89C6;&#x559C;&#x5267;(Monty Python&#x2019;s Flying Circus) &#x8BED;&#x8A00;&#x7684;&#x6BD4;&#x8F83;&#x2003;&#x2003;&#x5C06;&#x5176;&#x4ED6;&#x8BED;&#x8A00;&#x7FFB;&#x8BD1;&#x6210;&#x673A;&#x5668;&#x8BED;&#x8A00;&#x7684;&#x5DE5;&#x5177;&#x79F0;&#x4E3A;&#x7F16;&#x8BD1;&#x5668;&#xFF0C;&#x7F16;&#x8BD1;&#x7684;&#x65B9;&#x5F0F;&#x6709;&#x4E24;&#x79CD;&#xFF0C;&#x4E00;&#x79CD;&#x662F;&#x7F16;&#x8BD1;&#xFF0C;&#x4E00;&#x79CD;&#x662F;&#x89E3;&#x91CA;&#x2003;&#x2003;&#x7F16;&#x8BD1;&#x578B;&#x8BED;&#x8A00;&#xFF1A;C/C++&#xFF0C;Pascal&#x7B49;&#x8BED;&#x8A00;&#x90FD;&#x5C5E;&#x4E8E;&#x7F16;&#x8BD1;&#x578B;&#x8BED;&#x8A00;&#xFF0C;&#x5148;&#x7531;&#x7F16;&#x8BD1;&#x5668;&#x751F;&#x6210;&#x53EF;&#x6267;&#x884C;&#x6587;&#x4EF6;&#xFF0C;&#x8FD0;&#x884C;&#x65F6;&#x4E0D;&#x9700;&#x8981;&#x91CD;&#x65B0;&#x7F16;&#x8BD1;&#xFF0C;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#x7F16;&#x8BD1;&#x7684;&#x7ED3;&#x679C;&#x5373;&#x53EF;&#xFF0C;&#x56E0;&#x6B64;&#x7A0B;&#x5E8F;&#x6267;&#x884C;&#x6548;&#x7387;&#x9AD8;&#xFF0C;&#x8DE8;&#x5E73;&#x53F0;&#x80FD;&#x529B;&#x5DEE;&#x3002;&#x2003;&#x2003;&#x89E3;&#x91CA;&#x578B;&#x8BED;&#x8A00;&#xFF1A;Java&#xFF0C;Python&#x7B49;&#x8BED;&#x8A00;&#x90FD;&#x5C5E;&#x4E8E;&#x89E3;&#x91CA;&#x578B;&#x8BED;&#x8A00;&#xFF0C;&#x8FD0;&#x884C;&#x65F6;&#x7531;&#x89E3;&#x91CA;&#x5668;&#x9010;&#x884C;&#x89E3;&#x91CA;&#x6BCF;&#x4E00;&#x53E5;&#x6E90;&#x4EE3;&#x7801;&#xFF0C;&#x6BCF;&#x6B21;&#x8FD0;&#x884C;&#x90FD;&#x9700;&#x8981;&#x89E3;&#x91CA;&#x4E00;&#x6B21;&#xFF0C;&#x56E0;&#x6B64;&#x7A0B;&#x5E8F;&#x6267;&#x884C;&#x6548;&#x7387;&#x4F4E;&#xFF0C;&#x8DE8;&#x5E73;&#x53F0;&#x80FD;&#x529B;&#x5F3A;&#x3002; Python&#x4E0E;C/C++&#x7684;&#x5177;&#x4F53;&#x533A;&#x522B;&#x2003;&#x2003;&#xFF08;1&#xFF09;&#x4EE3;&#x7801;&#x683C;&#x5F0F;&#xFF0C;Python&#x4E2D;&#x7684;&#x4EE3;&#x7801;&#x5757;&#x4EE5;&#x7F29;&#x8FDB;&#x6807;&#x5FD7;&#xFF0C;&#x5177;&#x6709;&#x76F8;&#x540C;&#x7F29;&#x8FDB;&#x7684;&#x5904;&#x4E8E;&#x540C;&#x4E00;&#x4EE3;&#x7801;&#x5757;&#xFF0C;&#x800C;C/C++&#x4EE5;&#x82B1;&#x62EC;&#x53F7;&#x5BF9;{}&#x6807;&#x5FD7;&#x3002;&#x2003;&#x2003;&#xFF08;2&#xFF09;&#x6CE8;&#x91CA;&#x5F62;&#x5F0F;&#xFF0C;Python&#x4E2D;&#x7684;&#x6CE8;&#x91CA;&#x4EE5;#&#x5F00;&#x59CB;&#x6216;&#x8005;&#x4EE5;&#x2019;&#x2019;&#x2019;xxx&#x2019;&#x2019;&#x2019;&#x5B8C;&#x6210;&#x5927;&#x6BB5;&#x6CE8;&#x91CA;&#xFF0C;&#x800C;C/C++&#x4EE5;&#x53CC;&#x659C;&#x6760;//&#x6807;&#x5FD7;&#x6216;&#x8005;/xxx/&#x5B8C;&#x6210;&#x5927;&#x6BB5;&#x6CE8;&#x91CA;&#x3002;&#x2003;&#x2003;&#xFF08;3&#xFF09;&#x5B9A;&#x4E49;&#x53D8;&#x91CF;&#xFF0C;Python&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x8D4B;&#x503C;a=5&#xFF0C;&#x800C;C/C++&#x5FC5;&#x987B;&#x5199;int a=5&#x3002;&#x2003;&#x2003;&#xFF08;4&#xFF09;&#x8D4B;&#x503C;&#x64CD;&#x4F5C;&#xFF0C;Python&#x53EF;&#x4EE5;&#x540C;&#x65F6;&#x8D4B;&#x503C;&#x591A;&#x4E2A;a, b=5, 6&#xFF0C;&#x800C;C/C++&#x53EA;&#x80FD;&#x5355;&#x72EC;&#x8D4B;&#x503C;&#x3002;&#x2003;&#x2003;&#xFF08;5&#xFF09;&#x9664;&#x6CD5;&#x64CD;&#x4F5C;&#xFF0C;Python&#x4E2D;&#x5BF9;&#x4E24;&#x4E2A;&#x6574;&#x6570;&#x8FDB;&#x884C;&#x9664;&#x6CD5;&#x65F6;&#xFF0C;&#x7ED3;&#x679C;&#x53EF;&#x4EE5;&#x4E3A;&#x5C0F;&#x6570;&#xFF0C;3 / 5 =0.6&#xFF0C;&#x800C;C/C++&#x7ED3;&#x679C;&#x4E3A;0&#x3002;&#x2003;&#x2003;&#xFF08;6&#xFF09;&#x4E58;&#x65B9;&#x64CD;&#x4F5C;&#xFF0C;Python&#x4E2D;**&#x8868;&#x793A;&#x4E58;&#x65B9;&#xFF0C;&#x800C;C/C++&#x6CA1;&#x6709;&#x4E58;&#x65B9;&#x64CD;&#x4F5C;&#x3002;&#x2003;&#x2003;&#xFF08;7&#xFF09;&#x903B;&#x8F91;&#x64CD;&#x4F5C;&#xFF0C;Python&#x4E2D;and&#xFF0C;or&#xFF0C;not&#x8868;&#x793A;&#x4E0E;&#x6216;&#x975E;&#xFF0C;&#x800C;C/C++&#x7528;&amp;&amp;&#xFF0C;||&#xFF0C;!&#x8868;&#x793A;&#x3002;&#x2003;&#x2003;&#xFF08;8&#xFF09;&#x6761;&#x4EF6;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;Python&#x4E2D;x if condition else y &#x5224;&#x65AD;condition&#x4E3A;&#x6761;&#x4EF6;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x800C;C/C++&#x7528;condition?x:y&#x8868;&#x793A;&#x3002;&#x2003;&#x2003;&#xFF08;9&#xFF09;&#x6761;&#x4EF6;&#x8BED;&#x53E5;&#xFF0C;Python&#x4E2D;if &#x2026; elif&#x2026; else &#x2026;&#xFF0C;&#x800C;C/C++&#x7528;if &#x2026; else if &#x2026; else &#x2026;&#x3002;&#x2003;&#x2003;&#xFF08;10&#xFF09;&#x81EA;&#x52A0;&#x81EA;&#x51CF;&#xFF0C;Python&#x4E2D;&#x6CA1;&#x6709;i++&#x6216;&#x8005;++i&#xFF0C;&#x800C;C/C++&#x6709;&#x3002;&#x2003;&#x2003;&#xFF08;11&#xFF09;do &#x2026; while&#x8BED;&#x53E5;&#xFF0C;Python&#x4E2D;&#x6CA1;&#x6709;do &#x2026; while&#x8BED;&#x53E5;&#xFF0C;&#x800C;C/C++&#x6709;&#x3002;&#x2003;&#x2003;&#xFF08;12&#xFF09;&#x5927;&#x6570;&#x5B57;&#x8FD0;&#x7B97;&#xFF0C;Python&#x4E2D;&#x652F;&#x6301;&#x5927;&#x6574;&#x6570;&#x7684;&#x8FD0;&#x7B97;&#xFF0C;&#x800C;C/C++&#x6709;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x7684;&#x9650;&#x5236;&#xFF0C;&#x4E00;&#x65E6;&#x8D85;&#x8FC7;&#x8303;&#x56F4;&#x4F1A;&#x51FA;&#x73B0;&#x95EE;&#x9898;&#x3002;&#x2003;&#x2003;&#xFF08;13&#xFF09;&#xFF1A;&#x8FD0;&#x7B97;&#xFF0C;Python&#x4E2D;&#x652F;&#x6301;&#x5192;&#x53F7;&#x8FD0;&#x7B97;&#x83B7;&#x53D6;&#x8FDE;&#x7EED;&#x7D22;&#x5F15;&#xFF0C;&#x800C;C/C++&#x5192;&#x53F7;&#x548C;&#x95EE;&#x53F7;&#x4E00;&#x8D77;&#x4F5C;&#x4E3A;&#x4E09;&#x76EE;&#x8FD0;&#x7B97;&#x7B26;&#x3002;&#x2003;&#x2003;&#xFF08;14&#xFF09;&#x7D22;&#x5F15;&#x64CD;&#x4F5C;&#xFF0C;Python&#x4E2D;&#x652F;&#x6301;&#x8D1F;&#x6570;&#x7D22;&#x5F15;&#xFF0C;-1&#x4EE3;&#x8868;&#x6700;&#x597D;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x800C;C/C++&#x4E0D;&#x652F;&#x6301;&#x3002;&#x2003;&#x2003;&#xFF08;15&#xFF09;&#x5185;&#x7F6E;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;Python&#x4E2D;&#x5177;&#x6709;&#x5F88;&#x591A;&#x975E;&#x5E38;&#x597D;&#x7528;&#x7684;&#x5185;&#x7F6E;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x5982;&#x5217;&#x8868;&#xFF0C;&#x5143;&#x7EC4;&#xFF0C;&#x5B57;&#x5178;&#x7B49;&#xFF0C;&#x800C;C/C++&#x6CA1;&#x6709;&#x3002;&#x2003;&#x2003;&#xFF08;16&#xFF09;&#x5185;&#x7F6E;&#x51FD;&#x6570;&#xFF0C;Python&#x4E2D;&#x5177;&#x6709;&#x5F88;&#x591A;&#x975E;&#x5E38;&#x597D;&#x7528;&#x7684;&#x5185;&#x7F6E;&#x51FD;&#x6570;&#xFF0C;&#x5982;len(), sorted()&#x7B49;&#xFF0C;&#x800C;C/C++&#x6CA1;&#x6709;&#x3002;&#x2003;&#x2003;&#xFF08;17&#xFF09;&#x5185;&#x7F6E;&#x8BED;&#x6CD5;&#x7ED3;&#x6784;&#xFF0C;Python&#x4E2D;&#x5177;&#x6709;&#x5F88;&#x591A;&#x975E;&#x5E38;&#x597D;&#x7528;&#x7684;&#x5185;&#x7F6E;&#x8BED;&#x6CD5;&#x7ED3;&#x6784;&#xFF0C;&#x5982;with&#x8BED;&#x6CD5;&#xFF0C;lambda&#x8868;&#x8FBE;&#x5F0F;&#x7B49;&#xFF0C;&#x800C;C/C++&#x6CA1;&#x6709;&#x3002;&#x2003;&#x2003;&#xFF08;18&#xFF09;&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x503C;&#xFF0C;Python&#x4E2D;&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x503C;&#x53EF;&#x4EE5;&#x540C;&#x65F6;&#x8FD4;&#x56DE;&#x591A;&#x4E2A;&#x503C;&#xFF0C;&#x800C;C/C++&#x53EA;&#x80FD;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x3002;&#x2003;&#x2003;&#xFF08;19&#xFF09;&#x51FD;&#x6570;&#x5B9A;&#x4E49;&#xFF0C;Python&#x4E2D;&#x7528;def&#x52A0;&#x51FD;&#x6570;&#x540D;&#x5B9A;&#x4E49;&#xFF0C;&#x4E14;&#x8F93;&#x5165;&#x53C2;&#x6570;&#x6CA1;&#x6709;&#x7C7B;&#x578B;&#x540D;&#xFF0C;&#x800C;C/C++&#x5FC5;&#x987B;&#x5148;&#x5199;&#x8FD4;&#x56DE;&#x503C;&#x7684;&#x7C7B;&#x578B;&#x540D;&#x52A0;&#x51FD;&#x6570;&#x540D;&#xFF0C;&#x4E14;&#x8F93;&#x5165;&#x53C2;&#x6570;&#x4E5F;&#x5FC5;&#x987B;&#x6709;&#x7C7B;&#x578B;&#x540D;&#x3002;&#x2003;&#x2003;&#xFF08;20&#xFF09;&#x5B8F;&#x5B9A;&#x4E49;&#xFF0C;Python&#x4E2D;&#x6CA1;&#x6709;&#x5B8F;&#x5B9A;&#x4E49;&#xFF0C;&#x800C;C/C++&#x53EF;&#x4EE5;&#x4F7F;&#x7528;define&#x3002;&#x2003;&#x2003;&#xFF08;21&#xFF09;&#x6307;&#x9488;&#xFF0C;Python&#x4E2D;&#x6CA1;&#x6709;&#x6307;&#x9488;&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x800C;C/C++&#x6307;&#x9488;&#x662F;&#x6700;&#x91CD;&#x8981;&#x4E5F;&#x662F;&#x6700;&#x590D;&#x6742;&#x7684;&#x5185;&#x5BB9;&#x3002;&#x2003;&#x2003;&#xFF08;22&#xFF09;else&#xFF0C;Python&#x4E2D;else&#x53EF;&#x4EE5;&#x548C;if, while, for, try&#x7ED3;&#x5408;&#xFF0C;&#x800C;C/C++else&#x4E00;&#x822C;&#x548C;if&#x7ED3;&#x5408;&#x5728;&#x4E00;&#x8D77;&#x3002;&#x2003;&#x2003;&#xFF08;23&#xFF09;pass&#xFF0C;Python&#x4E2D;pass&#x4EE3;&#x8868;&#x540E;&#x9762;&#x6CA1;&#x6709;&#x5185;&#x5BB9;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x7528;&#x4E09;&#x4E2A;&#x5C0F;&#x6570;&#x70B9;(&#x2026;)&#x8868;&#x793A;&#xFF0C;&#x800C;C/C++&#x6CA1;&#x6709;pass&#xFF0C;&#x540E;&#x9762;&#x6CA1;&#x6709;&#x4EE3;&#x7801;&#x4EE3;&#x8868;&#x6CA1;&#x6709;&#x5185;&#x5BB9;&#x3002;&#x2003;&#x2003;&#xFF08;24&#xFF09;&#x5BFC;&#x5165;&#x6A21;&#x5757;&#xFF0C;Python&#x4E2D;&#x4F7F;&#x7528;import&#x5BFC;&#x5165;&#x6A21;&#x5757;&#xFF0C;&#x800C;C/C++&#x4F7F;&#x7528;include&#x5BFC;&#x5165;&#x6A21;&#x5757;&#x3002;&#x2003;&#x2003;&#xFF08;25&#xFF09;&#x5168;&#x5C40;&#x53D8;&#x91CF;&#xFF0C;Python&#x4E2D;&#x4F7F;&#x7528;global&#x5728;&#x4F7F;&#x7528;&#x5904;&#x58F0;&#x660E;&#xFF0C;&#x800C;&#x4E14;&#x5728;&#x5916;&#x90E8;&#x4E5F;&#x8981;&#x5148;&#x5B9A;&#x4E49;&#x8BE5;&#x53D8;&#x91CF;&#xFF0C;&#x800C;C/C++&#x7528;extern&#x6216;&#x8005;&#x5728;&#x51FD;&#x6570;&#x5916;&#x90E8;&#x76F4;&#x63A5;&#x5B9A;&#x4E49;&#x3002;&#x2003;&#x2003;&#xFF08;26&#xFF09;&#x5BF9;&#x8C61;&#x6307;&#x9488;&#xFF0C;Python&#x4E2D;&#x7C7B;&#x5BF9;&#x8C61;&#x7684;&#x6307;&#x9488;&#x4E3A;&#x51FD;&#x6570;&#x5217;&#x8868;&#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x4E00;&#x822C;&#x4E3A;self&#xFF0C;&#x800C;C/C++&#x7528;this&#x6307;&#x9488;&#x8868;&#x793A;&#x3002;&#x2003;&#x2003;&#xFF08;27&#xFF09;&#x79C1;&#x6709;&#x53D8;&#x91CF;&#xFF0C;Python&#x4E2D;&#x5728;&#x5C5E;&#x6027;&#x524D;&#x52A0;(__)&#x4E24;&#x4E2A;&#x4E0B;&#x5212;&#x7EBF;&#xFF0C;&#x800C;C/C++&#x7528;private&#x5B9A;&#x4E49;&#x3002;&#x2003;&#x2003;&#xFF08;28&#xFF09;&#x52A8;&#x6001;&#x8BED;&#x8A00;&#xFF0C;Python&#x4E2D;&#x53EF;&#x4EE5;&#x52A8;&#x6001;&#x7ED9;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x6DFB;&#x52A0;&#x5C5E;&#x6027;&#x6216;&#x65B9;&#x6CD5;&#xFF0C;&#x800C;C/C++&#x5FC5;&#x987B;&#x63D0;&#x524D;&#x5B9A;&#x4E49;&#xFF0C;&#x65E0;&#x6CD5;&#x52A8;&#x6001;&#x6DFB;&#x52A0;&#x3002; &#xFF0C;Python&#x4E2D;&#x4F7F;&#x7528;import&#x5BFC;&#x5165;&#x6A21;&#x5757;&#xFF0C;&#x800C;C/C++&#x4F7F;&#x7528;include&#x5BFC;&#x5165;&#x6A21;&#x5757;&#x3002; Python&#x7279;&#x70B9;&#x2003;&#x2003;&#x7B80;&#x5355;&#x6027;&#xFF1A;Python&#x8BED;&#x6CD5;&#x975E;&#x5E38;&#x7B80;&#x5355;&#xFF0C;&#x76F8;&#x6BD4;&#x4E8E;&#x5927;&#x5B66;&#x901A;&#x7528;&#x8BFE;&#x7A0B;&#x7684;C&#x7701;&#x53BB;&#x4E86;&#x6700;&#x6666;&#x6DA9;&#x7684;&#x6307;&#x9488;&#x3002;&#x2003;&#x2003;&#x7B80;&#x6D01;&#x6027;&#xFF1A;Python&#x4EE3;&#x7801;&#x91CF;&#x7EA6;&#x4E3A;Java&#x7684;&#x4E94;&#x5206;&#x4E4B;&#x4E00;&#xFF0C;&#x6545;&#x6709;&#x201D;&#x4EBA;&#x751F;&#x82E6;&#x77ED;&#xFF0C;&#x6211;&#x7528;Python&#x201D;&#x3002;&#x2003;&#x2003;&#x6807;&#x51C6;&#x5E93;&#xFF1A;Python&#x62E5;&#x6709;&#x5F3A;&#x5927;&#x7684;&#x6807;&#x51C6;&#x5E93;&#xFF0C;&#x80FD;&#x89E3;&#x51B3;&#x5927;&#x591A;&#x6570;&#x4F7F;&#x7528;&#x8005;&#x7684;&#x9700;&#x6C42;&#x3002;&#x2003;&#x2003;&#x793E;&#x533A;&#x5F3A;&#xFF1A;Python&#x793E;&#x533A;&#x975E;&#x5E38;&#x5F3A;&#x5927;&#xFF0C;&#x80FD;&#x591F;&#x63D0;&#x4F9B;&#x5927;&#x91CF;&#x7684;&#x7B2C;&#x4E09;&#x65B9;&#x6A21;&#x5757;&#x3002;&#x2003;&#x2003;&#x53EF;&#x79FB;&#x690D;&#xFF1A;Python&#x7531;&#x4E8E;&#x5176;&#x5F00;&#x6E90;&#x672C;&#x8D28;&#xFF0C;&#x5DF2;&#x7ECF;&#x88AB;&#x79FB;&#x690D;&#x5728;&#x5F88;&#x591A;&#x5E73;&#x53F0;&#x3002; Python&#x5C0F;&#x7ED3;&#x2003;&#x2003;Python&#x88AB;&#x79F0;&#x4E3A;&#x80F6;&#x6C34;&#x8BED;&#x8A00;&#xFF0C;&#x4E3B;&#x8981;&#x5F52;&#x529F;&#x4E8E;python&#x5E93;&#x7684;&#x5F3A;&#x5927;&#xFF0C;&#x4F7F;&#x5F97;&#x5728;&#x673A;&#x5668;&#x5B66;&#x4E60;&#xFF0C;&#x6570;&#x636E;&#x6316;&#x6398;&#x7B49;&#x65B9;&#x5411;&#x706B;&#x70ED;&#x7684;&#x4ECA;&#x5929;&#x53D7;&#x5230;&#x4E86;&#x5E7F;&#x6CDB;&#x7684;&#x5173;&#x6CE8;&#xFF0C;&#x5728;&#x5404;&#x4E2A;&#x8F6F;&#x4EF6;&#x6392;&#x884C;&#x699C;&#x4E2D;&#xFF0C;Python&#x90FD;&#x4EE5;&#x6700;&#x5FEB;&#x7684;&#x901F;&#x5EA6;&#x4E0A;&#x5347;&#xFF0C;&#x7531;&#x4E8E;&#x5176;&#x7B80;&#x5355;&#x6613;&#x5B66;&#xFF0C;&#x8BB8;&#x591A;&#x9AD8;&#x6821;&#x4E5F;&#x5C06;&#x4F20;&#x7EDF;&#x7684;&#x5165;&#x95E8;&#x8BED;&#x8A00;&#x4ECE;C&#x8F6C;&#x5411;&#x4E86;Python&#xFF0C;&#x56E0;&#x6B64;&#x5728;AI&#x76DB;&#x884C;&#x7684;&#x65F6;&#x4EE3;&#xFF0C;&#x62E5;&#x62B1;Python&#x5427;&#xFF01; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>语言学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PyTorch]]></title>
    <url>%2F2019%2F09%2F08%2Fframe%20pytorch%2F</url>
    <content type="text"><![CDATA[PyTorch &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;PyTorch:&#x662F;Facebook&#x516C;&#x53F8;&#x4E8E;2017&#x5E74;1&#x6708;&#x53D1;&#x5E03;&#x7684;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x5F00;&#x53D1;&#x5E73;&#x53F0;&#x3002;&#x4F46;&#x662F;PyTorch&#x7684;&#x5386;&#x53F2;&#x53EF;&#x4EE5;&#x8FFD;&#x6EAF;&#x5230;2002&#x5E74;&#xFF0C;&#x5F53;&#x65F6;Torch&#x4F7F;&#x7528;&#x4E86;&#x4E00;&#x79CD;&#x5C0F;&#x4F17;&#x8BED;&#x8A00;Lua&#x4F5C;&#x4E3A;&#x501F;&#x53E3;&#xFF0C;&#x4F7F;&#x7528;&#x4EBA;&#x6570;&#x8F83;&#x5C11;&#xFF0C;&#x5728;2017&#x5E74;&#x63A8;&#x51FA;&#x4E86;Python&#x63A5;&#x53E3;&#x7684;Torch&#xFF0C;&#x6545;&#x79F0;&#x4E3A;PyTorch&#xFF0C;&#x73B0;&#x5728;&#x4E5F;&#x79F0;&#x4E3A;&#x4E86;&#x5F53;&#x4E0B;&#x6700;&#x6D41;&#x884C;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x6846;&#x67B6;&#x4E4B;&#x4E00;&#x3002; PyTorch&#x7279;&#x70B9;&#x2003;&#x2003;PyTorch&#x5177;&#x6709;&#x9AD8;&#x5EA6;&#x7684;&#x7B80;&#x6D01;&#x6027;&#xFF1A;&#x548C;TensorFlow1.x&#x7248;&#x672C;&#x6709;&#x8F83;&#x5927;&#x5DEE;&#x8DDD;&#xFF0C;&#x4FBF;&#x4E8E;&#x7528;&#x6237;&#x4F7F;&#x7528;&#x548C;&#x7406;&#x89E3;&#x3002;&#x2003;&#x2003;PyTorch&#x5177;&#x6709;&#x8F83;&#x5FEB;&#x7684;&#x901F;&#x5EA6;&#xFF1A;PyTorch&#x7684;&#x901F;&#x5EA6;&#x8868;&#x73B0;&#x80DC;&#x8FC7;TensorFlow&#x548C;Keras&#x7B49;&#x6846;&#x67B6;&#x3002;&#x2003;&#x2003;PyTorch&#x4F7F;&#x7528;&#x65B9;&#x4FBF;&#xFF1A;PyTorch&#x5199;&#x4EE3;&#x7801;&#x975E;&#x5E38;&#x7684;&#x4F18;&#x96C5;&#xFF0C;&#x6240;&#x601D;&#x5373;&#x6240;&#x5199;&#xFF0C;&#x4E0D;&#x7528;&#x8003;&#x8651;&#x592A;&#x591A;&#x5173;&#x4E8E;&#x6846;&#x67B6;&#x672C;&#x8EAB;&#x7684;&#x675F;&#x7F1A;&#x3002;&#x2003;&#x2003;PyTorch&#x5177;&#x6709;&#x6D3B;&#x8DC3;&#x7684;&#x793E;&#x533A;&#xFF0C;&#x76EE;&#x524D;&#x7531;&#x4F5C;&#x8005;&#x4EB2;&#x81EA;&#x7EF4;&#x62A4;&#xFF0C;&#x4F9B;&#x5E7F;&#x5927;&#x7528;&#x6237;&#x7684;&#x5B66;&#x4E60;&#x548C;&#x4EA4;&#x6D41;&#x3002;&#x2003;&#x2003;PyTorch&#x5177;&#x6709;&#x529F;&#x80FD;&#x5F3A;&#x5927;&#x7684;&#x53EF;&#x89C6;&#x5316;&#x7EC4;&#x5EFA;Visdom&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x8BAD;&#x7EC3;&#x65F6;&#x76D1;&#x63A7;&#x8BAD;&#x7EC3;&#x8FC7;&#x7A0B;&#x3002; PyTorch&#x5E94;&#x7528;PyTorch&#x521B;&#x5EFA;tensortensor&#xFF0C;arange&#x65B9;&#x6CD5;1234567import torch# torch.tensor(data, dtype) &#x5C06;data&#x8F6C;&#x6362;&#x4E3A;tensor&#xFF0C;&#x7C7B;&#x578B;&#x4E3A;dtypea = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)# torch.arange(start, end, steps, dtype) &#x4EA7;&#x751F;&#x8FDE;&#x7EED;&#x7684;tensor&#xFF0C;&#x4ECE;start&#x5F00;&#x59CB;&#x5230;end&#x7ED3;&#x675F;&#xFF0C;&#x6B65;&#x957F;&#x4E3A;stepb = torch.arange(1, 10, 2) zeros&#xFF0C;zeros_like&#xFF0C;ones&#xFF0C;ones_like&#xFF0C;eye&#x65B9;&#x6CD5;12345678910111213141516import torch# torch.zeros(size, dtype=None) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E3A;shape&#x503C;&#x5168;&#x4E3A;0&#x7684;tensora = torch.zeros((2,3))# torch.ones(size, dtype=None) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E3A;shape&#x503C;&#x5168;&#x4E3A;1&#x7684;tensorb = torch.ones((2,3))# torch.zeros_like(obj, dtype) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E0E;array&#x76F8;&#x540C;&#xFF0C;&#x503C;&#x5168;&#x4E3A;0&#x7684;tensorc = torch.zeros_like(b)# torch.ones_like(obj, dtype) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E0E;array&#x76F8;&#x540C;&#xFF0C;&#x503C;&#x5168;&#x4E3A;1&#x7684;tensord = torch.ones_like(a)# torch.eye(n, m) &#x751F;&#x6210;n&#x884C;m&#x5217;&#x7684;&#x5355;&#x4F4D;&#x77E9;&#x9635;&#xFF0C;m&#x9ED8;&#x8BA4;&#x7B49;&#x4E8E;ne = torch.eye(3, 4) rand&#xFF0C;randn&#xFF0C;randperm&#xFF0C;randint&#x65B9;&#x6CD5;12345678910111213import torch# torch.rand(size) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E3A;size&#x7684;(0-1)&#x5747;&#x5300;&#x5206;&#x5E03;&#x968F;&#x673A;&#x6570;a = torch.rand((2,3))# torch.randn(size) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E3A;size&#x7684;&#x6807;&#x51C6;&#x9AD8;&#x65AF;&#x5206;&#x5E03;&#x968F;&#x673A;&#x6570;b = torch.randn((2,3))# torch.randperm(n) &#x751F;&#x6210;0&#x5230;n-1&#x6574;&#x6570;&#x7684;&#x968F;&#x673A;&#x6392;&#x5217;c = torch.randperm(10)# torch.randint(low, high, size) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E3A;size&#xFF0C;&#x6700;&#x5C0F;&#x503C;&#x4E3A;low&#xFF0C;&#x6700;&#x5927;&#x503C;&#x4E3A;high-1&#x7684;&#x968F;&#x673A;&#x6574;&#x6570;d = torch.randint(1, 10, (3, 3)) linspace&#xFF0C;logspace&#x65B9;&#x6CD5;1234567import torch# torch.linspace(start, end, steps=100, dtype=None) &#x5C06;start&#x5230;stop&#x7B49;&#x5206;&#x6210;steps&#x4E2A;&#x70B9;(&#x9ED8;&#x8BA4;&#x4E3A;100&#x4E2A;&#x70B9;)&#xFF0C;&#x5305;&#x62EC;end&#x70B9;a = torch.linspace(10, 20, 6)# torch.logspace(start, stop, steps=100, base=10.0, dtype=None) &#x5C06;start&#x5230;stop&#x7B49;&#x5206;&#x6210;steps&#x4E2A;&#x70B9;(&#x9ED8;&#x8BA4;&#x4E3A;100&#x4E2A;&#x70B9;)&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x70B9;i&#x7684;&#x503C;&#x4E3A;base&#x7684;i&#x6B21;&#x5E42;b = torch.logspace(1, 2, 10) is_tensor&#xFF0C;numel&#xFF0C;from_numpy&#xFF0C;numpy&#x65B9;&#x6CD5;1234567891011121314151617import torchimport numpy as npa = torch.arange(10, 20, 2)b = np.arange(10, 20, 2)# torch.is_tensor(obj) &#x5224;&#x65AD;obj&#x662F;&#x5426;&#x4E3A;tensortorch.is_tensor(a)# torch.numel(obj) &#x8BA1;&#x7B97;obj&#x4E2D;&#x7684;&#x5143;&#x7D20;&#x4E2A;&#x6570;torch.numel(a)# torch.from_numpy(ndarray) &#x5C06;ndarray&#x6570;&#x7EC4;&#x7C7B;&#x578B;&#x8F6C;&#x6362;&#x4E3A;tensorc = torch.from_numpy(b)# obj.numpy() &#x8FD4;&#x56DE;obj&#x7684;ndarray&#x6570;&#x7EC4;&#x7C7B;&#x578B;d = c.numpy() shape&#xFF0C;dtype&#x65B9;&#x6CD5;123456789import torcha = torch.randint(1, 9, (3, 3))# obj.shape &#x67E5;&#x770B;obj&#x7684;&#x5F62;&#x72B6;a.shape# obj.dtype &#x67E5;&#x770B;obj&#x7684;&#x5143;&#x7D20;&#x7C7B;&#x578B;a.dtype PyTorch&#x5207;&#x7247;&#x4E0E;&#x7D22;&#x5F15;[]&#x7D22;&#x5F15;123456789101112131415import torcha = torch.arange(27).reshape((3, 3, 3))# obj[index0][index1]...&#x7B49;&#x4EF7;&#x4E8E;obj[index0, index1, ...] &#x7D22;&#x5F15;a[1][1][1]a[1, 1, 1]# obj[start, end, step] &#x5207;&#x7247;&#x7D22;&#x5F15;a[0:2, 0:2, 0:2]# obj[...] ...&#x53EF;&#x4EE5;&#x4EE3;&#x66FF;&#x8FDE;&#x7EED;&#x7684;:a[..., 0]a[0, ...]a[0, ..., 0] gather&#x65B9;&#x6CD5;1234567import torcha = torch.arange(9).reshape((3, 3))# torch.gather(tensor, dim, index) &#x6309;&#x7167;dim&#x548C;index&#x5BF9;tensor&#x8FDB;&#x884C;&#x7D22;&#x5F15;b = torch.gather(a, dim=0, index=torch.tensor([[0, 1, 2], [1, 2, 0], [2, 0, 1]])) &#x6309;&#x7167;&#x7B2C;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;&#x884C;&#x5F00;&#x59CB;&#x7D22;&#x5F15;&#xFF0C;[0, 1, 2]&#x4EE3;&#x8868;&#x7B2C;&#x4E00;&#x884C;&#x7684;&#x4E09;&#x4E2A;&#x5143;&#x7D20;&#x6765;&#x81EA;&#x4E8E;a&#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x884C;&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#xFF0C;&#x7B2C;&#x4E09;&#x884C;&#xFF0C;&#x5217;&#x6309;&#x987A;&#x5E8F;&#x7B2C;&#x4E00;&#x5217;&#xFF0C;&#x7B2C;&#x4E8C;&#x5217;&#xFF0C;&#x7B2C;&#x4E09;&#x5217;&#xFF0C;&#x5373;&#x7B2C;&#x4E00;&#x884C;&#x7684;&#x5143;&#x7D20;&#x4E3A;a[0][0]&#xFF0C;a[1][1]&#xFF0C;a[2][2]c = torch.gather(a, dim=1, index=torch.tensor([[0, 1, 2], [1, 2, 0], [2, 0, 1]])) &#x6309;&#x7167;&#x7B2C;&#x4E8C;&#x4E2A;&#x7EF4;&#x5EA6;&#x5217;&#x5F00;&#x59CB;&#x7D22;&#x5F15;&#xFF0C;[0, 1, 2]&#x4EE3;&#x8868;&#x7B2C;&#x4E00;&#x884C;&#x7684;&#x4E09;&#x4E2A;&#x5143;&#x7D20;&#x6765;&#x81EA;&#x4E8E;a&#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x5217;&#xFF0C;&#x7B2C;&#x4E8C;&#x5217;&#xFF0C;&#x7B2C;&#x4E09;&#x5217;&#xFF0C;&#x90FD;&#x5C5E;&#x4E8E;&#x7B2C;&#x4E00;&#x884C;&#xFF0C;&#x5373;&#x7B2C;&#x4E00;&#x884C;&#x7684;&#x5143;&#x7D20;&#x4E3A;a[0][0]&#xFF0C;a[0][1]&#xFF0C;a[0][2] PyTorch&#x7EF4;&#x5EA6;&#x53D8;&#x6362;reshape&#xFF0C;squeeze&#xFF0C;unsqueeze&#xFF0C;transpose&#x65B9;&#x6CD5;12345678910111213141516import torcha = torch.arange(12)# obj.reshape(shape) &#x5C06;obj&#x7684;&#x5F62;&#x72B6;&#x53D8;&#x4E3A;shapeb = a.reshape((3, 4))# obj.unsqueeze(dim) &#x5728;dim&#x4E0A;&#x63D2;&#x5165;&#x4E00;&#x4E2A;&#x5927;&#x5C0F;&#x4E3A;1&#x7684;&#x8F74;c = b.unsqueeze(1)# obj.squeeze(dim) &#x5C06;&#x5927;&#x5C0F;&#x4E3A;1&#x7684;&#x8F74;dim&#x5220;&#x53BB;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x6240;&#x6709;&#x5927;&#x5C0F;&#x4E3A;1&#x7684;&#x8F74;&#xFF0C;&#x5982;&#x679C;&#x5927;&#x5C0F;&#x4E0D;&#x4E3A;1&#x5219;&#x4E0D;&#x5220;&#x53BB;d = c.squeeze()# obj.transpose(dim0, dim1) &#x5C06;obj&#x7684;&#x8F74;0&#x548C;&#x8F74;1&#x8C03;&#x6362;&#xFF0C;obj.t()&#x5C06;&#x4E8C;&#x7EF4;obj&#x8F6C;&#x7F6E;e = b.transpose(0, 1)f = b.t() torch.broadcast_tensors&#x65B9;&#x6CD5;1234567import torcha = torch.arange(3)b = torch.ones((3, 3, 3))# torch.broadcast_tensors(a, b) &#x5C06;a&#x5E7F;&#x64AD;&#x4E3A;b&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x8FD4;&#x56DE;a&#x5E7F;&#x64AD;&#x540E;&#x7684;tensor&#x548C;bc, d = torch.broadcast_tensors(a, b) PyTorch&#x5408;&#x5E76;&#x4E0E;&#x5206;&#x5272;cat&#xFF0C;stack&#xFF0C;chunk&#xFF0C;split&#x65B9;&#x6CD5;12345678910111213141516import torcha = torch.arange(6).reshape((2, 3))b = torch.arange(7,13).reshape((2, 3))# torch.cat(tensors, dim) &#x5C06;&#x591A;&#x4E2A;tensors&#x6309;&#x7167;dim&#x8FDB;&#x884C;&#x5408;&#x5E76;c = torch.cat([a, b], dim=1)# tf.stack(tensors, dim) &#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x65B0;&#x7EF4;&#x5EA6;&#xFF0C;&#x5E76;&#x5408;&#x5E76;&#x5230;&#x8BE5;&#x7EF4;&#x5EA6;d = torch.stack([a, b], dim=0)# torch.chunk(tensor, chunks, dim) &#x5BF9;tensor&#x6309;&#x7167;dim&#x8F74;&#x8FDB;&#x884C;&#x62C6;&#x5206;&#x6210;chunks&#x4EFD;e, f = torch.chunk(d, 2, dim=0)# torch.split(tensor, split_size_or_sections, dim) &#x5BF9;tensor&#x6309;&#x7167;dim&#x8F74;&#x8FDB;&#x884C;&#x62C6;&#x5206;&#xFF0C;&#x5982;&#x679C;&#x5E0C;&#x671B;&#x5747;&#x5300;&#x62C6;&#x5206;&#x5219;num_or_size_splits&#x4E3A;&#x5E38;&#x6570;&#xFF0C;&#x4EE3;&#x8868;&#x6BCF;&#x90E8;&#x5206;&#x7684;&#x4E2A;&#x6570;(&#x4E0D;&#x540C;&#x4E8E;TensorFlow&#xFF0C;&#x4EE3;&#x8868;&#x5206;&#x6210;&#x591A;&#x5C11;&#x4E2A;&#x90E8;&#x5206;)&#xFF0C;&#x5426;&#x5219;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x5217;&#x8868;&#xFF0C;&#x4EE3;&#x8868;&#x6BCF;&#x4E00;&#x90E8;&#x5206;&#x7684;&#x6570;&#x91CF;h = torch.split(d, 1, dim=2) PyTorch&#x6570;&#x636E;&#x7EDF;&#x8BA1;max&#xFF0C;min&#x65B9;&#x6CD5;123456789import torcha = torch.randperm(9).reshape((3, 3))# torch.max(obj, dim) &#x6C42;&#x5728;&#x6307;&#x5B9A;&#x8F74;dim&#x7684;&#x6700;&#x5927;&#x503C;&#x53CA;&#x5176;&#x7D22;&#x5F15;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x6C42;&#x5168;&#x5C40;&#x6700;&#x5927;&#x503C;b = torch.max(a, dim=0)# torch.min(obj, dim) &#x6C42;&#x5728;&#x6307;&#x5B9A;&#x8F74;dim&#x7684;&#x6700;&#x5C0F;&#x503C;&#x53CA;&#x5176;&#x7D22;&#x5F15;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x6C42;&#x5168;&#x5C40;&#x6700;&#x5C0F;&#x503C;c = torch.min(a, dim=0) dist&#xFF0C;mean&#xFF0C;median&#xFF0C;mode&#x65B9;&#x6CD5;12345678910111213141516import torcha = torch.randint(3, 7, (3, 3), dtype=torch.float32).reshape((3, 3))b = torch.randint(3, 7, (3, 3), dtype=torch.float32).reshape((3, 3))# torch.dist(tensor1, tensor2, p) &#x8BA1;&#x7B97;tensor1-tensor2&#x7684;p&#x8303;&#x6570;&#xFF0C;&#x8981;&#x5148;&#x8F6C;&#x6362;&#x6210;float32&#x683C;&#x5F0F;&#x8FDB;&#x884C;&#x8BA1;&#x7B97;c = torch.dist(a, b, 2)# torch.mean(tensor, dim) &#x8BA1;&#x7B97;tensor&#x7684;&#x5E73;&#x5747;&#x503C;d = torch.mean(a, dim=0)# torch.median(tensor, dim) &#x8BA1;&#x7B97;tensor&#x7684;&#x4E2D;&#x4F4D;&#x6570;&#x53CA;&#x5176;&#x7D22;&#x5F15;e = torch.median(a, dim=0)# torch.mode(tensor, dim) &#x8BA1;&#x7B97;tensor&#x7684;&#x4F17;&#x6570;&#x53CA;&#x5176;&#x7D22;&#x5F15;f = torch.mode(a, dim=0) sort&#xFF0C;topk&#x65B9;&#x6CD5;123456789import torcha = torch.randperm(9).reshape((3, 3))# torch.sort(tensor, dim=None, descending=False) &#x5C06;tensor&#x6309;&#x7167;dim&#x7EF4;&#x5EA6;&#x8FDB;&#x884C;&#x6392;&#x5E8F;(&#x9ED8;&#x8BA4;&#x4E3A;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;)&#xFF0C;descending=False&#x9ED8;&#x8BA4;&#x9012;&#x589E;&#x6392;&#x5E8F;&#xFF0C;descending=True&#x4E3A;&#x9012;&#x51CF;&#x6392;&#x5E8F;b = torch.sort(a)# torch.topk(tensor, k, dim=None, largest=True, sorted=True) &#x6C42;tensor&#x6700;&#x5927;&#x6216;&#x6700;&#x5C0F;&#x7684;k&#x4E2A;&#x503C;&#xFF0C;dim&#x9ED8;&#x8BA4;&#x4E3A;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;&#xFF0C;largest=True&#x8868;&#x793A;&#x6700;&#x5927;k&#x4E2A;&#x503C;&#xFF0C;largest=False&#x8868;&#x793A;&#x6700;&#x5C0F;k&#x4E2A;&#x503C;&#xFF0C;sorted=True&#x8868;&#x793A;&#x9ED8;&#x8BA4;&#x6392;&#x5E8F;&#xFF0C;sorted=False&#x8868;&#x793A;&#x4E0D;&#x6392;&#x5E8F;c = torch.topk(a, 2) PyTorch&#x5F20;&#x91CF;&#x9650;&#x5E45;clamp&#x65B9;&#x6CD5;123456import torcha = torch.randperm(9, dtype=torch.float32).reshape((3, 3))# torch.clamp(tensor, min, max) &#x5C06;tensor&#x4E2D;&#xFF0C;&#x5C0F;&#x4E8E;min&#x7684;&#x503C;&#x8D4B;&#x503C;&#x4E3A;min&#xFF0C;&#x5927;&#x4E8E;max&#x7684;&#x503C;&#x8D4B;&#x503C;&#x4E3A;maxb = torch.clamp(a, 3, 6) PyTorch&#x6570;&#x5B66;&#x8FD0;&#x7B97;&#x5E38;&#x89C4;&#x8FD0;&#x7B97;&#x65B9;&#x6CD5;1234567891011121314151617181920212223import torcha = torch.randint(-4, 5, (3, 3), dtype=torch.float32)b = torch.randperm(9, dtype=torch.float32).reshape((3, 3))# tensor1 op tensor2 &#x5C06;tensor1&#x4E0E;tensor2&#x8FDB;&#x884C;&#x5E38;&#x89C4;&#x7684;&#x6570;&#x5B66;&#x8FD0;&#x7B97;&#xFF0C;&#x5982;&#x679C;&#x7EF4;&#x5EA6;&#x5927;&#x5C0F;&#x4E0D;&#x540C;&#xFF0C;&#x5219;&#x8FDB;&#x884C;&#x5E7F;&#x64AD;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x80FD;&#x5E7F;&#x64AD;&#x5219;&#x62A5;&#x9519;a + ba * b# torch.abs(tensor) &#x6C42;tensor&#x7684;&#x7EDD;&#x5BF9;&#x503C;torch.abs(a)# torch.sqrt(tensor) &#x6C42;tensor&#x7684;&#x5E73;&#x65B9;&#x6839;torch.sqrt(b)# torch.sin(tensor) &#x6C42;tensor&#x7684;&#x6B63;&#x5F26;&#x503C;torch.sin(a)# torch.exp(tensor) &#x6C42;e&#x7684;tensor&#x6B21;&#x5E42;torch.exp(a)# torch.log(tensor) &#x6C42;tensor&#x4EE5;&#x81EA;&#x7136;&#x5BF9;&#x6570;&#x4E3A;&#x5E95;&#x7684;&#x503C;torch.log(b) ceil&#xFF0C;floor&#xFF0C;round&#xFF0C;frac&#xFF0C;trunc&#x65B9;&#x6CD5;123456789101112131415161718import torcha = torch.rand((3, 3)) * 10# torch.ceil(tensor) &#x5C06;tensor&#x7684;&#x5C0F;&#x6570;&#x90E8;&#x5206;&#x4E0A;&#x53D6;&#x6574;b = torch.ceil(a)# torch.floor(tensor) &#x5C06;tensor&#x7684;&#x5C0F;&#x6570;&#x90E8;&#x5206;&#x4E0B;&#x53D6;&#x6574;c = torch.floor(a)# torch.round(tensor) &#x5C06;tensor&#x7684;&#x5C0F;&#x6570;&#x90E8;&#x5206;&#x56DB;&#x820D;&#x4E94;&#x5165;d = torch.round(a)# torch.frac(tensor) &#x4FDD;&#x7559;tensor&#x7684;&#x5C0F;&#x6570;&#x90E8;&#x5206;e = torch.frac(a)# torch.trunc(tensor) &#x4FDD;&#x7559;tensor&#x7684;&#x6574;&#x6570;&#x90E8;&#x5206;f = torch.trunc(a) sign&#xFF0C;sigmoid&#xFF0C;kthvalue&#x65B9;&#x6CD5;123456789101112import torcha = torch.randn((3, 3))# torch.sign(tensor) &#x6C42;tensor&#x4F5C;&#x7528;&#x5728;&#x7B26;&#x53F7;&#x51FD;&#x6570;&#x4E0A;&#x7684;&#x503C;b = torch.sign(a)# torch.sigmoid(tensor) &#x6C42;tensor&#x4F5C;&#x7528;&#x5728;sigmoid&#x51FD;&#x6570;&#x4E0A;&#x7684;&#x503C;c = torch.sigmoid(a)# torch.kthvalue(tensor, k, dim=None) &#x6C42;tensor&#x7B2C;k&#x5C0F;&#x7684;&#x503C;&#xFF0C;dim&#x9ED8;&#x8BA4;&#x4E3A;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;d = torch.kthvalue(a, 2) eq&#xFF0C;equal&#x65B9;&#x6CD5;12345678910import torcha = torch.randint(1, 5, (3, 3))b = torch.randint(1, 5, (3, 3))# torch.eq(tensor1, tensor2) &#x7B49;&#x4EF7;&#x4E8E;tensor1 == tensor2&#xFF0C;&#x6BD4;&#x8F83;tensor1&#x548C;tensor2&#x662F;&#x5426;&#x76F8;&#x7B49;&#xFF0C;&#x5728;&#x5982;&#x679C;&#x76F8;&#x7B49;&#x5219;&#x5BF9;&#x5E94;&#x4F4D;&#x7F6E;&#x4E3A;True&#xFF0C;&#x5426;&#x5219;&#x4E3A;Falsetorch.eq(a, b)# torch.equal(tensor1, tensor2) &#x6BD4;&#x8F83;tensor1&#x548C;tensor2&#x662F;&#x5426;&#x76F8;&#x7B49;&#xFF0C;&#x5982;&#x679C;&#x76F8;&#x7B49;&#x5219;&#x8FD4;&#x56DE;True&#xFF0C;&#x5426;&#x5219;&#x4E3A;Falsetorch.equal(a, b) PyTorch&#x7EBF;&#x6027;&#x4EE3;&#x6570;diag&#xFF0C;trace&#xFF0C;tril&#xFF0C;triu&#x65B9;&#x6CD5;123456789101112131415import torcha = torch.randperm(9).reshape((3, 3))# torch.diag(tensor, diagonal=0) &#x5982;&#x679C;tensor&#x4E3A;&#x4E00;&#x7EF4;&#x5F20;&#x91CF;&#xFF0C;&#x8FD4;&#x56DE;&#x4E8C;&#x7EF4;&#x5F20;&#x91CF;&#xFF0C;&#x5982;&#x679C;tensor&#x4E3A;&#x4E8C;&#x7EF4;&#x5F20;&#x91CF;&#xFF0C;&#x8FD4;&#x56DE;&#x5BF9;&#x89D2;&#x7EBF;&#x5F20;&#x91CF;&#xFF0C;diagonal&#x4EE3;&#x8868;&#x5BF9;&#x89D2;&#x7EBF;&#x7684;&#x504F;&#x79FB;&#x91CF;b = torch.diag(a)# torch.trace(tensor) &#x6C42;tensor&#x7684;&#x8FF9;c = torch.trace(a)# torch.tril(tensor, k=0) &#x8FD4;&#x56DE;tensor&#x7684;&#x4E0B;&#x4E09;&#x89D2;&#x5F20;&#x91CF;&#xFF0C;&#x504F;&#x79FB;&#x4E3A;kd = torch.tril(a)# torch.triu(tensor, k=0) &#x8FD4;&#x56DE;tensor&#x7684;&#x4E0A;&#x4E09;&#x89D2;&#x5F20;&#x91CF;&#xFF0C;&#x504F;&#x79FB;&#x4E3A;ke = torch.triu(a) inverse&#xFF0C;eig&#xFF0C;svd&#x65B9;&#x6CD5;123456789101112import torcha = torch.randperm(9, dtype=torch.float32).reshape((3, 3))# torch.inverse(tensor) &#x6C42;tensor&#x7684;&#x9006;&#x77E9;&#x9635;b = torch.inverse(a)# torch.eig(tensor, eigenvectors=False) &#x6C42;tensor&#x7684;&#x7279;&#x5F81;&#x503C;&#xFF0C;eigenvectors=False&#x9ED8;&#x8BA4;&#x4E0D;&#x8BA1;&#x7B97;&#x7279;&#x5F81;&#x5411;&#x91CF;&#xFF0C;eigenvectors=True&#x8BA1;&#x7B97;&#x7279;&#x5F81;&#x5411;&#x91CF;c = torch.eig(a, True)# torch.svd(tensor) &#x6C42;tensor&#x7684;&#x5947;&#x5F02;&#x503C;&#x5206;&#x89E3;U, S, V = torch.svd(a) dot&#xFF0C;mm&#xFF0C;mv&#x65B9;&#x6CD5;12345678910111213import torcha = torch.randperm(9).reshape((3, 3))b = torch.tensor([1, 2, 3])# torch.dot(tensor1, tensor2) &#x4E24;&#x4E2A;&#x4E00;&#x7EF4;&#x5411;&#x91CF;&#x70B9;&#x4E58;c = torch.dot(b, b)# torch.mm(tensor1, tensor2) &#x77E9;&#x9635;&#x4E58;&#x6CD5;d = torch.mm(a, a)# torch.mv(tensor1, tensor2) &#x77E9;&#x9635;tensor1&#x4E58;&#x5411;&#x91CF;tensor2e = torch.mv(a, b) PyTorch&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;functional(&#x51FD;&#x6570;)&#x6A21;&#x5757;123456789101112131415from torch.nn import functional as f# f.relu(input) ReLu&#x6FC0;&#x6D3B;&#x51FD;&#x6570;# f.sigmoid(input) Sigmoid&#x6FC0;&#x6D3B;&#x51FD;&#x6570;# f.tanh(input) tanh&#x6FC0;&#x6D3B;&#x51FD;&#x6570;# f.softmax(input) softmax&#x5C42;# f.mse_loss(input, target) &#x8BA1;&#x7B97;input&#x548C;target&#x7684;&#x5747;&#x65B9;&#x5DEE;# f.binary_cross_entropy(input, target) &#x8BA1;&#x7B97;input&#x548C;target&#x4E8C;&#x5206;&#x7C7B;&#x4EA4;&#x53C9;&#x71B5;# f.cross_entropy(input, target)&#x8BA1;&#x7B97;input&#x548C;target&#x7684;&#x4EA4;&#x53C9;&#x71B5;&#xFF0C;&#x91CC;&#x9762;&#x5185;&#x7F6E;&#x4E86;softmax&#x5C42;&#xFF0C;&#x56E0;&#x6B64;&#x4E0D;&#x9700;&#x8981;&#x5148;&#x7ECF;&#x8FC7;softmax autograd(&#x81EA;&#x52A8;&#x6C42;&#x5BFC;)&#x6A21;&#x5757;123456789101112import torch# torch.tensor(data ,requires_grad=True) &#x521B;&#x5EFA;&#x65F6;&#x4F7F;&#x5176;&#x5177;&#x6709;&#x53EF;&#x5BFC;&#x5C5E;&#x6027;# obj.requires_grad_() &#x4F7F;&#x5DF2;&#x7ECF;&#x521B;&#x5EFA;&#x7684;obj&#x5177;&#x6709;&#x53EF;&#x5BFC;&#x5C5E;&#x6027;# torch.autograd.grad(outputs, inputs) outputs&#x5BF9;inputs&#x8FDB;&#x884C;&#x81EA;&#x52A8;&#x6C42;&#x5BFC;&#xFF0C;&#x524D;&#x63D0;&#x662F;&#x4FDD;&#x8BC1;inputs&#x5177;&#x6709;&#x53EF;&#x5BFC;&#x5C5E;&#x6027;torch.autograd.grad(res, w)# obj.backward() &#x5BF9;obj&#x8FDB;&#x884C;&#x4ECE;&#x540E;&#x5411;&#x524D;&#x81EA;&#x52A8;&#x6C42;&#x5BFC;&#xFF0C;&#x7136;&#x540E;&#x8C03;&#x7528;&#x53D8;&#x91CF;&#x7684;grad&#x6210;&#x5458;&#x53D8;&#x91CF;&#x5373;&#x53EF;&#x5F97;&#x5230;&#x5176;&#x5BFC;&#x6570;res.backward()w.grad optim(&#x4F18;&#x5316;&#x5668;)&#x6A21;&#x5757;1234567import torch# torch.optim.SGD(lr=0.01, momentum=0.0, dampending=0, weight_decay=0.0, nesterov=False) &#x968F;&#x673A;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x4F18;&#x5316;&#x5668;&#xFF0C;&#x5B66;&#x4E60;&#x7387;lr&#x9ED8;&#x8BA4;&#x4E3A;0.01&#xFF0C;&#x52A8;&#x91CF;momentum&#x9ED8;&#x8BA4;&#x4E3A;0&#xFF0C;&#x52A8;&#x91CF;&#x6291;&#x5236;&#x56E0;&#x5B50;&#x4E3A;0&#xFF0C;&#x5B66;&#x4E60;&#x7387;&#x8870;&#x51CF;decay&#x9ED8;&#x8BA4;&#x4E3A;0&#xFF0C;&#x9ED8;&#x8BA4;&#x4E0D;&#x4F7F;&#x7528;nesterov&#x52A8;&#x91CF;# torch.optim.RMSprop(lr=0.001, alpha=0.9, eps=None, weight_decay=0.0, momentum=0.0) RMSProp&#x4F18;&#x5316;&#x5668;&#xFF0C;&#x5B66;&#x4E60;&#x7387;lr&#x9ED8;&#x8BA4;&#x4E3A;0.001&#xFF0C;&#x53C2;&#x6570;alpha&#x9ED8;&#x8BA4;&#x4E3A;0.99&#xFF0C;&#x6A21;&#x7CCA;&#x56E0;&#x5B50;epsilon&#x9ED8;&#x8BA4;&#x4E3A;None&#xFF0C;&#x5B66;&#x4E60;&#x7387;&#x8870;&#x51CF;weight_decay&#x9ED8;&#x8BA4;&#x4E3A;0&#xFF0C;&#x52A8;&#x91CF;momentum&#x9ED8;&#x8BA4;&#x4E3A;0# torch.optim.Adam(lr=0.001, betas=(0.9, 0.999), eps=None, weight_decay=0.0) Adam&#x4F18;&#x5316;&#x5668;&#xFF0C;&#x5B66;&#x4E60;&#x7387;lr&#x9ED8;&#x8BA4;&#x4E3A;0.001&#xFF0C;&#x53C2;&#x6570;beta_1&#x9ED8;&#x8BA4;&#x4E3A;0.9, &#x53C2;&#x6570;beta_2&#x9ED8;&#x8BA4;&#x4E3A;0.999&#xFF0C;&#x6A21;&#x7CCA;&#x56E0;&#x5B50;epsilon&#x9ED8;&#x8BA4;&#x4E3A;None&#xFF0C;&#x5B66;&#x4E60;&#x7387;&#x8870;&#x51CF;weight_decay&#x9ED8;&#x8BA4;&#x4E3A;0 CPU&#x4E0E;GPU&#x6A21;&#x5757;1234567891011import torch# torch.device(device) &#x8FD4;&#x56DE;&#x8BBE;&#x5907;&#x5BF9;&#x8C61;device = torch.device(&apos;cuda:0&apos;)# obj.to(device) &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;device&#x8BBE;&#x5907;&#x4E0A;&#x7684;&#x5BF9;&#x8C61;a = a.to(device)# obj.cpu() &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;CPU&#x5BF9;&#x8C61;# obj.cuda() &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;GPU&#x5BF9;&#x8C61; datasets(&#x6570;&#x636E;&#x96C6;)&#x6A21;&#x5757;12345import torchvision.datasets as dsetsimport torchvision# dsets.XXX(root, train=True, transform, download=False) &#x4ECE;root&#x4E3A;&#x6253;&#x5F00;&#x672C;&#x5730;&#x76EE;&#x5F55;&#x4E0B;&#x8F7D;XXX&#x6570;&#x636E;&#x96C6;&#xFF0C;train=True&#x9ED8;&#x8BA4;&#x4E3A;&#x8BAD;&#x7EC3;&#x96C6;&#xFF0C;train=False&#x4E3A;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;download=False&#x9ED8;&#x8BA4;&#x4E3A;&#x4E0D;&#x4ECE;&#x7F51;&#x4E0A;&#x4E0B;&#x8F7D;&#xFF0C;download=True&#x4E3A;&#x4ECE;&#x7F51;&#x7AD9;&#x4E0A;&#x4E0B;&#x8F7D;&#xFF0C;&#x6570;&#x636E;&#x9884;&#x5904;&#x7406;&#x7684;&#x90E8;&#x5206;&#x4E3A;transformtrain = dsets.MNIST(root=&apos;mnist&apos;, train=True, transform=torchvision.transforms.ToTensor(), download=False) data(&#x6570;&#x636E;)&#x6A21;&#x5757;12345import torch.utils.data as Data# Data.DataLoader(datasets, batch_size, shuffle=False) &#x8BFB;&#x53D6;&#x5DF2;&#x7ECF;&#x52A0;&#x8F7D;&#x7684;&#x6570;&#x636E;&#x96C6;datasets&#xFF0C;&#x5E76;&#x4E14;&#x5206;&#x6210;batch&#xFF0C;&#x6BCF;&#x4E2A;batch&#x7684;&#x5927;&#x5C0F;&#x4E3A;batch_size&#xFF0C;shuffle=False&#x9ED8;&#x8BA4;&#x4E0D;&#x6253;&#x4E71;&#x987A;&#x5E8F;&#xFF0C;shuffle=True&#x4E3A;&#x6253;&#x4E71;batch&#x7684;&#x987A;&#x5E8F;# Data.random.split(data, [train_size, test_size]) &#x5C06;data&#x5206;&#x6210;&#x8BAD;&#x7EC3;&#x96C6;&#x548C;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;&#x6BCF;&#x90E8;&#x5206;&#x5927;&#x5C0F;&#x4E3A;[train_size, test_size] nn(&#x795E;&#x7ECF;&#x7F51;&#x7EDC;)&#x6A21;&#x5757;1234567891011121314151617181920212223242526272829import torch.nn as nn# nn.Sequential() &#x65F6;&#x5E8F;&#x5BB9;&#x5668;&#xFF0C;&#x53EF;&#x4EE5;&#x4F20;&#x5165;&#x591A;&#x4E2A;&#x7F51;&#x7EDC;&#xFF0C;&#x548C;TensorFlow&#x4E0D;&#x540C;&#xFF0C;&#x53EA;&#x80FD;&#x4E00;&#x4E2A;&#x4E00;&#x4E2A;&#x4F20;&#x5165;&#xFF0C;&#x5E76;&#x7528;&#x9017;&#x53F7;&#x5206;&#x9694;# nn.Linear(in_features, out_features) &#x521B;&#x5EFA;&#x7EBF;&#x6027;&#x5C42;&#xFF0C;&#x8F93;&#x5165;&#x7EF4;&#x5EA6;&#x4E3A;in_features&#xFF0C;&#x8F93;&#x51FA;&#x7EF4;&#x5EA6;&#x4E3A;out_features# nn.Conv2d(in_channels, out_channels, kernel_size, stride=1, padding=0) &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x5377;&#x79EF;&#x5C42;&#xFF0C;&#x8F93;&#x5165;&#x4FE1;&#x53F7;&#x901A;&#x9053;&#x4E3A;in_channels&#xFF0C;&#x8F93;&#x51FA;&#x4FE1;&#x53F7;&#x901A;&#x9053;&#x4E3A;out_channels&#xFF0C;&#x5377;&#x79EF;&#x6838;&#x5927;&#x5C0F;&#x4E3A;kernel_size&#xFF0C;&#x6838;&#x79FB;&#x52A8;&#x7684;&#x6B65;&#x957F;&#x4E3A;stride&#xFF0C;padding&#x4E3A;&#x8865;0&#x7684;&#x5C42;&#x6570;# nn.MaxPool2d(kernel_size, stride=None, padding=0) &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x6700;&#x5927;&#x503C;&#x6C60;&#x5316;&#x5C42;(&#x5E73;&#x5747;&#x503C;&#x6C60;&#x5316;&#x4E3A;AvgPool2d)&#xFF0C;&#x6838;&#x5927;&#x5C0F;&#x4E3A;kernel_size&#xFF0C;&#x6838;&#x79FB;&#x52A8;&#x7684;&#x6B65;&#x957F;&#x9ED8;&#x8BA4;&#x4E3A;&#x6838;&#x7684;&#x5927;&#x5C0F;&#xFF0C;padding&#x4E3A;&#x8865;0&#x7684;&#x5C42;&#x6570;# nn.BatchNorm1d(num_features, eps=1e-5, momentum=0.1, affine=True) &#x521B;&#x5EFA;&#x6807;&#x51C6;&#x5316;&#x5C42;(&#x4E8C;&#x7EF4;&#x4E3A;BatchNorm2d)&#xFF0C;num_features&#x4E3A;&#x8981;&#x8BAD;&#x7EC3;&#x7684;&#x6570;&#x636E;&#x91CF;&#xFF0C;# nn.RNN(input_size, hidden_size, num_layers, nonlinearity=&apos;tanh&apos;) &#x521B;&#x5EFA;RNN&#x5C42;&#xFF0C;&#x8F93;&#x5165;&#x7279;&#x5F81;&#x6570;&#x91CF;input_size&#xFF0C;&#x9690;&#x5C42;&#x7ED3;&#x70B9;&#x6570;hidden_size&#xFF0C;RNN&#x5C42;&#x6570;num_layers&#xFF0C;&#x975E;&#x7EBF;&#x6027;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;nonlinearity&#x9ED8;&#x8BA4;&#x4E3A;tanh # nn.LSTM(input_size, hidden_size, num_layers, nonlinearity=&apos;tanh&apos;) &#x521B;&#x5EFA;&#x957F;&#x77ED;&#x671F;&#x8BB0;&#x5FC6;&#x7F51;&#x7EDC;&#x5C42;&#xFF0C;&#x8F93;&#x5165;&#x7279;&#x5F81;&#x6570;&#x91CF;input_size&#xFF0C;&#x9690;&#x5C42;&#x7ED3;&#x70B9;&#x6570;hidden_size&#xFF0C;RNN&#x5C42;&#x6570;num_layers&#xFF0C;&#x975E;&#x7EBF;&#x6027;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;nonlinearity&#x9ED8;&#x8BA4;&#x4E3A;tanh # nn.Dropout(p=0.5) &#x521B;&#x5EFA;dropout&#x5C42;(&#x4E8C;&#x7EF4;&#x4E3A;Dropout2d)&#xFF0C;&#x968F;&#x673A;&#x4E22;&#x5F03;&#x7ED3;&#x70B9;&#x7684;&#x6982;&#x7387;&#x4E3A;p&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;0.5# nn.Module &#x81EA;&#x5B9A;&#x4E49;&#x7F51;&#x7EDC;&#x5C42;&#x7684;&#x57FA;&#x7C7B;class MyLayer(nn.Module): def __init__(self, input_dim, output_dim): super(MyLayer, self).__init__() self.kernel = nn.Parameter(torch.randn(input_dim, output_dim)) self.bias = nn.Parameter(torch.randn(output_dim)) def forward(self, inputs): out = inputs @ self.kernel + self.bias return out transforms(&#x6570;&#x636E;&#x53D8;&#x6362;)&#x6A21;&#x5757;123456789import torchvision.transforms as transforms# transforms.Normalize(mean, std) &#x6807;&#x51C6;&#x5316;&#x64CD;&#x4F5C;(&#x7C7B;&#x65B9;&#x6CD5;)# transforms.RandomRotation(n) &#x5C06;&#x56FE;&#x7247;&#x65CB;&#x8F6C;-n&#x5230;n&#x5EA6;# transforms.ToTensor() &#x5C06;numpy&#x56FE;&#x7247;&#x8F6C;&#x6362;&#x4E3A;tensor# transforms.ToPILImage() &#x5C06;tensor&#x8F6C;&#x6362;&#x4E3A;numpy&#x56FE;&#x7247;&#x5F62;&#x5F0F; models(&#x6A21;&#x578B;)&#x6A21;&#x5757;1234567import torchvision.models as models# models.resnet18(pretrained=False) &#x83B7;&#x5F97;resnet18&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#xFF0C;&#x9ED8;&#x8BA4;&#x662F;&#x6CA1;&#x6709;&#x7ECF;&#x8FC7;&#x8BAD;&#x7EC3;&#x7684;&#xFF0C;pretrained=True&#x662F;&#x83B7;&#x5F97;&#x7ECF;&#x8FC7;&#x8BAD;&#x7EC3;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x4FBF;&#x4E8E;&#x5728;&#x5C11;&#x6837;&#x672C;&#x65F6;&#x8FDB;&#x884C;&#x8FC1;&#x79FB;&#x5B66;&#x4E60;# models.AlexNet(pretrained=False) &#x83B7;&#x5F97;AlexNet&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#xFF0C;&#x9ED8;&#x8BA4;&#x662F;&#x6CA1;&#x6709;&#x7ECF;&#x8FC7;&#x8BAD;&#x7EC3;&#x7684;&#xFF0C;pretrained=True&#x662F;&#x83B7;&#x5F97;&#x7ECF;&#x8FC7;&#x8BAD;&#x7EC3;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x4FBF;&#x4E8E;&#x5728;&#x5C11;&#x6837;&#x672C;&#x65F6;&#x8FDB;&#x884C;&#x8FC1;&#x79FB;&#x5B66;&#x4E60;# models.VGG16(pretrained=False) &#x83B7;&#x5F97;VGG16&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#xFF0C;&#x9ED8;&#x8BA4;&#x662F;&#x6CA1;&#x6709;&#x7ECF;&#x8FC7;&#x8BAD;&#x7EC3;&#x7684;&#xFF0C;pretrained=True&#x662F;&#x83B7;&#x5F97;&#x7ECF;&#x8FC7;&#x8BAD;&#x7EC3;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x4FBF;&#x4E8E;&#x5728;&#x5C11;&#x6837;&#x672C;&#x65F6;&#x8FDB;&#x884C;&#x8FC1;&#x79FB;&#x5B66;&#x4E60; save(&#x4FDD;&#x6301;)&#x6A21;&#x5757;12345import torch# torch.save(obj, filename) &#x5C06;obj&#x4FDD;&#x5B58;&#x5728;&#x4EE5;.pkl&#x7ED3;&#x5C3E;&#x7684;filename&#x6587;&#x4EF6;&#x4E2D;# torch.load(filename) &#x8BFB;&#x53D6;filename&#x6587;&#x4EF6;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x4FE1;&#x606F; PyTorch&#x5C0F;&#x7ED3;&#x2003;&#x2003;&#x7531;&#x4E8E;PyTorch&#x7684;&#x7B80;&#x6D01;&#x6027;&#x548C;&#x4F18;&#x96C5;&#x6027;&#xFF0C;&#x4F7F;&#x5F97;PyTorch&#x5BF9;&#x4E8E;&#x5165;&#x95E8;&#x5B66;&#x4E60;&#x7684;&#x4EBA;&#x6765;&#x8BF4;&#x975E;&#x5E38;&#x7684;&#x53CB;&#x597D;&#xFF0C;&#x73B0;&#x5728;PyTorch&#x4E5F;&#x662F;&#x6700;&#x70ED;&#x95E8;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x6846;&#x67B6;&#x4E4B;&#x4E00;&#xFF0C;&#x5177;&#x6709;&#x8F83;&#x5927;&#x7684;&#x6F5C;&#x529B;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>深度学习框架</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[TensorFlow]]></title>
    <url>%2F2019%2F09%2F06%2Fframe%20TensorFlow%2F</url>
    <content type="text"><![CDATA[TensorFlow &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;TensorFlow:&#x662F;&#x8C37;&#x6B4C;&#x516C;&#x53F8;&#x4E8E;2015&#x5E74;11&#x6708;9&#x65E5;&#x63A8;&#x51FA;&#x7684;&#x4E00;&#x4E2A;&#x5212;&#x65F6;&#x4EE3;&#x7684;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x5F00;&#x53D1;&#x5E73;&#x53F0;&#x3002;TensorFlow&#x662F;&#x4E00;&#x4E2A;&#x5E9E;&#x5927;&#x7684;&#x7CFB;&#x7EDF;&#xFF0C;&#x7ED3;&#x6784;&#x590D;&#x6742;&#xFF0C;&#x529F;&#x80FD;&#x5F3A;&#x5927;&#xFF0C;&#x5229;&#x7528;&#x6570;&#x636E;&#x6D41;&#x56FE;(Data Flow Graphs)&#x8FDB;&#x884C;&#x6570;&#x503C;&#x8BA1;&#x7B97;&#x7684;&#x5F00;&#x6E90;&#x8F6F;&#x4EF6;&#x5E93;&#xFF0C;&#x6570;&#x636E;&#x6D41;&#x56FE;&#x4E2D;&#x7684;&#x7ED3;&#x70B9;(Node)&#x4EE3;&#x8868;&#x6570;&#x5B66;&#x8FD0;&#x7B97;&#x64CD;&#x4F5C;&#xFF0C;&#x8FB9;(Edge)&#x4EE3;&#x8868;&#x8282;&#x70B9;&#x4E4B;&#x95F4;&#x6D41;&#x901A;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x5373;&#x5F20;&#x91CF;(Tensor)&#x3002; TensorFlow&#x7279;&#x70B9;&#x2003;&#x2003;TensorFlow&#x5177;&#x6709;&#x9AD8;&#x5EA6;&#x7684;&#x7075;&#x6D3B;&#x6027;&#xFF1A;&#x53EA;&#x8981;&#x80FD;&#x591F;&#x5C06;&#x8BA1;&#x7B97;&#x8868;&#x793A;&#x4E3A;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x6D41;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;TensorFlow&#x8FDB;&#x884C;&#x8FD0;&#x7B97;&#x3002;&#x2003;&#x2003;TensorFlow&#x5177;&#x6709;&#x5F3A;&#x7684;&#x53EF;&#x79FB;&#x690D;&#x6027;&#xFF1A;TensorFlow&#x652F;&#x6301;CPU&#x548C;GPU&#x8FD0;&#x7B97;&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;&#x8FD0;&#x884C;&#x5728;&#x4E2A;&#x4EBA;&#x7535;&#x8111;&#xFF0C;&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x79FB;&#x52A8;&#x8BBE;&#x5907;&#x7B49;&#x3002;&#x2003;&#x2003;TensorFlow&#x8FD0;&#x7B97;&#x7B80;&#x5355;&#xFF1A;&#x5185;&#x90E8;&#x5B9E;&#x73B0;&#x4E86;&#x81EA;&#x52A8;&#x6C42;&#x5BFC;&#x65B9;&#x5F0F;&#xFF0C;&#x50CF;&#x642D;&#x79EF;&#x6728;&#x4E00;&#x6837;&#xFF0C;&#x53EA;&#x8981;&#x5EFA;&#x597D;&#x8FD0;&#x7B97;&#x56FE;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x5173;&#x5FC3;&#x6C42;&#x5BFC;&#x7684;&#x590D;&#x6742;&#x7A0B;&#x5EA6;&#x3002;&#x2003;&#x2003;TensorFlow&#x5177;&#x6709;&#x529F;&#x80FD;&#x5F3A;&#x5927;&#x7684;&#x53EF;&#x89C6;&#x5316;&#x7EC4;&#x5EFA;TensorBoard&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x8BAD;&#x7EC3;&#x65F6;&#x76D1;&#x63A7;&#x8BAD;&#x7EC3;&#x8FC7;&#x7A0B;&#x3002; TensorFlow&#x5E94;&#x7528;TensorFlow&#x521B;&#x5EFA;tensorconstant&#x65B9;&#x6CD5;1234import tensorflow as tf# tf.constant(value, dtype=None, shape=None) &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x5F62;&#x72B6;&#x4E3A;shape&#xFF0C;&#x7C7B;&#x578B;&#x4E3A;dtype&#xFF0C;&#x503C;&#x4E3A;value&#x7684;&#x5F20;&#x91CF;a = tf.constant([[1, 2, 3], [4, 5, 6]]) CPU&#xFF0C;GPU&#x65B9;&#x6CD5;123456789101112import tensorflow as tfa = tf.constant([[1, 2, 3], [4, 5, 6]])# obj.device() &#x67E5;&#x770B;tensor&#x7684;&#x73AF;&#x5883;&#x662F;CPU&#x8FD8;&#x662F;GPUa.device# obj.gpu() &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x65B0;tensor&#x4F4D;&#x4E8E;GPU b = a.gpu()# obj.cpu() &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x65B0;tensor&#x4F4D;&#x4E8E;CPUc = b.cpu() numpy&#xFF0C;shape&#xFF0C;ndim&#xFF0C;dtype&#x65B9;&#x6CD5;123456789101112131415import tensorflow as tfa = tf.constant([[1, 2, 3], [4, 5, 6]])# obj.numpy() &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x65B0;&#x7684;ndarray&#xFF0C;&#x5373;&#x5C06;tensor&#x53D8;&#x6210;numpy&#x6570;&#x7EC4;b = a.numpy# obj.shape &#x67E5;&#x770B;tensor&#x7684;&#x7EF4;&#x5EA6;&#x4FE1;&#x606F;a.shape# obj.ndim &#x67E5;&#x770B;tensor&#x7684;&#x7EF4;&#x5EA6;&#x6570;a.ndim# obj.dtype &#x67E5;&#x770B;tensor&#x7684;&#x7C7B;&#x578B;a.dtype convert_to_tensor&#xFF0C;cast&#x65B9;&#x6CD5;12345678910import tensorflow as tfimport numpy as npa = np.array([[1, 2, 3], [4, 5, 6]])# tf.convert_to_tensor(value, dtype=None) &#x5C06;value&#x8F6C;&#x6362;&#x4E3A;tensor&#x5F62;&#x5F0F;&#xFF0C;&#x5E38;&#x7528;&#x6765;&#x5C06;numpy&#x683C;&#x5F0F;&#x8F6C;&#x6362;&#x4E3A;tensor&#x683C;&#x5F0F;b = tf.convert_to_tensor(a)# tf.cast(value, dtype) &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x503C;&#x4E3A;value&#xFF0C;&#x7C7B;&#x578B;&#x4E3A;dtype&#x7684;tensor&#xFF0C;&#x5E38;&#x7528;&#x6765;&#x4FEE;&#x6539;tensor&#x7684;&#x7C7B;&#x578B;c = tf.cast(b, dtype=tf.float32) zeros&#xFF0C;ones&#xFF0C;fill&#xFF0C;random&#x65B9;&#x6CD5;12345678910111213141516171819import tensorflow as tf# tf.zeros(shape) &#x4EA7;&#x751F;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x503C;&#x5168;&#x4E3A;0&#x7684;tensora = tf.zeros((3, 3))# tf.ones(shape) &#x4EA7;&#x751F;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x503C;&#x5168;&#x4E3A;1&#x7684;tensorb = tf.ones((3, 3))# tf.fill(shape, value) &#x4EA7;&#x751F;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x503C;&#x5168;&#x4E3A;value&#x7684;tensorc = tf.fill((3, 3), -1) # tf.random.normal(shape, mean=0, stddev=1) &#x4EA7;&#x751F;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x9AD8;&#x65AF;&#x5206;&#x5E03;&#xFF0C;&#x5747;&#x503C;&#x9ED8;&#x8BA4;&#x4E3A;0&#xFF0C;&#x6807;&#x51C6;&#x5DEE;&#x9ED8;&#x8BA4;&#x4E3A;1d = tf.random.normal((3, 3)) # tf.random.uniform(shape, mean=0, stddev=1) &#x4EA7;&#x751F;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x5747;&#x5300;&#x5206;&#x5E03;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;(0-1)&#x5747;&#x5300;&#x5206;&#x5E03;e = tf.random.uniform((3, 3)) # tf.random.shuffle(value, seed) &#x5C06;value&#x6309;&#x7167;&#x79CD;&#x5B50;seed&#x6253;&#x6563;f = tf.random.shuffle(d) zeros_like&#xFF0C;ones_like&#xFF0C;one_hot&#xFF0C;range&#x65B9;&#x6CD5;123456789101112131415import tensorflow as tfa = tf.random.normal((3, 3))# tf.zeros_like(input, dtype) &#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x5927;&#x5C0F;&#x548C;input&#x76F8;&#x540C;&#x503C;&#x4E3A;&#x5168;0&#x7684;tensorb = tf.zeros_like(a)# tf.ones_like(input, dtype) &#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x5927;&#x5C0F;&#x548C;input&#x76F8;&#x540C;&#x503C;&#x4E3A;&#x5168;1&#x7684;tensorc = tf.ones_like(a)# tf.range(start, end, interval, dtype) &#x4EA7;&#x751F;&#x4ECE;start&#x5230;end&#xFF0C;&#x6B65;&#x957F;&#x4E3A;interval&#x7684;&#x8FDE;&#x7EED;&#x5F20;&#x91CF;&#xFF0C;&#x7528;&#x6CD5;&#x540C;numpy&#x4E2D;&#x7684;aranged = tf.range(10)# tf.one_hot(indices, depth) &#x5C06;indices&#x8F6C;&#x6362;&#x4E3A;&#x72EC;&#x70ED;&#x7F16;&#x7801;&#xFF0C;&#x6DF1;&#x5EA6;&#x4E3A;depthe = tf.one_hot(d, depth=10) TensorFlow&#x5207;&#x7247;&#x4E0E;&#x7D22;&#x5F15;[]&#x7D22;&#x5F15;1234567891011121314151617import tensorflow as tfimport numpy as npa = np.arange(27).reshape((3, 3, 3))b = tf.convert_to_tensor(a)# obj[index0][index1]...&#x7B49;&#x4EF7;&#x4E8E;obj[index0, index1, ...] &#x7D22;&#x5F15;b[1][1][1]b[1, 1, 1]# obj[start, end, step] &#x5207;&#x7247;&#x7D22;&#x5F15;b[0:2, 0:2, 0:2]# obj[...] ...&#x53EF;&#x4EE5;&#x4EE3;&#x66FF;&#x8FDE;&#x7EED;&#x7684;:b[..., 0]b[0, ...]b[0, ..., 0] gather&#xFF0C;gather_nd&#xFF0C;boolean_mask&#x65B9;&#x6CD5;12345678910111213141516import tensorflow as tfimport numpy as npa = np.arange(27).reshape((3, 3, 3))b = tf.convert_to_tensor(a)# tf.gather(obj, axis, indices) &#x5728;&#x7EF4;&#x5EA6;axis&#x4E0A;&#x7D22;&#x5F15;indices&#xFF0C;&#x5E76;&#x4E14;&#x8FDE;&#x63A5;&#x6210;&#x4E00;&#x4E2A;&#x65B0;&#x7684;tensorc = tf.gather(b, axis=0, indices=[1, 0]) # &#x5728;&#x7B2C;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;&#x4E0A;&#x9009;&#x62E9;&#x524D;&#x4E24;&#x4E2A;&#xFF0C;&#x5E76;&#x4E14;&#x5C06;&#x987A;&#x5E8F;&#x8C03;&#x6362;d = tf.gather(b, axis=1, indices=[1, 0]) # &#x5728;&#x7B2C;&#x4E8C;&#x4E2A;&#x7EF4;&#x5EA6;&#x4E0A;&#x9009;&#x62E9;&#x524D;&#x4E24;&#x4E2A;&#xFF0C;&#x5E76;&#x4E14;&#x5C06;&#x987A;&#x5E8F;&#x8C03;&#x6362;# tf.gather_nd(obj, indices) &#x5728;&#x591A;&#x7EF4;&#x5EA6;&#x4E0A;&#x7D22;&#x5F15;indices&#xFF0C;&#x5E76;&#x4E14;&#x8FDE;&#x63A5;&#x6210;&#x4E00;&#x4E2A;&#x65B0;&#x7684;tensore = tf.gather_nd(b, indices=[[0, 0], [1, 1]]) # &#x7D22;&#x5F15;&#x7B2C;1&#x4E2A;&#x7EF4;&#x5EA6;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x548C;&#x7B2C;2&#x4E2A;&#x7EF4;&#x5EA6;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x6570;&#x636E;f = tf.gather_nd(b, indices=[[0, 0, 0], [0, 0, 1], [0, 0, 2]]) # &#x7D22;&#x5F15;&#x7B2C;1&#x4E2A;&#x7EF4;&#x5EA6;&#x7684;&#x7B2C;1&#x884C;&#x7684;&#x7B2C;1&#x5217;&#xFF0C;&#x7B2C;1&#x4E2A;&#x7EF4;&#x5EA6;&#x7684;&#x7B2C;1&#x884C;&#x7684;&#x7B2C;2&#x5217;&#xFF0C;&#x7B2C;1&#x4E2A;&#x7EF4;&#x5EA6;&#x7684;&#x7B2C;1&#x884C;&#x7684;&#x7B2C;3&#x5217;# tf.boolean_mask(obj, mask, axis) &#x5728;axis&#x8F74;&#x4E0A;&#x63A9;&#x6A21;&#x7D22;&#x5F15;g = tf.boolean_mask(b, [[True,True,False],[True,False,False],[False,False,False]], axis=0) # &#x5728;&#x7B2C;&#x4E00;&#x7EF4;&#x5EA6;&#x4E0A;&#x9009;&#x62E9;&#x524D;&#x4E24;&#x884C;&#xFF0C;&#x5728;&#x7B2C;&#x4E8C;&#x7EF4;&#x5EA6;&#x4E0A;&#x9009;&#x62E9;&#x7B2C;&#x4E00;&#x884C;&#xFF0C;&#x4E00;&#x5171;&#x4E09;&#x884C; TensorFlow&#x7EF4;&#x5EA6;&#x53D8;&#x5316;reshape&#xFF0C;transpose&#xFF0C;expand_dims&#xFF0C;squeeze&#x65B9;&#x6CD5;1234567891011121314151617import tensorflow as tfimport numpy as npa = np.arange(4).reshape((2, 1, 2))b = tf.constant(a)# tf.reshape(tensor, shape) &#x8FD4;&#x56DE;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;tensorc = tf.reshape(a, (2, 2))# tf.transpose(tensor, perm=None) &#x5C06;&#x8F74;&#x8FDB;&#x884C;&#x8C03;&#x6362;&#xFF0C;&#x9ED8;&#x8BA4;&#x7FFB;&#x8F6C;&#x8F74;d = tf.transpose(b, (1, 2, 0))# tf.expand_dims(tensor, axis) &#x5728;axis&#x4E0A;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;e = tf.expand_dims(b, axis=3)# tf.squeeze(tensor, axis=None) &#x5C06;axis&#x4E0A;&#x4E3A;1&#x7684;&#x7EF4;&#x5EA6;&#x5220;&#x53BB;&#xFF0C;&#x9ED8;&#x8BA4;&#x5220;&#x9664;&#x6240;&#x6709;&#x4E3A;1&#x7684;&#x7EF4;&#x5EA6;f = tf.squeeze(e) broadcast_to&#xFF0C;tile&#x65B9;&#x6CD5;12345678910import tensorflow as tfa = tf.range(3)b = tf.reshape(a, (1, 3))# tf.broadcast_to(input, shape) &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x5E7F;&#x64AD;&#x540E;&#x7684;tensorc = tf.broadcast_to(a, (3, 3))# tf.tile(input, multiples) &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x7ECF;&#x8FC7;&#x590D;&#x5236;&#x7684;tensord = tf.tile(b, [2, 2]) TensorFlow&#x5408;&#x5E76;&#x4E0E;&#x5206;&#x5272;concat&#xFF0C;stack&#xFF0C;unstack&#xFF0C;split&#x65B9;&#x6CD5;12345678910111213141516171819import tensorflow as tfimport numpy as npa = np.arange(6).reshape((2, 3))b = np.arange(3, 9).reshape((2, 3))c = tf.constant(a)d = tf.constant(b)# tf.concat(values, axis) &#x5C06;&#x591A;&#x4E2A;values&#x6309;&#x7167;axis&#x8F74;&#x8FDB;&#x884C;&#x5408;&#x5E76;e = tf.concat([c, d], axis=1)# tf.stack(values, axis) &#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x65B0;&#x7EF4;&#x5EA6;&#xFF0C;&#x5E76;&#x5408;&#x5E76;&#x5230;&#x8BE5;&#x7EF4;&#x5EA6;f = tf.stack([c, d], axis=1)# tf.unstack(value, axis) &#x5BF9;value&#x6309;&#x7167;axis&#x8F74;&#x8FDB;&#x884C;&#x62C6;&#x5206;g = tf.unstack(f, axis=1)# tf.split(value, num_or_size_splits, axis) &#x5BF9;value&#x6309;&#x7167;axis&#x8F74;&#x8FDB;&#x884C;&#x62C6;&#x5206;&#xFF0C;&#x5982;&#x679C;&#x5E0C;&#x671B;&#x5747;&#x5300;&#x62C6;&#x5206;&#x5219;num_or_size_splits&#x4E3A;&#x5E38;&#x6570;&#xFF0C;&#x5426;&#x5219;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x5217;&#x8868;&#xFF0C;&#x4EE3;&#x8868;&#x6BCF;&#x4E00;&#x90E8;&#x5206;&#x7684;&#x6570;&#x91CF;h = tf.split(e, 3, axis=1) tensorflow&#x6570;&#x636E;&#x7EDF;&#x8BA1;reduce_min&#xFF0C;reduce_max&#xFF0C;reduce_mean&#x65B9;&#x6CD5;123456789101112import tensorflow as tfa = tf.reshape(tf.random.shuffle(tf.range(1, 13)), (3, 4))# tf.reduce_min(input_tensor, axis=None) &#x6C42;input_tensor&#x5728;axis&#x4E0A;&#x7684;&#x6700;&#x5C0F;&#x503C;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x5168;&#x5C40;&#x6700;&#x5C0F;&#x503C;b = tf.reduce_min(a)# tf.reduce_max(input_tensor, axis=None) &#x6C42;input_tensor&#x5728;axis&#x4E0A;&#x7684;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x5168;&#x5C40;&#x6700;&#x5927;&#x503C;c = tf.reduce_max(a, axis=0)# tf.reduce_mean(input_tensor, axis=None) &#x6C42;input_tensor&#x5728;axis&#x4E0A;&#x7684;&#x5E73;&#x5747;&#x503C;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x5168;&#x5C40;&#x5E73;&#x5747;&#x503C;d = tf.reduce_mean(a, axis=1) argmax&#xFF0C;argmin&#x65B9;&#x6CD5;123456789import tensorflow as tfa = tf.reshape(tf.random.shuffle(tf.range(1, 13)), (3, 4))# tf.argmax(input, axis=0) &#x6C42;input&#x5728;axis&#x8F74;&#x7684;&#x6700;&#x5927;&#x503C;&#x7D22;&#x5F15;&#xFF0C;&#x9ED8;&#x8BA4;&#x5728;&#x7B2C;&#x4E00;&#x4E2A;&#x8F74;b = tf.argmax(a, axis=0)# tf.argmin(input, axis=0) &#x6C42;input&#x5728;axis&#x8F74;&#x7684;&#x6700;&#x5C0F;&#x503C;&#x7D22;&#x5F15;&#xFF0C;&#x9ED8;&#x8BA4;&#x5728;&#x7B2C;&#x4E00;&#x4E2A;&#x8F74;c = tf.argmin(a, axis=1) equal&#xFF0C;unique&#x65B9;&#x6CD5;1234567891011import tensorflow as tfa = tf.constant([[1, 1], [0, 0]])b = tf.constant([[1, 0], [1, 0]])c = tf.constant([1,2,3,2,1])# tf.equal(x, y) &#x6BD4;&#x8F83;x&#x548C;y&#x662F;&#x5426;&#x76F8;&#x7B49;&#xFF0C;&#x5728;&#x5982;&#x679C;&#x76F8;&#x7B49;&#x5219;&#x5BF9;&#x5E94;&#x4F4D;&#x7F6E;&#x4E3A;True&#xFF0C;&#x5426;&#x5219;&#x4E3A;Falsed = tf.equal(a, b)# tf.unique(x) &#x627E;&#x51FA;x&#x4E2D;&#x6709;&#x591A;&#x5C11;&#x4E0D;&#x540C;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x5176;&#x7D22;&#x5F15;e = tf.unique(c) norm&#xFF0C;top_k&#x65B9;&#x6CD5;123456789import tensorflow as tfa = tf.reshape(tf.random.shuffle(tf.range(1, 13, dtype=tf.float32)), (3, 4))# tf.norm(tensor, str, axis=-1) &#x6C42;tensor&#x7684;p&#x8303;&#x6570;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x5168;&#x5C40;p&#x8303;&#x6570;b = tf.norm(a, 2, axis=0)# tf.math.top_k(input, k, bool=True) &#x5728;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;&#x6C42;input&#x4E2D;&#x524D;k&#x4E2A;&#x6700;&#x5927;&#x503C;&#x6216;&#x6700;&#x5C0F;&#x503C;&#x53CA;&#x5176;&#x7D22;&#x5F15;&#xFF0C;bool=True&#x4E3A;&#x6700;&#x5927;&#x503C;&#xFF0C;bool=False&#x4E3A;&#x6700;&#x5C0F;&#x503C;&#x3002;c = tf.math.top_k(a, 2, True) tensorflow&#x6392;&#x5E8F;sort&#xFF0C;argsort&#x65B9;&#x6CD5;123456789import tensorflow as tfa = tf.reshape(tf.random.shuffle(tf.range(1, 13)), (3, 4))# tf.sort(values, direction=&apos;ASCENDING&apos;, axis=-1) &#x6309;axis&#x8F74;&#x5BF9;values&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x8FD4;&#x56DE;&#x6392;&#x5E8F;&#x540E;&#x7684;&#x7ED3;&#x679C;&#xFF0C;direction=&apos;ASCENDING&apos;&#x4EE3;&#x8868;&#x9012;&#x589E;&#x6392;&#x5E8F;&#xFF0C;&apos;DESCENDING&apos;&#x4EE3;&#x8868;&#x9012;&#x51CF;&#x6392;&#x5E8F;b = tf.sort(a, axis=0)# tf.argsort(values, direction=&apos;ASCENDING&apos;, axis=-1) &#x6309;axis&#x8F74;&#x5BF9;values&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x8FD4;&#x56DE;&#x6392;&#x5E8F;&#x540E;&#x7684;&#x7D22;&#x5F15;&#xFF0C;direction=&apos;ASCENDING&apos;&#x4EE3;&#x8868;&#x9012;&#x589E;&#x6392;&#x5E8F;&#xFF0C;&apos;DESCENDING&apos;&#x4EE3;&#x8868;&#x9012;&#x51CF;&#x6392;&#x5E8F;c = tf.argsort(a, axis=1) tensorflow&#x5F20;&#x91CF;&#x9650;&#x5E45;maximun&#xFF0C;minimum&#x65B9;&#x6CD5;12345678910import tensorflow as tfa = tf.reshape(tf.random.shuffle(tf.range(1, 13)), (3, 4))b = tf.reshape(tf.random.shuffle(tf.range(1, 13)), (3, 4))# tf.maximun(x, y) &#x53D6;x&#xFF0C;y&#x4E2D;&#x7684;&#x5927;&#x6570;&#x5E76;&#x8FD4;&#x56DE;c = tf.maximum(a, b)# tf.minimun(x, y) &#x53D6;x&#xFF0C;y&#x4E2D;&#x7684;&#x5C0F;&#x6570;&#x5E76;&#x8FD4;&#x56DE;d = tf.minimum(a, b) clip_by_value&#x65B9;&#x6CD5;123456import tensorflow as tfa = tf.reshape(tf.random.shuffle(tf.range(1, 13)), (3, 4))# tf.clip_by_value(t, clip_value_min, clip_value_max) &#x5C06;t&#x4E2D;&#x5C0F;&#x4E8E;clip_value_min&#x7684;&#x503C;&#x8D4B;&#x503C;&#x4E3A;clip_value_min&#xFF0C;&#x5927;&#x4E8E;clip_value_max&#x7684;&#x503C;&#x8D4B;&#x503C;&#x4E3A;clip_value_maxb = tf.clip_by_value(a, 3, 7) tensorflow&#x6570;&#x5B66;&#x8FD0;&#x7B97;&#x5E38;&#x89C4;&#x8FD0;&#x7B97;&#x65B9;&#x6CD5;1234567891011121314151617import tensorflow as tfa = tf.reshape(tf.random.shuffle(tf.range(1, 5, dtype=tf.float32)), (2, 2))b = tf.reshape(tf.random.shuffle(tf.range(1, 5, dtype=tf.float32)), (2, 2))# tensor1 op tensor2 &#x5C06;tensor1&#x4E0E;tensor2&#x8FDB;&#x884C;&#x5E38;&#x89C4;&#x7684;&#x6570;&#x5B66;&#x8FD0;&#x7B97;&#xFF0C;&#x5982;&#x679C;&#x7EF4;&#x5EA6;&#x5927;&#x5C0F;&#x4E0D;&#x540C;&#xFF0C;&#x5219;&#x8FDB;&#x884C;&#x5E7F;&#x64AD;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x80FD;&#x5E7F;&#x64AD;&#x5219;&#x62A5;&#x9519;c = a + bd = a ** b# tf.sqrt(x) &#x5C06;x&#x8FDB;&#x884C;&#x5F00;&#x65B9;&#x8FD0;&#x7B97;e = tf.sqrt(a)# tf.exp(x) &#x6C42;e&#x7684;x&#x6B21;&#x5E42;f = tf.exp(a)# tf.math.log(x) &#x6C42;x&#x4EE5;e&#x4E3A;&#x5E95;&#x7684;&#x5BF9;&#x6570;g = tf.math.log(a) matmul&#x65B9;&#x6CD5;12345678import tensorflow as tfa = tf.reshape(tf.random.shuffle(tf.range(1, 5, dtype=tf.float32)), (2, 2))b = tf.reshape(tf.random.shuffle(tf.range(1, 5, dtype=tf.float32)), (2, 2))# tf.matmul(a, b) a&#x548C;b&#x7684;&#x77E9;&#x9635;&#x4E58;&#x6CD5;&#xFF0C;&#x7B49;&#x4EF7;&#x4E8E;a @ bc = tf.matmul(a, b)d = a @ b where&#x65B9;&#x6CD5;1234567891011import tensorflow as tfa = tf.constant([[False, True], [True, False]])b = tf.constant([[1, 2], [3, 4]])c = tf.constant([[-1, -2], [-3, -4]])# tf.where(obj) &#x8FD4;&#x56DE;obj&#x4E2D;True&#x7684;&#x4F4D;&#x7F6E;&#x7684;&#x7D22;&#x5F15;d = tf.where(a)# tf.where(tensor1, tensor2, tensor3) &#x5982;&#x679C;tensor1&#x5BF9;&#x5E94;&#x4F4D;&#x7F6E;&#x4E3A;True&#x5219;&#x4ECE;tensor2&#x4E2D;&#x53D6;&#x5F97;&#x76F8;&#x5E94;&#x5143;&#x7D20;&#xFF0C;&#x5426;&#x5219;&#x4ECE;tensor3&#x4E2D;&#x53D6;&#x5F97;&#x76F8;&#x5E94;&#x5143;&#x7D20;e = tf.where(a, b, c) tensorflow&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;datasets(&#x6570;&#x636E;&#x96C6;)&#x6A21;&#x5757;123456789101112131415import tensorflow as tffrom tensorflow.keras import datasets# datasets.XXX.load_data() # &#x4E0B;&#x8F7D;XXX&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x5E38;&#x7528;&#x7684;&#x6709;mnist&#xFF0C;cifar10&#xFF0C;cifar100&#x7B49;&#x7B49;&#xFF0C;&#x6B64;&#x65F6;&#x6570;&#x636E;&#x4E3A;numpy&#x683C;&#x5F0F;&#xFF0C;&#x5E76;&#x4E0D;&#x662F;tensor(x_train, y_train), (x_test, y_test) = datasets.mnist.load_data() # &#x4E0B;&#x8F7D;mnist&#x624B;&#x5199;&#x6570;&#x5B57;&#x6570;&#x636E;&#x96C6;x_train.shapey_train.shapex_test.shapey_test.shapey_train[:6]y_train_onehot = tf.one_hot(y_train[:6], depth=10)y_train_onehot data(&#x6570;&#x636E;&#x64CD;&#x4F5C;)&#x6A21;&#x5757;1234567891011121314import tensorflow as tf# tf.data.Dataset.from_tensor_slices(tensor) &#x5C06;tensor&#x6570;&#x636E;&#x8F6C;&#x6362;&#x6210;&#x4E00;&#x4E2A;&#x53EF;&#x8FED;&#x4EE3;&#x7684;&#x5BF9;&#x8C61;db = tf.data.Dataset.from_tensor_slices(x_train)# next(iter(db)) &#x8FD4;&#x56DE;&#x4E0B;&#x4E00;&#x4E2A;&#x8FED;&#x4EE3;&#x5668;&#x7684;&#x5185;&#x5BB9;# db.shuffle(n) &#x5C06;0-n&#x7684;&#x8FED;&#x4EE3;&#x5668;&#x5185;&#x5BB9;&#x6253;&#x6563;&#xFF0C;&#x4F7F;&#x5176;&#x8BAD;&#x7EC3;&#x66F4;&#x52A0;&#x5408;&#x7406;# db.map(function) &#x5C06;&#x8FED;&#x4EE3;&#x5668;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x5168;&#x90E8;&#x7ECF;&#x8FC7;function&#x5904;&#x7406;&#xFF0C;&#x5E38;&#x7528;&#x4E8E;&#x56FE;&#x7247;&#x7684;&#x9884;&#x5904;&#x7406;&#x7B49;&#x529F;&#x80FD;#db.batch(n) &#x5C06;&#x8FED;&#x4EE3;&#x5668;&#x4E2D;&#x7684;&#x5185;&#x5BB9;&#x5206;&#x6210;&#x5F88;&#x591A;&#x4E2A;batch&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;batch&#x4E2D;&#x6709;n&#x4E2A;&#x6570;&#x636E;# db.repeat(n) &#x5C06;db&#x5BF9;&#x8C61;&#x8FED;&#x4EE3;n&#x6B21;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x65E0;&#x9650;&#x8FED;&#x4EE3; nn(&#x795E;&#x7ECF;&#x7F51;&#x7EDC;)&#x6A21;&#x5757;123456789import tensorflow as tf# tf.nn.relu(features) ReLu&#x6FC0;&#x6D3B;&#x51FD;&#x6570;# tf.nn.sigmoid(features) Sigmoid&#x6FC0;&#x6D3B;&#x51FD;&#x6570;# tf.nn.tanh(features) tanh&#x6FC0;&#x6D3B;&#x51FD;&#x6570;# tf.nn.softmax(logits) softmax&#x5C42; optimizers(&#x4F18;&#x5316;&#x5668;)&#x6A21;&#x5757;1234567from tensorflow.keras import optimizers# optimizers.SGD(lr=0.01, momentum=0.0, decay=0.0, nesterov=False) &#x968F;&#x673A;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x4F18;&#x5316;&#x5668;&#xFF0C;&#x5B66;&#x4E60;&#x7387;lr&#x9ED8;&#x8BA4;&#x4E3A;0.01&#xFF0C;&#x52A8;&#x91CF;momentum&#x9ED8;&#x8BA4;&#x4E3A;0&#xFF0C;&#x5B66;&#x4E60;&#x7387;&#x8870;&#x51CF;decay&#x9ED8;&#x8BA4;&#x4E3A;0&#xFF0C;&#x9ED8;&#x8BA4;&#x4E0D;&#x4F7F;&#x7528;nesterov&#x52A8;&#x91CF;# optimizers.RMSprop(lr=0.001, rho=0.9, epsilon=None, decay=0.0) RMSprop&#x4F18;&#x5316;&#x5668;&#xFF0C;&#x5B66;&#x4E60;&#x7387;lr&#x9ED8;&#x8BA4;&#x4E3A;0.001&#xFF0C;&#x53C2;&#x6570;rho&#x9ED8;&#x8BA4;&#x4E3A;0.9&#xFF0C;&#x6A21;&#x7CCA;&#x56E0;&#x5B50;epsilon&#x9ED8;&#x8BA4;&#x4E3A;None&#xFF0C;&#x5B66;&#x4E60;&#x7387;&#x8870;&#x51CF;decay&#x9ED8;&#x8BA4;&#x4E3A;0.0# optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0) Adam&#x4F18;&#x5316;&#x5668;&#xFF0C;&#x5B66;&#x4E60;&#x7387;lr&#x9ED8;&#x8BA4;&#x4E3A;0.001&#xFF0C;&#x53C2;&#x6570;beta_1&#x9ED8;&#x8BA4;&#x4E3A;0.9, &#x53C2;&#x6570;beta_2&#x9ED8;&#x8BA4;&#x4E3A;0.999&#xFF0C;&#x6A21;&#x7CCA;&#x56E0;&#x5B50;epsilon&#x9ED8;&#x8BA4;&#x4E3A;None&#xFF0C;&#x5B66;&#x4E60;&#x7387;&#x8870;&#x51CF;decay&#x9ED8;&#x8BA4;&#x4E3A;0 layers(&#x7F51;&#x7EDC;&#x5C42;)&#x6A21;&#x5757;12345678910111213141516171819202122232425262728import tensorflow as tffrom tensorflow.keras import layers# layers.Dense(out_dim) &#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x5168;&#x8FDE;&#x63A5;&#x5C42;&#xFF0C;&#x7ED3;&#x70B9;&#x6570;&#x4E3A;out_dim&#x4E2A;# layers.Layer &#x81EA;&#x5B9A;&#x4E49;&#x7F51;&#x7EDC;&#x5C42;&#x7684;&#x57FA;&#x7C7B;class MyDense(layers.Layer): def __init__(self, input_dim, output_dim): super(MyDense, self).__init__() self.kernel = self.add_variable(&apos;w&apos;, [input_dim, output_dim]) self.bias = self.add_variable(&apos;b&apos;, [output_dim]) def call(self, inputs, training=None): out = inputs @ self.kernel + self.bias return out# layers.Dropout(rate) &#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;Dropout&#x5C42;&#xFF0C;&#x5931;&#x6D3B;&#x7684;&#x6BD4;&#x7387;&#x4E3A;rate&#xFF0C;&#x4FDD;&#x6301;&#x8FDE;&#x63A5;&#x7684;&#x6BD4;&#x7387;&#x4E3A;1-rate&#xFF0C;&#x548C;PyTorch&#x76F8;&#x540C;# layers.Flatten() &#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;Flatten&#x5C42;&#xFF0C;&#x5C06;&#x6570;&#x636E;&#x5C55;&#x5E73;&#x6210;&#x4E00;&#x7EF4;# layers.Conv2D(filters, kernel_size, strides=(1, 1), padding=&apos;valid&apos;) &#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x5377;&#x79EF;&#x5C42;&#xFF0C;&#x5377;&#x79EF;&#x6838;&#x7684;&#x4E2A;&#x6570;&#x4E3A;filters&#xFF0C;&#x6838;&#x7684;&#x5927;&#x5C0F;&#x4E3A;kernel_size&#xFF0C;strides&#x4E3A;&#x6A21;&#x677F;&#x79FB;&#x52A8;&#x7684;&#x6B65;&#x957F;&#xFF0C;padding&#x4E3A;&#x662F;&#x5426;&#x5728;&#x5468;&#x56F4;&#x8865;0&#xFF0C;valid&#x4E3A;&#x4E0D;&#x8865;0&#xFF0C;same&#x4E3A;&#x8865;0&#x4FDD;&#x8BC1;&#x5927;&#x5C0F;&#x4E0D;&#x53D8;# layers.MaxPool2D(pool_size=(2, 2), strides=None, padding=&apos;valid&apos;) &#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x6700;&#x5927;&#x503C;&#x6C60;&#x5316;&#x5C42;(&#x5E73;&#x5747;&#x503C;&#x6C60;&#x5316;&#x4E3A;AveragePooling2D)&#xFF0C;&#x6C60;&#x5316;&#x5C42;&#x6A21;&#x677F;&#x4E3A;pool_size&#xFF0C;strides&#x4E3A;&#x6A21;&#x677F;&#x79FB;&#x52A8;&#x7684;&#x6B65;&#x957F;&#xFF0C;padding&#x4E3A;&#x662F;&#x5426;&#x5728;&#x5468;&#x56F4;&#x8865;0&#xFF0C;valid&#x4E3A;&#x4E0D;&#x8865;0&#xFF0C;same&#x4E3A;&#x8865;0&#x4FDD;&#x8BC1;&#x5927;&#x5C0F;&#x4E0D;&#x53D8;# layers.SimpleRNNCell(units, activation=&apos;tanh&apos;, dropout=0.0, return_sequences=False, unroll=False) &#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x5FAA;&#x73AF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x5C42;&#xFF0C;&#x5355;&#x5143;&#x6570;&#x4E3A;units&#xFF0C;dropout&#x4E22;&#x5F03;&#x767E;&#x5206;&#x767E;&#x4E3A;0.0&#xFF0C;return_sequences=False&#x8FD4;&#x56DE;&#x5E8F;&#x5217;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x8F93;&#x51FA;&#xFF0C;return_sequences=True&#x8FD4;&#x56DE;&#x5168;&#x90E8;&#x5E8F;&#x5217;&#xFF0C;unroll=True&#xFF0C;&#x5219;&#x7F51;&#x7EDC;&#x5C06;&#x5C55;&#x5F00;&#xFF0C;&#x5426;&#x5219;&#x5C06;&#x4F7F;&#x7528;&#x7B26;&#x53F7;&#x5FAA;&#x73AF;&#x3002;# layers.LSTM(units, activation=&apos;tanh&apos;, dropout=0.0, return_sequences=False, unroll=False) &#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x957F;&#x77ED;&#x671F;&#x8BB0;&#x5FC6;&#x7F51;&#x7EDC;&#xFF0C;&#x5355;&#x5143;&#x6570;&#x4E3A;units&#xFF0C;dropout&#x4E22;&#x5F03;&#x767E;&#x5206;&#x767E;&#x4E3A;0.0&#xFF0C;return_sequences=False&#x8FD4;&#x56DE;&#x5E8F;&#x5217;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x8F93;&#x51FA;&#xFF0C;return_sequences=True&#x8FD4;&#x56DE;&#x5168;&#x90E8;&#x5E8F;&#x5217;&#xFF0C;unroll=True&#xFF0C;&#x5219;&#x7F51;&#x7EDC;&#x5C06;&#x5C55;&#x5F00;&#xFF0C;&#x5426;&#x5219;&#x5C06;&#x4F7F;&#x7528;&#x7B26;&#x53F7;&#x5FAA;&#x73AF;&#x3002; losses(&#x8BEF;&#x5DEE;&#x8BA1;&#x7B97;)&#x6A21;&#x5757;1234567import tensorflow as tf# tf.losses.MSE(y, logits) &#x8BA1;&#x7B97;&#x771F;&#x5B9E;&#x503C;y&#x4E0E;&#x9884;&#x6D4B;&#x503C;logits&#x7684;&#x5747;&#x65B9;&#x5DEE;# tf.losses.categorical_crossentropy(y, logits) &#x8BA1;&#x7B97;&#x771F;&#x5B9E;&#x503C;y&#x4E0E;&#x9884;&#x6D4B;&#x503C;logits&#x7684;&#x4EA4;&#x53C9;&#x71B5;# tf.losses.binary_crossentropy(label, prob) &#x6839;&#x636E;&#x6807;&#x7B7E;&#x548C;&#x6982;&#x7387;&#x8BA1;&#x7B97;&#x4E8C;&#x5206;&#x7C7B;&#x95EE;&#x9898;&#x7684;&#x4EA4;&#x53C9;&#x71B5; Gradient(&#x68AF;&#x5EA6;&#x4E0B;&#x964D;)&#x6A21;&#x5757;1234567import tensorflow as tf# tf.Variable(tensor) &#x5C06;tensor&#x8D4B;&#x6709;&#x53EF;&#x6C42;&#x5BFC;&#x5C5E;&#x6027;# &#x5C06;&#x524D;&#x5411;&#x8FD0;&#x7B97;&#x8FC7;&#x7A0B;&#x653E;&#x5728;tf.GradientTape()&#x4E2D;&#xFF0C;&#x5373;&#x53EF;&#x5B9E;&#x73B0;&#x81EA;&#x52A8;&#x6C42;&#x5BFC;&#xFF0C;&#x524D;&#x63D0;&#x662F;&#x53D8;&#x91CF;&#x5177;&#x6709;&#x53EF;&#x5BFC;&#x5C5E;&#x6027;with tf.GradientTape() as tape&#xFF1A; XXX TensorBoard&#x6A21;&#x5757;1234567# &#x9996;&#x5148;&#x8981;&#x5B89;&#x88C5;TensorBoard&#xFF0C;pip install tensorboard# &#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#x5939;&#xFF0C;&#x547D;&#x540D;&#x4E3A;logs&#xFF0C;&#x5728;&#x8BE5;&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x4E0B;&#x5E76;&#x8F93;&#x5165;tensorboard --logdir logs &#x4F1A;&#x663E;&#x793A;TensorBoard 1.14.0 at http://DESKTOP-1NSILG1:6006/ (Press CTRL+C to quit)# &#x5EFA;&#x7ACB;&#x65E5;&#x5FD7;&#x6587;&#x4EF6;tf.summary.create_file_writer(filename)# &#x7ED9;&#x65E5;&#x5FD7;&#x5199;&#x6570;&#x636E;with summary_writer.as_default(): tf.summary.scalar(label, data, step) # &#x7ED9;label&#x6DFB;&#x52A0;&#x6570;&#x636E;data&#xFF0C;&#x4EE5;step&#x4F5C;&#x4E3A;x&#x8F74; tf.summary.image(label, img, step) # &#x7ED9;label&#x6DFB;&#x52A0;&#x56FE;&#x7247;img visdom&#x6A21;&#x5757;12345678910111213141516# &#x9996;&#x5148;&#x8981;&#x5B89;&#x88C5;visdom&#xFF0C;pip install visdom# &#x5728;&#x8BE5;&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x4E0B;&#x5E76;&#x8F93;&#x5165;python -m visdom.server&#xFF0C;&#x4F1A;&#x51FA;&#x73B0;&#x4E0B;&#x9762;&#x7684;&#x63D0;&#x793A;Checking for scripts.It&apos;s Alive!INFO:root:Application StartedYou can navigate to http://localhost:8097# &#x5728;python&#x6587;&#x4EF6;&#x4E2D;&#x5199;&#x5165;from visdom import Visdomvis = Visdom()# vis.line(Y, X, win, updata) &#x5728;win&#x7A97;&#x53E3;&#x4E0B;&#x521B;&#x5EFA;&#x6A2A;&#x5750;&#x6807;&#x4E3A;X&#xFF0C;&#x7EB5;&#x5750;&#x6807;&#x4E3A;Y&#x7684;&#x6298;&#x7EBF;&#xFF0C;updata&#x4E3A;&#x6298;&#x7EBF;&#x7684;&#x66F4;&#x65B0;&#x65B9;&#x5F0F;# vis.images(tensor, win) &#x5728;win&#x7A97;&#x53E3;&#x4E0B;&#x663E;&#x793A;&#x56FE;&#x7247;tensor# vis.text(text, win) &#x5728;win&#x7A97;&#x53E3;&#x4E0B;&#x663E;&#x793A;text&#x6587;&#x672C;&#x6587;&#x5B57; metrics(&#x8861;&#x91CF;&#x6307;&#x6807;)&#x6A21;&#x5757;12345678910111213141516171819from tensorflow.keras import metrics# metrics.Accuracy() &#x8FD4;&#x56DE;&#x51C6;&#x786E;&#x5EA6;&#x8861;&#x91CF;&#x6307;&#x6807;&#x5BF9;&#x8C61;acc_metrics = metrics.Accuracy()# metrics.Mean() &#x8FD4;&#x56DE;&#x5E73;&#x5747;&#x503C;&#x8861;&#x91CF;&#x6307;&#x6807;&#x5BF9;&#x8C61;mean_metrics = metrics.Mean()# obj.updata_state() &#x5411;metrics&#x5BF9;&#x8C61;&#x4E2D;&#x6DFB;&#x52A0;&#x6570;&#x636E;acc_metrics.updata_state(loss)mean_metrics.updata_state(y, pred)# obj.result() &#x5C06;metrics&#x4E2D;&#x7684;&#x6570;&#x636E;&#x53D6;&#x51FA;acc_metrics.result()mean_metrics.result()# obj.reset_states() &#x6E05;&#x9664;metrics&#x4E2D;&#x7684;&#x6570;&#x636E;acc_metrics.reset_states()mean_metrics.reset_states() Model(&#x6A21;&#x578B;)&#x6A21;&#x5757;1234567891011121314151617181920212223242526272829303132333435363738394041import tensorflow as tffrom tensorflow.keras import Sequential, layersfrom tensorflow import keras# model = Sequential([layer1, layer2, ...]) &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#xFF0C;&#x7B2C;&#x4E00;&#x5C42;&#x4E3A;layer1&#xFF0C;&#x7B2C;&#x4E8C;&#x5C42;&#x4E3A;layer2&#xFF0C;&#x2026;&#x2026;model = Sequential([layers.Dense(512), layers.Dense(128), layers.Dense(10)])# keras.Model &#x81EA;&#x5B9A;&#x4E49;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x7684;&#x57FA;&#x7C7B;class MyModel(keras.Model): def __init__(self): super(MyModel, self).__init__() self.fc1 = MyDense(28 * 28, 256) self.fc2 = MyDense(256, 64) self.fc3 = MyDense(64, 10) def call(self, inputs, training=None): x = self.fc1(inputs) x = tf.nn.relu(x) x = self.fc2(x) x = tf.nn.relu(x) x = self.fc3(x) return x# model.build(input_shape) &#x5B9A;&#x4E49;&#x7F51;&#x7EDC;&#x8F93;&#x5165;&#x7684;&#x5F62;&#x72B6;model.build(input_shape=(None, 784))# model.summary() &#x67E5;&#x770B;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;model.summary()# model.trainable_variables &#x67E5;&#x770B;&#x7F51;&#x7EDC;&#x6240;&#x6709;&#x53EF;&#x8BAD;&#x7EC3;&#x53C2;&#x6570;model.trainable_variables# model.compile(optimizer, loss, metrics) &#x914D;&#x7F6E;&#x8BAD;&#x7EC3;&#x6A21;&#x578B;&#xFF0C;&#x8BBE;&#x7F6E;&#x4F18;&#x5316;&#x5668;&#x4E3A;optimizer&#xFF0C;&#x635F;&#x5931;&#x51FD;&#x6570;&#x4E3A;loss&#xFF0C;&#x8861;&#x91CF;&#x6307;&#x6807;&#x4E3A;metrics# model.fit(db, epoch, validation_data, validation_freq) &#x8BAD;&#x7EC3;&#x6A21;&#x578B;&#xFF0C;&#x8BAD;&#x7EC3;&#x96C6;&#x4E3A;db&#xFF0C;&#x8BAD;&#x7EC3;epoch&#x6B21;&#xFF0C;validation_freq&#x6B21;&#x5BF9;validation_data&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x6D4B;&#x8BD5;&#xFF0C;&#x9632;&#x6B62;&#x8FC7;&#x62DF;&#x5408;# model.evaluate(db_test) &#x5BF9;&#x6D4B;&#x8BD5;&#x96C6;&#x8FDB;&#x884C;&#x6D4B;&#x8BD5;# model.predict(x) &#x5BF9;&#x672A;&#x77E5;&#x7684;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x9884;&#x6D4B; save(&#x4FDD;&#x5B58;)&#x6A21;&#x5757;123456789import tensorflow as tf# model.save_weights(filename) &#x5C06;&#x7F51;&#x7EDC;&#x7684;&#x8BAD;&#x7EC3;&#x53C2;&#x6570;&#x4FDD;&#x5B58;&#x5728;filename&#x4E2D;&#xFF0C;&#x4EC5;&#x4EC5;&#x4FDD;&#x5B58;&#x6743;&#x503C;# model.load_weights(filename) &#x8BFB;&#x53D6;filename&#x4E2D;&#x7684;&#x8BAD;&#x7EC3;&#x53C2;&#x6570;&#xFF0C;&#x524D;&#x63D0;&#x662F;&#x8981;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x76F8;&#x540C;&#x7ED3;&#x6784;&#x7684;&#x7F51;&#x7EDC;# model.save(filename) &#x4FDD;&#x5B58;&#x7F51;&#x7EDC;&#x7684;&#x6240;&#x6709;&#x7ED3;&#x6784;&#x548C;&#x53C2;&#x6570;# tf.keras.models.load_model(filename) &#x8BFB;&#x53D6;&#x6A21;&#x578B;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x521B;&#x5EFA;&#x7F51;&#x7EDC;&#xFF0C;&#x4F1A;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x76F8;&#x540C;&#x7684;&#x7F51;&#x7EDC;# tf.saved_model.save(model, filename) &#x4FDD;&#x5B58;&#x7F51;&#x7EDC;&#x7684;&#x6240;&#x6709;&#x7ED3;&#x6784;&#x548C;&#x53C2;&#x6570;&#xFF0C;&#x4FBF;&#x4E8E;&#x7ED9;&#x5176;&#x4ED6;&#x8BED;&#x8A00;&#x63D0;&#x4F9B;&#x8C03;&#x7528; TensorFlow&#x5C0F;&#x7ED3;&#x2003;&#x2003;&#x7531;&#x4E8E;TensorFlow&#x80CC;&#x9760;&#x8C37;&#x6B4C;&#xFF0C;&#x5177;&#x6709;&#x6700;&#x5168;&#x7684;&#x6587;&#x6863;&#x548C;&#x8D44;&#x6E90;&#xFF0C;&#x800C;&#x4E14;&#x5F88;&#x591A;&#x6A21;&#x578B;&#x90FD;&#x6709;TensorFlow&#x7684;&#x6E90;&#x7801;&#x5B9E;&#x73B0;&#xFF0C;&#x6240;&#x4EE5;&#x62E5;&#x6709;&#x8F83;&#x5927;&#x7684;&#x7528;&#x6237;&#x57FA;&#x6570;&#xFF0C;&#x8FD9;&#x6837;&#x4F7F;&#x7528;&#x6237;&#x51FA;&#x73B0;&#x95EE;&#x9898;&#x65F6;&#x80FD;&#x8F83;&#x5BB9;&#x6613;&#x5730;&#x627E;&#x5230;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#xFF0C;&#x8FD9;&#x4F7F;TensorFlow&#x76EE;&#x524D;&#x4F5C;&#x4E3A;&#x6700;&#x6D41;&#x884C;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x6846;&#x67B6;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>深度学习</category>
        <category>深度学习框架</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[网络流(Network Flows)]]></title>
    <url>%2F2019%2F09%2F02%2Falgorithm%20network_flows%2F</url>
    <content type="text"><![CDATA[&#x7F51;&#x7EDC;&#x6D41; &#x539F;&#x7406;&#x4ECB;&#x7ECD;&#x2003;&#x2003; Network Flows:&#x7F51;&#x7EDC;&#x6D41;&#xFF0C;&#x662F;&#x8FD0;&#x7B79;&#x5B66;&#x4E2D;&#x7684;&#x6700;&#x4F18;&#x5316;&#x95EE;&#x9898;&#xFF0C;&#x4E5F;&#x662F;&#x56FE;&#x8BBA;&#x4E2D;&#x7684;&#x4E00;&#x79CD;&#x7406;&#x8BBA;&#x65B9;&#x6CD5;&#x3002;&#x7C7B;&#x6BD4;&#x6C34;&#x6D41;&#x7684;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#xFF0C;&#x4E0E;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x5BC6;&#x5207;&#x76F8;&#x5173;&#xFF0C;&#x5E38;&#x5E38;&#x7528;&#x6765;&#x89E3;&#x51B3;&#x5B9E;&#x9645;&#x7684;&#x751F;&#x6D3B;&#x95EE;&#x9898;&#x3002; &#x7B97;&#x6CD5;&#x57FA;&#x7840;&#x56FE;&#x7684;&#x57FA;&#x672C;&#x672F;&#x8BED;&#x2003;&#x2003;(1)&#x65E0;&#x5411;&#x56FE;&#xFF1A;G&#x4E2D;&#x7684;&#x6BCF;&#x6761;&#x8FB9;&#x90FD;&#x662F;&#x6CA1;&#x6709;&#x65B9;&#x5411;&#x7684;&#xFF0C;&#x9876;&#x70B9;v1&#x548C;v2&#x4E4B;&#x95F4;&#x7684;&#x8FB9;&#x8BB0;&#x4E3A;(v1,v2)&#x6216;(v2,v1)&#x3002;&#x2003;&#x2003;(2)&#x6709;&#x5411;&#x56FE;&#xFF1A;G&#x4E2D;&#x7684;&#x6BCF;&#x6761;&#x8FB9;&#x90FD;&#x662F;&#x6709;&#x65B9;&#x5411;&#x7684;&#xFF0C;&#x9876;&#x70B9;v1&#x548C;v2&#x4E4B;&#x95F4;&#x7684;&#x8FB9;&#x8BB0;&#x4E3A;&lt;v1,v2&gt;&#xFF0C;&#x4E0D;&#x80FD;&#x5199;&#x6210;&lt;v2,v1&gt;&#x3002;&#x2003;&#x2003;(3)&#x7F51;&#xFF1A;&#x5728;&#x8FB9;&#x4E0A;&#x6807;&#x6CE8;&#x8DDD;&#x79BB;&#xFF0C;&#x65F6;&#x95F4;&#xFF0C;&#x82B1;&#x8D39;&#x7B49;&#x7B49;&#x6570;&#x503C;&#xFF0C;&#x79F0;&#x4E3A;&#x8FB9;&#x7684;&#x6743;&#x503C;&#xFF0C;&#x5E26;&#x6709;&#x6743;&#x503C;&#x7684;&#x56FE;&#x79F0;&#x4E3A;&#x7F51;&#x3002;&#x2003;&#x2003;(4)&#x4E8C;&#x5206;&#x56FE;&#xFF1A;&#x5982;&#x679C;&#x9876;&#x70B9;&#x96C6;V&#x53EF;&#x5206;&#x5272;&#x4E3A;&#x4E24;&#x4E2A;&#x4E92;&#x4E0D;&#x76F8;&#x4EA4;&#x7684;&#x5B50;&#x96C6;V1,V2&#xFF0C;&#x5E76;&#x4E14;&#x56FE;&#x4E2D;&#x7684;&#x6BCF;&#x6761;&#x8FB9;&#x6240;&#x5BF9;&#x5E94;&#x7684;&#x4E24;&#x4E2A;&#x9876;&#x70B9;&#x5206;&#x522B;&#x5C5E;&#x4E8E;&#x8FD9;&#x4E24;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x9876;&#x70B9;&#x96C6;&#xFF0C;&#x79F0;G&#x4E3A;&#x4E8C;&#x5206;&#x56FE;&#x3002; &#x7F51;&#x7EDC;&#x7684;&#x57FA;&#x672C;&#x672F;&#x8BED;&#x2003;&#x2003;(1)&#x7F51;&#x7EDC;&#xFF1A;&#x5728;&#x6709;&#x5411;&#x7F51;&#x4E2D;&#xFF0C;&#x6709;&#x4E24;&#x4E2A;&#x7279;&#x6B8A;&#x7684;&#x70B9;&#xFF0C;&#x6E90;&#x70B9;s&#x548C;&#x6C47;&#x70B9;t&#xFF0C;&#x56FE;&#x4E2D;&#x5404;&#x8FB9;&#x7684;&#x65B9;&#x5411;&#x8868;&#x793A;&#x5141;&#x8BB8;&#x7684;&#x6D41;&#x5411;&#xFF0C;&#x8FB9;&#x4E0A;&#x7684;&#x6743;&#x503C;&#x8868;&#x793A;&#x53EF;&#x5141;&#x8BB8;&#x7684;&#x6700;&#x5927;&#x6D41;&#x91CF;&#xFF0C;&#x4E14;&#x4E24;&#x4E2A;&#x7ED3;&#x70B9;&#x4E4B;&#x95F4;&#x6700;&#x591A;&#x53EA;&#x6709;&#x4E00;&#x6761;&#x8FB9;&#xFF0C;&#x79F0;&#x8FD9;&#x6837;&#x7684;&#x56FE;&#x4E3A;&#x7F51;&#x7EDC;&#x3002;&#x2003;&#x2003;(2)&#x7F51;&#x7EDC;&#x6D41;&#xFF1A;&#x7F51;&#x7EDC;&#x4E0A;&#x7684;&#x6D41;&#xFF0C;&#x5373;&#x5B9A;&#x4E49;&#x5728;&#x8FB9;&#x96C6;E&#x4E0A;&#x7684;&#x975E;&#x8D1F;&#x51FD;&#x6570;flow&#x79F0;&#x4E3A;&#x7F51;&#x7EDC;&#x6D41;&#x3002;&#x2003;&#x2003;(3)&#x53EF;&#x884C;&#x6D41;&#xFF1A;&#x6EE1;&#x8DB3;&#x5BB9;&#x91CF;&#x7EA6;&#x675F;&#xFF08;&#x6BCF;&#x4E2A;&#x8FB9;&#x7684;&#x5B9E;&#x9645;&#x6D41;&#x91CF;&#x4E0D;&#x5927;&#x4E8E;&#x6700;&#x5927;&#x5BB9;&#x91CF;&#xFF09;&#x548C;&#x6D41;&#x91CF;&#x5B88;&#x6052;&#xFF08;&#x9664;&#x4E86;&#x6E90;&#x70B9;s&#x548C;&#x6C47;&#x70B9;t&#x5916;&#xFF0C;&#x6240;&#x6709;&#x5185;&#x90E8;&#x7ED3;&#x70B9;&#x6D41;&#x5165;&#x91CF;&#x7B49;&#x4E8E;&#x6D41;&#x51FA;&#x91CF;&#xFF09;&#x4E24;&#x4E2A;&#x6027;&#x8D28;&#x7684;&#x7F51;&#x7EDC;&#x6D41;&#x79F0;&#x4E3A;&#x53EF;&#x884C;&#x6D41;&#x3002;&#x2003;&#x2003;(4)&#x6700;&#x5927;&#x6D41;&#xFF1A;&#x5728;&#x6EE1;&#x8DB3;&#x53EF;&#x884C;&#x6D41;&#x7684;&#x6761;&#x4EF6;&#x4E0B;&#xFF0C;&#x5728;&#x7F51;&#x7EDC;&#x4E2D;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x51C0;&#x8F93;&#x51FA;&#x6700;&#x5927;&#x7684;&#x7F51;&#x7EDC;&#x6D41;&#x79F0;&#x4E3A;&#x6700;&#x5927;&#x6D41;&#x3002; &#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6700;&#x5927;&#x7F51;&#x7EDC;&#x6D41;&#xFF0C;&#x6700;&#x77ED;&#x589E;&#x5E7F;&#x8DEF;&#x7B97;&#x6CD5;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x4E00;&#x5BB6;&#x516C;&#x53F8;&#x8981;&#x628A;&#x4E00;&#x6279;&#x8D27;&#x7269;&#x4ECE;&#x5DE5;&#x5382;&#x8FD0;&#x5230;&#x5317;&#x4EAC;&#xFF0C;&#x4E2D;&#x95F4;&#x7ECF;&#x8FC7;&#x82E5;&#x5E72;&#x4E2A;&#x57CE;&#x5E02;&#xFF0C;&#x5DF2;&#x77E5;&#x57CE;&#x5E02;&#x6570;&#xFF0C;&#x8FDE;&#x63A5;&#x6570;&#x548C;&#x57CE;&#x5E02;&#x4E4B;&#x95F4;&#x7684;&#x6700;&#x5927;&#x8FD0;&#x8F93;&#x91CF;&#xFF0C;&#x6C42;&#x5982;&#x4F55;&#x8FD0;&#x8F93;&#x4F7F;&#x8FD0;&#x8F93;&#x91CF;&#x6700;&#x5927;&#x3002;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x4E2A;&#x6570;&#x548C;&#x8FB9;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x884C;&#x8F93;&#x5165;&#x8FDE;&#x901A;&#x7684;&#x4E24;&#x4E2A;&#x57CE;&#x5E02;&#x4EE5;&#x53CA;&#x6700;&#x5927;&#x8FD0;&#x8F93;&#x91CF;&#xFF0C;&#x4F7F;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x9694;&#x3002;123456789106 9 # &#x7ED3;&#x70B9;&#x4E2A;&#x6570;n&#x548C;&#x8FB9;&#x6570;m1 2 12 # &#x8BF4;&#x660E;1&#x53F7;&#x57CE;&#x5E02;&#x548C;2&#x53F7;&#x57CE;&#x5E02;&#x4E4B;&#x95F4;&#x7684;&#x6700;&#x5927;&#x8FD0;&#x8F93;&#x91CF;&#x4E3A;121 3 102 4 83 2 23 5 134 3 54 6 185 4 65 6 4 &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;&#x5982;&#x679C;&#x4E00;&#x6761;&#x8FB9;&#x7684;&#x5BB9;&#x91CF;&#x4E3A;n&#xFF0C;&#x5DF2;&#x7ECF;&#x6D41;&#x51FA;&#x4E86;m&#x5219;&#x8BE5;&#x70B9;&#x6700;&#x591A;&#x53EF;&#x4EE5;&#x6B63;&#x5411;&#x6D41;&#x51FA;(n-m)&#x6216;&#x8005;&#x53CD;&#x5411;&#x6D41;&#x5165;m&#xFF0C;&#x56E0;&#x6B64;&#x5F15;&#x5165;&#x4E00;&#x4E2A;&#x6B8B;&#x4F59;&#x7F51;&#x7EDC;&#xFF0C;&#x6B63;&#x5411;&#x4EE3;&#x8868;&#x53EF;&#x589E;&#x91CF;&#xFF0C;&#x5373;&#x8FD8;&#x53EF;&#x4EE5;&#x6D41;&#x51FA;&#x7684;&#x5BB9;&#x91CF;&#xFF0C;&#x53CD;&#x5411;&#x4EE3;&#x8868;&#x6D41;&#x91CF;&#xFF0C;&#x5373;&#x5DF2;&#x7ECF;&#x6D41;&#x51FA;&#x7684;&#x5BB9;&#x91CF;&#xFF0C;&#x7B49;&#x4E8E;&#x53EF;&#x4EE5;&#x6D41;&#x5165;&#x7684;&#x6D41;&#x91CF;&#x3002;&#x2003;&#x2003;&#x5229;&#x7528;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x6216;&#x8005;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x4ECE;&#x6E90;&#x70B9;s&#x5BF9;&#x8BE5;&#x56FE;&#x8FDB;&#x884C;&#x904D;&#x5386;&#xFF0C;&#x5982;&#x679C;&#x4ECE;i&#x70B9;&#x5230;&#x8FBE;j&#x70B9;&#x7684;&#x503C;&#x5927;&#x4E8E;0&#xFF0C;&#x8BF4;&#x660E;&#x53EF;&#x4EE5;&#x6D41;&#x901A;&#xFF0C;&#x5219;&#x7EE7;&#x7EED;&#x3002;&#x5F53;&#x641C;&#x7D22;&#x5230;t&#x70B9;&#x65F6;&#xFF0C;&#x8BF4;&#x660E;&#x8BE5;&#x8DEF;&#x5F84;&#x662F;&#x4E00;&#x6761;&#x53EF;&#x884C;&#x6D41;&#xFF0C;&#x627E;&#x5230;&#x8BE5;&#x8DEF;&#x5F84;&#x4E0A;&#x8FB9;&#x7684;&#x6700;&#x5C0F;&#x503C;&#xFF0C;&#x6700;&#x5927;&#x6D41;&#x52A0;&#x4E0A;&#x8BE5;&#x503C;&#xFF0C;&#x7136;&#x540E;&#x4FEE;&#x6539;&#x7F51;&#x7EDC;&#xFF0C;&#x5C06;&#x8DEF;&#x5F84;&#x4E0A;&#x7684;&#x8FB9;&#x6B63;&#x5411;&#x51CF;&#x53BB;&#x8BE5;&#x503C;&#xFF0C;&#x53CD;&#x5411;&#x52A0;&#x4E0A;&#x8BE5;&#x503C;&#x3002;&#x91CD;&#x65B0;&#x641C;&#x7D22;&#xFF0C;&#x76F4;&#x5230;&#x65E0;&#x6CD5;&#x5230;&#x8FBE;t&#x70B9;&#x7B97;&#x6CD5;&#x7ED3;&#x675F;&#x3002; python&#x4EE3;&#x7801;&#x5B9E;&#x6218;12345678910111213141516171819202122232425262728293031323334353637383940414243import sysimport pandas as pddef sap(connect_map, n): real_map = [[0 for i in range(n + 1)] for j in range(n + 1)] residue_map = [[x for x in row] for row in connect_map] max_flow, find_flag = 0, True while find_flag: queue, find_flag = [[1, [1]]], False while queue: i, route = queue.pop(0) for j in range(1, n + 1): if residue_map[i][j] &gt; 0 and j not in route: if j == n: flow, route, queue, find_flag = [], route + [j], [], True for k in range(len(route) - 1): flow.append(residue_map[route[k]][route[k + 1]]) min_flow = min(flow) max_flow += min_flow for p in range(len(route) - 1): real_map[route[p]][route[p + 1]] += min_flow residue_map[route[p]][route[p + 1]] -= min_flow residue_map[route[p + 1]][route[p]] += min_flow break else: queue.append([j, route + [j]]) return real_map, max_flowprint(&apos;&#x8BF7;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x4E2A;&#x6570;n&#x548C;&#x8FB9;&#x6570;m:&apos;)for line in sys.stdin: n, m = [int(x) for x in line.strip().split()] connect_map, label, direction = [[0 for i in range(n + 1)] for j in range(n + 1)], [&apos;v&apos; + str(i) for i in range(1, n + 1)], [] print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x4E2A;&#x6570;u,v&#x53CA;&#x8FB9;u-v&#x7684;&#x5BB9;&#x91CF;w:&apos;) for i in range(m): u, v, w = [int(x) for x in sys.stdin.readline().strip().split()] connect_map[u][v] = w direction.append([u, v]) real_map, max_flow = sap(connect_map, n) for k in direction: real_map[k[0]][k[1]] -= real_map[k[1]][k[0]] real_map[k[1]][k[0]] = 0 net_work = pd.DataFrame([[x for x in row[1:]] for row in real_map[1:]], index=label, columns=label) print(&apos;&#x7F51;&#x7EDC;&#x7684;&#x6700;&#x5927;&#x6D41;&#x503C;&#x4E3A;:&apos;, max_flow, &apos;\n---------&#x5B9E;&#x6D41;&#x7F51;&#x7EDC;&#x5982;&#x4E0B;:---------\n&apos;, net_work) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6700;&#x5927;&#x7F51;&#x7EDC;&#x6D41;&#xFF0C;&#x91CD;&#x8D34;&#x6807;&#x7B7E;&#x7B97;&#x6CD5;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x4E00;&#x5BB6;&#x516C;&#x53F8;&#x8981;&#x628A;&#x4E00;&#x6279;&#x8D27;&#x7269;&#x4ECE;&#x5DE5;&#x5382;&#x8FD0;&#x5230;&#x5317;&#x4EAC;&#xFF0C;&#x4E2D;&#x95F4;&#x7ECF;&#x8FC7;&#x82E5;&#x5E72;&#x4E2A;&#x57CE;&#x5E02;&#xFF0C;&#x5DF2;&#x77E5;&#x57CE;&#x5E02;&#x6570;&#xFF0C;&#x8FDE;&#x63A5;&#x6570;&#x548C;&#x57CE;&#x5E02;&#x4E4B;&#x95F4;&#x7684;&#x6700;&#x5927;&#x8FD0;&#x8F93;&#x91CF;&#xFF0C;&#x6C42;&#x5982;&#x4F55;&#x8FD0;&#x8F93;&#x4F7F;&#x8FD0;&#x8F93;&#x91CF;&#x6700;&#x5927;&#x3002;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x4E2A;&#x6570;&#x548C;&#x8FB9;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x884C;&#x8F93;&#x5165;&#x8FDE;&#x901A;&#x7684;&#x4E24;&#x4E2A;&#x57CE;&#x5E02;&#x4EE5;&#x53CA;&#x6700;&#x5927;&#x8FD0;&#x8F93;&#x91CF;&#xFF0C;&#x4F7F;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x9694;&#x3002;123456789106 9 # &#x7ED3;&#x70B9;&#x4E2A;&#x6570;n&#x548C;&#x8FB9;&#x6570;m1 2 12 # &#x8BF4;&#x660E;1&#x53F7;&#x57CE;&#x5E02;&#x548C;2&#x53F7;&#x57CE;&#x5E02;&#x4E4B;&#x95F4;&#x7684;&#x6700;&#x5927;&#x8FD0;&#x8F93;&#x91CF;&#x4E3A;121 3 102 4 83 2 23 5 134 3 54 6 185 4 65 6 4 &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;&#x5728;&#x4E0A;&#x4F8B;&#x7B97;&#x6CD5;&#x4E2D;&#xFF0C;&#x6D6A;&#x8D39;&#x4E86;&#x8BB8;&#x591A;&#x65F6;&#x95F4;&#xFF0C;&#x56E0;&#x4E3A;&#x8981;&#x4ECE;&#x6E90;&#x70B9;&#x91CD;&#x590D;&#x8FDB;&#x884C;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x904D;&#x5386;&#x6216;&#x8005;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x904D;&#x5386;&#xFF0C;&#x56E0;&#x6B64;&#x6709;&#x91CD;&#x590D;&#x7684;&#x5927;&#x91CF;&#x8BA1;&#x7B97;&#x3002;&#x2003;&#x2003;&#x5F15;&#x5165;&#x6DF7;&#x5408;&#x7F51;&#x7EDC;&#xFF0C;&#x5C06;&#x6B8B;&#x4F59;&#x7F51;&#x7EDC;&#x8FDB;&#x884C;&#x4F18;&#x5316;&#xFF0C;&#x540C;&#x5411;&#x8FB9;&#x4E3A;&#x4E00;&#x4E2A;&#x5143;&#x7EC4;(cap, flow)&#x8BB0;&#x5F55;&#x5BB9;&#x91CF;&#x548C;&#x5F53;&#x524D;&#x6D41;&#x91CF;&#xFF0C;&#x53CD;&#x5411;&#x8FB9;&#x4E5F;&#x662F;&#x4E00;&#x4E2A;&#x5143;&#x7EC4;(0, -flow)&#x8BB0;&#x5F55;&#x5BB9;&#x91CF;&#x4E2A;&#x5F53;&#x524D;&#x6D41;&#x91CF;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8BE5;&#x7F51;&#x7EDC;&#x76F4;&#x63A5;&#x770B;&#x51FA;&#x65B9;&#x5411;&#x548C;&#x6D41;&#x91CF;&#x3002;&#x2003;&#x2003;(1)&#x4ECE;&#x6C47;&#x70B9;&#x5F00;&#x59CB;&#xFF0C;&#x5229;&#x7528;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x7B97;&#x6CD5;&#x5BF9;&#x7ED3;&#x70B9;&#x6DFB;&#x52A0;&#x6807;&#x7B7E;&#xFF0C;&#x4ECE;0&#x5F00;&#x59CB;&#xFF0C;&#x7B2C;&#x4E00;&#x6B21;&#x76F4;&#x63A5;&#x8BBF;&#x95EE;&#x5230;&#x7684;&#x70B9;&#x6807;&#x8BB0;&#x4E3A;1&#xFF0C;&#x7B2C;&#x4E8C;&#x6B21;&#x95F4;&#x63A5;&#x8BBF;&#x95EE;&#x5230;&#x7684;&#x70B9;&#x6807;&#x8BB0;&#x4E3A;2&#xFF0C;&#x4F9D;&#x6B21;&#x8D34;&#x6807;&#x7B7E;&#x3002;&#x2003;&#x2003;(2)&#x5982;&#x679C;&#x6E90;&#x70B9;&#x9AD8;&#x5EA6;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;&#x7ED3;&#x70B9;&#x6570;&#xFF0C;&#x8BF4;&#x660E;&#x5DF2;&#x7ECF;&#x627E;&#x5230;&#x4E86;&#x6700;&#x5927;&#x6D41;&#xFF0C;&#x7B97;&#x6CD5;&#x7ED3;&#x675F;&#xFF0C;&#x5426;&#x5219;&#x4ECE;&#x6E90;&#x70B9;&#x5F00;&#x59CB;&#xFF0C;&#x641C;&#x7D22;&#x6E90;&#x70B9;&#x9AD8;&#x5EA6;-1&#x7684;&#x70B9;&#xFF0C;&#x89C2;&#x5BDF;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x524D;&#x8FDB;&#xFF0C;&#x5982;&#x679C;&#x53EF;&#x4EE5;&#xFF0C;&#x5F53;&#x7ED3;&#x70B9;&#x4E3A;&#x6C47;&#x70B9;&#x65F6;&#xFF0C;&#x8FDB;&#x884C;&#x589E;&#x6D41;&#x51CF;&#x6D41;&#x64CD;&#x4F5C;(&#x540C;&#x5411;&#x8FB9;&#x589E;&#x6D41;&#xFF0C;&#x53CD;&#x5411;&#x8FB9;&#x51CF;&#x6D41;)&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x53EF;&#x4EE5;&#x5219;&#x9700;&#x8981;&#x91CD;&#x8D34;&#x6807;&#x7B7E;&#x3002;&#x2003;&#x2003;(3)&#x91CD;&#x8D34;&#x6807;&#x7B7E;&#xFF1A;&#x5982;&#x679C;&#x62E5;&#x6709;&#x5F53;&#x524D;&#x7ED3;&#x70B9;&#x9AD8;&#x5EA6;&#x7684;&#x7ED3;&#x70B9;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#xFF0C;&#x5219;&#x7B97;&#x6CD5;&#x7ED3;&#x675F;&#xFF0C;&#x5426;&#x5219;&#x5BFB;&#x627E;&#x662F;&#x5426;&#x6709;&#x53EF;&#x884C;&#x90BB;&#x63A5;&#x8FB9;(&#x5BB9;&#x91CF;&#x5927;&#x4E8E;&#x6D41;&#x91CF;)&#xFF0C;&#x5982;&#x679C;&#x6709;&#x5219;&#x4EE4;&#x5F53;&#x524D;&#x7ED3;&#x70B9;&#x9AD8;&#x5EA6;&#x7B49;&#x4E8E;&#x90BB;&#x63A5;&#x70B9;&#x9AD8;&#x5EA6;&#x7684;&#x6700;&#x5C0F;&#x503C;+1&#xFF0C;&#x5426;&#x5219;&#x4EE4;&#x5F53;&#x524D;&#x7ED3;&#x70B9;&#x7684;&#x9AD8;&#x5EA6;&#x7B49;&#x4E8E;&#x7ED3;&#x70B9;&#x6570;&#x3002;&#x91CD;&#x65B0;&#x56DE;&#x5230;(2) python&#x4EE3;&#x7801;&#x5B9E;&#x6218;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869import sysimport pandas as pddef isap(mix_net, height_table, n): max_flow, real_map = 0, [[0 for i in range(n + 1)] for j in range(n + 1)] while height_table[1] &lt; n: current_node, stack = 1, [] while current_node != n: next_height, flag, index = height_table[current_node] - 1, False, 0 for i in range(1, n + 1): if height_table[i] == next_height and mix_net[current_node][i][0] &gt; mix_net[current_node][i][1]: flag, index = True, i break if flag: stack.append(current_node) current_node = index if current_node == n: stack.append(current_node) flow = [] for k in range(len(stack) - 1): flow.append(mix_net[stack[k]][stack[k + 1]][0] - mix_net[stack[k]][stack[k + 1]][1]) min_flow = min(flow) max_flow += min_flow for p in range(len(stack) - 1): real_map[stack[p]][stack[p + 1]] += min_flow mix_net[stack[p]][stack[p + 1]][1] += min_flow mix_net[stack[p + 1]][stack[p]][1] -= min_flow else: if height_table.count(height_table[current_node]) == 1: return real_map, max_flow min_neibor, no_neibor = n, True for i in range(1, n + 1): if mix_net[current_node][i][0] &gt; mix_net[current_node][i][1]: no_neibor, min_neibor = False, min(min_neibor, height_table[i]) height_table[current_node] = n if no_neibor else min_neibor + 1 if stack: current_node = stack[-1] stack.pop() else: current_node = 1 return real_map, max_flowdef init_height(queue): global height_table while queue: j, height = queue.pop(0) for i in range(1, n + 1): if mix_net[i][j][0] &gt; 0 and height_table[i] == -1: height_table[i] = height + 1 queue.append([i, height + 1])print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x4E2A;&#x6570;n&#x548C;&#x8FB9;&#x6570;m:&apos;)for line in sys.stdin: n, m = [int(x) for x in line.strip().split()] mix_net, label, height_table, direction = [[[0, 0] for i in range(n + 1)] for j in range(n + 1)], [&apos;v&apos; + str(i) for i in range(1, n + 1)], [-1] * n + [0], [] print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x4E2A;&#x6570;u,v&#x53CA;&#x8FB9;u-v&#x7684;&#x5BB9;&#x91CF;w:&apos;) for i in range(m): u, v, w = [int(x) for x in sys.stdin.readline().strip().split()] mix_net[u][v], mix_net[v][u] = [w, 0], [0, 0] direction.append([u, v]) init_height([[n, 0]]) real_map, max_flow = isap(mix_net, height_table, n) for k in direction: real_map[k[0]][k[1]] -= real_map[k[1]][k[0]] real_map[k[1]][k[0]] = 0 net_work = pd.DataFrame([[x for x in row[1:]] for row in real_map[1:]], index=label, columns=label) print(&apos;&#x7F51;&#x7EDC;&#x7684;&#x6700;&#x5927;&#x6D41;&#x503C;&#x4E3A;:&apos;, max_flow, &apos;\n---------&#x5B9E;&#x6D41;&#x7F51;&#x7EDC;&#x5982;&#x4E0B;:---------\n&apos;, net_work) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6700;&#x5C0F;&#x8D39;&#x7528;&#x6700;&#x5927;&#x6D41;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x4E00;&#x5BB6;&#x516C;&#x53F8;&#x8981;&#x628A;&#x4E00;&#x6279;&#x8D27;&#x7269;&#x4ECE;&#x5DE5;&#x5382;&#x8FD0;&#x5230;&#x5317;&#x4EAC;&#xFF0C;&#x4E2D;&#x95F4;&#x7ECF;&#x8FC7;&#x82E5;&#x5E72;&#x4E2A;&#x57CE;&#x5E02;&#xFF0C;&#x5DF2;&#x77E5;&#x57CE;&#x5E02;&#x6570;&#xFF0C;&#x8FDE;&#x63A5;&#x6570;&#x548C;&#x57CE;&#x5E02;&#x4E4B;&#x95F4;&#x7684;&#x6700;&#x5927;&#x8FD0;&#x8F93;&#x91CF;&#xFF0C;&#x4EE5;&#x53CA;&#x5355;&#x4F4D;&#x8D27;&#x7269;&#x7684;&#x8FD0;&#x9001;&#x8D39;&#x7528;&#xFF0C;&#x5982;&#x4F55;&#x627E;&#x5230;&#x4E00;&#x79CD;&#x6D41;&#x91CF;&#x6700;&#x5927;&#x8D39;&#x7528;&#x5C3D;&#x53EF;&#x80FD;&#x5C0F;&#x7684;&#x65B9;&#x6CD5;&#x3002;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x4E2A;&#x6570;&#x548C;&#x8FB9;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x884C;&#x8F93;&#x5165;&#x8FDE;&#x901A;&#x7684;&#x4E24;&#x4E2A;&#x57CE;&#x5E02;&#x4EE5;&#x53CA;&#x6700;&#x5927;&#x8FD0;&#x8F93;&#x91CF;&#xFF0C;&#x548C;&#x5355;&#x4F4D;&#x8D27;&#x7269;&#x8FD0;&#x8F93;&#x8D39;&#x7528;&#xFF0C;&#x4F7F;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x9694;&#x3002;12345678910116 10 # &#x7ED3;&#x70B9;&#x4E2A;&#x6570;n&#x548C;&#x8FB9;&#x6570;m1 2 3 1 # &#x8BF4;&#x660E;1&#x53F7;&#x57CE;&#x5E02;&#x548C;2&#x53F7;&#x57CE;&#x5E02;&#x4E4B;&#x95F4;&#x7684;&#x6700;&#x5927;&#x8FD0;&#x8F93;&#x91CF;&#x4E3A;3&#xFF0C;&#x5355;&#x4F4D;&#x8FD0;&#x8F93;&#x91CF;&#x8D39;&#x7528;&#x4E3A;11 3 4 72 3 1 12 4 6 42 5 4 53 4 5 33 5 3 64 6 7 65 4 3 35 6 3 2 &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;(1)&#x6700;&#x77ED;&#x589E;&#x5E7F;&#x8DEF;&#x7B97;&#x6CD5;&#x7C7B;&#x4F3C;&#xFF0C;&#x5148;&#x5EFA;&#x7ACB;&#x6DF7;&#x5408;&#x7F51;&#x7EDC;&#x3002;&#x2003;&#x2003;(2)&#x4ECE;&#x6E90;&#x70B9;&#x5F00;&#x59CB;&#x641C;&#x7D22;&#xFF0C;&#x627E;&#x5230;&#x4E00;&#x6761;&#x6700;&#x77ED;&#x8D39;&#x7528;&#x8DEF;&#xFF0C;&#x5982;&#x679C;&#x65E0;&#x6CD5;&#x641C;&#x7D22;&#x5230;&#x6C47;&#x70B9;&#xFF0C;&#x5219;&#x7B97;&#x6CD5;&#x7ED3;&#x675F;&#xFF0C;&#x5DF2;&#x7ECF;&#x627E;&#x5230;&#x6700;&#x5C0F;&#x8D39;&#x7528;&#x6700;&#x5927;&#x6D41;&#xFF0C;&#x5426;&#x5219;&#x603B;&#x82B1;&#x8D39;&#x52A0;&#x4E0A;&#x8BE5;&#x8DEF;&#x5F84;&#x8FB9;&#x4E0A;&#x7684;&#x6700;&#x5C0F;&#x503C;&#x4E58;&#x8DEF;&#x5F84;&#x4E0A;&#x7684;&#x6240;&#x6709;&#x82B1;&#x8D39;&#x4E4B;&#x548C;&#x4F5C;&#x4E3A;&#x76EE;&#x524D;&#x7684;&#x603B;&#x82B1;&#x8D39;&#x3002;&#x2003;&#x2003;(3)&#x7136;&#x540E;&#x66F4;&#x65B0;&#x6DF7;&#x5408;&#x7F51;&#x7EDC;&#xFF0C;&#x6B63;&#x5411;&#x589E;&#x6D41;&#xFF0C;&#x53CD;&#x5411;&#x51CF;&#x6D41;&#x3002;&#x56DE;&#x5230;&#x6B65;&#x9AA4;(2) python&#x4EE3;&#x7801;&#x5B9E;&#x6218;1234567891011121314151617181920212223242526272829303132333435363738394041424344import sysimport pandas as pddef spfa(mix_net, n): real_map = [[0 for i in range(n + 1)] for j in range(n + 1)] max_flow, total_cost, find_flag, min_cost, min_route = 0, 0, True, 65535, [1] while min_route: queue, find_flag, min_cost, min_route = [[1, [1], 0]], False, 65535, [] while queue: i, route, cost = queue.pop(0) if i == n and min_cost &gt; cost: min_cost, min_route = cost, route for j in range(1, n + 1): if mix_net[i][j][0] &gt; mix_net[i][j][1] and j not in route: queue.append([j, route + [j], cost + mix_net[i][j][2]]) if min_route: flow = [] for k in range(len(min_route) - 1): flow.append(mix_net[min_route[k]][min_route[k + 1]][0] - mix_net[min_route[k]][min_route[k + 1]][1]) min_flow = min(flow) max_flow += min_flow total_cost += min_cost * min_flow for p in range(len(min_route) - 1): real_map[min_route[p]][min_route[p + 1]] += min_flow mix_net[min_route[p]][min_route[p + 1]][1] += min_flow mix_net[min_route[p + 1]][min_route[p]][1] -= min_flow return real_map, max_flow, total_costprint(&apos;&#x8BF7;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x4E2A;&#x6570;n&#x548C;&#x8FB9;&#x6570;m:&apos;)for line in sys.stdin: n, m = [int(x) for x in line.strip().split()] mix_net, label, direction = [[[0, 0, 0] for i in range(n + 1)] for j in range(n + 1)], [&apos;v&apos; + str(i) for i in range(1, n + 1)], [] print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x4E2A;&#x6570;u&#xFF0C;v&#x53CA;&#x8FB9;u-v&#x7684;&#x5BB9;&#x91CF;w&#xFF0C;&#x5355;&#x4F4D;&#x5BB9;&#x91CF;&#x8D39;&#x7528;c:&apos;) for i in range(m): u, v, w, c = [int(x) for x in sys.stdin.readline().strip().split()] mix_net[u][v], mix_net[v][u] = [w, 0, c], [0, 0, -c] direction.append([u, v]) real_map, max_flow, total_cost = spfa(mix_net, n) for k in direction: real_map[k[0]][k[1]] -= real_map[k[1]][k[0]] real_map[k[1]][k[0]] = 0 net_work = pd.DataFrame([[x for x in row[1:]] for row in real_map[1:]], index=label, columns=label) print(&apos;&#x7F51;&#x7EDC;&#x7684;&#x6700;&#x5927;&#x6D41;&#x503C;&#x4E3A;:&apos;, max_flow, &apos;\n&#x7F51;&#x7EDC;&#x7684;&#x6700;&#x5C0F;&#x8D39;&#x7528;&#x4E3A;:&apos;, total_cost, &apos;\n---------&#x5B9E;&#x6D41;&#x7F51;&#x7EDC;&#x5982;&#x4E0B;:---------\n&apos;, net_work) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7B97;&#x6CD5;&#x603B;&#x7ED3;&#x2003;&#x2003;&#x7F51;&#x7EDC;&#x6D41;&#x662F;&#x4E00;&#x79CD;&#x8F83;&#x4E3A;&#x590D;&#x6742;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x901A;&#x5E38;&#x7528;&#x6765;&#x89E3;&#x51B3;&#x5B9E;&#x9645;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x5176;&#x6A21;&#x677F;&#x56FA;&#x5B9A;&#xFF0C;&#x96BE;&#x70B9;&#x5728;&#x4E8E;&#x5982;&#x4F55;&#x5C06;&#x95EE;&#x9898;&#x8F6C;&#x5316;&#x4E3A;&#x4E00;&#x4E2A;&#x7F51;&#x7EDC;&#x6D41;&#x8868;&#x793A;&#x7684;&#x5F62;&#x5F0F;&#xFF0C;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x591A;&#x52A0;&#x7EC3;&#x4E60;&#xFF0C;&#x505A;&#x5230;&#x719F;&#x7EC3;&#x638C;&#x63E1;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>计算机基础知识</category>
        <category>常用算法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[OpenCV]]></title>
    <url>%2F2019%2F08%2F20%2Flibrary%20opencv%2F</url>
    <content type="text"><![CDATA[OpenCV&#x4ECB;&#x7ECD;&#x2003;&#x2003;OpenCV&#x662F;&#x4E00;&#x4E2A;&#x57FA;&#x4E8E;BSD&#x8BB8;&#x53EF;&#xFF08;&#x5F00;&#x6E90;&#xFF09;&#x53D1;&#x884C;&#x7684;&#x8DE8;&#x5E73;&#x53F0;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x5E93;&#xFF0C;&#x53EF;&#x4EE5;&#x8FD0;&#x884C;&#x5728;Linux&#x3001;Windows&#x3001;Android&#x548C;Mac OS&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x4E0A;&#x3002;&#x5B83;&#x8F7B;&#x91CF;&#x7EA7;&#x800C;&#x4E14;&#x9AD8;&#x6548;&#xFF0C;&#x7531;&#x4E00;&#x7CFB;&#x5217; C &#x51FD;&#x6570;&#x548C;&#x5C11;&#x91CF; C++ &#x7C7B;&#x6784;&#x6210;&#xFF0C;&#x540C;&#x65F6;&#x63D0;&#x4F9B;&#x4E86;Python&#x3001;Ruby&#x3001;MATLAB&#x7B49;&#x8BED;&#x8A00;&#x7684;&#x63A5;&#x53E3;&#xFF0C;&#x5B9E;&#x73B0;&#x4E86;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x548C;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x65B9;&#x9762;&#x7684;&#x5F88;&#x591A;&#x901A;&#x7528;&#x7B97;&#x6CD5;&#x3002; OpenCV&#x7279;&#x70B9;&#x2003;&#x2003;OpenCV&#x662F;&#x5F00;&#x6E90;&#x7684;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x5E93;&#xFF0C;&#x91C7;&#x7528;C / C++&#x7F16;&#x5199;&#xFF0C;&#x5904;&#x7406;&#x901F;&#x5EA6;&#x5F88;&#x5FEB;&#x3002;&#x2003;&#x2003;OpenCV&#x53EF;&#x4EE5;&#x63D0;&#x4F9B;&#x4E3B;&#x6D41;&#x8BED;&#x8A00;&#x7684;&#x63A5;&#x53E3;&#xFF0C;&#x65B9;&#x4FBF;&#x5F00;&#x53D1;&#x8005;&#x8C03;&#x7528;&#x3002;&#x2003;&#x2003;OpenCV&#x5177;&#x6709;&#x901A;&#x7528;&#x7684;&#x56FE;&#x50CF;/&#x89C6;&#x9891;&#x8F7D;&#xFF0C;&#x4FDD;&#x5B58;&#x548C;&#x83B7;&#x53D6;&#x6A21;&#x5757;&#xFF0C;&#x5177;&#x6709;&#x5E95;&#x5C42;&#x548C;&#x9AD8;&#x5C42;&#x7684;&#x5E94;&#x7528;&#x5F00;&#x53D1;&#x5305;&#x3002; OpenCV&#x5E94;&#x7528;OpenCV&#x8BFB;&#x53D6;&#xFF0C;&#x663E;&#x793A;&#x4E0E;&#x4FDD;&#x5B58;12345678910111213141516171819202122import cv2 as cv# cv.imread(filename, code) &#x4EE5;code&#x683C;&#x5F0F;&#x8BFB;&#x53D6;&#x4E00;&#x5F20;&#x56FE;&#x7247;&#xFF0C;code&#x53EF;&#x4EE5;&#x4E3A;cv.IMREAD_GRAYSCALE&#x8BFB;&#x53D6;&#x4E00;&#x5F20;&#x7070;&#x5EA6;&#x56FE;&#x50CF;img = cv.imread(&apos;lena.jpg&apos;)# cv.namedWindow(windowname) &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x540D;&#x4E3A;windowname&#x7684;&#x7A97;&#x53E3;cv.namedWindow(&apos;lena&apos;)# cv.imshow(window_name, img) &#x5C06;img&#x56FE;&#x7247;&#x663E;&#x793A;&#x5728;&#x7A97;&#x53E3;&#x5904;cv.imshow(&apos;lena&apos;, img)# cv.waitkey(n) &#x7B49;&#x5F85;&#x7528;&#x6237;&#x6309;&#x952E;n&#x6BEB;&#x79D2;&#xFF0C;0&#x4EE3;&#x8868;&#x6C38;&#x8FDC;&#x7B49;&#x5F85;cv.waitkey(0)# cv.destroyAllWindows() &#x5173;&#x95ED;&#x6240;&#x6709;&#x7A97;&#x53E3;cv.destroyAllWindows()# cv.VideoCapture(n) &#x83B7;&#x53D6;&#x7B2C;n&#x4E2A;&#x6444;&#x50CF;&#x5934;&#xFF0C;&#x4ECE;0&#x5F00;&#x59CB;&#x7F16;&#x53F7;cv.VideoCapture(0)# cv.imwrite(filename, img) &#x5C06;img&#x56FE;&#x7247;&#x4FDD;&#x5B58;&#x5728;filename&#x6587;&#x4EF6;&#x4E2D;cv.imwrite(&apos;lena1.png&apos;, img) OpenCV&#x56FE;&#x50CF;&#x683C;&#x5F0F;&#x8F6C;&#x6362;cvtColor&#x65B9;&#x6CD5;1234567891011import cv2 as cvimg = cv.imread(&apos;lena.jpg&apos;)# cv.cvtColor(img, code) &#x5C06;img&#x8F6C;&#x6362;&#x4E3A;code&#x683C;&#x5F0F;&#xFF0C;code&#x53EF;&#x4EE5;&#x4E3A;cv.COLOR_BGR2GRAY&#x5C06;RGB&#x4E09;&#x901A;&#x9053;&#x5F69;&#x8272;&#x56FE;&#x50CF;&#x8F6C;&#x6362;&#x4E3A;&#x7070;&#x5EA6;&#x56FE;&#x50CF;&#xFF0C;cv.COLOR_BGR2HSV&#x5C06;RGB&#x989C;&#x8272;&#x901A;&#x9053;&#x8F6C;&#x6362;&#x4E3A;HSV&#x989C;&#x8272;&#x901A;&#x9053;img_gray=cv.cvtColor(img,cv.COLOR_BGR2GRAY)cv.namedWindow(&apos;gray&apos;)cv.imshow(&apos;gray&apos;, img_gray)cv.waitKey(0)cv.destroyAllWindows() OpenCV&#x56FE;&#x50CF;&#x5F62;&#x6001;&#x5B66;&#x53D8;&#x6362;morphologyEx&#x65B9;&#x6CD5;12345678910111213import cv2 as cvimport numpy as npkernel = np.ones((3, 3), np.uint8)img = cv.imread(&apos;lena.jpg&apos;, cv2.IMREAD_GRAYSCALE)# cv.morphologyEx(img, op, kernel) &#x5C06;img&#x8FDB;&#x884C;&#x6A21;&#x677F;&#x4E3A;kernel&#x7684;op&#x64CD;&#x4F5C;&#xFF0C;&#x5176;&#x4E2D;op&#x53EF;&#x4EE5;&#x4E3A;cv.MORPH_DILATE&#x81A8;&#x80C0;&#x64CD;&#x4F5C;&#xFF0C;cv.MORPH_ERODE&#x8150;&#x8680;&#x64CD;&#x4F5C;&#xFF0C;cv.MORPH_OPEN&#x5F00;&#x64CD;&#x4F5C;&#xFF0C;cv.MORPH_CLOSE&#x95ED;&#x64CD;&#x4F5C;&#xFF0C;cv.MORPH_GRADIENT&#x68AF;&#x5EA6;&#x64CD;&#x4F5C;(&#x81A8;&#x80C0;+&#x8150;&#x8680;)&#x627E;&#x51FA;&#x8FB9;&#x7F18;img_gradient = cv.morphologyEx(img, cv2.MORPH_GRADIENT, kernel)cv.namedWindow(&apos;gradient&apos;)cv.imshow(&apos;gradient&apos;, img_gradient)cv.waitKey(0)cv.destroyAllWindows() OpenCV&#x56FE;&#x50CF;&#x5F62;&#x72B6;&#x53D8;&#x6362;resize&#x65B9;&#x6CD5;12345678910111213import cv2 as cvimg = cv.imread(&apos;lena.jpg&apos;)cv.namedWindow(&apos;origin&apos;)cv.imshow(&apos;origin&apos;, img)# cv.resize(img, shape) &#x5C06;img&#x7684;&#x5927;&#x5C0F;&#x8C03;&#x6574;&#x4E3A;shapeimg_resize = cv.resize(img, (500, 500))cv.namedWindow(&apos;resize&apos;)cv.imshow(&apos;resize&apos;,img_resize)cv.waitKey(0)cv.destroyAllWindows() flip&#x65B9;&#x6CD5;123456789101112131415161718192021import cv2 as cvimg = cv.imread(&apos;lena.jpg&apos;)cv.namedWindow(&apos;origin&apos;)cv.imshow(&apos;origin&apos;, img)# cv.flip(img, n) &#x5C06;img&#x7FFB;&#x8F6C;&#xFF0C;n&gt;0&#x6CBF;y&#x8F74;&#x5BF9;&#x79F0;&#x7FFB;&#x8F6C;&#xFF0C;n=0&#x6CBF;x&#x8F74;&#x5BF9;&#x79F0;&#x7FFB;&#x8F6C;&#xFF0C;n&lt;0&#x6CBF;x&#x8F74;y&#x8F74;&#x540C;&#x65F6;&#x5BF9;&#x79F0;&#x7FFB;&#x8F6C;img_flip_x = cv.flip(img, 0)cv.namedWindow(&apos;flip_x&apos;)cv.imshow(&apos;flip_x&apos;,img_flip_x)img_flip_y = cv.flip(img, 1)cv.namedWindow(&apos;flip_y&apos;)cv.imshow(&apos;flip_y&apos;,img_flip_y)img_flip_xy = cv.flip(img, -1)cv.namedWindow(&apos;flip_xy&apos;)cv.imshow(&apos;flip_xy&apos;,img_flip_xy)cv.waitKey(0)cv.destroyAllWindows() warpAffine&#x65B9;&#x6CD5;1234567891011121314151617import cv2 as cv import numpy as npnp.random.seed(5)m = np.random.rand(2,3)img = cv.imread(&apos;lena.jpg&apos;)cv.namedWindow(&apos;origin&apos;)cv.imshow(&apos;origin&apos;, img)# cv.warpAffine(img, m, dsize) &#x5C06;img&#x8FDB;&#x884C;&#x4EFF;&#x5C04;&#x53D8;&#x6362;&#xFF0C;&#x53D8;&#x6362;&#x77E9;&#x9635;&#x4E3A;m&#xFF0C;&#x53D8;&#x6362;&#x540E;&#x7684;&#x5927;&#x5C0F;&#x4E3A;dsizeimg_affine = cv.warpAffine(img, m, (img.shape[0], img.shape[1]))cv.namedWindow(&apos;affine&apos;)cv.imshow(&apos;affine&apos;,img_affine)cv.waitKey(0)cv.destroyAllWindows() OpenCV&#x56FE;&#x50CF;&#x64CD;&#x4F5C;bitwise&#x65B9;&#x6CD5;12345678910111213141516171819202122232425262728293031import cv2 as cvimport numpy as npnp.random.seed(1)img = cv.imread(&apos;lena.jpg&apos;)img_random = np.random.randint(0, 256, img.shape, dtype=np.uint8)# cv.bitwise_not(img) &#x6309;&#x4F4D;&#x53D6;&#x53CD;&#xFF0C;&#x7B49;&#x4EF7;&#x4E8E;~imgimg_not = cv.bitwise_not(img)cv.namedWindow(&apos;not&apos;)cv.imshow(&apos;not&apos;, img_not)# cv.bitwise_and(img1, img2) &#x6309;&#x4F4D;&#x4E0E;&#xFF0C;&#x7B49;&#x4EF7;&#x4E8E;img1 &amp; img2img_and = cv.bitwise_and(img, img_random)cv.namedWindow(&apos;and&apos;)cv.imshow(&apos;and&apos;, img_and)# cv.bitwise_or(img1, img2) &#x6309;&#x4F4D;&#x6216;&#xFF0C;&#x7B49;&#x4EF7;&#x4E8E;img1 | img2img_or = cv.bitwise_or(img, img_random)cv.namedWindow(&apos;or&apos;)cv.imshow(&apos;or&apos;, img_or)# cv.bitwise_xor(img1, img2) &#x6309;&#x4F4D;&#x5F02;&#x6216;&#xFF0C;&#x7B49;&#x4EF7;&#x4E8E;img1 ^ img2img_xor = cv.bitwise_xor(img, img_random)cv.namedWindow(&apos;xor&apos;)cv.imshow(&apos;xor&apos;, img_xor)cv.waitKey(0)cv.destroyAllWindows() add&#xFF0C;subtract&#xFF0C;multiply&#xFF0C;divide&#xFF0C;addweight&#x65B9;&#x6CD5;1234567891011121314151617181920212223242526import cv2 as cvimport numpy as npnp.random.seed(1)img = cv.imread(&apos;lena.jpg&apos;)img_random = np.random.randint(0, 256, img.shape, dtype=np.uint8)# cv.add(img1, img2) &#x5C06;&#x4E24;&#x5F20;&#x56FE;&#x7247;&#x76F8;&#x52A0;&#xFF0C;&#x5982;&#x679C;&#x52A0;&#x548C;&#x5927;&#x4E8E;&#x4E0A;&#x9650;&#x5219;&#x8D4B;&#x503C;&#x4E3A;&#x4E0A;&#x9650;(200+200=255)&#xFF0C;&#x548C;img1+img2&#x4E0D;&#x540C;&#xFF0C;img1+img2&#x5982;&#x679C;&#x5927;&#x4E8E;&#x4E0A;&#x9650;&#x5219;&#x4ECE;&#x4E0B;&#x9650;&#x5F00;&#x59CB;&#x8BA1;&#x7B97;(200+200=400-256=144)img_add = cv.add(img, img_random)cv.namedWindow(&apos;add&apos;)cv.imshow(&apos;add&apos;, img_add)img_plus = img + img_randomcv.namedWindow(&apos;plus&apos;)cv.imshow(&apos;plus&apos;, img_plus)# cv.subtract(img1, img2) &#x5C06;&#x4E24;&#x5F20;&#x56FE;&#x7247;&#x76F8;&#x51CF;&#xFF0C;&#x7528;&#x6CD5;&#x540C;add# cv.multiply(img1, img2) &#x5C06;&#x4E24;&#x5F20;&#x56FE;&#x7247;&#x76F8;&#x4E58;&#xFF0C;&#x7528;&#x6CD5;&#x540C;add# cv.divide(img1, img2) &#x5C06;&#x4E24;&#x5F20;&#x56FE;&#x7247;&#x76F8;&#x9664;&#xFF0C;&#x7528;&#x6CD5;&#x540C;add# cv.addweight(img1, x, img2, y, z) &#x5C06;&#x4E24;&#x5F20;&#x56FE;&#x7247;&#x76F8;&#x52A0;&#xFF0C;&#x7ED3;&#x679C;&#x4E3A;img1 * x + img2 * y + zcv.waitKey(0)cv.destroyAllWindows() blur&#xFF0C;medianBlur&#xFF0C;GaussianBlur&#xFF0C;filter2D&#x65B9;&#x6CD5;123456789101112131415161718192021222324252627282930313233import cv2 as cvimport numpy as npimg = cv.imread(&apos;lena.jpg&apos;)cv.namedWindow(&apos;origin&apos;)cv.imshow(&apos;origin&apos;, img)# cv.blur(img, ksize) &#x5C06;img&#x505A;&#x5747;&#x503C;&#x6A21;&#x7CCA;&#x64CD;&#x4F5C;&#xFF0C;&#x6838;&#x5927;&#x5C0F;&#x4E3A;ksizeimg_blur = cv.blur(img, (5, 5))cv.namedWindow(&apos;blur&apos;)cv.imshow(&apos;blur&apos;, img_blur)# cv.medianBlur(img, ksize) &#x5C06;img&#x505A;&#x4E2D;&#x503C;&#x6A21;&#x7CCA;&#x64CD;&#x4F5C;&#xFF0C;&#x6838;&#x5927;&#x5C0F;&#x4E3A;ksizeimg_median_blur = cv.medianBlur(img, 5)cv.namedWindow(&apos;median_blur&apos;)cv.imshow(&apos;median_blur&apos;, img_median_blur)# cv.GaussianBlur(img, ksize, sigmaX) &#x5C06;img&#x505A;&#x9AD8;&#x65AF;&#x6A21;&#x7CCA;&#x64CD;&#x4F5C;&#xFF0C;&#x6838;&#x5927;&#x5C0F;&#x4E3A;ksize&#xFF0C;&#x3C3;&#x4E3A;sigmaXimg_gauss_blur = cv.GaussianBlur(img, (5, 5), sigmaX=1)cv.namedWindow(&apos;gauss_blur&apos;)cv.imshow(&apos;gauss_blur&apos;, img_gauss_blur)# cv.filter2D(img, ddepth, kernel) &#x5C06;img&#x505A;&#x4E8C;&#x4F4D;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#xFF0C;&#x5377;&#x79EF;&#x6838;&#x4E3A;kernel&#xFF0C;&#x5982;&#x679C;&#x8981;&#x4FDD;&#x6301;&#x5927;&#x5C0F;&#x5219;ddepth&#x4E3A;-1img_edge = cv.filter2D(img, -1, np.array([[0, -1, 0], [-1, 4, -1], [0, -1, 0]]))cv.namedWindow(&apos;edge&apos;)cv.imshow(&apos;edge&apos;, img_edge)cv.waitKey(0)cv.destroyAllWindows() OpenCV&#x7EDF;&#x8BA1;getTickCount&#xFF0C;getTickFrequency&#x65B9;&#x6CD5;12345678910import cv2 as cv# cv.getTickCount() &#x8BA1;&#x7B97;&#x4ECE;&#x5F00;&#x673A;&#x5230;&#x5F53;&#x524D;&#x65F6;&#x95F4;&#x7684;&#x65F6;&#x949F;&#x5468;&#x671F;&#x6570;t1 = cv.getTickCount()t2 = cv.getTickCount()# cv.getTickFrequency() &#x83B7;&#x5F97;&#x4E00;&#x79D2;&#x7684;&#x65F6;&#x949F;&#x5468;&#x671F;&#x6570;&#xFF0C;&#x5E38;&#x5E38;&#x7528;&#x65F6;&#x949F;&#x5468;&#x671F;&#x6570;&#x9664;&#x4EE5;&#x8BE5;&#x6570;&#x83B7;&#x5F97;&#x6240;&#x7528;&#x65F6;&#x95F4;f = cv.getTickFrequency()print(&apos;&#x6240;&#x7528;&#x65F6;&#x95F4;&#x4E3A;:&apos;, (t2-t1) / f) mean&#xFF0C;meanStdDev&#x65B9;&#x6CD5;12345678import cv2 as cvimg = cv.imread(&apos;lena.jpg&apos;)# cv.mean(img) &#x8BA1;&#x7B97;img&#x6BCF;&#x4E2A;&#x901A;&#x9053;&#x7684;&#x5747;&#x503C;mean = cv.mean(img)# cv.mean(img) &#x8BA1;&#x7B97;img&#x6BCF;&#x4E2A;&#x901A;&#x9053;&#x7684;&#x5747;&#x503C;&#x548C;&#x65B9;&#x5DEE;mean1, std1 = cv.meanStdDev(img) calcHist&#x65B9;&#x6CD5;1234567891011import cv2 as cvimport matplotlib.pyplot as pltimg = cv.imread(&apos;lena.jpg&apos;)color=[&apos;blue&apos;,&apos;green&apos;,&apos;red&apos;]# cv.calcHist(img, channels, mask, histSize, ranges) &#x7ED8;&#x5236;img&#x4E2D;channels&#x901A;&#x9053;&#x7684;&#x76F4;&#x65B9;&#x56FE;&#xFF0C;histSize&#x4E3A;&#x76F4;&#x65B9;&#x56FE;&#x5927;&#x5C0F;&#xFF0C;ranges&#x4E3A;&#x76F4;&#x65B9;&#x56FE;&#x7684;&#x8303;&#x56F4;for i,color_i in enumerate(color): hist = cv.calcHist([img],[i],None,[256],[0,255]) plt.plot(hist,color_i)plt.show() OpenCV&#x5E38;&#x7528;&#x56FE;&#x50CF;&#x64CD;&#x4F5C;inRange&#x65B9;&#x6CD5;12345678910111213141516import cv2 as cvimport numpy as npimg = cv.imread(&apos;lena.jpg&apos;)cv.namedWindow(&apos;origin&apos;)cv.imshow(&apos;origin&apos;, img)img_hsv = cv.cvtColor(img, cv.COLOR_BGR2HSV)# cv.inRange(img, lowerb, upperb) &#x5C06;HSV&#x8272;&#x5F69;&#x7A7A;&#x95F4;&#x4E2D;&#x7684;&#x989C;&#x8272;&#x8FC7;&#x6EE4;&#xFF0C;img&#x989C;&#x8272;&#x901A;&#x9053;&#x5148;&#x8F6C;&#x6362;&#x4E3A;HSV&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8FDB;&#x884C;&#x989C;&#x8272;&#x8FC7;&#x6EE4;res = cv.inRange(img_hsv, np.array([125, 43, 46]), np.array([155, 255, 255]))cv.namedWindow(&apos;purple&apos;)cv.imshow(&apos;purple&apos;, res)cv.waitKey(0)cv.destroyAllWindows() HSV&#x7A7A;&#x95F4;&#x989C;&#x8272;&#x5206;&#x5E03;&#x8868;&#xFF1A; $$\begin{array}{|c|c|c|c|c|c|c|c|c|c|c|} &#x989C;&#x8272; &amp; &#x9ED1; &amp; &#x7070; &amp; &#x767D; &amp; &#x7EA2; &amp; &#x6A59; &amp; &#x9EC4; &amp; &#x7EFF; &amp; &#x9752; &amp; &#x84DD; &amp; &#x7D2B; \ \hline h_{min} &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 11 &amp; 26 &amp; 35 &amp; 78 &amp; 100 &amp; 125\ h_{max} &amp; 180 &amp; 180 &amp; 180 &amp; 10 &amp; 25 &amp; 34 &amp; 77 &amp; 99 &amp; 124 &amp; 155\ s_{min} &amp; 0 &amp; 0 &amp; 0 &amp; 43 &amp; 43 &amp; 43 &amp; 43 &amp; 43 &amp; 43 &amp; 43\ s_{max} &amp; 255 &amp; 43 &amp; 30 &amp; 255 &amp; 255 &amp; 255 &amp; 255 &amp; 255 &amp; 255 &amp; 255\ v_{min} &amp; 0 &amp; 46 &amp; 221 &amp; 46 &amp; 46 &amp; 46 &amp; 46 &amp; 46 &amp; 46 &amp; 46\ v_{max} &amp; 46 &amp; 220 &amp; 255 &amp; 255 &amp; 255 &amp; 255 &amp; 255 &amp; 255 &amp; 255 &amp; 255\ \end{array}$$ equalizeHist&#x65B9;&#x6CD5;123456789101112131415import cv2 as cvimg = cv.imread(&apos;lena.jpg&apos;)img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)cv.namedWindow(&apos;origin&apos;)cv.imshow(&apos;origin&apos;, img)# cv.equalizeHist(img) &#x5BF9;img&#x56FE;&#x50CF;&#x8FDB;&#x884C;&#x76F4;&#x65B9;&#x56FE;&#x5747;&#x8861;&#x5316;img_equal = cv.equalizeHist(img)cv.namedWindow(&apos;euqal&apos;)cv.imshow(&apos;equal&apos;, img_equal)cv.waitKey(0)cv.destoryAllWindows() compareHist&#xFF0C;calcBackProject&#xFF0C;matchTemplate&#x65B9;&#x6CD5;12345# cv.compareHist(hist1, hist2, method) &#x5BF9;&#x4E24;&#x4E2A;&#x76F4;&#x65B9;&#x56FE;&#x8FDB;&#x884C;&#x6BD4;&#x8F83;&#xFF0C;method&#x53EF;&#x4EE5;&#x4E3A;cv.HISTCMP_BHATTACHARYYA&#xFF0C;cv.HISTCMP_CORREL&#x7B49;&#x7B49;# cv.calcBackProject(target, channel, hsv_hist, range) &#x4ECE;target&#x4E2D;&#x5BFB;&#x627E;&#x5904;&#x4E0E;&#x6A21;&#x677F;&#x76F8;&#x4F3C;&#x7684;&#x533A;&#x57DF;&#xFF0C;&#x5176;&#x4E2D;&#x6A21;&#x677F;&#x4E3A;HSV&#x56FE;&#x50CF;&#x7684;&#x76F4;&#x65B9;&#x56FE;&#xFF0C;channel&#x4E3A;&#x901A;&#x9053;&#x6570;&#xFF0C;range&#x4E3A;&#x76F4;&#x65B9;&#x56FE;&#x7684;&#x957F;&#x548C;&#x5BBD;# cv.matchTemplate(target, mask, method) &#x8BA1;&#x7B97;&#x56FE;&#x7247;&#x4E4B;&#x95F4;&#x7684;&#x5339;&#x914D;&#x7A0B;&#x5EA6;&#xFF0C;method&#x53EF;&#x4EE5;&#x4E3A;cv.TM_SQDIFF_NORMED&#xFF0C;cv.TM_CCOERR_NORMED&#xFF0C;cv.TM_CCOEFF_NORMED&#x7B49;&#x7B49; line&#xFF0C;rectangle&#xFF0C;circle&#x65B9;&#x6CD5;12345# cv.line(img, pt1, pt2, color, thickness) &#x5728;img&#x56FE;&#x50CF;&#x4E0A;&#x753B;&#x4E00;&#x6761;&#x76F4;&#x7EBF;&#xFF0C;&#x8D77;&#x70B9;&#x5750;&#x6807;&#x4E3A;pt1&#xFF0C;&#x7EC8;&#x70B9;&#x5750;&#x6807;&#x4E3A;pt2&#xFF0C;&#x989C;&#x8272;&#x4E3A;color&#xFF0C;&#x7EBF;&#x5BBD;&#x4E3A;thickness# cv.rectangle(img, pt1, pt2, color, thickness) &#x5728;img&#x56FE;&#x50CF;&#x4E0A;&#x753B;&#x4E00;&#x4E2A;&#x77E9;&#x5F62;&#xFF0C;&#x5DE6;&#x4E0A;&#x70B9;&#x5750;&#x6807;&#x4E3A;pt1&#xFF0C;&#x53F3;&#x4E0B;&#x70B9;&#x5750;&#x6807;&#x4E3A;pt2&#xFF0C;&#x989C;&#x8272;&#x4E3A;color&#xFF0C;&#x7EBF;&#x5BBD;&#x4E3A;thickness# cv.circle(img, center, radius, color, thickness) &#x5728;img&#x56FE;&#x50CF;&#x4E0A;&#x753B;&#x4E00;&#x4E2A;&#x5706;&#xFF0C;&#x5706;&#x5FC3;&#x5750;&#x6807;&#x4E3A;center&#xFF0C;&#x534A;&#x5F84;&#x4E3A;radius&#xFF0C;&#x989C;&#x8272;&#x4E3A;color&#xFF0C;&#x7EBF;&#x5BBD;&#x4E3A;thickness threshold&#x65B9;&#x6CD5;1234567891011121314import cv2 as cvimg = cv.imread(&apos;lena.jpg&apos;)img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)cv.namedWindow(&apos;origin&apos;)cv.imshow(&apos;origin&apos;, img)# cv.threshold(img, thresh, maxval, type) &#x5BF9;&#x7070;&#x5EA6;&#x56FE;&#x50CF;img&#x8FDB;&#x884C;&#x9608;&#x503C;&#x5206;&#x5272;&#xFF0C;thresh&#x4E3A;&#x6307;&#x5B9A;&#x6309;&#x7167;&#x9608;&#x503C;&#x5927;&#x5C0F;&#x5206;&#x5272;&#xFF0C;&#x6700;&#x5927;&#x7684;&#x7070;&#x5EA6;&#x503C;&#x4E3A;maxval&#xFF0C;&#x5206;&#x5272;&#x65B9;&#x6CD5;&#x4E3A;type&#xFF0C;&#x53EF;&#x4EE5;&#x4E3A;cv.THRESH_OTSU&#x7B49;&#x7B49;&#xFF0C;&#x5982;&#x679C;&#x6307;&#x5B9A;type&#x5219;thresh&#x5931;&#x6548;thresh, img_thresh = cv.threshold(img, 0, 255, cv.THRESH_OTSU)cv.namedWindow(&apos;thresh&apos;)cv.imshow(&apos;thresh&apos;, img_thresh)cv.waitKey(0)cv.destoryAllWindows() pyrDown&#xFF0C;pyrUp&#x65B9;&#x6CD5;12345678910111213141516171819import cv2 as cvimg = cv.imread(&apos;lena.jpg&apos;)cv.namedWindow(&apos;origin&apos;)cv.imshow(&apos;origin&apos;, img)# cv.pyrDown(img) &#x5BF9;img&#x8FDB;&#x884C;&#x4E0B;&#x91C7;&#x6837;img_down = cv.pyrDown(img)cv.namedWindow(&apos;down&apos;)cv.imshow(&apos;down&apos;, img_down)# cv.pyrUp(img) &#x5BF9;img&#x8FDB;&#x884C;&#x4E0A;&#x91C7;&#x6837;img_up = cv.pyrUp(img)cv.namedWindow(&apos;up&apos;)cv.imshow(&apos;up&apos;, img_up)cv.waitKey(0)cv.destoryAllWindows() OpenCV&#x7B97;&#x5B50;Sobel&#xFF0C;Laplacian&#xFF0C;Canny&#x65B9;&#x6CD5;123456789101112131415161718192021222324252627import cv2 as cvimg = cv.imread(&apos;lena.jpg&apos;)img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)cv.namedWindow(&apos;origin&apos;)cv.imshow(&apos;origin&apos;, img)# cv.Sobel(img, ddepth, dx, dy) &#x5BF9;img&#x8FDB;&#x884C;Sobel&#x7B97;&#x5B50;&#x6EE4;&#x6CE2;&#xFF0C;dx=1,dy=0&#x4EE3;&#x8868;&#x6C34;&#x5E73;&#x65B9;&#x5411;&#xFF0C;dx=0,dy=1&#x4EE3;&#x8868;&#x5782;&#x76F4;&#x65B9;&#x5411;img_sobel = cv.Sobel(img, -1, dx=0, dy=1)cv.namedWindow(&apos;sobel&apos;)cv.imshow(&apos;sobel&apos;, img_sobel)# cv.Laplacian(img, ddepth) &#x5C06;img&#x8FDB;&#x884C;Laplacian&#x7B97;&#x5B50;&#x6EE4;&#x6CE2;img_laplacian = cv.Laplacian(img, -1)cv.namedWindow(&apos;laplacian&apos;)cv.imshow(&apos;laplacian&apos;, img_laplacian)# cv.Canny(img, threshold1, threshold2) &#x5C06;img&#x8FDB;&#x884C;Canny&#x7B97;&#x5B50;&#x6EE4;&#x6CE2;&#xFF0C;&#x4F4E;&#x9608;&#x503C;&#x4E3A;threshold1&#xFF0C;&#x9AD8;&#x9608;&#x503C;&#x4E3A;threshold2img_canny = cv.Canny(img, 50, 150)cv.namedWindow(&apos;canny&apos;)cv.imshow(&apos;canny&apos;, img_canny)cv.waitKey(0)cv.destroyAllWindows() OpenCV&#x970D;&#x592B;&#x53D8;&#x6362;HoughLines&#xFF0C;HoughCircles&#x65B9;&#x6CD5;123# cv.HoughLines(img, rho, theta, threshold) &#x970D;&#x592B;&#x76F4;&#x7EBF;&#x68C0;&#x6D4B;&#xFF0C;&#x8FB9;&#x7F18;&#x63D0;&#x53D6;&#x540E;&#x7684;&#x56FE;&#x50CF;&#x4E3A;img&#xFF0C;&#x6B65;&#x957F;&#x4E3A;rho&#xFF0C;&#x89D2;&#x5EA6;&#x6B65;&#x957F;&#x4E3A;theta&#xFF0C;&#x9608;&#x503C;&#x4E3A;threshold&#xFF0C;&#x8FD4;&#x56DE;&#x6240;&#x6709;&#x76F4;&#x7EBF;&#x4FE1;&#x606F;# cv.HoughCircles(img, method, dp, minDist, param1, param2, minRadius, maxRadius) &#x970D;&#x592B;&#x5706;&#x68C0;&#x6D4B;&#xFF0C;&#x68C0;&#x6D4B;&#x65B9;&#x6CD5;method&#xFF0C;&#x53EF;&#x4EE5;&#x4E3A;cv.HOUGH_GRADIENT&#x7B49;&#x7B49;&#xFF0C;dp&#x4E3A;&#x7D2F;&#x52A0;&#x5668;&#x5206;&#x8FA8;&#x7387;&#x4E0E;&#x56FE;&#x50CF;&#x5206;&#x8FA8;&#x7387;&#x7684;&#x53CD;&#x6BD4;&#xFF0C;dp&#x8D8A;&#x5927;&#xFF0C;&#x7D2F;&#x52A0;&#x5668;&#x6570;&#x7EC4;&#x8D8A;&#x5C0F;&#xFF0C;minDist&#x4E3A;&#x68C0;&#x6D4B;&#x5230;&#x539F;&#x4E2D;&#x5FC3;&#x7684;&#x6700;&#x5C0F;&#x8DDD;&#x79BB;&#xFF0C;&#x5982;&#x679C;&#x592A;&#x9760;&#x8FD1;&#x5219;&#x68C0;&#x6D4B;&#x4E0D;&#x51FA;&#xFF0C;param1&#x7528;&#x4E8E;&#x8FB9;&#x7F18;&#x68C0;&#x6D4B;&#x7684;&#x9608;&#x503C;&#xFF0C;param2&#x4E3A;&#x7D2F;&#x52A0;&#x5668;&#x9608;&#x503C;&#xFF0C;&#x8D8A;&#x9AD8;&#x5219;&#x8D8A;&#x7CBE;&#x786E;&#xFF0C;&#x4F46;&#x662F;&#x5706;&#x8D8A;&#x5C11;&#xFF0C;minRadius&#x4E3A;&#x5706;&#x7684;&#x6700;&#x5C0F;&#x534A;&#x5F84;&#xFF0C;maxRadius&#x4E3A;&#x5706;&#x7684;&#x6700;&#x5927;&#x534A;&#x5F84; OpenCV&#x8F6E;&#x5ED3;&#x5904;&#x7406;findContour&#xFF0C;drawContour&#xFF0C;contourArea&#x65B9;&#x6CD5;12345# cv.findContour(img, mode, method) &#x5BFB;&#x627E;&#x8F6E;&#x5ED3;&#xFF0C;mode&#x8868;&#x793A;&#x8F6E;&#x5ED3;&#x7684;&#x68C0;&#x7D22;&#x6A21;&#x5F0F;&#xFF0C;&#x53EF;&#x4EE5;&#x4E3A;cv2.RETR_EXTERNAL&#xFF0C;cv2.RETR_TREE&#x7B49;&#x7B49;&#xFF0C;method&#x8868;&#x793A;&#x8F6E;&#x5ED3;&#x7684;&#x8FD1;&#x4F3C;&#x529E;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x4E3A;cv2.CHAIN_APPROX_NONE&#xFF0C;cv2.CHAIN_APPROX_SIMPLE&#x7B49;&#x7B49;# cv.drawContour(img, contours, contourIdx, color, thickness) &#x6839;&#x636E;&#x5BFB;&#x627E;&#x5230;&#x7684;&#x8F6E;&#x5ED3;&#xFF0C;&#x753B;&#x51FA;&#x7B2C;contourIdx&#x4E2A;&#x8F6E;&#x5ED3;&#xFF0C;&#x989C;&#x8272;&#x4E3A;color&#xFF0C;&#x7EBF;&#x5BBD;&#x4E3A;thickness# cv.contourArea(contour) &#x8BA1;&#x7B97;&#x8F6E;&#x5ED3;&#x7684;&#x9762;&#x79EF; OpenCV&#x5C0F;&#x7ED3;&#x2003;&#x2003;&#x901A;&#x8FC7;OpenCV&#xFF0C;&#x4F7F;&#x7528;&#x8005;&#x53EF;&#x4EE5;&#x4EC5;&#x9700;&#x8981;&#x51E0;&#x884C;&#x4EE3;&#x7801;&#xFF0C;&#x4FBF;&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x4E00;&#x7CFB;&#x5217;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x4EFB;&#x52A1;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x4ECB;&#x7ECD;&#x7684;&#x53EA;&#x662F;&#x5C0F;&#x90E8;&#x5206;&#x5E38;&#x89C1;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x7684;&#x7814;&#x7A76;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;OpenCV&#x662F;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x7684;&#x5E2E;&#x624B;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>常用库</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Scipy]]></title>
    <url>%2F2019%2F08%2F16%2Flibrary%20scipy%2F</url>
    <content type="text"><![CDATA[Scipy&#x4ECB;&#x7ECD;&#x2003;&#x2003;Scipy&#x662F;&#x4E00;&#x4E2A;&#x7528;&#x4E8E;&#x6570;&#x5B66;&#x3001;&#x79D1;&#x5B66;&#x3001;&#x5DE5;&#x7A0B;&#x9886;&#x57DF;&#x7684;&#x5E38;&#x7528;&#x8F6F;&#x4EF6;&#x5305;&#xFF0C;&#x53EF;&#x4EE5;&#x5904;&#x7406;&#x63D2;&#x503C;&#x3001;&#x79EF;&#x5206;&#x3001;&#x4F18;&#x5316;&#x3001;&#x5E38;&#x5FAE;&#x5206;&#x65B9;&#x7A0B;&#x6570;&#x503C;&#x89E3;&#x7684;&#x6C42;&#x89E3;&#x3001;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x3001;&#x4FE1;&#x53F7;&#x5904;&#x7406;&#x7B49;&#x95EE;&#x9898;&#x3002;&#x5B83;&#x7528;&#x4E8E;&#x6709;&#x6548;&#x8BA1;&#x7B97;Numpy&#x77E9;&#x9635;&#xFF0C;&#x4F7F;Numpy&#x548C;Scipy&#x534F;&#x540C;&#x5DE5;&#x4F5C;&#xFF0C;&#x9AD8;&#x6548;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#x3002; Scipy&#x7279;&#x70B9;&#x2003;&#x2003;Scipy&#x652F;&#x6301;&#x5927;&#x591A;&#x6570;&#x5DE5;&#x7A0B;&#x6570;&#x5B66;&#x8FD0;&#x7B97;&#x3002;&#x2003;&#x2003;Scipy&#x6BCF;&#x4E00;&#x4E2A;&#x5B50;&#x6A21;&#x5757;&#x90FD;&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x4E00;&#x7C7B;&#x529F;&#x80FD;&#x3002;&#x2003;&#x2003;Scipy&#x4E2D;&#x7684;&#x51FD;&#x6570;&#x7C7B;&#x4F3C;&#x4E8E;MATLAB&#x4E2D;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x4F7F;&#x7528;&#x65B9;&#x4FBF;&#x3002; Scipy&#x5E94;&#x7528;Scipy&#x5E38;&#x6570;&#x6A21;&#x5757;12345678910111213from scipy import constants as C# C.c &#x5149;&#x901F;&#x5E38;&#x6570;C.c# C.h &#x666E;&#x6717;&#x514B;&#x5E38;&#x6570;C.h# C.mile &#x82F1;&#x91CC;C.mile# C.pi &#x5706;&#x5468;&#x7387;&#x3C0;C.pi Scipy&#x7279;&#x6B8A;&#x51FD;&#x6570;&#x6A21;&#x5757;gamma&#xFF0C;gammaln&#x65B9;&#x6CD5;1234567from scipy import special as S# S.gamma(n) &#x8BA1;&#x7B97;&#x393;(n)&#x7684;&#x503C;S.gamma(4)# S.gammaln(n) &#x8BA1;&#x7B97;ln|&#x393;(n)|&#x7684;&#x503C;&#xFF0C;&#x907F;&#x514D;&#x393;(n)&#x8FC7;&#x5927;S.gammaln(4) log1p&#x65B9;&#x6CD5;123456from scipy import special as Simport numpy as np# S.log1p(n) &#x8BA1;&#x7B97;ln(n+1)&#x7684;&#x503C;&#xFF0C;&#x4F7F;&#x5176;&#x53EF;&#x4EE5;&#x8BA1;&#x7B97;&#x5F88;&#x5C0F;&#x7684;&#x6570;S.log1p(np.e - 1)S.log1p(1e-10) Scipy&#x62DF;&#x5408;&#x4F18;&#x5316;&#x6A21;&#x5757;fsolve&#x65B9;&#x6CD5;123456789from scipy import optimize as Oimport mathdef f(x): x0, x1, x2 = x.tolist() return [5 * x1 + 3, 4 * x0 ** 2 - 2 * math.sin(x1 * x2), x1 * x2 - 1.5]# O.fsolve(f, init) &#x6C42;&#x975E;&#x7EBF;&#x6027;&#x65B9;&#x7A0B;&#x7EC4;&#x7684;&#x89E3;&#xFF0C;f&#x4E3A;&#x65B9;&#x7A0B;&#x51FD;&#x6570;&#xFF0C;init&#x4E3A;&#x521D;&#x59CB;&#x8FED;&#x4EE3;&#x503C;result = O.fsolve(f, [1, 1, 1]) $$ \left {\begin{aligned} 5x_1 + 3 &amp; = 0 \ 4{x_0}^2 -2\sin{x_1 \cdot x_2} &amp; = 0 \ x_1 \cdot x_2 -1.5 &amp;= 0 \end{aligned} \right.$$ leastsq&#x65B9;&#x6CD5;1234567891011121314151617181920from scipy import optimize as Oimport numpy as npimport matplotlib.pyplot as pltx = np.array([8.19,2.72,6.39,8.71,4.7,2.66,3.78])y = np.array([7.01,2.78,6.47,6.71,4.1,4.23,4.05])def residuals(p): k, b = p return y - (k * x + b)r = O.leastsq(residuals, [1,0])k, b = r[0]y_new = x * k + bprint(&apos;k=&apos;, k, &apos;b=&apos;, b)plt.scatter(x, y)plt.plot(x, y_new)plt.show() Scipy&#x7EBF;&#x6027;&#x4EE3;&#x6570;&#x6A21;&#x5757;solve&#x65B9;&#x6CD5;12345678from scipy import linalg as Limport numpy as npa = np.array([[2, 2, -1], [1, -2, 4], [5, 8, -1]])b = np.array([[6], [3], [27]])# L.solve(A, b) &#x6C42;&#x7EBF;&#x6027;&#x65B9;&#x7A0B;&#x7EC4;Ax = b&#x7684;&#x89E3;x = L.solve(a, b) eig&#xFF0C;svd&#x65B9;&#x6CD5;12345678910from scipy import linalg as Limport numpy as npa = np.array([[-2, 1, 1], [0, 2, 0], [-4, 1, 3]])# L.eig(array) &#x6C42;array&#x7684;&#x7279;&#x5F81;&#x503C;&#x548C;&#x7279;&#x5F81;&#x5411;&#x91CF;m, x = L.eig(a)# L.svd(array) &#x6C42;array&#x7684;&#x5947;&#x5F02;&#x503C;&#x5206;&#x89E3;u, sigma, v = L.svd(a) Scipy&#x7EDF;&#x8BA1;&#x6A21;&#x5757;norm&#x7C7B;&#xFF0C;stats&#xFF0C;rvs&#x65B9;&#x6CD5;123456789101112131415161718from scipy import stats as ST# ST.norm(loc=0, scale=1) &#x83B7;&#x53D6;&#x504F;&#x79FB;&#x4E3A;loc(&#x9ED8;&#x8BA4;&#x4E3A;0)&#xFF0C;&#x6807;&#x51C6;&#x5DEE;&#x4E3A;scale(&#x9ED8;&#x8BA4;&#x4E3A;1)&#x7684;&#x6B63;&#x6001;&#x5206;&#x5E03;(&#x8FD8;&#x53EF;&#x4EE5;&#x5B9A;&#x4E49;&#x5176;&#x4ED6;&#x7684;&#x5206;&#x5E03;)norm_ = ST.norm(loc=1, scale=2)# obj.stats() &#x83B7;&#x53D6;obj&#x5206;&#x5E03;&#x7684;&#x671F;&#x671B;&#x548C;&#x65B9;&#x5DEE;mean_norm, var_norm = norm_.stats()# obj.rvs(size=shape) &#x83B7;&#x53D6;&#x5927;&#x5C0F;&#x4E3A;shape&#x7684;obj&#x5206;&#x5E03;&#x7684;&#x968F;&#x673A;&#x62BD;&#x6837;x = norm_.rvs(size=(100, 100))mean_x = np.mean(x)std_x = np.std(x)# obj.pdf(x) &#x83B7;&#x53D6;x&#x5904;&#x7684;&#x6982;&#x7387;&#x5BC6;&#x5EA6;&#x51FD;&#x6570;pdf_1 = norm_.pdf(1)# obj.cdf(x) &#x83B7;&#x53D6;x&#x5904;&#x7684;&#x5206;&#x5E03;&#x51FD;&#x6570;cdf_1 = norm_.cdf(1) rv_discrete&#x7C7B;&#xFF0C;stats&#xFF0C;rvs&#x65B9;&#x6CD5;1234567891011121314151617from scipy import stats as ST# ST.rv_discrete(values=(x, p)) &#x81EA;&#x5B9A;&#x4E49;&#x79BB;&#x6563;&#x6982;&#x7387;&#x5206;&#x5E03;&#xFF0C;x&#x4E3A;&#x53EF;&#x80FD;&#x7684;&#x53D6;&#x503C;&#xFF0C;p&#x4E3A;&#x5BF9;&#x5E94;&#x7684;&#x6982;&#x7387;discrete_ = ST.rv_discrete(values=([1, 2, 3, 4, 5, 6], [0.75, 0.05, 0.05, 0.05, 0.05, 0.05]))discrete_.stats()x = discrete_.rvs(size=(100, 100))mean_x = np.mean(x)var_x = np.var(x)plt.plot(x, y)# plt.annotate(formulation, xy, xytext, fontsize, arrowprops) &#x5728;xy&#x9644;&#x8FD1;&#x6DFB;&#x52A0;&#x6CE8;&#x89E3;formulation&#xFF0C;xytext&#x4E3A;&#x6CE8;&#x89E3;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;fontsize&#x4E3A;&#x6CE8;&#x89E3;&#x7684;&#x5927;&#x5C0F;&#xFF0C;arrowprops&#x4E3A;&#x7BAD;&#x5934;&#x7C7B;&#x578B;plt.annotate(r&apos;$x^2-0.5$&apos;, (0, -0.5), xytext=(+0.25, 0), arrowprops=dict(arrowstyle=&apos;-&gt;&apos;, connectionstyle=&apos;arc3, rad=0.2&apos;))plt.show() binom.pmf&#x65B9;&#x6CD5;1234from scipy import stats as ST# ST.binom.pmf(list, n, p) &#x8FDB;&#x884C;n&#x6B21;&#x4E8C;&#x9879;&#x5206;&#x5E03;&#x5B9E;&#x9A8C;&#xFF0C;&#x51FA;&#x73B0;&#x7684;&#x6982;&#x7387;&#x4E3A;p&#xFF0C;&#x8BA1;&#x7B97;&#x51FA;&#x73B0;list&#x4E2D;&#x5BF9;&#x5E94;&#x503C;&#x7684;&#x6982;&#x7387;x = ST.binom.pmf([0,1,2,3,4], 3, 0.8) Scipy&#x79EF;&#x5206;&#x6A21;&#x5757;quad&#x65B9;&#x6CD5;123456from scipy import integrate as II.quad(f, min_lim, max_lim) &#x8BA1;&#x7B97;&#x51FD;&#x6570;f&#x7684;&#x79EF;&#x5206;(f&#x53EF;&#x4EE5;&#x662F;&#x81EA;&#x5B9A;&#x4E49;&#x51FD;&#x6570;&#x4E5F;&#x53EF;&#x4EE5;&#x4E3A;lambda&#x8868;&#x8FBE;&#x5F0F;)&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x8BA1;&#x7B97;&#x4EA7;&#x751F;&#x7684;&#x8BEF;&#x5DEE;&#xFF0C;&#x79EF;&#x5206;&#x4E0B;&#x9650;&#x4E3A;min_lim&#xFF0C;&#x79EF;&#x5206;&#x4E0A;&#x9650;&#x4E3A;max_limpi_half, err = I.quad(lambda x:(1 - x ** 2) ** 0.5, -1, 1)print(&apos;pi:&apos;, pi_half * 2, &apos;err:&apos;, err) $$\int_{-1}^{1} \sqrt{1-x^2}\, dx = \frac{\pi}{2}$$ dblquad&#xFF0C;tplquad&#x65B9;&#x6CD5;12345678910from scipy import integrate as If = lambda x, y : (1 - x ** 2 - y ** 2) ** 0.5f_y = lambda x : (1 - x ** 2) ** 0.5# I.dblquad(f, x_min_lim, x_max_lim, y_min_lim, y_max_lim) &#x8BA1;&#x7B97;&#x51FD;&#x6570;f&#x7684;&#x4E8C;&#x91CD;&#x79EF;&#x5206;&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x8BA1;&#x7B97;&#x4EA7;&#x751F;&#x7684;&#x8BEF;&#x5DEE;&#xFF0C;x&#x79EF;&#x5206;&#x4E0B;&#x9650;&#x4E3A;x_min_lim&#xFF0C;&#x79EF;&#x5206;&#x4E0A;&#x9650;&#x4E3A;x_max_lim&#xFF0C;y&#x79EF;&#x5206;&#x4E0B;&#x9650;&#x4E3A;y_min_lim&#xFF0C;&#x79EF;&#x5206;&#x4E0A;&#x9650;&#x4E3A;y_max_limres, err = I.dblquad(lambda x, y : (1 - x ** 2 - y ** 2) ** 0.5, -1, 1, lambda x : -1 * f_y(x), f_y)print(&apos;res:&apos;, res * 1.5, &apos;err:&apos;, err)# I.tplquad(f, x_min_lim, x_max_lim, y_min_lim, y_max_lim, z_min_lim, z_max_lim) &#x8BA1;&#x7B97;&#x51FD;&#x6570;f&#x7684;&#x4E09;&#x91CD;&#x79EF;&#x5206;&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x8BA1;&#x7B97;&#x4EA7;&#x751F;&#x7684;&#x8BEF;&#x5DEE;&#xFF0C;x&#x79EF;&#x5206;&#x4E0B;&#x9650;&#x4E3A;x_min_lim&#xFF0C;&#x79EF;&#x5206;&#x4E0A;&#x9650;&#x4E3A;x_max_lim&#xFF0C;y&#x79EF;&#x5206;&#x4E0B;&#x9650;&#x4E3A;y_min_lim&#xFF0C;&#x79EF;&#x5206;&#x4E0A;&#x9650;&#x4E3A;y_max_lim&#xFF0C;z&#x79EF;&#x5206;&#x4E0B;&#x9650;&#x4E3A;z_min_lim&#xFF0C;&#x79EF;&#x5206;&#x4E0A;&#x9650;&#x4E3A;z_max_lim $$\int_{-1}^{1} \int_{-\sqrt{1-x^2}}^{\sqrt{1-x^2}} \sqrt{1-x^2-y^2}\, dydx = \frac{2}{3}\pi$$ Scipy&#x63D2;&#x503C;&#x6A21;&#x5757;interp1d&#xFF0C;interp2d&#x65B9;&#x6CD5;123456789101112131415161718192021from scipy import interpolate as IPimport numpy as npimport matplotlib.pyplot as pltx = np.linspace(0, 2 * np.pi, 11)y = np.sin(x)x_new = np.linspace(0, 2 * np.pi, 51)# IP.interp1d(x, y, kind) &#x5BF9;x&#xFF0C;y&#x8FDB;&#x884C;&#x4E00;&#x7EF4;&#x63D2;&#x503C;&#xFF0C;kind&#x4E3A;&#x63D2;&#x503C;&#x51FD;&#x6570;&#x7C7B;&#x578B;&#xFF0C;&#x53EF;&#x4EE5;&#x4E3A;&apos;nearest&apos;&#x6700;&#x8FD1;&#x90BB;&#x63D2;&#x503C;&#xFF0C;&apos;cubic&apos;&#x7ACB;&#x65B9;&#x63D2;&#x503C;&#x7B49;&#x7B49;f = IP.interp1d(x, y, kind=&apos;cubic&apos;)y_new = f(x_new)plt.subplot(121)plt.plot(x, y, label=&apos;origin&apos;)plt.subplot(122)plt.plot(x_new, y_new, label=&apos;new&apos;)plt.legend()plt.show()# IP.interp2d(x, y, z, kind) &#x5BF9;x&#xFF0C;y&#xFF0C;z&#x8FDB;&#x884C;&#x4E8C;&#x7EF4;&#x63D2;&#x503C;&#xFF0C;kind&#x540C;interp2d UnivariateSpline&#x65B9;&#x6CD5;12345678910111213141516from scipy import interpolate as IPimport numpy as npimport matplotlib.pyplot as pltx = np.linspace(0, 2 * np.pi, 11)y = np.sin(x)x_new = np.linspace(-0.5 * np.pi, 2.5 * np.pi, 51)# IP.interp1d(x, y, w, k=3, s=None) &#x5BF9;x&#xFF0C;y&#x8FDB;&#x884C;&#x4E00;&#x7EF4;&#x63D2;&#x503C;&#xFF0C;w&#x4E3A;&#x6BCF;&#x4E2A;&#x6570;&#x636E;&#x7684;&#x6743;&#x503C;&#xFF0C;k&#x4E3A;&#x63D2;&#x503C;&#x7684;&#x9636;&#x6570;(&#x9ED8;&#x8BA4;&#x4E3A;3)&#xFF0C;s&#x4E3A;&#x66F2;&#x7EBF;&#x7684;&#x5E73;&#x6ED1;&#x7CFB;&#x6570;(&#x9ED8;&#x8BA4;&#x4E3A;None)&#xFF0C;&#x548C;interp1d&#x4E0D;&#x540C;&#x7684;&#x662F;&#xFF0C;&#x8BE5;&#x65B9;&#x6CD5;&#x652F;&#x6301;&#x5916;&#x63A8;&#x64CD;&#x4F5C;&#xFF0C;&#x5373;&#x53EF;&#x4EE5;&#x63D2;&#x503C;&#x8FB9;&#x7F18;&#x70B9;&#x4E4B;&#x5916;&#x7684;&#x90E8;&#x5206;&#x3002;y_new=ip.UnivariateSpline(x, y)(x_new)plt.subplot(121)plt.plot(x,y,label=&apos;origin&apos;)plt.subplot(122)plt.plot(x_new,y_new,label=&apos;new&apos;)plt.show() Scipy&#x4FE1;&#x53F7;&#x5904;&#x7406;&#x6A21;&#x5757;medfilt&#x65B9;&#x6CD5;123456789from scipy import signal as SPimport numpy as npnp.random.seed(1)x =np.random.randint(0, 9, (5, 5))# SP.medfilt(array, kernel_size) &#x5BF9;array&#x8FDB;&#x884C;&#x4E2D;&#x503C;&#x6EE4;&#x6CE2;&#xFF0C;&#x63A9;&#x6A21;&#x7684;&#x5927;&#x5C0F;&#x4E3A;kernel_sizey = SP.medfilt(x, 3) order_filter&#x65B9;&#x6CD5;1234567891011from scipy import signal as SPimport numpy as npnp.random.seed(1)x =np.random.randint(0, 9, (5, 5))# SP.order_filter(array, domain, rank) &#x5BF9;array&#x8FDB;&#x884C;&#x6A21;&#x677F;&#x4E3A;domain&#x7684;&#x6392;&#x5E8F;&#x6EE4;&#x6CE2;&#xFF0C;rank&#x4E3A;&#x7B2C;&#x51E0;&#x5C0F;&#x7684;&#x503C;&#xFF0C;rank=0&#x4EE3;&#x8868;&#x6700;&#x5C0F;&#x503C;&#x6EE4;&#x6CE2;&#xFF0C;rank=domain.size-1&#x4EE3;&#x8868;&#x6700;&#x5927;&#x503C;&#x6EE4;&#x6CE2;y_min = SP.order_filter(x, np.ones((5, 5)), 0)y_mid = SP.order_filter(x, np.ones((5, 5)), 12)y_max = SP.order_filter(x, np.ones((5, 5)), 24) iirdesign&#xFF0C;lfilter&#x65B9;&#x6CD5;1234567891011121314151617181920212223242526272829303132333435363738394041424344from scipy import signal as SPimport numpy as npimport matplotlib.pyplot as pltfs = 100t = np.arange(0, 2, 1 / fs)y = np.sin(2 * np.pi * 2 * t) + np.sin(2 * np.pi * 4 * t) + np.sin(2 * np.pi * 6 * t)# SP.iirdesign([pass_low, pass_high], [stop_loss, stop_high], gp, gs) &#x8BBE;&#x8BA1;IIR&#x6EE4;&#x6CE2;&#x5668;&#xFF0C;&#x901A;&#x5E26;&#x9891;&#x7387;&#x4E3A;[pass_low &#xD7; f0, pass_high &#xD7; f0]&#xFF0C;&#x963B;&#x5E26;&#x9891;&#x7387;&#x4E3A;[0, stop_loss &#xD7; f0] &#x222A; [stop_high &#xD7; f0, &#x221E;]&#xFF0C;&#x5176;&#x4E2D;f0&#x4E3A;&#x91C7;&#x6837;&#x9891;&#x7387;&#x7684;&#x4E00;&#x534A;&#xFF0C;gp&#x4E3A;&#x901A;&#x5E26;&#x7684;&#x6700;&#x5927;&#x589E;&#x76CA;&#x8870;&#x51CF;&#xFF0C;gs&#x4E3A;&#x963B;&#x5E26;&#x7684;&#x6700;&#x5C0F;&#x589E;&#x76CA;&#x8870;&#x51CF;&#xFF0C;&#x8FD4;&#x56DE;&#x503C;&#x4E3A;&#x6EE4;&#x6CE2;&#x5668;&#x5206;&#x5B50;&#x548C;&#x5206;&#x6BCD;&#x7684;&#x7CFB;&#x6570;b_1, a_1 = SP.iirdesign([0.05, 0.2], [0.01, 0.5], 2, 40)b_2, a_2 = SP.iirdesign([0.1, 0.2], [0.01, 0.5], 2, 40)# SP.lfilter(b, a, x) &#x8BA1;&#x7B97;x&#x7ECF;&#x8FC7;b&#xFF0C;a&#x6EE4;&#x6CE2;&#x5668;&#x7684;&#x7ED3;&#x679C;out_1 = SP.lfilter(b_1, a_1, y)out_2 = SP.lfilter(b_2, a_2, y)plt.subplot(321)plt.plot(t, y, label=&apos;origin&apos;)plt.legend()plt.subplot(322)plt.plot(np.abs(np.fft.fft(y)), label=&apos;origin fft&apos;)plt.xlim((0, fs / 2))plt.legend()plt.subplot(323)plt.plot(t, out_1, label=&apos;out_1&apos;)plt.legend()plt.subplot(324)plt.plot(np.abs(np.fft.fft(out_1)), label=&apos;out_1 fft&apos;)plt.xlim((0, fs / 2))plt.legend()plt.subplot(325)plt.plot(t, out_2, label=&apos;out_2&apos;)plt.legend()plt.subplot(326)plt.plot(np.abs(np.fft.fft(out_2)), label=&apos;out_2 fft&apos;)plt.xlim((0, fs / 2))plt.legend()plt.show() Scipy&#x56FE;&#x50CF;&#x5904;&#x7406;&#x6A21;&#x5757;&#x2003;&#x2003;Scipy.ndimage &#x662F;&#x4E00;&#x4E2A;&#x5904;&#x7406;&#x591A;&#x7EF4;&#x56FE;&#x50CF;&#x7684;&#x51FD;&#x6570;&#x5E93;&#xFF0C;&#x5176;&#x4E2D;&#x53C8;&#x5305;&#x62EC;&#x4EE5;&#x4E0B;&#x6A21;&#x5757;&#x3002;&#x2003;&#x2003;filters &#x56FE;&#x50CF;&#x6EE4;&#x6CE2;&#x5668;&#x51FD;&#x6570;&#x5E93;&#x2003;&#x2003;fourier &#x5085;&#x91CC;&#x53F6;&#x53D8;&#x6362;&#x51FD;&#x6570;&#x5E93;&#x2003;&#x2003;interpolation &#x56FE;&#x50CF;&#x53D8;&#x6362;&#x51FD;&#x6570;&#x5E93;&#x2003;&#x2003;morphology &#x5F62;&#x6001;&#x5B66;&#x64CD;&#x4F5C;&#x51FD;&#x6570;&#x5E93; &#x2003;&#x2003;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x6709;&#x8BB8;&#x591A;&#x66F4;&#x5F3A;&#x5927;&#x7684;&#x5E93;&#xFF0C;&#x5982;opencv&#xFF0C;scikit-image&#x5E93;&#xFF0C;&#x5728;&#x6B64;&#x4E0D;&#x505A;&#x8FC7;&#x591A;&#x4ECB;&#x7ECD;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x8003;opencv&#x3002; Scipy&#x5C0F;&#x7ED3;&#x2003;&#x2003;&#x901A;&#x8FC7;Scipy&#xFF0C;&#x4F7F;&#x7528;&#x8005;&#x53EF;&#x4EE5;&#x4EC5;&#x9700;&#x8981;&#x51E0;&#x884C;&#x4EE3;&#x7801;&#xFF0C;&#x4FBF;&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x4E00;&#x7CFB;&#x5217;&#x5DE5;&#x7A0B;&#x5E94;&#x7528;&#x3002;&#x5728;&#x6570;&#x636E;&#x5206;&#x6790;&#xFF0C;&#x5B9E;&#x9645;&#x9879;&#x76EE;&#x4E2D;&#xFF0C;&#x5E38;&#x5E38;&#x9700;&#x8981;&#x5BF9;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x63D2;&#x503C;&#x3001;&#x62DF;&#x5408;&#x3001;&#x4F18;&#x5316;&#xFF0C;&#x9700;&#x8981;&#x501F;&#x52A9;Scipy&#x79D1;&#x5B66;&#x8BA1;&#x7B97;&#x5E93;&#x7684;&#x5E2E;&#x52A9;&#xFF0C;&#x56E0;&#x6B64;Scipy&#x662F;&#x5DE5;&#x7A0B;&#x7814;&#x7A76;&#x4E2D;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x7684;&#x5E2E;&#x624B;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>常用库</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Matplotlib]]></title>
    <url>%2F2019%2F08%2F15%2Flibrary%20matplotlib%2F</url>
    <content type="text"><![CDATA[Matplotlib&#x4ECB;&#x7ECD;&#x2003;&#x2003;Matplotlib&#x662F;python&#x7ED8;&#x56FE;&#x9886;&#x57DF;&#x4F7F;&#x7528;&#x6700;&#x5E7F;&#x6CDB;&#x7684;&#x5E93;&#x3002;&#x5B83;&#x80FD;&#x8BA9;&#x4F7F;&#x7528;&#x8005;&#x5F88;&#x8F7B;&#x677E;&#x5730;&#x5C06;&#x6570;&#x636E;&#x56FE;&#x5F62;&#x5316;&#xFF0C;&#x5E76;&#x4E14;&#x63D0;&#x4F9B;&#x591A;&#x6837;&#x5316;&#x7684;&#x8F93;&#x51FA;&#x683C;&#x5F0F;&#x3002; Matplotlib&#x7279;&#x70B9;&#x2003;&#x2003;Matplotlib&#x652F;&#x6301;LaTeX &#x7684;&#x516C;&#x5F0F;&#x63D2;&#x5165;&#x3002;&#x2003;&#x2003;Matplotlib&#x652F;&#x6301;&#x4EA4;&#x4E92;&#x5F0F;&#x548C;&#x975E;&#x4EA4;&#x4E92;&#x5F0F;&#x7ED8;&#x56FE;&#x3002;&#x2003;&#x2003;Matplotlib&#x53EF;&#x5C06;&#x56FE;&#x50CF;&#x4FDD;&#x5B58;&#x6210;PNG&#x7B49;&#x591A;&#x79CD;&#x5F62;&#x5F0F;&#x3002;&#x2003;&#x2003;Matplotlib&#x652F;&#x6301;&#x66F2;&#x7EBF;(&#x6298;&#x7EBF;)&#x56FE;&#x3001;&#x6761;&#x5F62;&#x56FE;&#x3001;&#x67F1;&#x72B6;&#x56FE;&#x3001;&#x997C;&#x56FE;&#x3002;&#x2003;&#x2003;Matplotlib&#x7C7B;&#x4F3C;&#x4E8E;MATLAB&#x7684;&#x7ED8;&#x56FE;&#x51FD;&#x6570;&#xFF0C;&#x4E0A;&#x624B;&#x8F83;&#x4E3A;&#x7B80;&#x5355;&#x3002; Matplotlib&#x5E94;&#x7528;Matplotlib&#x7ED8;&#x5236;&#x4E8C;&#x7EF4;&#x76F4;&#x7EBF;1234567891011import matplotlib.pyplot as pltimport numpy as npx = np.linspace(-1, 1, 21)y = np.power(x, 2) - 0.5# plt.plot(x, y, color, linewidth, linestyle, label, alpha, marker=None) &#x753B;&#x51FA;x-y&#x4E8C;&#x7EF4;&#x56FE;&#x5F62;&#xFF0C;color&#x6307;&#x989C;&#x8272;&#xFF0C;linewidth&#x6307;&#x7EBF;&#x5BBD;&#xFF0C;linestyle&#x6307;&#x7EBF;&#x7684;&#x5F62;&#x5F0F;&#xFF0C;label&#x6307;&#x56FE;&#x5F62;&#x7684;&#x6807;&#x7B7E;&#xFF0C;alpha&#x6307;&#x900F;&#x660E;&#x5EA6;&#xFF0C;marker&#x6307;&#x8BE5;&#x70B9;&#x7684;&#x5F62;&#x72B6;plt.plot(x, y, color=&apos;red&apos;, linewidth=0.5, alpha=0.8)# plt.show() &#x663E;&#x793A;&#x6240;&#x753B;&#x7684;&#x56FE;&#x5F62;plt.show() matplotlib&#x4FEE;&#x9970;&#x56FE;&#x5F62;style.use&#x65B9;&#x6CD5;123456789101112import matplotlib.pyplot as pltimport numpy as np# plt.style.use(option) &#x8BBE;&#x7F6E;&#x7A97;&#x53E3;&#x98CE;&#x683C;&#xFF0C;option&#x53EF;&#x9009;&apos;dark_background&apos;&#xFF0C;&apos;bmh&apos;&#xFF0C;&apos;grayscale&apos;&#xFF0C;&apos;ggplot&apos;&#xFF0C;&apos;fivethirtyeight&apos;plt.style.use(&apos;ggplot&apos;)x = np.linspace(-1, 1, 21)y = np.power(x, 2) - 0.5plt.plot(x, y)plt.show() grid&#x65B9;&#x6CD5;123456789101112import matplotlib.pyplot as pltimport numpy as npx = np.linspace(-1, 1, 21)y = np.power(x, 2) - 0.5plt.plot(x, y)# plt.grid(b=True, color, linewidth, linestyle) &#x8BBE;&#x7F6E;&#x5750;&#x6807;&#x7CFB;&#x7F51;&#x683C;&#xFF0C;b=True&#x8868;&#x793A;&#x663E;&#x793A;&#x7F51;&#x683C;(&#x9ED8;&#x8BA4;&#x4E3A;True)&#xFF0C;False&#x8868;&#x793A;&#x5173;&#x95ED;&#x7F51;&#x683C;&#xFF0C;color&#x6307;&#x7F51;&#x683C;&#x7684;&#x989C;&#x8272;&#xFF0C;linewidth&#x6307;&#x7F51;&#x683C;&#x7684;&#x5BBD;&#x5EA6;&#xFF0C;linestyle&#x6307;&#x7F51;&#x683C;&#x7684;&#x7C7B;&#x578B;plt.grid()plt.show() grid&#x65B9;&#x6CD5;123456789101112import matplotlib.pyplot as pltimport numpy as npx = np.linspace(-1, 1, 21)y = np.power(x, 2) - 0.5plt.plot(x, y)# plt.grid(b=True, color, linewidth, linestyle) &#x8BBE;&#x7F6E;&#x5750;&#x6807;&#x7CFB;&#x7F51;&#x683C;&#xFF0C;b=True&#x8868;&#x793A;&#x663E;&#x793A;&#x7F51;&#x683C;(&#x9ED8;&#x8BA4;&#x4E3A;True)&#xFF0C;False&#x8868;&#x793A;&#x5173;&#x95ED;&#x7F51;&#x683C;&#xFF0C;color&#x6307;&#x7F51;&#x683C;&#x7684;&#x989C;&#x8272;&#xFF0C;linewidth&#x6307;&#x7F51;&#x683C;&#x7684;&#x5BBD;&#x5EA6;&#xFF0C;linestyle&#x6307;&#x7F51;&#x683C;&#x7684;&#x7C7B;&#x578B;plt.grid()plt.show() axis&#x65B9;&#x6CD5;123456789101112import matplotlib.pyplot as pltimport numpy as npx = np.linspace(-3, 3, 31)y = x ** 2plt.plot(x, y)# plt.axis(b) &#x8BBE;&#x7F6E;&#x5750;&#x6807;&#x7CFB;&#x7F51;&#x683C;&#xFF0C;b=&apos;on&apos;&#x8868;&#x793A;&#x663E;&#x793A;&#x5750;&#x6807;&#x8F74;(&#x9ED8;&#x8BA4;&#x4E3A;&apos;on&apos;)&#xFF0C;&apos;off&apos;&#x8868;&#x793A;&#x5173;&#x95ED;&#x5750;&#x6807;&#x8F74;&#xFF0C;&apos;equal&apos;&#x6307;&#x5750;&#x6807;&#x8F74;&#x6BD4;&#x4F8B;&#x76F8;&#x540C;&#xFF0C;&apos;auto&apos;&#x81EA;&#x52A8;&#x8C03;&#x6574;&#x5750;&#x6807;&#x8F74;&#x6BD4;&#x4F8B;plt.axis(&apos;equal&apos;)plt.show() subplot&#x65B9;&#x6CD5;123456789101112131415161718192021222324252627import matplotlib.pyplot as pltimport numpy as npx = np.linspace(-3, 3, 31)y_1 = xy_2 = x ** 2y_3 = np.exp(x)y_4 = np.log(x)# plt.subplot(r, c, n) &#x5C06;&#x4E00;&#x4E2A;&#x7A97;&#x53E3;&#x5206;&#x6210;r&#x884C;c&#x5217;&#xFF0C;&#x5F53;&#x524D;&#x5B50;&#x7A97;&#x53E3;&#x5904;&#x4E8E;&#x7B2C;n&#x4E2A;plt.subplot(2,2,1)plt.plot(x, y_1, label=&apos;$x$&apos;)plt.legend()plt.subplot(2,2,2)plt.plot(x, y_2, label=&apos;$x^2$&apos;)plt.legend()plt.subplot(2,2,3)plt.plot(x, y_3, label=&apos;$e^x$&apos;)plt.legend()plt.subplot(2,2,4)plt.plot(x, y_4, label=&apos;$log(x)$&apos;)plt.legend()plt.show() subplot2grid&#x65B9;&#x6CD5;123456789101112131415161718192021222324252627import matplotlib.pyplot as pltimport numpy as npx = np.linspace(-3, 3, 31)y_1 = xy_2 = x ** 2y_3 = np.exp(x)y_4 = np.log(x)# plt.subplot2grid((r, c), (begin, end), colspan=1, rowspan=1) &#x5C06;&#x4E00;&#x4E2A;&#x7A97;&#x53E3;&#x5206;&#x6210;r&#x884C;c&#x5217;&#xFF0C;&#x5F53;&#x524D;&#x7A97;&#x53E3;&#x7684;&#x4F4D;&#x7F6E;&#x5728;(begin, end)&#xFF0C;&#x6A2A;&#x8DE8;m&#x4E2A;&#x5355;&#x4F4D;(&#x9ED8;&#x8BA4;&#x4E3A;1&#x4E2A;&#x5355;&#x4F4D;)&#xFF0C;&#x7EB5;&#x8DE8;n&#x4E2A;&#x5355;&#x4F4D;(&#x9ED8;&#x8BA4;&#x4E3A;1&#x4E2A;&#x5355;&#x4F4D;)plt.subplot2grid((3, 2),(0, 0), colspan=2, rowspan=1)plt.plot(x, y_1, label=&apos;$x$&apos;)plt.legend()plt.subplot2grid((3, 2), (1, 0))plt.plot(x, y_2, label=&apos;$x^2$&apos;)plt.legend()plt.subplot2grid((3, 2), (1, 1))plt.plot(x, y_3, label=&apos;$e^x$&apos;)plt.legend()plt.subplot2grid((3, 2), (2, 0), colspan=2, rowspan=1)plt.plot(x, y_4, label=&apos;$log(x)$&apos;)plt.legend()plt.show() xlim&#xFF0C;ylim&#x65B9;&#x6CD5;12345678910111213import matplotlib.pyplot as pltimport numpy as npx = np.linspace(-1, 1, 21)y = np.power(x, 2) - 0.5plt.plot(x, y)# plt.xlim((x_min, x_max))&#xFF0C;plt.ylim((y_min, y_max)) &#x9650;&#x5236;x&#xFF0C;y&#x5750;&#x6807;&#x8F74;&#x7684;&#x8303;&#x56F4;plt.xlim((-1.5, 1.5))plt.ylim((-1, 1))plt.show() xlabel&#xFF0C;ylabel&#x65B9;&#x6CD5;12345678910111213import matplotlib.pyplot as pltimport numpy as npx = np.linspace(-1, 1, 21)y = np.power(x, 2) - 0.5plt.plot(x, y)# plt.xlabel(x_describe)&#xFF0C;plt.ylabel(y_describe) &#x8BBE;&#x7F6E;x&#xFF0C;y&#x7684;&#x5750;&#x6807;&#x8F74;&#x6807;&#x7B7E;plt.xlabel(&apos;x&apos;)plt.ylabel(&apos;x^2-0.5&apos;)plt.show() xticks&#xFF0C;yticks&#x65B9;&#x6CD5;123456789101112131415import matplotlib.pyplot as pltimport numpy as npnp.random.seed(2)x = np.arange(1,13)y = np.random.randint(50, 100, 12)plt.plot(x, y)# plt.xticks(list_x)&#xFF0C;plt.yticks(list_y) &#x8BBE;&#x7F6E;x&#xFF0C;y&#x7684;&#x89D2;&#x6807;&#xFF0C;&#x652F;&#x6301;latex&#x683C;&#x5F0F;&#x3002;plt.xticks(x)plt.yticks([60, 80, 90, 100], [r&apos;$bad$&apos;, r&apos;$good$&apos;, r&apos;$nice$&apos;, r&apos;$excellent$&apos;])plt.show() gca&#x65B9;&#x6CD5;123456789101112131415161718192021222324import matplotlib.pyplot as pltimport numpy as npx = np.linspace(-1, 1, 21)y = np.power(x, 2) - 0.5plt.plot(x, y)# plt.gca &#x83B7;&#x53D6;&#x5750;&#x6807;&#x810A;ax = plt.gca()# &#x5C06;&#x4E0A;&#x65B9;&#x548C;&#x53F3;&#x4FA7;&#x7684;&#x5750;&#x6807;&#x8F74;&#x5220;&#x9664;ax.spines[&apos;right&apos;].set_color(&apos;none&apos;)ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)# &#x8BBE;&#x7F6E;x&#xFF0C;y&#x8F74;&#x4E3A;&#x4E0B;&#x65B9;&#x548C;&#x5DE6;&#x4FA7;&#x7684;&#x810A;ax.xaxis.set_ticks_position(&apos;bottom&apos;)ax.yaxis.set_ticks_position(&apos;left&apos;)# &#x8BBE;&#x7F6E;&#x5750;&#x6807;&#x8F74;&#x539F;&#x70B9;&#x4E3A;(-0.1, -0.2)ax.spines[&apos;bottom&apos;].set_position((&apos;data&apos;, -0.2))ax.spines[&apos;left&apos;].set_position((&apos;data&apos;, -0.1))plt.show() legend&#x65B9;&#x6CD5;1234567891011121314import matplotlib.pyplot as pltimport numpy as npx = np.linspace(-1, 1, 21)y = np.power(x, 2) + 1z = np.exp(x)plt.plot(x, y)plt.plot(x, z)# plt.legend(handles, labels, loc=&apos;best&apos;) &#x8BBE;&#x7F6E;&#x56FE;&#x4F8B;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;handles&#x548C;labels&#x4E2D;&#x5199;&#x5165;&#x591A;&#x4E2A;&#xFF0C;handle&#x7701;&#x7565;&#x5219;&#x6309;&#x7167;&#x56FE;&#x5F62;&#x7684;&#x4EA7;&#x751F;&#x987A;&#x5E8F;&#x8BBE;&#x7F6E;&#x56FE;&#x4F8B;&#xFF0C;loc=&apos;best&apos;&#x6307;&#x9ED8;&#x8BA4;&#x653E;&#x5728;&#x7A7A;&#x767D;&#x6700;&#x597D;&#x7684;&#x4F4D;&#x7F6E;plt.legend(labels=[r&apos;$x^2+1$&apos;, r&apos;$e^x$&apos;])plt.show() annotate&#x65B9;&#x6CD5;123456789101112import matplotlib.pyplot as pltimport numpy as npx = np.linspace(-1, 1, 21)y = np.power(x, 2) - 0.5plt.plot(x, y)# plt.annotate(formulation, xy, xytext, fontsize, arrowprops) &#x5728;xy&#x9644;&#x8FD1;&#x6DFB;&#x52A0;&#x6CE8;&#x89E3;formulation&#xFF0C;xytext&#x4E3A;&#x6CE8;&#x89E3;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;fontsize&#x4E3A;&#x6CE8;&#x89E3;&#x7684;&#x5927;&#x5C0F;&#xFF0C;arrowprops&#x4E3A;&#x7BAD;&#x5934;&#x7C7B;&#x578B;plt.annotate(r&apos;$x^2-0.5$&apos;, (0, -0.5), xytext=(+0.25, 0), arrowprops=dict(arrowstyle=&apos;-&gt;&apos;, connectionstyle=&apos;arc3, rad=0.2&apos;))plt.show() text&#x65B9;&#x6CD5;123456789101112import matplotlib.pyplot as pltimport numpy as npx = np.linspace(-1, 1, 21)y = np.power(x, 2) - 0.5plt.plot(x, y)# plt.text(x, y, text, fontdict) &#x5728;(x&#xFF0C;y)&#x5904;&#x6DFB;&#x52A0;&#x6587;&#x672C;&#x6587;&#x5B57;text&#xFF0C;&#x6587;&#x5B57;&#x7684;&#x5927;&#x5C0F;&#x989C;&#x8272;&#x5728;fontdict&#x5B9A;&#x4E49;plt.text(0, -0.2, r&apos;$x^2-0.5$&apos;, fontdict={&apos;size&apos;:20, &apos;color&apos;:&apos;red&apos;})plt.show() matplotlib&#x7ED8;&#x5236;&#x6563;&#x70B9;&#x56FE;scatter&#x65B9;&#x6CD5;12345678910import matplotlib.pyplot as pltimport numpy as npx = np.linspace(-1, 1, 21)y = np.power(x, 2) - 0.5# plt.scatter(x, y, color, s, label) &#x7ED8;&#x5236;x-y&#x6563;&#x70B9;&#x56FE;&#xFF0C;&#x989C;&#x8272;&#x4E3A;color&#xFF0C;&#x5927;&#x5C0F;&#x4E3A;s&#xFF0C;&#x6807;&#x7B7E;&#x4E3A;labelplt.scatter(x, y, color=&apos;blue&apos;, s=3.0)plt.show() matplotlib&#x7ED8;&#x5236;&#x6761;&#x5F62;&#x56FE;bar&#x65B9;&#x6CD5;123456789101112import matplotlib.pyplot as pltimport numpy as npnp.random.seed(1)x = np.arange(10)y = np.random.rand(10)# plt.bar(x, y, facecolor, edgecolor) &#x7ED8;&#x5236;x-y&#x6761;&#x5F62;&#x56FE;&#xFF0C;facecolor&#x4E3A;&#x5185;&#x90E8;&#x989C;&#x8272;&#xFF0C;edgecolor&#x4E3A;&#x8FB9;&#x7F18;&#x989C;&#x8272;plt.bar(x, y)plt.show() matplotlib&#x7ED8;&#x5236;&#x7B49;&#x9AD8;&#x7EBF;&#x56FE;contourf&#xFF0C;contour&#xFF0C;clabel&#x65B9;&#x6CD5;123456789101112131415161718import matplotlib.pyplot as pltimport numpy as npx=np.linspace(-1,1,100)y=np.linspace(-1,1,100)x, y=np.meshgrid(x, y)z = np.power(x, 2) + np.power(y, 2)# plt.contourf(x, y, z, n, alpha, cmap) &#x7ED8;&#x5236;(x, y, z)&#x4E8C;&#x7EF4;&#x7B49;&#x9AD8;&#x7EBF;&#x56FE;&#xFF0C;n&#x6307;&#x7B49;&#x9AD8;&#x7EBF;&#x7684;&#x6761;&#x6570;&#xFF0C;alpha&#x4E3A;&#x900F;&#x660E;&#x5EA6;&#xFF0C;cmap=plt.hot()&#x7ED8;&#x5236;&#x70ED;&#x56FE;&#xFF0C;cmap=plt.cool()&#x7ED8;&#x5236;&#x51B7;&#x56FE;plt.contourf(x, y, z, 8, alpha=0.5, cmap=plt.hot())# plt.contour(x, y, z, n, colors) &#x7ED8;&#x5236;(x, y, z)&#x4E8C;&#x7EF4;&#x7B49;&#x9AD8;&#x7EBF;contour=plt.contour(x, y, z, 8, colors=&apos;black&apos;)# plt.clabel(contour, inline=True, fontsize) #&#x5728;&#x7B49;&#x9AD8;&#x7EBF;contour&#x4E2D;&#x6DFB;&#x52A0;&#x6570;&#x5B57;plt.clabel(contour)plt.show() matplotlib&#x7ED8;&#x5236;&#x76F4;&#x65B9;&#x56FE;hist&#x65B9;&#x6CD5;1234567891011import matplotlib.pyplot as pltimport numpy as npnp.random.seed(1)x = np.random.randn(10000)# plt.hist(x, bins, color, normed=False) &#x5C06;x&#x7ED8;&#x5236;&#x76F4;&#x65B9;&#x56FE;&#xFF0C;bins&#x4E3A;&#x76F4;&#x65B9;&#x56FE;&#x5206;&#x7EC4;&#x7684;&#x4E2A;&#x6570;&#xFF0C;color&#x4E3A;&#x76F4;&#x65B9;&#x56FE;&#x7684;&#x989C;&#x8272;&#xFF0C;normed&#x4E3A;&#x662F;&#x5426;&#x6807;&#x51C6;&#x5316;plt.hist(x, 100)plt.show() matplotlib&#x7ED8;&#x5236;&#x997C;&#x72B6;&#x56FE;pie&#x65B9;&#x6CD5;123456789import matplotlib.pyplot as pltx = [0.2236, 0.2664, 0.3218, 0.1882]label = [&apos;first quarter&apos;, &apos;second quarter&apos;, &apos;third quarter&apos;, &apos;fourth quarter&apos;]# plt.pie(x, labels, autopct, explode, shadow=False) &#x5C06;x&#x7ED8;&#x5236;&#x997C;&#x72B6;&#x56FE;&#xFF0C;labels&#x4E3A;&#x6BCF;&#x4E2A;&#x90E8;&#x5206;&#x7684;&#x6807;&#x7B7E;&#xFF0C;autopct&#x4E3A;&#x767E;&#x5206;&#x6570;&#x7684;&#x683C;&#x5F0F;&#xFF0C;explode&#x6307;&#x662F;&#x5426;&#x7A81;&#x51FA;&#x663E;&#x793A;&#xFF0C;shadow&#x4E3A;&#x662F;&#x5426;&#x6DFB;&#x52A0;&#x9634;&#x5F71;plt.pie(x, labels=label, autopct=&apos;%.2f%%&apos;, explode=[0, 0, 0.1, 0], shadow=True)plt.show() matplotlib&#x586B;&#x5145;&#x56FE;&#x5F62;fill&#xFF0C;fill_between&#x65B9;&#x6CD5;12345678910111213141516171819import matplotlib.pyplot as pltimport numpy as npx=np.linspace(0,4*np.pi,100)y_1 =np.sin(x)y_2 =np.sin(2 * x)# plt.fill(x, y, color, alpha, interpolate=False) &#x5BF9;x&#xFF0C;y&#x56FE;&#x5F62;&#x4E0E;x&#x8F74;&#x8FDB;&#x884C;&#x586B;&#x5145;&#xFF0C;&#x989C;&#x8272;&#x4E3A;color&#xFF0C;&#x900F;&#x660E;&#x5EA6;&#x4E3A;alpha&#xFF0C;interpolate&#x4E3A;&#x662F;&#x5426;&#x7CBE;&#x786E;&#x586B;&#x5145;plt.figure(1)plt.fill(x, y_1, color=&apos;r&apos;, alpha=0.5)# plt.fill_between(x, y_1, y_2, where, facecolor, interpolate=False) &#x5BF9;x&#xFF0C;y_1&#x56FE;&#x5F62;&#x4E0E;x&#xFF0C;y_2&#x56FE;&#x5F62;&#x8FDB;&#x884C;&#x586B;&#x5145;&#xFF0C;&#x586B;&#x5145;&#x65B9;&#x5F0F;&#x4E3A;where&#xFF0C;&#x989C;&#x8272;&#x4E3A;color&#xFF0C;&#x900F;&#x660E;&#x5EA6;&#x4E3A;alpha&#xFF0C;interpolate&#x4E3A;&#x662F;&#x5426;&#x7CBE;&#x786E;&#x586B;&#x5145;plt.figure(2)plt.plot(x, y_1)plt.plot(x, y_2)plt.fill_between(x, y_1, y_2, where=y_1 &gt; y_2, facecolor=&apos;red&apos;, interpolate=True)plt.fill_between(x, y_1, y_2, where=y_1 &lt; y_2, facecolor=&apos;blue&apos;, interpolate=True)plt.show() matplotlib&#x7ED8;&#x5236;&#x51E0;&#x4F55;&#x56FE;&#x5F62;Cicle&#xFF0C;Rectangle&#xFF0C;Polygon&#xFF0C;Ellipse&#x65B9;&#x6CD5;12345678910111213141516171819202122232425262728293031import matplotlib.pyplot as pltimport matplotlib.patches as mpatchesimport numpy as npfig, ax=plt.subplots()clc=[.2,.2]rec=[.2,.8]pol=np.array([0.7,0.1,0.8,0.3,0.9,0.3,0.6,0.5]).reshape(4,2)eli=[.8,.8]# mpatches.Circle(c, r, color) &#x4EA7;&#x751F;c&#x4E3A;&#x5706;&#x5FC3;&#xFF0C;r&#x4E3A;&#x534A;&#x5F84;&#xFF0C;&#x989C;&#x8272;&#x4E3A;color&#x7684;&#x5706;&#x5F62;cicle=mpatches.Circle(clc,0.1,color=&apos;blue&apos;)ax.add_patch(cicle)# mpatches.Rectangle(c, length, width, color) &#x4EA7;&#x751F;&#x5DE6;&#x4E0B;&#x89D2;&#x5750;&#x6807;&#x4E3A;c&#xFF0C;&#x957F;&#x4E3A;length&#xFF0C;&#x5BBD;&#x4E3A;width&#xFF0C;&#x989C;&#x8272;&#x4E3A;color&#x7684;&#x77E9;&#x5F62;rectangle=mpatches.Rectangle(rec,0.2,0.1,color=&apos;red&apos;)ax.add_patch(rectangle)# mpatches.Polygon(pol, color) &#x4EA7;&#x751F;&#x5404;&#x4E2A;&#x5B9A;&#x70B9;&#x4E3A;pol&#x7684;&#x591A;&#x8FB9;&#x5F62;polygon=mpatches.Polygon(pol,color=&apos;green&apos;)ax.add_patch(polygon)# mpatches.Ellipse(c, a, b,color) &#x4EA7;&#x751F;&#x5706;&#x5FC3;&#x4E3A;c&#xFF0C;&#x957F;&#x8F74;&#x4E3A;a&#xFF0C;&#x77ED;&#x8F74;&#x4E3A;b&#x7684;&#x692D;&#x5706;ellipse=mpatches.Ellipse(eli,0.4,0.2,color=&apos;yellow&apos;)ax.add_patch(ellipse)plt.axis(&apos;equal&apos;)plt.grid(True)plt.show() matplotlib&#x7ED8;&#x5236;&#x4E8C;&#x7EF4;&#x6570;&#x636E;imshow&#xFF0C;colorbar&#x65B9;&#x6CD5;1234567891011121314import matplotlib.pyplot as pltimport numpy as npnp.random.seed(1)x = np.random.uniform(0, 255, (5,5))x# plt.imshow(array, interpolation=&apos;nearest&apos;, cmap=&apos;hot&apos;, origin=&apos;upper&apos;) &#x663E;&#x793A;&#x4E8C;&#x7EF4;&#x6570;&#x636E;&#xFF0C;interpolation&#x4E3A;&#x63D2;&#x503C;&#x65B9;&#x5F0F;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x6700;&#x8FD1;&#x90BB;&#xFF0C;cmap&#x4E3A;&#x989C;&#x8272;&#x663E;&#x793A;&#x65B9;&#x5F0F;(&#x9ED8;&#x8BA4;&#x4E3A;hot)&#xFF0C;&#x53EF;&#x4EE5;&#x4E3A;&apos;hot&apos;&#xFF0C;&apos;cool&apos;&#xFF0C;&apos;rainbow&apos;&#xFF0C;&apos;bone&apos;&#xFF0C;origin&#x4E3A;&#x56FE;&#x5F62;&#x7ED8;&#x5236;&#x7684;&#x65B9;&#x5411;&#xFF0C;upper&#x4ECE;&#x4E0A;&#x5230;&#x4E0B;&#xFF0C;lower&#x81EA;&#x4E0B;&#x800C;&#x4E0A;&#x3002;plt.imshow(x, cmap=&apos;bone&apos;)# plt.colorbar() &#x6DFB;&#x52A0;&#x989C;&#x8272;&#x68D2;plt.colorbar()plt.show() matplotlib&#x7ED8;&#x5236;3D&#x56FE;&#x5F62;Axes3D&#xFF0C;plot_surface&#x65B9;&#x6CD5;123456789101112131415161718import matplotlib.pyplot as pltimport mpl_toolkits.mplot3d as mpimport numpy as npfig = plt.figure()x = np.arange(-4, 4, 0.25)y = np.arange(-4, 4, 0.25)x, y = np.meshgrid(x, y)z = np.sqrt(x**2 + y**2)z = np.sin(z)# mp.Axes3D(fig) &#x751F;&#x6210;3D&#x7A97;&#x53E3;ax = mp.Axes3D(fig)# obj.plot_surface(x, y, z, rstride=1, cstride=1, cmap=None) &#x753B;&#x51FA;3D&#x8868;&#x9762;&#x56FE;&#x5F62;&#xFF0C;rstride&#x4E3A;&#x884C;&#x8DE8;&#x5EA6;&#xFF0C;cstride&#x4E3A;&#x5217;&#x8DE8;&#x5EA6;&#xFF0C;cmap&#x4E3A;&#x989C;&#x8272;&#x663E;&#x793A;&#x65B9;&#x5F0F;&#x540C;plt.imshowax.plot_surface(x, y, z, cmap=&apos;rainbow&apos;)plt.show() matplotlib&#x6781;&#x5750;&#x6807;&#x7CFB;subplot&#x65B9;&#x6CD5;123456789101112import matplotlib.pyplot as pltimport numpy as nptheta = np.linspace(-np.pi, np.pi, 100)r = 0.5 * (1 + np.cos(theta))# plt.subplot(111, projection=&apos;polar&apos;) &#x7ED8;&#x5236;&#x6781;&#x5750;&#x6807;fig = plt.subplot(111, projection=&apos;polar&apos;)fig.plot(theta, r)plt.show() Matplotlib&#x5C0F;&#x7ED3;&#x2003;&#x2003;&#x901A;&#x8FC7;Matplotlib&#xFF0C;&#x5F00;&#x53D1;&#x8005;&#x53EF;&#x4EE5;&#x4EC5;&#x9700;&#x8981;&#x51E0;&#x884C;&#x4EE3;&#x7801;&#xFF0C;&#x4FBF;&#x53EF;&#x4EE5;&#x751F;&#x6210;&#x7ED8;&#x56FE;&#x3002;&#x5728;&#x6570;&#x636E;&#x5206;&#x6790;&#xFF0C;&#x673A;&#x5668;&#x5B66;&#x4E60;&#xFF0C;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x4E2D;&#xFF0C;&#x8981;&#x5BF9;&#x5F53;&#x524D;&#x7684;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x5B9E;&#x65F6;&#x7684;&#x663E;&#x793A;&#x6216;&#x8005;&#x5BF9;&#x51C6;&#x786E;&#x7387;&#x6709;&#x76F4;&#x89C2;&#x7684;&#x5C55;&#x793A;&#xFF0C;&#x9700;&#x8981;&#x501F;&#x52A9;Matplotlib&#x7684;&#x5E2E;&#x52A9;&#xFF0C;&#x56E0;&#x6B64;Matplotlib&#x4E5F;&#x4F5C;&#x4E3A;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x4E09;&#x5251;&#x5BA2;&#x4E4B;&#x4E00;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>常用库</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Pandas]]></title>
    <url>%2F2019%2F08%2F13%2Flibrary%20Pandas%2F</url>
    <content type="text"><![CDATA[Pandas&#x4ECB;&#x7ECD;&#x2003;&#x2003;pandas&#x662F;&#x57FA;&#x4E8E;Numpy&#x7684;&#x4E00;&#x79CD;&#x5DE5;&#x5177;&#xFF0C;&#x8BE5;&#x5DE5;&#x5177;&#x7EB3;&#x5165;&#x4E86;&#x5927;&#x91CF;&#x5E93;&#x548C;&#x4E00;&#x4E9B;&#x6807;&#x51C6;&#x7684;&#x6570;&#x636E;&#x6A21;&#x578B;&#xFF0C;&#x63D0;&#x4F9B;&#x4E86;&#x5927;&#x91CF;&#x80FD;&#x4F7F;&#x6211;&#x4EEC;&#x5FEB;&#x901F;&#x4FBF;&#x6377;&#x5730;&#x5904;&#x7406;&#x6570;&#x636E;&#x7684;&#x51FD;&#x6570;&#x548C;&#x65B9;&#x6CD5;&#x3002; Pandas&#x7279;&#x70B9;&#x2003;&#x2003;Pandas&#x89E3;&#x51B3;&#x4E86;Numpy&#x4E0D;&#x5229;&#x4E8E;&#x5904;&#x7406;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x7684;&#x95EE;&#x9898;&#x2003;&#x2003;Pandas&#x80FD;&#x591F;&#x5408;&#x5E76;&#x5904;&#x7406;&#x5E38;&#x89C1;&#x6570;&#x636E;&#x5E93;&#x4E2D;&#x7684;&#x5173;&#x7CFB;&#x578B;&#x8FD0;&#x7B97;&#x2003;&#x2003;Pandas&#x66F4;&#x8D34;&#x8FD1;&#x4E8E;&#x65E5;&#x5E38;&#x7684;&#x751F;&#x6D3B;&#x4F7F;&#x7528;&#xFF0C;&#x5373;&#x8868;&#x683C;&#x5316;&#x7684;&#x6570;&#x636E;&#x5F62;&#x5F0F;&#x2003;&#x2003;Pandas&#x5177;&#x5907;&#x6570;&#x636E;&#x5BF9;&#x9F50;&#x529F;&#x80FD;&#xFF0C;&#x4E14;&#x96C6;&#x6210;&#x65F6;&#x95F4;&#x5E8F;&#x5217;&#xFF0C;&#x65E2;&#x80FD;&#x5904;&#x7406;&#x65F6;&#x95F4;&#x5E8F;&#x5217;&#x6570;&#x636E;&#xFF0C;&#x4E5F;&#x80FD;&#x5904;&#x7406;&#x975E;&#x65F6;&#x95F4;&#x5E8F;&#x5217;&#x6570;&#x636E; Pandas&#x5E94;&#x7528;Pandas&#x521B;&#x5EFA;&#x8868;&#x683C;series&#x65B9;&#x6CD5;12345678import pandas as pd# pd.Series(list, index) &#x5C06;list&#x8F6C;&#x6362;&#x4E3A;&#x4E00;&#x7EF4;&#x8868;&#x683C;&#x578B;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;index&#x4E3A;&#x6807;&#x7B7E;&#x540D;&#x79F0;&#xFF0C;&#x9ED8;&#x8BA4;&#x4ECE;0&#x5F00;&#x59CB;0,1, ...a = pd.Series([1, &apos;hello&apos;, 3.1415, True])b = pd.Series([1, &apos;hello&apos;, 3.1415, True], index=[&apos;int&apos;, &apos;string&apos;, &apos;float&apos;, &apos;bool&apos;])# pd.Series(dict) &#x5C06;dict&#x8F6C;&#x6362;&#x4E3A;&#x4E00;&#x7EF4;&#x8868;&#x683C;&#x578B;&#x6570;&#x636E;&#x7ED3;&#x6784;c = pd.Series({&apos;int&apos;:1, &apos;string&apos;:&apos;hello&apos;, &apos;float&apos;:3.1415, &apos;bool&apos;:True}) DataFrame&#x65B9;&#x6CD5;12345678import pandas as pdimport numpy as np# pd.DataFrame(array, index, columns) &#x751F;&#x6210;&#x884C;&#x6807;&#x7B7E;&#x4E3A;index&#xFF0C;&#x5217;&#x6807;&#x7B7E;&#x4E3A;columns&#xFF0C;&#x6570;&#x636E;&#x4E3A;array&#x7684;&#x4E8C;&#x7EF4;&#x8868;&#x683C;&#x578B;&#x6570;&#x636E;&#x7ED3;&#x6784;a = pd.DataFrame(np.arange(12).reshape(3, 4), index=[&apos;row_0&apos;, &apos;row_1&apos;, &apos;row_2&apos;], columns=[&apos;columns_0&apos;, &apos;columns_1&apos;, &apos;columns_2&apos;, &apos;columns_3&apos;]) # pd.DataFrame(dict, index) &#x751F;&#x6210;&#x884C;&#x6807;&#x7B7E;&#x4E3A;index&#xFF0C;&#x6570;&#x636E;&#x4E3A;dict&#x7684;&#x4E8C;&#x7EF4;&#x8868;&#x683C;&#x578B;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;dict&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;key&#x662F;&#x6BCF;&#x4E00;&#x5217;&#x7684;&#x5217;&#x6807;&#x7B7E;&#xFF0C;value&#x662F;&#x6BCF;&#x4E00;&#x5217;&#x7684;&#x6570;&#x636E;b = pd.DataFrame({&apos;columns_0&apos;:[0, 4, 8], &apos;columns_1&apos;:[1, 5, 9], &apos;columns_2&apos;:[2, 6, 10], &apos;columns_3&apos;:[3, 7, 11]}, index=[&apos;row_0&apos;, &apos;row_1&apos;, &apos;row_2&apos;]) Pandas&#x5C5E;&#x6027;dtypes&#xFF0C;index&#xFF0C;columns&#xFF0C;values&#x5C5E;&#x6027;123456789101112131415import pandas as pda = pd.DataFrame({&apos;col_0&apos;:[0, 4, 8], &apos;col_1&apos;:[2.71, 3.14, 5], &apos;col_2&apos;:[True, False, False]}, index=[&apos;row_0&apos;, &apos;row_1&apos;, &apos;row_2&apos;]) # obj.dtypes &#x67E5;&#x770B;&#x6BCF;&#x4E00;&#x5217;&#x7684;&#x6570;&#x636E;&#x5F62;&#x5F0F;a.dtypes# obj.index &#x67E5;&#x770B;&#x5217;&#x7684;&#x5E8F;&#x53F7;a.index# obj.columns &#x67E5;&#x770B;&#x884C;&#x7684;&#x5E8F;&#x53F7;a.columns# obj.values &#x67E5;&#x770B;&#x5217;&#x8868;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x5185;&#x5BB9;a.values describe&#xFF0C;head&#xFF0C;tail&#x5C5E;&#x6027;123456789101112import pandas as pda = pd.DataFrame({&apos;col_0&apos;:[0, 4, 8], &apos;col_1&apos;:[2.71, 3.14, 5], &apos;col_2&apos;:[True, False, False]}, index=[&apos;row_0&apos;, &apos;row_1&apos;, &apos;row_2&apos;]) # obj.describe() &#x67E5;&#x770B;&#x5185;&#x5BB9;&#x7EDF;&#x8BA1;&#xFF0C;&#x53EA;&#x7EDF;&#x8BA1;&#x6570;&#x5B57;&#x5185;&#x5BB9;a.describe()# obj.head(n) &#x67E5;&#x770B;&#x524D;n&#x884C;a.head(2)# obj.tail(n) &#x67E5;&#x770B;&#x540E;n&#x884C;a.tail(2) Pandas&#x8868;&#x683C;&#x6392;&#x5E8F;sort_index&#x65B9;&#x6CD5;12345678910import pandas as pdimport numpy as npnp.random.seed(1)a = pd.DataFrame(np.random.randint(1, 6, (3, 4)), index=[&apos;row_2&apos;, &apos;row_1&apos;, &apos;row_3&apos;], columns=[&apos;col_2&apos;, &apos;col_0&apos;, &apos;col_3&apos;, &apos;col_1&apos;])# obj.sort_index(axis=0, ascending=True) &#x5BF9;obj&#x7684;&#x6807;&#x7B7E;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;axis=0(&#x9ED8;&#x8BA4;)&#x4E3A;&#x884C;&#x6807;&#x7B7E;&#xFF0C;axis=1&#x4E3A;&#x5217;&#x6807;&#x7B7E;&#xFF0C;ascending=True(&#x9ED8;&#x8BA4;)&#x4E3A;&#x9012;&#x589E;&#x987A;&#x5E8F;&#xFF0C;ascending=False&#x4E3A;&#x9012;&#x51CF;&#x987A;&#x5E8F;b = a.sort_index()c = a.sort_index(axis=1, ascending=False) sort_values&#x65B9;&#x6CD5;12345678910import pandas as pdimport numpy as npnp.random.seed(1)a = pd.DataFrame(np.random.randint(1, 6, (3, 4)), index=[&apos;row_2&apos;, &apos;row_1&apos;, &apos;row_3&apos;], columns=[&apos;col_2&apos;, &apos;col_0&apos;, &apos;col_3&apos;, &apos;col_1&apos;])# obj.sort_values(by, axis=0, ascending) &#x5BF9;obj&#x7684;&#x6570;&#x636E;&#x5185;&#x5BB9;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;by&#x6307;&#x5B9A;&#x8981;&#x6392;&#x5E8F;&#x7684;&#x884C;&#x6216;&#x8005;&#x5217;&#xFF0C;axis=0(&#x9ED8;&#x8BA4;)&#x4E3A;&#x884C;&#x6807;&#x7B7E;&#xFF0C;axis=1&#x4E3A;&#x5217;&#x6807;&#x7B7E;&#xFF0C;ascending=True(&#x9ED8;&#x8BA4;)&#x4E3A;&#x9012;&#x589E;&#x987A;&#x5E8F;&#xFF0C;ascending=False&#x4E3A;&#x9012;&#x51CF;&#x987A;&#x5E8F;b = a.sort_values(by=&apos;col_0&apos;)c = a.sort_values(by=&apos;row_1&apos;, axis=1, ascending=False) pandas&#x5207;&#x7247;&#x4E0E;&#x7D22;&#x5F15;[]&#x65B9;&#x6CD5;12345678910111213import pandas as pdimport numpy as npa = pd.DataFrame(np.arange(12).reshape(3, 4), index=[&apos;row_0&apos;, &apos;row_1&apos;, &apos;row_2&apos;], columns=[&apos;col_0&apos;, &apos;col_1&apos;, &apos;col_2&apos;, &apos;col_3&apos;]) # obj[col_name] &#x7D22;&#x5F15;obj&#x4E2D;&#x7684;col_name&#x5217;b = a[[&apos;col_3&apos;, &apos;col_0&apos;]]# obj[m:n] &#x7D22;&#x5F15;obj&#x4E2D;&#x7684;[m, n)&#x884C;c = a[1:3]# obj[obj.col_name op x] &#x7D22;&#x5F15;obj&#x7684;col_name&#x5217;&#x4E2D;&#x5BF9;x&#x64CD;&#x4F5C;&#x540E;&#x4E3A;True&#x7684;&#x884C;d = a[a.col_0 &gt; 3] loc&#xFF0C;iloc&#x65B9;&#x6CD5;12345678910import pandas as pdimport numpy as npa = pd.DataFrame(np.arange(12).reshape(3, 4), index=[&apos;row_0&apos;, &apos;row_1&apos;, &apos;row_2&apos;], columns=[&apos;col_0&apos;, &apos;col_1&apos;, &apos;col_2&apos;, &apos;col_3&apos;]) # obj.loc[row_name&#xFF0C;col_name=None] &#x7D22;&#x5F15;obj&#x4E2D;&#x884C;&#x6807;&#x7B7E;&#x4E3A;row_name,&#x5217;&#x6807;&#x7B7E;&#x4E3A;col_name(&#x9ED8;&#x8BA4;&#x662F;&#x5168;&#x90E8;&#x5217;)&#x7684;&#x6240;&#x6709;&#x6570;&#x636E;b = a.loc[[&apos;row_1&apos;, &apos;row_2&apos;]]# obj.iloc[row_index, col_index] &#x7D22;&#x5F15;obj&#x4E2D;&#x7684;&#x7B2C;row_index&#x884C;&#x548C;&#x7B2C;col_index&#x5217;c = a.iloc[[1, 2], [1, 2]] pandas&#x4FEE;&#x6539;&#x5185;&#x5BB9;[]&#x65B9;&#x6CD5;12345678910111213141516171819import pandas as pdimport numpy as npa = pd.DataFrame(np.arange(12).reshape(3, 4), index=[&apos;row_0&apos;, &apos;row_1&apos;, &apos;row_2&apos;], columns=[&apos;col_0&apos;, &apos;col_1&apos;, &apos;col_2&apos;, &apos;col_3&apos;]) # obj[col_name] &#x5C06;obj&#x4E2D;&#x7684;col_name&#x5217;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x6539;&#x4E3A;xa[[&apos;col_3&apos;,&apos;col_2&apos;]] = -1# obj[m:n] = x &#x5C06;obj&#x4E2D;&#x7684;[m, n)&#x884C;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x6570;&#x636E;&#x6539;&#x4E3A;xa[2:3] = -2# obj[obj[col_name] op x] = x &#x5C06;obj&#x7684;col_name&#x5217;&#x4E2D;&#x5BF9;x&#x64CD;&#x4F5C;&#x540E;&#x4E3A;True&#x7684;&#x884C;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x6570;&#x636E;&#x6539;&#x4E3A;xa[a[&apos;col_0&apos;] &gt; 3] = -3# obj.col_name[obj.col_name op x] = x &#x5C06;obj&#x7684;col_name&#x5217;&#x4E2D;&#x5BF9;x&#x64CD;&#x4F5C;&#x540E;&#x4E3A;True&#x7684;&#x6240;&#x6709;&#x6570;&#x636E;&#x6539;&#x4E3A;xa.col_0[a[&apos;col_0&apos;] != -3] =-4# obj[col_name] = x &#x5C06;obj&#x7684;col_name&#x5217;&#x4FEE;&#x6539;&#x4E3A;x&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x8BE5;&#x5217;&#x5219;&#x589E;&#x52A0;&#x4E00;&#x5217;a[&apos;col_4&apos;] =-5 dropna&#xFF0C;fillna&#x65B9;&#x6CD5;12345678910111213import pandas as pdimport numpy as npa = pd.DataFrame({&apos;col_0&apos;:[0, 4, np.nan], &apos;col_1&apos;:[2.71, np.nan, np.nan], &apos;col_2&apos;:[np.nan, np.nan, np.nan]}, index=[&apos;row_0&apos;, &apos;row_1&apos;, &apos;row_2&apos;]) b = pd.DataFrame({&apos;col_0&apos;:[0, 4, 2.5], &apos;col_1&apos;:[2.71, np.nan, np.nan], &apos;col_2&apos;:[np.nan, np.nan, np.nan]}, index=[&apos;row_0&apos;, &apos;row_1&apos;, &apos;row_2&apos;]) # obj.dropna(axis=0, how=&apos;any&apos;) &#x5C06;obj&#x4E2D;&#x7684;nan&#x5220;&#x9664;&#xFF0C;axis=0(&#x9ED8;&#x8BA4;)&#x4E3A;&#x5220;&#x9664;&#x884C;&#xFF0C;axis=1&#x4E3A;&#x5220;&#x9664;&#x5217;&#xFF0C;how=&apos;any&apos;(&#x9ED8;&#x8BA4;)&#x4E3A;&#x53EA;&#x8981;&#x5B58;&#x5728;nan&#x5C31;&#x5220;&#x9664;&#xFF0C;how=&apos;all&apos;&#x4E3A;&#x5168;&#x90E8;&#x4E3A;nan&#x624D;&#x5220;&#x9664;c = a.dropna()d = b.dropna(1, &apos;all&apos;)# obj.fillna(value) &#x5C06;obj&#x4E2D;&#x7684;nan&#x7528;value&#x586B;&#x5145;,value&#x53EF;&#x4EE5;&#x4E3A;&#x6570;&#x5B57;&#x6216;&#x8005;&#x5B57;&#x5178;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x5B57;&#x5178;&#x5219;&#x6309;&#x7167;&#x5B57;&#x5178;&#x7684;&#x5BF9;&#x5E94;&#x5173;&#x7CFB;&#x6309;&#x5217;&#x586B;&#x5145;e = a.fillna(-1)f = a.fillna({&apos;col_0&apos;:-1, &apos;col_1&apos;:-2, &apos;col_2&apos;:-3}) pandas&#x5408;&#x5E76;concat&#x65B9;&#x6CD5;123456789101112131415import pandas as pdimport numpy as npindex_a = [&apos;A&apos;, &apos;B&apos;]index_b = [&apos;B&apos;, &apos;C&apos;]col_a = [&apos;a&apos;, &apos;b&apos;]col_b = [&apos;b&apos;, &apos;c&apos;]a = pd.DataFrame(np.arange(4).reshape(2, 2), index=index_a, columns=col_a) b = pd.DataFrame(np.arange(4).reshape(2, 2), index=index_b, columns=col_b) # pd.concat([obj1, obj2, ...], axis=0, join=&apos;outer&apos;, ignore_index=False) &#x5C06;&#x591A;&#x4E2A;&#x5BF9;&#x8C61;&#x6309;&#x7167;&#x8F74;&#x8FDB;&#x884C;&#x8FDE;&#x63A5;&#xFF0C;join&#x4E3A;&#x8FDE;&#x63A5;&#x65B9;&#x5F0F;&#xFF0C;&apos;outer&apos;&#x4EE3;&#x8868;&#x5C06;&#x6CA1;&#x6709;&#x76F8;&#x5E94;&#x6807;&#x7B7E;&#x7684;&#x5BF9;&#x8C61;&#x8865;NaN&#xFF0C;&apos;inner&apos;&#x4EE3;&#x8868;&#x53EA;&#x4FDD;&#x7559;&#x5171;&#x6709;&#x7684;&#x6807;&#x7B7E;&#xFF0C;ignore_index&#x4E3A;&#x662F;&#x5426;&#x91CD;&#x65B0;&#x5F00;&#x59CB;&#x6392;&#x5217;&#x6807;&#x7B7E;c = pd.concat([a, b])d = pd.concat([a, b], axis=1)e = pd.concat([a, b], join=&apos;inner&apos;)f = pd.concat([a, b],ignore_index=True) append&#x65B9;&#x6CD5;12345678910111213import pandas as pdimport numpy as npindex_a = [&apos;A&apos;, &apos;B&apos;]index_b = [&apos;B&apos;, &apos;C&apos;]col_a = [&apos;a&apos;, &apos;b&apos;]col_b = [&apos;b&apos;, &apos;c&apos;]a = pd.DataFrame(np.arange(4).reshape(2, 2), index=index_a, columns=col_a) b = pd.DataFrame(np.arange(4).reshape(2, 2), index=index_b, columns=col_b) # obj.append([obj1, obj2, ...], ignore_index=False) &#x5728;&#x7EB5;&#x5411;&#x5728;obj&#x540E;&#x8FFD;&#x52A0;obj1, obj2,......&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x5BF9;&#x5E94;&#x7684;&#x5217;&#x6807;&#x7B7E;&#xFF0C;&#x5219;&#x8865;NaNc = a.append([a])d = a.append([b]) merge&#x65B9;&#x6CD5;12345678910111213141516import pandas as pdimport numpy as npindex_a = [&apos;A&apos;, &apos;B&apos;]index_b = [&apos;B&apos;, &apos;C&apos;]col_a = [&apos;a&apos;, &apos;b&apos;]col_b = [&apos;b&apos;, &apos;c&apos;]a = pd.DataFrame(np.array([1, 3, 5, 7]).reshape(2, 2), index=index_a, columns=col_a) b = pd.DataFrame(np.array([3, 4, 5, 6]).reshape(2, 2), index=index_b, columns=col_b) # pd.merge(left, right, how=&apos;inner&apos;, on=&apos;col_name&apos;,left_index=False,right_index=False) &#x6309;&#x7167;on&#x8FDB;&#x884C;&#x5408;&#x5E76;&#x4E24;&#x4E2A;&#x8868;&#x683C;,how=&apos;inner&apos;&#xFF0C;&#x884C;&#x6807;&#x7B7E;&#x4E3A;&#x4E24;&#x4E2A;&#x8868;&#x683C;&#x884C;&#x6807;&#x7B7E;&#x7684;&#x4EA4;&#x96C6;&#xFF0C;&apos;outer&apos;&#xFF0C;&#x884C;&#x6807;&#x7B7E;&#x4E3A;&#x4E24;&#x4E2A;&#x8868;&#x683C;&#x884C;&#x6807;&#x7B7E;&#x7684;&#x5E76;&#x96C6;&#xFF0C;&#x5C06;&#x4E0D;&#x76F8;&#x4EA4;&#x7684;&#x90E8;&#x5206;&#x53D6;NaN&#xFF0C;&apos;left&apos;&#xFF0C;&#x884C;&#x6807;&#x7B7E;&#x4E3A;left&#x7684;&#x884C;&#x6807;&#x7B7E;&#xFF0C;&apos;right&apos;&#xFF0C;&#x884C;&#x6807;&#x7B7E;&#x4E3A;left&#x7684;&#x884C;&#x6807;&#x7B7E;&#x3002;left_index&#x548C;right_index&#x6307;&#x662F;&#x5426;&#x6309;&#x7167;&#x6807;&#x7B7E;&#x5408;&#x5E76;&#xFF0C;&#x4E3A;False&#x6839;&#x636E;&#x503C;&#x5408;&#x5E76;&#x8868;&#x683C;&#xFF0C;True&#x6839;&#x636E;&#x6807;&#x7B7E;&#x5408;&#x5E76;&#x8868;&#x683C;c = pd.merge(a, b, on=&apos;b&apos;)d = pd.merge(a, b, how=&apos;outer&apos;, on=&apos;b&apos;)e = pd.merge(a, b, how=&apos;left&apos;, on=&apos;b&apos;)f = pd.merge(a, b, how=&apos;right&apos;, on=&apos;b&apos;)g = pd.merge(a, b, how=&apos;outer&apos;, left_index=True,right_index=True) Pandas&#x4FEE;&#x6539;&#x884C;&#x5217;&#x540D;replace&#xFF0C;rename&#x65B9;&#x6CD5;1234567891011121314import pandas as pda = pd.DataFrame([[1, 3], [5, 7]], index=[&apos;row_0&apos;, &apos;row_1&apos;], columns=[&apos;col_0&apos;, &apos;col_1&apos;]) # obj.columns = list&#xFF0C;obj.index = list &#x5C06;&#x5217;&#x6807;&#x7B7E;&#x6539;&#x4E3A;list&#xFF0C;&#x5C06;&#x884C;&#x6807;&#x7B7E;&#x6539;&#x4E3A;lista.columns = [&apos;new_col_0&apos;, &apos;new_col_1&apos;]a.index = [&apos;new_row_0&apos;, &apos;new_row_1&apos;]# obj.replace(list1, list2) &#x5C06;obj&#x4E2D;list1&#x4E2D;&#x7684;&#x6570;&#x503C;&#x66FF;&#x6362;&#x4E3A;list2b = a.replace([1, 7], [2, 6])# obj.rename(columns=dict/func, index=dict/func) &#x7528;&#x5B57;&#x5178;&#x6216;&#x51FD;&#x6570;&#x6765;&#x66F4;&#x6539;&#x884C;&#x5217;&#x540D;c = a.rename(columns={&apos;new_col_0&apos;:&apos;A&apos;, &apos;new_col_1&apos;:&apos;B&apos;}, index={&apos;new_row_0&apos;:&apos;a&apos;, &apos;new_row_1&apos;:&apos;b&apos;})d = a.rename(columns=lambda x: x[-1], index=lambda x: x[-1]) pandas&#x6570;&#x7406;&#x7EDF;&#x8BA1;notnull&#xFF0C;isnull&#x65B9;&#x6CD5;12345678910import pandas as pdimport numpy as npa = pd.DataFrame([[1, np.nan], [5, 7]], index=[&apos;row_0&apos;, &apos;row_1&apos;], columns=[&apos;col_0&apos;, &apos;col_1&apos;]) # obj.isnull() &#x5224;&#x65AD;obj&#x4E2D;&#x6BCF;&#x4E00;&#x9879;&#x662F;&#x5426;&#x4E3A;NaNa.isnull()# obj.notnull() &#x5224;&#x65AD;obj&#x4E2D;&#x6BCF;&#x4E00;&#x9879;&#x662F;&#x5426;&#x4E0D;&#x4E3A;NaNa.notnull() &#x7EDF;&#x8BA1;&#x65B9;&#x6CD5;123456789101112131415161718192021222324252627import pandas as pdimport numpy as npa = pd.DataFrame([[1, 4, 7], [2, 5, 8], [5, 4, 1]], index=[&apos;r_0&apos;, &apos;r_1&apos;, &apos;r_2&apos;], columns=[&apos;c_0&apos;, &apos;c_1&apos;, &apos;c_2&apos;]) b = pd.DataFrame([[1, 4, 7], [2, np.nan, 8], [5, np.nan, np.nan]], index=[&apos;r_0&apos;, &apos;r_1&apos;, &apos;r_2&apos;], columns=[&apos;c_0&apos;, &apos;c_1&apos;, &apos;c_2&apos;]) # obj.max/min(axis=0) &#x7EDF;&#x8BA1;&#x6700;&#x5927;&#x503C;/&#x6700;&#x5C0F;&#x8005;&#xFF0C;axis=0&#x4E3A;&#x5217;&#xFF0C;axis=1&#x4E3A;&#x884C;a.max(0)a.min(1)# obj.count(axis=0) &#x7EDF;&#x8BA1;&#x975E;&#x7A7A;&#x4E2A;&#x6570;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;pd.maxb.count()# obj.mean(axis=0) &#x7EDF;&#x8BA1;&#x5747;&#x503C;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;pd.maxa.mean()# obj.median(axis=0) &#x7EDF;&#x8BA1;&#x4E2D;&#x4F4D;&#x6570;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;pd.maxa.median()# obj.std(axis=0) &#x7EDF;&#x8BA1;&#x6807;&#x51C6;&#x5DEE;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;pd.maxa.std()# obj.var(obj, axis=None) &#x7EDF;&#x8BA1;&#x65B9;&#x5DEE;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;pd.maxa.var()# obj.corr(obj, axis=None) &#x7EDF;&#x8BA1;&#x76F8;&#x5173;&#x7CFB;&#x6570;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;pd.maxa.corr() pandas&#x6570;&#x636E;&#x4FDD;&#x5B58;to_csv&#xFF0C;read_csv&#x65B9;&#x6CD5;123456789101112import pandas as pdimport numpy as npa = pd.DataFrame(np.arange(12).reshape(3, 4), index=[&apos;row_0&apos;, &apos;row_1&apos;, &apos;row_2&apos;], columns=[&apos;col_0&apos;, &apos;col_1&apos;, &apos;col_2&apos;, &apos;col_3&apos;]) # obj.to_csv/pickle(filename) &#x5C06;obj&#x4FDD;&#x5B58;&#x5728;&#x6587;&#x4EF6;&#x540D;&#x4E3A;filename&#x7684;.csv/pickle&#x6587;&#x4EF6;&#x4E2D;(&#x8981;&#x52A0;.csv/pickle&#x6269;&#x5C55;&#x540D;)a.to_csv(&apos;save1.csv&apos;)a.to_pickle(&apos;save2.pickle&apos;)# pd.read_csv(filename) &#x8BFB;&#x53D6;&#x6587;&#x4EF6;&#x540D;&#x4E3A;filename&#x7684;&#x6570;&#x7EC4;&#x6570;&#x636E;(&#x8981;&#x52A0;.csv/pickle&#x6269;&#x5C55;&#x540D;)b = pd.read_csv(&apos;save1.csv&apos;)c = pd.read_pickle(&apos;save2.pickle&apos;) pandas&#x6570;&#x636E;&#x663E;&#x793A;plot&#xFF0C;plot.scatter&#x65B9;&#x6CD5;123456789101112import pandas as pdimport numpy as npimport matplotlib.pyplot as pltx = np. arange(10)y = np.log(x)a = pd.DataFrame({&apos;x&apos;:x, &apos;y&apos;:y}) # obj.plot.scatter(x, y) &#x753B;&#x51FA;x-y&#x5BF9;&#x5E94;&#x7684;&#x6563;&#x70B9;&#x56FE;&#xFF0C;&#x53EF;&#x53C2;&#x8003;matplotliba.plot.scatter(&apos;x&apos;, &apos;y&apos;)plt.show() Pandas&#x5C0F;&#x7ED3;&#x2003;&#x2003;Pandas&#x53EF;&#x5904;&#x7406;&#x7684;&#x6570;&#x636E;&#x66F4;&#x63A5;&#x8FD1;&#x6765;&#x6E90;&#x4E8E;&#x751F;&#x6D3B;&#x4E2D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x5728;&#x6570;&#x636E;&#x5206;&#x6790;&#xFF0C;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x4E2D;&#xFF0C;&#x5927;&#x91CF;&#x7684;&#x6570;&#x636E;&#x90FD;&#x662F;&#x5177;&#x6709;&#x6807;&#x7B7E;&#x7684;&#xFF0C;&#x4E0D;&#x53EA;&#x662F;&#x7EAF;&#x6570;&#x5B57;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x9700;&#x8981;&#x501F;&#x52A9;Pandas&#x7684;&#x5E2E;&#x52A9;&#xFF0C;&#x56E0;&#x6B64;pandas&#x4E5F;&#x4F5C;&#x4E3A;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x4E09;&#x5251;&#x5BA2;&#x4E4B;&#x4E00;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>常用库</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Numpy]]></title>
    <url>%2F2019%2F08%2F12%2Flibrary%20Numpy%2F</url>
    <content type="text"><![CDATA[Numpy&#x4ECB;&#x7ECD;&#x2003;&#x2003;NumPy&#x662F;Python&#x7684;&#x4E00;&#x79CD;&#x5F00;&#x6E90;&#x7684;&#x6570;&#x503C;&#x8BA1;&#x7B97;&#x6269;&#x5C55;&#xFF0C;&#x8FD9;&#x79CD;&#x5DE5;&#x5177;&#x53EF;&#x7528;&#x6765;&#x5B58;&#x50A8;&#x548C;&#x5904;&#x7406;&#x5927;&#x578B;&#x77E9;&#x9635;&#xFF0C;&#x4E13;&#x4E3A;&#x8FDB;&#x884C;&#x4E25;&#x683C;&#x7684;&#x6570;&#x5B57;&#x5904;&#x7406;&#x800C;&#x4EA7;&#x751F;&#x3002; Numpy&#x7279;&#x70B9;&#x2003;&#x2003;NumPy&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E2A;N&#x7EF4;&#x6570;&#x7EC4;&#x7C7B;&#x578B;ndarray&#xFF0C;&#x5B83;&#x63CF;&#x8FF0;&#x4E86;&#x76F8;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x7684;&#x96C6;&#x5408;&#x3002;&#x2003;&#x2003;numpy&#x5185;&#x7F6E;&#x4E86;&#x5E76;&#x884C;&#x8FD0;&#x7B97;&#x529F;&#x80FD;&#xFF0C;&#x5F53;&#x7CFB;&#x7EDF;&#x6709;&#x591A;&#x4E2A;&#x6838;&#x5FC3;&#x65F6;&#xFF0C;&#x505A;&#x67D0;&#x79CD;&#x8BA1;&#x7B97;&#x65F6;&#xFF0C;numpy&#x4F1A;&#x81EA;&#x52A8;&#x505A;&#x5E76;&#x884C;&#x8BA1;&#x7B97;&#x3002;&#x2003;&#x2003;Numpy&#x5E95;&#x5C42;&#x4F7F;&#x7528;C&#x8BED;&#x8A00;&#x7F16;&#x5199;&#xFF0C;&#x5185;&#x90E8;&#x89E3;&#x9664;&#x4E86;GIL&#xFF08;&#x5168;&#x5C40;&#x89E3;&#x91CA;&#x5668;&#x9501;&#xFF09;&#xFF0C;&#x5176;&#x5BF9;&#x6570;&#x7EC4;&#x7684;&#x64CD;&#x4F5C;&#x901F;&#x5EA6;&#x4E0D;&#x53D7;Python&#x89E3;&#x91CA;&#x5668;&#x7684;&#x9650;&#x5236;&#xFF0C;&#x6548;&#x7387;&#x8FDC;&#x9AD8;&#x4E8E;&#x7EAF;Python&#x4EE3;&#x7801;&#x3002; Numpy&#x5E94;&#x7528;Numpy&#x521B;&#x5EFA;&#x6570;&#x7EC4;array&#x65B9;&#x6CD5;1234import numpy as np# np.array(list) &#x5C06;list&#x8F6C;&#x6362;&#x4E3A;&#x6570;&#x7EC4;&#x7C7B;&#x578B;a = np.array([[1, 2, 3], [4, 5, 6]]) zeros&#xFF0C;ones&#xFF0C;eye&#x65B9;&#x6CD5;12345678910111213141516import numpy as np# np.zeros(shape, dtype=None) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x5168;0&#x6570;&#x7EC4;(&#x9ED8;&#x8BA4;&#x4E3A;float64)a = np.zeros((2,3))# np.ones(shape, dtype=None) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x5168;1&#x6570;&#x7EC4;(&#x9ED8;&#x8BA4;&#x4E3A;float64)b = np.ones((2,3))# np.zeros_like(array, dtype=None) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E0E;array&#x76F8;&#x540C;&#x7684;&#x5168;0&#x6570;&#x7EC4;(&#x9ED8;&#x8BA4;&#x4E3A;float64)c = np.zeros_like(b)# np.ones_like(array, dtype=None) &#x751F;&#x6210;&#x5F62;&#x72B6;&#x4E0E;array&#x76F8;&#x540C;&#x7684;&#x5168;1&#x6570;&#x7EC4;(&#x9ED8;&#x8BA4;&#x4E3A;float64)d = np.ones_like(a)# np.eye(m, n, k=0) &#x751F;&#x6210;m&#x884C;n&#x5217;&#x7684;&#x5355;&#x4F4D;&#x77E9;&#x9635;&#xFF0C;n&#x9ED8;&#x8BA4;&#x7B49;&#x4E8E;m&#xFF0C;k&#x4E3A;&#x4E0A;&#x4E0B;&#x7684;&#x504F;&#x79FB;&#x91CF;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;0(&#x9ED8;&#x8BA4;&#x4E3A;float64)e = np.eye(3, 4, 1) arange&#x65B9;&#x6CD5;1234import numpy as np# np.arange(start, stop, step, dtype=None) &#x751F;&#x6210;start&#x5230;stop&#xFF0C;&#x6B65;&#x957F;&#x4E3A;step&#x7684;&#x6570;&#x7EC4;a = np.arange(10, 20, 2) linspace&#xFF0C;logspace&#x65B9;&#x6CD5;1234567import numpy as np# np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None) &#x5C06;start&#x5230;stop&#x7B49;&#x5206;&#x6210;num&#x4E2A;&#x70B9;&#xFF0C;endpoint=True&#x4EE3;&#x8868;&#x5305;&#x62EC;stopa = np.linspace(10, 20, 6)# np.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None) &#x5C06;start&#x5230;stop&#x7B49;&#x5206;&#x6210;num&#x4E2A;&#x70B9;&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x70B9;i&#x7684;&#x503C;&#x4E3A;base&#x7684;i&#x6B21;&#x5E42;b = np.logspace(1, 2, 10) random&#x65B9;&#x6CD5;12345678910111213141516171819import numpy as np# np.random.seed(n) &#x8BBE;&#x5B9A;&#x968F;&#x673A;&#x79CD;&#x5B50;&#xFF0C;&#x4EE5;&#x5907;&#x540E;&#x9762;&#x7684;&#x7ED3;&#x679C;&#x53EF;&#x4EE5;&#x590D;&#x73B0;np.random.seed(1)# np.random.randint(low, high, shape=None) &#x4EA7;&#x751F;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x5206;&#x5E03;&#x533A;&#x95F4;&#x4E3A;[low, high)&#x7684;&#x968F;&#x673A;&#x6574;&#x6570;a = np.random.randint(0, 10, (3, 3))# np.random.rand(shape=None) &#x4EA7;&#x751F;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;[0-1)&#x5747;&#x5300;&#x968F;&#x673A;&#x6570;b = np.random.rand(3,3)# np.random.uniform(low=0.0, high=1.0, shape=None) &#x4EA7;&#x751F;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x5206;&#x5E03;&#x533A;&#x95F4;&#x4E3A;[low, high)&#x7684;&#x5747;&#x5300;&#x968F;&#x673A;&#x6570;c = np.random.uniform(0, 10, (3, 3))# np.random.randn(shape=None) &#x4EA7;&#x751F;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x5747;&#x503C;&#x4E3A;0&#xFF0C;&#x65B9;&#x5DEE;&#x4E3A;1&#x7684;&#x9AD8;&#x65AF;&#x968F;&#x673A;&#x6570;d = np.random.rand(3,3)# np.random.normal(loc=0.0, scale=1.0, shape=None) &#x4EA7;&#x751F;&#x5F62;&#x72B6;&#x4E3A;shape&#x7684;&#x5747;&#x503C;&#x4E3A;loc&#xFF0C;&#x6807;&#x51C6;&#x5DEE;&#x4E3A;scale&#x7684;&#x9AD8;&#x65AF;&#x968F;&#x673A;&#x6570;e = np.random.normal(5, 5, (3,3)) Numpy&#x5C5E;&#x6027;ndim&#xFF0C;shape&#xFF0C;size&#xFF0C;dtype&#x5C5E;&#x6027;123456789101112131415import numpy as npa = np.array([[1, 2, 3], [4, 5, 6]])# obj.ndim &#x67E5;&#x770B;&#x5BF9;&#x8C61;&#x7684;&#x7EF4;&#x5EA6;a.ndim# obj.shape &#x67E5;&#x770B;&#x5BF9;&#x8C61;&#x7684;&#x5F62;&#x72B6;a.shape# obj.size &#x67E5;&#x770B;&#x5BF9;&#x8C61;&#x7684;&#x5143;&#x7D20;&#x4E2A;&#x6570;a.size# obj.dtype &#x67E5;&#x770B;&#x5BF9;&#x8C61;&#x7684;&#x7C7B;&#x578B;(&#x6574;&#x6570;&#x9ED8;&#x8BA4;&#x4E3A;int32&#xFF0C;&#x6D6E;&#x70B9;&#x6570;&#x9ED8;&#x8BA4;&#x4E3A;float64)a.dtype Numpy&#x5207;&#x7247;&#x4E0E;&#x7D22;&#x5F15;:(&#x5192;&#x53F7;)&#x65B9;&#x6CD5;123456import numpy as npa = np.arange(12).reshape((3, 4))# obj[start:stop:step, ...]&#xFF0C;&#x6307;&#x5728;&#x67D0;&#x4E00;&#x7EF4;&#x5EA6;&#x4E0A;&#xFF0C;&#x4ECE;start&#x5F00;&#x59CB;&#xFF0C;&#x5230;stop&#x7ED3;&#x675F;&#xFF0C;&#x4E0D;&#x5305;&#x62EC;stop&#xFF0C;&#x95F4;&#x9694;&#x4E3A;step&#xFF0C;start&#x7701;&#x7565;&#x4E3A;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5F00;&#x59CB;&#xFF0C;stop&#x7701;&#x7565;&#x4E3A;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x7ED3;&#x675F;&#xFF0C;step&#x7701;&#x7565;&#x4E3A;&#x95F4;&#x9694;&#x4E3A;1b = a[1:, 0:4:2] &#x65B9;&#x6CD5;123456import numpy as npa = np.arange(12).reshape((3, 4))# obj[[x1, x2, ...], ...]&#xFF0C;&#x6307;&#x5728;&#x67D0;&#x4E00;&#x7EF4;&#x5EA6;&#x4E0A;&#xFF0C;&#x53D6;&#x51FA;x1,x2,...&#x6240;&#x5728;&#x4F4D;&#x7F6E;&#x7684;&#x5143;&#x7D20;b = a[[[1, 1], [2, 2]], [[0, 2], [0, 2]]] nonzero&#x65B9;&#x6CD5;12345678import numpy as npa = np.random.randint(0, 3, (3, 3))# np.nonzero(obj) &#x8FD4;&#x56DE;obj&#x4E2D;&#x975E;0&#x7684;&#x7D22;&#x5F15;b = a &gt; 1c = np.nonzero(a)d = np.nonzero(b) &#x65B9;&#x6CD5;123456import numpy as npa = np.arange(12).reshape((3, 4))# obj1[obj1 op obj2] &#x8FD4;&#x56DE;obj1&#x5BF9;obj2&#x64CD;&#x4F5C;&#x540E;&#x503C;&#x4E3A;True&#x7684;&#x503C;&#xFF0C;&#x5E76;&#x7528;&#x4E00;&#x7EF4;&#x6570;&#x7EC4;&#x4FDD;&#x5B58;b = a[a &gt; 5] ix_&#x65B9;&#x6CD5;123456789import numpy as npa = np.arange(12).reshape((3, 4))# obj[np.ix_(array1, array2, ...)] &#x6309;&#x7167;array1,array2,...&#x7684;&#x987A;&#x5E8F;&#x53D6;&#x51FA;&#x5143;&#x7D20;b = a[np.ix_([1, 2], [0, 2])]# &#x4E0E;&#x5217;&#x8868;&#x64CD;&#x4F5C;&#x5BF9;&#x6BD4;c = a[[1, 2], [0, 2]] split&#x65B9;&#x6CD5;1234567import numpy as npa = np.arange(12).reshape((2, 6))# np.split(obj, indices, axis=0) &#x5C06;obj&#x6309;&#x7167;axis&#x7684;&#x65B9;&#x5411;(0&#x4EE3;&#x8868;&#x6A2A;&#x5411;&#xFF0C;1&#x4EE3;&#x8868;&#x7EB5;&#x5411;)&#x5207;&#x5206;&#x3002;indices&#x4E3A;&#x6574;&#x6570;&#x6307;&#x5E73;&#x5747;&#x5207;&#x5206;&#x6210;indices&#x4EFD;&#xFF0C;&#x4E3A;&#x5217;&#x8868;&#x6307;&#x6309;&#x7167;&#x5217;&#x8868;&#x8FDB;&#x884C;&#x5207;&#x5206;&#x3002;b = np.split(a, 3, axis=1)c = np.split(a, [1, 3], axis=1) Numpy&#x63D2;&#x5165;&#xFF0C;&#x8FDE;&#x63A5;&#x4E0E;&#x5220;&#x9664;append&#x65B9;&#x6CD5;12345678import numpy as npa = np.arange(9).reshape((3, 3))# np.append(obj, array, axis=None) axis=None&#x65F6;&#xFF0C;&#x5C06;obj&#x5C55;&#x5F00;&#x4E3A;&#x4E00;&#x7EF4;&#x6570;&#x7EC4;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x4E0E;array&#x8FDE;&#x63A5;&#xFF0C;axis=0&#xFF0C;&#x5728;&#x7EB5;&#x5411;&#x8FDE;&#x63A5;&#x5728;&#x4E0B;&#x65B9;&#xFF0C;axis=1&#xFF0C;&#x5728;&#x6A2A;&#x5411;&#x8FDE;&#x63A5;&#x5728;&#x53F3;&#x65B9;b = np.append(a, [[9], [10], [11]])c = np.append(a, [[9,10,11]], axis=0)d = np.append(a, [[9], [10], [11]], axis=1) insert&#x65B9;&#x6CD5;12345678import numpy as npa = np.arange(9).reshape((3, 3))# np.insert(obj, index, array, axis=None) axis&#x7684;&#x7528;&#x6CD5;&#x540C;append&#x4E00;&#x6837;&#xFF0C;&#x591A;&#x4E86;index&#x9879;&#xFF0C;&#x53EF;&#x4EE5;&#x63D2;&#x5165;&#x5230;&#x4EFB;&#x610F;&#x4F4D;&#x7F6E;,&#x4E14;&#x4F4D;&#x6570;&#x4E0D;&#x76F8;&#x540C;&#x65F6;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x5E7F;&#x64AD;&#x64CD;&#x4F5C;b = np.insert(a, 2, 9)c = np.insert(a, 2, 9, axis=0)d = np.insert(a, 2, 9, axis=1) concatenate&#x65B9;&#x6CD5;12345678import numpy as npa = np.array([[1, 2], [3, 4]])b = np.array([[5, 6], [7, 8]])# np.concatenate((obj1, obj2, ...), axis=0) &#x5728;axis&#x8F74;&#x4E0A;&#x8FDE;&#x63A5;&#x4E24;&#x4E2A;&#x6570;&#x7EC4;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;axis=0c = np.concatenate((a, b))d = np.concatenate((a, b), axis=1) stack&#x65B9;&#x6CD5;12345678import numpy as npa = np.array([[1, 2], [3, 4]])b = np.array([[5, 6], [7, 8]])# np.stack((obj1, obj2, ...), axis=0) &#x5728;axis&#x7EF4;&#x5EA6;&#x4E0A;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x8F74;&#xFF0C;&#x5E76;&#x5728;&#x6B64;&#x8F74;&#x4E0A;&#x8FDE;&#x63A5;&#x6570;&#x7EC4;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;axis=0c = np.stack((a, b))d = np.stack((a, b), axis=1) delete&#x65B9;&#x6CD5;12345678import numpy as npa = np.arange(9).reshape((3, 3))# np.delete(obj, index, axis=None) axis&#x7684;&#x7528;&#x6CD5;&#x540C;append&#x4E00;&#x6837;&#xFF0C;&#x591A;&#x4E86;index&#x9879;&#xFF0C;&#x53EF;&#x4EE5;&#x5220;&#x9664;&#x4EFB;&#x610F;&#x4F4D;&#x7F6E;&#x7684;&#x5143;&#x7D20;b = np.delete(a, 1)c = np.delete(a, 1, axis=0)d = np.delete(a, 1, axis=1) Numpy&#x5E7F;&#x64AD;&#x4E0E;&#x590D;&#x5236;broadcast_to&#x65B9;&#x6CD5;1234567891011import numpy as npa = np.array([[1, 2, 3]])b = np.array([[1], [2], [3]])c = np.array([1])# np.broadcast_to(obj, shape) &#x5C06;obj&#x5E7F;&#x64AD;&#x81F3;shape&#x5F62;&#x72B6;# &#x539F;&#x7406;&#x662F;&#x5982;&#x679C;obj&#x7684;&#x7EF4;&#x5EA6;&#x6570;&#x5C0F;&#x4E8E;shape&#xFF0C;&#x5219;&#x5728;&#x5BF9;&#x5E94;&#x7EF4;&#x5EA6;&#x4F4D;&#x7F6E;&#x4E0A;&#x8865;1&#xFF0C;&#x6269;&#x5C55;&#x6210;&#x76F8;&#x540C;&#x7EF4;&#x5EA6;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x6240;&#x6709;&#x7684;1&#x7EF4;&#x5EA6;&#x590D;&#x5236;i&#x6B21;&#xFF0C;i&#x4E3A;shape&#x4E2D;&#x76F8;&#x5E94;&#x7684;&#x7EF4;&#x5EA6;d = np.broadcast_to(a, (3, 3)) # a&#x7684;&#x7EF4;&#x5EA6;&#x4E3A;(1, 3),&#x7EF4;&#x5EA6;&#x4E0E;(3, 3)&#x6570;&#x91CF;&#x76F8;&#x540C;&#xFF0C;&#x5219;&#x5C06;1&#x590D;&#x5236;3&#x6B21;&#xFF0C;&#x53D8;&#x6210;(3, 3)e = np.broadcast_to(b, (3, 3)) # b&#x7684;&#x7EF4;&#x5EA6;&#x4E3A;(3, 1),&#x7EF4;&#x5EA6;&#x4E0E;(3, 3)&#x6570;&#x91CF;&#x76F8;&#x540C;&#xFF0C;&#x5219;&#x5C06;1&#x590D;&#x5236;3&#x6B21;&#xFF0C;&#x53D8;&#x6210;(3, 3)f = np.broadcast_to(c, (3, 3)) # c&#x7684;&#x7EF4;&#x5EA6;&#x4E3A;(1),&#x7EF4;&#x5EA6;&#x4E0E;(3, 3)&#x6570;&#x91CF;&#x4E0D;&#x76F8;&#x540C;&#xFF0C;&#x5219;&#x5728;&#x5BF9;&#x5E94;&#x7EF4;&#x5EA6;&#x4F4D;&#x7F6E;&#x4E0A;&#x8865;1&#xFF0C;&#x6269;&#x5C55;&#x6210;&#x76F8;&#x540C;&#x7EF4;&#x5EA6;&#xFF0C;&#x53D8;&#x6210;(1, 1)&#xFF0C;&#x7136;&#x540E;&#x5C06;1&#x590D;&#x5236;3&#x6B21;&#xFF0C;&#x53D8;&#x6210;(3, 3) tile&#x65B9;&#x6CD5;123456import numpy as npa=np.array([[1, 2], [3, 4]])# np.tile(obj, (m, n, ...)) &#x5C06;obj&#x7684;&#x7EF4;&#x5EA6;&#x590D;&#x5236;(m, n, ...)&#x6B21;b = np.tile(a, (2, 3)) Numpy&#x6539;&#x53D8;&#x6570;&#x7EC4;&#x5F62;&#x72B6;reshape&#x65B9;&#x6CD5;123456import numpy as npa=np.array([[1, 2, 3], [4, 5, 6]])# obj.reshape(shape) &#x5C06;obj&#x7684;&#x5F62;&#x72B6;&#x6539;&#x53D8;&#x4E3A;shapeb = a.reshape((3, 2)) resize&#x65B9;&#x6CD5;1234567import numpy as npa = np.arange(9).reshape(3, 3)# np.resize(obj, shape) &#x5C06;obj&#x7684;&#x5927;&#x5C0F;&#x8C03;&#x6574;&#x4E3A;shape&#xFF0C;&#x5148;&#x6309;&#x987A;&#x5E8F;&#x8BFB;&#x53D6;&#xFF0C;&#x5C11;&#x5219;&#x4ECE;&#x5934;&#x8865;&#x5165;&#x6570;&#x636E;&#xFF0C;&#x591A;&#x5219;&#x5220;&#x9664;&#x591A;&#x4F59;&#x6570;&#x636E;b = np.resize(a, (2, 2))c = np.resize(a, (4, 4)) T(transpose)&#x65B9;&#x6CD5;123456import numpy as npa = np.array([[1, 2, 3], [4, 5, 6]])# obj.T &#x5C06;obj&#x8F6C;&#x7F6E;&#xFF0C;&#x7B49;&#x4EF7;&#x4E8E;np.transpose(obj)b = a.T swapaxes&#x65B9;&#x6CD5;123456import numpy as npa = np.arange(8).reshape(2, 2, 2)# np.swapaxes(obj, axis1, axis2) &#x4EA4;&#x6362;obj&#x7684;&#x4E24;&#x4E2A;&#x8F74;b = np.swapaxes(a, 0, 2) expand_dims&#x65B9;&#x6CD5;1234567import numpy as npa = np.array([1, 2, 3])# np.expand_dims(obj, axis) &#x5728;&#x6307;&#x5B9A;axis&#x63D2;&#x5165;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x8F74;b = np.expand_dims(a, 0)c = np.expand_dims(a, 1) squeeze&#x65B9;&#x6CD5;12345678import numpy as npa = np.array([[1, 2, 3]])b = np.array([[1], [2], [3]])# np.squeeze(obj, axis) &#x5728;&#x6307;&#x5B9A;axis&#x5220;&#x9664;&#x8F74;&#xFF0C;&#x5982;&#x679C;&#x8BE5;&#x8F74;&#x7684;&#x5927;&#x5C0F;&#x4E0D;&#x4E3A;1&#xFF0C;&#x5219;&#x65E0;&#x6CD5;&#x5220;&#x9664;&#x62A5;&#x9519;c = np.squeeze(a, 0)d = np.squeeze(b, 1) ravel&#xFF0C;flatten&#x65B9;&#x6CD5;12345678910111213import numpy as npa = np.arange(9).reshape(3, 3)b = np.arange(9).reshape(3, 3)# obj.ravel(order=&apos;C&apos;) &#x5C06;obj&#x5C55;&#x5E73;&#x4E3A;&#x4E00;&#x4F4D;&#x6570;&#x7EC4;&#xFF0C;&#x4E14;&#x4FEE;&#x6539;&#x6309;&#x884C;&#x5C55;&#x5E73;&#x540E;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x539F;&#x6570;&#x636E;&#x53D7;&#x5230;&#x6539;&#x53D8;&#x3002;order=&apos;C&apos;(&#x6309;&#x884C;&#x5C55;&#x5E73;&#x5143;&#x7D20;)&#xFF0C;&apos;F&apos; (&#x6309;&#x5217;&#x5C55;&#x5E73;&#x5143;&#x7D20;)&#xFF0C;&apos;A&apos; (&#x6309;&#x539F;&#x987A;&#x5E8F;&#x5C55;&#x5E73;&#x5143;&#x7D20;)&#xFF0C;&apos;K&apos;(&#x6309;&#x5185;&#x5B58;&#x4E2D;&#x7684;&#x51FA;&#x73B0;&#x987A;&#x5E8F;&#x5C55;&#x5E73;&#x5143;&#x7D20;)c = a.ravel()d = a.ravel(&apos;F&apos;)c[1] += 1# obj.flatten(order=&apos;C&apos;) &#x5C06;obj&#x5C55;&#x5E73;&#x4E3A;&#x4E00;&#x4F4D;&#x6570;&#x7EC4;&#xFF0C;&#x4E14;&#x4FEE;&#x6539;&#x6309;&#x884C;&#x5C55;&#x5E73;&#x540E;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x539F;&#x6570;&#x636E;&#x4E0D;&#x53D7;&#x5230;&#x6539;&#x53D8;&#x3002;order&#x7528;&#x6CD5;&#x540C;ravele = b.flatten()e[1] += 1 Numpy&#x6570;&#x5B66;&#x8FD0;&#x7B97;&#x8FD0;&#x7B97;&#x7B26;&#x65B9;&#x6CD5;12345678910import numpy as npa = np.arange(2, 10, 2).reshape(2, 2)b = np.arange(1, 5).reshape(2, 2)# &#x7B97;&#x672F;&#x8FD0;&#x7B97;(+&#xFF0C;-&#xFF0C;*&#xFF0C;/&#xFF0C;//&#xFF0C;%&#xFF0C;**&#xFF0C;&gt;&#xFF0C;&gt;=&#xFF0C;&lt;&#xFF0C;&lt;=&#xFF0C;==&#xFF0C;!=&#xFF0C;&amp;&#xFF0C;|&#xFF0C;^&#xFF0C;~&#xFF0C;&gt;&gt;&#xFF0C;&lt;&lt;)&#x8981;&#x6C42;&#x4E24;&#x4E2A;&#x6570;&#x7EC4;&#x5177;&#x6709;&#x540C;&#x6837;&#x7684;&#x5F62;&#x72B6;&#x6216;&#x8005;&#x53EF;&#x5E7F;&#x64AD;&#x4E3A;&#x540C;&#x6837;&#x5F62;&#x72B6;&#xFF0C;&#x903B;&#x8F91;&#x8FD0;&#x7B97;&#x8FD4;&#x56DE;&#x503C;&#x4E3A;True&#x6216;&#x8005;Falsec = a + bd = a - be = a * bf = a / b &#x7279;&#x6B8A;&#x503C;&#xFF0C;&#x5BF9;&#x6570;&#x51FD;&#x6570;&#xFF0C;&#x4E09;&#x89D2;&#x51FD;&#x6570;&#x65B9;&#x6CD5;12345678910111213141516import numpy as np# &#x7279;&#x6B8A;&#x503C;(&#x3C0;&#xFF0C;e&#xFF0C;&#x221E;&#xFF0C;Nan)a = np.pi / 2b = np.ec = np.infd = np.nan# np.log(obj)&#xFF0C;np.log2(obj)&#xFF0C;np.log10(obj) &#x5BF9;obj&#x6C42;&#x4EE5;e&#x4E3A;&#x5E95;&#xFF0C;2&#x4E3A;&#x5E95;&#xFF0C;10&#x4E3A;&#x5E95;&#x7684;&#x5BF9;&#x6570;e = np.log([b, 2, 10])f = np.log2([b, 2, 10])g = np.log10([b, 2, 10])# np.sin(obj)&#xFF0C;np.arcsin(obj) &#x5BF9;obj&#x6C42;sin&#x503C;&#x548C;arcsin&#x503C;&#xFF0C;&#x6240;&#x7528;&#x7684;&#x4E3A;&#x5F27;&#x5EA6;&#x503C;h = np.sin(a)i = np.arcsin(h) around&#xFF0C;floor&#xFF0C;ceil&#x65B9;&#x6CD5;1234567891011121314import numpy as npa = np.array([3.33, 5.55, 88.88])# np.around(obj, decimals=0) &#x56DB;&#x820D;&#x4E94;&#x5165;&#x64CD;&#x4F5C;&#xFF0C;decimals&#x5927;&#x4E8E;0&#xFF0C;&#x56DB;&#x820D;&#x4E94;&#x5165;&#x5230;&#x5C0F;&#x6570;&#x70B9;&#x53F3;&#x4FA7;&#xFF0C;&#x5C0F;&#x4E8E;0&#xFF0C;&#x56DB;&#x820D;&#x4E94;&#x5165;&#x5230;&#x5C0F;&#x6570;&#x70B9;&#x5DE6;&#x4FA7;b = np.around(a)c = np.around(a, 1)d = np.around(a, -1)# np.floor(obj) &#x5411;&#x4E0B;&#x53D6;&#x6574;e = np.floor(a)# np.ceil(obj) &#x5411;&#x4E0A;&#x53D6;&#x6574;f = np.ceil(a) sum&#xFF0C;cumsum&#xFF0C;cumprod&#x65B9;&#x6CD5;1234567891011121314import numpy as npa = np.random.randint(0, 5, (3, 3))# np.sum(obj, axis=None) &#x5C06;obj&#x5143;&#x7D20;&#x7D2F;&#x52A0;&#xFF0C;axis=None&#x4EE3;&#x8868;&#x5168;&#x5C40;&#xFF0C;axis=0&#x4EE3;&#x8868;&#x6BCF;&#x5217;&#xFF0C;axis=1&#x4EE3;&#x8868;&#x6BCF;&#x884C;b = np.sum(a)# np.cumsum(obj, axis=None) &#x5C06;obj&#x9010;&#x9879;&#x7D2F;&#x52A0;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;np.sumc = np.cumsum(a)d = np.cumsum(a, 0)# np.cumprod(obj, axis=None) &#x5C06;obj&#x9010;&#x9879;&#x7D2F;&#x4E58;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;np.sume = np.cumprod(a)f = np.cumprod(a, 1) ptp&#x65B9;&#x6CD5;12345678import numpy as npa = np.random.randint(0, 5, (3, 3))# np.ptp(obj, axis=None) &#x8BA1;&#x7B97;axis&#x8F74;&#x4E0A;&#x6700;&#x5927;&#x503C;&#x51CF;&#x6700;&#x5C0F;&#x503C;&#x7684;&#x7ED3;&#x679C;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;np.sumb = np.ptp(a)c = np.ptp(a, 0)d = np.ptp(a, 1) diff&#x65B9;&#x6CD5;12345678import numpy as npa = np.random.randint(0, 10, (5, 5))# np.diff(obj, n, axis) &#x8BA1;&#x7B97;n&#x9636;&#x5DEE;&#x5206;&#x8FD0;&#x7B97;&#xFF0C;axis&#x9ED8;&#x8BA4;&#x4E3A;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;b = np.diff(a, 1)c = np.diff(a, 2)d = np.diff(a, 1, 0) clip&#x65B9;&#x6CD5;123456import numpy as npa = np.random.randint(0, 10, (5, 5))# np.clip(obj, min_, max_) &#x5C06;obj&#x4E2D;&#x5C0F;&#x4E8E;min_&#x7684;&#x503C;&#x8D4B;&#x503C;&#x4E3A;min_&#xFF0C;&#x5C06;obj&#x4E2D;&#x5927;&#x4E8E;max_&#x7684;&#x503C;&#x8D4B;&#x503C;&#x4E3A;max_b = np.clip(a, 3, 7) Numpy&#x6570;&#x7406;&#x7EDF;&#x8BA1;unique&#x65B9;&#x6CD5;123456import numpy as npa = np.random.randint(0, 10, (5, 5))# np.unique(obj, return_index, return_inverse, return_counts) &#x7EDF;&#x8BA1;&#x5F97;&#x5230;&#x4E0D;&#x91CD;&#x590D;&#x5143;&#x7D20;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x662F;&#x4E00;&#x7EF4;&#x6570;&#x7EC4;&#xFF0C;&#x4F1A;&#x5C06;&#x6570;&#x7EC4;&#x5C55;&#x5F00;&#x3002;return_index=True&#x8FD4;&#x56DE;&#x4E0D;&#x91CD;&#x590D;&#x5143;&#x7D20;&#x5728;&#x539F;&#x6570;&#x7EC4;&#x4E2D;&#x7B2C;&#x4E00;&#x6B21;&#x51FA;&#x73B0;&#x7684;&#x7D22;&#x5F15;&#xFF0C;return_inverse=&#x8FD4;&#x56DE;&#x539F;&#x6570;&#x7EC4;&#x5728;&#x4E0D;&#x91CD;&#x590D;&#x5143;&#x7D20;&#x4E2D;&#x7684;&#x7D22;&#x5F15;, return_counts=&#x8FD4;&#x56DE;&#x6BCF;&#x4E2A;&#x4E0D;&#x91CD;&#x590D;&#x5143;&#x7D20;&#x5728;&#x539F;&#x6570;&#x7EC4;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;b, index, inverse, counts = np.unique(a, True, True, True) any&#xFF0C;all&#x65B9;&#x6CD5;1234567891011import numpy as npa = np.random.randint(0, 10, (5, 5))# np.any(obj) &#x5224;&#x65AD;obj&#x4E2D;&#x662F;&#x5426;&#x5B58;&#x5728;Trueb = np.any(a &gt; 5)c = np.any(a &gt; 10)# np.all(obj) &#x5224;&#x65AD;obj&#x4E2D;&#x662F;&#x5426;&#x5168;&#x90FD;&#x662F;Trued = np.all(a &gt;= 0)e = np.all(a &gt; 5) &#x7EDF;&#x8BA1;&#x65B9;&#x6CD5;12345678910111213141516171819202122232425262728import numpy as npa = np.random.randint(0, 10, (5, 5))# np.amax(obj, axis=None)&#xFF0C;np.amin(obj, axis=None) &#x7EDF;&#x8BA1;&#x6700;&#x5927;&#x6700;&#x5C0F;&#x503C;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;np.sumnp.amax(a)np.amax(a,0)np.amax(a,1)# np.argmax(obj, axis=None)&#xFF0C;np.argmin(obj, axis=None) &#x7EDF;&#x8BA1;&#x6700;&#x5927;&#x6700;&#x5C0F;&#x503C;&#x7684;&#x7D22;&#x5F15;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;np.sumnp.argmax(a)np.argmax(a,0)np.argmax(a,1)# np.mean(obj, axis=None) &#x7EDF;&#x8BA1;&#x4E2D;&#x4F4D;&#x6570;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;np.sumnp.median(a)# np.mean(obj, axis=None) &#x7EDF;&#x8BA1;&#x5747;&#x503C;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;np.sumnp.mean(a)# np.mean(obj, axis=None, weights=None) &#x7EDF;&#x8BA1;&#x52A0;&#x6743;&#x5E73;&#x5747;&#x503C;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;np.sumnp.average(a, None, a)# np.mean(obj, axis=None) &#x7EDF;&#x8BA1;&#x6807;&#x51C6;&#x5DEE;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;np.sumnp.std(a)# np.mean(obj, axis=None) &#x7EDF;&#x8BA1;&#x65B9;&#x5DEE;&#xFF0C;axis&#x7528;&#x6CD5;&#x540C;np.sumnp.var(a) sort&#xFF0C;argsort&#x65B9;&#x6CD5;1234567891011import numpy as npa = np.random.randint(0, 5, (3, 3))# np.sort(obj, axis, kind=&apos;quicksort&apos;, order=None) &#x5BF9;obj&#x8FDB;&#x884C;&#x4ECE;&#x5C0F;&#x5230;&#x8FBE;&#x6392;&#x5E8F;&#xFF0C;axis&#x4E3A;&#x6307;&#x5B9A;&#x8981;&#x6392;&#x5E8F;&#x7684;&#x8F74;&#xFF0C;axis=0&#x6309;&#x5217;&#x6392;&#x5E8F;&#xFF0C;axis=1&#x6309;&#x884C;&#x6392;&#x5E8F;&#x3002;kind&#x4E3A;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&apos;quicksort&apos;(&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#xFF0C;&#x9ED8;&#x8BA4;)&#xFF0C;&apos;mergesort&apos;(&#x5F52;&#x5E76;&#x6392;&#x5E8F;)&#xFF0C;&apos;heapsort&apos;(&#x5806;&#x6392;&#x5E8F;)&#xFF0C;order&#x4E3A;&#x8981;&#x6392;&#x5E8F;&#x7684;&#x5B57;&#x6BB5;&#xFF0C;&#x4E00;&#x822C;&#x6570;&#x5B66;&#x8FD0;&#x7B97;&#x4E0D;&#x7528;b = np.sort(a, 0)c = np.sort(a, 1)# np.argsort(obj, axis, kind=&apos;quicksort&apos;, order=None) &#x8FD4;&#x56DE;&#x6392;&#x5E8F;&#x540E;&#x7684;&#x6570;&#x7EC4;&#x5728;&#x539F;&#x6570;&#x7EC4;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x7528;&#x6CD5;&#x540C;sortd = np.argsort(a, 0)e = np.argsort(a, 1) Numpy&#x7EBF;&#x6027;&#x4EE3;&#x6570;dot&#xFF0C;matmul&#x65B9;&#x6CD5;12345678import numpy as npa = np.arange(6).reshape(2, 3)b = np.arange(6).reshape(3, 2)# np.dot(obj1, obj2) &#x7B49;&#x4EF7;&#x4E8E;np.matmul(obj1, obj2)&#xFF0C;&#x77E9;&#x9635;&#x4E58;&#x6CD5;c = np.dot(a, b)d = np.matmul(a, b) det&#xFF0C;eig&#xFF0C;pinv&#x65B9;&#x6CD5;123456789101112import numpy as npa = np.array([[-2, 1, 1], [0, 2, 0], [-4, 1, 3]])# np.linalg.det(obj) &#x8BA1;&#x7B97;obj&#x7684;&#x884C;&#x5217;&#x5F0F;b = np.linalg.det(a)# np.linalg.eig(obj) &#x8BA1;&#x7B97;obj&#x7684;&#x7279;&#x5F81;&#x503C;&#x548C;&#x7279;&#x5F81;&#x5411;&#x91CF;c = np.linalg.eig(a)# np.linalg.pinv(obj) &#x8BA1;&#x7B97;obj&#x7684;&#x4F2A;&#x9006;&#x77E9;&#x9635;d = np.linalg.pinv(a) solve&#x65B9;&#x6CD5;1234567import numpy as npa = np.array([[2, 2, -1], [1, -2, 4], [5, 8, -1]])b = np.array([[6], [3], [27]])# np.linalg.solve(A, b) &#x6C42;&#x7EBF;&#x6027;&#x65B9;&#x7A0B;&#x7EC4;Ax = b&#x7684;&#x89E3;c = np.linalg.solve(a, b) Numpy&#x6570;&#x636E;&#x4FDD;&#x5B58;save&#xFF0C;load&#x65B9;&#x6CD5;123456789import numpy as npa = np.arange(12).reshape(3, 4)# np.save(filename, obj) &#x5C06;obj&#x4FDD;&#x5B58;&#x5728;&#x6587;&#x4EF6;&#x540D;&#x4E3A;filename&#x7684;.npy&#x6587;&#x4EF6;&#x4E2D;(&#x53EF;&#x4EE5;&#x4E0D;&#x52A0;.npy&#x6269;&#x5C55;&#x540D;)np.save(&apos;save1&apos;, a)# np.load(filename) &#x8BFB;&#x53D6;&#x6587;&#x4EF6;&#x540D;&#x4E3A;filename&#x7684;&#x6570;&#x7EC4;&#x6570;&#x636E;(&#x8981;&#x52A0;.npy&#x6269;&#x5C55;&#x540D;)b = np.load(&apos;save1.npy&apos;) savez&#x65B9;&#x6CD5;123456789101112131415161718import numpy as npa = np.arange(12).reshape(3, 4)b = np.arange(6).reshape(2, 3)# np.savez(filename, name1=obj1, name2=obj2, ...) &#x5C06;&#x591A;&#x4E2A;&#x6570;&#x636E;&#x4FDD;&#x5B58;&#x5728;&#x6587;&#x4EF6;&#x540D;&#x4E3A;filename&#x7684;.npz&#x6587;&#x4EF6;&#x4E2D;(&#x53EF;&#x4EE5;&#x4E0D;&#x52A0;.npz&#x6269;&#x5C55;&#x540D;)&#xFF0C;obj1&#x7684;&#x53D8;&#x91CF;&#x540D;&#x4E3A;name1&#xFF0C;obj2&#x7684;&#x53D8;&#x91CF;&#x540D;&#x4E3A;name2&#xFF0C;&#x2026;&#x2026;(&#x53D8;&#x91CF;&#x7684;&#x9ED8;&#x8BA4;&#x540D;&#x79F0;&#x4E3A;arr_0&#xFF0C;arr_1&#xFF0C;&#x2026;&#x2026;)np.savez(&apos;save2&apos;, no_1=a, no_2=b)np.savez(&apos;save3&apos;, a, b)# np.load(filename) &#x8BFB;&#x53D6;&#x6587;&#x4EF6;&#x540D;&#x4E3A;filename&#x7684;&#x6570;&#x7EC4;&#x6570;&#x636E;(&#x8981;&#x52A0;.npz&#x6269;&#x5C55;&#x540D;)c = np.load(&apos;save2.npz&apos;)d = np.load(&apos;save3.npz&apos;)# &#x63D0;&#x53D6;&#x6570;&#x636E;&#x65F6;&#x8981;&#x4F7F;&#x7528;&#x6570;&#x7EC4;&#x7684;&#x540D;&#x79F0;e = c[&apos;no_1&apos;]f = c[&apos;no_2&apos;]g = d[&apos;arr_0&apos;]h = d[&apos;arr_1&apos;] savetxt&#xFF0C;loadtxt&#x65B9;&#x6CD5;12345678910111213import numpy as npa = np.arange(12).reshape(3, 4)b = np.array([1,2,3,4])c = np.array([5,6,7,8])# np.savetxt(filename, obj, fmt=&apos;%f&apos;, delimiter=&apos; &apos;) &#x5C06;&#x591A;&#x4E2A;&#x4E00;&#x7EF4;&#x6570;&#x636E;(&#x76F8;&#x540C;&#x5927;&#x5C0F;)&#x6216;&#x8005;&#x4E00;&#x4E2A;&#x4E8C;&#x7EF4;&#x7EF4;&#x6570;&#x636E;&#x4FDD;&#x5B58;&#x5728;&#x6587;&#x4EF6;&#x540D;&#x4E3A;filename&#x7684;.txt&#x6587;&#x4EF6;&#x4E2D;(&#x8981;&#x52A0;.txt&#x6269;&#x5C55;&#x540D;)&#xFF0C;&#x683C;&#x5F0F;&#x4E3A;fmt(&#x9ED8;&#x8BA4;&#x4E3A;&#x6D6E;&#x70B9;&#x578B;)&#xFF0C;&#x5206;&#x9694;&#x7B26;&#x4E3A;delimiter(&#x9ED8;&#x8BA4;&#x4E3A;&apos; &apos;)&#xFF0C;&#x4FDD;&#x5B58;&#x65F6;&#x4F1A;&#x5C06;&#x591A;&#x4E2A;&#x4E00;&#x7EF4;&#x6570;&#x7EC4;&#x8F6C;&#x5316;&#x6210;&#x4E00;&#x4E2A;&#x4E8C;&#x7EF4;&#x6570;&#x7EC4;np.savetxt(&apos;save4.txt&apos;, a)np.savetxt(&apos;save5.txt&apos;, (b, c))# np.loadtxt(filename, dtype=&apos;float&apos;, delimiter=&apos; &apos;) &#x8BFB;&#x53D6;&#x6587;&#x4EF6;&#x540D;&#x4E3A;filename&#x7684;&#x6570;&#x7EC4;&#x6570;&#x636E;(&#x8981;&#x52A0;.txt&#x6269;&#x5C55;&#x540D;)&#xFF0C;&#x7C7B;&#x578B;&#x4E3A;dtypefloat(&#x9ED8;&#x8BA4;&#x4E3A;&#x6D6E;&#x70B9;&#x578B;)&#xFF0C;&#x5206;&#x9694;&#x7B26;&#x4E3A;delimiter(&#x9ED8;&#x8BA4;&#x4E3A;&apos; &apos;)d = np.loadtxt(&apos;save4.txt&apos;)e = np.loadtxt(&apos;save5.txt&apos;) Numpy&#x5C0F;&#x7ED3;&#x2003;&#x2003;&#x7531;&#x4E8E;numpy&#x652F;&#x6301;&#x5404;&#x79CD;&#x77E9;&#x9635;&#x8FD0;&#x7B97;&#xFF0C;&#x4E14;&#x8FD0;&#x7B97;&#x6548;&#x7387;&#x975E;&#x5E38;&#x9AD8;&#xFF0C;&#x56E0;&#x6B64;numpy&#x5E93;&#x5E7F;&#x6CDB;&#x5E94;&#x7528;&#x4E8E;&#x6570;&#x636E;&#x5206;&#x6790;&#xFF0C;&#x673A;&#x5668;&#x5B66;&#x4E60;&#xFF0C;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7B49;&#x5404;&#x4E2A;&#x9886;&#x57DF;&#xFF0C;&#x5176;&#x4F5C;&#x4E3A;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x4E09;&#x5251;&#x5BA2;&#x4E4B;&#x4E00;&#xFF0C;&#x4E5F;&#x53D7;&#x5230;&#x5E7F;&#x5927;&#x4F7F;&#x7528;&#x8005;&#x7684;&#x559C;&#x7231;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>常用库</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Scikit-Learn]]></title>
    <url>%2F2019%2F08%2F12%2Flibrary%20Sklearn%2F</url>
    <content type="text"><![CDATA[Scikit-Learn&#x4ECB;&#x7ECD;&#x2003;&#x2003;Scikit-Learn&#x5E93;&#x81EA;2007&#x5E74;&#x53D1;&#x5E03;&#x4EE5;&#x6765;&#xFF0C;&#x5DF2;&#x7ECF;&#x79F0;&#x4E3A;&#x6700;&#x53D7;&#x6B22;&#x8FCE;&#x7684;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x5E93;&#x4E4B;&#x4E00;&#xFF0C;&#x57FA;&#x4E8E;&#x5E7F;&#x53D7;&#x6B22;&#x8FCE;&#x7684;Numpy&#x548C;Scipy&#x5E93;&#x6784;&#x5EFA;&#xFF0C;&#x80FD;&#x591F;&#x63D0;&#x4F9B;&#x7528;&#x4E8E;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x6570;&#x636E;&#x9884;&#x5904;&#x7406;&#x7B49;&#x529F;&#x80FD;&#x3002; Scikit-Learn&#x5E94;&#x7528;Scikit-Learn&#x7EBF;&#x6027;&#x56DE;&#x5F52;1234567891011121314151617181920212223242526272829303132333435363738import numpy as npimport matplotlib.pyplot as pltfrom sklearn.linear_model import LinearRegressionx_train = np.array([[6], [8], [10], [14], [18]]).reshape(-1, 1)y_train = np.array([7, 9, 13, 17.5, 18])# model = LinearRegression() &#x521B;&#x5EFA;&#x7EBF;&#x6027;&#x56DE;&#x5F52;&#x6A21;&#x578B;model = LinearRegression()# model.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;model.fit(x_train, y_train)x_test = np.array([[12]]).reshape(-1, 1)# model.predict(X) &#x7528;&#x8BAD;&#x7EC3;&#x540E;&#x7684;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x6570;&#x636E;Xy_test = model.predict(x_test)[0]x_max, x_min = max(x_train), min(x_train)y_max, y_min = model.predict([x_max, x_min])# model.coef_ &#x83B7;&#x53D6;&#x6A21;&#x578B;&#x7684;&#x6743;&#x503C;&#x7CFB;&#x6570;k = model.coef_[0]x_mean, y_mean = np.mean(x_train), np.mean(y_train)b = y_mean - k * x_meanplt.figure()plt.title(&apos;Pizza price against diameter:\n&apos; + str(k) + &apos;x + &apos; + str(b) + &apos;= y&apos;)plt.xlabel(&apos;Pizza diamter&apos;)plt.ylabel(&apos;Pizza price&apos;)plt.plot(x_train, y_train, &apos;k.&apos;, label=&apos;train_dot&apos;)plt.plot(x_test, y_test, &apos;ro&apos;, label=&apos;predict_dot&apos;)plt.plot([x_max, x_min], [y_max, y_min])plt.text(x_test, y_test, &apos;(&apos; + str(x_test[0][0]) + &apos;,&apos; + str(y_test) + &apos;)&apos;)plt.legend()plt.grid(True)plt.style.use(&apos;ggplot&apos;)plt.show() Scikit-LearnK&#x8FD1;&#x90BB;&#x5206;&#x7C7B;&#x7B97;&#x6CD5;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485import numpy as npimport matplotlib.pyplot as pltfrom sklearn.preprocessing import LabelBinarizerfrom sklearn.neighbors import KNeighborsClassifierfrom sklearn.metrics import accuracy_scorefrom sklearn.metrics import precision_scorefrom sklearn.metrics import recall_scorefrom sklearn.metrics import f1_scorefrom sklearn.metrics import matthews_corrcoeffrom sklearn.metrics import classification_reportdef classify(x, y): male_height, male_weight, female_height, female_weight = [], [], [], [] for i in range(len(x)): if y[i] == &apos;male&apos;: male_height.append(x[i][0]) male_weight.append(x[i][1]) else: female_height.append(x[i][0]) female_weight.append(x[i][1]) return male_height, male_weight, female_height, female_weightx_train = np.array([[158, 64], [170, 66], [183, 84], [191, 80], [155, 49], [163, 59], [180, 67], [158, 54], [178, 77]])y_train = [&apos;male&apos;, &apos;male&apos;, &apos;male&apos;, &apos;male&apos;, &apos;female&apos;, &apos;female&apos;, &apos;female&apos;, &apos;female&apos;, &apos;female&apos;] # lb = LabelBinarizer() &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x6807;&#x7B7E;&#x8F6C;&#x6362;&#x5668;&#x63A5;&#x53E3;&#xFF0C;&#x5C06;&#x6807;&#x7B7E;&#x53D8;&#x6210;&#x6574;&#x6570;lb = LabelBinarizer()# lb.fit_transform(y) &#x5728;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x96C6;&#x4E0A;&#x5BF9;&#x6807;&#x7B7E;&#x8FDB;&#x884C;&#x62DF;&#x5408;&#x5E76;&#x8F6C;&#x6362;&#x4E3A;&#x6574;&#x6570;y_train_binarized = lb.fit_transform(y_train)k = 3# clf = KNeighborsClassifier(n_neighbors=k) &#x521B;&#x5EFA;KNN&#x5206;&#x7C7B;&#x5668;&#x6A21;&#x578B;clf = KNeighborsClassifier(n_neighbors=k)# clf.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;clf.fit(x_train,y_train_binarized.reshape(-1))x_test = np.array([[168, 65], [170, 61], [160, 52], [169, 67]])y_test = [&apos;male&apos;, &apos;male&apos;, &apos;female&apos;, &apos;female&apos;]# clf.predict(X) &#x7528;&#x8BAD;&#x7EC3;&#x540E;&#x7684;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x6570;&#x636E;Xy_pre_binarized = clf.predict(x_test)# lb.inverse_transform(Y) &#x5C06;&#x9884;&#x6D4B;&#x540E;&#x7684;&#x6574;&#x6570;&#x8F6C;&#x6362;&#x6210;&#x6807;&#x7B7E;y_pre = lb.inverse_transform(y_pre_binarized)male_height_train, male_weight_train, female_height_train, female_weight_train = classify(x_train, y_train)male_height_pre, male_weight_pre, female_height_pre, female_weight_pre = classify(x_test, y_pre)y_test_binarized = lb.transform(y_test).T[0]print(y_test_binarized)print(y_pre_binarized)# accuracy_score(y_test, y_predict) &#x6C42;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x51C6;&#x786E;&#x7387;print(&apos;&#x9884;&#x6D4B;&#x51C6;&#x786E;&#x7387;&#x4E3A;:%.2f&apos; %accuracy_score(y_test_binarized, y_pre_binarized))# precision_score(y_test, y_predict) &#x6C42;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x7CBE;&#x51C6;&#x7387;print(&apos;&#x9884;&#x6D4B;&#x7CBE;&#x51C6;&#x7387;&#x4E3A;:%.2f&apos; %precision_score(y_test_binarized, y_pre_binarized))# recall_score(y_test, y_predict) &#x6C42;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x53EC;&#x56DE;&#x7387;print(&apos;&#x9884;&#x6D4B;&#x53EC;&#x56DE;&#x7387;&#x4E3A;:%.2f&apos; %recall_score(y_test_binarized, y_pre_binarized))# f1_score(y_test, y_predict) &#x6C42;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;F1&#x5F97;&#x5206;print(&apos;&#x9884;&#x6D4B;F1&#x5F97;&#x5206;&#x4E3A;:%.2f&apos; %f1_score(y_test_binarized, y_pre_binarized))# matthews_corrcoef(y_test, y_predict) &#x6C42;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x9A6C;&#x4FEE;&#x65AF;&#x7CFB;&#x6570;print(&apos;&#x9A6C;&#x4FEE;&#x65AF;&#x7CFB;&#x6570;&#x4E3A;:%.2f&apos; %matthews_corrcoef(y_test_binarized, y_pre_binarized))# classification_report(y_test, y_predict, target_names=None, labels=None) &#x540C;&#x65F6;&#x751F;&#x6210;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x7CBE;&#x51C6;&#x7387;&#xFF0C;&#x53EC;&#x56DE;&#x7387;&#x548C;F1&#x5F97;&#x5206;&#xFF0C;&#x76EE;&#x6807;&#x6807;&#x7B7E;&#x4E3A;target_name&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#x4E3A;labelprint(classification_report(y_test_binarized, y_pre_binarized, target_names={&apos;male&apos;}, labels=[1]))plt.style.use(&apos;ggplot&apos;)plt.figure()plt.title(&apos;Human Height and Weight By Sex:&apos;)plt.xlabel(&apos;Height&apos;)plt.ylabel(&apos;Weight&apos;)plt.grid(True)plt.scatter(male_height_train, male_weight_train, color=&apos;b&apos;, marker=&apos;o&apos;, label=&apos;train_male&apos;)plt.scatter(female_height_train, female_weight_train, color=&apos;r&apos;, marker=&apos;o&apos;, label=&apos;train_female&apos;)plt.scatter(male_height_pre, male_weight_pre, color=&apos;b&apos;, marker=&apos;*&apos;, label=&apos;pre_male&apos;)plt.scatter(female_height_pre, female_weight_pre, color=&apos;r&apos;, marker=&apos;*&apos;, label=&apos;pre_female&apos;)plt.legend()plt.show() Scikit-LearnK&#x8FD1;&#x90BB;&#x56DE;&#x5F52;&#x7B97;&#x6CD5;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import numpy as npfrom sklearn.neighbors import KNeighborsRegressorfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_scorefrom sklearn.preprocessing import StandardScalerx_train = np.array([[158, 1], [170, 1], [183, 1], [191, 1], [155, 0], [163, 0], [180, 0], [158, 0], [170, 0]])y_train = np.array([64, 86, 84, 80, 49, 59, 67, 54, 67])x_test = np.array([[168, 1], [180, 1], [160, 0], [169, 0]])y_test = [65, 96, 52, 67]k = 3# clf = KNeighborsRegressor(n_neighbors=k) &#x521B;&#x5EFA;KNN&#x56DE;&#x5F52;&#x6A21;&#x578B;clf = KNeighborsRegressor(n_neighbors=k)# clf.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;clf.fit(x_train, y_train)# clf.predict(X) &#x7528;&#x8BAD;&#x7EC3;&#x540E;&#x7684;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x6570;&#x636E;Xpre = clf.predict(x_test)print([np.around(x, 2) for x in pre])# r2_score(y_test, y_predict) &#x6C42;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x51B3;&#x5B9A;&#x7CFB;&#x6570;print(&apos;Coefficiet of determination: %.2f&apos; %r2_score(y_test, pre))# mean_absolute_erro(y_test, y_predict) &#x6C42;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x5E73;&#x5747;&#x7EDD;&#x5BF9;&#x8BEF;&#x5DEE;MAEprint(&apos;Mean absolute error: %.2f&apos; %mean_absolute_error(y_test, pre))# mean_squared_error(y_test, y_predict) &#x6C42;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x5747;&#x65B9;&#x8BEF;&#x5DEE;MSEprint(&apos;Mean squared error: %.2f&apos; %mean_squared_error(y_test, pre))print(&apos;\n&apos; + &apos;Scaled Processing&apos;.center(30, &apos;~&apos;) + &apos;\n&apos;)# ss = StandardScaler() &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x7279;&#x5F81;&#x7F29;&#x653E;&#x8F6C;&#x6362;&#x63A5;&#x53E3;ss = StandardScaler()# ss.fit_transform(x) &#x5728;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x96C6;&#x4E0A;&#x5BF9;&#x6570;&#x636E;&#x7279;&#x5F81;&#x8FDB;&#x884C;&#x7F29;&#x653E;x_train_scaled = ss.fit_transform(x_train)# ss.transform(x) &#x5728;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x96C6;&#x4E0A;&#x5BF9;&#x6570;&#x636E;&#x7279;&#x5F81;&#x8FDB;&#x884C;&#x7F29;&#x653E;x_test_scaled = ss.transform(x_test) clf.fit(x_train_scaled, y_train)pre_scaled = clf.predict(x_test_scaled)print([np.around(x, 2) for x in pre_scaled])print(&apos;Coefficiet of determination: %.2f&apos; %r2_score(y_test, pre_scaled))print(&apos;Mean absolute error: %.2f&apos; %mean_absolute_error(y_test, pre_scaled))print(&apos;Mean squared error: %.2f&apos; %mean_squared_error(y_test, pre_scaled)) Scikit-Learn&#x72EC;&#x70ED;&#x7F16;&#x7801;1234567891011from sklearn.feature_extraction import DictVectorizer# onehot_encoder = DictVectorizer() &#x521B;&#x5EFA;&#x72EC;&#x70ED;&#x7F16;&#x7801;&#x8F6C;&#x6362;&#x5668;onehot_encoder = DictVectorizer()x = [{&apos;city&apos;: &apos;New York&apos;}, {&apos;city&apos;: &apos;San Francisco&apos;}, {&apos;city:&apos;: &apos;Chapel Hill&apos;}]# onehot_encoder.fit_transform(x).toarray() &#x5C06;&#x5B57;&#x5178;&#x7684;&#x503C;value&#x8FDB;&#x884C;&#x72EC;&#x70ED;&#x7F16;&#x7801;onehot_x = onehot_encoder.fit_transform(x).toarray()print(onehot_x) Scikit-Learn&#x7279;&#x5F81;&#x6807;&#x51C6;&#x5316;12345678910111213141516import numpy as npfrom sklearn import preprocessingx = np.array([[0., 0., 5., 13., 9., 1.], [0., 0., 13., 15., 10., 15.], [0., 3., 15., 2., 0., 11.]])# preprocessing.StandardScaler().fit_transform(x) &#x4F7F;&#x7528;&#x6807;&#x51C6;&#x5316;&#x8F6C;&#x6362;&#x5668;&#x7C7B;&#x51FD;&#x6570;x_standard_scaled = preprocessing.StandardScaler().fit_transform(x)print(x_standard_scaled)# preprocessing.scale(x) &#x4F7F;&#x7528;&#x6807;&#x51C6;&#x5316;&#x51FD;&#x6570;scalex_scaled = preprocessing.scale(x)print(x_scaled)# preprocessing.robust_scale(x) &#x4F7F;&#x7528;&#x9C81;&#x68D2;&#x6027;&#x6807;&#x51C6;&#x5316;&#x51FD;&#x6570;robust_scalex_robust_scaled = preprocessing.robust_scale(x)print(x_robust_scaled) Scikit-Learn&#x591A;&#x5143;&#x7EBF;&#x6027;&#x56DE;&#x5F52;12345678910111213141516171819202122from sklearn.linear_model import LinearRegressionx = [[6, 2], [8, 1], [10, 0], [14, 2], [18, 0]]y = [[7], [9], [13], [17.5], [18]]# model = LinearRegression() &#x521B;&#x5EFA;&#x7EBF;&#x6027;&#x56DE;&#x5F52;&#x6A21;&#x578B;model = LinearRegression()# model.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;model.fit(x, y)x_test = [[8, 2], [9, 0], [11, 2], [16, 2], [12, 0]]y_test = [[11], [8.5], [15], [18], [11]]# model.predict(X) &#x7528;&#x8BAD;&#x7EC3;&#x540E;&#x7684;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x6570;&#x636E;Xpredictions = model.predict(x_test)for i, prediction in enumerate(predictions): print(&apos;prediction: %s, truth: %s&apos; %(prediction, y_test[i]))# model.score(x, y) &#x6C42;&#x6A21;&#x578B;&#x7684;&#x51B3;&#x5B9A;&#x7CFB;&#x6570;print(&apos;R-squared: %.2f&apos; %model.score(x_test, y_test)) Scikit-Learn&#x591A;&#x9879;&#x5F0F;&#x56DE;&#x5F52;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758import numpy as npimport matplotlib.pyplot as pltfrom sklearn.linear_model import LinearRegressionfrom sklearn.preprocessing import PolynomialFeaturesplt.style.use(&apos;ggplot&apos;)x_train = [[6], [8], [10], [14], [18]]y_train = [[7], [9], [13], [17.5], [18]]x_test = [[6], [8], [11], [16]]y_test = [[8], [12], [15], [18]]# model = LinearRegression() &#x521B;&#x5EFA;&#x7EBF;&#x6027;&#x56DE;&#x5F52;&#x6A21;&#x578B;regressor = LinearRegression()# model.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;regressor.fit(x_train, y_train)xx = np.linspace(0, 26, 100)# model.predict(X) &#x7528;&#x8BAD;&#x7EC3;&#x540E;&#x7684;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x6570;&#x636E;Xyy = regressor.predict(xx.reshape(xx.shape[0], 1))plt.plot(xx, yy, c=&apos;b&apos;, label=&apos;Linear_poly&apos;)# quadratic_featurizer = PolynomialFeatures(degree=n) &#x521B;&#x5EFA;n&#x9636;&#x591A;&#x9879;&#x5F0F;&#x8F6C;&#x6362;&#x5668;quadratic_featurizer = PolynomialFeatures(degree=2)# quadratic_featurizer.fit_transform(x_train) &#x5728;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x96C6;&#x4E0A;&#x5BF9;&#x6570;&#x636E;&#x7279;&#x5F81;&#x8FDB;&#x884C;&#x591A;&#x9879;&#x5F0F;&#x53D8;&#x6362;x_train_quadratic = quadratic_featurizer.fit_transform(x_train)# ss.fit_transform(x) &#x5728;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x96C6;&#x4E0A;&#x5BF9;&#x6570;&#x636E;&#x7279;&#x5F81;&#x8FDB;&#x884C;&#x591A;&#x9879;&#x5F0F;&#x53D8;&#x6362;x_test_quadratic = quadratic_featurizer.transform(x_test)# model = LinearRegression() &#x521B;&#x5EFA;&#x7EBF;&#x6027;&#x56DE;&#x5F52;&#x6A21;&#x578B;regressor_quadratic = LinearRegression()# model.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;regressor_quadratic.fit(x_train_quadratic, y_train)# ss.fit_transform(x) &#x5BF9;&#x6570;&#x636E;&#x7279;&#x5F81;&#x8FDB;&#x884C;&#x591A;&#x9879;&#x5F0F;&#x53D8;&#x6362;xx_quadratic = quadratic_featurizer.transform(xx.reshape(xx.shape[0], 1))# model.predict(X) &#x7528;&#x8BAD;&#x7EC3;&#x540E;&#x7684;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x6570;&#x636E;Xyy_quadratic = regressor_quadratic.predict(xx_quadratic)print(&apos;linear regression r-squared&apos;, regressor.score(x_test, y_test))print(&apos;quadratic regression r-squared&apos;, regressor_quadratic.score(x_test_quadratic, y_test))plt.plot(xx, yy_quadratic, c=&apos;r&apos;, label=&apos;square_poly&apos;)plt.scatter(x_train, y_train, label=&apos;data&apos;)plt.axis([0, 25, 0, 25])plt.title(&apos;Pizza price and diameter&apos;)plt.xlabel(&apos;Diameter in inches&apos;)plt.ylabel(&apos;Pizza Price&apos;)plt.grid(True)plt.legend()plt.show() Scikit-Learn&#x903B;&#x8F91;&#x56DE;&#x5F52;&#x548C;&#x6734;&#x7D20;&#x8D1D;&#x53F6;&#x65AF;123456789101112131415161718192021222324252627282930313233343536373839404142434445from sklearn.datasets import load_breast_cancerfrom sklearn.linear_model import LogisticRegressionfrom sklearn.naive_bayes import GaussianNBfrom sklearn.model_selection import train_test_splitimport matplotlib.pyplot as plt# from sklearn.datasets import load_breast_cancer &#x4ECE;sklearn&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x5BFC;&#x5165;&#x80F8;&#x90E8;&#x764C;&#x75C7;&#x7684;&#x6570;&#x636E;x, y = load_breast_cancer(return_X_y=True)# train_test_split(x, y, stratify=y, test_size=n) &#x5C06;x&#x548C;y&#x6309;&#x7167;test_size&#x5212;&#x5206;&#x6210;&#x6570;&#x636E;&#x96C6;&#x548C;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;stratify=y&#x6309;&#x7167;y&#x4E2D;&#x7684;&#x6BD4;&#x4F8B;&#x5206;&#x914D;x_train, x_test, y_train, y_test = train_test_split(x, y, stratify=y, test_size=0.2, random_state=31)# lr = LogisticRegression() &#x521B;&#x5EFA;&#x903B;&#x8F91;&#x56DE;&#x5F52;&#x6A21;&#x578B;lr = LogisticRegression(solver=&apos;liblinear&apos;)# nb = GaussianNB() &#x521B;&#x5EFA;&#x6734;&#x7D20;&#x8D1D;&#x53F6;&#x65AF;&#x6A21;&#x578B;nb = GaussianNB()lr_scores = []nb_scores = []train_sizes = range(10, len(x_train), 25)for train_size in train_sizes: # train_test_split(x, y, stratify=y, train_size=n) &#x5C06;x&#x548C;y&#x6309;&#x7167;test_size&#x5212;&#x5206;&#x6210;&#x6570;&#x636E;&#x96C6;&#x548C;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;stratify=y&#x6309;&#x7167;y&#x4E2D;&#x7684;&#x6BD4;&#x4F8B;&#x5206;&#x914D; x_slice, _, y_slice, _ = train_test_split(x_train, y_train, train_size=train_size, stratify=y_train, random_state=31) # nb.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6734;&#x7D20;&#x8D1D;&#x53F6;&#x65AF;&#x6A21;&#x578B; nb.fit(x_slice, y_slice) # nb.score(x, y) &#x6C42;&#x6734;&#x7D20;&#x8D1D;&#x53F6;&#x65AF;&#x6A21;&#x578B;&#x7684;&#x51B3;&#x5B9A;&#x7CFB;&#x6570; nb_scores.append(nb.score(x_test, y_test)) # lr.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x903B;&#x8F91;&#x56DE;&#x5F52;&#x6A21;&#x578B; lr.fit(x_slice, y_slice) # lr.score(x, y) &#x6C42;&#x903B;&#x8F91;&#x56DE;&#x5F52;&#x6A21;&#x578B;&#x7684;&#x51B3;&#x5B9A;&#x7CFB;&#x6570; lr_scores.append(lr.score(x_test, y_test))plt.plot(train_sizes, nb_scores, label=&apos;Naive Bayes&apos;)plt.plot(train_sizes, lr_scores, linestyle=&apos;--&apos;, label=&apos;Logistic Regression&apos;)plt.title(&apos;Naive Bayes and Logistic Regression accuracies&apos;)plt.xlabel(&apos;Number of training instances&apos;)plt.ylabel(&apos;Test set accuracy&apos;)plt.legend()plt.show() Scikit-Learn&#x51B3;&#x7B56;&#x6811;&#x548C;&#x888B;&#x88C5;&#x96C6;&#x6210;&#x5B66;&#x4E60;1234567891011121314151617181920212223242526272829303132333435from sklearn.tree import DecisionTreeClassifierfrom sklearn.ensemble import RandomForestClassifierfrom sklearn.datasets import make_classificationfrom sklearn.model_selection import train_test_splitfrom sklearn.metrics import classification_report# from sklearn.datasets import make_classification &#x4ECE;sklearn&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x5BFC;&#x5165;make_classification&#x7528;&#x4E8E;&#x521B;&#x5EFA;&#x5206;&#x7C7B;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x6837;&#x672C;&#x6570;&#x4E3A;n_samples&#xFF0C;&#x7279;&#x5F81;&#x6570;&#x4E3A;n_features&#xFF0C;&#x6709;&#x7528;&#x7684;&#x7279;&#x5F81;&#x6570;&#x4E3A;n_informative&#xFF0C;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x7C07;&#x7684;&#x4E2A;&#x6570;&#x4E3A;n_clusters_per_classx, y = make_classification(n_samples=1000, n_features=100, n_informative=20, n_clusters_per_class=2, random_state=11)# train_test_split(x, y) &#x5C06;x&#x548C;y&#x5212;&#x5206;&#x6210;&#x6570;&#x636E;&#x96C6;&#x548C;&#x6D4B;&#x8BD5;&#x96C6;x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=11)# clf = DecisionTreeClassifier() &#x521B;&#x5EFA;&#x51B3;&#x7B56;&#x6811;&#x6A21;&#x578B;clf = DecisionTreeClassifier(random_state=11)# clf.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;clf.fit(x_train, y_train)# clf.predict(X) &#x7528;&#x8BAD;&#x7EC3;&#x540E;&#x7684;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x6570;&#x636E;Xpredictions = clf.predict(x_test)# classification_report(y_test, y_predict, target_names=None, labels=None) &#x540C;&#x65F6;&#x751F;&#x6210;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x7CBE;&#x51C6;&#x7387;&#xFF0C;&#x53EC;&#x56DE;&#x7387;&#x548C;F1&#x5F97;&#x5206;&#xFF0C;&#x76EE;&#x6807;&#x6807;&#x7B7E;&#x4E3A;target_name&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#x4E3A;labelprint(classification_report(y_test, predictions))# clf = RandomForestClassifier(n_estimators=n) &#x521B;&#x5EFA;&#x5305;&#x542B;n&#x4E2A;&#x6811;&#x7684;&#x968F;&#x673A;&#x68EE;&#x6797;&#x5206;&#x7C7B;&#x5668;clf = RandomForestClassifier(n_estimators=10, random_state=11)# clf.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;clf.fit(x_train, y_train)# clf.predict(X) &#x7528;&#x8BAD;&#x7EC3;&#x540E;&#x7684;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x6570;&#x636E;Xpredictions = clf.predict(x_test)# classification_report(y_test, y_predict, target_names=None, labels=None) &#x540C;&#x65F6;&#x751F;&#x6210;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x7CBE;&#x51C6;&#x7387;&#xFF0C;&#x53EC;&#x56DE;&#x7387;&#x548C;F1&#x5F97;&#x5206;&#xFF0C;&#x76EE;&#x6807;&#x6807;&#x7B7E;&#x4E3A;target_name&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#x4E3A;labelprint(classification_report(y_test, predictions)) Scikit-Learn&#x63A8;&#x8FDB;&#x96C6;&#x6210;&#x5B66;&#x4E60;12345678910111213141516171819202122232425262728293031323334from sklearn.ensemble import AdaBoostClassifierfrom sklearn.tree import DecisionTreeClassifierfrom sklearn.datasets import make_classificationfrom sklearn.model_selection import train_test_splitimport matplotlib.pyplot as plt# from sklearn.datasets import make_classification &#x4ECE;sklearn&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x5BFC;&#x5165;make_classification&#x7528;&#x4E8E;&#x521B;&#x5EFA;&#x5206;&#x7C7B;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x6837;&#x672C;&#x6570;&#x4E3A;n_samples&#xFF0C;&#x7279;&#x5F81;&#x6570;&#x4E3A;n_features&#xFF0C;&#x6709;&#x7528;&#x7684;&#x7279;&#x5F81;&#x6570;&#x4E3A;n_informative&#xFF0C;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x7C07;&#x7684;&#x4E2A;&#x6570;&#x4E3A;n_clusters_per_classx, y = make_classification(n_samples=1000, n_features=50, n_informative=30, n_clusters_per_class=3, random_state=11)# train_test_split(x, y) &#x5C06;x&#x548C;y&#x5212;&#x5206;&#x6210;&#x6570;&#x636E;&#x96C6;&#x548C;&#x6D4B;&#x8BD5;&#x96C6;x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=11)# clf = DecisionTreeClassifier() &#x521B;&#x5EFA;&#x51B3;&#x7B56;&#x6811;&#x6A21;&#x578B;clf = DecisionTreeClassifier()# clf.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;clf.fit(x_train, y_train)# clf.score(x, y) &#x6C42;&#x6A21;&#x578B;&#x7684;&#x51B3;&#x5B9A;&#x7CFB;&#x6570;print(&apos;DecisionTree accuracy:%s&apos; %clf.score(x_test, y_test))# clf = AdaBoostClassifier(n_estimators=n) &#x521B;&#x5EFA;&#x5177;&#x6709;n&#x4E2A;&#x5F31;&#x5B66;&#x4E60;&#x5668;&#x7684;AdaBoost&#x6A21;&#x578B;clf = AdaBoostClassifier(n_estimators=50, random_state=11)# clf.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;clf.fit(x_train, y_train)plt.title(&apos;Ensemble Accuracy&apos;)plt.xlabel(&apos;Accuracy&apos;)plt.ylabel(&apos;Number of base estimators in ensemble&apos;)# clf.staged_score(x, y) &#x6C42;AdaBoost&#x6A21;&#x578B;&#x7684;&#x5F31;&#x5206;&#x7C7B;&#x5668;&#x4E2A;&#x6570;&#x7684;&#x51B3;&#x5B9A;&#x7CFB;&#x6570;plt.plot(range(1, 51), [accuracy for accuracy in clf.staged_score(x_test, y_test)])plt.show() Scikit-Learn&#x611F;&#x77E5;&#x673A;12345678910111213141516171819202122from sklearn.datasets import make_classificationfrom sklearn.model_selection import train_test_splitfrom sklearn.metrics import classification_reportfrom sklearn.linear_model import Perceptron# from sklearn.datasets import make_classification &#x4ECE;sklearn&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x5BFC;&#x5165;make_classification&#x7528;&#x4E8E;&#x521B;&#x5EFA;&#x5206;&#x7C7B;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x6837;&#x672C;&#x6570;&#x4E3A;n_samples&#xFF0C;&#x7279;&#x5F81;&#x6570;&#x4E3A;n_features&#xFF0C;&#x6709;&#x7528;&#x7684;&#x7279;&#x5F81;&#x6570;&#x4E3A;n_informative&#xFF0C;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x7C07;&#x7684;&#x4E2A;&#x6570;&#x4E3A;n_clusters_per_classx, y = make_classification(n_samples=1000, n_features=100, n_informative=20, n_clusters_per_class=2, random_state=11)# train_test_split(x, y) &#x5C06;x&#x548C;y&#x5212;&#x5206;&#x6210;&#x6570;&#x636E;&#x96C6;&#x548C;&#x6D4B;&#x8BD5;&#x96C6;x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=11)# clf = Perceptron() &#x521B;&#x5EFA;&#x611F;&#x77E5;&#x673A;&#x6A21;&#x578B;clf = Perceptron(random_state=11)# clf.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;clf.fit(x_train, y_train)# clf.predict(X) &#x7528;&#x8BAD;&#x7EC3;&#x540E;&#x7684;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x6570;&#x636E;Xpredictions = clf.predict(x_test)# classification_report(y_test, y_predict, target_names=None, labels=None) &#x540C;&#x65F6;&#x751F;&#x6210;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x7CBE;&#x51C6;&#x7387;&#xFF0C;&#x53EC;&#x56DE;&#x7387;&#x548C;F1&#x5F97;&#x5206;&#xFF0C;&#x76EE;&#x6807;&#x6807;&#x7B7E;&#x4E3A;target_name&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#x4E3A;labelprint(classification_report(y_test, predictions)) Scikit-Learn&#x652F;&#x6301;&#x5411;&#x91CF;&#x673A;12345678910111213141516171819202122from sklearn.datasets import make_classificationfrom sklearn.model_selection import train_test_splitfrom sklearn.metrics import classification_reportfrom sklearn.svm import SVC# from sklearn.datasets import make_classification &#x4ECE;sklearn&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x5BFC;&#x5165;make_classification&#x7528;&#x4E8E;&#x521B;&#x5EFA;&#x5206;&#x7C7B;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x6837;&#x672C;&#x6570;&#x4E3A;n_samples&#xFF0C;&#x7279;&#x5F81;&#x6570;&#x4E3A;n_features&#xFF0C;&#x6709;&#x7528;&#x7684;&#x7279;&#x5F81;&#x6570;&#x4E3A;n_informative&#xFF0C;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x7C07;&#x7684;&#x4E2A;&#x6570;&#x4E3A;n_clusters_per_classx, y = make_classification(n_samples=1000, n_features=100, n_informative=20, n_clusters_per_class=2, random_state=11)# train_test_split(x, y) &#x5C06;x&#x548C;y&#x5212;&#x5206;&#x6210;&#x6570;&#x636E;&#x96C6;&#x548C;&#x6D4B;&#x8BD5;&#x96C6;x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=11)# clf = SVC(kernel=&apos;rbf&apos;, gamma=&apos;auto deprecated&apos;, C=1.0) &#x521B;&#x5EFA;&#x652F;&#x6301;&#x5411;&#x91CF;&#x673A;&#x6A21;&#x578B;&#xFF0C;&#x6838;&#x51FD;&#x6570;&#x9ED8;&#x8BA4;&#x4E3A;rbf&#x9AD8;&#x65AF;&#x6838;&#xFF0C;&#x6B63;&#x5219;&#x5316;&#x53C2;&#x6570;C&#x9ED8;&#x8BA4;&#x4E3A;1.0&#xFF0C;&#x6838;&#x7CFB;&#x6570;&#x53C2;&#x6570;gamma&#x9ED8;&#x8BA4;&#x4E3A;&#x4E0D;&#x4F7F;&#x7528;clf = SVC(kernel=&apos;rbf&apos;, gamma=0.01, C=100, random_state=11)# clf.fit(X, y) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#xFF0C;y&#x62DF;&#x5408;&#x6A21;&#x578B;clf.fit(x_train, y_train)# clf.predict(X) &#x7528;&#x8BAD;&#x7EC3;&#x540E;&#x7684;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x6570;&#x636E;Xpredictions = clf.predict(x_test)# classification_report(y_test, y_predict, target_names=None, labels=None) &#x540C;&#x65F6;&#x751F;&#x6210;&#x771F;&#x5B9E;&#x503C;&#x4E0E;&#x9884;&#x6D4B;&#x503C;&#x7684;&#x7CBE;&#x51C6;&#x7387;&#xFF0C;&#x53EC;&#x56DE;&#x7387;&#x548C;F1&#x5F97;&#x5206;&#xFF0C;&#x76EE;&#x6807;&#x6807;&#x7B7E;&#x4E3A;target_name&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#x4E3A;labelprint(classification_report(y_test, predictions)) Scikit-Learn&#x591A;&#x5C42;&#x611F;&#x77E5;&#x673A;1234567891011121314from sklearn.datasets import load_digitsfrom sklearn.model_selection import cross_val_scorefrom sklearn.neural_network.multilayer_perceptron import MLPClassifier# from sklearn.datasets import load_digits &#x4ECE;sklearn&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x5BFC;&#x5165;&#x624B;&#x5199;&#x6570;&#x5B57;&#x7684;&#x6570;&#x636E;digits = load_digits()x = digits.datay = digits.target# clf = MLPClassifier(hidden_layer_sizes=(100,), alpha=0.0001, max_iter=200, random_state=20) &#x521B;&#x5EFA;&#x591A;&#x5C42;&#x611F;&#x77E5;&#x673A;&#x6A21;&#x578B;&#xFF0C;&#x6BCF;&#x4E00;&#x5C42;&#x7684;&#x795E;&#x7ECF;&#x5143;&#x4E2A;&#x6570;&#x4E3A;hidden_layer_sizes&#xFF0C;&#x6B63;&#x5219;&#x5316;&#x53C2;&#x6570;alpha&#x9ED8;&#x8BA4;&#x4E3A;0.0001&#xFF0C;&#x6700;&#x5927;&#x8FED;&#x4EE3;&#x6B21;&#x6570;&#x9ED8;&#x8BA4;&#x4E3A;200clf = MLPClassifier(hidden_layer_sizes=(150, 100), alpha=0.1, max_iter=500)# cross_val_score(estimator, X, y, n_jobs=None, cv=n) n&#x6298;&#x4EA4;&#x53C9;&#x9A8C;&#x8BC1;&#xFF0C;&#x4F30;&#x8BA1;&#x5668;&#x4E3A;estimator&#xFF0C;&#x6570;&#x636E;&#x4E3A;X&#x548C;y&#xFF0C;&#x540C;&#x65F6;&#x5DE5;&#x4F5C;&#x7684;CPU&#x4E2A;&#x6570;&#x4E3A;1print(cross_val_score(clf, x, y, n_jobs=-1, cv=5)) Scikit-LearnKmeans&#x805A;&#x7C7B;1234567891011121314151617181920212223242526272829303132333435import numpy as npfrom sklearn.cluster import KMeansimport matplotlib.pyplot as pltplt.subplot(3, 2, 1)x1 = np.array([1, 2, 3, 1, 5, 6, 5, 5, 6, 7, 8, 9, 7, 9])x2 = np.array([1, 3, 2, 2, 8, 6, 7, 6, 7, 1, 2, 1, 1, 3])x = np.vstack((x1, x2)).Tplt.xlim([0, 10])plt.ylim([0, 10])plt.title(&apos;Instances&apos;)plt.scatter(x1, x2)colors = [&apos;b&apos;, &apos;g&apos;, &apos;r&apos;, &apos;c&apos;, &apos;m&apos;, &apos;y&apos;, &apos;k&apos;, &apos;b&apos;]markers = [&apos;o&apos;, &apos;s&apos;, &apos;D&apos;, &apos;v&apos;, &apos;^&apos;, &apos;p&apos;, &apos;*&apos;, &apos;+&apos;]tests = [2, 3, 4, 5, 8]subplot_counter = 1for t in tests: subplot_counter +=1 plt.subplot(3, 2, subplot_counter) # kmeans_model = KMeans(n_clusters=n) &#x521B;&#x5EFA;Kmeans&#x6A21;&#x578B;&#xFF0C;&#x7C7B;&#x522B;&#x4E2A;&#x6570;&#x4E3A;n kmeans_model = KMeans(n_clusters=t) # kmeans_model.fit(x) &#x7528;&#x8BAD;&#x7EC3;&#x6570;&#x636E;X&#x62DF;&#x5408;&#x6A21;&#x578B; kmeans_model.fit(x) for i, l in enumerate(kmeans_model.labels_): plt.plot(x1[i], x2[i], color=colors[l], marker=markers[l]) plt.xlim([0, 10]) plt.ylim([0, 10]) plt.title(&apos;k=%s&apos; %t)plt.show() Scikit-LearnPCA&#x964D;&#x7EF4;123456789101112131415161718192021222324252627282930313233import matplotlib.pyplot as pltfrom sklearn.decomposition import PCAfrom sklearn.datasets import load_irisdata = load_iris()x = data.datay = data.target# pca = PCA(n_components=n) &#x521B;&#x5EFA;n&#x7EF4;PCA&#x8F6C;&#x6362;&#x5668;pca = PCA(n_components=2)# pca.fit_transform(X) &#x5728;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x96C6;&#x8FDB;&#x884C;PCA&#x964D;&#x7EF4;reduced_x = pca.fit_transform(x) red_x, red_y = [], []blue_x, blue_y = [], []green_x, green_y = [], []for i in range(len(reduced_x)): if y[i] == 0: red_x.append(reduced_x[i][0]) red_y.append(reduced_x[i][1]) elif y[i] == 1: blue_x.append(reduced_x[i][0]) blue_y.append(reduced_x[i][1]) else: green_x.append(reduced_x[i][0]) green_y.append(reduced_x[i][1])plt.scatter(red_x, red_y, c=&apos;r&apos;, marker=&apos;x&apos;)plt.scatter(blue_x, blue_y, c=&apos;b&apos;, marker=&apos;D&apos;)plt.scatter(green_x, green_y, c=&apos;g&apos;, marker=&apos;.&apos;)plt.show() Scikit-Learn&#x5C0F;&#x7ED3;&#x2003;&#x2003;&#x7531;&#x4E8E;Scikit-Learn&#x96C6;&#x6210;&#x4E86;&#x8BB8;&#x591A;&#x5E38;&#x7528;&#x7684;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7B97;&#x6CD5;&#xFF0C;&#x5982;&#x51B3;&#x7B56;&#x6811;&#xFF0C;SVM&#xFF0C;&#x591A;&#x5C42;&#x611F;&#x77E5;&#x673A;&#xFF0C;Kmeans&#x7B49;&#xFF0C;&#x53EF;&#x4EE5;&#x8BA9;&#x4F7F;&#x7528;&#x8005;&#x8282;&#x7EA6;&#x5927;&#x91CF;&#x7684;&#x65F6;&#x95F4;&#x3002;&#x800C;&#x4E14;&#x5176;&#x62E5;&#x6709;&#x5F88;&#x597D;&#x7684;&#x5B98;&#x65B9;&#x6587;&#x6863;&#xFF0C;&#x8BA9;&#x5F00;&#x53D1;&#x8005;&#xFF0C;&#x7814;&#x7A76;&#x8005;&#x53EF;&#x4EE5;&#x65B9;&#x4FBF;&#x7684;&#x5165;&#x95E8;&#x548C;&#x4F7F;&#x7528;&#x3002;&#x56E0;&#x6B64;Scikit-Learn&#x5728;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x9886;&#x57DF;&#x53D7;&#x5230;&#x5E7F;&#x5927;&#x4F7F;&#x7528;&#x8005;&#x7684;&#x559C;&#x7231;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>常用库</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[线性规划(Linear Programming)]]></title>
    <url>%2F2019%2F08%2F08%2Falgorithm%20linear%20programming%2F</url>
    <content type="text"><![CDATA[&#x7EBF;&#x6027;&#x89C4;&#x5212; &#x539F;&#x7406;&#x4ECB;&#x7ECD;&#x2003;&#x2003; Linear Programming:&#x7EBF;&#x6027;&#x89C4;&#x5212;&#xFF0C;&#x662F;&#x8FD0;&#x7B79;&#x5B66;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x91CD;&#x8981;&#x5206;&#x652F;&#xFF0C;&#x7814;&#x7A76;&#x7EBF;&#x6027;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x4E0B;&#x7EBF;&#x6027;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x7684;&#x6781;&#x503C;&#x95EE;&#x9898;&#x7684;&#x6570;&#x5B66;&#x7406;&#x8BBA;&#x548C;&#x65B9;&#x6CD5;&#xFF0C;&#x80FD;&#x4ECE;&#x5404;&#x79CD;&#x9650;&#x5236;&#x6761;&#x4EF6;&#x7684;&#x7EC4;&#x5408;&#x4E2D;&#xFF0C;&#x9009;&#x62E9;&#x51FA;&#x6700;&#x4E3A;&#x5408;&#x7406;&#x7684;&#x8BA1;&#x7B97;&#x65B9;&#x6CD5;&#xFF0C;&#x5EFA;&#x7ACB;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x6A21;&#x578B;&#xFF0C;&#x4ECE;&#x800C;&#x6C42;&#x5F97;&#x6700;&#x4F73;&#x7ED3;&#x679C;&#x3002;&#x5E7F;&#x6CDB;&#x5E94;&#x7528;&#x4E8E;&#x519B;&#x4E8B;&#x4F5C;&#x6218;&#x3001;&#x7ECF;&#x6D4E;&#x5206;&#x6790;&#x3001;&#x7ECF;&#x8425;&#x7BA1;&#x7406;&#x548C;&#x5DE5;&#x7A0B;&#x6280;&#x672F;&#x7B49;&#x65B9;&#x9762;&#x3002;&#x4E3A;&#x5408;&#x7406;&#x5730;&#x5229;&#x7528;&#x6709;&#x9650;&#x7684;&#x4EBA;&#x529B;&#x3001;&#x7269;&#x529B;&#x3001;&#x8D22;&#x529B;&#x7B49;&#x8D44;&#x6E90;&#x4F5C;&#x51FA;&#x7684;&#x6700;&#x4F18;&#x51B3;&#x7B56;&#xFF0C;&#x63D0;&#x4F9B;&#x79D1;&#x5B66;&#x7684;&#x4F9D;&#x636E;&#x3002; &#x7B97;&#x6CD5;&#x57FA;&#x7840;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x6807;&#x51C6;&#x578B;&#x2003;&#x2003;&#x5BF9;&#x4E8E;&#x590D;&#x6742;&#x7684;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x95EE;&#x9898;&#xFF0C;&#x5F88;&#x96BE;&#x91C7;&#x7528;&#x521D;&#x4E2D;&#x6570;&#x5B66;&#x7684;&#x753B;&#x56FE;&#x6CD5;&#x89E3;&#x51B3;&#xFF0C;&#x4E00;&#x822C;&#x8981;&#x628A;&#x95EE;&#x9898;&#x8F6C;&#x5316;&#x4E3A;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x6807;&#x51C6;&#x578B;&#x3002; &#x7EBF;&#x6027;&#x89C4;&#x5212;&#x6807;&#x51C6;&#x578B;&#x8F6C;&#x5316;&#x65B9;&#x6CD5;&#x2003;&#x2003;(1)&#x4E00;&#x822C;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x5F62;&#x5F0F;&#x4E2D;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x5982;&#x679C;&#x6C42;&#x6700;&#x5C0F;&#x503C;&#xFF0C;&#x5373;$\min z = \sum_{i=1}^n c_ix_i$&#xFF0C;&#x90A3;&#x4E48;&#x4EE4;$z&#x2019; = -z$&#xFF0C;&#x5219;&#x6C42;&#x89E3;$\max z&#x2019; = \sum_{i=1}^n c_ix_i$&#xFF0C;&#x5F97;&#x5230;&#x6700;&#x4F18;&#x89E3;&#x540E;&#x52A0;&#x8D1F;&#x53F7;&#x5373;&#x53EF;&#x3002;&#x2003;&#x2003;(2)&#x53F3;&#x7AEF;&#x5E38;&#x6570;&#x9879;&#x5C0F;&#x4E8E;&#x96F6;&#x65F6;&#xFF0C;&#x5219;&#x4E0D;&#x7B49;&#x5F0F;&#x4E24;&#x8FB9;&#x540C;&#x65F6;&#x4E58;-1&#xFF0C;&#x5C06;&#x5176;&#x53D8;&#x4E3A;&#x5927;&#x4E8E;&#x96F6;&#xFF0C;&#x5E76;&#x6539;&#x53D8;&#x4E0D;&#x7B49;&#x5F0F;&#x65B9;&#x5411;&#xFF0C;&#x4FDD;&#x8BC1;&#x6052;&#x7B49;&#x53D8;&#x5F62;&#x3002;&#x2003;&#x2003;(3)&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;&#x7EA6;&#x675F;&#x65F6;&#xFF0C;&#x5219;&#x5728;&#x4E0D;&#x7B49;&#x5F0F;&#x5DE6;&#x8FB9;&#x51CF;&#x53BB;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x975E;&#x8D1F;&#x53D8;&#x91CF;&#xFF0C;&#x5C06;&#x4E0D;&#x7B49;&#x5F0F;&#x7EA6;&#x675F;&#x6539;&#x4E3A;&#x7B49;&#x5F0F;&#x7EA6;&#x675F;&#x3002;&#x2003;&#x2003;(4)&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;&#x7EA6;&#x675F;&#x65F6;&#xFF0C;&#x5219;&#x5728;&#x4E0D;&#x7B49;&#x5F0F;&#x5DE6;&#x8FB9;&#x52A0;&#x4E0A;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x975E;&#x8D1F;&#x53D8;&#x91CF;&#xFF0C;&#x5C06;&#x4E0D;&#x7B49;&#x5F0F;&#x7EA6;&#x675F;&#x6539;&#x4E3A;&#x7B49;&#x5F0F;&#x7EA6;&#x675F;&#x3002;&#x2003;&#x2003;(5)&#x65E0;&#x7EA6;&#x675F;&#x7684;&#x51B3;&#x7B56;&#x53D8;&#x91CF;x&#xFF0C;&#x5219;&#x5F15;&#x5165;&#x4E24;&#x4E2A;&#x65B0;&#x7684;&#x975E;&#x8D1F;&#x53D8;&#x91CF;x&#x2019;&#xFF0C;x&#x2019;&#x2019;&#xFF0C;&#x4EE4;$x=x&#x2019;-x&#x2019;&#x2019;, \ x&#x2019; \ge 0, \ x&#x2019;&#x2019; \ge 0$&#xFF0C;&#x5C06;x&#x2019;&#xFF0C;x&#x2019;&#x2019;&#x5E26;&#x5165;&#x6A21;&#x578B;&#x2003;&#x2003;(6)&#x51B3;&#x7B56;&#x53D8;&#x91CF;x&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;0&#x65F6;&#xFF0C;&#x4EE4;x&#x2019;=-x&#xFF0C;&#x5C06;x&#x2019;&#x5E26;&#x5165;&#x6A21;&#x578B; $$\min z = x_2 - 3 \ x_3 + 2 \ x_4$$$$\begin{cases} x_1 + 3 \ x_2 - x_3 + 2 \ x_4 =7 \ -2 \ x_2 + 4 \ x_3 \le 12 \ -4 \ x_2 + 3 \ x_3 + 8 \ x_4 \le 10 \ x_i \ge 0 \ (i = 1, \ 2, \ 3, \ 4) \end{cases}$$&#x2003;&#x2003;&#x5C06;&#x5176;&#x8F6C;&#x5316;&#x4E3A;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x6807;&#x51C6;&#x578B;:z&#x2019;=-z$$\min z&#x2019; = -x_2 + 3 \ x_3 - 2 \ x_4$$$$\begin{cases} x_1 + 3 \ x_2 - x_3 + 2 \ x_4 =7 \ -2 \ x_2 + 4 \ x_3 + x_5 = 12 \ -4 \ x_2 + 3 \ x_3 + 8 \ x_4 + x_6 = 10 \ x_i \ge 0 \ (i = 1, \ 2, \ 3, \ 4, \ 5, \ 6) \end{cases}$$ &#x5355;&#x7EAF;&#x884C;&#x7B97;&#x6CD5;&#x2003;&#x2003;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#xFF1A;&#x6BCF;&#x4E2A;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x4E2D;&#x7684;&#x7CFB;&#x6570;&#x4E3A;&#x6B63;&#x4E14;&#x53EA;&#x51FA;&#x73B0;&#x5728;&#x4E00;&#x4E2A;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x4E2D;&#x7684;&#x53D8;&#x91CF;&#x2003;&#x2003;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#xFF1A;&#x9664;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x5916;&#x7684;&#x53D8;&#x91CF;&#x5168;&#x90E8;&#x4E3A;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x2003;&#x2003;&#x57FA;&#x672C;&#x53EF;&#x884C;&#x89E3;&#xFF1A;&#x6EE1;&#x8DB3;&#x6807;&#x51C6;&#x5F62;&#x5F0F;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x7684;&#x53EF;&#x884C;&#x89E3;&#x79F0;&#x4E3A;&#x57FA;&#x672C;&#x53EF;&#x884C;&#x89E3;&#x2003;&#x2003;&#x68C0;&#x9A8C;&#x6570;&#xFF1A;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x4E2D;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x7684;&#x7CFB;&#x6570; &#x6700;&#x4F18;&#x89E3;&#x7684;&#x5224;&#x522B;&#x2003;&#x2003;(1)&#x82E5;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x4E2D;&#x5173;&#x4E8E;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x7684;&#x6240;&#x6709;&#x7CFB;&#x6570;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;0&#xFF0C;&#x5219;&#x5F53;&#x524D;&#x57FA;&#x672C;&#x53EF;&#x884C;&#x89E3;&#x5C31;&#x662F;&#x6700;&#x4F18;&#x89E3;&#x3002;&#x2003;&#x2003;(2)&#x82E5;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x4E2D;&#x5173;&#x4E8E;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x7684;&#x6240;&#x6709;&#x7CFB;&#x6570;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;0&#xFF0C;&#x540C;&#x65F6;&#x5B58;&#x5728;&#x67D0;&#x4E2A;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x7684;&#x68C0;&#x9A8C;&#x6570;&#x7B49;&#x4E8E;0&#xFF0C;&#x5219;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x95EE;&#x9898;&#x6709;&#x65E0;&#x7A77;&#x591A;&#x4E2A;&#x6700;&#x4F18;&#x89E3;&#x3002;&#x2003;&#x2003;(3)&#x5982;&#x679C;&#x67D0;&#x4E2A;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x7684;&#x7CFB;&#x6570;&#x5927;&#x4E8E;0&#xFF0C;&#x800C;&#x8BE5;&#x53D8;&#x91CF;&#x5BF9;&#x5E94;&#x7684;&#x5217;&#x5411;&#x91CF;&#x7684;&#x5404;&#x4E2A;&#x5206;&#x91CF;&#x90FD;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;0&#xFF0C;&#x5219;&#x8BE5;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x95EE;&#x9898;&#x6709;&#x65E0;&#x754C;&#x89E3;&#x3002; &#x7B97;&#x6CD5;&#x6B65;&#x9AA4;&#x5EFA;&#x7ACB;&#x521D;&#x59CB;&#x5355;&#x7EAF;&#x5F62;&#x8868;&#x2003;&#x2003;(1)&#x4ECE;&#x6784;&#x5EFA;&#x51FA;&#x7684;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x6807;&#x51C6;&#x578B;&#x4E2D;&#x627E;&#x51FA;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x548C;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#xFF0C;&#x4E14;&#x8BA9;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x7531;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x8868;&#x793A;&#x3002;&#x2003;&#x2003;(2)&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x7684;&#x7CFB;&#x6570;&#x8981;&#x7F29;&#x653E;&#x5230;1&#xFF0C;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x505A;&#x5217;&#xFF0C;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x505A;&#x884C;&#x3002;&#x2003;&#x2003;(2)&#x68C0;&#x9A8C;&#x6570;&#x653E;&#x7B2C;&#x4E00;&#x884C;&#xFF0C;&#x5E38;&#x6570;&#x9879;&#x653E;&#x7B2C;&#x4E00;&#x5217;&#xFF0C;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x4E2D;&#x7684;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x7684;&#x7CFB;&#x6570;&#x4F5C;&#x4E3A;&#x503C;&#xFF0C;&#x6784;&#x9020;&#x521D;&#x59CB;&#x5355;&#x7EAF;&#x5F62;&#x8868;&#x3002; &#x6839;&#x636E;&#x5355;&#x7EAF;&#x5F62;&#x8868;&#x5224;&#x65AD;&#x662F;&#x5426;&#x5F97;&#x5230;&#x6700;&#x4F18;&#x89E3;&#x2003;&#x2003;(1)&#x5982;&#x679C;&#x6240;&#x6709;&#x7684;&#x68C0;&#x9A8C;&#x6570;&#x90FD;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;0&#xFF0C;&#x5219;&#x5DF2;&#x83B7;&#x5F97;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x7B97;&#x6CD5;&#x7ED3;&#x675F;&#xFF0C;&#x53D6;&#x51FA;&#x5DE6;&#x4E0A;&#x89D2;&#x7684;&#x503C;&#x5373;&#x4E3A;&#x6700;&#x4F18;&#x89E3;&#x3002;&#x2003;&#x2003;(2)&#x5982;&#x679C;&#x6240;&#x6709;&#x7684;&#x68C0;&#x9A8C;&#x6570;&#x6709;&#x4E9B;&#x4E3A;&#x6B63;&#x6570;&#xFF0C;&#x4F46;&#x5176;&#x4E2D;&#x67D0;&#x4E00;&#x6B63;&#x7684;&#x68C0;&#x9A8C;&#x6570;&#x5BF9;&#x5E94;&#x7684;&#x5217;&#x5411;&#x91CF;&#x7684;&#x6240;&#x6709;&#x5206;&#x91CF;&#x5747;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;0&#xFF0C;&#x5219;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x95EE;&#x9898;&#x65E0;&#x89E3;&#xFF0C;&#x7B97;&#x6CD5;&#x7ED3;&#x675F;&#x3002;&#x2003;&#x2003;(3)&#x5982;&#x679C;&#x6240;&#x6709;&#x7684;&#x68C0;&#x9A8C;&#x6570;&#x6709;&#x4E9B;&#x4E3A;&#x6B63;&#x6570;&#xFF0C;&#x4F46;&#x5176;&#x4E2D;&#x67D0;&#x4E00;&#x6B63;&#x7684;&#x68C0;&#x9A8C;&#x6570;&#x5BF9;&#x5E94;&#x7684;&#x5217;&#x5411;&#x91CF;&#x4E2D;&#x6709;&#x6B63;&#x7684;&#x5206;&#x91CF;&#xFF0C;&#x5219;&#x7EE7;&#x7EED;&#x4E0B;&#x4E00;&#x6B65;&#x3002; &#x9009;&#x62E9;&#x5165;&#x57FA;&#x53D8;&#x91CF;&#x2003;&#x2003;&#x9009;&#x53D6;&#x68C0;&#x9A8C;&#x6570;&#x4E2D;&#x6700;&#x5927;&#x7684;&#x4E00;&#x4E2A;&#xFF0C;&#x5176;&#x5BF9;&#x5E94;&#x7684;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x79F0;&#x4E3A;&#x5165;&#x57FA;&#x53D8;&#x91CF;&#xFF0C;&#x8BE5;&#x5217;&#x79F0;&#x4E3A;&#x5165;&#x57FA;&#x5217; &#x9009;&#x62E9;&#x79BB;&#x57FA;&#x53D8;&#x91CF;&#x2003;&#x2003;&#x9009;&#x53D6;&#x5E38;&#x6570;&#x5217;&#x5143;&#x7D20;&#x4E0E;&#x5165;&#x57FA;&#x5217;&#x5143;&#x7D20;&#x7684;&#x6BD4;&#x503C;&#x4E2D;&#xFF0C;&#x6B63;&#x6570;&#x7684;&#x6700;&#x5C0F;&#x8005;&#x6240;&#x5BF9;&#x5E94;&#x7684;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x4E3A;&#x79BB;&#x57FA;&#x53D8;&#x91CF;&#x3002; &#x6362;&#x57FA;&#x53D8;&#x6362;&#x2003;&#x2003;&#x5C06;&#x5355;&#x7EAF;&#x5F62;&#x8868;&#x4E0A;&#x7684;&#x5165;&#x57FA;&#x53D8;&#x91CF;&#x548C;&#x79BB;&#x57FA;&#x53D8;&#x91CF;&#x4E92;&#x6362;&#x4F4D;&#x7F6E;&#x3002; &#x8BA1;&#x7B97;&#x65B0;&#x7684;&#x5355;&#x7EAF;&#x5F62;&#x8868;&#x2003;&#x2003;&#x5165;&#x57FA;&#x5217;=-&#x539F;&#x503C;/&#x4EA4;&#x53C9;&#x4F4D;&#x503C;&#x3002;&#x2003;&#x2003;&#x79BB;&#x57FA;&#x884C;=&#x539F;&#x503C;/&#x4EA4;&#x53C9;&#x4F4D;&#x503C;&#x3002;&#x2003;&#x2003;&#x4EA4;&#x53C9;&#x4F4D;=&#x539F;&#x503C;&#x53BB;&#x5012;&#x6570;&#x3002;&#x2003;&#x2003;&#x5DE6;&#x4E0A;&#x89D2;&#x503C;=&#x539F;&#x503C;+&#x540C;&#x884C;&#x5165;&#x57FA;&#x5217;&#x5143;&#x7D20;&#x503C;*&#x540C;&#x5217;&#x79BB;&#x57FA;&#x884C;&#x5143;&#x7D20;&#x503C;/&#x4EA4;&#x53C9;&#x4F4D;&#x503C;&#x3002; &#x2003;&#x2003;&#x5176;&#x4F59;&#x503C;=&#x539F;&#x503C;-&#x540C;&#x884C;&#x5165;&#x57FA;&#x5217;&#x5143;&#x7D20;&#x503C;*&#x540C;&#x5217;&#x79BB;&#x57FA;&#x884C;&#x5143;&#x7D20;&#x503C;/&#x4EA4;&#x53C9;&#x4F4D;&#x503C;&#x3002; &#x2003;&#x2003;&#x5F97;&#x5230;&#x65B0;&#x7684;&#x5355;&#x7EAF;&#x5F62;&#x8868;&#x518D;&#x8FD4;&#x56DE;&#x7B2C;&#x4E8C;&#x6B65;&#x91CD;&#x65B0;&#x5224;&#x65AD;&#x3002;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;&#x3002;&#x2003;&#x2003;&#x672C;&#x9898;&#x7684;&#x6700;&#x7EC8;&#x7684;&#x5355;&#x7EAF;&#x5F62;&#x8868;&#x5982;&#x4E0B;&#xFF0C;&#x53EF;&#x77E5;&#x6700;&#x4F18;&#x89E3;&#x4E3A;z&#x2019;=11&#xFF0C;&#x7531;&#x4E8E;&#x6B64;&#x9898;&#x8981;&#x6C42;&#x6700;&#x5C0F;&#x503C;&#xFF0C;&#x5373;z=-z=-11&#x3002;&#x2003;&#x2003;&#x5176;&#x6700;&#x4F18;&#x89E3;&#x4E3A;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x5BF9;&#x5E94;&#x7684;&#x5E38;&#x6570;&#x9879;&#x7EC4;&#x6210;&#xFF0C;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x5168;&#x90E8;&#x7F6E;&#x4E3A;0&#xFF0C;&#x5373;&#x89E3;&#x4E3A;$$\begin{pmatrix} x_1 \ x_2 \ x_3 \ x_4 \ x_5 \ x_6 \end{pmatrix} = \begin{pmatrix} 0 \ 4 \ 5 \ 0 \ 0 \ 11 \end{pmatrix}$$ &#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6700;&#x5927;&#x5229;&#x6DA6;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x67D0;&#x5DE5;&#x5382;&#x6709;3&#x4E2A;&#x8F66;&#x95F4;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x8F66;&#x95F4;&#x7528;1&#x4E2A;&#x5355;&#x4F4D;&#x7684;&#x539F;&#x6599;N&#x53EF;&#x4EE5;&#x52A0;&#x5DE5;5&#x4E2A;&#x5355;&#x4F4D;&#x7684;&#x4EA7;&#x54C1;A&#x548C;2&#x4E2A;&#x5355;&#x4F4D;&#x7684;&#x4EA7;&#x54C1;B&#x3002;&#x2003;&#x2003;&#x5982;&#x679C;&#x4EA7;&#x54C1;A&#x76F4;&#x63A5;&#x552E;&#x51FA;&#xFF0C;&#x552E;&#x4EF7;&#x4E3A;10&#x5143;&#xFF0C;&#x5982;&#x679C;&#x5728;&#x7B2C;&#x4E8C;&#x4E2A;&#x8F66;&#x95F4;&#x7EE7;&#x7EED;&#x52A0;&#x5DE5;&#xFF0C;&#x5219;&#x9700;&#x8981;&#x52A0;&#x5DE5;&#x8D39;5&#x5143;&#xFF0C;&#x52A0;&#x5DE5;&#x540E;&#x552E;&#x4EF7;&#x4E3A;19&#x5143;&#x3002;&#x2003;&#x2003;&#x5982;&#x679C;&#x4EA7;&#x54C1;B&#x76F4;&#x63A5;&#x552E;&#x51FA;&#xFF0C;&#x552E;&#x4EF7;&#x4E3A;16&#x5143;&#xFF0C;&#x5982;&#x679C;&#x5728;&#x7B2C;&#x4E09;&#x4E2A;&#x8F66;&#x95F4;&#x7EE7;&#x7EED;&#x52A0;&#x5DE5;&#xFF0C;&#x5219;&#x9700;&#x8981;&#x52A0;&#x5DE5;&#x8D39;4&#x5143;&#xFF0C;&#x52A0;&#x5DE5;&#x540E;&#x552E;&#x4EF7;&#x4E3A;24&#x5143;&#x3002;&#x2003;&#x2003;&#x539F;&#x6750;&#x6599;N&#x7684;&#x5355;&#x4F4D;&#x8D2D;&#x5165;&#x4EF7;&#x4E3A;5&#x5143;&#xFF0C;&#x6BCF;&#x5DE5;&#x65F6;&#x7684;&#x5DE5;&#x8D44;&#x662F;15&#x5143;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x8F66;&#x95F4;&#x52A0;&#x5DE5;&#x4E00;&#x4E2A;&#x5355;&#x4F4D;&#x7684;N&#x9700;&#x8981;0.05&#x4E2A;&#x5DE5;&#x65F6;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x8F66;&#x95F4;&#x52A0;&#x5DE5;&#x4E00;&#x4E2A;&#x5355;&#x4F4D;&#x9700;&#x8981;0.1&#x4E2A;&#x5DE5;&#x65F6;&#xFF0C;&#x7B2C;&#x4E09;&#x4E2A;&#x8F66;&#x95F4;&#x52A0;&#x5DE5;&#x4E00;&#x4E2A;&#x5355;&#x4F4D;&#x9700;&#x8981;0.08&#x4E2A;&#x5DE5;&#x65F6;&#x3002;&#x2003;&#x2003;&#x6BCF;&#x4E2A;&#x6708;&#x6700;&#x591A;&#x80FD;&#x5F97;&#x5230;12000&#x5355;&#x4F4D;&#x7684;&#x539F;&#x6750;&#x6599;N&#xFF0C;&#x5DE5;&#x65F6;&#x6700;&#x591A;&#x4E3A;1000&#x5DE5;&#x65F6;&#xFF0C;&#x95EE;&#x5982;&#x4F55;&#x5B89;&#x6392;&#x751F;&#x4EA7;&#x624D;&#x80FD;&#x5F97;&#x5230;&#x6700;&#x9AD8;&#x7684;&#x6536;&#x76CA;&#xFF1F; &#x95EE;&#x9898;&#x5206;&#x6790;&#x2003;&#x2003;&#x5047;&#x8BBE;A&#x76F4;&#x63A5;&#x5356;&#x51FA;&#x7684;&#x6570;&#x91CF;&#x4E3A;x1&#xFF0C;&#x6536;&#x83B7;&#x7684;&#x5229;&#x6DA6;&#x4E3A;$10 \ x_1$&#x2003;&#x2003;&#x5047;&#x8BBE;A&#x5728;&#x7B2C;&#x4E8C;&#x8F66;&#x95F4;&#x52A0;&#x5DE5;&#x540E;&#x7684;&#x51FA;&#x552E;&#x91CF;&#x4E3A;x2&#xFF0C;&#x6536;&#x83B7;&#x7684;&#x5229;&#x6DA6;&#x4E3A;$(19-5-0.1 \times 15) \ x_2 = 12.5 \ x_2$&#x2003;&#x2003;&#x5047;&#x8BBE;B&#x76F4;&#x63A5;&#x5356;&#x51FA;&#x7684;&#x6570;&#x91CF;&#x4E3A;x3&#xFF0C;&#x6536;&#x83B7;&#x7684;&#x5229;&#x6DA6;&#x4E3A;$16 \ x_3$&#x2003;&#x2003;&#x5047;&#x8BBE;B&#x5728;&#x7B2C;&#x4E09;&#x8F66;&#x95F4;&#x52A0;&#x5DE5;&#x540E;&#x7684;&#x51FA;&#x552E;&#x91CF;&#x4E3A;x4&#xFF0C;&#x6536;&#x83B7;&#x7684;&#x5229;&#x6DA6;&#x4E3A;$(24-4-0.08 \times 15) \ x_4 = 18.8 \ x_4$&#x2003;&#x2003;&#x5047;&#x8BBE;&#x6240;&#x7528;&#x7684;&#x539F;&#x6750;&#x6599;&#x6570;&#x91CF;&#x4E3A;x5&#xFF0C;&#x6240;&#x7528;&#x7684;&#x6210;&#x672C;&#x4E3A;$(5+0.05 \times 15) \ x_5 = 5.75 \ x_5$&#x2003;&#x2003;&#x6839;&#x636E;&#x5206;&#x6790;&#x53EF;&#x5F97;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x548C;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x5982;&#x4E0B;:$$\max z = 10 \ x_1 + 12.5 \ x_2 + 16 \ x_4 +18.8 \ x_4 - 5.75 \ x_5$$$$\begin{cases} x_1 + x_2 - 5 \ x_5 =0 \ x_3 + x_4 - 2 \ x_5 = 0 \ x_5 \le 12000 \ 0.1 \ x_1 + 0.08 \ x_4 +0.05 \ x_5 \le 1000 \ x_i \ge 0 \ (i = 1, \ 2, \ 3, \ 4, \ 5) \end{cases}$$ &#x2003;&#x2003;&#x5C06;&#x5176;&#x8F6C;&#x6362;&#x4E3A;&#x6807;&#x51C6;&#x578B;&#x53EF;&#x77E5;:$$\max z = 10 \ x_1 + 12.5 \ x_2 + 16 \ x_4 +18.8 \ x_4 - 5.75 \ x_5$$$$\begin{cases} x_1 + x_2 - 5 \ x_5 =0 \ x_3 + x_4 - 2 \ x_5 = 0 \ x_5 + x_6 = 12000 \ 0.1 \ x_1 + 0.08 \ x_4 +0.05 \ x_5 + x_7 = 1000 \ x_i \ge 0 \ (i = 1, \ 2, \ 3, \ 4, \ 5, \ 6, \ 7) \end{cases}$$ &#x2003;&#x2003;&#x627E;&#x51FA;&#x57FA;&#x672C;&#x53D8;&#x91CF;$x_1, \ x_3, \ x_6, \ x_7$&#x548C;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;$x_2, \ x_4, \ x_5$&#x2003;&#x2003;&#x5C06;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x7531;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x8868;&#x793A;&#xFF0C;&#x5373;&#x7528;$x_1 = 5 \ x_5 - x_2, \ x_3 = 2 \ x_5 - x_4$&#x66FF;&#x6362;&#xFF0C;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x8F6C;&#x5316;&#x4E3A;:$$\begin{align} z &amp; =10(5 \ x_5 - x_2) + 12.5 \ x_2 + 16(2 \ x_5 - x_4) + 18.8 \ x_4 - 5.75 \ x_5 \ &amp; = 2.5 \ x_2 + 2.8 \ x_4 + 76.25 \ x_5 \ \end{align}$$ &#x2003;&#x2003;&#x6784;&#x9020;&#x521D;&#x59CB;&#x5355;&#x7EAF;&#x5F62;&#x8868; &#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x7684;&#x4E0B;&#x6807;&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x8F93;&#x5165;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x7684;&#x4E0B;&#x6807;&#xFF0C;&#x7136;&#x540E;&#x8F93;&#x5165;&#x521D;&#x59CB;&#x5355;&#x7EAF;&#x5F62;&#x8868;&#x3002; 12345671 3 6 7 # &#x57FA;&#x672C;&#x53D8;&#x91CF;&#x4E0B;&#x6807;2 4 5 # &#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x4E0B;&#x6807;0 2.5 2.8 76.25 # &#x521D;&#x59CB;&#x5355;&#x7EAF;&#x5F62;&#x8868;0 1 0 -50 0 1 -212000 0 0 11000 0.1 0.08 0.05 python&#x4EE3;&#x7801;&#x5B9E;&#x6218;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778import sysdef display_simplex_table(simplex_table): print(&apos;-----&#x5355;&#x7EAF;&#x5F62;&#x8868;&#x5982;&#x4E0B;-----&apos;) print(&apos; &apos;.join([&apos; &apos;] + nonbase_subscript)) for i in range(base_num): print(&apos; &apos;.join([base_subscript[i]] + [str(x) for x in simplex_table[i]]))def judge_simplex_table(simplex_table): global solve display_simplex_table(simplex_table) all_negative_j_flag = True for j in range(1, nonbase_num): if simplex_table[0][j] &gt; 0: all_negative_j_flag = False all_negative_i_flag = True for i in range(1, base_num): if simplex_table[i][j] &gt; 0: all_negative_i_flag = False if all_negative_i_flag: print(&apos;&#x8BE5;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x95EE;&#x9898;&#x65E0;&#x754C;&#xFF0C;&#x65E0;&#x6CD5;&#x6C42;&#x5F97;&#x6700;&#x4F18;&#x89E3;&apos;) return if all_negative_j_flag: for i in range(1, base_num): solve.append(base_subscript[i] + &apos;=&apos; + str(simplex_table[i][0])) for j in range(1, nonbase_num): solve.append(nonbase_subscript[j] + &apos;=&apos; + str(simplex_table[0][j])) print(&apos;&#x8BE5;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x4E3A;:&apos;, simplex_table[0][0]) print(&apos;&#x8BE5;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x5411;&#x91CF;&#x4E3A;:&apos;, &apos;, &apos;.join(solve)) return else: update_simplex_table(simplex_table) returndef update_simplex_table(simplex_table): global base_subscript, nonbase_subscript in_base_var = simplex_table[0][1:].index(max(simplex_table[0][1:])) + 1 ratio = [] for i in range(1, base_num): ratio = ratio + [0] if simplex_table[i][in_base_var] == 0 else ratio + [simplex_table[i][0]/simplex_table[i][in_base_var]] out_base_value = max(ratio) + 1 out_base_var = 0 for i in range(len(ratio)): out_base_value, out_base_var = [ratio[i], i] if 0 &lt; ratio[i] &lt; out_base_value else [out_base_value, out_base_var] out_base_var += 1 tmp_table = [[0 for i in range(nonbase_num)] for j in range(base_num)] for i in range(base_num): for j in range(nonbase_num): if i == 0 and j == 0: tmp_table[i][j] = simplex_table[i][j] + simplex_table[out_base_var][j] * simplex_table[i][in_base_var] / simplex_table[out_base_var][in_base_var] continue if i != out_base_var and j != in_base_var: tmp_table[i][j] = simplex_table[i][j] - simplex_table[out_base_var][j] * simplex_table[i][in_base_var] / simplex_table[out_base_var][in_base_var] continue if i != out_base_var and j == in_base_var: tmp_table[i][j] = -1 * simplex_table[i][j] / simplex_table[out_base_var][in_base_var] continue if i == out_base_var and j != in_base_var: tmp_table[i][j] = simplex_table[i][j] / simplex_table[out_base_var][in_base_var] continue if i == out_base_var and j == in_base_var: tmp_table[i][j] = 1 / simplex_table[i][j] continue simplex_table = [x[:] for x in tmp_table] base_subscript[out_base_var], nonbase_subscript[in_base_var] = nonbase_subscript[in_base_var], base_subscript[out_base_var] judge_simplex_table(simplex_table)print(&apos;&#x8F93;&#x5165;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x4E0B;&#x6807;:&apos;)for line in sys.stdin: base_subscript = [&apos;c&apos;] + [&apos;x&apos; + x for x in line.strip().split()] print(&apos;&#x8F93;&#x5165;&#x975E;&#x57FA;&#x672C;&#x53D8;&#x91CF;&#x4E0B;&#x6807;:&apos;) nonbase_subscript = [&apos;b&apos;] + [&apos;x&apos; + x for x in sys.stdin.readline().strip().split()] base_num, nonbase_num = len(base_subscript), len(nonbase_subscript) simplex_table, solve = [], [] print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x521D;&#x59CB;&#x5355;&#x7EAF;&#x5F62;&#x8868;:&apos;) for i in range(base_num): simplex_table.append([float(x) for x in sys.stdin.readline().strip().split()]) judge_simplex_table(simplex_table) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7B97;&#x6CD5;&#x603B;&#x7ED3;&#x2003;&#x2003;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x95EE;&#x9898;&#x7684;&#x96BE;&#x70B9;&#x4E0D;&#x5728;&#x4E8E;&#x7B97;&#x6CD5;&#x7684;&#x8BBE;&#x8BA1;&#xFF0C;&#x800C;&#x662F;&#x5728;&#x4E8E;&#x5982;&#x4F55;&#x4ECE;&#x6587;&#x5B57;&#x63CF;&#x8FF0;&#x4E2D;&#x5BFB;&#x627E;&#x5230;&#x5408;&#x9002;&#x7684;&#x6A21;&#x578B;&#xFF0C;&#x5982;&#x4F55;&#x5EFA;&#x7ACB;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x65B9;&#x7A0B;&#x7EC4;&#x3002;&#x7EBF;&#x6027;&#x89C4;&#x5212;&#x5728;&#x5B9E;&#x9645;&#x7684;&#x751F;&#x4EA7;&#x751F;&#x6D3B;&#x4E2D;&#x6709;&#x7740;&#x91CD;&#x8981;&#x7684;&#x5E94;&#x7528;&#xFF0C;&#x867D;&#x7136;&#x8BE5;&#x7B97;&#x6CD5;&#x7406;&#x89E3;&#x8D77;&#x6765;&#x8F83;&#x4E3A;&#x590D;&#x6742;&#xFF0C;&#x4F46;&#x662F;&#x8BB0;&#x4F4F;&#x5176;&#x6C42;&#x89E3;&#x5F62;&#x5F0F;&#xFF0C;&#x9047;&#x5230;&#x6B64;&#x7C7B;&#x95EE;&#x9898;&#x76F4;&#x63A5;&#x4EFF;&#x7167;&#x4F7F;&#x7528;&#x5373;&#x53EF;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>计算机基础知识</category>
        <category>常用算法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[并查集(Union Find)]]></title>
    <url>%2F2019%2F08%2F07%2Falgorithm%20union%20find%2F</url>
    <content type="text"><![CDATA[&#x5E76;&#x67E5;&#x96C6; &#x539F;&#x7406;&#x4ECB;&#x7ECD;&#x2003;&#x2003; Union Find:&#x5E76;&#x67E5;&#x96C6;&#xFF0C;&#x662F;&#x4E00;&#x79CD;&#x6811;&#x578B;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x7528;&#x4E8E;&#x5904;&#x7406;&#x4E00;&#x4E9B;&#x4E0D;&#x76F8;&#x4EA4;&#x96C6;&#x5408;&#x7684;&#x5408;&#x5E76;&#x53CA;&#x67E5;&#x8BE2;&#x95EE;&#x9898;&#x3002;&#x5728;&#x4E00;&#x4E9B;&#x6709;N&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x96C6;&#x5408;&#x5E94;&#x7528;&#x95EE;&#x9898;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x901A;&#x5E38;&#x662F;&#x5728;&#x5F00;&#x59CB;&#x65F6;&#x8BA9;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x6784;&#x6210;&#x4E00;&#x4E2A;&#x5355;&#x5143;&#x7D20;&#x7684;&#x96C6;&#x5408;&#xFF0C;&#x7136;&#x540E;&#x6309;&#x4E00;&#x5B9A;&#x987A;&#x5E8F;&#x5C06;&#x5C5E;&#x4E8E;&#x540C;&#x4E00;&#x7EC4;&#x7684;&#x5143;&#x7D20;&#x6240;&#x5728;&#x7684;&#x96C6;&#x5408;&#x5408;&#x5E76;&#x3002; &#x7B97;&#x6CD5;&#x6B65;&#x9AA4;&#x521D;&#x59CB;&#x5316;&#x2003;&#x2003;&#x628A;&#x6BCF;&#x4E2A;&#x70B9;&#x6240;&#x5728;&#x96C6;&#x5408;&#x521D;&#x59CB;&#x5316;&#x4E3A;&#x5176;&#x81EA;&#x8EAB;&#xFF0C;&#x901A;&#x5E38;&#x6765;&#x8BF4;&#xFF0C;&#x8FD9;&#x4E2A;&#x6B65;&#x9AA4;&#x5728;&#x6BCF;&#x6B21;&#x4F7F;&#x7528;&#x8BE5;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x65F6;&#x53EA;&#x9700;&#x8981;&#x6267;&#x884C;&#x4E00;&#x6B21;&#x3002; &#x67E5;&#x627E;&#x6839;&#x7ED3;&#x70B9;&#x2003;&#x2003;&#x67E5;&#x627E;&#x5143;&#x7D20;&#x6240;&#x5728;&#x7684;&#x96C6;&#x5408;&#xFF0C;&#x5373;&#x6839;&#x8282;&#x70B9;&#x3002;&#x4E3A;&#x4E86;&#x4EE5;&#x540E;&#x7684;&#x67E5;&#x627E;&#x65B9;&#x4FBF;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x67E5;&#x8BE2;&#x65F6;&#x5C06;&#x8BE5;&#x7ED3;&#x70B9;&#x4EE5;&#x53CA;&#x8BE5;&#x7ED3;&#x70B9;&#x7684;&#x6240;&#x6709;&#x7236;&#x8282;&#x70B9;&#x90FD;&#x76F4;&#x63A5;&#x6307;&#x5411;&#x6839;&#x7ED3;&#x70B9;&#xFF0C;&#x518D;&#x6B21;&#x67E5;&#x8BE2;&#x65F6;&#x5373;&#x53EF;&#x76F4;&#x63A5;&#x67E5;&#x627E;&#x5230;&#x6839;&#x7ED3;&#x70B9;&#x3002; &#x5408;&#x5E76;&#x2003;&#x2003;&#x5C06;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#x6240;&#x5728;&#x7684;&#x96C6;&#x5408;&#x5408;&#x5E76;&#x4E3A;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#xFF0C;&#x5408;&#x5E76;&#x4E4B;&#x524D;&#xFF0C;&#x5E94;&#x5148;&#x5224;&#x65AD;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#x662F;&#x5426;&#x5C5E;&#x4E8E;&#x540C;&#x4E00;&#x96C6;&#x5408;&#xFF0C;&#x8FD9;&#x53EF;&#x7528;&#x4E0A;&#x9762;&#x7684;&#x201C;&#x67E5;&#x627E;&#x6839;&#x7ED3;&#x70B9;&#x201D;&#x64CD;&#x4F5C;&#x5B9E;&#x73B0;&#xFF0C;&#x5224;&#x65AD;&#x4E24;&#x4E2A;&#x6839;&#x7ED3;&#x70B9;&#x662F;&#x5426;&#x76F8;&#x540C;&#x6765;&#x5224;&#x65AD;&#x662F;&#x5426;&#x5C5E;&#x4E8E;&#x540C;&#x4E00;&#x96C6;&#x5408;&#x3002; &#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x5C9B;&#x5C7F;&#x6570;&#x91CF;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x6709;&#x4E00;&#x4E2A;&#x4E8C;&#x7EF4;&#x7684;&#x7F51;&#x683C;&#x5730;&#x56FE;&#xFF0C;&#x5176;&#x4E2D;1&#x4EE3;&#x8868;&#x9646;&#x5730;0&#x4EE3;&#x8868;&#x6C34;&#xFF0C;&#x5E76;&#x4E14;&#x8BE5;&#x7F51;&#x683C;&#x7684;&#x56DB;&#x5468;&#x5168;&#x90E8;&#x7531;&#x6C34;&#x5305;&#x56F4;&#x3002;&#x6211;&#x4EEC;&#x5BF9;&#x5C9B;&#x5C7F;&#x7684;&#x5B9A;&#x4E49;&#x662F;&#x56DB;&#x9762;&#x73AF;&#x6C34;&#xFF0C;&#x7531;&#x76F8;&#x90BB;&#x7684;&#x9646;&#x5730;&#x6C34;&#x5E73;&#x6216;&#x5782;&#x76F4;&#x8FDE;&#x63A5;&#x5F62;&#x6210;&#xFF0C;&#x73B0;&#x5728;&#x9700;&#x8981;&#x7EDF;&#x8BA1;&#x5C9B;&#x5C7F;&#x7684;&#x6570;&#x91CF;&#x3002;&#x2003;&#x2003;&#x8F93;&#x5165;&#x4E00;&#x884C;&#x6570;&#x636E;&#xFF0C;&#x4F7F;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x9694;&#x4E8C;&#x7EF4;&#x5730;&#x56FE;&#x7684;&#x6BCF;&#x4E00;&#x884C;&#xFF0C;&#x4F7F;&#x7528;&#x9017;&#x53F7;&#x5206;&#x9694;&#x4E00;&#x884C;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x9879;&#x3002;11,1,0,0,0 1,1,0,0,0 0,0,1,0,0 0,0,0,1,1 # &#x8F93;&#x5165;4&#xD7;5&#x7684;&#x5730;&#x56FE; &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;&#x521D;&#x59CB;&#x65F6;&#x5C06;&#x6BCF;&#x4E2A;&#x503C;&#x4E3A;1&#x7684;&#x70B9;&#x90FD;&#x6307;&#x5411;&#x81EA;&#x5DF1;(&#x5373;&#x5355;&#x72EC;&#x4E00;&#x4E2A;&#x70B9;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x5C9B;)&#xFF0C;count&#x7B49;&#x4E8E;&#x503C;&#x4E3A;1&#x7684;&#x70B9;&#x7684;&#x4E2A;&#x6570;&#x3002;&#x7136;&#x540E;&#x904D;&#x5386;&#x6574;&#x4E2A;&#x5730;&#x56FE;&#xFF0C;&#x5982;&#x679C;&#x8BE5;&#x70B9;&#x4E0A;&#x4E0B;&#x5DE6;&#x53F3;&#x6709;&#x503C;&#x4E3A;1&#x7684;&#x70B9;&#x5219;&#x67E5;&#x627E;&#x4E24;&#x4E2A;&#x70B9;&#x7684;&#x6839;&#x7ED3;&#x70B9;&#xFF0C;&#x5982;&#x679C;&#x6839;&#x7ED3;&#x70B9;&#x76F8;&#x540C;&#x8BF4;&#x660E;&#x5DF2;&#x7ECF;&#x5728;&#x540C;&#x4E00;&#x4E2A;&#x5C9B;&#x4E0A;&#xFF0C;&#x5426;&#x5219;&#x5408;&#x5E76;&#x4E24;&#x4E2A;&#x5C9B;&#xFF0C;count&#x503C;&#x51CF;1&#x3002;&#x2003;&#x2003;&#x5C06;&#x6240;&#x6709;&#x70B9;&#x90FD;&#x904D;&#x5386;&#x4EE5;&#x540E;&#xFF0C;&#x6B64;&#x65F6;&#x76F8;&#x90BB;&#x7684;&#x70B9;&#x90FD;&#x5177;&#x6709;&#x540C;&#x6837;&#x7684;&#x6839;&#x7ED3;&#x70B9;&#xFF0C;&#x6B64;&#x65F6;&#x7684;count&#x4E2A;&#x6570;&#x5373;&#x4E3A;&#x5C9B;&#x5C7F;&#x7684;&#x6570;&#x91CF;&#x3002; python&#x4EE3;&#x7801;&#x5B9E;&#x6218;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import sysclass Union_find: def __init__(self, grid): row_num, col_num = len(grid), len(grid[0]) self.count = 0 self.parent = [-1] * (row_num * col_num) self.rank = [0] * (row_num * col_num) for i in range(row_num): for j in range(col_num): if grid[i][j] == &apos;1&apos;: self.parent[i * col_num + j] = i * col_num + j self.count += 1 def find(self, i): root = i while self.parent[root] != root: root = self.parent[root] while self.parent[i] != root: i, self.parent[i] = self.parent[i], root return root def connection(self, p, q): return self.find(p) == self.find(q) def union(self, p, q): proot = self.find(p) qroot = self.find(q) if qroot != proot: self.parent[proot] = qroot self.count -= 1print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x8981;&#x67E5;&#x8BE2;&#x7684;&#x5730;&#x56FE;:&apos;)for line in sys.stdin: line = line.strip().split() row_num, col_num, grid, direction = len(line), (len(line[0]) + 1) // 2, [], [[1, 0], [0, 1]] for tmp in line: grid.append(tmp.split(&apos;,&apos;)) uf = Union_find(grid) for i in range(row_num): for j in range(col_num): if grid[i][j] == &apos;1&apos;: for x, y in direction: new_i, new_j = i + x, j + y if new_i &lt; row_num and new_j &lt; col_num and grid[new_i][new_j] == &apos;1&apos;: uf.union(i * col_num + j, new_i * col_num + new_j) print(&apos;&#x8BE5;&#x5730;&#x56FE;&#x4E2D;&#x5C9B;&#x5C7F;&#x7684;&#x6570;&#x91CF;&#x4E3A;:&apos;, uf.count) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7B97;&#x6CD5;&#x603B;&#x7ED3;&#x2003;&#x2003;&#x5E76;&#x67E5;&#x96C6;&#x662F;&#x4E00;&#x4E2A;&#x8F83;&#x4E3A;&#x590D;&#x6742;&#x4E14;&#x4E0D;&#x592A;&#x5E38;&#x7528;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x4F46;&#x662F;&#x53EF;&#x4EE5;&#x89E3;&#x51B3;&#x4E00;&#x4E9B;&#x7279;&#x5B9A;&#x95EE;&#x9898;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x89E3;&#x51B3;&#x4E00;&#x4E9B;&#x96C6;&#x5408;&#x5173;&#x7CFB;&#x7684;&#x95EE;&#x9898;&#x3002;&#x8BE5;&#x7B97;&#x6CD5;&#x53EF;&#x4EE5;&#x4F7F;&#x5177;&#x6709;&#x67D0;&#x4E9B;&#x7279;&#x5B9A;&#x5173;&#x7CFB;&#x7684;&#x70B9;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x7FA4;&#x4F53;&#xFF0C;&#x7136;&#x540E;&#x7EDF;&#x8BA1;&#x6574;&#x4F53;&#x7684;&#x7FA4;&#x4F53;&#x4E2A;&#x6570;&#x5373;&#x4E3A;&#x6574;&#x4F53;&#x7684;&#x7C7B;&#x522B;&#x4E2A;&#x6570;&#xFF0C;&#x67D0;&#x4E2A;&#x7FA4;&#x4F53;&#x4E2D;&#x4E2A;&#x4F53;&#x7684;&#x6570;&#x91CF;&#x5373;&#x4E3A;&#x6574;&#x4F53;&#x4E2D;&#x67D0;&#x4E00;&#x7C7B;&#x522B;&#x7684;&#x6570;&#x91CF;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>计算机基础知识</category>
        <category>常用算法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[位运算(Bit Operation)]]></title>
    <url>%2F2019%2F08%2F02%2Falgorithm%20bit%20operation%2F</url>
    <content type="text"><![CDATA[&#x4F4D;&#x8FD0;&#x7B97; &#x539F;&#x7406;&#x4ECB;&#x7ECD;&#x2003;&#x2003; Bit Operation:&#x4F4D;&#x8FD0;&#x7B97;&#xFF0C;&#x7A0B;&#x5E8F;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x6570;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x5185;&#x5B58;&#x4E2D;&#x90FD;&#x662F;&#x4EE5;&#x4E8C;&#x8FDB;&#x5236;&#x7684;&#x5F62;&#x5F0F;&#x50A8;&#x5B58;&#x7684;&#xFF0C;&#x4F4D;&#x8FD0;&#x7B97;&#x5C31;&#x662F;&#x76F4;&#x63A5;&#x5BF9;&#x6574;&#x6570;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x4F4D;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#xFF0C;&#x6240;&#x4EE5;&#x8FD0;&#x7B97;&#x901F;&#x5EA6;&#x76F8;&#x5BF9;&#x8F83;&#x5FEB;&#x3002;&#x4F4D;&#x8FD0;&#x7B97;&#x4E3B;&#x8981;&#x5305;&#x62EC;&#x6309;&#x4F4D;&#x4E0E;(&amp;)&#x3001;&#x6309;&#x4F4D;&#x6216;(|)&#x3001;&#x6309;&#x4F4D;&#x5F02;&#x6216;(^)&#x3001;&#x53D6;&#x53CD;(~)&#x3001;&#x5DE6;&#x79FB;(&lt;&lt;)&#x3001;&#x53F3;&#x79FB;(&gt;&gt;)&#x8FD9;&#x51E0;&#x79CD;&#xFF0C;&#x5176;&#x4E2D;&#x9664;&#x4E86;&#x53D6;&#x53CD;(~)&#x4EE5;&#x5916;&#xFF0C;&#x5176;&#x4ED6;&#x7684;&#x90FD;&#x662F;&#x4E8C;&#x76EE;&#x8FD0;&#x7B97;&#x7B26;&#xFF0C;&#x5373;&#x8981;&#x6C42;&#x8FD0;&#x7B97;&#x7B26;&#x5DE6;&#x53F3;&#x4E24;&#x4FA7;&#x5747;&#x6709;&#x4E00;&#x4E2A;&#x8FD0;&#x7B97;&#x91CF;&#x3002; &#x7B97;&#x6CD5;&#x57FA;&#x7840;&#x539F;&#x7801;&#x2003;&#x2003;&#x539F;&#x7801;&#x662F;&#x4E8C;&#x8FDB;&#x5236;&#x7684;&#x4E00;&#x79CD;&#x8868;&#x73B0;&#x65B9;&#x5F0F;&#x3002;&#x53D6;&#x8BE5;&#x6574;&#x6570;&#x7684;&#x7EDD;&#x5BF9;&#x503C;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#xFF0C;&#x518D;&#x52A0;&#x4E0A;&#x7B26;&#x53F7;&#x4F4D;&#x3002;&#x8BE5;&#x539F;&#x7801;&#x53EA;&#x662F;&#x4E3A;&#x4E86;&#x8BA9;&#x6211;&#x4EEC;&#x770B;&#x4E8C;&#x8FDB;&#x5236;&#x66F4;&#x76F4;&#x89C2;&#xFF0C;&#x76F4;&#x63A5;&#x770B;&#x51FA;&#x6B63;&#x8D1F;&#x6570;&#x548C;&#x6BD4;&#x8F83;&#x5927;&#x5C0F;&#x3002;&#x4F46;&#x539F;&#x7801;&#x4E0D;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x4FDD;&#x5B58;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x80FD;&#x76F4;&#x63A5;&#x53C2;&#x4E0E;&#x8BA1;&#x7B97;&#x3002; &#x53CD;&#x7801;&#x2003;&#x2003;&#x53CD;&#x7801;&#x4E3B;&#x8981;&#x662F;&#x9488;&#x5BF9;&#x8D1F;&#x6570;&#x7684;&#x5904;&#x7406;&#x3002;&#x975E;&#x8D1F;&#x6570;&#x7684;&#x53CD;&#x7801;&#x7B49;&#x4E8E;&#x5176;&#x539F;&#x7801;&#xFF0C;&#x8D1F;&#x6570;&#x7684;&#x53CD;&#x7801;&#x5728;&#x539F;&#x7801;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x7B26;&#x53F7;&#x4F4D;&#x4E0D;&#x53D8;&#xFF0C;&#x5176;&#x4ED6;&#x6570;&#x503C;&#x4F4D;&#x53D6;&#x53CD;&#xFF0C;&#x5373;&#x628A;1&#x53D8;&#x6210;0&#xFF0C;&#x628A;0&#x53D8;&#x6210;1&#x3002;&#x53CD;&#x7801;&#x662F;&#x4E3A;&#x4E86;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x4E2D;&#x5B58;&#x50A8;&#x4E8C;&#x8FDB;&#x5236;&#xFF0C;&#x4F46;&#x975E;&#x771F;&#x6B63;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x503C;&#xFF0C;&#x6240;&#x4EE5;&#x4E5F;&#x4E0D;&#x76F4;&#x63A5;&#x53C2;&#x4E0E;&#x8BA1;&#x7B97;&#x3002; &#x8865;&#x7801;&#x2003;&#x2003;&#x8865;&#x7801;&#x662F;&#x771F;&#x6B63;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x503C;&#x4E86;&#xFF0C;&#x4E3B;&#x8981;&#x4E5F;&#x662F;&#x9488;&#x5BF9;&#x8D1F;&#x6570;&#x3002;&#x975E;&#x8D1F;&#x6570;&#x4E0D;&#x53D8;&#xFF0C;&#x800C;&#x8D1F;&#x6570;&#x662F;&#x5728;&#x53CD;&#x7801;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#x52A0;1&#xFF0C;&#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#x6B63;&#x6570;&#x548C;&#x8D1F;&#x6570;&#x4E4B;&#x95F4;&#x8FDB;&#x884C;&#x8FD0;&#x7B97;&#x3002; &#x4F4D;&#x8FD0;&#x7B97; &#x4F4D;&#x8FD0;&#x7B97;&#x6280;&#x5DE7;$$x \ &gt;&gt; \ n \iff \left \lfloor x \div \ 2^n \right \rfloor \ , \ x&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x503C;&#x53F3;&#x79FB;n&#x4F4D;$$$$x \ &lt;&lt; \ n \iff x \ \times \ 2^n \ , \ x&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x503C;&#x53F3;&#x79FB;n&#x4F4D;$$$$x \ \&amp; \ 1 \ == \ 1 \iff x \ % \ 2 \ == \ 1 \ , \ &#x5224;&#x65AD;x&#x662F;&#x5426;&#x4E3A;&#x5947;&#x6570;$$$$x \ \&amp; \ (x -1) \ , \ &#x6E05;&#x9664;x&#x6700;&#x540E;&#x4E00;&#x4F4D;&#x7684;1$$$$x \ \&amp; \ (-x) \ , \ &#x5F97;&#x5230;x&#x6700;&#x540E;&#x4E00;&#x4F4D;&#x7684;1$$ &#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x4E8C;&#x8FDB;&#x5236;&#x4E2D;1&#x7684;&#x4E2A;&#x6570;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;n&#xFF0C;&#x8F93;&#x51FA;&#x4ECE;0&#x5230;n&#x7684;&#x6BCF;&#x4E2A;&#x6570;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x4E2D;&#x6709;&#x591A;&#x5C11;&#x4E2A;1&#xFF1F;&#x2003;&#x2003;&#x8F93;&#x5165;&#x6B63;&#x6574;&#x6570;n 110 # &#x8F93;&#x5165;&#x6B63;&#x6574;&#x6570;10 &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;&#x5206;&#x6790;&#x4E00;&#x4E2A;&#x6570;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x4E2D;&#x6709;&#x591A;&#x5C11;&#x4E2A;1&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4F20;&#x7EDF;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x4E00;&#x76F4;&#x6A21;2(mod 2)&#x7136;&#x540E;&#x518D;&#x9664;&#x4EE5;2&#xFF0C;&#x77E5;&#x9053;&#x7ED3;&#x679C;&#x4E3A;0&#x5373;&#x53EF;&#x3002;&#x8FD9;&#x6837;&#x505A;&#x867D;&#x7136;&#x4E5F;&#x4E0D;&#x6162;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x4E8C;&#x8FDB;&#x5236;&#x4E2D;1&#x7684;&#x4E2A;&#x6570;&#x5F88;&#x5C11;&#xFF0C;&#x8FD9;&#x6837;&#x505A;&#x6548;&#x7387;&#x5C31;&#x5F88;&#x4F4E;&#x3002;&#x2003;&#x2003;&#x53EF;&#x4EE5;&#x91C7;&#x7528;$x \ \&amp; \ (x -1)$&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x6BCF;&#x6B21;&#x6E05;&#x9664;x&#x6700;&#x540E;&#x4E00;&#x4F4D;&#x7684;1&#xFF0C;&#x6E05;&#x9664;&#x4E86;&#x591A;&#x5C11;&#x6B21;&#x5373;&#x6709;&#x591A;&#x5C11;&#x4E2A;1&#x3002;&#x5E76;&#x4E14;&#x4F7F;&#x7528;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x4FDD;&#x5B58;&#x4E4B;&#x524D;&#x505A;&#x8FC7;&#x7684;&#x8BB0;&#x5F55;&#xFF0C;&#x5373;&#x6C42;6&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x4F4D;(110)&#x6709;&#x591A;&#x5C11;1&#xFF0C;&#x5C06;&#x505A;&#x540E;&#x4E00;&#x4F4D;&#x7684;1&#x53BB;&#x6389;&#x4E4B;&#x540E;&#x4E3A;(100)&#xFF0C;&#x5373;&#x6C42;4&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x4F4D;&#x6709;&#x591A;&#x5C11;1&#xFF0C;&#x7136;&#x540E;&#x52A0;1&#x5373;&#x53EF;&#x3002; python&#x4EE3;&#x7801;&#x5B9E;&#x6218;123456789import sysprint(&apos;&#x8BF7;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;:&apos;)for line in sys.stdin: number = int(line.strip()) number_one_bit = [0] * (number + 1) for i in range(1, number + 1): number_one_bit[i] = number_one_bit[i &amp; (i - 1)] + 1 print(&apos;&#x4ECE;0&#x5230;&apos; + str(number) + &apos;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x8868;&#x793A;&#x4E2D;1&#x7684;&#x4E2A;&#x6570;&#x4E3A;:&apos;, number_one_bit) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7ECF;&#x5178;&#x4F8B;&#x9898;(N&#x7687;&#x540E;&#x95EE;&#x9898;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x5728;n&#xD7;n&#x7684;&#x56FD;&#x9645;&#x68CB;&#x76D8;&#x4E0A;&#x653E;&#x7F6E;&#x5F7C;&#x6B64;&#x4E0D;&#x53D7;&#x653B;&#x51FB;&#x7684;n&#x4E2A;&#x7687;&#x540E;&#xFF0C;&#x6309;&#x7167;&#x89C4;&#x5219;&#xFF0C;&#x7687;&#x540E;&#x53EF;&#x4EE5;&#x653B;&#x51FB;&#x4E0E;&#x4E4B;&#x5728;&#x540C;&#x4E00;&#x884C;&#x3001;&#x540C;&#x4E00;&#x5217;&#x3001;&#x7EDF;&#x4E00;&#x659C;&#x7EBF;&#x4E0A;&#x7684;&#x68CB;&#x5B50;&#x3002;&#x73B0;&#x5728;&#x5DF2;&#x77E5;&#x53C8;n&#x4E2A;&#x7687;&#x540E;&#xFF0C;&#x95EE;&#x6709;&#x591A;&#x5C11;&#x79CD;&#x4E0D;&#x540C;&#x7684;&#x653E;&#x6CD5;&#xFF1F;&#x2003;&#x2003;&#x8F93;&#x5165;&#x7687;&#x540E;&#x7684;&#x4E2A;&#x6570;n 16 # &#x7687;&#x540E;&#x7684;&#x4E2A;&#x6570; &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;&#x4E4B;&#x524D;&#x518D;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;&#x4E2D;&#x63D0;&#x5230;&#x8FC7;N&#x7687;&#x540E;&#x7684;&#x4E00;&#x822C;&#x89E3;&#x6CD5;&#xFF0C;&#x786E;&#x5B9E;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x662F;&#x6700;&#x5BB9;&#x6613;&#x60F3;&#x5230;&#x7684;&#x4E00;&#x79CD;&#x505A;&#x6CD5;&#xFF0C;&#x4F46;&#x662F;&#x5E76;&#x4E0D;&#x662F;&#x6700;&#x5FEB;&#x7684;&#x4E00;&#x79CD;&#x505A;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x5C1D;&#x8BD5;&#x91C7;&#x7528;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;+&#x4F4D;&#x8FD0;&#x7B97;&#x63D0;&#x9AD8;&#x6548;&#x7387;&#x3002;&#x2003;&#x2003;&#x4EE5;4&#x7687;&#x540E;&#x4E3A;&#x4F8B;&#xFF0C;&#x6BCF;&#x4E2A;&#x7687;&#x540E;&#x6709;&#x56DB;&#x4E2A;&#x683C;&#x5B50;&#x53EF;&#x4EE5;&#x653E;&#x7F6E;&#xFF0C;&#x53EF;&#x4EE5;&#x5F53;&#x4F5C;&#x4E8C;&#x8FDB;&#x5236;&#x7684;&#x56DB;&#x4E2A;bit&#x3002;&#x5982;8(1000)&#x4EE3;&#x8868;&#x7687;&#x540E;&#x653E;&#x5728;&#x7B2C;1&#x4E2A;&#x683C;&#x5B50;&#xFF0C;4(0100)&#x4EE3;&#x8868;&#x7687;&#x540E;&#x653E;&#x5728;&#x7B2C;&#x4E8C;&#x4E2A;&#x683C;&#x5B50;&#x3002;&#x67D0;&#x4E00;&#x4E2A;&#x7687;&#x540E;&#x53EF;&#x4EE5;&#x653E;&#x7F6E;&#x7684;&#x4F4D;&#x7F6E;&#x7531;&#x5217;&#xFF0C;&#x659C;&#x7EBF;&#x548C;&#x53CD;&#x659C;&#x7EBF;&#x4E09;&#x4E2A;&#x65B9;&#x5411;&#x9650;&#x5236;&#x3002;&#x2003;&#x2003;&#x8BBE;&#x7B2C;i&#x4E2A;&#x7687;&#x540E;&#x653E;&#x7F6E;&#x7684;&#x884C;&#x6570;&#x4E3A;row&#xFF0C;&#x88AB;&#x653B;&#x51FB;&#x7684;&#x5217;&#x6570;&#x4E3A;col&#xFF0C;&#x88AB;&#x653B;&#x51FB;&#x7684;&#x659C;&#x7EBF;&#x4E3A;pie&#xFF0C;&#x88AB;&#x653B;&#x51FB;&#x7684;&#x53CD;&#x659C;&#x7EBF;&#x4E3A;na&#x3002;&#x56E0;&#x6B64;&#x6240;&#x6709;&#x88AB;&#x653B;&#x51FB;&#x7684;&#x70B9;&#x4E3A;$col \ | \ pie \ | \ na$&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x653E;&#x7F6E;&#x7684;&#x4F4D;&#x7F6E;&#x4E3A;$~(col \ | \ pie \ | \ na) \ \&amp; \ ((1 &lt;&lt; queen_num) - 1)$&#xFF0C;&#x4FDD;&#x8BC1;&#x9AD8;&#x4F4D;&#x90FD;&#x4E3A;0&#xFF0C;&#x4E0D;&#x53EF;&#x4EE5;&#x653E;&#x7F6E;&#x3002;&#x2003;&#x2003;&#x4E0A;&#x8FF0;&#x64CD;&#x4F5C;&#x4E4B;&#x540E;&#x8BF4;&#x660E;&#x8BE5;&#x6570;&#x4E2D;&#x4E8C;&#x8FDB;&#x5236;&#x4F4D;&#x7684;1&#x5C31;&#x662F;&#x5F53;&#x524D;&#x53EF;&#x4EE5;&#x653E;&#x7F6E;&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#x6BCF;&#x6B21;$x \ \&amp; \ (-x)$&#x5F97;&#x5230;x&#x6700;&#x540E;&#x4E00;&#x4F4D;&#x7684;1&#xFF0C;&#x5E76;&#x5C06;&#x7687;&#x540E;&#x653E;&#x7F6E;&#x4E8E;&#x8BE5;&#x4F4D;&#x7F6E;p&#xFF0C;&#x5E76;&#x4F7F;&#x7528;$x \ \&amp; \ (x -1)$&#x5E76;&#x5C06;&#x6B64;&#x4F4D;&#x7684;1&#x6E05;&#x9664;&#xFF0C;&#x5E76;&#x8FDB;&#x5165;&#x4E0B;&#x4E00;&#x884C;&#xFF0C;&#x4E0B;&#x4E00;&#x884C;&#x88AB;&#x653B;&#x51FB;&#x7684;&#x5217;&#x4E3A;$col \ | \ p$&#xFF0C;&#x4E0B;&#x4E00;&#x884C;&#x88AB;&#x653B;&#x51FB;&#x7684;&#x659C;&#x7EBF;&#x4E3A;$(pie \ | \ p) \ &lt;&lt; \ 1$&#xFF0C;&#x4E0B;&#x4E00;&#x884C;&#x88AB;&#x653B;&#x51FB;&#x7684;&#x53CD;&#x659C;&#x7EBF;&#x4E3A;$(na \ | \ p) \ &gt;&gt; \ 1$ python&#x4EE3;&#x7801;&#x5B9E;&#x6218;12345678910111213141516171819import sysdef dfs(row, col, pie, na): global res_num if row &gt;= queen_num: res_num += 1 return bits = (~(col | pie | na) &amp; ((1 &lt;&lt; queen_num) - 1)) while bits &gt; 0: p = bits &amp; -bits dfs(row + 1, col | p, (pie | p) &lt;&lt; 1, (na | p) &gt;&gt; 1) bits &amp;= bits - 1print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x7687;&#x540E;&#x7684;&#x4E2A;&#x6570;:&apos;)for line in sys.stdin: queen_num, res_num = int(line.strip()), 0 chess = [[0 for i in range(queen_num)] for j in range(queen_num)] dfs(0, 0, 0, 0) print(&apos;&#x4E00;&#x5171;&#x6709;&apos; + str(res_num) + &apos;&#x79CD;&#x7687;&#x540E;&#x653E;&#x7F6E;&#x65B9;&#x6CD5;&apos;) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6590;&#x6CE2;&#x90A3;&#x5951;&#x6570;&#x5217;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x5047;&#x8BBE;&#x7B2C;&#x4E00;&#x4E2A;&#x6708;&#x6709;&#x4E00;&#x5BF9;&#x521A;&#x8BDE;&#x751F;&#x7684;&#x5154;&#x5B50;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x6708;&#x8FDB;&#x5165;&#x6210;&#x719F;&#x671F;&#xFF0C;&#x7B2C;&#x4E09;&#x4E2A;&#x6708;&#x5F00;&#x59CB;&#x751F;&#x80B2;&#x5154;&#x5B50;&#xFF0C;&#x800C;&#x4E00;&#x5BF9;&#x6210;&#x719F;&#x7684;&#x5154;&#x5B50;&#x6BCF;&#x6708;&#x56DE;&#x751F;&#x4E00;&#x5BF9;&#x5154;&#x5B50;&#xFF0C;&#x5982;&#x679C;&#x5154;&#x5B50;&#x6C38;&#x4E0D;&#x6B7B;&#x53BB;&#xFF0C;&#x90A3;&#x4E48;n&#x4E2A;&#x6708;&#x540E;&#x6709;&#x591A;&#x5C11;&#x5BF9;&#x5154;&#x5B50;&#xFF1F;&#x2003;&#x2003;&#x8F93;&#x5165;&#x6708;&#x4EFD;&#x6570;n 110 # &#x6C42;&#x7B2C;10&#x4E2A;&#x6708;&#x7684;&#x5154;&#x5B50;&#x6570; &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;&#x6590;&#x6CE2;&#x90A3;&#x5951;&#x6570;&#x5217;&#x662F;&#x4E00;&#x4E2A;&#x5178;&#x578B;&#x7684;&#x7B97;&#x6CD5;&#x95EE;&#x9898;&#xFF0C;&#x6709;&#x591A;&#x4E2A;&#x4E0D;&#x540C;&#x7248;&#x672C;&#x7684;&#x89E3;&#x6CD5;&#xFF0C;&#x4E5F;&#x4EE3;&#x8868;&#x7740;&#x4E0D;&#x540C;&#x7684;&#x601D;&#x60F3;&#x3002;&#x2003;&#x2003;&#x9996;&#x5148;&#x5C31;&#x662F;&#x9012;&#x5F52;&#x89E3;&#x6CD5;&#xFF0C;&#x6839;&#x636E;$f(n)=f(n-1)+f(n-2), \ f(1)=f(2)=1$&#x6C42;&#x89E3;&#xFF0C;&#x4E0D;&#x8FC7;&#x8FD9;&#x79CD;&#x89E3;&#x6CD5;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;$O(({\frac{\sqrt5 + 1}{2}})^n)$&#xFF0C;&#x7B97;f(10)&#x8FD8;&#x662F;&#x975E;&#x5E38;&#x5FEB;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x7B97;f(100)&#x7B80;&#x76F4;&#x662F;&#x5929;&#x65B9;&#x591C;&#x8C2D;&#x3002;&#x2003;&#x2003;&#x5176;&#x6B21;&#x662F;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x89E3;&#x6CD5;&#xFF0C;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x5927;&#x5C0F;&#x4E3A;n+1&#x7684;&#x77E9;&#x9635;&#xFF0C;&#x6BCF;&#x6B21;&#x8BA1;&#x7B97;&#x7684;&#x503C;&#x5B58;&#x653E;&#x4E8E;&#x77E9;&#x9635;&#x4E2D;&#x6B64;&#x65F6;&#x8BA1;&#x7B97;$f(n)=f(n-1)+f(n-2)$&#x65F6;&#xFF0C;f(n-1)&#x548C;f(n-2)&#x5C31;&#x4E0D;&#x9700;&#x8981;&#x9012;&#x5F52;&#x8BA1;&#x7B97;&#xFF0C;&#x53EA;&#x8981;&#x67E5;&#x8868;&#x5373;&#x53EF;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(n)&#x3002;&#x2003;&#x2003;&#x6700;&#x5FEB;&#x7684;&#x89E3;&#x6CD5;&#x4E3A;&#x77E9;&#x9635;&#x89E3;&#x6CD5;&#xFF0C;&#x6839;&#x636E;$\begin{pmatrix} f(n-1) \ f(n) \end{pmatrix} = \begin{pmatrix} 1 &amp; 1 \ 1 &amp; 2 \end{pmatrix} \ \begin{pmatrix} f(n-2) \ f(n-3) \end{pmatrix}$&#x53EF;&#x5F97;$$\begin{pmatrix} f(\left \lfloor \frac{n}{2} \right \rfloor \times 2) \ f(\left \lfloor \frac{n}{2} \right \rfloor \times 2+1) \end{pmatrix} = {\begin{pmatrix} 1 &amp; 1 \ 1 &amp; 2 \end{pmatrix}}^{\left \lfloor \frac{n}{2} \right \rfloor} \ \begin{pmatrix} 0 \ 1 \end{pmatrix}$$&#x2003;&#x2003;&#x5373;&#x95EE;&#x9898;&#x8F6C;&#x5316;&#x4E3A;&#x6C42;&#x77E9;&#x9635;${\begin{pmatrix} 1 &amp; 1 \ 1 &amp; 2 \end{pmatrix}}^{\left \lfloor \frac{n}{2} \right \rfloor}$&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(n)&#x3002;&#x4E58;&#x65B9;&#x95EE;&#x9898;&#x53EF;&#x4EE5;&#x7528;&#x4F4D;&#x8FD0;&#x7B97;&#x63D0;&#x9AD8;&#x6548;&#x7387;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x53EF;&#x4EE5;&#x63D0;&#x5347;&#x5230;O(log(n)) python&#x4EE3;&#x7801;&#x5B9E;&#x6218;1234567891011121314151617181920212223import sysdef matrix_mul(array_1, array_2): row_1, mid, col_2 = len(array_1), len(array_2), len(array_2[0]) array=[[0 for i in range(col_2)] for j in range(row_1)] for i in range(row_1): for j in range(col_2): array[i][j] = array_1[i][0] * array_2[0][j] + array_1[i][1] * array_2[1][j] return arraydef matrix_pow(array, m): binary, n = [int(x) for x in bin(m)[2:]], len(array) res, temp = [[1, 0], [0, 1]], [x[:] for x in array] while binary: if binary.pop() == 1: res = matrix_mul(res, temp) temp = matrix_mul(temp, temp) return resprint(&apos;&#x8BF7;&#x8F93;&#x5165;&#x6708;&#x4EFD;&#x6570;:&apos;)for line in sys.stdin: month = int(line.strip()) print(&apos;&#x7B2C;&apos; + str(month) + &apos;&#x6708;&#x7684;&#x5154;&#x5B50;&#x6570;&#x91CF;&#x4E3A;:&apos;, matrix_mul(matrix_pow([[1, 1], [1, 2]], month//2), [[0], [1]])[month % 2][0]) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7B97;&#x6CD5;&#x603B;&#x7ED3;&#x2003;&#x2003;&#x4F4D;&#x8FD0;&#x7B97;&#x8BF4;&#x662F;&#x4E00;&#x79CD;&#x7B97;&#x6CD5;&#xFF0C;&#x5B9E;&#x9645;&#x4E0A;&#x5E94;&#x8BE5;&#x8BF4;&#x662F;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#x3002;&#x8BB8;&#x591A;&#x95EE;&#x9898;&#x90FD;&#x53EF;&#x4EE5;&#x7528;&#x4F4D;&#x8FD0;&#x7B97;&#x6765;&#x63D0;&#x9AD8;&#x6548;&#x7387;&#xFF0C;&#x4F4D;&#x8FD0;&#x7B97;&#x5F88;&#x5C11;&#x5355;&#x72EC;&#x4F7F;&#x7528;&#xFF0C;&#x5F80;&#x5F80;&#x540C;&#x5176;&#x4ED6;&#x7684;&#x7B97;&#x6CD5;&#x4E00;&#x8D77;&#x4F7F;&#x7528;&#xFF0C;&#x4F5C;&#x4E3A;&#x5176;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x6B65;&#x9AA4;&#xFF0C;&#x80FD;&#x591F;&#x5728;&#x7279;&#x5B9A;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x53D1;&#x6325;&#x51FA;&#x7279;&#x6B8A;&#x7684;&#x6548;&#x679C;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>计算机基础知识</category>
        <category>常用算法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[广度优先搜索(Breadth-First-Search)]]></title>
    <url>%2F2019%2F07%2F31%2Falgorithm%20BFS%2F</url>
    <content type="text"><![CDATA[&#x5E7F;&#x5EA6;&#x4F18;&#x5148; &#x539F;&#x7406;&#x4ECB;&#x7ECD;&#x2003;&#x2003; Breadth-First-Search(BFS):&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;&#xFF0C;&#x5C5E;&#x4E8E;&#x56FE;&#x7B97;&#x6CD5;&#x7684;&#x4E00;&#x79CD;&#xFF0C;&#x662F;&#x4E00;&#x79CD;&#x76F2;&#x76EE;&#x641C;&#x5BFB;&#x6CD5;&#xFF0C;&#x76EE;&#x7684;&#x662F;&#x7CFB;&#x7EDF;&#x5730;&#x5C55;&#x5F00;&#x5E76;&#x68C0;&#x67E5;&#x56FE;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x8282;&#x70B9;&#xFF0C;&#x4EE5;&#x627E;&#x5BFB;&#x7ED3;&#x679C;&#x3002;&#x5728;&#x6811;&#x641C;&#x7D22;&#x7B97;&#x6CD5;&#x4E2D;&#xFF0C;&#x4ECE;&#x4E0A;&#x5230;&#x4E0B;&#x4E3A;&#x7EB5;&#xFF0C;&#x4ECE;&#x5DE6;&#x5411;&#x53F3;&#x4E3A;&#x6A2A;&#xFF0C;&#x7EB5;&#x5411;&#x641C;&#x7D22;&#x4E3A;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#xFF0C;&#x800C;&#x6A2A;&#x5411;&#x641C;&#x7D22;&#x662F;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x3002;&#x7B80;&#x8A00;&#x4E4B;&#x5C31;&#x662F;&#x5148;&#x8BBF;&#x95EE;&#x56FE;&#x7684;&#x9876;&#x70B9;&#xFF0C;&#x7136;&#x540E;&#x4F18;&#x5148;&#x8BBF;&#x95EE;&#x5176;&#x90BB;&#x63A5;&#x70B9;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x4F9D;&#x6B21;&#x8FDB;&#x884C;&#x88AB;&#x8BBF;&#x95EE;&#x70B9;&#x7684;&#x90BB;&#x63A5;&#x70B9;&#xFF0C;&#x4E00;&#x5C42;&#x4E00;&#x5C42;&#x8BBF;&#x95EE;&#xFF0C;&#x76F4;&#x81F3;&#x8BBF;&#x95EE;&#x5B8C;&#x6240;&#x6709;&#x70B9;&#xFF0C;&#x904D;&#x5386;&#x7ED3;&#x675F;&#xFF0C;&#x901A;&#x5E38;&#x6839;&#x636E;&#x961F;&#x5217;&#x7684;&#x5148;&#x8FDB;&#x5148;&#x51FA;&#x6027;&#x8D28;&#x5C06;&#x5404;&#x7ED3;&#x70B9;&#x904D;&#x5386;&#x3002; &#x7B97;&#x6CD5;&#x6761;&#x4EF6;&#x89E3;&#x7A7A;&#x95F4;&#x2003;&#x2003;&#x89E3;&#x7684;&#x7EC4;&#x7EC7;&#x5F62;&#x5F0F;&#x53EF;&#x4EE5;&#x89C4;&#x8303;&#x4E3A;&#x4E00;&#x4E2A;n&#x5143;&#x7EC4;${x_1,x_2,\ldots,x_n}$&#xFF0C;&#x5E76;&#x4E14;&#x5BF9;&#x89E3;&#x6709;&#x53D6;&#x503C;&#x8303;&#x56F4;&#x7684;&#x9650;&#x5B9A;&#xFF0C;&#x4E00;&#x822C;&#x4E3A;&#x6709;&#x7A77;&#x4E2A;&#xFF0C;&#x89E3;&#x7684;&#x4E2A;&#x6570;&#x4EE3;&#x8868;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;&#x7684;&#x5206;&#x652F;&#x4E2A;&#x6570;&#x3002;&#x89E3;&#x7A7A;&#x95F4;&#x8D8A;&#x5C0F;&#xFF0C;&#x641C;&#x7D22;&#x6548;&#x7387;&#x8D8A;&#x9AD8;&#xFF0C;&#x89E3;&#x7A7A;&#x95F4;&#x5927;&#x72B9;&#x5982;&#x5927;&#x6D77;&#x635E;&#x9488;&#xFF0C;&#x641C;&#x7D22;&#x6548;&#x7387;&#x5F88;&#x4F4E;&#x3002; &#x526A;&#x679D;&#x51FD;&#x6570;&#x2003;&#x2003;&#x526A;&#x679D;&#x51FD;&#x6570;&#x53C8;&#x79F0;&#x4E3A;&#x9690;&#x7EA6;&#x675F;&#xFF0C;&#x5BF9;&#x80FD;&#x5426;&#x5F97;&#x5230;&#x95EE;&#x9898;&#x7684;&#x53EF;&#x884C;&#x89E3;&#x7684;&#x7EA6;&#x675F;&#x79F0;&#x4E3A;&#x7EA6;&#x675F;&#x51FD;&#x6570;&#xFF0C;&#x5BF9;&#x80FD;&#x5426;&#x5F97;&#x5230;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x7684;&#x7EA6;&#x675F;&#x79F0;&#x4E3A;&#x9650;&#x754C;&#x51FD;&#x6570;&#x3002;&#x6709;&#x4E86;&#x526A;&#x679D;&#x51FD;&#x6570;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x526A;&#x6389;&#x5F97;&#x4E0D;&#x5230;&#x53EF;&#x884C;&#x89E3;&#x6216;&#x6700;&#x4F18;&#x89E3;&#x7684;&#x5206;&#x652F;&#xFF0C;&#x907F;&#x514D;&#x4E86;&#x65E0;&#x6548;&#x641C;&#x7D22;&#xFF0C;&#x63D0;&#x9AD8;&#x641C;&#x7D22;&#x7684;&#x6548;&#x7387;&#x3002;&#x56E0;&#x6B64;&#x526A;&#x679D;&#x51FD;&#x6570;&#x7684;&#x8BBE;&#x8BA1;&#x662F;&#x5341;&#x5206;&#x91CD;&#x8981;&#x7684;&#x3002; &#x7B97;&#x6CD5;&#x6B65;&#x9AA4;&#x2003;&#x2003;(1)&#x5206;&#x6790;&#x9898;&#x610F;&#xFF0C;&#x4E86;&#x89E3;&#x9898;&#x76EE;&#x8981;&#x6C42;&#x2003;&#x2003;(2)&#x6839;&#x636E;&#x95EE;&#x9898;&#x5206;&#x6790;&#x89E3;&#x7A7A;&#x95F4;&#x7684;&#x5F62;&#x5F0F;&#x2003;&#x2003;(3)&#x6839;&#x636E;&#x89E3;&#x7A7A;&#x95F4;&#x8BBE;&#x8BA1;&#x5408;&#x9002;&#x7684;&#x526A;&#x679D;&#x51FD;&#x6570; &#x7ECF;&#x5178;&#x4F8B;&#x9898;(0-1&#x80CC;&#x5305;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x5047;&#x8BBE;&#x5C71;&#x6D1E;&#x91CC;&#x6709;n&#x4E2A;&#x5B9D;&#x7269;&#xFF0C;&#x6BCF;&#x79CD;&#x5B9D;&#x7269;&#x6709;&#x4E00;&#x5B9A;&#x91CD;&#x91CF;w&#x548C;&#x76F8;&#x5E94;&#x7684;&#x4EF7;&#x503C;v&#xFF0C;&#x80CC;&#x5305;&#x7684;&#x88C5;&#x8F7D;&#x80FD;&#x529B;&#x6709;&#x9650;&#xFF0C;&#x53EA;&#x80FD;&#x8FD0;&#x8D70;&#x91CD;&#x91CF;&#x4E3A;m&#x7684;&#x5B9D;&#x7269;&#xFF0C;&#x5B9D;&#x7269;&#x4E0D;&#x53EF;&#x4EE5;&#x5206;&#x5272;&#xFF0C;&#x5982;&#x4F55;&#x4F7F;&#x80CC;&#x5305;&#x8FD0;&#x8D70;&#x7269;&#x54C1;&#x7684;&#x4EF7;&#x503C;&#x6700;&#x5927;&#xFF1F;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x5148;&#x8F93;&#x5165;&#x5B9D;&#x7269;&#x7684;&#x6570;&#x91CF;n&#xFF0C;&#x548C;&#x80CC;&#x5305;&#x7684;&#x627F;&#x8F7D;&#x91CD;&#x91CF;m&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x4E00;&#x884C;&#x8F93;&#x51FA;&#x4E00;&#x4E2A;&#x5B9D;&#x7269;&#x5BF9;&#x5E94;&#x7684;&#x91CD;&#x91CF;w&#x548C;&#x4EF7;&#x503C;v(&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;)1234565 10 # &#x5B9D;&#x7269;&#x6570;n&#x548C;&#x80CC;&#x5305;&#x80FD;&#x88C5;&#x8F7D;&#x7684;&#x91CD;&#x91CF;m2 6 #&#x6BCF;&#x4E2A;&#x5B9D;&#x7269;&#x7684;&#x91CD;&#x91CF;w&#x548C;&#x4EF7;&#x503C;v5 34 52 43 6 &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;0-1&#x80CC;&#x5305;&#x95EE;&#x9898;&#x548C;&#x666E;&#x901A;&#x80CC;&#x5305;&#x95EE;&#x9898;&#x4E0D;&#x540C;&#x7684;&#x662F;&#x5176;&#x89E3;&#x7A7A;&#x95F4;&#x4E3A;{0&#xFF0C;1}&#xFF0C;&#x5373;&#x6BCF;&#x4E00;&#x4E2A;&#x7269;&#x54C1;&#x90FD;&#x6709;&#x4E24;&#x79CD;&#x72B6;&#x6001;&#xFF0C;&#x88C5;&#x5165;&#x6216;&#x8005;&#x4E0D;&#x88C5;&#x5165;&#xFF0C;&#x56E0;&#x6B64;&#x6EE1;&#x8DB3;&#x89E3;&#x7A7A;&#x95F4;&#x7684;&#x6761;&#x4EF6;&#x3002;&#x2003;&#x2003;&#x5206;&#x6790;&#x526A;&#x679D;&#x51FD;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x5269;&#x4F59;&#x7684;&#x4EF7;&#x503C;&#x52A0;&#x4E0A;&#x5F53;&#x524D;&#x7684;&#x4EF7;&#x503C;&#x90FD;&#x6CA1;&#x6709;&#x5DF2;&#x7ECF;&#x641C;&#x7D22;&#x5230;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x9AD8;&#xFF0C;&#x5219;&#x6CA1;&#x6709;&#x5FC5;&#x8981;&#x7EE7;&#x7EED;&#x641C;&#x7D22;&#x3002; python&#x4EE3;&#x7801;&#x5B9E;&#x6218;123456789101112131415161718192021222324252627import sysdef bfs(treasure_queue): global max_value, max_plan while treasure_queue: n, out_node = treasure_queue[0][0], treasure_queue.pop(0) if n &gt;= count: max_value, max_plan = [out_node[2], out_node[3][:]] if out_node[2] &gt; max_value else [max_value, max_plan[:]] continue if out_node[1] - treasure[n][1] &gt;= 0: treasure_queue.append([n + 1, out_node[1] - treasure[n][1], out_node[2] + treasure[n][2], out_node[3][:n] + [True] + out_node[3][n + 1:]]) if out_node[2] + leave_value[n] &gt; max_value: treasure_queue.append([n + 1, out_node[1], out_node[2], out_node[3][:]])print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x5B9D;&#x7269;&#x6570;&#x91CF;&#x548C;&#x9A74;&#x5B50;&#x627F;&#x8F7D;&#x91CD;&#x91CF;:&apos;)for line in sys.stdin: count, weight = line.strip().split() count, weight, treasure, max_plan, max_value, leave_value, res = int(count), float(weight), [], [False] * int(count), 0, [0], [] print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x5B9D;&#x7269;&#x7684;&#x91CD;&#x91CF;&#x548C;&#x4EF7;&#x503C;&apos;) for i in range(count): tmp = [float(x) for x in sys.stdin.readline().strip().split()] treasure.append([i + 1] + tmp + [tmp[1] / tmp[0]]) treasure.sort(key=lambda x: (-x[3])) for i in reversed(range(1, count)): leave_value = [leave_value[0] + treasure[i][2]] + leave_value bfs([[0, weight, 0, [False] * count]]) print(&apos;&#x6700;&#x4F18;&#x7684;&#x65B9;&#x6848;&#x4E3A;:\n&apos; + &apos;&apos;.join([&apos;&apos; + (&apos;&#x88C5;&#x5165;&#x7B2C;&apos; + str(j) + &apos;&#x4E2A;&#x5B9D;&#x7269;\n&apos;) * (j != 0) for j in sorted([treasure[i][0] * max_plan[i] for i in range(count)])]) + &apos;&#x88C5;&#x5165;&#x5B9D;&#x7269;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x4E3A;:&apos;, max_value) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x65C5;&#x884C;&#x5546;&#x95EE;&#x9898;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x73B0;&#x6709;n&#x4E2A;&#x666F;&#x70B9;&#xFF0C;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x666F;&#x70B9;&#x51FA;&#x53D1;&#xFF0C;&#x4E24;&#x4E2A;&#x666F;&#x70B9;&#x4E4B;&#x95F4;&#x6709;&#x6570;&#x5B57;&#x4EE3;&#x8868;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5230;&#x8FBE;&#xFF0C;&#x95EE;&#x5982;&#x4F55;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x8DEF;&#x5F84;&#x80FD;&#x591F;&#x4E0D;&#x91CD;&#x590D;&#x7684;&#x8D70;&#x904D;&#x6240;&#x6709;&#x666F;&#x70B9;&#x56DE;&#x5230;&#x51FA;&#x53D1;&#x70B9;&#xFF0C;&#x800C;&#x4E14;&#x6240;&#x7ECF;&#x8FC7;&#x7684;&#x8DEF;&#x5F84;&#x957F;&#x5EA6;&#x662F;&#x6700;&#x77ED;&#x7684;&#x3002;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x666F;&#x70B9;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x8F93;&#x5165;&#x4E24;&#x5730;&#x4E4B;&#x95F4;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5230;&#x8FBE;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x884C;&#x8F93;&#x5165;&#x4E24;&#x5730;&#x548C;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB; 12345678910115 # &#x666F;&#x70B9;&#x4E2A;&#x6570;9 # &#x666F;&#x70B9;&#x4E4B;&#x95F4;&#x7684;&#x8FDE;&#x63A5;&#x6570;1 2 3 # &#x666F;&#x70B9;1&#x548C;&#x666F;&#x70B9;2&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#x4E3A;31 4 81 5 92 3 32 4 102 5 53 4 43 5 34 5 20 &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;&#x65C5;&#x884C;&#x5546;&#x95EE;&#x9898;(TSP)&#x662F;&#x4E00;&#x4E2A;&#x5178;&#x578B;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x6B64;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x7A7A;&#x95F4;&#x4E3A;n&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x666F;&#x70B9;&#x90FD;&#x53EF;&#x4EE5;&#x5230;&#x4E0E;&#x4E4B;&#x76F8;&#x8FDE;&#x7684;&#x6240;&#x6709;&#x70B9;&#xFF0C;&#x56E0;&#x6B64;&#x5F53;&#x666F;&#x70B9;&#x6570;&#x5F88;&#x591A;&#x65F6;&#xFF0C;&#x6700;&#x4F18;&#x89E3;&#x7684;&#x641C;&#x7D22;&#x662F;&#x5341;&#x5206;&#x7F13;&#x6162;&#x7684;&#x3002;&#x2003;&#x2003;&#x5206;&#x6790;&#x526A;&#x679D;&#x51FD;&#x6570;&#xFF0C;&#x526A;&#x679D;&#x51FD;&#x6570;&#x5BB9;&#x6613;&#x770B;&#x51FA;&#xFF0C;&#x7531;&#x4E8E;&#x4E0D;&#x662F;&#x4EFB;&#x4F55;&#x4E24;&#x4E2A;&#x666F;&#x70B9;&#x90FD;&#x662F;&#x76F8;&#x8FDE;&#x7684;&#xFF0C;&#x800C;&#x4E14;&#x8D70;&#x8FC7;&#x7684;&#x666F;&#x70B9;&#x4E0D;&#x80FD;&#x518D;&#x8D70;&#x4E00;&#x6B21;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x4E5F;&#x5927;&#x5927;&#x51CF;&#x5C11;&#x4E86;&#x89E3;&#x7A7A;&#x95F4;&#x7684;&#x4E2A;&#x6570;&#x3002; python&#x4EE3;&#x7801;&#x5B9E;&#x6218;1234567891011121314151617181920212223import sysdef bfs(tour_queue): global min_dist, min_route while tour_queue: n, out_node = tour_queue[0][0], tour_queue.pop(0) if n &gt;= scenic_spot_num: min_dist, min_route = [out_node[1] + connection[out_node[2][-1]][0], out_node[2][:] + [0]] if out_node[1] + connection[out_node[2][-1]][0] &lt; min_dist else [min_dist, min_route[:]] for i in range(scenic_spot_num): if i not in out_node[2] and connection[out_node[2][-1]][i] != 0 and out_node[1] + connection[out_node[2][-1]][i] + connection[i][0] &lt; min_dist: tour_queue.append([n + 1, out_node[1] + connection[out_node[2][-1]][i], out_node[2] + [i]])print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x666F;&#x70B9;&#x6570;:&apos;)for line in sys.stdin: scenic_spot_num, min_dist, min_route = int(line.strip()), 65535, [] print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x8FDE;&#x901A;&#x7684;&#x666F;&#x70B9;&#x6570;:&apos;) connection_num, connection = int(sys.stdin.readline().strip()), [[0 for i in range(scenic_spot_num)] for j in range(scenic_spot_num)] print(&apos;&#x8BF7;&#x4F9D;&#x6B21;&#x8F93;&#x5165;&#x4E24;&#x4E2A;&#x666F;&#x70B9;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;:&apos;) for i in range(connection_num): begin, end, weight = [int(i) for i in sys.stdin.readline().strip().split()] connection[begin - 1][end - 1], connection[end - 1][begin - 1] = weight, weight bfs([[1, 0, [0]]]) print(&apos;&#x6700;&#x77ED;&#x7684;&#x8DEF;&#x5F84;&#x4E3A;:&apos; + &apos;-&gt;&apos;.join([str(x + 1) for x in min_route]) + &apos;\n&#x6700;&#x77ED;&#x7684;&#x8DEF;&#x5F84;&#x957F;&#x5EA6;&#x4E3A;:&apos;, min_dist) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x8FF7;&#x5BAB;&#x95EE;&#x9898;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x5728;&#x4E00;&#x4E2A;m&#xD7;n&#x7684;&#x5730;&#x56FE;&#x4E0A;&#xFF0C;&#x6709;&#x8BB8;&#x591A;&#x969C;&#x788D;&#x7269;&#xFF0C;&#x7ED9;&#x5B9A;&#x8D77;&#x59CB;&#x70B9;&#x5750;&#x6807;&#x548C;&#x76EE;&#x7684;&#x5730;&#x5750;&#x6807;&#xFF0C;&#x95EE;&#x4ECE;&#x8D77;&#x59CB;&#x70B9;&#x5F00;&#x59CB;&#x901A;&#x8FC7;&#x4E0A;&#x4E0B;&#x5DE6;&#x53F3;&#x56DB;&#x4E2A;&#x65B9;&#x5411;&#x79FB;&#x52A8;&#x5982;&#x4F55;&#x627E;&#x5230;&#x4E00;&#x6761;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x80FD;&#x591F;&#x5230;&#x8FBE;&#x76EE;&#x7684;&#x5730;&#xFF1F;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x5730;&#x56FE;&#x7684;&#x5927;&#x5C0F;m&#x548C;n&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x969C;&#x788D;&#x7269;&#x7684;&#x5750;&#x6807;&#xFF0C;&#x8F93;&#x5165;0&#xFF0C;0&#x65F6;&#x7ED3;&#x675F;&#xFF0C;&#x63A5;&#x7740;&#x8F93;&#x5165;&#x8D77;&#x59CB;&#x70B9;&#x5750;&#x6807;&#x548C;&#x76EE;&#x7684;&#x5730;&#x5750;&#x6807;&#x3002; 1234567895 6 # &#x5730;&#x56FE;&#x7684;&#x5927;&#x5C0F;m,n1 6 # &#x969C;&#x788D;&#x7269;&#x7684;&#x5750;&#x6807;2 3 3 43 55 10 0 #&#x8F93;&#x5165;0,0&#x7ED3;&#x675F;2 1 #&#x8D77;&#x59CB;&#x70B9;&#x5750;&#x6807;4 6 #&#x76EE;&#x7684;&#x5730;&#x5750;&#x6807; &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;&#x8FF7;&#x5BAB;&#x95EE;&#x9898;&#x662F;&#x4E00;&#x4E2A;&#x5178;&#x578B;&#x7684;&#x641C;&#x7D22;&#x95EE;&#x9898;&#xFF0C;&#x6BCF;&#x4E2A;&#x70B9;&#x90FD;&#x6709;&#x56DB;&#x4E2A;&#x79FB;&#x52A8;&#x65B9;&#x5411;&#xFF0C;&#x56E0;&#x6B64;&#x6BCF;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;&#x90FD;&#x6709;&#x56DB;&#x4E2A;&#x5B50;&#x8282;&#x70B9;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x7B97;&#x6CD5;&#x6765;&#x6C42;&#x89E3;&#x6B64;&#x95EE;&#x9898;&#x3002;&#x2003;&#x2003;&#x5206;&#x6790;&#x526A;&#x679D;&#x51FD;&#x6570;&#xFF0C;&#x6B64;&#x9898;&#x6BD4;&#x8F83;&#x7279;&#x6B8A;&#xFF0C;&#x7279;&#x522B;&#x9002;&#x5408;&#x4E8E;&#x7528;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#xFF0C;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x662F;&#x4E00;&#x5C42;&#x4E00;&#x5C42;&#x904D;&#x5386;&#xFF0C;&#x540E;&#x9762;&#x8BBF;&#x95EE;&#x7684;&#x7ED3;&#x70B9;&#x7684;&#x5C42;&#x6570;&#x4E00;&#x5B9A;&#x4E0D;&#x5C0F;&#x4E8E;&#x524D;&#x9762;&#x7ED3;&#x70B9;&#x7684;&#x5C42;&#x6570;&#x3002;&#x5224;&#x65AD;&#x65B0;&#x52A0;&#x5165;&#x7684;&#x5750;&#x6807;&#x662F;&#x5426;&#x4E3A;&#x76EE;&#x7684;&#x5730;&#x5750;&#x6807;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x5219;&#x4E3A;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x518D;&#x641C;&#x7D22;&#x5176;&#x4ED6;&#x8DEF;&#x5F84;&#x3002; python&#x4EE3;&#x7801;&#x5B9E;&#x6218;123456789101112131415161718192021222324252627282930import sysdef bfs(circuit_board_queue): global min_spend while circuit_board_queue: out_node_value, out_node_site = circuit_board_queue[0][0], circuit_board_queue.pop(0)[1] if [end_x - 1, end_y - 1] == out_node_site[-1]: return out_node_value, [x[:] for x in out_node_site] for x, y in direction: if 0 &lt;= out_node_site[-1][0] + x &lt; m_size and 0 &lt;= out_node_site[-1][1] + y &lt; n_size and out_node_value + 1 &lt; min_spend[out_node_site[-1][0] + x][out_node_site[-1][1] + y]: min_spend[out_node_site[-1][0] + x][out_node_site[-1][1] + y] = out_node_value + 1 circuit_board_queue.append([out_node_value + 1, out_node_site + [[out_node_site[-1][0] + x, out_node_site[-1][1] + y]]])print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x5730;&#x56FE;&#x5927;&#x5C0F;:&apos;)for line in sys.stdin: m_size, n_size = [int(x) for x in line.strip().split()] circuit_board, min_spend, direction = [[1 for i in range(n_size)] for j in range(m_size)], [[65535 for i in range(n_size)] for j in range(m_size)], [[1, 0], [0, 1], [-1, 0], [0, -1]] while True: print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x969C;&#x788D;&#x7269;&#x5750;&#x6807;:&apos;) x, y = [int(x) for x in sys.stdin.readline().strip().split()] if x == 0 and y == 0: break circuit_board[x - 1][y - 1] = 0 print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x8D77;&#x70B9;&#x5750;&#x6807;&apos;) begin_x, begin_y = [int(x) for x in sys.stdin.readline().strip().split()] min_spend[begin_x - 1][begin_y - 1] = 0 print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x7EC8;&#x70B9;&#x5750;&#x6807;&apos;) end_x, end_y = [int(x) for x in sys.stdin.readline().strip().split()] min_dist, min_route = bfs([[0, [[begin_x - 1, begin_y - 1]]]]) print(&apos;&#x8FD9;&#x6761;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x7684;&#x957F;&#x5EA6;&#x4E3A;:&apos;, min_dist, &apos;\n&#x6700;&#x4F73;&#x7684;&#x8DEF;&#x5F84;&#x4E3A;:&apos; + &apos;-&gt;&apos;.join([str(tuple([y + 1 for y in x])) for x in min_route])) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7B97;&#x6CD5;&#x603B;&#x7ED3;&#x2003;&#x2003;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;&#x662F;&#x4E00;&#x4E2A;&#x57FA;&#x672C;&#x641C;&#x7D22;&#x65B9;&#x6CD5;&#xFF0C;&#x548C;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x6709;&#x5F02;&#x66F2;&#x540C;&#x5DE5;&#x4E4B;&#x5999;&#xFF0C;&#x5BF9;&#x4E8E;&#x8BB8;&#x591A;&#x95EE;&#x9898;&#x90FD;&#x53EF;&#x4EE5;&#x540C;&#x65F6;&#x7528;&#x8FD9;&#x4E24;&#x79CD;&#x65B9;&#x6CD5;&#x89E3;&#x51B3;&#x3002;&#x548C;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x76F8;&#x540C;&#xFF0C;&#x90FD;&#x662F;&#x6307;&#x6570;&#x7EA7;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF0C;&#x4F46;&#x662F;&#x5BF9;&#x4E8E;&#x6709;&#x4E9B;&#x95EE;&#x9898;&#x4E0D;&#x5F97;&#x4E0D;&#x4F7F;&#x7528;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x8FDB;&#x884C;&#x904D;&#x5386;&#xFF0C;&#x56E0;&#x6B64;&#x5BFB;&#x627E;&#x5408;&#x9002;&#x7684;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x53EF;&#x4EE5;&#x5927;&#x5927;&#x51CF;&#x5C11;&#x65F6;&#x95F4;&#x7684;&#x5F00;&#x9500;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>计算机基础知识</category>
        <category>常用算法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[深度优先搜索(Depth First Search)]]></title>
    <url>%2F2019%2F07%2F27%2Falgorithm%20DFS%2F</url>
    <content type="text"><![CDATA[&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22; &#x539F;&#x7406;&#x4ECB;&#x7ECD;&#x2003;&#x2003; Depth First Search(DFS):&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;&#xFF0C;&#x5C5E;&#x4E8E;&#x56FE;&#x7B97;&#x6CD5;&#x7684;&#x4E00;&#x79CD;&#xFF0C;&#x662F;&#x4E00;&#x79CD;&#x76F2;&#x76EE;&#x641C;&#x5BFB;&#x6CD5;&#xFF0C;&#x4ECE;&#x521D;&#x59CB;&#x72B6;&#x6001;&#x51FA;&#x53D1;&#xFF0C;&#x5F53;&#x641C;&#x7D22;&#x5230;&#x67D0;&#x4E00;&#x6B65;&#x65F6;&#xFF0C;&#x53D1;&#x73B0;&#x539F;&#x5148;&#x9009;&#x62E9;&#x5E76;&#x4E0D;&#x662F;&#x6700;&#x4F18;&#x6216;&#x8FBE;&#x4E0D;&#x5230;&#x76EE;&#x6807;&#xFF0C;&#x5C31;&#x9000;&#x56DE;&#x4E00;&#x6B65;&#x91CD;&#x65B0;&#x9009;&#x62E9;&#x3002;&#x6839;&#x636E;&#x4EA7;&#x751F;&#x5B50;&#x8282;&#x70B9;&#x7684;&#x6761;&#x4EF6;&#x7EA6;&#x675F;&#xFF0C;&#x641C;&#x7D22;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x3002;&#x56E0;&#x6B64;&#x53C8;&#x540D;&#x56DE;&#x6EAF;&#x6CD5;&#xFF0C;&#x662F;&#x4E00;&#x79CD;&#x80FD;&#x8FDB;&#x5219;&#x8FDB;&#xFF0C;&#x8FDB;&#x4E0D;&#x4E86;&#x5219;&#x6362;&#xFF0C;&#x6362;&#x4E0D;&#x4E86;&#x5219;&#x9000;&#x7684;&#x641C;&#x7D22;&#x65B9;&#x6CD5;&#x3002; &#x7B97;&#x6CD5;&#x6761;&#x4EF6;&#x89E3;&#x7A7A;&#x95F4;&#x2003;&#x2003;&#x89E3;&#x7684;&#x7EC4;&#x7EC7;&#x5F62;&#x5F0F;&#x53EF;&#x4EE5;&#x89C4;&#x8303;&#x4E3A;&#x4E00;&#x4E2A;n&#x5143;&#x7EC4;${x_1,x_2,\ldots,x_n}$&#xFF0C;&#x5E76;&#x4E14;&#x5BF9;&#x89E3;&#x6709;&#x53D6;&#x503C;&#x8303;&#x56F4;&#x7684;&#x9650;&#x5B9A;&#xFF0C;&#x4E00;&#x822C;&#x4E3A;&#x6709;&#x7A77;&#x4E2A;&#xFF0C;&#x89E3;&#x7684;&#x4E2A;&#x6570;&#x4EE3;&#x8868;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;&#x7684;&#x5206;&#x652F;&#x4E2A;&#x6570;&#x3002;&#x89E3;&#x7A7A;&#x95F4;&#x8D8A;&#x5C0F;&#xFF0C;&#x641C;&#x7D22;&#x6548;&#x7387;&#x8D8A;&#x9AD8;&#xFF0C;&#x89E3;&#x7A7A;&#x95F4;&#x5927;&#x72B9;&#x5982;&#x5927;&#x6D77;&#x635E;&#x9488;&#xFF0C;&#x641C;&#x7D22;&#x6548;&#x7387;&#x5F88;&#x4F4E;&#x3002; &#x526A;&#x679D;&#x51FD;&#x6570;&#x2003;&#x2003;&#x526A;&#x679D;&#x51FD;&#x6570;&#x53C8;&#x79F0;&#x4E3A;&#x9690;&#x7EA6;&#x675F;&#xFF0C;&#x5BF9;&#x80FD;&#x5426;&#x5F97;&#x5230;&#x95EE;&#x9898;&#x7684;&#x53EF;&#x884C;&#x89E3;&#x7684;&#x7EA6;&#x675F;&#x79F0;&#x4E3A;&#x7EA6;&#x675F;&#x51FD;&#x6570;&#xFF0C;&#x5BF9;&#x80FD;&#x5426;&#x5F97;&#x5230;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x7684;&#x7EA6;&#x675F;&#x79F0;&#x4E3A;&#x9650;&#x754C;&#x51FD;&#x6570;&#x3002;&#x6709;&#x4E86;&#x526A;&#x679D;&#x51FD;&#x6570;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x526A;&#x6389;&#x5F97;&#x4E0D;&#x5230;&#x53EF;&#x884C;&#x89E3;&#x6216;&#x6700;&#x4F18;&#x89E3;&#x7684;&#x5206;&#x652F;&#xFF0C;&#x907F;&#x514D;&#x4E86;&#x65E0;&#x6548;&#x641C;&#x7D22;&#xFF0C;&#x63D0;&#x9AD8;&#x641C;&#x7D22;&#x7684;&#x6548;&#x7387;&#x3002;&#x56E0;&#x6B64;&#x526A;&#x679D;&#x51FD;&#x6570;&#x7684;&#x8BBE;&#x8BA1;&#x662F;&#x5341;&#x5206;&#x91CD;&#x8981;&#x7684;&#x3002; &#x7B97;&#x6CD5;&#x6B65;&#x9AA4;&#x2003;&#x2003;(1)&#x5206;&#x6790;&#x9898;&#x610F;&#xFF0C;&#x4E86;&#x89E3;&#x9898;&#x76EE;&#x8981;&#x6C42;&#x2003;&#x2003;(2)&#x6839;&#x636E;&#x95EE;&#x9898;&#x5206;&#x6790;&#x89E3;&#x7A7A;&#x95F4;&#x7684;&#x5F62;&#x5F0F;&#x2003;&#x2003;(3)&#x6839;&#x636E;&#x89E3;&#x7A7A;&#x95F4;&#x8BBE;&#x8BA1;&#x5408;&#x9002;&#x7684;&#x526A;&#x679D;&#x51FD;&#x6570; &#x7ECF;&#x5178;&#x4F8B;&#x9898;(0-1&#x80CC;&#x5305;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x5047;&#x8BBE;&#x5C71;&#x6D1E;&#x91CC;&#x6709;n&#x4E2A;&#x5B9D;&#x7269;&#xFF0C;&#x6BCF;&#x79CD;&#x5B9D;&#x7269;&#x6709;&#x4E00;&#x5B9A;&#x91CD;&#x91CF;w&#x548C;&#x76F8;&#x5E94;&#x7684;&#x4EF7;&#x503C;v&#xFF0C;&#x80CC;&#x5305;&#x7684;&#x88C5;&#x8F7D;&#x80FD;&#x529B;&#x6709;&#x9650;&#xFF0C;&#x53EA;&#x80FD;&#x8FD0;&#x8D70;&#x91CD;&#x91CF;&#x4E3A;m&#x7684;&#x5B9D;&#x7269;&#xFF0C;&#x5B9D;&#x7269;&#x4E0D;&#x53EF;&#x4EE5;&#x5206;&#x5272;&#xFF0C;&#x5982;&#x4F55;&#x4F7F;&#x80CC;&#x5305;&#x8FD0;&#x8D70;&#x7269;&#x54C1;&#x7684;&#x4EF7;&#x503C;&#x6700;&#x5927;&#xFF1F;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x5148;&#x8F93;&#x5165;&#x5B9D;&#x7269;&#x7684;&#x6570;&#x91CF;n&#xFF0C;&#x548C;&#x80CC;&#x5305;&#x7684;&#x627F;&#x8F7D;&#x91CD;&#x91CF;m&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x4E00;&#x884C;&#x8F93;&#x51FA;&#x4E00;&#x4E2A;&#x5B9D;&#x7269;&#x5BF9;&#x5E94;&#x7684;&#x91CD;&#x91CF;w&#x548C;&#x4EF7;&#x503C;v(&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;)1234565 10 # &#x5B9D;&#x7269;&#x6570;n&#x548C;&#x80CC;&#x5305;&#x80FD;&#x88C5;&#x8F7D;&#x7684;&#x91CD;&#x91CF;m2 6 #&#x6BCF;&#x4E2A;&#x5B9D;&#x7269;&#x7684;&#x91CD;&#x91CF;w&#x548C;&#x4EF7;&#x503C;v5 34 52 43 6 &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;0-1&#x80CC;&#x5305;&#x95EE;&#x9898;&#x548C;&#x666E;&#x901A;&#x80CC;&#x5305;&#x95EE;&#x9898;&#x4E0D;&#x540C;&#x7684;&#x662F;&#x5176;&#x89E3;&#x7A7A;&#x95F4;&#x4E3A;{0&#xFF0C;1}&#xFF0C;&#x5373;&#x6BCF;&#x4E00;&#x4E2A;&#x7269;&#x54C1;&#x90FD;&#x6709;&#x4E24;&#x79CD;&#x72B6;&#x6001;&#xFF0C;&#x88C5;&#x5165;&#x6216;&#x8005;&#x4E0D;&#x88C5;&#x5165;&#xFF0C;&#x56E0;&#x6B64;&#x6EE1;&#x8DB3;&#x89E3;&#x7A7A;&#x95F4;&#x7684;&#x6761;&#x4EF6;&#x3002;&#x2003;&#x2003;&#x5206;&#x6790;&#x526A;&#x679D;&#x51FD;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x5269;&#x4F59;&#x7684;&#x4EF7;&#x503C;&#x52A0;&#x4E0A;&#x5F53;&#x524D;&#x7684;&#x4EF7;&#x503C;&#x90FD;&#x6CA1;&#x6709;&#x5DF2;&#x7ECF;&#x641C;&#x7D22;&#x5230;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x9AD8;&#xFF0C;&#x5219;&#x6CA1;&#x6709;&#x5FC5;&#x8981;&#x7EE7;&#x7EED;&#x641C;&#x7D22;&#x3002; python&#x4EE3;&#x7801;&#x5B9E;&#x6218;123456789101112131415161718192021222324252627import sysdef dfs(n, current_plan, leave_weight, current_value): global max_value, max_plan if n &gt;= count: max_value, max_plan = [current_value, current_plan[:]] if current_value &gt; max_value else [max_value, max_plan[:]] return if leave_weight - treasure[n][1] &gt;= 0: leave_weight, current_value, current_plan[n] = [leave_weight - treasure[n][1], current_value + treasure[n][2], True] dfs(n + 1, current_plan, leave_weight, current_value) leave_weight, current_value, current_plan[n] = [leave_weight + treasure[n][1], current_value - treasure[n][2], False] if leave_value[n] + current_value &gt; max_value: dfs(n + 1, current_plan, leave_weight, current_value)print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x5B9D;&#x7269;&#x6570;&#x91CF;&#x548C;&#x9A74;&#x5B50;&#x627F;&#x8F7D;&#x91CD;&#x91CF;:&apos;)for line in sys.stdin: count, weight = line.strip().split() count, weight, treasure, max_plan, max_value, leave_value, res = int(count), float(weight), [], [False] * int(count), 0, [0], [] print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x5B9D;&#x7269;&#x7684;&#x91CD;&#x91CF;&#x548C;&#x4EF7;&#x503C;&apos;) for i in range(count): tmp = [float(x) for x in sys.stdin.readline().strip().split()] treasure.append([i + 1] + tmp + [tmp[1] / tmp[0]]) treasure.sort(key=lambda x: (-x[3])) for i in reversed(range(1, count)): leave_value = [leave_value[0] + treasure[i][2]] + leave_value dfs(0, [False] * count, weight, 0) print(&apos;&#x6700;&#x4F18;&#x7684;&#x65B9;&#x6848;&#x4E3A;:\n&apos; + &apos;&apos;.join([&apos;&apos; + (&apos;&#x88C5;&#x5165;&#x7B2C;&apos; + str(j) + &apos;&#x4E2A;&#x5B9D;&#x7269;\n&apos;) * (j != 0) for j in sorted([treasure[i][0] * max_plan[i] for i in range(count)])]) + &apos;&#x88C5;&#x5165;&#x5B9D;&#x7269;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x4E3A;:&apos;, max_value) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7ECF;&#x5178;&#x4F8B;&#x9898;(n&#x7687;&#x540E;&#x95EE;&#x9898;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x5728;n&#xD7;n&#x7684;&#x56FD;&#x9645;&#x68CB;&#x76D8;&#x4E0A;&#x653E;&#x7F6E;&#x5F7C;&#x6B64;&#x4E0D;&#x53D7;&#x653B;&#x51FB;&#x7684;n&#x4E2A;&#x7687;&#x540E;&#xFF0C;&#x6309;&#x7167;&#x89C4;&#x5219;&#xFF0C;&#x7687;&#x540E;&#x53EF;&#x4EE5;&#x653B;&#x51FB;&#x4E0E;&#x4E4B;&#x5728;&#x540C;&#x4E00;&#x884C;&#x3001;&#x540C;&#x4E00;&#x5217;&#x3001;&#x7EDF;&#x4E00;&#x659C;&#x7EBF;&#x4E0A;&#x7684;&#x68CB;&#x5B50;&#x3002;&#x73B0;&#x5728;&#x5DF2;&#x77E5;&#x53C8;n&#x4E2A;&#x7687;&#x540E;&#xFF0C;&#x95EE;&#x6709;&#x591A;&#x5C11;&#x79CD;&#x4E0D;&#x540C;&#x7684;&#x653E;&#x6CD5;&#xFF1F;&#x2003;&#x2003;&#x8F93;&#x5165;&#x7687;&#x540E;&#x7684;&#x4E2A;&#x6570;n 14 # &#x7687;&#x540E;&#x7684;&#x4E2A;&#x6570; &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;n&#x7687;&#x540E;&#x95EE;&#x9898;&#x4E0D;&#x540C;&#x4E8E;0-1&#x80CC;&#x5305;&#x95EE;&#x9898;&#xFF0C;n&#x7687;&#x540E;&#x7684;&#x89E3;&#x7A7A;&#x95F4;&#x4E3A;n&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x7687;&#x540E;&#x90FD;&#x6709;n&#x79CD;&#x653E;&#x6CD5;&#xFF0C;&#x56E0;&#x6B64;&#x5F53;n&#x5F88;&#x5927;&#x65F6;&#xFF0C;&#x89E3;&#x6CD5;&#x7684;&#x641C;&#x7D22;&#x975E;&#x5E38;&#x7F13;&#x6162;&#x3002;&#x2003;&#x2003;&#x5206;&#x6790;&#x526A;&#x679D;&#x51FD;&#x6570;&#xFF0C;&#x5DF2;&#x7ECF;&#x653E;&#x7F6E;&#x4E86;k&#x4E2A;&#x7687;&#x540E;&#x4E4B;&#x540E;&#xFF0C;&#x5C31;&#x6CA1;&#x6709;n&#x79CD;&#x4E0D;&#x540C;&#x7684;&#x653E;&#x6CD5;&#x4E86;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5224;&#x65AD;&#x548C;&#x4EE5;&#x524D;&#x7684;&#x7687;&#x540E;&#x653E;&#x6CD5;&#x662F;&#x5426;&#x51B2;&#x7A81;&#x6765;&#x7F29;&#x5C0F;&#x89E3;&#x7A7A;&#x95F4;&#x7684;&#x641C;&#x7D22;&#x3002; python&#x4EE3;&#x7801;&#x5B9E;&#x6218;1234567891011121314151617181920212223import sysdef judge_n(n, col, current_queen): for i in range(len(current_queen)): if current_queen[i] == col or (n - i) == col - current_queen[i] or (n - i) == current_queen[i] - col: return False return Truedef dfs(n, current_queen): global res, res_num if n &gt;= queen_num: res, res_num = [res + &apos;&#x7B2C;&apos; + str(res_num + 1) + &apos;&#x79CD;&#x7687;&#x540E;&#x653E;&#x7F6E;&#x65B9;&#x6CD5;&#x4E3A;:&apos; + &apos;&apos;.join(str([(x + 1) for x in current_queen])) + &apos;\n&apos;, res_num + 1] return for i in range(queen_num): if judge_n(n, i, current_queen): dfs(n + 1, current_queen + [i])print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x7687;&#x540E;&#x7684;&#x4E2A;&#x6570;:&apos;)for line in sys.stdin: queen_num, res, res_num = int(line.strip()), &apos;&apos;, 0 chess = [[0 for i in range(queen_num)] for j in range(queen_num)] dfs(0, []) print(&apos;&#x4E00;&#x5171;&#x6709;&apos; + str(res_num) + &apos;&#x79CD;&#x7687;&#x540E;&#x653E;&#x7F6E;&#x65B9;&#x6CD5;\n&apos; + res) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x65C5;&#x884C;&#x5546;&#x95EE;&#x9898;TSP)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x73B0;&#x6709;n&#x4E2A;&#x666F;&#x70B9;&#xFF0C;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x666F;&#x70B9;&#x51FA;&#x53D1;&#xFF0C;&#x4E24;&#x4E2A;&#x666F;&#x70B9;&#x4E4B;&#x95F4;&#x6709;&#x6570;&#x5B57;&#x4EE3;&#x8868;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5230;&#x8FBE;&#xFF0C;&#x95EE;&#x5982;&#x4F55;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x8DEF;&#x5F84;&#x80FD;&#x591F;&#x4E0D;&#x91CD;&#x590D;&#x7684;&#x8D70;&#x904D;&#x6240;&#x6709;&#x666F;&#x70B9;&#x56DE;&#x5230;&#x51FA;&#x53D1;&#x70B9;&#xFF0C;&#x800C;&#x4E14;&#x6240;&#x7ECF;&#x8FC7;&#x7684;&#x8DEF;&#x5F84;&#x957F;&#x5EA6;&#x662F;&#x6700;&#x77ED;&#x7684;&#x3002;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x666F;&#x70B9;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x8F93;&#x5165;&#x4E24;&#x5730;&#x4E4B;&#x95F4;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5230;&#x8FBE;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x884C;&#x8F93;&#x5165;&#x4E24;&#x5730;&#x548C;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB; 12345678910115 # &#x666F;&#x70B9;&#x4E2A;&#x6570;9 # &#x666F;&#x70B9;&#x4E4B;&#x95F4;&#x7684;&#x8FDE;&#x63A5;&#x6570;1 2 3 # &#x666F;&#x70B9;1&#x548C;&#x666F;&#x70B9;2&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#x4E3A;31 4 81 5 92 3 32 4 102 5 53 4 43 5 34 5 20 &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;&#x65C5;&#x884C;&#x5546;&#x95EE;&#x9898;(TSP)&#x662F;&#x4E00;&#x4E2A;&#x5178;&#x578B;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x6B64;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x7A7A;&#x95F4;&#x4E3A;n&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x666F;&#x70B9;&#x90FD;&#x53EF;&#x4EE5;&#x5230;&#x4E0E;&#x4E4B;&#x76F8;&#x8FDE;&#x7684;&#x6240;&#x6709;&#x70B9;&#xFF0C;&#x56E0;&#x6B64;&#x5F53;&#x666F;&#x70B9;&#x6570;&#x5F88;&#x591A;&#x65F6;&#xFF0C;&#x6700;&#x4F18;&#x89E3;&#x7684;&#x641C;&#x7D22;&#x662F;&#x5341;&#x5206;&#x7F13;&#x6162;&#x7684;&#x3002;&#x2003;&#x2003;&#x5206;&#x6790;&#x526A;&#x679D;&#x51FD;&#x6570;&#xFF0C;&#x526A;&#x679D;&#x51FD;&#x6570;&#x5BB9;&#x6613;&#x770B;&#x51FA;&#xFF0C;&#x7531;&#x4E8E;&#x4E0D;&#x662F;&#x4EFB;&#x4F55;&#x4E24;&#x4E2A;&#x666F;&#x70B9;&#x90FD;&#x662F;&#x76F8;&#x8FDE;&#x7684;&#xFF0C;&#x800C;&#x4E14;&#x8D70;&#x8FC7;&#x7684;&#x666F;&#x70B9;&#x4E0D;&#x80FD;&#x518D;&#x8D70;&#x4E00;&#x6B21;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x4E5F;&#x5927;&#x5927;&#x51CF;&#x5C11;&#x4E86;&#x89E3;&#x7A7A;&#x95F4;&#x7684;&#x4E2A;&#x6570;&#x3002; python&#x4EE3;&#x7801;&#x5B9E;&#x6218;12345678910111213141516171819202122import sysdef dfs(n, current_dist, current_route): global min_dist, min_route if n &gt;= scenic_spot_num: min_dist, min_route = [current_dist + connection[current_route[-1]][0], current_route[:] + [0]] if current_dist + connection[current_route[-1]][0] &lt; min_dist else [min_dist, min_route[:]] return for i in range(scenic_spot_num): if i not in current_route and connection[current_route[-1]][i] != 0 and current_dist + connection[current_route[-1]][i] + connection[i][0] &lt; min_dist: dfs(n + 1, current_dist + connection[current_route[-1]][i], current_route + [i])print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x666F;&#x70B9;&#x6570;:&apos;)for line in sys.stdin: scenic_spot_num, min_dist, min_route = int(line.strip()), 65535, [] print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x8FDE;&#x901A;&#x7684;&#x666F;&#x70B9;&#x6570;:&apos;) connection_num, connection = int(sys.stdin.readline().strip()), [[0 for i in range(scenic_spot_num)] for j in range(scenic_spot_num)] print(&apos;&#x8BF7;&#x4F9D;&#x6B21;&#x8F93;&#x5165;&#x4E24;&#x4E2A;&#x666F;&#x70B9;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;:&apos;) for i in range(connection_num): begin, end, weight = [int(i) for i in sys.stdin.readline().strip().split()] connection[begin - 1][end - 1], connection[end - 1][begin - 1] = weight, weight dfs(1, 0, [0]) print(&apos;&#x6700;&#x77ED;&#x7684;&#x8DEF;&#x5F84;&#x4E3A;:&apos; + &apos;-&gt;&apos;.join([str(x + 1) for x in min_route]) + &apos;\n&#x6700;&#x77ED;&#x7684;&#x8DEF;&#x5F84;&#x957F;&#x5EA6;&#x4E3A;:&apos;, min_dist) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7B97;&#x6CD5;&#x603B;&#x7ED3;&#x2003;&#x2003;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;&#x662F;&#x4E00;&#x4E2A;&#x57FA;&#x672C;&#x641C;&#x7D22;&#x65B9;&#x6CD5;&#xFF0C;&#x5BF9;&#x4E8E;&#x5F88;&#x591A;&#x95EE;&#x9898;&#x6765;&#x8BF4;&#x90FD;&#x53EF;&#x4EE5;&#x7528;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;&#x6765;&#x89E3;&#x51B3;&#x3002;&#x4F46;&#x4E0D;&#x4E00;&#x5B9A;&#x662F;&#x6700;&#x4F18;&#x7684;&#x89E3;&#x6CD5;&#xFF0C;&#x56E0;&#x4E3A;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;&#x662F;&#x6307;&#x6570;&#x7EA7;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF0C;&#x4F46;&#x662F;&#x5BF9;&#x4E8E;&#x6709;&#x4E9B;&#x95EE;&#x9898;&#x4E0D;&#x5F97;&#x4E0D;&#x4F7F;&#x7528;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x8FDB;&#x884C;&#x904D;&#x5386;&#xFF0C;&#x56E0;&#x6B64;&#x5BFB;&#x627E;&#x5408;&#x9002;&#x7684;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x53EF;&#x4EE5;&#x5927;&#x5927;&#x51CF;&#x5C11;&#x65F6;&#x95F4;&#x7684;&#x5F00;&#x9500;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>计算机基础知识</category>
        <category>常用算法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[分治算法(Divide and Conquer)]]></title>
    <url>%2F2019%2F07%2F21%2Falgorithm%20divide_and_conquer%2F</url>
    <content type="text"><![CDATA[&#x5206;&#x6CBB;&#x7B97;&#x6CD5; &#x539F;&#x7406;&#x4ECB;&#x7ECD;&#x2003;&#x2003; Divide and Conquer:&#x5206;&#x6CBB;&#x7B97;&#x6CD5;&#xFF0C;&#x5206;&#x800C;&#x6CBB;&#x4E4B;&#x3002;&#x5C71;&#x9AD8;&#x7687;&#x5E1D;&#x8FDC;&#xFF0C;&#x6CBB;&#x7406;&#x56FD;&#x5BB6;&#xFF0C;&#x4E0D;&#x53EF;&#x80FD;&#x6240;&#x6709;&#x7684;&#x4E8B;&#x60C5;&#x90FD;&#x7531;&#x7687;&#x5E1D;&#x89E3;&#x51B3;&#xFF0C;&#x56FD;&#x5BB6;&#x5206;&#x7701;&#x3001;&#x5E02;&#x3001;&#x53BF;&#x3001;&#x9547;&#x3001;&#x6751;&#xFF0C;&#x5C42;&#x5C42;&#x7BA1;&#x7406;&#xFF0C;&#x6700;&#x7EC8;&#x6C47;&#x603B;&#x5408;&#x5E76;&#x5230;&#x7687;&#x5E1D;&#x3002;&#x501F;&#x9274;&#x4E8E;&#x8FD9;&#x79CD;&#x601D;&#x60F3;&#xFF0C;&#x5C06;&#x4E00;&#x4E2A;&#x89C4;&#x6A21;&#x4E3A;n&#x7684;&#x95EE;&#x9898;&#x5206;&#x89E3;&#x4E3A;k&#x4E2A;&#x89C4;&#x6A21;&#x8F83;&#x5C0F;&#x7684;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x8FD9;&#x4E9B;&#x5B50;&#x95EE;&#x9898;&#x4E92;&#x76F8;&#x72EC;&#x7ACB;&#x4E14;&#x4E0E;&#x539F;&#x95EE;&#x9898;&#x76F8;&#x540C;&#xFF08;&#x5982;&#x679C;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x89C4;&#x6A21;&#x4ECD;&#x7136;&#x4E0D;&#x591F;&#x5C0F;&#xFF0C;&#x5219;&#x518D;&#x7EE7;&#x7EED;&#x5212;&#x5206;&#xFF09;&#xFF0C;&#x7136;&#x540E;&#x9012;&#x5F52;&#x6C42;&#x89E3;&#x8FD9;&#x4E9B;&#x95EE;&#x9898;&#xFF0C;&#x6700;&#x597D;&#x7528;&#x9002;&#x5F53;&#x7684;&#x65B9;&#x6CD5;&#x5C06;&#x5404;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x5408;&#x5E76;&#x6210;&#x539F;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x3002; &#x89E3;&#x9898;&#x6B65;&#x9AA4;&#x5206;&#x89E3;&#x2003;&#x2003;&#x5C06;&#x8981;&#x89E3;&#x51B3;&#x7684;&#x95EE;&#x9898;&#x5206;&#x89E3;&#x4E3A;&#x82E5;&#x5E72;&#x4E2A;&#x89C4;&#x6A21;&#x8F83;&#x5C0F;&#xFF0C;&#x76F8;&#x4E92;&#x72EC;&#x7ACB;&#xFF0C;&#x4E0E;&#x539F;&#x95EE;&#x9898;&#x5F62;&#x5F0F;&#x76F8;&#x540C;&#x7684;&#x5B50;&#x95EE;&#x9898;&#x3002; &#x6CBB;&#x7406;&#x2003;&#x2003;&#x6C42;&#x89E3;&#x5404;&#x4E2A;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x7531;&#x4E8E;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x5F62;&#x5F0F;&#x4E0E;&#x539F;&#x95EE;&#x9898;&#x76F8;&#x540C;&#xFF0C;&#x53EA;&#x662F;&#x89C4;&#x6A21;&#x8F83;&#x5C0F;&#x800C;&#x5DF2;&#xFF0C;&#x800C;&#x5F53;&#x5B50;&#x95EE;&#x9898;&#x5212;&#x5206;&#x5F97;&#x8DB3;&#x591F;&#x5C0F;&#x65F6;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x7528;&#x7B80;&#x5355;&#x5F97;&#x65B9;&#x6CD5;&#x89E3;&#x51B3;&#x3002; &#x5408;&#x5E76;&#x2003;&#x2003;&#x6309;&#x7167;&#x539F;&#x95EE;&#x9898;&#x7684;&#x8981;&#x6C42;&#xFF0C;&#x5C06;&#x5404;&#x4E2A;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x9010;&#x5C42;&#x5408;&#x5E76;&#xFF0C;&#x6784;&#x6210;&#x539F;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x3002; &#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x5408;&#x5E76;&#x6392;&#x5E8F;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x65E0;&#x5E8F;&#x6570;&#x5217;&#xFF0C;&#x5C06;&#x5176;&#x6392;&#x6210;&#x6709;&#x5E8F;&#x6570;&#x5217;&#x3002;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x51FA;&#x5143;&#x7D20;&#x7684;&#x4E2A;&#x6570;n&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x4F9D;&#x6B21;&#x8F93;&#x51FA;&#x6570;&#x5217;&#x4E2D;&#x7684;&#x5143;&#x7D20;(&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;)128 # &#x5143;&#x7D20;&#x7684;&#x4E2A;&#x6570;42 15 20 6 8 38 50 12 # &#x6570;&#x5217;&#x4E2D;&#x7684;&#x5143;&#x7D20; &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;&#x5728;&#x6570;&#x5217;&#x6392;&#x5E8F;&#x4E2D;&#xFF0C;&#x6570;&#x8D8A;&#x5C11;&#x8D8A;&#x5BB9;&#x6613;&#x6392;&#x5E8F;&#xFF0C;&#x57FA;&#x4E8E;&#x8FD9;&#x4E2A;&#x601D;&#x60F3;&#xFF0C;&#x53EF;&#x4EE5;&#x8003;&#x8651;&#x5C06;&#x957F;&#x5E8F;&#x5217;&#x5206;&#x6210;&#x77ED;&#x5E8F;&#x5217;&#xFF0C;&#x5F53;&#x5E8F;&#x5217;&#x5206;&#x4E3A;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x65F6;&#xFF0C;&#x5176;&#x672C;&#x8EAB;&#x5373;&#x4E3A;&#x6709;&#x5E8F;&#x3002;&#x2003;&#x2003;&#x7136;&#x540E;&#x6267;&#x884C;&#x5408;&#x5E76;&#x64CD;&#x4F5C;&#xFF0C;&#x5C06;&#x4E24;&#x4E2A;&#x6709;&#x5E8F;&#x5E8F;&#x5217;&#x5408;&#x5E76;&#x4E3A;&#x4E00;&#x4E2A;&#x6709;&#x5E8F;&#x5E8F;&#x5217;&#x4E5F;&#x662F;&#x8F83;&#x4E3A;&#x5BB9;&#x6613;&#x7684;&#x3002; &#x5F52;&#x5E76;&#x56FE;&#x89E3; python&#x4EE3;&#x7801;&#x5B9E;&#x6218;1234567891011121314151617181920212223import sysdef merge_sort(list_, begin, end): if begin &lt; end: merge_sort(list_, begin, (begin + end) // 2) merge_sort(list_, (begin + end) // 2 + 1, end) merge(list_, begin, (begin + end) // 2, end)def merge(list_, begin, mid, end): new_list = [] p_1, p_2 = begin, mid + 1 while p_1&lt;=mid and p_2 &lt;=end: new_list, p_1, p_2 = [new_list + [list_[p_1]], p_1 + 1, p_2 + 0] if list_[p_1] &lt;= list_[p_2] else [new_list + [list_[p_2]], p_1 + 0, p_2 + 1] new_list += list_[p_2:end + 1] if p_1 &gt; mid else list_[p_1:mid + 1] list_[begin:end + 1] = new_listprint(&apos;&#x8BF7;&#x8F93;&#x5165;&#x6570;&#x5217;&#x4E2D;&#x5143;&#x7D20;&#x7684;&#x4E2A;&#x6570;&apos;)for line in sys.stdin: num_number = int(line.strip().split()[0]) print(&apos;&#x8BF7;&#x4F9D;&#x6B21;&#x8F93;&#x5165;&#x6570;&#x5217;&#x4E2D;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x5E76;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;&apos;) num_list = [int(x) for x in sys.stdin.readline().strip().split()] merge_sort(num_list, 0, num_number - 1) print(&apos;&#x5408;&#x5E76;&#x6392;&#x5E8F;&#x7684;&#x7ED3;&#x679C;&#x4E3A;:&apos;, num_list) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x5FEB;&#x901F;&#x6392;&#x5E8F;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x65E0;&#x5E8F;&#x6570;&#x5217;&#xFF0C;&#x5C06;&#x5176;&#x6392;&#x6210;&#x6709;&#x5E8F;&#x6570;&#x5217;&#x3002;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x51FA;&#x5143;&#x7D20;&#x7684;&#x4E2A;&#x6570;n&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x4F9D;&#x6B21;&#x8F93;&#x51FA;&#x6570;&#x5217;&#x4E2D;&#x7684;&#x5143;&#x7D20;(&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;) 129 # &#x5143;&#x7D20;&#x7684;&#x4E2A;&#x6570;30 24 5 58 18 36 12 42 39 # &#x6570;&#x5217;&#x4E2D;&#x7684;&#x5143;&#x7D20; &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x7684;&#x601D;&#x60F3;&#x548C;&#x5408;&#x5E76;&#x6392;&#x5E8F;&#x7C7B;&#x4F3C;&#xFF0C;&#x90FD;&#x662F;&#x91C7;&#x7528;&#x5206;&#x6CBB;&#x7B97;&#x6CD5;&#xFF0C;&#x533A;&#x522B;&#x4E4B;&#x5904;&#x5728;&#x4E8E;&#xFF0C;&#x5408;&#x5E76;&#x6392;&#x5E8F;&#x901A;&#x8FC7;&#x5148;&#x5206;&#x88C2;&#xFF0C;&#x518D;&#x5408;&#x5E76;&#xFF0C;&#x5408;&#x5E76;&#x7684;&#x540C;&#x65F6;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x3002;&#x800C;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x662F;&#x5148;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x751F;&#x6210;&#x4E24;&#x6BB5;&#x6709;&#x5E8F;&#x7684;&#x6570;&#x5217;&#xFF0C;&#x7136;&#x540E;&#x627E;&#x5230;&#x5206;&#x88C2;&#x70B9;&#x518D;&#x8FDB;&#x884C;&#x5206;&#x88C2;&#xFF0C;&#x6700;&#x540E;&#x518D;&#x5408;&#x5E76;&#x3002;&#x2003;&#x2003;&#x5982;&#x4F55;&#x627E;&#x5230;&#x5206;&#x88C2;&#x70B9;&#x662F;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x7684;&#x96BE;&#x70B9;(1)&#x9996;&#x5148;&#x53D6;&#x6570;&#x7EC4;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x4F5C;&#x4E3A;&#x57FA;&#x51C6;&#x5143;&#x7D20;base&#xFF0C;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x5934;&#x6307;&#x9488;&#x548C;&#x4E00;&#x4E2A;&#x5C3E;&#x6307;&#x9488;&#x3002;(2)&#x4ECE;&#x5DE6;&#x5411;&#x53F3;&#x8FDB;&#x884C;&#x626B;&#x63CF;&#xFF0C;&#x5982;&#x679C;&#x627E;&#x5230;&#x5927;&#x4E8E;base&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x5934;&#x6307;&#x9488;&#x505C;&#x7559;&#x5728;&#x6B64;&#x5904;&#xFF0C;&#x8FDB;&#x5165;&#x6B65;&#x9AA4;(3)&#x3002;(3)&#x4ECE;&#x53F3;&#x5411;&#x5DE6;&#x8FDB;&#x884C;&#x626B;&#x63CF;&#xFF0C;&#x5982;&#x679C;&#x627E;&#x5230;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;base&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x5C3E;&#x6307;&#x9488;&#x505C;&#x7559;&#x5728;&#x6B64;&#x5904;&#xFF0C;&#x7136;&#x540E;&#x4EA4;&#x6362;&#x5934;&#x5C3E;&#x6307;&#x9488;&#x7684;&#x503C;&#xFF0C;&#x5E76;&#x4E14;&#x5934;&#x6307;&#x9488;&#x5411;&#x53F3;&#x79FB;&#x52A8;&#x4E00;&#x4E2A;&#x8DDD;&#x79BB;&#xFF0C;&#x5C3E;&#x6307;&#x9488;&#x5411;&#x5DE6;&#x79FB;&#x52A8;&#x4E00;&#x4E2A;&#x8DDD;&#x79BB;&#x3002;(4)&#x91CD;&#x590D;(2)&#x548C;(3)&#xFF0C;&#x76F4;&#x5230;&#x5934;&#x6307;&#x9488;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;&#x5C3E;&#x6307;&#x9488;&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#x6B64;&#x65F6;&#x5934;&#x6307;&#x9488;&#x4E4B;&#x524D;&#x7684;&#x5143;&#x7D20;&#x90FD;&#x662F;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;&#x57FA;&#x51C6;&#x5143;&#x7D20;&#x7684;&#xFF0C;&#x5934;&#x6307;&#x9488;&#x4E4B;&#x540E;&#x7684;&#x5143;&#x7D20;&#x90FD;&#x662F;&#x5927;&#x4E8E;&#x57FA;&#x51C6;&#x5143;&#x7D20;&#x7684;&#x3002;&#x2003;&#x2003;&#x627E;&#x5230;&#x5206;&#x88C2;&#x70B9;&#x4EE5;&#x540E;&#xFF0C;&#x6839;&#x636E;&#x5206;&#x88C2;&#x70B9;&#x5C06;&#x957F;&#x6570;&#x5217;&#x5206;&#x89E3;&#x6210;&#x77ED;&#x6570;&#x5217;&#x91CD;&#x590D;&#x4E0A;&#x8FF0;&#x65B9;&#x6CD5;&#x8FDB;&#x884C;&#x5206;&#x88C2;&#xFF0C;&#x6700;&#x7EC8;&#x5C06;&#x5206;&#x88C2;&#x7684;&#x7ED3;&#x679C;&#x6309;&#x987A;&#x5E8F;&#x5408;&#x5E76;&#x5373;&#x53EF;&#x3002; &#x5FEB;&#x6392;&#x56FE;&#x89E3; python&#x4EE3;&#x7801;&#x5B9E;&#x6218;12345678910111213141516171819202122232425262728import sysdef quick_sort(list_, begin, end): if begin &lt; end: base_element, head, tail = list_[begin], begin, end while head &lt; tail: while head &lt; tail and list_[head] &lt;= base_element: head += 1 while head &lt; tail and list_[tail] &gt; base_element: tail -= 1 list_[head], list_[tail], head, tail = [list_[tail], list_[head], head + 1, tail - 1] if head &lt; tail else [list_[head], list_[tail], head, tail] if list_[head] &lt; list_[begin]: list_[head], list_[begin] = list_[begin], list_[head] quick_sort(list_, begin, head - 1) quick_sort(list_, head + 1, end) else: list_[head - 1], list_[begin] = list_[begin], list_[head - 1] quick_sort(list_, begin, head - 2) quick_sort(list_, head, end)print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x8981;&#x6392;&#x5E8F;&#x7684;&#x6570;&#x636E;&#x4E2A;&#x6570;:&apos;)for line in sys.stdin: num_number = int(line.strip().split()[0]) print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x8981;&#x6392;&#x5E8F;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x5E76;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;&apos;) list_number = [int(x) for x in sys.stdin.readline().strip().split()] quick_sort(list_number, 0, num_number - 1) print(&apos;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x7684;&#x7ED3;&#x679C;&#x4E3A;:&apos;, list_number) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x5927;&#x6570;&#x4E58;&#x6CD5;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x73B0;&#x6709;&#x4E24;&#x4E2A;&#x5F88;&#x5927;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x7531;&#x4E8E;&#x8BA1;&#x7B97;&#x673A;&#x786C;&#x4EF6;&#x7684;&#x9650;&#x5236;&#xFF0C;&#x65E0;&#x6CD5;&#x7528;&#x4E58;&#x6CD5;&#x76F4;&#x63A5;&#x8FDB;&#x884C;&#x6C42;&#x89E3;&#xFF0C;&#x5982;&#x4F55;&#x8BBE;&#x8BA1;&#x7B97;&#x6CD5;&#x6C42;&#x89E3;&#x51FA;&#x6B63;&#x786E;&#x7684;&#x7ED3;&#x679C;&#xFF1F;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x4E58;&#x6570;a&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x8F93;&#x5165;&#x4E58;&#x6570;b 121122334455667788998877665544332211 #&#x4E58;&#x6570; a9988776655443322112233445566778899 # &#x4E58;&#x6570; b &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;&#x7531;&#x4E8E;&#x8BA1;&#x7B97;&#x673A;&#x7684;&#x786C;&#x4EF6;&#x9650;&#x5236;&#xFF0C;&#x65E0;&#x6CD5;&#x5BF9;&#x5927;&#x503C;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#xFF0C;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x6839;&#x636E;&#x8FD0;&#x7B97;&#x7684;&#x6CD5;&#x5219;&#x5BF9;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x5206;&#x89E3;&#x3002;&#x2003;&#x2003;&#x5047;&#x8BBE;&#x8981;&#x8BA1;&#x7B97;$3278 * 41926$&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x4E24;&#x4E2A;&#x6570;&#x8FDB;&#x884C;&#x5206;&#x89E3;&#xFF0C;&#x5C06;3278&#x5206;&#x89E3;&#x4E3A;$(32*10^2)+(78*10^0)$&#xFF0C;&#x5C06;41926&#x5206;&#x89E3;&#x4E3A;$(419*10^2)+(26*10^0)$&#xFF0C;&#x7136;&#x540E;&#x6839;&#x636E;&#x4E58;&#x6CD5;&#x7684;&#x8FD0;&#x7B97;&#x6027;&#x8D28;$(a+b)*(c+d)=ac+ad+bc+bd$&#x53EF;&#x5F97;&#x539F;&#x5F0F;&#x4E3A;$(32*419*10^4)+(32*26*10^2)+(78*419*10^2)+(78*26*10^0)$&#x3002;&#x2003;&#x2003;&#x7136;&#x540E;&#x53D1;&#x73B0;&#x4E0A;&#x5F0F;&#x7684;&#x7B2C;&#x4E00;&#x9879;$(32*419*10^4)$&#x8FD8;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x5206;&#x89E3;&#xFF0C;&#x5C06;32&#x5206;&#x89E3;&#x4E3A;$(3*10^1)+(2*10^0)$&#xFF0C;&#x5C06;419&#x5206;&#x89E3;&#x4E3A;$(41*10^1)+(9*10^0)$&#xFF0C;&#x2026;&#x2026;&#xFF0C;&#x76F4;&#x5230;&#x5206;&#x89E3;&#x51FA;&#x7684;&#x4E24;&#x4E2A;&#x6570;&#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x4E3A;&#x4E00;&#x4F4D;&#x6570;&#x5219;&#x4E0D;&#x9700;&#x8981;&#x5206;&#x89E3;&#xFF0C;&#x56E0;&#x4E3A;&#x4E00;&#x4F4D;&#x6570;&#x7684;&#x4E58;&#x6CD5;&#x5F88;&#x7B80;&#x5355;&#x3002; &#x4E58;&#x6CD5;&#x56FE;&#x89E3; python&#x4EE3;&#x7801;&#x5B9E;&#x6218;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import sysclass Number: def __init__(self, value = None, length = 0, ten = 0): self.value = value self.length = length self.ten = tendef big_add(number_a, number_b, ans): number_a, number_b = [number_b, number_a] if number_a.ten &lt; number_b.ten else [number_a, number_b] ans.ten, tmp, temp, number_a_len, number_b_len = number_b.ten, 0, number_a.ten - number_b.ten, number_a.length + number_a.ten, number_b.length + number_b.ten ans_length = max(number_a_len, number_b_len) for i in range(ans_length - ans.ten): ta = 0 if i &lt; temp or i &gt;= number_a.length + temp else number_a.value[i - temp] tb = number_b.value[i] if i &lt; number_b.length else 0 ans.value[i], tmp = (ta + tb + tmp) % 10, (ta + tb + tmp) // 10 ans.length = ans_length - ans.ten if tmp &gt; 0: ans.value[ans_length - ans.ten], ans.length = [tmp, ans_length - ans.ten + 1]def big_mul(number_a, number_b, ans): mid_a, mid_b = [number_a.length &gt;&gt; 1, number_b.length &gt;&gt; 1] if number_a.length == 1 or number_b.length == 1: if number_a.length == 1: number_a, number_b = number_b, number_a ans.ten, w, tmp = number_a.ten + number_b.ten, number_b.value[0], 0 for i in range(number_a.length): ans.value[i], tmp = (w * number_a.value[i] + tmp) % 10, (w * number_a.value[i] + tmp) // 10 ans.length = number_a.length if tmp &gt; 0: ans.value[number_a.length], ans.length = [tmp, number_a.length + 1] return high_a, low_a, high_b, low_b = [Number(number_a.value[mid_a:], number_a.length - mid_a, number_a.ten + mid_a), Number(number_a.value[:mid_a], mid_a, number_a.ten), Number(number_b.value[mid_b:], number_b.length - mid_b, number_b.ten + mid_b), Number(number_b.value[:mid_b], mid_b, number_b.ten)] t_1, t_2, t_3, t_4, tmp_ans = [Number([0] * (high_a.length + high_a.ten + high_b.length + high_b.ten)), Number([0] * (high_a.length + high_a.ten + low_b.length + low_b.ten)), Number([0] * (low_a.length + low_a.ten + high_b.length + high_b.ten)),Number([0] * (low_a.length + low_a.ten + low_b.length + low_b.ten)), Number([0] * (len(ans.value) + ans.ten))] big_mul(high_a, high_b, t_1) big_mul(high_a, low_b, t_2) big_mul(low_a, high_b, t_3) big_mul(low_a, low_b, t_4) big_add(t_1, t_2, ans) big_add(t_3, ans, tmp_ans) big_add(t_4, tmp_ans, ans)print(&apos;&#x8F93;&#x5165;&#x5927;&#x6574;&#x6570;a:&apos;)for line in sys.stdin: number_a = list(line.strip().split()[0]) print(&apos;&#x8F93;&#x5165;&#x5927;&#x6574;&#x6570;b:&apos;) number_b = list(sys.stdin.readline().strip().split()[0]) char, number_a = [-1, number_a[1:]] if number_a[0] == &apos;-&apos; else [1, number_a] char, number_b = [char * -1, number_b[1:]] if number_b[0] ==&apos;-&apos; else [char, number_b] number_a, number_b, ans = Number(list(reversed([int(x) for x in number_a])), len(number_a), 0), Number(list(reversed([int(x) for x in number_b])), len(number_b), 0), Number([0] * (len(number_a) + len(number_b))) big_mul(number_a, number_b, ans) print(&apos;&apos;.join([str(x) for x in ans.value[::-1]]).lstrip(&apos;0&apos;)) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7B97;&#x6CD5;&#x603B;&#x7ED3;&#x2003;&#x2003;&#x5206;&#x6CBB;&#x7B97;&#x6CD5;&#x7684;&#x96BE;&#x70B9;&#x662F;&#x5982;&#x4F55;&#x8FDB;&#x884C;&#x5206;&#x89E3;&#xFF0C;&#x5C31;&#x50CF;&#x76D7;&#x68A6;&#x7A7A;&#x95F4;&#x7684;&#x68A6;&#x5883;&#x4E00;&#x6837;&#xFF0C;&#x5C42;&#x5C42;&#x6DF1;&#x5165;&#xFF0C;&#x5374;&#x8981;&#x6E05;&#x9192;&#x5728;&#x6BCF;&#x4E00;&#x5C42;&#x5E94;&#x8BE5;&#x505A;&#x4EC0;&#x4E48;&#x4E8B;&#x60C5;&#x3002;&#x662F;&#x5E94;&#x8BE5;&#x5148;&#x5206;&#x88C2;&#x518D;&#x505A;&#x4E8B;&#x60C5;&#x8FD8;&#x662F;&#x5148;&#x505A;&#x4E8B;&#x60C5;&#x5728;&#x5206;&#x88C2;&#x4E5F;&#x662F;&#x9700;&#x8981;&#x8003;&#x8651;&#x7684;&#x3002;&#x6700;&#x91CD;&#x8981;&#x7684;&#x4E00;&#x70B9;&#x662F;&#x68A6;&#x5883;&#x4E0D;&#x80FD;&#x6C38;&#x8FDC;&#x6DF1;&#x5165;&#xFF0C;&#x4E00;&#x5B9A;&#x8981;&#x5728;&#x67D0;&#x4E00;&#x4E2A;&#x65F6;&#x673A;&#x56DE;&#x5230;&#x73B0;&#x5B9E;&#xFF0C;&#x5373;&#x8981;&#x62E5;&#x6709;&#x622A;&#x6B62;&#x6761;&#x4EF6;&#xFF0C;&#x5224;&#x65AD;&#x662F;&#x5426;&#x5DF2;&#x7ECF;&#x8FBE;&#x5230;&#x9700;&#x8981;&#x7684;&#x6DF1;&#x5EA6;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>计算机基础知识</category>
        <category>常用算法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[动态规划(Dynamic Programming)]]></title>
    <url>%2F2019%2F07%2F21%2Falgorithm%20Dynamic_Programming%2F</url>
    <content type="text"><![CDATA[&#x52A8;&#x6001;&#x89C4;&#x5212; &#x539F;&#x7406;&#x4ECB;&#x7ECD;&#x2003;&#x2003; Dynamic Programming(DP):&#x52A8;&#x6001;&#x89C4;&#x5212;&#xFF0C;&#x662F;&#x8FD0;&#x7B79;&#x5B66;&#x7684;&#x4E00;&#x4E2A;&#x5206;&#x652F;&#xFF0C;&#x662F;&#x6C42;&#x89E3;&#x51B3;&#x7B56;&#x8FC7;&#x7A0B;&#x6700;&#x4F18;&#x5316;&#x7684;&#x6570;&#x5B66;&#x65B9;&#x6CD5;&#x3002;&#x4E8E;1957&#x5E74;&#x88AB;Richard Bellman(&#x7406;&#x67E5;&#x5FB7;&#xB7;&#x8D1D;&#x5C14;&#x66FC;)&#x63D0;&#x51FA;&#x3002;&#x5176;&#x4E2D;&#x7684;Programming&#x4E0D;&#x662F;&#x7F16;&#x7A0B;&#x7684;&#x610F;&#x601D;&#xFF0C;&#x800C;&#x662F;&#x6307;&#x4E00;&#x79CD;&#x8868;&#x683C;&#x5904;&#x7406;&#x6CD5;&#xFF0C;&#x628A;&#x6BCF;&#x4E00;&#x6B65;&#x5F97;&#x5230;&#x7684;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x7ED3;&#x679C;&#x5B58;&#x50A8;&#x5728;&#x8868;&#x683C;&#x91CC;&#xFF0C;&#x6BCF;&#x6B21;&#x9047;&#x5230;&#x5B50;&#x95EE;&#x9898;&#x65F6;&#x4E0D;&#x9700;&#x8981;&#x518D;&#x6C42;&#x89E3;&#x4E00;&#x904D;&#x3002;&#x5176;&#x672C;&#x8D28;&#x4E5F;&#x662F;&#x4E00;&#x79CD;&#x5206;&#x6CBB;&#x7B97;&#x6CD5;&#xFF0C;&#x5176;&#x4E0D;&#x540C;&#x70B9;&#x5728;&#x4E8E;&#x5206;&#x6CBB;&#x7B97;&#x6CD5;&#x5C06;&#x539F;&#x95EE;&#x9898;&#x5206;&#x89E3;&#x4E3A;&#x82E5;&#x5E72;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x81EA;&#x9876;&#x5411;&#x4E0B;&#x6C42;&#x89E3;&#x5404;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x518D;&#x5408;&#x5E76;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x3002;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x4E5F;&#x662F;&#x628A;&#x539F;&#x95EE;&#x9898;&#x5206;&#x89E3;&#x4E3A;&#x82E5;&#x5E72;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x7136;&#x540E;&#x81EA;&#x5E95;&#x5411;&#x4E0A;&#xFF0C;&#x5148;&#x6C42;&#x89E3;&#x6700;&#x5C0F;&#x7684;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x628A;&#x7ED3;&#x679C;&#x5B58;&#x50A8;&#x8D77;&#x6765;&#xFF0C;&#x6C42;&#x89E3;&#x5927;&#x95EE;&#x9898;&#x65F6;&#x76F4;&#x63A5;&#x67E5;&#x8BE2;&#x5C0F;&#x95EE;&#x9898;&#x7684;&#x89E3;&#xFF0C;&#x907F;&#x514D;&#x4E86;&#x5927;&#x91CF;&#x7684;&#x91CD;&#x590D;&#x8BA1;&#x7B97;&#xFF0C;&#x63D0;&#x9AD8;&#x4E86;&#x7B97;&#x6CD5;&#x6548;&#x7387;&#x3002;&#x5176;&#x672C;&#x8D28;&#x4E3A;&#xFF1A;&#x9012;&#x5F52;+&#x8BB0;&#x5FC6;&#x5316; &#x95EE;&#x9898;&#x6761;&#x4EF6;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x2003;&#x2003;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#x662F;&#x6307;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x5305;&#x542B;&#x5176;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x3002;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x662F;&#x4F7F;&#x7528;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x6700;&#x57FA;&#x672C;&#x6761;&#x4EF6;&#xFF0C;&#x5982;&#x679C;&#x95EE;&#x9898;&#x4E0D;&#x5177;&#x6709;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#xFF0C;&#x5C31;&#x4E0D;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x89E3;&#x51B3;&#x3002; &#x5B50;&#x95EE;&#x9898;&#x91CD;&#x53E0;&#x2003;&#x2003;&#x5B50;&#x95EE;&#x9898;&#x91CD;&#x53E0;&#x662F;&#x6307;&#x518D;&#x6C42;&#x89E3;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x6709;&#x5927;&#x91CF;&#x7684;&#x5B50;&#x95EE;&#x9898;&#x662F;&#x91CD;&#x590D;&#x7684;&#xFF0C;&#x90A3;&#x4E48;&#x53EA;&#x9700;&#x8981;&#x6C42;&#x89E3;&#x4F9D;&#x6B21;&#xFF0C;&#x7136;&#x540E;&#x5B58;&#x50A8;&#x5728;&#x8868;&#x683C;&#x4E2D;&#xFF0C;&#x4EE5;&#x4FBF;&#x4F7F;&#x7528;&#x65F6;&#x67E5;&#x8BE2;&#x3002;&#x8FD9;&#x4E0D;&#x662F;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x5FC5;&#x8981;&#x6761;&#x4EF6;&#xFF0C;&#x4F46;&#x662F;&#x53EF;&#x4EE5;&#x5145;&#x5206;&#x4F53;&#x73B0;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x4F18;&#x52BF;&#x3002; &#x7B97;&#x6CD5;&#x6B65;&#x9AA4;&#x2003;&#x2003;(1)&#x5206;&#x6790;&#x6700;&#x4F18;&#x89E3;&#x7684;&#x7ED3;&#x6784;&#x7279;&#x5F81;&#x2003;&#x2003;(2)&#x5B9A;&#x4E49;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;(&#x9012;&#x5F52;&#x5F0F;)&#x2003;&#x2003;(3)&#x81EA;&#x5E95;&#x5411;&#x4E0A;&#x8BA1;&#x7B97;&#x6700;&#x4F18;&#x89E3;&#x5E76;&#x8BB0;&#x5F55; &#x7ECF;&#x5178;&#x4F8B;&#x9898;(0-1&#x80CC;&#x5305;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x5047;&#x8BBE;&#x5C71;&#x6D1E;&#x91CC;&#x6709;n&#x4E2A;&#x5B9D;&#x7269;&#xFF0C;&#x6BCF;&#x79CD;&#x5B9D;&#x7269;&#x6709;&#x4E00;&#x5B9A;&#x91CD;&#x91CF;w&#x548C;&#x76F8;&#x5E94;&#x7684;&#x4EF7;&#x503C;v&#xFF0C;&#x80CC;&#x5305;&#x7684;&#x88C5;&#x8F7D;&#x80FD;&#x529B;&#x6709;&#x9650;&#xFF0C;&#x53EA;&#x80FD;&#x8FD0;&#x8D70;&#x91CD;&#x91CF;&#x4E3A;m&#x7684;&#x5B9D;&#x7269;&#xFF0C;&#x5B9D;&#x7269;&#x4E0D;&#x53EF;&#x4EE5;&#x5206;&#x5272;&#xFF0C;&#x5982;&#x4F55;&#x4F7F;&#x80CC;&#x5305;&#x8FD0;&#x8D70;&#x7269;&#x54C1;&#x7684;&#x4EF7;&#x503C;&#x6700;&#x5927;&#xFF1F;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x5148;&#x8F93;&#x5165;&#x5B9D;&#x7269;&#x7684;&#x6570;&#x91CF;n&#xFF0C;&#x548C;&#x80CC;&#x5305;&#x7684;&#x627F;&#x8F7D;&#x91CD;&#x91CF;m&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x4E00;&#x884C;&#x8F93;&#x51FA;&#x4E00;&#x4E2A;&#x5B9D;&#x7269;&#x5BF9;&#x5E94;&#x7684;&#x91CD;&#x91CF;w&#x548C;&#x4EF7;&#x503C;v(&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;)1234565 10 # &#x5B9D;&#x7269;&#x6570;n&#x548C;&#x80CC;&#x5305;&#x80FD;&#x88C5;&#x8F7D;&#x7684;&#x91CD;&#x91CF;m2 6 #&#x6BCF;&#x4E2A;&#x5B9D;&#x7269;&#x7684;&#x91CD;&#x91CF;w&#x548C;&#x4EF7;&#x503C;v5 34 52 43 6 &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;&#x548C;&#x666E;&#x901A;&#x80CC;&#x5305;&#x95EE;&#x9898;&#x4E0D;&#x540C;&#xFF0C;&#x5982;&#x679C;&#x76F2;&#x76EE;&#x7684;&#x88C5;&#x5165;&#x5F53;&#x524D;&#x5355;&#x4F4D;&#x91CD;&#x91CF;&#x4EF7;&#x503C;&#x6700;&#x9AD8;&#x7684;&#x7269;&#x54C1;&#xFF0C;&#x53EF;&#x80FD;&#x5BFC;&#x81F4;&#x80CC;&#x5305;&#x5269;&#x4F59;&#x7A7A;&#x95F4;&#x8F83;&#x5927;&#xFF0C;&#x8FBE;&#x4E0D;&#x5230;&#x6700;&#x4F18;&#x89E3;&#x3002;&#x9996;&#x5148;&#x5206;&#x6790;&#x95EE;&#x9898;&#x7684;&#x7ED3;&#x6784;&#x7279;&#x5F81;&#xFF0C;&#x5982;&#x679C;&#x7B2C;i&#x4E2A;&#x5B9D;&#x7269;&#x88C5;&#x5165;&#x80CC;&#x5305;&#x662F;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x80CC;&#x5305;&#x603B;&#x91CD;&#x91CF;$m-w_i$&#x4E00;&#x5B9A;&#x662F;&#x95EE;&#x9898;$\lbrace a_1, a_2, \ldots, a_n \rbrace$&#x7684;&#x6700;&#x4F18;&#x89E3;&#x3002;&#x56E0;&#x6B64;&#x8BE5;&#x95EE;&#x9898;&#x5177;&#x6709;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#x3002;&#x2003;&#x2003;&#x6839;&#x636E;&#x5206;&#x6790;&#x53EF;&#x77E5;&#xFF0C;&#x5224;&#x65AD;&#x7B2C;i&#x4E2A;&#x5B9D;&#x7269;&#x88C5;&#x5165;&#x91CD;&#x91CF;&#x4E3A;j&#x7684;&#x80CC;&#x5305;&#x65F6;&#x4F1A;&#x8F6C;&#x5316;&#x4E3A;&#x4E24;&#x79CD;&#x53EF;&#x80FD;&#xFF0C;&#x88C5;&#x5165;&#x6216;&#x8005;&#x4E0D;&#x88C5;&#x5165;&#xFF0C;&#x4E0D;&#x653E;&#x5165;&#x65F6;&#xFF0C;&#x95EE;&#x9898;&#x53D8;&#x4E3A;&#x524D;i-1&#x4E2A;&#x5B9D;&#x7269;&#x88C5;&#x5165;&#x91CD;&#x91CF;&#x4E3A;j&#x7684;&#x80CC;&#x5305;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x3002;&#x653E;&#x5165;&#x65F6;&#xFF0C;&#x95EE;&#x9898;&#x53D8;&#x4E3A;&#x524D;i-1&#x4E2A;&#x5B9D;&#x7269;&#x88C5;&#x5165;&#x91CD;&#x91CF;&#x4E3A;j-wi&#x7684;&#x80CC;&#x5305;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x52A0;&#x4E0A;&#x7B2C;i&#x4E2A;&#x5B9D;&#x7269;&#x7684;&#x4EF7;&#x503C;vi&#x3002;&#x5373;&#x6BD4;&#x8F83;&#x4E24;&#x8005;&#x7684;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x7528;donkey[i][j]&#x8868;&#x793A;&#x7B2C;i&#x4E2A;&#x5B9D;&#x7269;&#x88C5;&#x5165;&#x5BB9;&#x91CF;&#x4E3A;j&#x7684;&#x80CC;&#x5305;&#x91CC;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x3002;$donkey[i][j] = \begin{cases} donkey[i-1][j], &amp; j&lt;w_i \ \max{donkey[i-1][j], donkey[i-1][j-w[i]]+v[i]}, &amp; j \ge w_i \end{cases}$ 0-1&#x80CC;&#x5305;&#x56FE;&#x89E3; python&#x4EE3;&#x7801;&#x5B9E;&#x6218;123456789101112131415import sysprint(&apos;&#x8BF7;&#x8F93;&#x5165;&#x5B9D;&#x7269;&#x6570;&#x91CF;&#x548C;&#x9A74;&#x5B50;&#x627F;&#x8F7D;&#x91CD;&#x91CF;:&apos;)for line in sys.stdin: count, weight = line.strip().split() count, weight, treasure, donkey, i, j, plan = int(count), int(weight), [], [[0 for i in range(int(weight) + 1)] for j in range(int(count) + 1)], 0, 0, [] print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x5B9D;&#x7269;&#x7684;&#x91CD;&#x91CF;&#x548C;&#x4EF7;&#x503C;&apos;) for i in range(count): treasure.append([int(x) for x in sys.stdin.readline().strip().split()]) for i in range(1, count + 1): for j in range(1, weight + 1): donkey[i][j] = max(donkey[i - 1][j - treasure[i - 1][0]] + treasure[i - 1][1], donkey[i - 1][j]) if j &gt;= treasure[i - 1][0] else donkey[i - 1][j] while donkey[i][j] != 0: plan, i, j = [[&apos;&#x653E;&#x5165;&#x7B2C;&apos; + str(i) + &apos;&#x4E2A;&#x5B9D;&#x7269;&apos;] + [&apos;\n&apos;] + plan, i - 1, j - treasure[i - 1][0]] if donkey[i][j] != donkey[i - 1][j] else [plan, i - 1, j] print(&apos;&#x65E0;&#x6CD5;&#x653E;&#x5165;&#x4EFB;&#x4F55;&#x4E00;&#x4E2A;&#x5B9D;&#x7269;&apos;) if donkey[-1][-1] == 0 else print(&apos;&apos;.join(plan) + &apos;&#x88C5;&#x5165;&#x5B9D;&#x7269;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x4E3A;:&apos;, donkey[-1][-1]) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6700;&#x957F;&#x516C;&#x5171;&#x5E8F;&#x5217;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x7ED9;&#x5B9A;&#x4E24;&#x4E2A;&#x5E8F;&#x5217;&#xFF0C;&#x5982;&#x4F55;&#x627E;&#x51FA;&#x6700;&#x957F;&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;s1&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;s2 12ABCADAB # &#x5B57;&#x7B26;&#x4E32;s1BACDBA # &#x5B57;&#x7B26;&#x4E32;s2 &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;&#x9996;&#x5148;&#x5206;&#x6790;&#x95EE;&#x9898;&#x662F;&#x5426;&#x5177;&#x6709;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x7684;&#x6027;&#x8D28;&#xFF0C;&#x5047;&#x8BBE;$Z_k={z_1,z_2,z_3,\ldots,z_k}$&#x662F;$X_m={x_1,x_2,x_3,\ldots,x_m}$&#x548C;$Y_n={y_1,y_2,y_3,\ldots,y_n}$&#x7684;&#x6700;&#x957F;&#x516C;&#x5171;&#x7EC4;&#x5E8F;&#x5217;&#xFF0C;&#x53EF;&#x4EE5;&#x6709;&#x4E09;&#x79CD;&#x60C5;&#x51B5;&#x8BA8;&#x8BBA;&#xFF1A;&#x2003;&#x2003;(1)&#x5F53;$z_k=x_m=y_n$&#x65F6;&#xFF0C;&#x5219;$Z_k={z_1,z_2,z_3,\ldots,z_{k-1}}$&#x662F;$X_m={x_1,x_2,x_3,\ldots,x_{m-1}}$&#x548C;$Y_n={y_1,y_2,y_3,\ldots,y_{n-1}}$&#x7684;&#x6700;&#x957F;&#x516C;&#x5171;&#x7EC4;&#x5E8F;&#x5217;&#x3002;&#x2003;&#x2003;(2)&#x5F53;$z_k \neq x_m,x_m \neq y_n$&#x65F6;&#xFF0C;&#x5219;$Z_k={z_1,z_2,z_3,\ldots,z_k}$&#x662F;$X_m={x_1,x_2,x_3,\ldots,x_{m-1}}$&#x548C;$Y_n={y_1,y_2,y_3,\ldots,y_n}$&#x7684;&#x6700;&#x957F;&#x516C;&#x5171;&#x7EC4;&#x5E8F;&#x5217;&#x3002;&#x2003;&#x2003;(3)&#x5F53;$z_k \neq y_n,x_m \neq y_n$&#x65F6;&#xFF0C;&#x5219;$Z_k={z_1,z_2,z_3,\ldots,z_k}$&#x662F;$X_m={x_1,x_2,x_3,\ldots,x_m}$&#x548C;$Y_n={y_1,y_2,y_3,\ldots,y_{n-1}}$&#x7684;&#x6700;&#x957F;&#x516C;&#x5171;&#x7EC4;&#x5E8F;&#x5217;&#x3002;&#x2003;&#x2003;&#x56E0;&#x6B64;&#x95EE;&#x9898;&#x6EE1;&#x8DB3;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#xFF0C;&#x7528;char[i][j]&#x8868;&#x793A;Xi&#x548C;Yj&#x7684;&#x6700;&#x957F;&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#x957F;&#x5EA6;&#x3002;$char[i][j] = \begin{cases} char[i-1][j-1]+1, &amp; x_i=y_j \ \max{char[i][j-1], char[i-1][j]}, &amp; x_i \neq y_j \end{cases}$ &#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#x56FE;&#x89E3; python&#x4EE3;&#x7801;&#x5B9E;&#x6218;123456789101112131415import sysprint(&apos;&#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;s1:&apos;)for line in sys.stdin: s1 = line.strip() print(&apos;&#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;s2:&apos;) s2 = sys.stdin.readline().strip() s1_length, s2_length, i, j, route = len(s1), len(s2), 0, 0, &apos;&apos; compare_array, route_array = [[0 for m in range(s2_length + 1)] for n in range(s1_length + 1)], [[0 for m in range(s2_length + 1)] for n in range(s1_length + 1)] for i in range(1, s1_length + 1): for j in range(1, s2_length + 1): compare_array[i][j], route_array[i][j] = [compare_array[i - 1][j - 1] + 1, 1] if s1[i - 1] == s2[j - 1] else([compare_array[i][j - 1], 2] if compare_array[i][j - 1] &gt;= compare_array[i - 1][j] else [compare_array[i - 1][j], 3]) while i &gt; 0 and j &gt; 0: route, i, j = [route + s1[i - 1], i - 1, j - 1] if route_array[i][j] == 1 else ([route, i, j - 1] if route_array[i][j] == 2 else [route , i - 1, j]) print(s1 + &apos;&#x548C;&apos; + s2 + &apos;&#x65E0;&#x516C;&#x5171;&#x5E8F;&#x5217;&apos;) if len(route) == 0 else print(s1 + &apos;&#x548C;&apos; + s2 + &apos;&#x7684;&#x6700;&#x957F;&#x516C;&#x5171;&#x5E8F;&#x5217;&#x7684;&#x957F;&#x5EA6;&#x4E3A;:&apos;, len(route), &apos;\n&apos; + s1 + &apos;&#x548C;&apos; + s2 +&apos;&#x7684;&#x6700;&#x957F;&#x516C;&#x5171;&#x5E8F;&#x5217;&#x662F;:&apos; + route[::-1]) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x5B57;&#x7B26;&#x4E32;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x7ED9;&#x5B9A;&#x4E24;&#x4E2A;&#x5E8F;&#x5217;&#xFF0C;&#x5982;&#x4F55;&#x4F7F;&#x7528;&#x6700;&#x5C11;&#x7684;&#x589E;&#x52A0;&#x5B57;&#x7B26;&#xFF0C;&#x5220;&#x9664;&#x5B57;&#x7B26;&#xFF0C;&#x66FF;&#x6362;&#x5B57;&#x7B26;&#x64CD;&#x4F5C;&#xFF0C;&#x4F7F;&#x4E24;&#x4E2A;&#x5E8F;&#x5217;&#x76F8;&#x540C;&#xFF1F;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;str1&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;str2 12family # &#x5B57;&#x7B26;&#x4E32;str1frame # &#x5B57;&#x7B26;&#x4E32;str2 &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;&#x5206;&#x6790;&#x6B64;&#x9898;&#x662F;&#x5426;&#x5177;&#x6709;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#xFF0C;&#x5047;&#x8BBE;char[i][j]&#x662F;$X_i={x_1,x_2,x_3,\ldots,x_i}$&#x548C;$Y_j={y_1,y_2,y_3,\ldots,y_j}$&#x7684;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x7684;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x53EF;&#x4EE5;&#x6709;&#x4E24;&#x79CD;&#x60C5;&#x51B5;&#x8BA8;&#x8BBA;&#xFF1A;&#x2003;&#x2003;(1)&#x5F53;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x6EE1;&#x8DB3;$x_i=y_j$&#x65F6;&#xFF0C;&#x5219;char[i-1][j-1]&#x662F;$X_m={x_1,x_2,x_3,\ldots,x_i}$&#x548C;$Y_n={y_1,y_2,y_3,\ldots,y_j}$&#x7684;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x3002;&#x2003;&#x2003;(2)&#x5F53;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x6EE1;&#x8DB3;$x_i \neq y_j$&#x65F6;&#xFF0C;&#x5219;&#x53EF;&#x4EE5;&#x5220;&#x9664;&#x5B57;&#x7B26;xi&#x6216;&#x5220;&#x9664;&#x5B57;&#x7B26;yj&#x6216;&#x5C06;&#x5B57;&#x7B26;xi&#x66FF;&#x6362;&#x4E3A;&#x5B57;&#x7B26;yj&#xFF0C;&#x5373;&#x6EE1;&#x8DB3;&#x4E0B;&#x5217;&#x6761;&#x4EF6;$\max(char[i-1][j],char[i][j-1],char[i-1][j-1])+1$&#x662F;$X_m={x_1,x_2,x_3,\ldots,x_i}$&#x548C;$Y_n={y_1,y_2,y_3,\ldots,y_j}$&#x7684;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x3002;&#x2003;&#x2003;&#x56E0;&#x6B64;&#x95EE;&#x9898;&#x6EE1;&#x8DB3;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#xFF0C;&#x5199;&#x51FA;&#x5176;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;&#x3002;$char[i][j] = \begin{cases} char[i-1][j-1], &amp; x_i=y_j \ \max{char[i][j-1], char[i-1][j],char[i-1][j-1]}+1, &amp; x_i \neq y_j \end{cases}$ &#x5B57;&#x7B26;&#x4E32;&#x8DDD;&#x79BB;&#x56FE;&#x89E3; python&#x4EE3;&#x7801;&#x5B9E;&#x6218;123456789101112131415import sysprint(&apos;&#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;str1:&apos;)for line in sys.stdin: str1 = line.strip() print(&apos;&#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;str2:&apos;) str2 = sys.stdin.readline().strip() str1_length, str2_length, i, j, route = len(str1), len(str2), 0 ,0, [] compare_array = [list(range(str2_length + 1))] + [[x] + [0] * str2_length for x in range(1,str1_length + 1)] for i in range(1, str1_length + 1): for j in range(1, str2_length + 1): compare_array[i][j] = compare_array[i - 1][j - 1] if str1[i - 1] == str2[j - 1] else min(compare_array[i - 1][j - 1], compare_array[i][j - 1], compare_array[i - 1][j]) + 1 while i &gt; 0 and j &gt; 0: route, i, j = [route, i - 1, j - 1] if str1[i - 1] == str2[j - 1] else ([[&apos;&#x5C06;&apos; + str1 + &apos;&#x4E2D;&apos; + str(i) + &apos;&#x5904;&#x7684;&apos; + str1[i - 1] + &apos;&#x66FF;&#x6362;&#x4E3A;&apos; + str2[j - 1]] + [&apos;\n&apos;] + route, i - 1, j - 1] if compare_array[i - 1][j - 1] + 1 == compare_array[i][j] else([[&apos;&#x5C06;&apos; + str1 + &apos;&#x4E2D;&apos; + str(i) + &apos;&#x5904;&#x63D2;&#x5165;&apos; + str2[j - 1]] + [&apos;\n&apos;] + route, i, j - 1] if compare_array[i][j - 1] + 1 == compare_array[i][j] else [[&apos;&#x5C06;&apos; + str1 + &apos;&#x4E2D;&apos; + str(i) + &apos;&#x5904;&#x7684;&apos; + str1[i - 1] + &apos;&#x5220;&#x9664;&apos;] + [&apos;\n&apos;] + route, i - 1, j])) print(str1 + &apos;&#x548C;&apos; + str2 + &apos;&#x7684;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x662F;:&apos;, compare_array[-1][-1], &apos;\n&apos; + &apos;&#x5C06;&apos; + str1 + &apos;&#x8F6C;&#x6362;&#x4E3A;&apos; + str2 + &apos;&#x7684;&#x64CD;&#x4F5C;&#x4E3A;:&apos; + &apos;\n&apos; + &apos;&apos;.join(route[:-1])) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7B97;&#x6CD5;&#x603B;&#x7ED3;&#x2003;&#x2003;&#x7531;&#x4E8E;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x4E0D;&#x5C40;&#x9650;&#x4E8E;&#x773C;&#x524D;&#x7684;&#x6700;&#x4F18;&#x72B6;&#x6001;&#xFF0C;&#x800C;&#x662F;&#x8BB0;&#x5F55;&#x4E86;&#x4EE5;&#x524D;&#x7684;&#x6240;&#x6709;&#x72B6;&#x6001;&#xFF0C;&#x56E0;&#x6B64;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x5177;&#x6709;&#x5F88;&#x5F3A;&#x7684;&#x5927;&#x5C40;&#x89C2;&#xFF0C;&#x53EF;&#x4EE5;&#x8F83;&#x4E3A;&#x5BB9;&#x6613;&#x5730;&#x5F97;&#x5230;&#x5168;&#x5C40;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x5B9E;&#x9645;&#x7684;&#x751F;&#x4EA7;&#x751F;&#x6D3B;&#x4E2D;&#x4F7F;&#x7528;&#x8F83;&#x5E7F;&#x3002;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x5173;&#x952E;&#x662F;&#x5206;&#x6790;&#x95EE;&#x9898;&#x662F;&#x5426;&#x5177;&#x6709;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#xFF0C;&#x5982;&#x679C;&#x95EE;&#x9898;&#x5177;&#x6709;&#x8BE5;&#x6027;&#x8D28;&#xFF0C;&#x8BF4;&#x660E;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x6765;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#x3002;&#x7136;&#x540E;&#x662F;&#x627E;&#x5230;&#x5176;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;&#xFF0C;&#x8FD9;&#x4E5F;&#x662F;&#x6700;&#x96BE;&#x8003;&#x8651;&#x7684;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#x3002;&#x5F97;&#x5230;&#x4E86;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;&#xFF0C;&#x6B64;&#x95EE;&#x9898;&#x8FCE;&#x5203;&#x800C;&#x89E3;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>计算机基础知识</category>
        <category>常用算法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[贪心算法(Greedy)]]></title>
    <url>%2F2019%2F07%2F19%2Falgorithm%20greedy%2F</url>
    <content type="text"><![CDATA[&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5; &#x539F;&#x7406;&#x4ECB;&#x7ECD;&#x2003;&#x2003; Greedy:&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;&#xFF0C;&#x53C8;&#x79F0;&#x8D2A;&#x5A6A;&#x7B97;&#x6CD5;&#xFF0C;&#x4EBA;&#x8981;&#x6D3B;&#x5728;&#x5F53;&#x4E0B;&#xFF0C;&#x770B;&#x6E05;&#x695A;&#x773C;&#x524D;&#xFF0C;&#x8FD9;&#x79CD;&#x601D;&#x60F3;&#x5C31;&#x662F;&#x8D2A;&#x5FC3;&#x601D;&#x60F3;&#x3002;&#x662F;&#x6307;&#x5728;&#x5BF9;&#x95EE;&#x9898;&#x6C42;&#x89E3;&#x65F6;&#xFF0C;&#x603B;&#x662F;&#x505A;&#x51FA;&#x5F53;&#x524D;&#x6700;&#x597D;&#x7684;&#x9009;&#x62E9;&#xFF0C;&#x4E0D;&#x4ECE;&#x6574;&#x4F53;&#x6700;&#x4F18;&#x4E0A;&#x52A0;&#x4EE5;&#x8003;&#x8651;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5B83;&#x671F;&#x671B;&#x901A;&#x8FC7;&#x5C40;&#x90E8;&#x6700;&#x4F18;&#x9009;&#x62E9;&#x4ECE;&#x800C;&#x5F97;&#x5230;&#x5168;&#x5C40;&#x6700;&#x4F18;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x3002; &#x6838;&#x5FC3;&#x601D;&#x60F3;&#x8D2A;&#x5FC3;&#x9009;&#x62E9;&#x2003;&#x2003;&#x8D2A;&#x5FC3;&#x9009;&#x62E9;&#x6307;&#x539F;&#x95EE;&#x9898;&#x7684;&#x6574;&#x4F53;&#x6700;&#x4F18;&#x89E3;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4E00;&#x7CFB;&#x5217;&#x5C40;&#x90E8;&#x6700;&#x4F18;&#x7684;&#x9009;&#x62E9;&#x5F97;&#x5230;&#x3002;&#x5E94;&#x7528;&#x540C;&#x4E00;&#x89C4;&#x5219;&#xFF0C;&#x5C06;&#x539F;&#x95EE;&#x9898;&#x53D8;&#x4E3A;&#x4E00;&#x4E2A;&#x76F8;&#x4F3C;&#x7684;&#x4F46;&#x89C4;&#x6A21;&#x66F4;&#x5C0F;&#x7684;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x800C;&#x540E;&#x7684;&#x6BCF;&#x4E00;&#x6B65;&#x90FD;&#x662F;&#x5F53;&#x524D;&#x6700;&#x4F73;&#x7684;&#x9009;&#x62E9;&#x3002;&#x8FD9;&#x79CD;&#x9009;&#x62E9;&#x4F9D;&#x8D56;&#x4E8E;&#x5DF2;&#x505A;&#x51FA;&#x7684;&#x9009;&#x62E9;&#xFF0C;&#x4F46;&#x4E0D;&#x4F9D;&#x8D56;&#x4E8E;&#x672A;&#x505A;&#x51FA;&#x7684;&#x9009;&#x62E9;&#x3002; &#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x2003;&#x2003;&#x5F53;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x5305;&#x542B;&#x5176;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x65F6;&#xFF0C;&#x79F0;&#x6B64;&#x95EE;&#x9898;&#x5177;&#x6709;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#x3002;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#x662F;&#x8BE5;&#x95EE;&#x9898;&#x80FD;&#x5426;&#x53EF;&#x7528;&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;&#x6C42;&#x89E3;&#x7684;&#x5173;&#x952E;&#x3002;&#x5982;&#x539F;&#x95EE;&#x9898;$S=\lbrace a_1, a_2, a_3, \ldots, a_n \rbrace$,&#x901A;&#x8FC7;&#x8D2A;&#x5FC3;&#x9009;&#x62E9;&#x51FA;&#x4E00;&#x4E2A;&#x5F53;&#x524D;&#x6700;&#x4F18;&#x89E3;${a_i}$&#x4E4B;&#x540E;&#xFF0C;&#x8F6C;&#x5316;&#x4E3A;&#x6C42;&#x89E3;&#x5B50;&#x95EE;&#x9898;$S- \lbrace a_i \rbrace $&#xFF0C;&#x5982;&#x679C;&#x539F;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x5305;&#x542B;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x5219;&#x8BF4;&#x660E;&#x8BE5;&#x95EE;&#x9898;&#x6EE1;&#x8DB3;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x6027;&#x8D28;&#x3002; &#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x80CC;&#x5305;&#x95EE;&#x9898;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x5047;&#x8BBE;&#x5C71;&#x6D1E;&#x91CC;&#x6709;n&#x4E2A;&#x5B9D;&#x7269;&#xFF0C;&#x6BCF;&#x79CD;&#x5B9D;&#x7269;&#x6709;&#x4E00;&#x5B9A;&#x91CD;&#x91CF;w&#x548C;&#x76F8;&#x5E94;&#x7684;&#x4EF7;&#x503C;v&#xFF0C;&#x80CC;&#x5305;&#x7684;&#x88C5;&#x8F7D;&#x80FD;&#x529B;&#x6709;&#x9650;&#xFF0C;&#x53EA;&#x80FD;&#x8FD0;&#x8D70;&#x91CD;&#x91CF;&#x4E3A;m&#x7684;&#x5B9D;&#x7269;&#xFF0C;&#x5B9D;&#x7269;&#x53EF;&#x4EE5;&#x5206;&#x5272;&#xFF0C;&#x5982;&#x4F55;&#x4F7F;&#x80CC;&#x5305;&#x8FD0;&#x8D70;&#x7269;&#x54C1;&#x7684;&#x4EF7;&#x503C;&#x6700;&#x5927;&#xFF1F;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x5148;&#x8F93;&#x5165;&#x5B9D;&#x7269;&#x7684;&#x6570;&#x91CF;n&#xFF0C;&#x548C;&#x80CC;&#x5305;&#x7684;&#x627F;&#x8F7D;&#x91CD;&#x91CF;m&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x4E00;&#x884C;&#x8F93;&#x51FA;&#x4E00;&#x4E2A;&#x5B9D;&#x7269;&#x5BF9;&#x5E94;&#x7684;&#x91CD;&#x91CF;w&#x548C;&#x4EF7;&#x503C;v(&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;)12345676 19 # &#x5B9D;&#x7269;&#x6570;n&#x548C;&#x80CC;&#x5305;&#x80FD;&#x88C5;&#x8F7D;&#x7684;&#x91CD;&#x91CF;m2 8 #&#x6BCF;&#x4E2A;&#x5B9D;&#x7269;&#x7684;&#x91CD;&#x91CF;w&#x548C;&#x4EF7;&#x503C;v6 17 94 310 23 4 &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;&#x5BF9;&#x4E8E;&#x666E;&#x901A;&#x80CC;&#x5305;&#x95EE;&#x9898;&#xFF0C;&#x5B9D;&#x7269;&#x53EF;&#x4EE5;&#x5206;&#x5272;&#xFF0C;&#x5F53;&#x524D;&#x53D6;&#x5F97;&#x7684;&#x5B9D;&#x7269;&#x4E0D;&#x4F1A;&#x53D7;&#x5230;&#x540E;&#x9762;&#x5B9D;&#x7269;&#x7684;&#x5F71;&#x54CD;&#xFF0C;&#x5982;&#x679C;&#x662F;0-1&#x80CC;&#x5305;&#xFF0C;&#x5373;&#x7269;&#x54C1;&#x4E0D;&#x53EF;&#x4EE5;&#x5206;&#x5272;&#xFF0C;&#x5F53;&#x524D;&#x5B9D;&#x7269;&#x5C31;&#x4F1A;&#x53D7;&#x5230;&#x540E;&#x9762;&#x5B9D;&#x7269;&#x7684;&#x5F71;&#x54CD;&#x3002;&#x5047;&#x8BBE;&#x8BE5;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x4E3A;S&#xFF0C;&#x62FF;&#x8D70;&#x5F53;&#x524D;&#x6700;&#x4F18;&#x89E3;&#x7B2C;i&#x4E2A;&#x5B9D;&#x7269;&#xFF0C;&#x73B0;&#x5728;&#x8F6C;&#x6362;&#x6210;&#x4E00;&#x4E2A;&#x65B0;&#x95EE;&#x9898;&#xFF0C;&#x6709;n-1&#x4E2A;&#x5B9D;&#x7269;&#xFF0C;&#x80CC;&#x5305;&#x91CD;&#x91CF;&#x4E3A;$m-w_i$&#xFF0C;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x6700;&#x4F18;&#x89E3;&#x4E3A;$S- \lbrace a_i \rbrace$&#x3002;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;&#x3002;&#x2003;&#x2003;&#x8BE5;&#x95EE;&#x9898;&#x6709;&#x4E09;&#x4E2A;&#x601D;&#x8003;&#x65B9;&#x5411;(1)&#x9009;&#x62E9;&#x4EF7;&#x503C;&#x6700;&#x5927;&#x7684;&#x5B9D;&#x7269;&#x88C5;&#x5165;&#x80CC;&#x5305;(2)&#x9009;&#x62E9;&#x91CD;&#x91CF;&#x6700;&#x5C0F;&#x7684;&#x5B9D;&#x7269;&#x88C5;&#x5165;&#x80CC;&#x5305;(3)&#x9009;&#x62E9;&#x5355;&#x4F4D;&#x91CD;&#x91CF;&#x4EF7;&#x503C;&#x6700;&#x5927;&#x7684;&#x5B9D;&#x7269;&#x88C5;&#x5165;&#x80CC;&#x5305;&#x9009;&#x62E9;&#x4EF7;&#x503C;&#x6700;&#x5927;&#x7684;&#x5B9D;&#x7269;&#xFF0C;&#x5982;&#x679C;&#x91CD;&#x91CF;&#x4E5F;&#x5F88;&#x5927;&#xFF0C;&#x5219;&#x4E0D;&#x662F;&#x6700;&#x4F18;&#x89E3;&#xFF1B;&#x9009;&#x62E9;&#x91CD;&#x91CF;&#x6700;&#x5C0F;&#x7684;&#x5B9D;&#x7269;&#xFF0C;&#x5982;&#x679C;&#x4EF7;&#x503C;&#x4E5F;&#x5F88;&#x5C0F;&#xFF0C;&#x5219;&#x4E5F;&#x4E0D;&#x662F;&#x6700;&#x4F18;&#x89E3;&#xFF1B;&#x56E0;&#x6B64;&#x5E94;&#x8BE5;&#x9009;&#x62E9;&#x5355;&#x4F4D;&#x91CD;&#x91CF;&#x4EF7;&#x503C;&#x6700;&#x5927;&#x7684;&#x5B9D;&#x7269;&#x3002; &#x6D41;&#x7A0B;&#x56FE; python&#x4EE3;&#x7801;&#x5B9E;&#x6218;123456789101112131415161718import sysprint(&apos;&#x8BF7;&#x8F93;&#x5165;&#x5B9D;&#x7269;&#x6570;&#x91CF;&#x548C;&#x9A74;&#x5B50;&#x627F;&#x8F7D;&#x91CD;&#x91CF;:&apos;)for line in sys.stdin: count, weight = line.strip().split() count, weight, treasure, price, plan = int(count), float(weight), [], 0, &apos;&apos; print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x5B9D;&#x7269;&#x7684;&#x91CD;&#x91CF;&#x548C;&#x4EF7;&#x503C;&apos;) for i in range(count): tmp = [float(x) for x in sys.stdin.readline().strip().split()] treasure.append([i + 1] + tmp + [tmp[1] / tmp[0]]) treasure.sort(key=lambda x: (-x[3])) for i in treasure: if weight &gt; i[1]: price, weight, plan = price + i[2], weight - i[1], plan + &apos;&#x5C06;&#x7B2C;&apos; + str(i[0]) +&apos;&#x4E2A;&#x5B9D;&#x7269;&#x5168;&#x90E8;&#x88C5;&#x5165;\n&apos; else: price, plan = price + weight * i[3], plan + &apos;&#x5269;&#x4F59;&#x91CD;&#x91CF;&#x5168;&#x90E8;&#x88C5;&#x5165;&#x7B2C;&apos; + str(i[0]) + &apos;&#x4E2A;&#x5B9D;&#x7269;\n&apos; break print(&apos;&#x6700;&#x4F18;&#x7684;&#x65B9;&#x6848;&#x4E3A;:\n&apos; + plan + &apos;&#x88C5;&#x5165;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x4E3A;:&apos;, price) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6700;&#x77ED;&#x8DEF;&#x5F84;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x73B0;&#x6709;&#x4E00;&#x4E2A;&#x666F;&#x70B9;&#x5730;&#x56FE;&#xFF0C;&#x6709;n&#x4E2A;&#x57CE;&#x5E02;&#xFF0C;m&#x6761;&#x8DEF;&#x5F84;(&#x8DEF;&#x5F84;&#x662F;&#x6709;&#x5411;&#x7684;&#xFF0C;&#x5373;&#x6765;&#x56DE;&#x7684;&#x8DDD;&#x79BB;&#x4E0D;&#x540C;)&#xFF0C;&#x5047;&#x8BBE;&#x4ECE;&#x67D0;&#x4E00;&#x7ED3;&#x70B9;&#x51FA;&#x53D1;&#xFF0C;&#x6C42;&#x5230;&#x5176;&#x4ED6;&#x5404;&#x4E2A;&#x7ED3;&#x70B9;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x3002;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x5148;&#x8F93;&#x5165;&#x57CE;&#x5E02;&#x6570;n&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x8F93;&#x5165;&#x603B;&#x8DEF;&#x5F84;&#x6570;m&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x4E00;&#x884C;&#x8F93;&#x5165;A&#x5E02;&#xFF0C;B&#x5E02;&#xFF0C;&#x4EE5;&#x53CA;A&#x5230;B&#x7684;&#x8DDD;&#x79BB;(&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;)&#xFF0C;&#x6700;&#x540E;&#x8F93;&#x5165;&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;&#x548C;&#x76EE;&#x7684;&#x5730;&#x4F4D;&#x7F6E;&#x3002;1234567891011125 # &#x57CE;&#x5E02;&#x6570;n8 # &#x8DEF;&#x5F84;&#x6570;m1 2 2 #&#x4ECE;1&#x53F7;&#x57CE;&#x5E02;&#x5230;2&#x53F7;&#x57CE;&#x5E02;&#x7684;&#x8DDD;&#x79BB;&#x4E3A;21 3 52 3 22 4 63 4 73 5 14 3 24 5 41 #&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;5 #&#x76EE;&#x7684;&#x5730;&#x4F4D;&#x7F6E; &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x7B97;&#x6CD5;&#x662F;1959&#x5E74;&#x7531;&#x8377;&#x5170;&#x56FE;&#x7075;&#x5956;&#x5F97;&#x4E3B;Edsger Wybe Dijkstra(&#x827E;&#x5179;&#x683C;&#xB7;&#x8FEA;&#x79D1;&#x65AF;&#x5F7B;)&#x63D0;&#x51FA;&#x7684;&#xFF0C;&#x4ECE;&#x8D77;&#x59CB;&#x70B9;&#x5F00;&#x59CB;&#xFF0C;&#x9010;&#x6E10;&#x589E;&#x52A0;&#x7ED3;&#x70B9;&#x6570;&#xFF0C;&#x4F9D;&#x6B21;&#x6C42;&#x51FA;&#x6E90;&#x70B9;&#x5230;&#x5404;&#x4E2A;&#x5B9A;&#x70B9;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#xFF0C;&#x76F4;&#x5230;&#x6C42;&#x51FA;&#x76EE;&#x6807;&#x7ED3;&#x70B9;&#x3002;&#x2003;&#x2003;&#x9996;&#x5148;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;dist&#xFF0C;&#x5B58;&#x653E;&#x4ECE;&#x6E90;&#x70B9;&#x5230;&#x5404;&#x70B9;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#xFF0C;&#x5217;&#x8868;S&#xFF0C;&#x4EE3;&#x8868;&#x5DF2;&#x7ECF;&#x5305;&#x542B;&#x7684;&#x7ED3;&#x70B9;&#x6570;&#xFF0C;&#x521D;&#x59CB;&#x503C;&#x4E3A;&#x7A7A;&#x3002;S&#x4E2D;&#x7684;&#x7ED3;&#x70B9;&#xFF0C;&#x4EE3;&#x8868;&#x4ECE;&#x6E90;&#x70B9;&#x5230;&#x8BE5;&#x70B9;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x5DF2;&#x786E;&#x5B9A;&#x3002;&#x5217;&#x8868;V,&#x4EE3;&#x8868;&#x6CA1;&#x6709;&#x5305;&#x542B;&#x7684;&#x7ED3;&#x70B9;&#x6570;&#xFF0C;&#x521D;&#x59CB;&#x503C;&#x4E3A;&#x5168;&#x90E8;&#x7ED3;&#x70B9;&#xFF0C;&#x7136;&#x540E;&#x4ECE;&#x8FD9;&#x4E9B;&#x7ED3;&#x70B9;&#x4E2D;&#x5BFB;&#x627E;&#x8DDD;&#x79BB;&#x6E90;&#x70B9;&#x6700;&#x8FD1;&#x7684;&#x7ED3;&#x70B9;(&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;)&#x3002;&#x5047;&#x5982;&#x627E;&#x5230;&#x67D0;&#x4E00;&#x70B9;i&#xFF0C;&#x8BF4;&#x660E;&#x4ECE;&#x6E90;&#x70B9;&#x901A;&#x8FC7;S&#xFF0C;&#x5230;&#x8FBE;i&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x4E3A;dist[i]&#xFF0C;&#x5C06;i&#x52A0;&#x5165;S&#xFF0C;&#x5E76;&#x4ECE;V&#x4E2D;&#x5254;&#x9664;&#x3002;&#x66F4;&#x65B0;V&#x4E2D;&#x5176;&#x4F59;&#x7684;&#x70B9;&#x5230;&#x6E90;&#x70B9;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#xFF0C;&#x5373;&#x68C0;&#x67E5;&#x5176;&#x4F59;&#x5404;&#x70B9;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;i&#x70B9;&#x5230;&#x8FBE;&#x6E90;&#x70B9;&#x3002; &#x6D41;&#x7A0B;&#x56FE; python&#x4EE3;&#x7801;&#x5B9E;&#x6218;1234567891011121314151617181920212223242526272829303132333435import sysprint(&apos;&#x8BF7;&#x8F93;&#x5165;&#x57CE;&#x5E02;&#x4E2A;&#x6570;:&apos;)for line in sys.stdin: num_city = int(line.strip().split()[0]) print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x8DEF;&#x7EBF;&#x4E2A;&#x6570;:&apos;) num_route = int(sys.stdin.readline().strip().split()[0]) print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x57CE;&#x5E02;&#x4E4B;&#x95F4;&#x7684;&#x8DEF;&#x7EBF;&#x53CA;&#x8DDD;&#x79BB;&apos;) map = [[65535*(i!=j) for i in range(num_city+1)] for j in range(num_city+1)] for i in range(num_route): begin, end, length = [int(x) for x in sys.stdin.readline().strip().split()] map[begin][end] = length print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x5C0F;&#x660E;&#x6240;&#x5728;&#x7684;&#x4F4D;&#x7F6E;:&apos;) begin = int(sys.stdin.readline().strip().split()[0]) print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x7EC8;&#x70B9;&#x7684;&#x4F4D;&#x7F6E;:&apos;) end = int(sys.stdin.readline().strip().split()[0]) dist, route = [0 | x for x in map[begin]], [0 for i in range(num_city+1)] un_used = list(range(num_city+1)) while len(un_used) &gt; 1: tmp_loc, tmp_length = [0, 65535] for i in un_used[1:]: tmp_length, tmp_loc = [dist[i], i] if dist[i] &lt; tmp_length else [tmp_length, tmp_loc] if tmp_loc == end or tmp_loc == 0: break un_used.remove(tmp_loc) for j in un_used[1:]: dist[j], route[j] = [dist[tmp_loc] + map[tmp_loc][j], tmp_loc] if dist[tmp_loc] + map[tmp_loc][j] &lt; dist[j] else [dist[j], route[j]] if route[end] == 0: print(&apos;&#x76EE;&#x7684;&#x5730;&#x4E0D;&#x53EF;&#x8FBE;&apos;) else: terminal, res = end, str(end) while route[terminal] != 0: terminal = route[terminal] res = str(terminal) + &apos;-&gt;&apos; + res print(&apos;&#x6240;&#x8D70;&#x8FC7;&#x7684;&#x8DEF;&#x5F84;&#x4E3A;:&apos; + str(begin) + &apos;-&gt;&apos; + res + &apos; &#x6700;&#x77ED;&#x8DDD;&#x79BB;&#x4E3A;:&apos;,dist[end]) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7ECF;&#x5178;&#x4F8B;&#x9898;(&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;)&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x2003;&#x2003;&#x73B0;&#x6709;&#x4E00;&#x4E2A;&#x5B66;&#x6821;&#xFF0C;&#x4E0B;&#x9762;&#x6709;n&#x4E2A;&#x5B66;&#x9662;&#xFF0C;m&#x6761;&#x8DEF;&#x7ECF;(&#x8DEF;&#x5F84;&#x662F;&#x65E0;&#x5411;&#x7684;&#xFF0C;&#x5373;&#x6765;&#x56DE;&#x7684;&#x8DDD;&#x79BB;&#x76F8;&#x540C;)&#x73B0;&#x5728;&#x8BBE;&#x8BA1;&#x4E00;&#x6761;&#x7F51;&#x7EDC;&#x5E03;&#x7EBF;&#xFF0C;&#x5C06;&#x5404;&#x4E2A;&#x5B66;&#x9662;&#x8054;&#x901A;&#x8D77;&#x6765;&#xFF0C;&#x95EE;&#x5982;&#x4F55;&#x8BBE;&#x8BA1;&#x53EF;&#x4EE5;&#x4F7F;&#x8D39;&#x7528;&#x6700;&#x5C11;&#x3002;&#x2003;&#x2003;&#x7B2C;&#x4E00;&#x884C;&#x5148;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x6570;n&#x548C;&#x8FB9;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x4E00;&#x884C;&#x8F93;&#x5165;A&#xFF0C;B&#xFF0C;&#x4EE5;&#x53CA;A&#x5230;B&#x7684;&#x8DDD;&#x79BB;(&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;)&#xFF0C;&#x6700;&#x540E;&#x8F93;&#x5165;&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;&#x3002; 12345678910111213147 12 #&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x6570;&#x548C;&#x8FB9;&#x6570;1 2 23 # &#x4ECE;1&#x53F7;&#x5B66;&#x9662;&#x5230;2&#x53F7;&#x5B66;&#x9662;&#x7684;&#x8DDD;&#x79BB;&#x4E3A;231 6 281 7 362 3 202 7 13 4 153 7 44 5 34 7 95 6 175 7 166 7 251 #&#x8D77;&#x59CB;&#x4F4D;&#x7F6E; &#x7B97;&#x6CD5;&#x5206;&#x6790;&#x2003;&#x2003;&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;&#x7B97;&#x6CD5;&#x662F;1957&#x5E74;&#x7531;Robert C. Prim(&#x666E;&#x91CC;&#x59C6;)&#x63D0;&#x51FA;&#x7684;&#xFF0C;&#x548C;dijkstra&#x7B97;&#x6CD5;&#x7C7B;&#x4F3C;&#xFF0C;&#x4ECE;&#x8D77;&#x59CB;&#x70B9;&#x5F00;&#x59CB;&#xFF0C;&#x9010;&#x6E10;&#x589E;&#x52A0;&#x7ED3;&#x70B9;&#x6570;&#xFF0C;&#x4F9D;&#x6B21;&#x6C42;&#x51FA;&#x6BCF;&#x4E00;&#x6B65;&#x7684;&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;&#xFF0C;&#x76F4;&#x5230;&#x5305;&#x542B;&#x6240;&#x6709;&#x7ED3;&#x70B9;&#x3002;&#x2003;&#x2003;&#x9996;&#x5148;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x5217;&#x8868;S&#xFF0C;&#x4EE3;&#x8868;&#x5DF2;&#x7ECF;&#x5305;&#x542B;&#x7684;&#x7ED3;&#x70B9;&#x6570;&#xFF0C;&#x521D;&#x59CB;&#x503C;&#x4E3A;&#x7A7A;&#x3002;S&#x4E2D;&#x7684;&#x7ED3;&#x70B9;&#xFF0C;&#x4EE3;&#x8868;&#x4ECE;&#x6E90;&#x70B9;&#x5230;&#x8BE5;&#x70B9;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x5DF2;&#x786E;&#x5B9A;&#x3002;&#x5217;&#x8868;V,&#x4EE3;&#x8868;&#x6CA1;&#x6709;&#x5305;&#x542B;&#x7684;&#x7ED3;&#x70B9;&#x6570;&#xFF0C;&#x521D;&#x59CB;&#x503C;&#x4E3A;&#x5168;&#x90E8;&#x7ED3;&#x70B9;&#x3002;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;cost&#xFF0C;&#x5B58;&#x653E;&#x4ECE;V&#x4E2D;&#x7ED3;&#x70B9;&#x5230;S&#x4E2D;&#x6700;&#x8FD1;&#x90BB;&#x70B9;&#x7684;&#x8DDD;&#x79BB;&#xFF0C;&#x7136;&#x540E;&#x4ECE;&#x8FD9;&#x4E9B;&#x8DDD;&#x79BB;&#x4E2D;&#x5BFB;&#x627E;&#x6700;&#x77ED;&#x7684;&#x8DDD;&#x79BB;(&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;)&#x3002;&#x5047;&#x5982;&#x627E;&#x5230;&#x67D0;&#x4E00;&#x70B9;i&#xFF0C;&#x5C06;i&#x52A0;&#x5165;S&#x4E2D;&#xFF0C;&#x8BF4;&#x660E;&#x6B64;&#x65F6;S&#x662F;&#x6700;&#x5C0F;&#x7684;&#x751F;&#x6210;&#x6811;&#xFF0C;&#x5E76;&#x5C06;i&#x4ECE;V&#x4E2D;&#x5254;&#x9664;&#x3002;&#x66F4;&#x65B0;V&#x4E2D;&#x5176;&#x4F59;&#x7684;&#x7ED3;&#x70B9;&#x901A;&#x8FC7;i&#x7ED3;&#x70B9;&#x5230;&#x8FBE;S&#x4E2D;&#x7ED3;&#x70B9;&#x7684;&#x6700;&#x8FD1;&#x90BB;&#x7684;&#x8DEF;&#x5F84;&#x3002; &#x6D41;&#x7A0B;&#x56FE; python&#x4EE3;&#x7801;&#x5B9E;&#x6218;123456789101112131415161718192021222324252627282930import sysprint(&apos;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x6570;&#x548C;&#x8FB9;&#x6570;&apos;)for line in sys.stdin: num_node, num_side = [int(x) for x in line.strip().split()] map_node = [[65535*(i!=j) for i in range(num_node + 1)] for j in range(num_node + 1)] print(&apos;&#x8F93;&#x5165;&#x7ED3;&#x70B9;&#x53CA;&#x4E4B;&#x95F4;&#x7684;&#x8FB9;&#x503C;&apos;) for i in range(num_side): begin, end, weight = [int(x) for x in sys.stdin.readline().strip().split()] map_node[begin][end], map_node[end][begin] = weight, weight print(&apos;&#x8BF7;&#x8F93;&#x5165;&#x8D77;&#x59CB;&#x7ED3;&#x70B9;&apos;) begin_node = int(sys.stdin.readline().strip().split()[0]) un_used, low_cost, close_node = list(range(num_node + 1)), [0 | x for x in map_node[begin_node]], [0 for i in range(num_node + 1)] while len(un_used) &gt; 1: tmp_loc, tmp_length = 0, 65535 for i in un_used[1:]: tmp_loc, tmp_length = [i, low_cost[i]] if low_cost[i] &lt; tmp_length else [tmp_loc, tmp_length] if tmp_loc == 0: break un_used.remove(tmp_loc) for i in un_used[1:]: low_cost[i], close_node[i] = [map_node[tmp_loc][i], tmp_loc] if map_node[tmp_loc][i] &lt; low_cost[i] else [low_cost[i], close_node[i]] if len(un_used) &gt; 1: print(&apos;&#x65E0;&#x6CD5;&#x5C06;&#x6240;&#x6709;&#x7684;&#x8FB9;&#x8FDE;&#x63A5;&apos;) else: for i in range(1,len(close_node)): if i == begin_node: continue print(str(begin_node) + &apos;-&gt;&apos; + str(i)) if close_node[i] == 0 else print(str(close_node[i]) + &apos;-&gt;&apos; + str(i)) print(&apos;&#x6700;&#x5C0F;&#x7684;&#x82B1;&#x8D39;&#x4E3A;:&apos; + str(sum(low_cost[1:]))) &#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x7B97;&#x6CD5;&#x603B;&#x7ED3;&#x2003;&#x2003;&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;&#x76F8;&#x5BF9;&#x7B80;&#x5355;&#xFF0C;&#x4EE3;&#x7801;&#x6613;&#x4E8E;&#x5B9E;&#x73B0;&#x3002;&#x4F46;&#x662F;&#x7531;&#x4E8E;&#x5176;&#x53EA;&#x5173;&#x6CE8;&#x4E8E;&#x5F53;&#x524D;&#x7684;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x5F88;&#x96BE;&#x5F97;&#x5230;&#x5168;&#x5C40;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x4E0D;&#x7B26;&#x5408;&#x4EBA;&#x7C7B;&#x7684;&#x601D;&#x7EF4;&#x4E60;&#x60EF;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x65E5;&#x5E38;&#x751F;&#x6D3B;&#x4E2D;&#xFF0C;&#x5F88;&#x5C11;&#x89C1;&#x5230;&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;&#x5904;&#x7406;&#x7684;&#x95EE;&#x9898;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>计算机基础知识</category>
        <category>常用算法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LMSE(Least Mean Square Error)]]></title>
    <url>%2F2019%2F07%2F05%2Fclassfication%20LMSE%2F</url>
    <content type="text"><![CDATA[&#x6700;&#x5C0F;&#x5E73;&#x65B9;&#x8BEF;&#x5DEE; &#x539F;&#x7406;&#x89E3;&#x8BFB;&#x2003;&#x2003;&#x6700;&#x5C0F;&#x5E73;&#x65B9;&#x8BEF;&#x5DEE;(LMSE):&#x7531;Ho-kashyap&#x63D0;&#x51FA;&#xFF0C;&#x6545;&#x53C8;&#x79F0;&#x4E3A;HK&#x7B97;&#x6CD5;.&#x662F;&#x4E00;&#x79CD;&#x57FA;&#x672C;&#x5206;&#x7C7B;&#x65B9;&#x6CD5;&#xFF0C;&#x7ED9;&#x5B9A;&#x6D4B;&#x8BD5;&#x5B9E;&#x4F8B;&#xFF0C;&#x57FA;&#x4E8E;&#x67D0;&#x79CD;&#x8DDD;&#x79BB;&#x5EA6;&#x91CF;&#x627E;&#x51FA;&#x8BAD;&#x7EC3;&#x96C6;&#x4E2D;&#x4E0E;&#x5176;&#x6700;&#x9760;&#x8FD1;&#x7684;k&#x4E2A;&#x5B9E;&#x4F8B;&#x70B9;&#xFF0C;&#x7136;&#x540E;&#x57FA;&#x4E8E;&#x8FD9;k&#x4E2A;&#x6700;&#x8FD1;&#x90BB;&#x7684;&#x4FE1;&#x606F;&#x4F7F;&#x7528;&#x6295;&#x7968;&#x6CD5;&#xFF0C;&#x5373;&#x9009;&#x62E9;&#x8FD9;k&#x4E2A;&#x5B9E;&#x4F8B;&#x4E2D;&#x51FA;&#x73B0;&#x6700;&#x591A;&#x7684;&#x6807;&#x8BB0;&#x7C7B;&#x522B;&#x4F5C;&#x4E3A;&#x5206;&#x7C7B;&#x7ED3;&#x679C;&#x3002; &#x6838;&#x5FC3;&#x601D;&#x60F3;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x2003;&#x2003;1. &#x6B27;&#x5F0F;&#x8DDD;&#x79BB;(Euclidean Distance)$$L_2(x_i,x_j)=\sqrt{\displaystyle \sum_{k=1}^n ({x_i}^{(k)}-{x_j}^{(k)})^2}$$ &#x2003;&#x2003;2. &#x66FC;&#x54C8;&#x987F;&#x8DDD;&#x79BB;(Manhattan distance)$$L_1(x_i,x_j)=\displaystyle \sum_{k=1}^n \lvert{x_i}^{(k)}-{x_j}^{(k)} \rvert$$ &#x2003;&#x2003;3.&#x4F59;&#x5F26;&#x8DDD;&#x79BB;(Cosine Distance)$$L_{cos}(x_i,x_j)=1-\frac{x_i \cdot x_j}{\lVert x_i \rVert_2 \ \lVert x_j \rVert_2}$$ K&#x503C;&#x7684;&#x9009;&#x62E9;&#x2003;&#x2003;K&#x503C;&#x7684;&#x9009;&#x62E9;&#x4F1A;&#x5BF9;K&#x8FD1;&#x90BB;&#x6CD5;&#x7684;&#x7ED3;&#x679C;&#x4EA7;&#x751F;&#x91CD;&#x5927;&#x5F71;&#x54CD;&#xFF0C;&#x5728;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;k&#x503C;&#x4E00;&#x822C;&#x53D6;&#x4E00;&#x4E2A;&#x6BD4;&#x8F83;&#x5C0F;&#x7684;&#x6570;&#x503C;&#xFF0C;&#x901A;&#x5E38;&#x91C7;&#x7528;&#x4EA4;&#x53C9;&#x9A8C;&#x8BC1;&#x6CD5;&#x6765;&#x9009;&#x53D6;&#x6700;&#x4F18;&#x7684;k&#x503C;&#x3002;&#x2003;&#x2003;K=1&#x65F6;K&#x8FD1;&#x90BB;&#x7B97;&#x6CD5;&#x9000;&#x5316;&#x6210;&#x6700;&#x8FD1;&#x90BB;&#xFF0C;&#x5373;&#x6570;&#x636E;&#x7684;&#x7C7B;&#x522B;&#x4E3A;&#x8DDD;&#x79BB;&#x6700;&#x8FD1;&#x7684;&#x6837;&#x672C;&#x7684;&#x7C7B;&#x522B;&#x3002; &#x7B97;&#x6CD5;&#x6D41;&#x7A0B; &#x4EE3;&#x7801;&#x5B9E;&#x6218;KNN_main.m123456789101112131415161718192021222324252627282930313233343536clear;clc;close all;%&#x7C7B;&#x522B;&#x6570;&#x76EE;&#xFF0C;&#x8BF7;&#x8F93;&#x5165;&#x5927;&#x4E8E;1&#x7684;&#x6570;class_num=2;%k&#x8FD1;&#x90BB;&#x6570;&#x76EE;knn=3;%&#x8BAD;&#x7EC3;&#x96C6;&#x6837;&#x672C;train_x=[0.7,0.8,0.1,0.4,0.2;... 0.5,0.6,0.1,0.8,0.2];train_y=[1,1,2,1,2];%&#x7279;&#x5F81;&#x6570;&#x76EE;feat_num=size(train_x,1);%&#x6D4B;&#x8BD5;&#x96C6;&#x6837;&#x672C;test_x=[rand(1,50);rand(1,50)];%&#x8BAD;&#x7EC3;&#x96C6;&#x6837;&#x672C;&#x6570;train_num=size(train_x,2);%&#x6D4B;&#x8BD5;&#x96C6;&#x6837;&#x672C;&#x6570;test_num=size(test_x,2);%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1train_x_scale=zeros(size(train_x));test_x_scale=zeros(size(test_x));for i=1:feat_num train_x_scale(i,:)=(train_x(i,:)-min(train_x(i,:)))/(max(train_x(i,:))-min(train_x(i,:))); test_x_scale(i,:)=(test_x(i,:)-min(train_x(i,:)))/(max(train_x(i,:))-min(train_x(i,:)));end%&#x5982;&#x679C;knn&#x5927;&#x4E8E;&#x6837;&#x672C;&#x6570;&#xFF0C;&#x5219;&#x65E0;&#x6CD5;&#x5224;&#x522B;if knn&gt;train_num disp(&apos;Error&apos;);else test_y=KNN_classify(train_x_scale,train_y,test_x_scale,train_num,test_num,knn); %&#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A; if feat_num==2 KNN_display(train_x,train_y,test_x,test_y,train_num,test_num,class_num); else disp(&apos;The Feature Is Not Two-Dimensional&apos;); endend KNN_classify.m123456789101112function test_y=KNN_classify(train_x_scale,train_y,test_x_scale,train_num,test_num,knn)test_y=zeros(1,test_num);distance=zeros(test_num,train_num);for i=1:test_num %distance(i,j)&#x4EE3;&#x8868;&#x7B2C;i&#x4E2A;&#x6D4B;&#x8BD5;&#x96C6;&#x5230;&#x7B2C;j&#x4E2A;&#x8BAD;&#x7EC3;&#x96C6;&#x7684;&#x8DDD;&#x79BB; distance(i,:)=sum((train_x_scale-repmat(test_x_scale(:,i),1,train_num)).^2); temp=sort(distance(i,:)); %&#x627E;&#x5230;&#x6700;&#x8FD1;&#x7684;knn&#x4E2A;&#x6570;&#x636E; tem=tabulate(train_y(distance(i,:)&lt;=temp(knn))); %&#x627E;&#x5230;&#x6700;&#x8FD1;&#x7684;&#x6570;&#x636E;&#x4E2D;&#x6700;&#x591A;&#x7684;&#x7C7B;&#x522B; test_y(i)=tem(find(tem(:,2)==max(tem(:,2)),1),1);end KNN_display.m123456789101112131415function KNN_display(train_x,train_y,test_x,test_y,train_num,test_num,class_num)hold on;color_bar=zeros(class_num,3);for i=1:class_num color_bar(i,:)=[rand(1),rand(1),rand(1)];end%&#x753B;&#x51FA;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#xFF0C;&#x7528;*&#x8868;&#x793A;for i=1:train_num plot(train_x(1,i),train_x(2,i),&apos;color&apos;,color_bar(train_y(i),:),&apos;marker&apos;,&apos;*&apos;);end%&#x753B;&#x51FA;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#xFF0C;&#x7528;o&#x8868;&#x793A;for j=1:test_num plot(test_x(1,j),test_x(2,j),&apos;color&apos;,color_bar(test_y(j),:),&apos;marker&apos;,&apos;o&apos;);endhold off; &#x5B9E;&#x9A8C;&#x7ED3;&#x679C; KNN&#x4F18;&#x7F3A;&#x70B9; &#x4F18;&#x70B9;&#xFF1A; &#x65E0;&#x9700;&#x53C2;&#x6570;&#x4F30;&#x8BA1;&#xFF0C;&#x65E0;&#x9700;&#x8BAD;&#x7EC3; &#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x6613;&#x4E8E;&#x7406;&#x89E3;&#x548C;&#x5B9E;&#x73B0; &#x9002;&#x5408;&#x4E8E;&#x5BF9;&#x7A00;&#x6709;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x5206;&#x7C7B; &#x7279;&#x522B;&#x9002;&#x5408;&#x4E8E;&#x591A;&#x5206;&#x7C7B;&#x95EE;&#x9898;&#xFF0C;KNN&#x7684;&#x8868;&#x73B0;&#x8D85;&#x8FC7;SVM &#x7F3A;&#x70B9;&#xFF1A; &#x65E0;&#x6CD5;&#x7ED9;&#x51FA;&#x5206;&#x7C7B;&#x89C4;&#x5219; &#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x7279;&#x5F81;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x9009;&#x62E9;&#x548C;&#x8861;&#x91CF;&#x4E0D;&#x51C6;&#x786E; &#x8BA1;&#x7B97;&#x91CF;&#x8F83;&#x5927;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x6837;&#x672C;&#x90FD;&#x9700;&#x8981;&#x8BA1;&#x7B97;&#x4E0E;&#x5176;&#x4ED6;&#x6837;&#x672C;&#x7684;&#x8DDD;&#x79BB; &#x6837;&#x672C;&#x4E0D;&#x5E73;&#x8861;&#x65F6;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x4E00;&#x7C7B;&#x6837;&#x672C;&#x591A;&#xFF0C;&#x5176;&#x4ED6;&#x7C7B;&#x6837;&#x672C;&#x5C11;&#x65F6;&#x4F1A;&#x4EA7;&#x751F;&#x4E25;&#x91CD;&#x7684;&#x95EE;&#x9898; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>机器学习</category>
        <category>有监督学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[KNN(K Nearest Neighbor)]]></title>
    <url>%2F2019%2F07%2F05%2Fclassfication%20KNN%2F</url>
    <content type="text"><![CDATA[K&#x8FD1;&#x90BB; &#x539F;&#x7406;&#x89E3;&#x8BFB;&#x2003;&#x2003;k&#x8FD1;&#x90BB;&#x6CD5;(kNN)&#x662F;&#x4E00;&#x79CD;&#x57FA;&#x672C;&#x5206;&#x7C7B;&#x65B9;&#x6CD5;&#xFF0C;&#x7ED9;&#x5B9A;&#x6D4B;&#x8BD5;&#x5B9E;&#x4F8B;&#xFF0C;&#x57FA;&#x4E8E;&#x67D0;&#x79CD;&#x8DDD;&#x79BB;&#x5EA6;&#x91CF;&#x627E;&#x51FA;&#x8BAD;&#x7EC3;&#x96C6;&#x4E2D;&#x4E0E;&#x5176;&#x6700;&#x9760;&#x8FD1;&#x7684;k&#x4E2A;&#x5B9E;&#x4F8B;&#x70B9;&#xFF0C;&#x7136;&#x540E;&#x57FA;&#x4E8E;&#x8FD9;k&#x4E2A;&#x6700;&#x8FD1;&#x90BB;&#x7684;&#x4FE1;&#x606F;&#x4F7F;&#x7528;&#x6295;&#x7968;&#x6CD5;&#xFF0C;&#x5373;&#x9009;&#x62E9;&#x8FD9;k&#x4E2A;&#x5B9E;&#x4F8B;&#x4E2D;&#x51FA;&#x73B0;&#x6700;&#x591A;&#x7684;&#x6807;&#x8BB0;&#x7C7B;&#x522B;&#x4F5C;&#x4E3A;&#x5206;&#x7C7B;&#x7ED3;&#x679C;&#x3002; &#x6838;&#x5FC3;&#x601D;&#x60F3;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x2003;&#x2003;1. &#x6B27;&#x5F0F;&#x8DDD;&#x79BB;(Euclidean Distance)$$L_2(x_i,x_j)=\sqrt{\displaystyle \sum_{k=1}^n ({x_i}^{(k)}-{x_j}^{(k)})^2}$$ &#x2003;&#x2003;2. &#x66FC;&#x54C8;&#x987F;&#x8DDD;&#x79BB;(Manhattan distance)$$L_1(x_i,x_j)=\displaystyle \sum_{k=1}^n \lvert{x_i}^{(k)}-{x_j}^{(k)} \rvert$$ &#x2003;&#x2003;3.&#x4F59;&#x5F26;&#x8DDD;&#x79BB;(Cosine Distance)$$L_{cos}(x_i,x_j)=1-\frac{x_i \cdot x_j}{\lVert x_i \rVert_2 \ \lVert x_j \rVert_2}$$ K&#x503C;&#x7684;&#x9009;&#x62E9;&#x2003;&#x2003;K&#x503C;&#x7684;&#x9009;&#x62E9;&#x4F1A;&#x5BF9;K&#x8FD1;&#x90BB;&#x6CD5;&#x7684;&#x7ED3;&#x679C;&#x4EA7;&#x751F;&#x91CD;&#x5927;&#x5F71;&#x54CD;&#xFF0C;&#x5728;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;k&#x503C;&#x4E00;&#x822C;&#x53D6;&#x4E00;&#x4E2A;&#x6BD4;&#x8F83;&#x5C0F;&#x7684;&#x6570;&#x503C;&#xFF0C;&#x901A;&#x5E38;&#x91C7;&#x7528;&#x4EA4;&#x53C9;&#x9A8C;&#x8BC1;&#x6CD5;&#x6765;&#x9009;&#x53D6;&#x6700;&#x4F18;&#x7684;k&#x503C;&#x3002;&#x2003;&#x2003;K=1&#x65F6;K&#x8FD1;&#x90BB;&#x7B97;&#x6CD5;&#x9000;&#x5316;&#x6210;&#x6700;&#x8FD1;&#x90BB;&#xFF0C;&#x5373;&#x6570;&#x636E;&#x7684;&#x7C7B;&#x522B;&#x4E3A;&#x8DDD;&#x79BB;&#x6700;&#x8FD1;&#x7684;&#x6837;&#x672C;&#x7684;&#x7C7B;&#x522B;&#x3002; &#x7B97;&#x6CD5;&#x6D41;&#x7A0B; &#x4EE3;&#x7801;&#x5B9E;&#x6218;KNN_main.m123456789101112131415161718192021222324252627282930313233343536clear;clc;close all;%&#x7C7B;&#x522B;&#x6570;&#x76EE;&#xFF0C;&#x8BF7;&#x8F93;&#x5165;&#x5927;&#x4E8E;1&#x7684;&#x6570;class_num=2;%k&#x8FD1;&#x90BB;&#x6570;&#x76EE;knn=3;%&#x8BAD;&#x7EC3;&#x96C6;&#x6837;&#x672C;train_x=[0.7,0.8,0.1,0.4,0.2;... 0.5,0.6,0.1,0.8,0.2];train_y=[1,1,2,1,2];%&#x7279;&#x5F81;&#x6570;&#x76EE;feat_num=size(train_x,1);%&#x6D4B;&#x8BD5;&#x96C6;&#x6837;&#x672C;test_x=[rand(1,50);rand(1,50)];%&#x8BAD;&#x7EC3;&#x96C6;&#x6837;&#x672C;&#x6570;train_num=size(train_x,2);%&#x6D4B;&#x8BD5;&#x96C6;&#x6837;&#x672C;&#x6570;test_num=size(test_x,2);%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1train_x_scale=zeros(size(train_x));test_x_scale=zeros(size(test_x));for i=1:feat_num train_x_scale(i,:)=(train_x(i,:)-min(train_x(i,:)))/(max(train_x(i,:))-min(train_x(i,:))); test_x_scale(i,:)=(test_x(i,:)-min(train_x(i,:)))/(max(train_x(i,:))-min(train_x(i,:)));end%&#x5982;&#x679C;knn&#x5927;&#x4E8E;&#x6837;&#x672C;&#x6570;&#xFF0C;&#x5219;&#x65E0;&#x6CD5;&#x5224;&#x522B;if knn&gt;train_num disp(&apos;Error&apos;);else test_y=KNN_classify(train_x_scale,train_y,test_x_scale,train_num,test_num,knn); %&#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A; if feat_num==2 KNN_display(train_x,train_y,test_x,test_y,train_num,test_num,class_num); else disp(&apos;The Feature Is Not Two-Dimensional&apos;); endend KNN_classify.m123456789101112function test_y=KNN_classify(train_x_scale,train_y,test_x_scale,train_num,test_num,knn)test_y=zeros(1,test_num);distance=zeros(test_num,train_num);for i=1:test_num %distance(i,j)&#x4EE3;&#x8868;&#x7B2C;i&#x4E2A;&#x6D4B;&#x8BD5;&#x96C6;&#x5230;&#x7B2C;j&#x4E2A;&#x8BAD;&#x7EC3;&#x96C6;&#x7684;&#x8DDD;&#x79BB; distance(i,:)=sum((train_x_scale-repmat(test_x_scale(:,i),1,train_num)).^2); temp=sort(distance(i,:)); %&#x627E;&#x5230;&#x6700;&#x8FD1;&#x7684;knn&#x4E2A;&#x6570;&#x636E; tem=tabulate(train_y(distance(i,:)&lt;=temp(knn))); %&#x627E;&#x5230;&#x6700;&#x8FD1;&#x7684;&#x6570;&#x636E;&#x4E2D;&#x6700;&#x591A;&#x7684;&#x7C7B;&#x522B; test_y(i)=tem(find(tem(:,2)==max(tem(:,2)),1),1);end KNN_display.m123456789101112131415function KNN_display(train_x,train_y,test_x,test_y,train_num,test_num,class_num)hold on;color_bar=zeros(class_num,3);for i=1:class_num color_bar(i,:)=[rand(1),rand(1),rand(1)];end%&#x753B;&#x51FA;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#xFF0C;&#x7528;*&#x8868;&#x793A;for i=1:train_num plot(train_x(1,i),train_x(2,i),&apos;color&apos;,color_bar(train_y(i),:),&apos;marker&apos;,&apos;*&apos;);end%&#x753B;&#x51FA;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#xFF0C;&#x7528;o&#x8868;&#x793A;for j=1:test_num plot(test_x(1,j),test_x(2,j),&apos;color&apos;,color_bar(test_y(j),:),&apos;marker&apos;,&apos;o&apos;);endhold off; &#x5B9E;&#x9A8C;&#x7ED3;&#x679C; KNN&#x4F18;&#x7F3A;&#x70B9; &#x4F18;&#x70B9;&#xFF1A; &#x65E0;&#x9700;&#x53C2;&#x6570;&#x4F30;&#x8BA1;&#xFF0C;&#x65E0;&#x9700;&#x8BAD;&#x7EC3; &#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x6613;&#x4E8E;&#x7406;&#x89E3;&#x548C;&#x5B9E;&#x73B0; &#x9002;&#x5408;&#x4E8E;&#x5BF9;&#x7A00;&#x6709;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x5206;&#x7C7B; &#x7279;&#x522B;&#x9002;&#x5408;&#x4E8E;&#x591A;&#x5206;&#x7C7B;&#x95EE;&#x9898;&#xFF0C;KNN&#x7684;&#x8868;&#x73B0;&#x8D85;&#x8FC7;SVM &#x7F3A;&#x70B9;&#xFF1A; &#x65E0;&#x6CD5;&#x7ED9;&#x51FA;&#x5206;&#x7C7B;&#x89C4;&#x5219; &#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x7279;&#x5F81;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x9009;&#x62E9;&#x548C;&#x8861;&#x91CF;&#x4E0D;&#x51C6;&#x786E; &#x8BA1;&#x7B97;&#x91CF;&#x8F83;&#x5927;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x6837;&#x672C;&#x90FD;&#x9700;&#x8981;&#x8BA1;&#x7B97;&#x4E0E;&#x5176;&#x4ED6;&#x6837;&#x672C;&#x7684;&#x8DDD;&#x79BB; &#x6837;&#x672C;&#x4E0D;&#x5E73;&#x8861;&#x65F6;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x4E00;&#x7C7B;&#x6837;&#x672C;&#x591A;&#xFF0C;&#x5176;&#x4ED6;&#x7C7B;&#x6837;&#x672C;&#x5C11;&#x65F6;&#x4F1A;&#x4EA7;&#x751F;&#x4E25;&#x91CD;&#x7684;&#x95EE;&#x9898; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>机器学习</category>
        <category>有监督学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[决策树(Decision Tree)]]></title>
    <url>%2F2019%2F07%2F03%2Fclassification%20DT%2F</url>
    <content type="text"><![CDATA[&#x51B3;&#x7B56;&#x6811; &#x539F;&#x7406;&#x89E3;&#x8BFB;&#x2003;&#x2003;&#x51B3;&#x7B56;&#x6811;(Decision Tree):&#x662F;&#x5728;&#x5DF2;&#x77E5;&#x5404;&#x79CD;&#x60C5;&#x51B5;&#x53D1;&#x751F;&#x6982;&#x7387;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x76F4;&#x89C2;&#x8FD0;&#x7528;&#x6982;&#x7387;&#x5206;&#x6790;&#x7684;&#x4E00;&#x79CD;&#x56FE;&#x89E3;&#x6CD5;&#x3002;&#x51B3;&#x7B56;&#x6811;&#x662F;&#x4E00;&#x79CD;&#x6811;&#x5F62;&#x7ED3;&#x6784;&#xFF0C;&#x5176;&#x4E2D;&#x6BCF;&#x4E2A;&#x5185;&#x90E8;&#x8282;&#x70B9;&#x8868;&#x793A;&#x4E00;&#x4E2A;&#x5C5E;&#x6027;&#x4E0A;&#x7684;&#x6D4B;&#x8BD5;&#xFF0C;&#x6BCF;&#x4E2A;&#x5206;&#x652F;&#x4EE3;&#x8868;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x8F93;&#x51FA;&#xFF0C;&#x6BCF;&#x4E2A;&#x53F6;&#x8282;&#x70B9;&#x4EE3;&#x8868;&#x4E00;&#x79CD;&#x7C7B;&#x522B;&#x3002;&#x7531;&#x4E8E;&#x8FD9;&#x79CD;&#x51B3;&#x7B56;&#x5206;&#x652F;&#x753B;&#x6210;&#x56FE;&#x5F62;&#x5F88;&#x50CF;&#x4E00;&#x68F5;&#x6811;&#x7684;&#x679D;&#x5E72;&#xFF0C;&#x6545;&#x79F0;&#x51B3;&#x7B56;&#x6811;&#x3002; &#x6838;&#x5FC3;&#x601D;&#x60F3;&#x6811;&#x7684;&#x6784;&#x5EFA; &#x6B65;&#x9AA4;1&#xFF1A;&#x5C06;&#x6240;&#x6709;&#x7684;&#x6570;&#x636E;&#x770B;&#x6210;&#x662F;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF08;&#x6839;&#x8282;&#x70B9;&#xFF09;&#xFF0C;&#x8FDB;&#x5165;&#x6B65;&#x9AA4;2 &#x6B65;&#x9AA4;2&#xFF1A;&#x6839;&#x636E;&#x5212;&#x5206;&#x51C6;&#x5219;&#xFF0C;&#x4ECE;&#x6240;&#x6709;&#x5C5E;&#x6027;&#x4E2D;&#x6311;&#x9009;&#x4E00;&#x4E2A;&#x5BF9;&#x8282;&#x70B9;&#x8FDB;&#x884C;&#x5206;&#x5272;&#xFF0C;&#x8FDB;&#x5165;&#x6B65;&#x9AA4;3 &#x6B65;&#x9AA4;3&#xFF1A;&#x751F;&#x6210;&#x82E5;&#x5E72;&#x4E2A;&#x5B50;&#x8282;&#x70B9;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x5B50;&#x8282;&#x70B9;&#x8FDB;&#x884C;&#x5224;&#x65AD;&#xFF0C;&#x5982;&#x679C;&#x6EE1;&#x8DB3;&#x505C;&#x6B62;&#x5206;&#x88C2;&#x7684;&#x6761;&#x4EF6;&#xFF0C;&#x8FDB;&#x5165;&#x6B65;&#x9AA4;4&#xFF1B;&#x5426;&#x5219;&#xFF0C;&#x8FDB;&#x5165;&#x6B65;&#x9AA4;2 &#x6B65;&#x9AA4;4&#xFF1A;&#x8BBE;&#x7F6E;&#x8BE5;&#x8282;&#x70B9;&#x662F;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#xFF0C;&#x5176;&#x8F93;&#x51FA;&#x7684;&#x7ED3;&#x679C;&#x4E3A;&#x8BE5;&#x8282;&#x70B9;&#x6570;&#x91CF;&#x5360;&#x6BD4;&#x6700;&#x5927;&#x7684;&#x7C7B;&#x522B; &#x5212;&#x5206;&#x51C6;&#x5219;&#x4FE1;&#x606F;&#x71B5;&#x4FE1;&#x606F;&#x71B5;&#xFF1A;&#x5047;&#x8BBE;&#x6837;&#x672C;&#x96C6;&#x5408;D&#x4E2D;&#x7B2C;k&#x7C7B;&#x6837;&#x672C;&#x6240;&#x5360;&#x7684;&#x6BD4;&#x4F8B;&#x4E3A;$p_k(k=1,2,\ldots,y)$&#xFF0C;&#x5219;D&#x7684;&#x4FE1;&#x606F;&#x71B5;&#x5B9A;&#x4E49;&#x4E3A;&#xFF1A;$$Ent(D)=-\displaystyle \sum_{k=1}^y p_klog_2p_k$$Ent(D)&#x7684;&#x503C;&#x8D8A;&#x5C0F;&#xFF0C;&#x5219;D&#x7684;&#x7EAF;&#x5EA6;&#x8D8A;&#x9AD8;&#x3002; &#x4FE1;&#x606F;&#x589E;&#x76CA;(ID3)&#x5047;&#x8BBE;&#x79BB;&#x6563;&#x5C5E;&#x6027;a&#x6709;V&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x53D6;&#x503C;$\lbrace a^1,a^2,\ldots,a^V \rbrace$&#xFF0C;&#x82E5;&#x4F7F;&#x7528;a&#x6765;&#x5BF9;&#x6837;&#x672C;&#x96C6;D&#x8FDB;&#x884C;&#x5212;&#x5206;&#xFF0C;&#x5219;&#x4F1A;&#x4EA7;&#x751F;V&#x4E2A;&#x5206;&#x652F;&#x8282;&#x70B9;&#xFF0C;&#x5176;&#x4E2D;&#x7B2C;v&#x4E2A;&#x5206;&#x652F;&#x8282;&#x70B9;&#x5305;&#x542B;&#x4E86;D&#x4E2D;&#x6240;&#x6709;&#x5728;&#x5C5E;&#x6027;a&#x4E0A;&#x53D6;&#x503C;&#x4E3A;$a^v$&#x7684;&#x6837;&#x672C;&#xFF0C;&#x8BB0;&#x4E3A;$D^v$&#x3002;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8BA1;&#x7B97;&#x51FA;$D^v$&#x7684;&#x4FE1;&#x606F;&#x71B5;&#xFF0C;&#x518D;&#x7ED9;&#x5206;&#x652F;&#x7ED3;&#x70B9;&#x8D4B;&#x4E88;&#x6743;&#x91CD;$\frac{\left| D^v \right|}{\left| D \right|}$&#x5219;&#x53EF;&#x4EE5;&#x8BA1;&#x7B97;&#x51FA;&#x7528;&#x5C5E;&#x6027;a&#x5BF9;&#x6837;&#x672C;&#x96C6;D&#x8FDB;&#x884C;&#x5212;&#x5206;&#x6240;&#x83B7;&#x5F97;&#x7684;&#x201D;&#x4FE1;&#x606F;&#x589E;&#x76CA;&#x201D;&#x3002;$$Gain(D,a)=Ent(D)-\displaystyle \sum_{v=1}^V \frac{\left| D^v \right|}{\left| D \right|}Ent(D^v)$$&#x4E00;&#x822C;&#x800C;&#x8A00;&#xFF0C;&#x4FE1;&#x606F;&#x589E;&#x76CA;&#x8D8A;&#x5927;&#xFF0C;&#x5219;&#x610F;&#x5473;&#x7740;&#x4F7F;&#x7528;&#x5C5E;&#x6027;a&#x6765;&#x8FDB;&#x884C;&#x5212;&#x5206;&#x6240;&#x83B7;&#x5F97;&#x7684;&#x7EAF;&#x5EA6;&#x63D0;&#x5347;&#x8D8A;&#x5927;&#xFF0C;ID3&#x51B3;&#x7B56;&#x6811;&#x5B66;&#x4E60;&#x7B97;&#x6CD5;&#x5C31;&#x662F;&#x4EE5;&#x4FE1;&#x606F;&#x589E;&#x76CA;&#x4E3A;&#x51C6;&#x5219;&#x6765;&#x5212;&#x5206;&#x5C5E;&#x6027;&#x3002; &#x589E;&#x76CA;&#x7387;(C4.5)&#x5B9E;&#x9645;&#x4E0A;&#xFF0C;&#x4FE1;&#x606F;&#x589E;&#x76CA;&#x51C6;&#x5219;&#x5BF9;&#x53EF;&#x53D6;&#x503C;&#x6570;&#x76EE;&#x8F83;&#x591A;&#x7684;&#x5C5E;&#x6027;&#x6709;&#x6240;&#x504F;&#x597D;&#xFF0C;&#x4E3A;&#x51CF;&#x5C11;&#x8FD9;&#x79CD;&#x504F;&#x597D;&#x53EF;&#x80FD;&#x5E26;&#x6765;&#x7684;&#x4E0D;&#x5229;&#x5F71;&#x54CD;&#xFF0C;&#x8457;&#x540D;&#x7684;C4.5&#x51B3;&#x7B56;&#x6811;&#x7B97;&#x6CD5;&#x4E0D;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#x4FE1;&#x606F;&#x589E;&#x76CA;&#xFF0C;&#x800C;&#x662F;&#x4F7F;&#x7528;&#x201D;&#x589E;&#x76CA;&#x7387;&#x201D;&#x6765;&#x9009;&#x62E9;&#x6700;&#x4F18;&#x5212;&#x5206;&#x5C5E;&#x6027;&#x3002;&#x589E;&#x76CA;&#x7387;&#x5B9A;&#x4E49;&#x4E3A;$$Gain_ratio=\frac{Gain(D,a)}{IV(a)}$$$$IV(a)=-\displaystyle \sum_{v=1}^V \frac{\left| D^v \right|}{\left| D \right|} log_2 \frac{\left| D^v \right|}{\left| D \right|}$$&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x589E;&#x76CA;&#x7387;&#x51C6;&#x5219;&#x5BF9;&#x53EF;&#x53D6;&#x503C;&#x6570;&#x76EE;&#x8F83;&#x5C11;&#x7684;&#x5C5E;&#x6027;&#x6709;&#x6240;&#x504F;&#x597D;&#xFF0C;&#x56E0;&#x6B64;C4.5&#x7B97;&#x6CD5;&#x5148;&#x4ECE;&#x5019;&#x9009;&#x5212;&#x5206;&#x5C5E;&#x6027;&#x4E2D;&#x627E;&#x51FA;&#x4FE1;&#x606F;&#x589E;&#x76CA;&#x9AD8;&#x4E8E;&#x5E73;&#x5747;&#x6C34;&#x5E73;&#x7684;&#x5C5E;&#x6027;&#xFF0C;&#x518D;&#x4ECE;&#x4E2D;&#x9009;&#x62E9;&#x589E;&#x76CA;&#x7387;&#x6700;&#x9AD8;&#x7684;&#x3002; &#x57FA;&#x5C3C;&#x6307;&#x6570;(CART)&#x57FA;&#x5C3C;&#x6307;&#x6570;&#x53CD;&#x5E94;&#x4E86;&#x4ECE;&#x6570;&#x636E;&#x96C6;D&#x4E2D;&#x968F;&#x673A;&#x62BD;&#x53D6;&#x4E24;&#x4E2A;&#x6837;&#x672C;&#xFF0C;&#x5176;&#x7C7B;&#x522B;&#x6807;&#x8BB0;&#x4E0D;&#x4E00;&#x81F4;&#x7684;&#x6982;&#x7387;&#x3002;&#x56E0;&#x6B64;&#x57FA;&#x5C3C;&#x6307;&#x6570;&#x8D8A;&#x5C0F;&#xFF0C;&#x5219;&#x6570;&#x636E;&#x96C6;D&#x7684;&#x7EAF;&#x5EA6;&#x8D8A;&#x9AD8;&#x3002;$$Gini(D)=1-\displaystyle \sum_{k=1}^y {p_k}^2$$&#x5C5E;&#x6027;a&#x7684;&#x57FA;&#x5C3C;&#x6307;&#x6570;&#x5B9A;&#x4E49;&#x4E3A;$$Gini_index(D,a)=\displaystyle \sum_{v=1}^V \frac{\left| D^v \right|}{\left| D \right|} Gini(D^v)$$&#x5728;&#x9009;&#x62E9;&#x5C5E;&#x6027;&#x96C6;&#x5408;&#x65F6;&#xFF0C;&#x9009;&#x62E9;&#x4F7F;&#x5212;&#x5206;&#x540E;&#x57FA;&#x5C3C;&#x6307;&#x6570;&#x6700;&#x5C0F;&#x7684;&#x5C5E;&#x6027;&#x4F5C;&#x4E3A;&#x6700;&#x4F18;&#x5212;&#x5206;&#x5C5E;&#x6027;&#x3002; &#x526A;&#x679D;&#x5904;&#x7406;&#x526A;&#x679D;(pruning)&#x662F;&#x51B3;&#x7B56;&#x6811;&#x5B66;&#x4E60;&#x7B97;&#x6CD5;&#x5BF9;&#x4ED8;&#x201D;&#x8FC7;&#x62DF;&#x5408;&#x201D;&#x7684;&#x4E3B;&#x8981;&#x624B;&#x6BB5;&#x3002;&#x51B3;&#x7B56;&#x6811;&#x526A;&#x679D;&#x7684;&#x57FA;&#x672C;&#x7B56;&#x7565;&#x6709;&#x201D;&#x9884;&#x526A;&#x679D;(prepruning)&#x201D;&#x548C;&#x201D;&#x540E;&#x526A;&#x679D;(postpruning)&#x201D;&#x3002; &#x9884;&#x526A;&#x679D;(prepruning)&#x9884;&#x526A;&#x679D;&#xFF1A;&#x662F;&#x5728;&#x51B3;&#x7B56;&#x6811;&#x751F;&#x957F;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E2A;&#x7ED3;&#x70B9;&#x5728;&#x5212;&#x5206;&#x524D;&#x5148;&#x8FDB;&#x884C;&#x4F30;&#x8BA1;&#xFF0C;&#x82E5;&#x5F53;&#x524D;&#x7ED3;&#x70B9;&#x7684;&#x5212;&#x5206;&#x4E0D;&#x80FD;&#x5E26;&#x6765;&#x51B3;&#x7B56;&#x6811;&#x6CDB;&#x5316;&#x6027;&#x80FD;&#x63D0;&#x5347;&#xFF0C;&#x5219;&#x505C;&#x6B62;&#x5212;&#x5206;&#x5E76;&#x5C06;&#x5F53;&#x524D;&#x7ED3;&#x70B9;&#x6807;&#x8BB0;&#x4E3A;&#x53F6;&#x5B50;&#x7ED3;&#x70B9;&#x3002;&#x9884;&#x526A;&#x679D;&#x4F18;&#x70B9;&#xFF1A; &#x964D;&#x4F4E;&#x8FC7;&#x62DF;&#x5408;&#x98CE;&#x9669; &#x663E;&#x8457;&#x51CF;&#x5C11;&#x51B3;&#x7B56;&#x6811;&#x7684;&#x8BAD;&#x7EC3;&#x65F6;&#x95F4;&#x5F00;&#x9500;&#x548C;&#x6D4B;&#x8BD5;&#x65F6;&#x95F4;&#x5F00;&#x9500;&#x9884;&#x526A;&#x679D;&#x7F3A;&#x70B9;&#xFF1A; &#x56E0;&#x4E3A;&#x201D;&#x8D2A;&#x5FC3;&#x201D;&#x672C;&#x8D28;&#xFF0C;&#x53EF;&#x80FD;&#x5E26;&#x6765;&#x6B20;&#x62DF;&#x5408;&#x7684;&#x98CE;&#x9669; &#x540E;&#x526A;&#x679D;(postpruning)&#x540E;&#x526A;&#x679D;&#xFF1A;&#x5148;&#x4ECE;&#x8BAD;&#x7EC3;&#x96C6;&#x751F;&#x6210;&#x4E00;&#x9897;&#x5B8C;&#x6574;&#x7684;&#x51B3;&#x7B56;&#x6811;&#xFF0C;&#x7136;&#x540E;&#x81EA;&#x5E95;&#x5411;&#x4E0A;&#x5730;&#x5BF9;&#x975E;&#x53F6;&#x7ED3;&#x70B9;&#x8FDB;&#x884C;&#x8003;&#x5BDF;&#xFF0C;&#x82E5;&#x5C06;&#x8BE5;&#x7ED3;&#x70B9;&#x5BF9;&#x5E94;&#x7684;&#x5B50;&#x6811;&#x66FF;&#x6362;&#x4E3A;&#x53F6;&#x7ED3;&#x70B9;&#x80FD;&#x5E26;&#x6765;&#x51B3;&#x7B56;&#x6811;&#x6CDB;&#x5316;&#x6027;&#x80FD;&#x63D0;&#x5347;&#xFF0C;&#x5219;&#x5C06;&#x8BE5;&#x5B50;&#x6811;&#x66FF;&#x6362;&#x4E3A;&#x53F6;&#x8282;&#x70B9;&#x3002;&#x540E;&#x526A;&#x679D;&#x4F18;&#x70B9;&#xFF1A; &#x6CDB;&#x5316;&#x6027;&#x80FD;&#x8F83;&#x597D; &#x6B20;&#x62DF;&#x5408;&#x98CE;&#x9669;&#x8F83;&#x5C0F;&#x540E;&#x526A;&#x679D;&#x7F3A;&#x70B9;&#xFF1A; &#x751F;&#x6210;&#x5B8C;&#x5168;&#x51B3;&#x7B56;&#x6811;&#x540E;&#x8FDB;&#x884C;&#xFF0C;&#x5E76;&#x4E14;&#x81EA;&#x5E95;&#x5411;&#x4E0A;&#x5BF9;&#x6240;&#x6709;&#x975E;&#x53F6;&#x7ED3;&#x70B9;&#x8FDB;&#x884C;&#x9010;&#x4E00;&#x8003;&#x5BDF;&#xFF0C;&#x65F6;&#x95F4;&#x5F00;&#x9500;&#x5927; &#x7B97;&#x6CD5;&#x6D41;&#x7A0B; &#x4EE3;&#x7801;&#x5B9E;&#x6218;&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6570;&#x636E;&#x4E3A;&#x7F57;&#x65AF;.&#x6606;&#x5170;(Ross Quinlan)&#x5F53;&#x5E74;&#x6240;&#x7528;&#x7684;&#x9AD8;&#x5C14;&#x592B;&#x6A21;&#x578B; ID3_main.m1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798%% %&#x83B7;&#x53D6;&#x57FA;&#x672C;&#x4FE1;&#x606F;clear;clc;close all;%&#x8BBE;&#x7F6E;&#x7C7B;&#x522B;&#x548C;&#x6807;&#x7B7E;&#x6700;&#x957F;&#x4E3A;100&#x5B57;&#x7B26;char_len=100;%&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x957F;&#x5EA6;&#x4E3A;100&#x7684;&#x7A7A;&#x4E32;space(1:char_len)=&apos; &apos;;%&#x8BFB;&#x53D6;&#x6587;&#x672C;&#x6587;&#x6863;fo=fopen(&apos;data1.txt&apos;,&apos;rt&apos;);txt=textscan(fo,&apos;%s&apos;);fclose(fo);%class_name&#x4E3A;&#x7C7B;&#x522B;&#x540D;&#x79F0;&#xFF0C;&#x5982;outlook&#xFF0C;temperature&#x7B49;&#x7B49;class_name=strsplit(txt{1}{1},&apos;,&apos;);class_name=class_name(1:end-1);%class_num&#x4E3A;&#x7C7B;&#x522B;&#x6570;class_num=length(class_name);%sample_num&#x4E3A;&#x6837;&#x672C;&#x6570;sample_num=length(txt{1})-1;data{sample_num,class_num+1}=[];%&#x8BFB;&#x5165;&#x6570;&#x636E;for i=1:sample_num temp=strsplit(txt{1}{i+1},&apos;,&apos;); for j=1:class_num data{i,j}=[temp{j},&apos;_&apos;,class_name{1,j}]; end data{i,j+1}=temp{j+1};end%class_info&#x5B58;&#x653E;&#x6BCF;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#x7684;&#x6807;&#x7B7E;&#x4FE1;&#x606F;&#xFF0C;&#x5982;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x80DE;&#x4E2D;&#x5B58;&#x653E;rain&#xFF0C;sunny&#xFF0C;overcastclass_info{1,class_num}=[];for i=1:class_num temp=unique(data(:,i)); class_info{i}=temp;end%% %&#x751F;&#x6210;&#x6811;No=1;%&#x521B;&#x5EFA;100*100&#x7684;&#x5B57;&#x7B26;&#x77E9;&#x9635;&#x5B58;&#x653E;&#x6811;&#x7684;&#x4FE1;&#x606F;&#x3002;tree(1:char_len,1:char_len)=&apos; &apos;;[tree,No] = ID3_creat(data,class_name,tree,No);%% %&#x6784;&#x5EFA;&#x8FDE;&#x63A5;&#x77E9;&#x9635;%&#x83B7;&#x53D6;&#x6811;&#x7684;&#x8282;&#x70B9;tree_node=tree(1:2:No,:);%&#x83B7;&#x53D6;&#x6811;&#x7684;&#x6807;&#x7B7E;tree_label=tree(2:2:No,:);%&#x521B;&#x5EFA;&#x8FDE;&#x63A5;&#x77E9;&#x9635;vect{size(tree_node,1),size(tree_node,1)}=[];%vect&#x5143;&#x80DE;&#x8BB0;&#x5F55;&#x7236;&#x5B50;&#x5173;&#x7CFB;for i=1:size(tree_node,1) tem=find(ismember(class_name,deblank(tree_node(i,:)))); if isempty(tem) continue; end num=size(class_info{1,tem},1); for j=1:num temp=space; temp(1:length(class_info{1,tem}{j}))=class_info{1,tem}{j}; for k=1:size(tree_label,1) if isequal(tree_label(k,:),temp) break; end end vect{i,k+1}=temp; endend%% %&#x7ED8;&#x5236;&#x6811;&#x56FE;node=zeros(1,size(tree_node,1));%&#x6839;&#x636E;vect&#x5143;&#x80DE;&#x4E2D;&#x7684;&#x7236;&#x5B50;&#x5173;&#x7CFB;&#x753B;&#x51FA;&#x6811;&#x56FE;for i=1:size(vect,2) tem=vect(:,i); for j=1:size(tem,1) if ~isempty(tem{j}) node(i)=j; break; end endendtreeplot(node);%% %&#x5199;&#x6811;&#x7684;&#x7C7B;&#x522B;&#xFF08;&#x8282;&#x70B9;&#xFF09;[x,y]=treelayout(node);x=x&apos;;y=y&apos;;text(x(:,1),y(:,1),tree_node);%% %&#x5199;&#x6811;&#x7684;&#x6807;&#x7B7E;&#xFF08;&#x679D;&#x6761;&#xFF09;x1=zeros(size(tree_label,1));y1=zeros(size(tree_label,1));%&#x6839;&#x636E;&#x7236;&#x5B50;&#x5173;&#x7CFB;&#x5728;&#x7236;&#x5B50;&#x8282;&#x70B9;&#x4E2D;&#x70B9;&#x5199;&#x5165;&#x6807;&#x7B7E;for i=2:length(node) x1(i-1,1)=(x(i,1)+x(node(i),1))/2; y1(i-1,1)=(y(i,1)+y(node(i),1))/2;endfor i=1:size(tree_label) temp=strsplit(tree_label(i,:),&apos;_&apos;); tree_label(i,:)=[temp{1},space(length(temp{1})+1:end)];endtext(x1(:,1),y1(:,1),tree_label); ID3_split.m123456789101112function bestfeature=ID3_split(data)%&#x6C42;&#x6700;&#x5C0F;&#x71B5;&#x7684;&#x5206;&#x5272;&#x7B97;&#x6CD5;numfeatures = size(data,2) -1 ;bestent = log2(numfeatures);bestfeature = -1;for i =1:numfeatures ent = ID3_ent(data,i); if ent &lt; bestent bestent = ent; bestfeature = i; endend ID3_ent.m12345678910111213function ent=ID3_ent(data,i)%&#x6C42;&#x6700;&#x5C0F;&#x71B5;info=tabulate(data(:,i));ent=0;for k=1:size(info,1) loc=ismember(data(:,i),info{k,1}); info1=tabulate(data(loc,end)); temp=0; for n=1:size(info1,1) temp=temp-info1{n,3}/100*log2(info1{n,3}/100); end ent=ent+info{k,3}/100*temp;end ID3_creat.m123456789101112131415161718function [tree,No]=ID3_creat(data,class_name,tree,No)classlist=data(:,end);%&#x5982;&#x679C;&#x6807;&#x7B7E;&#x5168;&#x4E3A;yes&#x6216;no&#x5219;&#x5DF2;&#x7ECF;&#x5206;&#x5B8C;&#xFF0C;&#x8FD4;&#x56DE;if size(tabulate(classlist),1)==1 tree(No,1:length(classlist{1}))=classlist{1}; returnend%&#x5982;&#x679C;&#x6CA1;&#x6709;&#x5206;&#x5B8C;&#x627E;&#x5230;&#x6700;&#x597D;&#x7684;&#x7279;&#x5F81;&#xFF0C;&#x9012;&#x5F52;&#x751F;&#x6210;&#x6811;bestfeature_loc = ID3_split(data);bestfeature=class_name{1,bestfeature_loc};tree(No,1:length(bestfeature))=bestfeature;featureValues=tabulate(data(:,bestfeature_loc));for m=1:size(featureValues,1) tree(No+1,1:length(featureValues{m,1}))=featureValues{m,1}; loc=ismember(data(:,bestfeature_loc),featureValues{m,1}); data1=data(loc,[1:bestfeature_loc-1,bestfeature_loc+1:end]); [tree,No] = ID3_creat(data1,class_name(:,[1:bestfeature_loc-1,bestfeature_loc+1:end]),tree,No+2);end &#x5B9E;&#x9A8C;&#x7ED3;&#x679C; ID3, C4.5, CART&#x6027;&#x80FD;&#x6BD4;&#x8F83;\begin{array}{|c|c|c|c|c|} &#x7B97;&#x6CD5; &amp; &#x7ED3;&#x6784; &amp; &#x7279;&#x5F81;&#x9009;&#x62E9; &amp; &#x8FDE;&#x7EED;&#x503C; &amp; &#x7F3A;&#x5931;&#x503C; \ \hline ID3&amp;&#x591A;&#x53C9;&#x6811;&amp;&#x4FE1;&#x606F;&#x589E;&#x76CA;&amp;&#x4E0D;&#x652F;&#x6301;&amp;&#x4E0D;&#x652F;&#x6301;\ C4.5&amp;&#x591A;&#x53C9;&#x6811;&amp;&#x4FE1;&#x606F;&#x589E;&#x76CA;&#x6BD4;&amp;&#x652F;&#x6301;&amp;&#x652F;&#x6301;\ CART&amp;&#x4E8C;&#x53C9;&#x6811;&amp;&#x57FA;&#x5C3C;&#x7CFB;&#x6570;&amp;&#x652F;&#x6301;&amp;&#x652F;&#x6301;\ \end{array} &#x51B3;&#x7B56;&#x6811;&#x5206;&#x7C7B;&#x4F18;&#x7F3A;&#x70B9; &#x4F18;&#x70B9;&#xFF1A; &#x6570;&#x636E;&#x91CF;&#x4E00;&#x822C;&#x4E0D;&#x4F1A;&#x592A;&#x5927; &#x5177;&#x6709;&#x5F88;&#x5F3A;&#x7684;&#x53EF;&#x89E3;&#x91CA;&#x6027; &#x751F;&#x6210;&#x7684;&#x51B3;&#x7B56;&#x6811;&#x7B80;&#x5355;&#x76F4;&#x89C2; &#x53EF;&#x4EE5;&#x5904;&#x7406;&#x591A;&#x7EF4;&#x5EA6;&#x8F93;&#x51FA;&#x7684;&#x5206;&#x7C7B;&#x95EE;&#x9898;&#x3002; &#x65E2;&#x53EF;&#x4EE5;&#x5904;&#x7406;&#x79BB;&#x6563;&#x503C;&#x4E5F;&#x53EF;&#x4EE5;&#x5904;&#x7406;&#x8FDE;&#x7EED;&#x503C; &#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x526A;&#x679D;&#x6765;&#x6743;&#x8861;&#x6B20;&#x62DF;&#x5408;&#x548C;&#x8FC7;&#x62DF;&#x5408; &#x57FA;&#x672C;&#x4E0D;&#x9700;&#x8981;&#x9884;&#x5904;&#x7406;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x63D0;&#x524D;&#x5F52;&#x4E00;&#x5316;&#xFF0C;&#x5904;&#x7406;&#x7F3A;&#x5931;&#x503C;&#x3002; &#x7F3A;&#x70B9;&#xFF1A; &#x6811;&#x7ED3;&#x6784;&#x53D7;&#x6837;&#x672C;&#x5F71;&#x54CD;&#x8F83;&#x5927; &#x590D;&#x6742;&#x7684;&#x6A21;&#x578B;&#x5F88;&#x96BE;&#x7528;&#x51B3;&#x7B56;&#x6811;&#x89E3;&#x51B3; &#x5BFB;&#x627E;&#x6700;&#x4F18;&#x7684;&#x51B3;&#x7B56;&#x6811;&#x662F;&#x4E00;&#x4E2A;NP&#x96BE;&#x7684;&#x95EE;&#x9898; &#x5982;&#x679C;&#x67D0;&#x4E9B;&#x7279;&#x5F81;&#x7684;&#x6837;&#x672C;&#x6BD4;&#x4F8B;&#x8FC7;&#x5927;&#xFF0C;&#x751F;&#x6210;&#x51B3;&#x7B56;&#x6811;&#x5BB9;&#x6613;&#x504F;&#x5411;&#x4E8E;&#x8FD9;&#x4E9B;&#x7279;&#x5F81;&#xFF0C;&#x8FD9;&#x4E2A;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8C03;&#x8282;&#x6837;&#x672C;&#x6743;&#x91CD;&#x6765;&#x6539;&#x5584; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>机器学习</category>
        <category>有监督学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[逻辑回归(Logistics Regression)]]></title>
    <url>%2F2019%2F07%2F02%2Fclassification%20LR%2F</url>
    <content type="text"><![CDATA[&#x903B;&#x8F91;&#x56DE;&#x5F52; &#x539F;&#x7406;&#x89E3;&#x8BFB;&#x2003;&#x2003;&#x903B;&#x8F91;&#x56DE;&#x5F52;:&#x662F;&#x4E00;&#x79CD;&#x5E7F;&#x4E49;&#x7EBF;&#x6027;&#x56DE;&#x5F52;&#xFF0C;&#x90FD;&#x5177;&#x6709; w&#x2019;x+b&#xFF0C;&#x5176;&#x4E2D;w&#x548C;b&#x662F;&#x5F85;&#x6C42;&#x53C2;&#x6570;&#xFF0C;&#x5176;&#x533A;&#x522B;&#x5728;&#x4E8E;&#x4ED6;&#x4EEC;&#x7684;&#x56E0;&#x53D8;&#x91CF;&#x4E0D;&#x540C;&#xFF0C;&#x591A;&#x91CD;&#x7EBF;&#x6027;&#x56DE;&#x5F52;&#x76F4;&#x63A5;&#x5C06;w&#x2019;x+b&#x4F5C;&#x4E3A;&#x56E0;&#x53D8;&#x91CF;&#xFF0C;&#x5373;y =w&#x2019;x+b&#xFF0C;&#x800C;logistic&#x56DE;&#x5F52;&#x5219;&#x901A;&#x8FC7;&#x51FD;&#x6570;L&#x5C06;w&#x2019;x+b&#x5BF9;&#x5E94;&#x4E00;&#x4E2A;&#x9690;&#x72B6;&#x6001;p&#xFF0C;p =g(w&#x2019;x+b),&#x7136;&#x540E;&#x6839;&#x636E;p &#x4E0E;1-p&#x7684;&#x5927;&#x5C0F;&#x51B3;&#x5B9A;&#x56E0;&#x53D8;&#x91CF;&#x7684;&#x503C;&#x3002;&#x5982;&#x679C;g&#x662F;logistic&#x51FD;&#x6570;&#xFF0C;&#x5C31;&#x662F;logistic&#x56DE;&#x5F52;&#x3002; &#x6838;&#x5FC3;&#x601D;&#x60F3;&#x9884;&#x6D4B;&#x51FD;&#x6570;&#x5BF9;&#x4E8E;&#x4E8C;&#x5206;&#x7C7B;&#x95EE;&#x9898;&#xFF0C;$y \in \lbrace 0,1 \rbrace$&#xFF0C;1&#x8868;&#x793A;&#x6B63;&#x4F8B;&#xFF0C;0&#x8868;&#x793A;&#x8D1F;&#x4F8B;&#x3002;&#x903B;&#x8F91;&#x56DE;&#x5F52;&#x662F;&#x5728;&#x7EBF;&#x6027;&#x51FD;&#x6570;$W^Tx$&#x8F93;&#x51FA;&#x9884;&#x6D4B;&#x5B9E;&#x9645;&#x503C;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x5BFB;&#x627E;&#x4E00;&#x4E2A;&#x5047;&#x8BBE;&#x51FD;&#x6570;&#x51FD;&#x6570;$h_W(x)=g(W^Tx)$&#xFF0C;&#x5C06;&#x5B9E;&#x9645;&#x503C;&#x6620;&#x5C04;&#x5230;&#x5230;0&#xFF0C;1&#x4E4B;&#x95F4;&#xFF0C;&#x5982;&#x679C;$y =\begin{cases} 1 , &amp; h_W(x) \ge 0.5 \0 , &amp; h_W(x) &lt;0.5 \end{cases}$&#xFF0C;&#x903B;&#x8F91;&#x56DE;&#x5F52;&#x4E2D;&#x9009;&#x62E9;&#x5BF9;&#x6570;&#x51E0;&#x7387;&#x51FD;&#x6570;(logistic function)&#x4F5C;&#x4E3A;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$$g(z)=\frac{1}{1+e^(-z)}$$$$g(W^Tx)=\frac{1}{1+e^(-W^Tx+b)}$$$$ln\frac{g(W^Tx)}{1-g(W^Tx)}=W^Tx+b$$&#x82E5;&#x5C06;$g(W^Tx)$&#x89C6;&#x4E3A;&#x6837;&#x672C;x&#x4F5C;&#x4E3A;&#x6B63;&#x4F8B;&#x7684;&#x6982;&#x7387;&#xFF0C;&#x5219;$1-g(W^Tx)$&#x662F;&#x53CD;&#x4F8B;&#x7684;&#x6982;&#x7387;&#x3002;&#x4E24;&#x8005;&#x7684;&#x6BD4;&#x503C;&#x79F0;&#x4E3A;&#x51E0;&#x7387;&#xFF0C;&#x53CD;&#x5E94;&#x4E86;x&#x4F5C;&#x4E3A;&#x6B63;&#x4F8B;&#x7684;&#x76F8;&#x5BF9;&#x53EF;&#x80FD;&#x6027;&#x3002;&#x5BF9;&#x51E0;&#x7387;&#x53D6;&#x5BF9;&#x6570;&#x5219;&#x5F97;&#x5230;&#x201D;&#x5BF9;&#x6570;&#x51E0;&#x7387;&#x201D;(log odds,&#x4EA6;&#x79F0;logit) &#x635F;&#x5931;&#x51FD;&#x6570;&#x901A;&#x8FC7;&#x6781;&#x5927;&#x4F3C;&#x7136;&#x4F30;&#x8BA1;W&#x548C;b&#xFF0C;&#x53EF;&#x5F97;cost&#x51FD;&#x6570;L&#x548C;&#x635F;&#x5931;&#x51FD;&#x6570;J&#x3002;$$L(\hat{y},y)=-(ylog \hat{y}+(1-y)log(1- \hat{y}))$$$$J(W,b)=\frac{1}{m} \displaystyle \sum_{i=1}^mL(\hat{y}^{(i)},y^{(i)})$$&#x4E0B;&#x9762;&#x8F6C;&#x5316;&#x4E3A;&#x6C42;$\underset{W,b}{arg\ min}\ J(W,b)$ &#x4EE3;&#x7801;&#x5B9E;&#x6218;LR_train.m123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051clear;clc;f_sigmod=@(x)1./(1+exp(-x));%x&#x4E3A;&#x6837;&#x672C;&#xFF0C;&#x884C;&#x6570;&#x4EE3;&#x8868;&#x7279;&#x5F81;&#x6570;&#xFF0C;&#x5217;&#x6570;&#x4EE3;&#x8868;&#x6837;&#x672C;&#x6570;,&#x4EE5;&#x5217;&#x5411;&#x91CF;&#x7684;&#x5F62;&#x5F0F;&#x8F93;&#x51FA;&#xFF0C;label&#x4E3A;&#x6837;&#x672C;&#x6240;&#x5BF9;&#x5E94;&#x7684;&#x7C7B;&#x522B;train_x=[0.5,0.5,0.8,0.2,0.1;... 0.8,0.7,0.6,0.2,0.4];%1&#x4E3A;&#x7B2C;&#x4E00;&#x7C7B;&#xFF0C;2&#x4E3A;&#x7B2C;&#x4E8C;&#x7C7B;train_y=[1,1,1,0,0];%&#x7279;&#x5F81;&#x6570;feat_num=size(train_x,1);%&#x6837;&#x672C;&#x6570;train_num=size(train_x,2);%&#x8BBE;&#x7F6E;&#x6700;&#x5927;&#x8FED;&#x4EE3;&#x6B21;&#x6570;times=10000;%&#x5B66;&#x4E60;&#x7387;a=0.1;%&#x6743;&#x5411;&#x91CF;w=rand(1,feat_num+1);%&#x589E;&#x5E7F;&#x77E9;&#x9635;x_expend=[train_x;ones(1,train_num)];for i=1:times tem=w; %w=w-a/m*&#x3A3;(sigmod(wx)-y)x w=w-a/train_num*sum(repmat((f_sigmod(w*x_expend)-train_y),feat_num+1,1).*x_expend,2)&apos;; if sum(abs(w-tem))&lt;5e-3 break; endenddisp(i)if i&gt;=times disp(&apos;The question is not Linearly Separable&apos;);%&#x5426;&#x5219;&#x7EBF;&#x6027;&#x53EF;&#x5206;&#xFF0C;&#x5199;&#x51FA;&#x51FD;&#x6570;&#x8868;&#x8FBE;&#x5F0F;else express=[]; %&#x8F93;&#x51FA;&#x8868;&#x8FBE;&#x5F0F; for i=1:feat_num if w(i)&gt;0 express=[express,num2str(w(i)),&apos;x&apos;,num2str(i),&apos;+&apos;]; elseif w(i)&lt;0 express=[express(1:end-1),num2str(w(i)),&apos;x&apos;,num2str(i),&apos;+&apos;]; end end if w(feat_num+1)==0 express=[express(1:end-1),&apos;=0&apos;]; elseif w(feat_num+1)&gt;0 express=[express(1:end),num2str(w(feat_num+1)),&apos;=0&apos;]; else express=[express(1:end-1),num2str(w(feat_num+1)),&apos;=0&apos;]; end fprintf([&apos;&#x51B3;&#x7B56;&#x9762;&#x51FD;&#x6570;&#x4E3A;:&apos;,express,&apos;\n\n&apos;]); disp(&apos;&#x8FD0;&#x884C;LR_test&#x5F00;&#x59CB;&#x6D4B;&#x8BD5;&apos;);end LR_test.m12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970close all;%&#x8F93;&#x5165;&#x6D4B;&#x8BD5;&#x96C6;test_x=rand(2,10);%&#x6D4B;&#x8BD5;&#x96C6;&#x6837;&#x672C;&#x6570;test_num=size(test_x,2);%&#x5982;&#x679C;&#x8BEF;&#x5DEE;&#x4E0D;&#x80FD;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#xFF0C;&#x6B64;&#x4E3A;&#x7EBF;&#x6027;&#x4E0D;&#x53EF;&#x5206;&#x95EE;&#x9898;if i&gt;=times disp(&apos;The question is not Linearly Separable&apos;);%&#x5982;&#x679C;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#x53EF;&#x4EE5;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x8D85;&#x5E73;&#x9762;else %&#x5982;&#x679C;&#x662F;&#x4E8C;&#x4F4D;&#x7279;&#x5F81;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x5E73;&#x9762;&#x5750;&#x6807;&#x7CFB;&#x7ED8;&#x56FE;&#x8868;&#x793A; if feat_num==2 hold on; axis([0,1,0,1]) if w(1)==0 line_x=[0,1]; line_y=[-w(3)/w(2),-w(3)/w(2)]; elseif w(2)==0 line_x=[-w(3)/w(1),-w(3)/w(1)]; line_y=[0,1]; else line_x=[0,1]; line_y=[-w(3)/w(2),(-w(3)-w(1))/w(2)]; end %&#x7528;&#x9ED1;&#x8272;&#x7ED8;&#x5236;&#x5206;&#x754C;&#x7EBF; plot(line_x,line_y,&apos;k&apos;); %&#x7ED8;&#x5236;&#x6D4B;&#x8BD5;&#x96C6;&#x6837;&#x672C;&#x70B9; test_y=w*[test_x;ones(1,test_num)]; for i=1:test_num %&#x5982;&#x679C;&#x5927;&#x4E8E;0&#xFF0C;&#x5219;&#x5F52;&#x4E3A;&#x4E00;&#x7C7B;&#xFF0C;&#x7528;&#x7EA2;&#x8272;&#x7684;&#x5708;&#x8868;&#x793A; if test_y(i)&gt;0 plot(test_x(1,i),test_x(2,i),&apos;ro&apos;); %&#x5982;&#x679C;&#x5C0F;&#x4E8E;0&#xFF0C;&#x5219;&#x5F52;&#x4E3A;&#x4E00;&#x7C7B;&#xFF0C;&#x7528;&#x84DD;&#x8272;&#x7684;&#x5708;&#x8868;&#x793A; elseif test_y(i)&lt;0 plot(test_x(1,i),test_x(2,i),&apos;bo&apos;); %&#x5426;&#x5219;&#x7528;&#x7EFF;&#x8272;&#x7684;&#x5708;&#x8868;&#x793A; else plot(test_x(1,i),test_x(2,i),&apos;go&apos;); end end %&#x8BF4;&#x660E;1&#x7C7B;&#x5BF9;&#x5E94;&#x7EA2;&#x8272;&#xFF0C;2&#x7C7B;&#x5BF9;&#x5E94;&#x84DD;&#x8272; if (train_x(1,1)*w(1)+train_x(2,1)*w(2)+w(3)&gt;=0&amp;&amp;train_y(1)==1)||(train_x(1,i)*w(1)+train_x(2,i)*w(2)+w(3)&lt;0&amp;&amp;train_y(1)==0) %&#x7ED8;&#x5236;&#x8BAD;&#x7EC3;&#x96C6;&#x6837;&#x672C;&#x70B9; for i=1:train_num %&#x5982;&#x679C;&#x5927;&#x4E8E;0&#xFF0C;&#x5219;&#x5F52;&#x4E3A;&#x4E00;&#x7C7B;&#xFF0C;&#x7528;&#x7EA2;&#x8272;&#x7684;*&#x8868;&#x793A; if train_y(i)==1 plot(train_x(1,i),train_x(2,i),&apos;r*&apos;) %&#x5982;&#x679C;&#x5C0F;&#x4E8E;0&#xFF0C;&#x5219;&#x5F52;&#x4E3A;&#x4E00;&#x7C7B;&#xFF0C;&#x7528;&#x84DD;&#x8272;&#x7684;*&#x8868;&#x793A; else plot(train_x(1,i),train_x(2,i),&apos;b*&apos;) end end %&#x8BF4;&#x660E;1&#x7C7B;&#x5BF9;&#x5E94;&#x84DD;&#x8272;&#xFF0C;2&#x7C7B;&#x5BF9;&#x5E94;&#x7EA2;&#x8272; else for i=1:train_num %&#x5982;&#x679C;&#x5927;&#x4E8E;0&#xFF0C;&#x5219;&#x5F52;&#x4E3A;&#x4E00;&#x7C7B;&#xFF0C;&#x7528;&#x7EA2;&#x8272;&#x7684;*&#x8868;&#x793A; if train_y(i)==1 plot(train_x(1,i),train_x(2,i),&apos;b*&apos;) %&#x5982;&#x679C;&#x5C0F;&#x4E8E;0&#xFF0C;&#x5219;&#x5F52;&#x4E3A;&#x4E00;&#x7C7B;&#xFF0C;&#x7528;&#x84DD;&#x8272;&#x7684;*&#x8868;&#x793A; else plot(train_x(1,i),train_x(2,i),&apos;r*&apos;) end end end hold off %&#x5982;&#x679C;&#x4E0D;&#x662F;&#x4E24;&#x4E2A;&#x7279;&#x5F81;&#x4E0D;&#x80FD;&#x7528;&#x5E73;&#x9762;&#x5750;&#x6807;&#x7CFB;&#x8868;&#x793A; else disp(&apos;The Feature Is Not Two-Dimensional&apos;); endend &#x5B9E;&#x9A8C;&#x7ED3;&#x679C; &#x6027;&#x80FD;&#x6BD4;&#x8F83; &#x4F18;&#x70B9;&#xFF1A; &#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x5BB9;&#x6613;&#x7406;&#x89E3; &#x9002;&#x5408;&#x4E8E;&#x5927;&#x591A;&#x6570;&#x7EBF;&#x6027;&#x5206;&#x7C7B;&#x7684;&#x4EFB;&#x52A1; &#x9C81;&#x68D2;&#x6027;&#x8F83;&#x597D;&#xFF0C;&#x80FD;&#x591F;&#x62B5;&#x6321;&#x8F7B;&#x5FAE;&#x566A;&#x58F0;&#x7684;&#x5F71;&#x54CD; &#x7F3A;&#x70B9;&#xFF1A; &#x5BB9;&#x6613;&#x6B20;&#x62DF;&#x5408; &#x5728;&#x591A;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x6216;&#x8005;&#x975E;&#x7EBF;&#x6027;&#x4EFB;&#x52A1;&#x4E0A;&#x96BE;&#x4EE5;&#x4F7F;&#x7528; &#x7279;&#x5F81;&#x7A7A;&#x95F4;&#x8F83;&#x5927;&#x6216;&#x8005;&#x7279;&#x5F81;&#x7F3A;&#x5931;&#x60C5;&#x51B5;&#x4E0B;&#x8868;&#x73B0;&#x8F83;&#x5DEE; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>机器学习</category>
        <category>有监督学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[差分进化算法(DE)]]></title>
    <url>%2F2019%2F05%2F27%2Foptimization_DE%2F</url>
    <content type="text"><![CDATA[&#x5DEE;&#x5206;&#x8FDB;&#x5316;&#x7B97;&#x6CD5; &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;DE(Differential Evolution Algorithm):&#x662F;&#x4E00;&#x79CD;&#x9AD8;&#x6548;&#x7684;&#x5168;&#x5C40;&#x4F18;&#x5316;&#x7B97;&#x6CD5;&#x3002;&#x5B83;&#x4E5F;&#x662F;&#x57FA;&#x4E8E;&#x7FA4;&#x4F53;&#x7684;&#x542F;&#x53D1;&#x5F0F;&#x641C;&#x7D22;&#x7B97;&#x6CD5;&#xFF0C;&#x7FA4;&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x4E2A;&#x4F53;&#x5BF9;&#x5E94;&#x4E00;&#x4E2A;&#x89E3;&#x5411;&#x91CF;&#x3002;&#x5DEE;&#x5206;&#x8FDB;&#x5316;&#x7B97;&#x6CD5;&#x7684;&#x8FDB;&#x5316;&#x6D41;&#x7A0B;&#x5219;&#x4E0E;&#x9057;&#x4F20;&#x7B97;&#x6CD5;&#x975E;&#x5E38;&#x7C7B;&#x4F3C;&#xFF0C;&#x90FD;&#x5305;&#x62EC;&#x53D8;&#x5F02;&#x3001;&#x6742;&#x4EA4;&#x548C;&#x9009;&#x62E9;&#x64CD;&#x4F5C;&#xFF0C;&#x4F46;&#x8FD9;&#x4E9B;&#x64CD;&#x4F5C;&#x7684;&#x5177;&#x4F53;&#x5B9A;&#x4E49;&#x4E0E;&#x9057;&#x4F20;&#x7B97;&#x6CD5;&#x6709;&#x6240;&#x4E0D;&#x540C;&#x3002; &#x6838;&#x5FC3;&#x601D;&#x60F3;&#x2003;&#x2003;1. &#x968F;&#x673A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x521D;&#x59CB;&#x79CD;&#x7FA4; &#x2003;&#x2003;2. &#x6839;&#x636E;&#x9002;&#x5E94;&#x5EA6;&#x5BF9;&#x79CD;&#x7FA4;&#x91C7;&#x7528;&#x67D0;&#x79CD;&#x65B9;&#x5F0F;&#x8FDB;&#x884C;&#x81EA;&#x7136;&#x9009;&#x62E9; &#x2003;&#x2003;3. &#x5BF9;&#x9009;&#x62E9;&#x5269;&#x4F59;&#x7684;&#x79CD;&#x7FA4;&#x8FDB;&#x884C;&#x5DEE;&#x5206;&#x9057;&#x4F20;&#xFF0C;&#x4EA7;&#x751F;&#x65B0;&#x7684;&#x79CD;&#x7FA4; &#x2003;&#x2003;4. &#x5BF9;&#x7236;&#x4EE3;&#x548C;&#x5B50;&#x4EE3;&#x7559;&#x4E00;&#x5904;&#x7406;&#xFF0C;&#x56DE;&#x5230;&#x6B65;&#x9AA4;2&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6; &#x2003;&#x2003;5. &#x6B64;&#x65F6;&#x5269;&#x4F59;&#x7684;&#x662F;&#x9002;&#x5E94;&#x5EA6;&#x8F83;&#x597D;&#x7684;&#x79CD;&#x7FA4;&#xFF0C;&#x6BD4;&#x8F83;&#x53EF;&#x5F97;&#x8BE5;&#x7B97;&#x6CD5;&#x7684;&#x6700;&#x4F18;&#x89E3; &#x7B97;&#x6CD5;&#x6D41;&#x7A0B; &#x4EE3;&#x7801;&#x5B9E;&#x6218;&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;(Test Function) DE_main.m1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374clear;clc;close all;%&#x81EA;&#x53D8;&#x91CF;&#x53D6;&#x503C;&#x8303;&#x56F4;range_x=[ones(1,1),-ones(1,1)]*500;%&#x7EF4;&#x5EA6;n=size(range_x,1);%&#x79CD;&#x7FA4;&#x6570;&#x91CF;gn=100;%&#x8FED;&#x4EE3;&#x6B21;&#x6570;times=1000;%&#x4EA4;&#x53C9;&#x6982;&#x7387;cr=0.5;%&#x968F;&#x673A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x79CD;&#x7FA4;group=zeros(n,gn);for k=1:n group(k,:)=(rand(1,gn))*(range_x(k,2)-range_x(k,1))+range_x(k,1);end%&#x8BBE;&#x7F6E;&#x5F53;&#x524D;&#x6700;&#x4F18;&#x89E3;best_value=zeros(1,times);tic;for k=1:times for i=1:gn %&#x57FA;&#x56E0;&#x91CD;&#x7EC4;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x53EF;&#x80FD;&#x53D1;&#x751F;&#x67D3;&#x8272;&#x4F53;&#x53D8;&#x5F02; exchange=randperm(gn,3); h=group(:,exchange(1))+rand(1)*(group(:,exchange(2))-group(:,exchange(3))); h(h&gt;500)=500; h(h&lt;-500)=-500; v=group(:,i); %&#x67D3;&#x8272;&#x4F53;&#x4EA4;&#x6362;,&#x4FDD;&#x7559;&#x7684;&#x7269;&#x79CD;&#x4EA7;&#x751F;&#x540E;&#x4EE3;&#x65F6;&#x53D1;&#x751F;&#x57FA;&#x56E0;&#x91CD;&#x7EC4; for j=1:n if cr&gt;rand(1) v(j)=h(j); end end if f(v)&lt;f(group(:,i)) group(:,i)=v; end end best_value(k)=min(f(group)); if k&gt;100&amp;&amp;abs(best_value(k)-best_value(k-100))&lt;1e-5 break; endendtime=toc;disp([&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;])[mini,index]=min(f(group));disp([&apos;fmin=&apos;,num2str(mini)]);for k=1:n disp([&apos;x&apos;,num2str(k),&apos;=&apos;,num2str(group(k,index))]);endif n==1 hold on; plot(group(index),mini,&apos;ro&apos;); plot_x=range_x(1):(range_x(2)-range_x(1))/1000:range_x(2); plot_y=f(plot_x); plot(plot_x,plot_y); text((range_x(1)+range_x(2))/2,max(plot_y)+0.1*(max(plot_y)-min(plot_y)),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]); hold off;endif n==2 %&#x6240;&#x6C42;&#x6700;&#x5C0F;&#x503C;&#x7684;&#x51FD;&#x6570; func=@(x1,x2)x1.*sin(sqrt(abs(x1)))+x2.*sin(sqrt(abs(x2))); plot_x=range_x(1,1):(range_x(1,2)-range_x(1,1))/1000:range_x(1,2); plot_y=range_x(2,1):(range_x(2,2)-range_x(2,1))/1000:range_x(2,2); [plot_x,plot_y] =meshgrid(plot_x,plot_y); plot_z=func(plot_x,plot_y); surf(plot_x,plot_y,plot_z); xlabel(&apos;x1&apos;); ylabel(&apos;x2&apos;); zlabel(&apos;y&apos;); hold on; plot3(group(1,index),group(2,index),mini,&apos;ko&apos;) text((range_x(1,1)+range_x(1,2))/2,(range_x(2,1)+range_x(2,2))/2,max(max(plot_z))+0.5*(max(max(plot_z))-min(min(plot_z))),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]); hold off;end f.m123456function res=f(x)func=@(x)(x).*sin(sqrt(abs(x)));res=zeros(1,size(x,2));for i=1:size(x,1) res=res+func(x(i,:));end &#x5B9E;&#x9A8C;&#x7ED3;&#x679C;$$f(x)=x \cdot \sin(\sqrt{\lvert x \rvert}) \ , \ x \in [-500,500]$$ $$&#x7406;&#x8BBA;&#x503C;&#xFF1A;f(x)_{min}=f(-420.96874592006)=-418.982887272434$$ $$&#x6240;&#x6C42;&#x503C;&#xFF1A;f(x)_{min}=f(-420.975929624477)=-418.982887272434$$ &#x6027;&#x80FD;&#x6BD4;&#x8F83; &#x4F18;&#x70B9;&#xFF1A; &#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5C0F; &#x4E0D;&#x4F1A;&#x4EA7;&#x751F;&#x65E9;&#x719F;&#x6536;&#x655B;&#x95EE;&#x9898; &#x9002;&#x7528;&#x4E8E;&#x591A;&#x7EF4;&#x7684;&#x6700;&#x4F18;&#x503C;&#x6C42;&#x89E3; &#x4ECE;&#x7FA4;&#x4F53;&#x51FA;&#x53D1;&#xFF0C;&#x5177;&#x6709;&#x5E76;&#x884C;&#x6027; &#x7B97;&#x6CD5;&#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x79CD;&#x7FA4;&#x7684;&#x9009;&#x62E9; &#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898; &#x4F7F;&#x7528;&#x6982;&#x7387;&#x673A;&#x5236;&#x8FDB;&#x884C;&#x8FED;&#x4EE3;&#xFF0C;&#x5177;&#x6709;&#x968F;&#x673A;&#x6027; &#x5177;&#x6709;&#x53EF;&#x6269;&#x5C55;&#x6027;&#xFF0C;&#x5BB9;&#x6613;&#x4E0E;&#x5176;&#x4ED6;&#x7B97;&#x6CD5;&#x7ED3;&#x5408; &#x7F3A;&#x70B9;&#xFF1A; &#x5BF9;&#x95EE;&#x9898;&#x7F16;&#x7801;&#x8868;&#x793A;&#x8F83;&#x4E3A;&#x56F0;&#x96BE; &#x56E0;&#x4E3A;&#x6709;&#x5927;&#x91CF;&#x7684;&#x6BD4;&#x8F83;&#x548C;&#x9009;&#x62E9;&#xFF0C;&#x53EF;&#x80FD;&#x901F;&#x5EA6;&#x7A0D;&#x6162;&#x4E8E;&#x9057;&#x4F20;&#x7B97;&#x6CD5; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>计算机基础知识</category>
        <category>全局搜索方法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[全局搜索算法比较(Global Search Algorithm Comparison)]]></title>
    <url>%2F2019%2F05%2F26%2Foptimization_compare%2F</url>
    <content type="text"><![CDATA[&#x5168;&#x5C40;&#x641C;&#x7D22;&#x7B97;&#x6CD5;&#x6BD4;&#x8F83; &#x5168;&#x5C40;&#x641C;&#x7D22;&#x2003;&#x2003;&#x68AF;&#x5EA6;&#x65B9;&#x6CD5;&#xFF0C;&#x725B;&#x987F;&#x6CD5;&#xFF0C;&#x5171;&#x8F6D;&#x68AF;&#x5EA6;&#x6CD5;&#xFF0C;&#x62DF;&#x725B;&#x987F;&#x6CD5;&#x7B49;&#xFF0C;&#x80FD;&#x591F;&#x4ECE;&#x521D;&#x59CB;&#x70B9;&#x51FA;&#x53D1;&#xFF0C;&#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x8FED;&#x4EE3;&#x5E8F;&#x5217;&#x3002;&#x4F46;&#x662F;&#x5F88;&#x591A;&#x65F6;&#x5019;&#xFF0C;&#x5F80;&#x5F80;&#x53EA;&#x80FD;&#x6536;&#x655B;&#x5230;&#x5C40;&#x90E8;&#x6781;&#x5C0F;&#x70B9;&#x3002;&#x56E0;&#x6B64;&#x4E3A;&#x4E86;&#x4FDD;&#x8BC1;&#x7B97;&#x6CD5;&#x80FD;&#x591F;&#x6536;&#x655B;&#x5230;&#x5168;&#x5C40;&#x6700;&#x5C0F;&#x70B9;&#xFF0C;&#x9700;&#x8981;&#x501F;&#x52A9;&#x4E8E;&#x5168;&#x5C40;&#x641C;&#x7D22;&#x7B97;&#x6CD5;&#x6765;&#x5B9E;&#x73B0;&#x3002; &#x7B97;&#x6CD5;&#x5206;&#x7C7B; &#x6027;&#x80FD;&#x6BD4;&#x8F83;&#x6240;&#x7528;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;(Test Function) &#x6A21;&#x62DF;&#x9000;&#x706B;&#x7B97;&#x6CD5;(SA) &#x4F18;&#x70B9;&#xFF1A; &#x8BA1;&#x7B97;&#x8FC7;&#x7A0B;&#x7B80;&#x5355; &#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898; &#x76F8;&#x6BD4;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#xFF0C;&#x589E;&#x52A0;&#x4E86;&#x9003;&#x79BB;&#x5C40;&#x90E8;&#x6700;&#x5C0F;&#x7684;&#x53EF;&#x80FD; &#x7F3A;&#x70B9;&#xFF1A; &#x53C2;&#x6570;&#x654F;&#x611F; &#x6536;&#x655B;&#x901F;&#x5EA6;&#x6162; &#x6267;&#x884C;&#x65F6;&#x95F4;&#x957F; &#x7B97;&#x6CD5;&#x6027;&#x80FD;&#x4E0E;&#x521D;&#x59CB;&#x503C;&#x6709;&#x5173; &#x53EF;&#x80FD;&#x843D;&#x5165;&#x5176;&#x4ED6;&#x7684;&#x5C40;&#x90E8;&#x6700;&#x5C0F;&#x503C; &#x9057;&#x4F20;&#x7B97;&#x6CD5;(GA) &#x4F18;&#x70B9;&#xFF1A; &#x4ECE;&#x7FA4;&#x4F53;&#x51FA;&#x53D1;&#xFF0C;&#x5177;&#x6709;&#x5E76;&#x884C;&#x6027; &#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898; &#x4F7F;&#x7528;&#x6982;&#x7387;&#x673A;&#x5236;&#x8FDB;&#x884C;&#x8FED;&#x4EE3;&#xFF0C;&#x5177;&#x6709;&#x968F;&#x673A;&#x6027; &#x5177;&#x6709;&#x53EF;&#x6269;&#x5C55;&#x6027;&#xFF0C;&#x5BB9;&#x6613;&#x4E0E;&#x5176;&#x4ED6;&#x7B97;&#x6CD5;&#x7ED3;&#x5408; &#x7F3A;&#x70B9;&#xFF1A; &#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5927; &#x53EF;&#x80FD;&#x4EA7;&#x751F;&#x65E9;&#x719F;&#x6536;&#x655B;&#x95EE;&#x9898; &#x5BF9;&#x95EE;&#x9898;&#x7F16;&#x7801;&#x8868;&#x793A;&#x8F83;&#x4E3A;&#x56F0;&#x96BE; &#x7B97;&#x6CD5;&#x5BF9;&#x521D;&#x59CB;&#x79CD;&#x7FA4;&#x7684;&#x9009;&#x62E9;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x4F9D;&#x8D56;&#x6027; &#x641C;&#x7D22;&#x901F;&#x5EA6;&#x6BD4;&#x8F83;&#x6162;&#xFF0C;&#x8981;&#x5F97;&#x5230;&#x8F83;&#x7CBE;&#x786E;&#x7684;&#x89E3;&#x9700;&#x8981;&#x8F83;&#x591A;&#x7684;&#x8BAD;&#x7EC3;&#x65F6;&#x95F4; &#x514D;&#x75AB;&#x7B97;&#x6CD5;(IA) &#x4F18;&#x70B9;&#xFF1A; &#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5C0F; &#x89E3;&#x51B3;&#x65E9;&#x719F;&#x6536;&#x655B;&#x95EE;&#x9898; &#x4ECE;&#x7FA4;&#x4F53;&#x51FA;&#x53D1;&#xFF0C;&#x5177;&#x6709;&#x5E76;&#x884C;&#x6027; &#x5BF9;&#x6297;&#x4F53;&#x9009;&#x62E9;&#x7684;&#x4F9D;&#x8D56;&#x6027;&#x964D;&#x4F4E; &#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898; &#x4F7F;&#x7528;&#x6982;&#x7387;&#x673A;&#x5236;&#x8FDB;&#x884C;&#x8FED;&#x4EE3;&#xFF0C;&#x5177;&#x6709;&#x968F;&#x673A;&#x6027; &#x7F3A;&#x70B9;&#xFF1A; &#x5BF9;&#x95EE;&#x9898;&#x7F16;&#x7801;&#x8868;&#x793A;&#x8F83;&#x4E3A;&#x56F0;&#x96BE; &#x8981;&#x8FDB;&#x884C;&#x591A;&#x6B21;&#x514D;&#x75AB;&#x5E94;&#x7B54;&#xFF0C;&#x56E0;&#x6B64;&#x901F;&#x5EA6;&#x6162;&#x4E8E;&#x9057;&#x4F20;&#x7B97;&#x6CD5; &#x8681;&#x7FA4;&#x7B97;&#x6CD5;(ACO) &#x4F18;&#x70B9;&#xFF1A; &#x641C;&#x7D22;&#x901F;&#x5EA6;&#x8F83;&#x5FEB; &#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5C0F; &#x4ECE;&#x7FA4;&#x4F53;&#x51FA;&#x53D1;&#xFF0C;&#x5177;&#x6709;&#x5E76;&#x884C;&#x6027; &#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898; &#x5177;&#x6709;&#x53EF;&#x6269;&#x5C55;&#x6027;&#xFF0C;&#x5BB9;&#x6613;&#x4E0E;&#x5176;&#x4ED6;&#x7B97;&#x6CD5;&#x7ED3;&#x5408; &#x7F3A;&#x70B9;&#xFF1A; &#x5BF9;&#x521D;&#x59CB;&#x8682;&#x8681;&#x7684;&#x6570;&#x91CF;&#x6709;&#x5F88;&#x9AD8;&#x7684;&#x8981;&#x6C42; &#x7C92;&#x5B50;&#x7FA4;&#x7B97;&#x6CD5;(PSO) &#x4F18;&#x70B9;&#xFF1A; &#x641C;&#x7D22;&#x80FD;&#x529B;&#x6700;&#x5FEB; &#x4ECE;&#x7FA4;&#x4F53;&#x51FA;&#x53D1;&#xFF0C;&#x5177;&#x6709;&#x5E76;&#x884C;&#x6027; &#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898; &#x7F3A;&#x70B9;&#xFF1A; &#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5927; &#x5B58;&#x5728;&#x65E9;&#x719F;&#x6536;&#x655B;&#x95EE;&#x9898; &#x5BF9;&#x521D;&#x59CB;&#x7C92;&#x5B50;&#x7FA4;&#x7684;&#x6570;&#x91CF;&#x6709;&#x5F88;&#x9AD8;&#x7684;&#x8981;&#x6C42; &#x5355;&#x7EAF;&#x5F62;&#x6CD5;(Nelder-Mead) &#x4F18;&#x70B9;&#xFF1A; &#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5C0F; &#x5177;&#x6709;&#x5FEB;&#x901F;&#x968F;&#x673A;&#x7684;&#x641C;&#x7D22;&#x80FD;&#x529B; &#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898; &#x6BCF;&#x6B21;&#x8FED;&#x4EE3;&#x90FD;&#x66F4;&#x63A5;&#x8FD1;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x7CBE;&#x5EA6;&#x6700;&#x9AD8; &#x7F3A;&#x70B9;&#xFF1A; &#x7B97;&#x6CD5;&#x6027;&#x80FD;&#x4E0E;&#x521D;&#x59CB;&#x503C;&#x6709;&#x5173; &#x4E0D;&#x9002;&#x7528;&#x4E8E;&#x591A;&#x7EF4;&#x7684;&#x6700;&#x4F18;&#x503C;&#x6C42;&#x89E3; &#x53EF;&#x80FD;&#x843D;&#x5165;&#x5176;&#x4ED6;&#x7684;&#x5C40;&#x90E8;&#x6700;&#x5C0F;&#x503C; &#x9057;&#x4F20;&#x5DEE;&#x5206;&#x7B97;&#x6CD5;(DE) &#x4F18;&#x70B9;&#xFF1A; &#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5C0F; &#x4E0D;&#x4F1A;&#x4EA7;&#x751F;&#x65E9;&#x719F;&#x6536;&#x655B;&#x95EE;&#x9898; &#x9002;&#x7528;&#x4E8E;&#x591A;&#x7EF4;&#x7684;&#x6700;&#x4F18;&#x503C;&#x6C42;&#x89E3; &#x4ECE;&#x7FA4;&#x4F53;&#x51FA;&#x53D1;&#xFF0C;&#x5177;&#x6709;&#x5E76;&#x884C;&#x6027; &#x7B97;&#x6CD5;&#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x79CD;&#x7FA4;&#x7684;&#x9009;&#x62E9; &#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898; &#x4F7F;&#x7528;&#x6982;&#x7387;&#x673A;&#x5236;&#x8FDB;&#x884C;&#x8FED;&#x4EE3;&#xFF0C;&#x5177;&#x6709;&#x968F;&#x673A;&#x6027; &#x5177;&#x6709;&#x53EF;&#x6269;&#x5C55;&#x6027;&#xFF0C;&#x5BB9;&#x6613;&#x4E0E;&#x5176;&#x4ED6;&#x7B97;&#x6CD5;&#x7ED3;&#x5408; &#x7F3A;&#x70B9;&#xFF1A; &#x5BF9;&#x95EE;&#x9898;&#x7F16;&#x7801;&#x8868;&#x793A;&#x8F83;&#x4E3A;&#x56F0;&#x96BE; &#x56E0;&#x4E3A;&#x6709;&#x5927;&#x91CF;&#x7684;&#x6BD4;&#x8F83;&#x548C;&#x9009;&#x62E9;&#xFF0C;&#x53EF;&#x80FD;&#x901F;&#x5EA6;&#x7A0D;&#x6162;&#x4E8E;&#x9057;&#x4F20;&#x7B97;&#x6CD5; &#x7B97;&#x6CD5;&#x5BF9;&#x6BD4;&#x641C;&#x7D22;&#x7CBE;&#x5EA6;&#x5206;&#x6790; &#x6240;&#x7528;&#x65F6;&#x95F4;&#x5206;&#x6790; &#x7279;&#x70B9;&#x5C0F;&#x7ED3;&#x6A21;&#x62DF;&#x9000;&#x706B;&#x7B97;&#x6CD5;(SA) &#x4E0D;&#x540C;&#x95EE;&#x9898;&#x5BF9;&#x6E29;&#x5EA6;&#x8981;&#x6C42;&#x4E0D;&#x540C;&#xFF0C;&#x8D77;&#x59CB;&#x6E29;&#x5EA6;&#x548C;&#x6E29;&#x5EA6;&#x53D8;&#x5316;&#x7387;&#x90FD;&#x4F1A;&#x5F71;&#x54CD;&#x641C;&#x7D22;&#x7CBE;&#x5EA6;&#x548C;&#x65F6;&#x95F4; &#x6BCF;&#x6B21;&#x90FD;&#x968F;&#x673A;&#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x89E3;&#xFF0C;&#x6709;&#x65F6;&#x5F88;&#x96BE;&#x8DF3;&#x51FA;&#x8F83;&#x6DF1;&#x8F83;&#x8FDC;&#x7684;&#x5C40;&#x90E8;&#x6700;&#x4F18; &#x53EF;&#x4EE5;&#x91CD;&#x590D;&#x8FD0;&#x7B97;&#x591A;&#x6B21;&#xFF0C;&#x53D6;&#x591A;&#x6B21;&#x7684;&#x6700;&#x5C0F;&#x503C;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x4FDD;&#x8BC1;&#x5F97;&#x5230;&#x5168;&#x5C40;&#x6700;&#x4F18; &#x9057;&#x4F20;&#x7B97;&#x6CD5;(GA) &#x4E0D;&#x540C;&#x7684;&#x95EE;&#x9898;&#x9700;&#x8981;&#x7684;&#x79CD;&#x7FA4;&#x4E2A;&#x6570;&#x4E0D;&#x540C;&#xFF0C;&#x79CD;&#x7FA4;&#x4E2A;&#x6570;&#x8D8A;&#x591A;&#xFF0C;&#x641C;&#x7D22;&#x7CBE;&#x5EA6;&#x8D8A;&#x9AD8;&#xFF0C;&#x7528;&#x65F6;&#x8D8A;&#x957F; &#x8FED;&#x4EE3;&#x6B21;&#x6570;&#x8D8A;&#x9AD8;&#xFF0C;&#x81EA;&#x7136;&#x9009;&#x62E9;&#x8D8A;&#x5F3A;&#xFF0C;&#x4FDD;&#x7559;&#x7684;&#x7ED3;&#x679C;&#x8D8A;&#x597D;&#xFF0C;&#x641C;&#x7D22;&#x7CBE;&#x5EA6;&#x8D8A;&#x9AD8;&#xFF0C;&#x7528;&#x65F6;&#x8D8A;&#x957F; &#x95EE;&#x9898;&#x7684;&#x8868;&#x793A;&#x5F71;&#x54CD;&#x9057;&#x4F20;&#x7B97;&#x6CD5;&#x7684;&#x6548;&#x7387;&#xFF0C;&#x7528;&#x4E8C;&#x8FDB;&#x5236;&#x57FA;&#x56E0;&#x4E32;&#x8868;&#x793A;&#x8FD8;&#x662F;&#x7528;&#x5341;&#x8FDB;&#x5236;&#x8868;&#x793A;&#x9700;&#x8981;&#x8003;&#x8651; &#x81EA;&#x7136;&#x9009;&#x62E9;&#x7684;&#x65B9;&#x5F0F;&#x5F88;&#x91CD;&#x8981;&#xFF0C;&#x91C7;&#x7528;&#x7CBE;&#x82F1;&#x9009;&#x62E9;&#x6216;&#x8F6E;&#x76D8;&#x8D4C;&#x4F1A;&#x4EA7;&#x751F;&#x4E0D;&#x540C;&#x7684;&#x6548;&#x679C; &#x9057;&#x4F20;&#x7B97;&#x5B50;&#x5BF9;&#x7B97;&#x6CD5;&#x7684;&#x5F71;&#x54CD;&#x5F88;&#x5927;&#xFF0C;&#x91C7;&#x7528;&#x4F55;&#x79CD;&#x4EA4;&#x53C9;&#x65B9;&#x5F0F;&#x548C;&#x591A;&#x5927;&#x7684;&#x53D8;&#x5F02;&#x7387;&#x6700;&#x5408;&#x9002; &#x514D;&#x75AB;&#x7B97;&#x6CD5;(IA) &#x514D;&#x75AB;&#x7B97;&#x6CD5;&#x5305;&#x542B;&#x9057;&#x4F20;&#x7B97;&#x6CD5;&#x7684;&#x6240;&#x6709;&#x7279;&#x70B9; &#x514D;&#x75AB;&#x8FC7;&#x7A0B;&#x4ECE;&#x8BB0;&#x5FC6;&#x7EC6;&#x80DE;&#x4E2D;&#x53D6;&#x51FA;&#x90E8;&#x5206;&#xFF0C;&#x63D0;&#x9AD8;&#x641C;&#x7D22;&#x6548;&#x7387; &#x514D;&#x75AB;&#x8FC7;&#x7A0B;&#x968F;&#x673A;&#x4EA7;&#x751F;&#x53E6;&#x4E00;&#x90E8;&#x5206;&#x6297;&#x4F53;&#xFF0C;&#x7ED9;&#x641C;&#x7D22;&#x5230;&#x5176;&#x4ED6;&#x66F4;&#x4F18;&#x70B9;&#x521B;&#x9020;&#x4E86;&#x53EF;&#x80FD;&#x6027; &#x6BCF;&#x6B21;&#x7684;&#x514D;&#x75AB;&#x8FC7;&#x7A0B;&#x90FD;&#x76F8;&#x5F53;&#x4E8E;&#x4E00;&#x6B21;&#x9057;&#x4F20;&#x7B97;&#x6CD5;&#xFF0C;&#x56E0;&#x6B64;&#x514D;&#x75AB;&#x6B21;&#x6570;&#x8D8A;&#x591A;&#xFF0C;&#x7CBE;&#x5EA6;&#x8D8A;&#x9AD8;&#xFF0C;&#x65F6;&#x95F4;&#x8D8A;&#x957F; &#x8681;&#x7FA4;&#x7B97;&#x6CD5;(ACO) &#x548C;&#x81EA;&#x7136;&#x754C;&#x4E2D;&#x8681;&#x7FA4;&#x4E00;&#x6837;&#xFF0C;&#x8682;&#x8681;&#x8D8A;&#x591A;&#xFF0C;&#x641C;&#x7D22;&#x7CBE;&#x5EA6;&#x8D8A;&#x9AD8;&#xFF0C;&#x4F46;&#x662F;&#x8BA1;&#x7B97;&#x91CF;&#x5927;&#xFF0C;&#x7528;&#x65F6;&#x66F4;&#x957F; &#x8FED;&#x4EE3;&#x6B21;&#x6570;&#x8D8A;&#x9AD8;&#xFF0C;&#x4FE1;&#x606F;&#x7D20;&#x7684;&#x4F5C;&#x7528;&#x65F6;&#x95F4;&#x8D8A;&#x957F;&#xFF0C;&#x6240;&#x6C42;&#x7ED3;&#x679C;&#x66F4;&#x597D;&#xFF0C;&#x7CBE;&#x5EA6;&#x66F4;&#x9AD8;&#xFF0C;&#x7528;&#x65F6;&#x66F4;&#x957F; &#x7C92;&#x5B50;&#x7FA4;&#x7B97;&#x6CD5;(PSO) &#x548C;&#x81EA;&#x7136;&#x754C;&#x4E2D;&#x98DE;&#x9E1F;&#x4E00;&#x6837;&#xFF0C;&#x98DE;&#x9E1F;&#x8D8A;&#x591A;&#x8D8A;&#x5BB9;&#x6613;&#x9047;&#x5230;&#x5168;&#x5C40;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x641C;&#x7D22;&#x7CBE;&#x5EA6;&#x8D8A;&#x9AD8;&#xFF0C;&#x7528;&#x65F6;&#x66F4;&#x957F; &#x8FED;&#x4EE3;&#x6B21;&#x6570;&#x8D8A;&#x9AD8;&#xFF0C;&#x98DE;&#x9E1F;&#x4E4B;&#x95F4;&#x7684;&#x4FE1;&#x606F;&#x4EA4;&#x6362;&#x8D8A;&#x591A;&#xFF0C;&#x6240;&#x6C42;&#x7ED3;&#x679C;&#x66F4;&#x597D;&#xFF0C;&#x7CBE;&#x5EA6;&#x66F4;&#x9AD8;&#xFF0C;&#x7528;&#x65F6;&#x66F4;&#x957F; &#x7C92;&#x5B50;&#x7FA4;&#x7B97;&#x6CD5;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x9AD8;&#x5EA6;&#x7684;&#x5E76;&#x884C;&#x8BA1;&#x7B97;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x641C;&#x7D22;&#x51FD;&#x6570;&#x6700;&#x503C;&#x65B9;&#x9762;&#x901F;&#x5EA6;&#x6700;&#x5FEB; &#x5355;&#x7EAF;&#x5F62;&#x6CD5;(Nelder-Mead) &#x5355;&#x7EAF;&#x5F62;&#x6CD5;&#x662F;&#x4E00;&#x79CD;&#x6536;&#x7F29;&#x7B97;&#x6CD5;&#xFF0C;&#x5982;&#x679C;&#x521D;&#x59CB;&#x70B9;&#x9009;&#x62E9;&#x5728;&#x5C40;&#x90E8;&#x6781;&#x5C0F;&#x503C;&#x533A;&#x57DF;&#xFF0C;&#x4F1A;&#x6536;&#x7F29;&#x5230;&#x5C40;&#x90E8;&#x6700;&#x5C0F; &#x548C;SA&#x76F8;&#x540C;&#xFF0C;&#x53EF;&#x4EE5;&#x91CD;&#x590D;&#x8FD0;&#x7B97;&#x591A;&#x6B21;&#xFF0C;&#x53D6;&#x591A;&#x6B21;&#x7684;&#x6700;&#x5C0F;&#x503C;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x4FDD;&#x8BC1;&#x5F97;&#x5230;&#x5168;&#x5C40;&#x6700;&#x4F18;&#x3002; &#x548C;&#x5176;&#x4ED6;&#x7B97;&#x6CD5;&#x4E0D;&#x540C;&#xFF0C;&#x6CA1;&#x6709;&#x968F;&#x673A;&#x6027;&#xFF0C;&#x6BCF;&#x6B21;&#x8FED;&#x4EE3;&#x90FD;&#x4EA7;&#x751F;&#x6BD4;&#x4E0A;&#x4E00;&#x6B21;&#x66F4;&#x4F18;&#x7684;&#x89E3;&#xFF0C;&#x641C;&#x7D22;&#x7CBE;&#x5EA6;&#x6700;&#x9AD8; &#x5DEE;&#x5206;&#x8FDB;&#x5316;&#x7B97;&#x6CD5;(DE) &#x5DEE;&#x5206;&#x8FDB;&#x5316;&#x7B97;&#x6CD5;&#x7C7B;&#x4F3C;&#x4E8E;&#x6539;&#x8FDB;&#x7248;&#x7684;&#x9057;&#x4F20;&#x7B97;&#x6CD5;&#xFF0C;&#x66F4;&#x52A0;&#x9002;&#x5408;&#x4E8E;&#x591A;&#x7EF4;&#x6700;&#x4F18;&#x503C;&#x6C42;&#x89E3; &#x548C;&#x9057;&#x4F20;&#x7B97;&#x6CD5;&#x4E0D;&#x540C;&#x7684;&#x662F;&#x5177;&#x6709;&#x5DEE;&#x5206;&#x6027;&#x8D28;&#xFF0C;&#x80FD;&#x591F;&#x66F4;&#x5BB9;&#x6613;&#x5730;&#x8DF3;&#x51FA;&#x5F53;&#x524D;&#x7684;&#x5C40;&#x90E8;&#x89E3; &#x6DD8;&#x6C70;&#x673A;&#x5236;&#x4E5F;&#x5341;&#x5206;&#x7B80;&#x5355;&#xFF0C;&#x5C06;&#x5B50;&#x4EE3;&#x548C;&#x7236;&#x4EE3;&#x5BF9;&#x6BD4;&#xFF0C;&#x76F4;&#x63A5;&#x6DD8;&#x6C70;&#x8868;&#x73B0;&#x5DEE;&#x7684;&#x89E3;&#xFF0C;&#x7CBE;&#x82F1;&#x9009;&#x62E9; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>计算机基础知识</category>
        <category>全局搜索方法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[单纯形法(Nelder-Mead)]]></title>
    <url>%2F2019%2F05%2F25%2Foptimization_NM%2F</url>
    <content type="text"><![CDATA[&#x5355;&#x7EAF;&#x5F62;&#x6CD5; &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;Nelder-Mead:&#x5355;&#x7EAF;&#x5F62;&#x6CD5;&#x79C9;&#x627F;&#x4FDD;&#x8BC1;&#x6BCF;&#x4E00;&#x6B21;&#x8FED;&#x4EE3;&#x6BD4;&#x524D;&#x4E00;&#x6B21;&#x66F4;&#x4F18;&#x7684;&#x57FA;&#x672C;&#x601D;&#x60F3;&#xFF0C;&#x5148;&#x627E;&#x51FA;&#x4E00;&#x4E2A;&#x57FA;&#x672C;&#x53EF;&#x884C;&#x89E3;&#xFF0C;&#x770B;&#x662F;&#x5426;&#x662F;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x82E5;&#x4E0D;&#x662F;&#xFF0C;&#x5219;&#x6309;&#x7167;&#x4E00;&#x5B9A;&#x6CD5;&#x5219;&#x8F6C;&#x6362;&#x5230;&#x53E6;&#x4E00;&#x6539;&#x8FDB;&#x540E;&#x66F4;&#x4F18;&#x7684;&#x57FA;&#x672C;&#x53EF;&#x884C;&#x89E3;&#xFF0C;&#x518D;&#x9274;&#x522B;&#xFF0C;&#x82E5;&#x4ECD;&#x4E0D;&#x662F;&#xFF0C;&#x5219;&#x518D;&#x8F6C;&#x6362;&#xFF0C;&#x6309;&#x6B64;&#x91CD;&#x590D;&#x8FDB;&#x884C;&#x3002;&#x56E0;&#x57FA;&#x672C;&#x53EF;&#x884C;&#x89E3;&#x7684;&#x4E2A;&#x6570;&#x6709;&#x9650;&#xFF0C;&#x6545;&#x7ECF;&#x6709;&#x9650;&#x6B21;&#x8F6C;&#x6362;&#x5FC5;&#x80FD;&#x5F97;&#x51FA;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#x3002; &#x6838;&#x5FC3;&#x601D;&#x60F3;&#x2003;&#x2003;1. &#x968F;&#x673A;&#x4EA7;&#x751F;N+1&#x4E2A;&#x70B9;&#xFF0C;&#x6784;&#x9020;&#x5355;&#x7EAF;&#x5F62;&#xFF0C;N&#x4E3A;&#x6240;&#x6C42;&#x6781;&#x503C;&#x7684;&#x7EF4;&#x5EA6; &#x2003;&#x2003;2. &#x5BF9;&#x8FD9;&#x4E9B;&#x70B9;&#x7684;&#x51FD;&#x6570;&#x503C;&#x8FDB;&#x884C;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;&#xFF0C;&#x6C42;&#x51FA;&#x6700;&#x4F18;N&#x4E2A;&#x70B9;&#x7684;&#x91CD;&#x5FC3;pg$$f(p_0) \leq f(p_1) \leq \ldots \leq f(p_N)$$$$p_{g}=\displaystyle \sum_{i=0}^{N-1}\frac {p_{i}}{N}$$ &#x2003;&#x2003;3. &#x5BF9;&#x6700;&#x5DEE;&#x7684;&#x70B9;&#x8FDB;&#x884C;&#x53CD;&#x5C04;&#x5F97;&#x5230;pr$$p_{r}=p_{g}+\rho \cdot (p_{g}-p_{N}) \ , \ &#x5176;&#x4E2D; \rho &#x4E3A;&#x53CD;&#x5C04;&#x7CFB;&#x6570;$$ &#x2003;&#x2003;4. &#x5982;&#x679C;f(p0)&#x2264;f(pr)&lt;f(pN-1)&#xFF0C;pr&#x4EE3;&#x66FF;pN&#xFF0C;&#x56DE;&#x5230;&#x6B65;&#x9AA4;2 &#x2003;&#x2003;5. &#x5982;&#x679C;f(pr)&lt;f(p0)&#xFF0C;&#x8BF4;&#x660E;pr&#x65B9;&#x5411;&#x6709;&#x5229;&#x4E8E;&#x51FD;&#x6570;&#x503C;&#x4E0B;&#x964D;$$p_{e}=p_{g}+ \chi \cdot (p_{r}-p_{g}) \ , \ &#x5176;&#x4E2D; \chi &#x4E3A;&#x5EF6;&#x4F38;&#x7CFB;&#x6570;$$ &#x2003;&#x2003;6. &#x5982;&#x679C;f(pe)&lt;f(pr)&#xFF0C;pe&#x4EE3;&#x66FF;pN&#xFF0C;&#x5426;&#x5219;pr&#x4EE3;&#x66FF;pN&#xFF0C;&#x56DE;&#x5230;&#x6B65;&#x9AA4;2 &#x2003;&#x2003;7. f(pr)&#x2265;f(pN-1)&#xFF0C;&#x8BF4;&#x660E;&#x8981;&#x8FDB;&#x884C;&#x6536;&#x7F29;&#x64CD;&#x4F5C;$$p_{c}= \begin{cases} p_{g}+ \gamma \cdot (p_{r}-p_{g}) &amp; f(p_{r}) &lt; f(p_{N}) \ p_{g}+ \gamma \cdot (p_{l}-p_{r}) &amp; f(p_{r}) \ge f(p_{N}) \end{cases} \ , \ &#x5176;&#x4E2D; \gamma &#x4E3A;&#x6536;&#x7F29;&#x7CFB;&#x6570;$$ &#x2003;&#x2003;8. &#x5982;&#x679C;f(pc)&#x2264;f(pN)&#xFF0C;pc&#x4EE3;&#x66FF;pN&#xFF0C;&#x56DE;&#x5230;&#x6B65;&#x9AA4;2 &#x2003;&#x2003;9. f(pc)&gt;f(pr)&#xFF0C;&#x53EA;&#x4FDD;&#x7559;p0&#xFF0C;&#x5176;&#x4ED6;&#x70B9;&#x5230;p0&#x8DDD;&#x79BB;&#x51CF;&#x534A;&#xFF0C;&#x6536;&#x7F29;&#x5355;&#x7EAF;&#x5F62; &#x2003;&#x2003;10.&#x5982;&#x679C;&#x4E0D;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;&#xFF0C;&#x56DE;&#x5230;&#x6B65;&#x9AA4;2 &#x7B97;&#x6CD5;&#x6D41;&#x7A0B; &#x4EE3;&#x7801;&#x5B9E;&#x6218;&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;(Test Function) NelderMead_main.m123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120clear;clc;close all;%&#x81EA;&#x53D8;&#x91CF;&#x53D6;&#x503C;&#x8303;&#x56F4;range_x=[ones(1,1),-ones(1,1)]*500;%&#x7EF4;&#x5EA6;n=size(range_x,1);%&#x53CD;&#x5C04;&#x7CFB;&#x6570;rhorho=1;%&#x5EF6;&#x4F38;&#x7CFB;&#x6570;ka1=2;%&#x6536;&#x7F29;&#x7CFB;&#x6570;ka2=0.5;%&#x8FED;&#x4EE3;&#x6B21;&#x6570;times=100;%&#x5C1D;&#x8BD5;&#x89E3;&#x6B21;&#x6570;num=50;value=zeros(n,num);tic;for i=1:num %&#x7ED9;x&#x8D4B;&#x521D;&#x503C; x=zeros(n,n+1); for k=1:n x(k,:)=(rand(1,n+1))*(range_x(k,2)-range_x(k,1))+range_x(k,1); end best_value=zeros(1,times); for j=1:times [~,index]=sort(f(x)); %&#x5C06;&#x5C0F;&#x7684;&#x503C;&#x6392;&#x5728;&#x524D;&#x9762; x=x(:,index); %&#x6C42;&#x91CD;&#x5FC3;pg xg=sum(x(:,1:end-1),2)/n; %&#x8FDB;&#x884C;&#x53CD;&#x5C04; xr=xg+rho*(xg-x(:,n+1)); %&#x5224;&#x65AD;&#x81EA;&#x53D8;&#x91CF;&#x662F;&#x5426;&#x5728;&#x8303;&#x56F4; for k=1:n if xr(k)&lt;range_x(k,1) xr(k)=range_x(k,1); end if xr(k)&gt;range_x(k,2) xr(k)=range_x(k,2); end end %&#x5982;&#x679C;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x503C;&#x5728;&#x6700;&#x597D;&#x548C;&#x6700;&#x574F;&#x4E4B;&#x95F4; if f(xr)&gt;=f(x(:,1))&amp;&amp;f(xr)&lt;f(x(:,n)) x(:,n+1)=xr; %&#x5982;&#x679C;&#x65B0;&#x4EA7;&#x751F;&#x7684;&#x70B9;&#x6BD4;&#x6700;&#x5C0F;&#x7684;&#x70B9;&#x8FD8;&#x8981;&#x5C0F;&#xFF0C;&#x8BF4;&#x660E;&#x8FD9;&#x4E2A;&#x65B9;&#x5411;&#x6709;&#x5229;&#x4E8E;&#x503C;&#x7684;&#x51CF;&#x5C0F; elseif f(xr)&lt;f(x(:,1)) %&#x8FDB;&#x4E00;&#x6B65;&#x5411;&#x8FD9;&#x4E2A;&#x65B9;&#x5411;&#x5EF6;&#x4F38; xe=xg+ka1*(xr-xg); for k=1:n if xe(k)&lt;range_x(k,1) xe(k)=range_x(k,1); end if xe(k)&gt;range_x(k,2) xe(k)=range_x(k,2); end end %&#x5982;&#x679C;&#x7B2C;&#x4E8C;&#x6B21;&#x5EF6;&#x4F38;&#x540E;&#x7684;&#x70B9;&#x6BD4;&#x7B2C;&#x4E00;&#x6B21;&#x5EF6;&#x4F38;&#x540E;&#x4EA7;&#x751F;&#x7684;&#x70B9;&#x5C0F;&#xFF0C;&#x5219;&#x7528;&#x7B2C;&#x4E8C;&#x6B21;&#x5EF6;&#x4F38;&#x540E;&#x7684;&#x70B9;&#x66FF;&#x6362;&#x539F;&#x6765;&#x6700;&#x5927;&#x7684;&#x70B9; if f(xe)&lt;f(xr) x(:,n+1)=xe; %&#x5426;&#x5219;&#x7528;&#x7B2C;&#x4E00;&#x6B21;&#x5EF6;&#x4F38;&#x540E;&#x7684;&#x70B9;&#x66FF;&#x6362;&#x539F;&#x6765;&#x6700;&#x5927;&#x7684;&#x70B9; else x(:,n+1)=xr; end %&#x5982;&#x679C;&#x65B0;&#x4EA7;&#x751F;&#x7684;&#x70B9;&#x6BD4;&#x6700;&#x5C0F;&#x7684;&#x70B9;&#x8FD8;&#x8981;&#x5927; else %&#x5982;&#x679C;&#x65B0;&#x4EA7;&#x751F;&#x7684;&#x70B9;&#x6BD4;&#x6700;&#x5927;&#x7684;&#x70B9;&#x5C0F;&#xFF0C;&#x8BF4;&#x660E;&#x8981;&#x8FDB;&#x884C;&#x5916;&#x6536;&#x7F29; if f(xr)&lt;f(x(:,n+1)) xc=xg+ka2*(xr-xg); %&#x5982;&#x679C;&#x65B0;&#x4EA7;&#x751F;&#x7684;&#x70B9;&#x6BD4;&#x6700;&#x5927;&#x7684;&#x70B9;&#x5927;&#xFF0C;&#x8BF4;&#x660E;&#x8981;&#x8FDB;&#x884C;&#x5185;&#x6536;&#x7F29; else xc=xg+ka2*(x(:,n+1)-xg); end %&#x5982;&#x679C;&#x65E0;&#x8BBA;&#x8FDB;&#x884C;&#x5185;&#x6536;&#x7F29;&#x8FD8;&#x662F;&#x5916;&#x6536;&#x7F29;&#x4EA7;&#x751F;&#x7684;&#x503C;&#x90FD;&#x6BD4;&#x6700;&#x5927;&#x503C;&#x8981;&#x5C0F;&#xFF0C;&#x5219;&#x66FF;&#x6362;&#x6700;&#x5927;&#x503C; if f(xc)&lt;=f(x(:,n+1)) x(:,n+1)=xc; %%&#x5982;&#x679C;&#x65E0;&#x8BBA;&#x8FDB;&#x884C;&#x5185;&#x6536;&#x7F29;&#x8FD8;&#x662F;&#x5916;&#x6536;&#x7F29;&#x4EA7;&#x751F;&#x7684;&#x503C;&#x90FD;&#x6BD4;&#x6700;&#x5927;&#x503C;&#x8981;&#x5927;&#xFF0C;&#x5219;&#x7F29;&#x5C0F;&#x8303;&#x56F4;&#x7EE7;&#x7EED;&#x641C;&#x7D22; else for k=2:n+1 x(:,k)=(x(:,1)+x(:,k))/2; end end end best_value(j)=x(find(f(x)==min(f(x)),1)); if j&gt;5&amp;&amp;abs(best_value(j)-best_value(j-5))&lt;1e-5 break; end end value(:,i)=x(:,find(f(x)==min(f(x)),1));endtime=toc;disp([&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;])[mini,index]=min(f(value));disp([&apos;fmin=&apos;,num2str(mini)]);for k=1:n disp([&apos;x&apos;,num2str(k),&apos;=&apos;,num2str(value(k,index))]);endif n==1 hold on; plot(value(index),mini,&apos;ro&apos;); plot_x=range_x(1):(range_x(2)-range_x(1))/1000:range_x(2); plot_y=f(plot_x); plot(plot_x,plot_y); text((range_x(1)+range_x(2))/2,max(plot_y)+0.1*(max(plot_y)-min(plot_y)),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]); hold off;endif n==2 func=@(x1,x2)x1.*sin(sqrt(abs(x1)))+x2.*sin(sqrt(abs(x2))); plot_x=range_x(1,1):(range_x(1,2)-range_x(1,1))/1000:range_x(1,2); plot_y=range_x(2,1):(range_x(2,2)-range_x(2,1))/1000:range_x(2,2); [plot_x,plot_y] =meshgrid(plot_x,plot_y); plot_z=func(plot_x,plot_y); surf(plot_x,plot_y,plot_z); xlabel(&apos;x1&apos;); ylabel(&apos;x2&apos;); zlabel(&apos;y&apos;); hold on; plot3(value(1,index),value(2,index),mini,&apos;ko&apos;) text((range_x(1,1)+range_x(1,2))/2,(range_x(2,1)+range_x(2,2))/2,max(max(plot_z))+0.5*(max(max(plot_z))-min(min(plot_z))),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]); hold off;end f.m123456function res=f(x)func=@(x)(x).*sin(sqrt(abs(x)));res=zeros(1,size(x,2));for i=1:size(x,1) res=res+func(x(i,:));end &#x5B9E;&#x9A8C;&#x7ED3;&#x679C;$$f(x)=x \cdot \sin(\sqrt{\lvert x \rvert}) \ , \ x \in [-500,500]$$ $$&#x7406;&#x8BBA;&#x503C;&#xFF1A;f(x)_{min}=f(-420.96874592006)=-418.982887272434$$ $$&#x6240;&#x6C42;&#x503C;&#xFF1A;f(x)_{min}=f(-420.968746504328)=-418.982887272434$$ &#x6027;&#x80FD;&#x6BD4;&#x8F83; &#x4F18;&#x70B9;&#xFF1A; &#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5C0F; &#x5177;&#x6709;&#x5FEB;&#x901F;&#x968F;&#x673A;&#x7684;&#x641C;&#x7D22;&#x80FD;&#x529B; &#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898; &#x6BCF;&#x6B21;&#x8FED;&#x4EE3;&#x90FD;&#x66F4;&#x63A5;&#x8FD1;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x7CBE;&#x5EA6;&#x6700;&#x9AD8; &#x7F3A;&#x70B9;&#xFF1A; &#x7B97;&#x6CD5;&#x6027;&#x80FD;&#x4E0E;&#x521D;&#x59CB;&#x503C;&#x6709;&#x5173; &#x4E0D;&#x9002;&#x7528;&#x4E8E;&#x591A;&#x7EF4;&#x7684;&#x6700;&#x4F18;&#x503C;&#x6C42;&#x89E3; &#x53EF;&#x80FD;&#x843D;&#x5165;&#x5176;&#x4ED6;&#x7684;&#x5C40;&#x90E8;&#x6700;&#x5C0F;&#x503C; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>计算机基础知识</category>
        <category>全局搜索方法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[粒子群算法(PSO)]]></title>
    <url>%2F2019%2F05%2F24%2Foptimization_PSO%2F</url>
    <content type="text"><![CDATA[&#x7C92;&#x5B50;&#x7FA4;&#x7B97;&#x6CD5; &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;PSO(Particle Swarm Optimization):&#x53D7;&#x5230;&#x98DE;&#x9E1F;&#x96C6;&#x7FA4;&#x6D3B;&#x52A8;&#x7684;&#x89C4;&#x5F8B;&#x6027;&#x542F;&#x53D1;&#xFF0C;&#x8FDB;&#x800C;&#x5229;&#x7528;&#x7FA4;&#x4F53;&#x667A;&#x80FD;&#x5EFA;&#x7ACB;&#x7684;&#x4E00;&#x4E2A;&#x7B80;&#x5316;&#x6A21;&#x578B;&#x3002;&#x7C92;&#x5B50;&#x7FA4;&#x7B97;&#x6CD5;&#x5728;&#x5BF9;&#x52A8;&#x7269;&#x96C6;&#x7FA4;&#x6D3B;&#x52A8;&#x884C;&#x4E3A;&#x89C2;&#x5BDF;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x5229;&#x7528;&#x7FA4;&#x4F53;&#x4E2D;&#x7684;&#x4E2A;&#x4F53;&#x5BF9;&#x4FE1;&#x606F;&#x7684;&#x5171;&#x4EAB;&#x4F7F;&#x6574;&#x4E2A;&#x7FA4;&#x4F53;&#x7684;&#x8FD0;&#x52A8;&#x5728;&#x95EE;&#x9898;&#x6C42;&#x89E3;&#x7A7A;&#x95F4;&#x4E2D;&#x4EA7;&#x751F;&#x4ECE;&#x65E0;&#x5E8F;&#x5230;&#x6709;&#x5E8F;&#x7684;&#x6F14;&#x5316;&#x8FC7;&#x7A0B;&#xFF0C;&#x4ECE;&#x800C;&#x83B7;&#x5F97;&#x6700;&#x4F18;&#x89E3;&#x3002; &#x6838;&#x5FC3;&#x601D;&#x60F3;&#x2003;&#x2003;1. &#x968F;&#x673A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x7C92;&#x5B50; &#x2003;&#x2003;2. &#x627E;&#x51FA;&#x6240;&#x6709;&#x7C92;&#x5B50;&#x4E2D;&#x9002;&#x5E94;&#x5EA6;&#x6700;&#x4F18;&#x7684;&#x7C92;&#x5B50;gbest$$g_{best}=\underset{x}{arg \ min} \ f(x)$$ &#x2003;&#x2003;3. &#x66F4;&#x65B0;&#x6BCF;&#x4E00;&#x4E2A;&#x7C92;&#x5B50;&#x7684;&#x98DE;&#x884C;&#x901F;&#x5EA6;$$v_{i}&#x2019;=w \cdot v_{i}+c1 \cdot r_{i} \cdot (p_{i}-x_{i})+c2 \cdot s_{i} \cdot (g_{best}-x_{i})$$ &#x2003;&#x2003;4. &#x83B7;&#x5F97;&#x6BCF;&#x4E2A;&#x7C92;&#x5B50;&#x5F53;&#x524D;&#x4F4D;&#x7F6E;xi&#x548C;&#x8BE5;&#x7C92;&#x5B50;&#x5728;&#x98DE;&#x884C;&#x4E2D;&#x5230;&#x8FBE;&#x8FC7;&#x7684;&#x6700;&#x4F18;&#x4F4D;&#x7F6E;pi$$x_{i}&#x2019;=x_{i}+v_{i}&#x2019;$$$$p_{i}&#x2019;= \begin{cases} x_{i}&#x2019; &amp; f(x_{i}&#x2019;) &lt; f(p_{i}) \ p_{i} &amp; f(x_{i}&#x2019;) \ge f(p_{i}) \end{cases}$$ &#x2003;&#x2003;5. &#x56DE;&#x5230;&#x6B65;&#x9AA4;2&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6; &#x2003;&#x2003;6. &#x6B64;&#x65F6;&#x7C92;&#x5B50;&#x96C6;&#x7FA4;&#xFF0C;&#x7C92;&#x5B50;&#x7FA4;&#x4F4D;&#x7F6E;&#x4E3A;&#x6781;&#x5C0F;&#x503C;&#xFF0C;&#x6700;&#x5C0F;&#x7684;p&#x4E3A;&#x7B97;&#x6CD5;&#x7684;&#x6700;&#x4F18;&#x89E3; &#x2003;&#x2003;7. &#x56DE;&#x5230;&#x6B65;&#x9AA4;2&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6; &#x7B97;&#x6CD5;&#x6D41;&#x7A0B; &#x4EE3;&#x7801;&#x5B9E;&#x6218;&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;(Test Function) PSO_main.m1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283clear;clc;close all;%&#x81EA;&#x53D8;&#x91CF;&#x53D6;&#x503C;&#x8303;&#x56F4;range_x=[ones(1,1),-ones(1,1)]*500;%&#x7EF4;&#x5EA6;n=size(range_x,1);%&#x8FED;&#x4EE3;&#x6B21;&#x6570;times=100;%w&#x4E3A;&#x60EF;&#x6027;&#x6743;&#x91CD;w=0.8;%c1&#x4E3A;&#x81EA;&#x8EAB;&#x8BA4;&#x77E5;&#x6743;&#x91CD;c1=1;%c2&#x4E3A;&#x793E;&#x4F1A;&#x8BA4;&#x77E5;&#x6743;&#x91CD;c2=1;%&#x7C92;&#x5B50;&#x7FA4;&#x7684;&#x4E2A;&#x6570;gn=1000;%&#x7C92;&#x5B50;&#x7FA4;&#x7684;&#x521D;&#x59CB;&#x4F4D;&#x7F6E;x=zeros(n,gn);for k=1:n x(k,:)=(rand(1,gn))*(range_x(k,2)-range_x(k,1))+range_x(k,1);end%&#x4E2A;&#x4F53;&#x6781;&#x503C;p=x;%v&#x4EE3;&#x8868;&#x7C92;&#x5B50;&#x7684;&#x901F;&#x5EA6;v=zeros(n,gn);%&#x8BBE;&#x7F6E;&#x5F53;&#x524D;&#x6700;&#x4F18;&#x89E3;best_value=zeros(1,times);tic;for i=1:times [solve,gbest]=min(f(x)); for j=1:gn %&#x901F;&#x5EA6;&#x5206;&#x4E3A;3&#x4E2A;&#x90E8;&#x5206;&#xFF0C;&#x60EF;&#x6027;&#x901F;&#x5EA6;&#xFF0C;&#x8BE5;&#x70B9;&#x6700;&#x4F18;&#x548C;&#x5168;&#x5C40;&#x6700;&#x4F18; v(:,j)=w*v(:,j)+c1*rand(n,1).*(p(:,j)-x(:,j))+c2*rand(n,1).*(x(:,gbest)-x(:,j)); x(:,j)=x(:,j)+v(:,j); %&#x9650;&#x5236;&#x89E3;&#x7684;&#x8303;&#x56F4; for k=1:n if x(k,j)&lt;range_x(k,1) x(k,j)=range_x(k,1); end if x(k,j)&gt;range_x(k,2) x(k,j)=range_x(k,2); end end if f(x(:,j))&lt;f(p(:,j)) p(:,j)=x(:,j); end end best_value(i)=min(f(p)); if i&gt;5&amp;&amp;abs(best_value(i)-best_value(i-5))&lt;1e-5 break; endendtime=toc;disp([&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;])[mini,index]=min(f(p));disp([&apos;fmin=&apos;,num2str(mini)]);for k=1:n disp([&apos;x&apos;,num2str(k),&apos;=&apos;,num2str(p(k,index))]);endif n==1 hold on; plot(p(index),mini,&apos;ro&apos;); plot_x=range_x(1):(range_x(2)-range_x(1))/1000:range_x(2); plot_y=f(plot_x); plot(plot_x,plot_y); text((range_x(1)+range_x(2))/2,max(plot_y)+0.1*(max(plot_y)-min(plot_y)),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]); hold off;endif n==2 %&#x6240;&#x6C42;&#x6700;&#x5C0F;&#x503C;&#x7684;&#x51FD;&#x6570; func=@(x1,x2)x1.*sin(sqrt(abs(x1)))+x2.*sin(sqrt(abs(x2))); plot_x=range_x(1,1):(range_x(1,2)-range_x(1,1))/1000:range_x(1,2); plot_y=range_x(2,1):(range_x(2,2)-range_x(2,1))/1000:range_x(2,2); [plot_x,plot_y] =meshgrid(plot_x,plot_y); plot_z=func(plot_x,plot_y); surf(plot_x,plot_y,plot_z); xlabel(&apos;x1&apos;); ylabel(&apos;x2&apos;); zlabel(&apos;y&apos;); hold on; plot3(p(1,index),p(2,index),mini,&apos;ko&apos;) text((range_x(1,1)+range_x(1,2))/2,(range_x(2,1)+range_x(2,2))/2,max(max(plot_z))+0.5*(max(max(plot_z))-min(min(plot_z))),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]); hold off;end f.m123456function res=f(x)func=@(x)(x).*sin(sqrt(abs(x)));res=zeros(1,size(x,2));for i=1:size(x,1) res=res+func(x(i,:));end &#x5B9E;&#x9A8C;&#x7ED3;&#x679C;$$f(x)=x \cdot \sin(\sqrt{\lvert x \rvert}) \ , \ x \in [-500,500]$$ $$&#x7406;&#x8BBA;&#x503C;&#xFF1A;f(x)_{min}=f(-420.96874592006)=-418.982887272434$$ $$&#x6240;&#x6C42;&#x503C;&#xFF1A;f(x)_{min}=f(-420.968750420615)=-418.982887272432$$ &#x6027;&#x80FD;&#x6BD4;&#x8F83; &#x4F18;&#x70B9;&#xFF1A; &#x641C;&#x7D22;&#x80FD;&#x529B;&#x6700;&#x5FEB; &#x4ECE;&#x7FA4;&#x4F53;&#x51FA;&#x53D1;&#xFF0C;&#x5177;&#x6709;&#x5E76;&#x884C;&#x6027; &#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898; &#x7F3A;&#x70B9;&#xFF1A; &#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5927; &#x5B58;&#x5728;&#x65E9;&#x719F;&#x6536;&#x655B;&#x95EE;&#x9898; &#x5BF9;&#x521D;&#x59CB;&#x7C92;&#x5B50;&#x7FA4;&#x7684;&#x6570;&#x91CF;&#x6709;&#x5F88;&#x9AD8;&#x7684;&#x8981;&#x6C42; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>计算机基础知识</category>
        <category>全局搜索方法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[蚁群算法(ACO)]]></title>
    <url>%2F2019%2F05%2F23%2Foptimization_ACO%2F</url>
    <content type="text"><![CDATA[&#x8681;&#x7FA4;&#x7B97;&#x6CD5; &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;ACO(ant colony optimization):&#x7814;&#x7A76;&#x8682;&#x8681;&#x89C5;&#x98DF;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x53D1;&#x73B0;&#x5355;&#x4E2A;&#x8682;&#x8681;&#x7684;&#x884C;&#x4E3A;&#x6BD4;&#x8F83;&#x7B80;&#x5355;&#xFF0C;&#x4F46;&#x662F;&#x8681;&#x7FA4;&#x6574;&#x4F53;&#x5374;&#x53EF;&#x4EE5;&#x4F53;&#x73B0;&#x4E00;&#x4E9B;&#x667A;&#x80FD;&#x7684;&#x884C;&#x4E3A;&#x3002;&#x4F8B;&#x5982;&#x8681;&#x7FA4;&#x53EF;&#x4EE5;&#x5728;&#x4E0D;&#x540C;&#x7684;&#x73AF;&#x5883;&#x4E0B;&#xFF0C;&#x5BFB;&#x627E;&#x6700;&#x77ED;&#x5230;&#x8FBE;&#x98DF;&#x7269;&#x6E90;&#x7684;&#x8DEF;&#x5F84;&#x3002;&#x8682;&#x8681;&#x4F1A;&#x5728;&#x5176;&#x7ECF;&#x8FC7;&#x7684;&#x8DEF;&#x5F84;&#x4E0A;&#x91CA;&#x653E;&#x4E00;&#x79CD;&#x53EF;&#x4EE5;&#x79F0;&#x4E4B;&#x4E3A;&#x4FE1;&#x606F;&#x7D20;&#x7684;&#x7269;&#x8D28;&#xFF0C;&#x8681;&#x7FA4;&#x5185;&#x7684;&#x8682;&#x8681;&#x5BF9;&#x4FE1;&#x606F;&#x7D20;&#x5177;&#x6709;&#x611F;&#x77E5;&#x80FD;&#x529B;&#xFF0C;&#x5B83;&#x4EEC;&#x4F1A;&#x6CBF;&#x7740;&#x4FE1;&#x606F;&#x7D20;&#x6D53;&#x5EA6;&#x8F83;&#x9AD8;&#x8DEF;&#x5F84;&#x884C;&#x8D70;&#xFF0C;&#x800C;&#x6BCF;&#x53EA;&#x8DEF;&#x8FC7;&#x7684;&#x8682;&#x8681;&#x90FD;&#x4F1A;&#x5728;&#x8DEF;&#x4E0A;&#x7559;&#x4E0B;&#x4FE1;&#x606F;&#x7D20;&#xFF0C;&#x5F62;&#x6210;&#x4E00;&#x79CD;&#x7C7B;&#x4F3C;&#x6B63;&#x53CD;&#x9988;&#x7684;&#x673A;&#x5236;&#x3002; &#x6838;&#x5FC3;&#x601D;&#x60F3;&#x2003;&#x2003;1. &#x968F;&#x673A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x8682;&#x8681; &#x2003;&#x2003;2. &#x5224;&#x65AD;&#x8682;&#x8681;&#x6240;&#x5728;&#x4F4D;&#x7F6E;&#x7684;&#x503C;&#x8D8A;&#x5C0F;&#xFF0C;&#x4FE1;&#x606F;&#x7D20;&#x8D8A;&#x591A; &#x2003;&#x2003;3. &#x5982;&#x679C;&#x4FE1;&#x606F;&#x7D20;&#x8F83;&#x591A;&#xFF0C;&#x8682;&#x8681;&#x5C0F;&#x5E45;&#x79FB;&#x52A8;&#xFF0C;&#x4FE1;&#x606F;&#x7D20;&#x8F83;&#x5C11;&#xFF0C;&#x8682;&#x8681;&#x5927;&#x5E45;&#x79FB;&#x52A8; &#x2003;&#x2003;4. &#x5982;&#x679C;&#x8682;&#x8681;&#x79FB;&#x52A8;&#x4E4B;&#x540E;&#x503C;&#x53D8;&#x5C0F;&#xFF0C;&#x5219;&#x8BF4;&#x660E;&#x79FB;&#x52A8;&#x65B9;&#x5411;&#x6B63;&#x786E; &#x2003;&#x2003;5. &#x56DE;&#x5230;&#x6B65;&#x9AA4;2&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6; &#x2003;&#x2003;6. &#x6B64;&#x65F6;&#x8682;&#x8681;&#x96C6;&#x7FA4;&#xFF0C;&#x8681;&#x7FA4;&#x4F4D;&#x7F6E;&#x4E3A;&#x6781;&#x5C0F;&#x503C;&#xFF0C;&#x6BD4;&#x8F83;&#x53EF;&#x5F97;&#x8BE5;&#x7B97;&#x6CD5;&#x7684;&#x6700;&#x4F18;&#x89E3; &#x7B97;&#x6CD5;&#x6D41;&#x7A0B; &#x4EE3;&#x7801;&#x5B9E;&#x6218;&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;(Test Function) ACO_main.m1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192clear;clc;close all;%&#x81EA;&#x53D8;&#x91CF;&#x53D6;&#x503C;&#x8303;&#x56F4;range_x=[ones(1,1),-ones(1,1)]*500;%&#x7EF4;&#x5EA6;n=size(range_x,1);%&#x8682;&#x8681;&#x6570;m=1000;%&#x8FED;&#x4EE3;&#x6B21;&#x6570;times=100;%&#x4FE1;&#x606F;&#x7D20;&#x6325;&#x53D1;&#x7CFB;&#x6570;rho=0.8;%&#x8F6C;&#x79FB;&#x6982;&#x7387;&#x5E38;&#x6570;p0=1;%&#x8F6C;&#x79FB;&#x6982;&#x7387;p=zeros(1,m);%x&#x4E3A;&#x8681;&#x7FA4;&#x7684;&#x521D;&#x59CB;&#x4F4D;&#x7F6E;x=zeros(n,m);for k=1:n x(k,:)=(rand(1,m))*(range_x(k,2)-range_x(k,1))+range_x(k,1);end%tau&#x4E3A;&#x4FE1;&#x606F;&#x7D20;tau=-f(x);%&#x8BBE;&#x7F6E;&#x5F53;&#x524D;&#x6700;&#x4F18;&#x89E3;best_value=zeros(1,times);tic;for i=1:times [~,bestindex]=max(tau); for j=1:m %&#x4FE1;&#x606F;&#x7D20;&#x8D8A;&#x5927;&#x8D8A;&#x4E0D;&#x5BB9;&#x6613;&#x8F6C;&#x79FB; p(j)=(tau(bestindex)-tau(j))/tau(bestindex); if p(j)&lt;p0 %&#x5982;&#x679C;&#x4FE1;&#x606F;&#x7D20;&#x8F83;&#x591A;&#xFF0C;&#x8F6C;&#x79FB;&#x6B65;&#x4F10;&#x5C31;&#x8F83;&#x5C0F; temp=x(:,j)+(rand(n,1)*2-1)/i; else temp=zeros(n,1); %&#x5982;&#x679C;&#x4FE1;&#x606F;&#x7D20;&#x8F83;&#x5C11;&#xFF0C;&#x8F6C;&#x79FB;&#x6B65;&#x4F10;&#x5C31;&#x8F83;&#x5927; for k=1:n temp(k)=x(k,j)+(rand(1,1)-0.5)*(range(k,2)-range(k,1)); end end %&#x9650;&#x5236;&#x8FB9;&#x754C;&#x6761;&#x4EF6; for k=1:n if temp(k)&lt;range_x(k,1) temp(k)=range_x(k,1); end if temp(k)&gt;range_x(k,2) temp(k)=range_x(k,2); end end %&#x5982;&#x679C;&#x79FB;&#x52A8;&#x540E;&#x503C;&#x53D8;&#x5C0F;&#xFF0C;&#x5219;&#x79FB;&#x52A8; if f(temp)&lt;f(x(:,j)) x(:,j)=temp; end %&#x66F4;&#x65B0;&#x4FE1;&#x606F;&#x7D20;&#xFF0C;&#x51FD;&#x6570;&#x503C;&#x8D8A;&#x5C0F;&#xFF0C;&#x4FE1;&#x606F;&#x91CF;&#x8D8A;&#x5927; tau(j)=(1-rho)*tau(j)-f(x(:,j)); end best_value(i)=min(f(x)); if i&gt;5&amp;&amp;abs(best_value(i)-best_value(i-5))&lt;1e-5 break; endendtime=toc;disp([&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;])[mini,index]=min(f(x));disp([&apos;fmin=&apos;,num2str(mini)]);for k=1:n disp([&apos;x&apos;,num2str(k),&apos;=&apos;,num2str(x(k,index))]);endif n==1 hold on; plot(x(index),mini,&apos;ro&apos;); plot_x=range_x(1):(range_x(2)-range_x(1))/1000:range_x(2); plot_y=f(plot_x); plot(plot_x,plot_y); text((range_x(1)+range_x(2))/2,max(plot_y)+0.1*(max(plot_y)-min(plot_y)),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]); hold off;endif n==2 func=@(x1,x2)x1.*sin(sqrt(abs(x1)))+x2.*sin(sqrt(abs(x2))); plot_x=range_x(1,1):(range_x(1,2)-range_x(1,1))/1000:range_x(1,2); plot_y=range_x(2,1):(range_x(2,2)-range_x(2,1))/1000:range_x(2,2); [plot_x,plot_y] =meshgrid(plot_x,plot_y); plot_z=func(plot_x,plot_y); surf(plot_x,plot_y,plot_z); xlabel(&apos;x1&apos;); ylabel(&apos;x2&apos;); zlabel(&apos;y&apos;); hold on; plot3(x(1,index),x(2,index),mini,&apos;ko&apos;) text((range_x(1,1)+range_x(1,2))/2,(range_x(2,1)+range_x(2,2))/2,max(max(plot_z))+0.5*(max(max(plot_z))-min(min(plot_z))),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]); hold off;end f.m123456function res=f(x)func=@(x)(x).*sin(sqrt(abs(x)));res=zeros(1,size(x,2));for i=1:size(x,1) res=res+func(x(i,:));end &#x5B9E;&#x9A8C;&#x7ED3;&#x679C;$$f(x)=x \cdot \sin(\sqrt{\lvert x \rvert}) \ , \ x \in [-500,500]$$ $$&#x7406;&#x8BBA;&#x503C;&#xFF1A;f(x)_{min}=f(-420.96874592006)=-418.982887272434$$ $$&#x6240;&#x6C42;&#x503C;&#xFF1A;f(x)_{min}=f(-420.959294517745)=-418.982875999576$$ &#x6027;&#x80FD;&#x6BD4;&#x8F83; &#x4F18;&#x70B9;&#xFF1A; &#x641C;&#x7D22;&#x901F;&#x5EA6;&#x8F83;&#x5FEB; &#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5C0F; &#x4ECE;&#x7FA4;&#x4F53;&#x51FA;&#x53D1;&#xFF0C;&#x5177;&#x6709;&#x5E76;&#x884C;&#x6027; &#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898; &#x5177;&#x6709;&#x53EF;&#x6269;&#x5C55;&#x6027;&#xFF0C;&#x5BB9;&#x6613;&#x4E0E;&#x5176;&#x4ED6;&#x7B97;&#x6CD5;&#x7ED3;&#x5408; &#x7F3A;&#x70B9;&#xFF1A; &#x5BF9;&#x521D;&#x59CB;&#x8682;&#x8681;&#x7684;&#x6570;&#x91CF;&#x6709;&#x5F88;&#x9AD8;&#x7684;&#x8981;&#x6C42; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>计算机基础知识</category>
        <category>全局搜索方法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[免疫算法(IA)]]></title>
    <url>%2F2019%2F05%2F22%2Foptimization_IA%2F</url>
    <content type="text"><![CDATA[&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x8BF4;&#x660E; &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;IA(Immune Algorithm):&#x514D;&#x75AB;&#x7B97;&#x6CD5;&#x57FA;&#x4E8E;&#x751F;&#x7269;&#x514D;&#x75AB;&#x7CFB;&#x7EDF;&#x7684;&#x57FA;&#x672C;&#x673A;&#x5236;&#xFF0C;&#x6A21;&#x4EFF;&#x4E86;&#x4EBA;&#x4F53;&#x7684;&#x514D;&#x75AB;&#x7CFB;&#x7EDF;&#xFF0C;&#x89E3;&#x51B3;&#x4E86;&#x9057;&#x4F20;&#x7B97;&#x6CD5;&#x7684;&#x65E9;&#x719F;&#x6536;&#x655B;&#x95EE;&#x9898;&#x3002;&#x56E0;&#x4E3A;&#x514D;&#x75AB;&#x7CFB;&#x7EDF;&#x5177;&#x6709;&#x8FA8;&#x8BC6;&#x8BB0;&#x5FC6;&#x7684;&#x7279;&#x70B9;&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x4EE5;&#x66F4;&#x5FEB;&#x8BC6;&#x522B;&#x7FA4;&#x4F53;&#xFF0C;&#x9762;&#x5BF9;&#x5F85;&#x6C42;&#x89E3;&#x95EE;&#x9898;&#x65F6;&#xFF0C;&#x76F8;&#x5F53;&#x4E8E;&#x9762;&#x5BF9;&#x5404;&#x79CD;&#x6297;&#x539F;&#xFF0C;&#x53EF;&#x4EE5;&#x63D0;&#x524D;&#x6CE8;&#x5C04;&#x75AB;&#x82D7;&#x6291;&#x5236;&#x9000;&#x5316;&#x95EE;&#x9898;&#xFF0C;&#x4ECE;&#x800C;&#x66F4;&#x52A0;&#x4FDD;&#x6301;&#x4F18;&#x80DC;&#x52A3;&#x6C70;&#x7684;&#x7279;&#x70B9;&#x3002; &#x6838;&#x5FC3;&#x601D;&#x60F3;&#x2003;&#x2003;1. &#x968F;&#x673A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x8BB0;&#x5FC6;&#x7EC6;&#x80DE; &#x2003;&#x2003;2. &#x53D6;&#x51FA;&#x90E8;&#x5206;&#x8BB0;&#x5FC6;&#x7EC6;&#x80DE;&#xFF0C;&#x5269;&#x4E0B;&#x6297;&#x4F53;&#x7531;&#x968F;&#x673A;&#x4EA7;&#x751F; &#x2003;&#x2003;3. &#x6839;&#x636E;&#x9002;&#x5E94;&#x5EA6;&#x5BF9;&#x6297;&#x4F53;&#x91C7;&#x7528;&#x67D0;&#x79CD;&#x65B9;&#x5F0F;&#x8FDB;&#x884C;&#x9009;&#x62E9; &#x2003;&#x2003;4. &#x5BF9;&#x9009;&#x62E9;&#x5269;&#x4F59;&#x7684;&#x6297;&#x4F53;&#x8FDB;&#x884C;&#x9057;&#x4F20;&#x64CD;&#x4F5C;&#xFF0C;&#x4EA7;&#x751F;&#x65B0;&#x7684;&#x6297;&#x4F53; &#x2003;&#x2003;5. &#x56DE;&#x5230;&#x6B65;&#x9AA4;3&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6; &#x2003;&#x2003;6. &#x5C06;&#x4EA7;&#x751F;&#x7684;&#x65B0;&#x6297;&#x4F53;&#x548C;&#x8BB0;&#x5FC6;&#x7EC6;&#x80DE;&#x6BD4;&#x8F83;&#xFF0C;&#x4EA7;&#x751F;&#x65B0;&#x7684;&#x8BB0;&#x5FC6;&#x7EC6;&#x80DE; &#x2003;&#x2003;7. &#x56DE;&#x5230;&#x6B65;&#x9AA4;2&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6; &#x2003;&#x2003;8. &#x6B64;&#x65F6;&#x5F97;&#x5230;&#x514D;&#x75AB;&#x529B;&#x6700;&#x597D;&#x7684;&#x8BB0;&#x5FC6;&#x7EC6;&#x80DE;&#xFF0C;&#x6BD4;&#x8F83;&#x53EF;&#x5F97;&#x8BE5;&#x7B97;&#x6CD5;&#x7684;&#x6700;&#x4F18;&#x89E3; &#x7B97;&#x6CD5;&#x6D41;&#x7A0B; &#x4EE3;&#x7801;&#x5B9E;&#x6218;&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;(Test Function) IA_main.m123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121clear;clc;close all;%&#x81EA;&#x53D8;&#x91CF;&#x53D6;&#x503C;&#x8303;&#x56F4;range_x=[ones(1,1),-ones(1,1)]*500;%&#x7EF4;&#x5EA6;n=size(range_x,1);%&#x79CD;&#x7FA4;&#x6570;&#x91CF;gn=400;%&#x9057;&#x4F20;&#x8FED;&#x4EE3;&#x65F6;&#x8FDB;&#x5165;&#x4E0B;&#x4E00;&#x4EE3;&#x7684;&#x6570;&#x91CF;m=50 ;%&#x4ECE;&#x8BB0;&#x5FC6;&#x7EC6;&#x80DE;&#x79CD;&#x62FF;&#x51FA;&#x7684;&#x4E2A;&#x6570;l=200;%&#x8FED;&#x4EE3;&#x6B21;&#x6570;times=200;%&#x514D;&#x75AB;&#x4F5C;&#x7528;&#x6B21;&#x6570;t=10;%&#x8BB0;&#x5FC6;&#x7EC6;&#x80DE;remember=zeros(n,gn);for k=1:n remember(k,:)=(rand(1,gn))*(range_x(k,2)-range_x(k,1))+range_x(k,1);endticfor p=1:t tem=zeros(n,gn-l); for k=1:n tem(k,:)=(rand(1,gn-l))*(range_x(k,2)-range_x(k,1))+range_x(k,1); end group=[remember(:,randperm(gn,l)),tem]; %&#x8BBE;&#x7F6E;&#x5F53;&#x524D;&#x6700;&#x4F18;&#x89E3; best_value=zeros(1,times); for k=1:times y=f(group); %&#x5168;&#x90E8;&#x53D8;&#x6210;&#x6B63;&#x503C; if min(y)&lt;0 tem=y-min(y)*1.0001; else tem=y+0.1; end %&#x503C;&#x8D8A;&#x5C0F;&#x9002;&#x5E94;&#x8D8A;&#x597D; tem=1./tem; child=zeros(n,gn); %&#x6311;&#x9009;m&#x4E2A;&#x79CD;&#x7FA4;&#x8FDB;&#x5165;&#x4E0B;&#x4E00;&#x4EE3; for i=1:m %&#x8F6E;&#x76D8;&#x8D4C;&#x9009;&#x62E9;&#xFF0C;&#x9002;&#x5E94;&#x5927;&#x7684;&#x9009;&#x62E9;&#x6982;&#x7387;&#x5927; temp=zeros(1,gn-i+1); for j=1:gn-i+1 temp(j)=sum(tem(1:j)); end temp=temp/temp(gn-i+1); %&#x4FDD;&#x7559;&#x6700;&#x5408;&#x9002;&#x7684;&#x7269;&#x79CD; choose=find(temp&gt;rand(1),1); child(:,i)=group(:,choose); group=[group(:,1:choose-1),group(:,choose+1:end)]; tem=[tem(1:choose-1),tem(choose+1:end)]; end %&#x67D3;&#x8272;&#x4F53;&#x4EA4;&#x6362;,&#x4FDD;&#x7559;&#x7684;&#x7269;&#x79CD;&#x4EA7;&#x751F;&#x540E;&#x4EE3;&#x65F6;&#x53D1;&#x751F;&#x57FA;&#x56E0;&#x91CD;&#x7EC4; for i=1:floor((gn-m)/2) exchange=randperm(m,2); a=rand(n,1); child(:,i*2-1+m)=a.*child(:,exchange(1))+(1-a).*child(:,exchange(2)); child(:,i*2+m)=(1-a).*child(:,exchange(1))+a.*child(:,exchange(2)); end if mod(gn-m,2)==1 exchange=randperm(m,2); child(:,gn)=(child(:,exchange(1))+child(:,exchange(2)))/2; end %&#x57FA;&#x56E0;&#x91CD;&#x7EC4;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x53EF;&#x80FD;&#x53D1;&#x751F;&#x67D3;&#x8272;&#x4F53;&#x53D8;&#x5F02; if rand(1)&lt;0.1 exchange=randperm(gn-m,1); a=rand(1); for j=1:n child(j,exchange+m)=a.*child(j,exchange+m)+(1-a).*(rand(1)*(range(j,2)-range(j,1))+range(j,1)); end end %&#x91CD;&#x7EC4;&#x4E4B;&#x540E;&#x540E;&#x4EE3;&#x53D8;&#x6210;&#x5F53;&#x524D;&#x79CD;&#x7FA4; group=child; best_value(k)=min(f(group)); if k&gt;5&amp;&amp;abs(best_value(k)-best_value(k-5))&lt;1e-5 break; end end %&#x5C06;&#x672C;&#x6B21;&#x514D;&#x75AB;&#x8FC7;&#x7A0B;&#x4E2D;&#x6700;&#x597D;&#x7684;&#x548C;&#x8BB0;&#x5FC6;&#x7EC6;&#x80DE;&#x6BD4;&#x8F83;&#xFF0C;&#x9009;&#x53D6;&#x6700;&#x597D;&#x7684;&#x4F5C;&#x4E3A;&#x8BB0;&#x5FC6;&#x7EC6;&#x80DE; if min(f(group))&lt;=min(f(remember)) [~,index]=min(f(group)); remember=ones(n,gn).*repmat(group(:,index),1,gn); else [~,index]=min(f(remember)); remember=ones(n,gn).*repmat(group(:,index),1,gn); endendtime=toc;disp([&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;])[mini,index]=min(f(remember));disp([&apos;fmin=&apos;,num2str(mini)]);for k=1:n disp([&apos;x&apos;,num2str(k),&apos;=&apos;,num2str(remember(k,index))]);endif n==1 hold on; plot(remember(index),mini,&apos;ro&apos;); plot_x=range_x(1):(range_x(2)-range_x(1))/1000:range_x(2); plot_y=f(plot_x); plot(plot_x,plot_y); text((range_x(1)+range_x(2))/2,max(plot_y)+0.1*(max(plot_y)-min(plot_y)),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]); hold off;endif n==2 %&#x6240;&#x6C42;&#x6700;&#x5C0F;&#x503C;&#x7684;&#x51FD;&#x6570; func=@(x1,x2)x1.*sin(sqrt(abs(x1)))+x2.*sin(sqrt(abs(x2))); plot_x=range_x(1,1):(range_x(1,2)-range_x(1,1))/1000:range_x(1,2); plot_y=range_x(2,1):(range_x(2,2)-range_x(2,1))/1000:range_x(2,2); [plot_x,plot_y] =meshgrid(plot_x,plot_y); plot_z=func(plot_x,plot_y); surf(plot_x,plot_y,plot_z); xlabel(&apos;x1&apos;); ylabel(&apos;x2&apos;); zlabel(&apos;y&apos;); hold on; plot3(remember(1,index),remember(2,index),mini,&apos;ko&apos;) text((range_x(1,1)+range_x(1,2))/2,(range_x(2,1)+range_x(2,2))/2,max(max(plot_z))+0.5*(max(max(plot_z))-min(min(plot_z))),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]); hold off;end f.m123456function res=f(x)func=@(x)(x).*sin(sqrt(abs(x)));res=zeros(1,size(x,2));for i=1:size(x,1) res=res+func(x(i,:));end &#x5B9E;&#x9A8C;&#x7ED3;&#x679C;$$f(x)=x \cdot \sin(\sqrt{\lvert x \rvert}) \ , \ x \in [-500,500]$$ $$&#x7406;&#x8BBA;&#x503C;&#xFF1A;f(x)_{min}=f(-420.96874592006)=-418.982887272434$$ $$&#x6240;&#x6C42;&#x503C;&#xFF1A;f(x)_{min}=f(-420.966448106285)=-418.982886605937$$ &#x6027;&#x80FD;&#x6BD4;&#x8F83; &#x4F18;&#x70B9;&#xFF1A; &#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5C0F; &#x89E3;&#x51B3;&#x65E9;&#x719F;&#x6536;&#x655B;&#x95EE;&#x9898; &#x4ECE;&#x7FA4;&#x4F53;&#x51FA;&#x53D1;&#xFF0C;&#x5177;&#x6709;&#x5E76;&#x884C;&#x6027; &#x5BF9;&#x6297;&#x4F53;&#x9009;&#x62E9;&#x7684;&#x4F9D;&#x8D56;&#x6027;&#x964D;&#x4F4E; &#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898; &#x4F7F;&#x7528;&#x6982;&#x7387;&#x673A;&#x5236;&#x8FDB;&#x884C;&#x8FED;&#x4EE3;&#xFF0C;&#x5177;&#x6709;&#x968F;&#x673A;&#x6027; &#x7F3A;&#x70B9;&#xFF1A; &#x5BF9;&#x95EE;&#x9898;&#x7F16;&#x7801;&#x8868;&#x793A;&#x8F83;&#x4E3A;&#x56F0;&#x96BE; &#x8981;&#x8FDB;&#x884C;&#x591A;&#x6B21;&#x514D;&#x75AB;&#x5E94;&#x7B54;&#xFF0C;&#x56E0;&#x6B64;&#x901F;&#x5EA6;&#x6162;&#x4E8E;&#x9057;&#x4F20;&#x7B97;&#x6CD5; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>计算机基础知识</category>
        <category>全局搜索方法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[遗传算法(GA)]]></title>
    <url>%2F2019%2F05%2F21%2Foptimization_GA%2F</url>
    <content type="text"><![CDATA[&#x9057;&#x4F20;&#x7B97;&#x6CD5; &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;GA(Genetic Algorithm):&#x662F;&#x6A21;&#x62DF;&#x8FBE;&#x5C14;&#x6587;&#x751F;&#x7269;&#x8FDB;&#x5316;&#x8BBA;&#x7684;&#x81EA;&#x7136;&#x9009;&#x62E9;&#x548C;&#x9057;&#x4F20;&#x5B66;&#x673A;&#x7406;&#x7684;&#x751F;&#x7269;&#x8FDB;&#x5316;&#x8FC7;&#x7A0B;&#x7684;&#x8BA1;&#x7B97;&#x6A21;&#x578B;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x786E;&#x5B9A;&#x7684;&#x89C4;&#x5219;&#x5C31;&#x80FD;&#x81EA;&#x52A8;&#x83B7;&#x53D6;&#x548C;&#x6307;&#x5BFC;&#x4F18;&#x5316;&#x7684;&#x641C;&#x7D22;&#x7A7A;&#x95F4;&#xFF0C;&#x81EA;&#x9002;&#x5E94;&#x5730;&#x8C03;&#x6574;&#x641C;&#x7D22;&#x65B9;&#x5411;&#xFF0C;&#x662F;&#x4E00;&#x79CD;&#x901A;&#x8FC7;&#x6A21;&#x62DF;&#x81EA;&#x7136;&#x8FDB;&#x5316;&#x8FC7;&#x7A0B;&#x641C;&#x7D22;&#x6700;&#x4F18;&#x89E3;&#x7684;&#x65B9;&#x6CD5;&#x3002;&#x521D;&#x4EE3;&#x79CD;&#x7FA4;&#x4EA7;&#x751F;&#x4E4B;&#x540E;&#xFF0C;&#x6309;&#x7167;&#x9002;&#x8005;&#x751F;&#x5B58;&#x548C;&#x4F18;&#x80DC;&#x52A3;&#x6C70;&#x7684;&#x539F;&#x7406;&#xFF0C;&#x9010;&#x4EE3;&#xFF08;generation&#xFF09;&#x6F14;&#x5316;&#x4EA7;&#x751F;&#x51FA;&#x8D8A;&#x6765;&#x8D8A;&#x597D;&#x7684;&#x8FD1;&#x4F3C;&#x89E3;&#xFF0C;&#x5728;&#x6BCF;&#x4E00;&#x4EE3;&#xFF0C;&#x6839;&#x636E;&#x95EE;&#x9898;&#x57DF;&#x4E2D;&#x4E2A;&#x4F53;&#x7684;&#x9002;&#x5E94;&#x5EA6;&#xFF08;fitness&#xFF09;&#x5927;&#x5C0F;&#x9009;&#x62E9;&#x4E2A;&#x4F53;&#xFF0C;&#x5E76;&#x501F;&#x52A9;&#x4E8E;&#x81EA;&#x7136;&#x9057;&#x4F20;&#x5B66;&#x7684;&#x9057;&#x4F20;&#x7B97;&#x5B50;&#x8FDB;&#x884C;&#x7EC4;&#x5408;&#x4EA4;&#x53C9;&#xFF08;crossover&#xFF09;&#x548C;&#x53D8;&#x5F02;&#xFF08;mutation&#xFF09;&#xFF0C;&#x4EA7;&#x751F;&#x51FA;&#x4EE3;&#x8868;&#x65B0;&#x7684;&#x89E3;&#x96C6;&#x7684;&#x79CD;&#x7FA4;&#x3002; &#x6838;&#x5FC3;&#x601D;&#x60F3;&#x2003;&#x2003;1. &#x968F;&#x673A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x521D;&#x59CB;&#x79CD;&#x7FA4; &#x2003;&#x2003;2. &#x6839;&#x636E;&#x9002;&#x5E94;&#x5EA6;&#x5BF9;&#x79CD;&#x7FA4;&#x91C7;&#x7528;&#x67D0;&#x79CD;&#x65B9;&#x5F0F;&#x8FDB;&#x884C;&#x81EA;&#x7136;&#x9009;&#x62E9; &#x2003;&#x2003;3. &#x5BF9;&#x9009;&#x62E9;&#x5269;&#x4F59;&#x7684;&#x79CD;&#x7FA4;&#x8FDB;&#x884C;&#x9057;&#x4F20;&#x64CD;&#x4F5C;&#xFF0C;&#x4EA7;&#x751F;&#x65B0;&#x7684;&#x79CD;&#x7FA4; &#x2003;&#x2003;4. &#x56DE;&#x5230;&#x6B65;&#x9AA4;2&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6; &#x2003;&#x2003;5. &#x6B64;&#x65F6;&#x5269;&#x4F59;&#x7684;&#x662F;&#x9002;&#x5E94;&#x5EA6;&#x8F83;&#x597D;&#x7684;&#x79CD;&#x7FA4;&#xFF0C;&#x6BD4;&#x8F83;&#x53EF;&#x5F97;&#x8BE5;&#x7B97;&#x6CD5;&#x7684;&#x6700;&#x4F18;&#x89E3; &#x7B97;&#x6CD5;&#x6D41;&#x7A0B; &#x4EE3;&#x7801;&#x5B9E;&#x6218;&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;(Test Function) GA_main.m123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102clear;clc;close all;%&#x81EA;&#x53D8;&#x91CF;&#x53D6;&#x503C;&#x8303;&#x56F4;range_x=[ones(1,1),-ones(1,1)]*500;%&#x7EF4;&#x5EA6;n=size(range_x,1);%&#x79CD;&#x7FA4;&#x6570;&#x91CF;gn=400;%&#x8FDB;&#x5165;&#x4E0B;&#x4E00;&#x4EE3;&#x7684;&#x6570;&#x91CF;m=50;%&#x8FED;&#x4EE3;&#x6B21;&#x6570;times=200;%&#x968F;&#x673A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x79CD;&#x7FA4;group=zeros(n,gn);for k=1:n group(k,:)=(rand(1,gn))*(range_x(k,2)-range_x(k,1))+range_x(k,1);end%&#x8BBE;&#x7F6E;&#x5F53;&#x524D;&#x6700;&#x4F18;&#x89E3;best_value=zeros(1,times);tic;for k=1:times y=f(group); %&#x5168;&#x90E8;&#x53D8;&#x6210;&#x6B63;&#x503C; if min(y)&lt;0 tem=y-min(y)*1.0001; else tem=y+0.1; end %&#x503C;&#x8D8A;&#x5C0F;&#x9002;&#x5E94;&#x8D8A;&#x597D; tem=1./tem; child=zeros(n,gn); %&#x6311;&#x9009;m&#x4E2A;&#x79CD;&#x7FA4;&#x8FDB;&#x5165;&#x4E0B;&#x4E00;&#x4EE3; for i=1:m %&#x8F6E;&#x76D8;&#x8D4C;&#x9009;&#x62E9;&#xFF0C;&#x9002;&#x5E94;&#x5927;&#x7684;&#x9009;&#x62E9;&#x6982;&#x7387;&#x5927; temp=zeros(1,gn-i+1); for j=1:gn-i+1 temp(j)=sum(tem(1:j)); end temp=temp/temp(gn-i+1); %&#x4FDD;&#x7559;&#x6700;&#x5408;&#x9002;&#x7684;&#x7269;&#x79CD; choose=find(temp&gt;rand(1),1); child(:,i)=group(:,choose); group=[group(:,1:choose-1),group(:,choose+1:end)]; tem=[tem(1:choose-1),tem(choose+1:end)]; end %&#x67D3;&#x8272;&#x4F53;&#x4EA4;&#x6362;,&#x4FDD;&#x7559;&#x7684;&#x7269;&#x79CD;&#x4EA7;&#x751F;&#x540E;&#x4EE3;&#x65F6;&#x53D1;&#x751F;&#x57FA;&#x56E0;&#x91CD;&#x7EC4; for i=1:floor((gn-m)/2) exchange=randperm(m,2); a=rand(n,1); child(:,i*2-1+m)=a.*child(:,exchange(1))+(1-a).*child(:,exchange(2)); child(:,i*2+m)=(1-a).*child(:,exchange(1))+a.*child(:,exchange(2)); end if mod(gn-m,2)==1 exchange=randperm(m,2); child(:,gn)=(child(:,exchange(1))+child(:,exchange(2)))/2; end %&#x57FA;&#x56E0;&#x91CD;&#x7EC4;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x53EF;&#x80FD;&#x53D1;&#x751F;&#x67D3;&#x8272;&#x4F53;&#x53D8;&#x5F02; if rand(1)&lt;0.1 exchange=randperm(gn-m,1); a=rand(1); for j=1:n child(j,exchange+m)=a.*child(j,exchange+m)+(1-a).*(rand(1)*(range(j,2)-range(j,1))+range(j,1)); end end %&#x91CD;&#x7EC4;&#x4E4B;&#x540E;&#x540E;&#x4EE3;&#x53D8;&#x6210;&#x5F53;&#x524D;&#x79CD;&#x7FA4; group=child; best_value(k)=min(f(group)); if k&gt;5&amp;&amp;abs(best_value(k)-best_value(k-5))&lt;1e-5 break; endendtime=toc;disp([&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;])[mini,index]=min(f(group));disp([&apos;fmin=&apos;,num2str(mini)]);for k=1:n disp([&apos;x&apos;,num2str(k),&apos;=&apos;,num2str(group(k,index))]);endif n==1 hold on; plot(group(index),mini,&apos;ro&apos;); plot_x=range_x(1):(range_x(2)-range_x(1))/1000:range_x(2); plot_y=f(plot_x); plot(plot_x,plot_y); text((range_x(1)+range_x(2))/2,max(plot_y)+0.1*(max(plot_y)-min(plot_y)),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]); hold off;endif n==2 %&#x6240;&#x6C42;&#x6700;&#x5C0F;&#x503C;&#x7684;&#x51FD;&#x6570; func=@(x1,x2)x1.*sin(sqrt(abs(x1)))+x2.*sin(sqrt(abs(x2))); plot_x=range_x(1,1):(range_x(1,2)-range_x(1,1))/1000:range_x(1,2); plot_y=range_x(2,1):(range_x(2,2)-range_x(2,1))/1000:range_x(2,2); [plot_x,plot_y] =meshgrid(plot_x,plot_y); plot_z=func(plot_x,plot_y); surf(plot_x,plot_y,plot_z); xlabel(&apos;x1&apos;); ylabel(&apos;x2&apos;); zlabel(&apos;y&apos;); hold on; plot3(group(1,index),group(2,index),mini,&apos;ko&apos;) text((range_x(1,1)+range_x(1,2))/2,(range_x(2,1)+range_x(2,2))/2,max(max(plot_z))+0.5*(max(max(plot_z))-min(min(plot_z))),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]); hold off;end f.m123456function res=f(x)func=@(x)(x).*sin(sqrt(abs(x)));res=zeros(1,size(x,2));for i=1:size(x,1) res=res+func(x(i,:));end &#x5B9E;&#x9A8C;&#x7ED3;&#x679C;$$f(x)=x \cdot \sin(\sqrt{\lvert x \rvert}) \ , \ x \in [-500,500]$$ $$&#x7406;&#x8BBA;&#x503C;&#xFF1A;f(x)_{min}=f(-420.96874592006)=-418.982887272434$$ $$&#x6240;&#x6C42;&#x503C;&#xFF1A;f(x)_{min}=f(-420.975929624477)=-418.982880761435$$ &#x6027;&#x80FD;&#x6BD4;&#x8F83; &#x4F18;&#x70B9;&#xFF1A; &#x4ECE;&#x7FA4;&#x4F53;&#x51FA;&#x53D1;&#xFF0C;&#x5177;&#x6709;&#x5E76;&#x884C;&#x6027; &#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898; &#x4F7F;&#x7528;&#x6982;&#x7387;&#x673A;&#x5236;&#x8FDB;&#x884C;&#x8FED;&#x4EE3;&#xFF0C;&#x5177;&#x6709;&#x968F;&#x673A;&#x6027; &#x5177;&#x6709;&#x53EF;&#x6269;&#x5C55;&#x6027;&#xFF0C;&#x5BB9;&#x6613;&#x4E0E;&#x5176;&#x4ED6;&#x7B97;&#x6CD5;&#x7ED3;&#x5408; &#x7F3A;&#x70B9;&#xFF1A; &#x53D7;&#x5230;&#x53C2;&#x6570;&#x5F71;&#x54CD;&#x8F83;&#x5927; &#x53EF;&#x80FD;&#x4EA7;&#x751F;&#x65E9;&#x719F;&#x6536;&#x655B;&#x95EE;&#x9898; &#x5BF9;&#x95EE;&#x9898;&#x7F16;&#x7801;&#x8868;&#x793A;&#x8F83;&#x4E3A;&#x56F0;&#x96BE; &#x7B97;&#x6CD5;&#x5BF9;&#x521D;&#x59CB;&#x79CD;&#x7FA4;&#x7684;&#x9009;&#x62E9;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x4F9D;&#x8D56;&#x6027; &#x641C;&#x7D22;&#x901F;&#x5EA6;&#x6BD4;&#x8F83;&#x6162;&#xFF0C;&#x8981;&#x5F97;&#x5230;&#x8F83;&#x7CBE;&#x786E;&#x7684;&#x89E3;&#x9700;&#x8981;&#x8F83;&#x591A;&#x7684;&#x8BAD;&#x7EC3;&#x65F6;&#x95F4; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>计算机基础知识</category>
        <category>全局搜索方法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[模拟退火算法(SA)]]></title>
    <url>%2F2019%2F05%2F20%2Foptimization_SA%2F</url>
    <content type="text"><![CDATA[&#x6A21;&#x62DF;&#x9000;&#x706B;&#x7B97;&#x6CD5; &#x80CC;&#x666F;&#x4ECB;&#x7ECD;&#x2003;&#x2003;SA(Simulate Anneal):&#x662F;&#x4E00;&#x79CD;&#x57FA;&#x4E8E;Mentcarlo&#x8FED;&#x4EE3;&#x6C42;&#x89E3;&#x6CD5;&#x7684;&#x4E00;&#x79CD;&#x542F;&#x53D1;&#x5F0F;&#x968F;&#x673A;&#x641C;&#x7D22;&#x65B9;&#x6CD5;&#xFF0C;&#x57FA;&#x4E8E;&#x7269;&#x7406;&#x4E2D;&#x56FA;&#x4F53;&#x7269;&#x8D28;&#x7684;&#x9000;&#x706B;&#x8FC7;&#x7A0B;&#x4E0E;&#x4E00;&#x822C;&#x7EC4;&#x5408;&#x4F18;&#x5316;&#x95EE;&#x9898;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x4F3C;&#x6027;&#xFF0C;&#x901A;&#x8FC7;&#x6A21;&#x62DF;&#x9000;&#x706B;&#x8FC7;&#x7A0B;&#xFF0C;&#x7528;&#x6765;&#x5728;&#x4E00;&#x4E2A;&#x5927;&#x7684;&#x641C;&#x5BFB;&#x7A7A;&#x95F4;&#x5185;&#x627E;&#x5BFB;&#x547D;&#x9898;&#x7684;&#x6700;&#x4F18;&#x89E3;&#xFF08;&#x6216;&#x8FD1;&#x4F3C;&#x6700;&#x4F18;&#x89E3;&#xFF09;&#x3002; &#x6838;&#x5FC3;&#x601D;&#x60F3;&#x2003;&#x2003;1. &#x4EFB;&#x9009;&#x4E00;&#x521D;&#x59CB;&#x72B6;&#x6001;S0&#x4F5C;&#x4E3A;&#x5F53;&#x524D;&#x89E3;&#xFF0C;&#x8BBE;&#x7F6E;&#x521D;&#x59CB;&#x6E29;&#x5EA6;T0 &#x2003;&#x2003;2. &#x5BF9;&#x8BE5;&#x6E29;&#x5EA6;&#x4E0B;&#x7684;&#x72B6;&#x6001;S0&#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x6270;&#x52A8;S&#x2019;&#xFF0C;&#x5E76;&#x6309;&#x6982;&#x7387;&#x63A5;&#x6536;$$\Delta C=f(S&#x2019;)-f(S)$$ $$P= \begin{cases} 1 &amp; \Delta C \leq 0 \ e^{\frac {- \Delta C}{T} } &amp; \Delta C &gt; 0 \end{cases}$$ &#x2003;&#x2003;3. &#x6309;&#x7167;&#x67D0;&#x79CD;&#x65B9;&#x5F0F;&#x964D;&#x6E29;T=T-&#x394;T&#xFF0C;&#x56DE;&#x5230;&#x6B65;&#x9AA4;2&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6; &#x2003;&#x2003;4. &#x6B64;&#x65F6;&#x8FBE;&#x5230;&#x7684;&#x72B6;&#x6001;S&#x5373;&#x4E3A;&#x8BE5;&#x7B97;&#x6CD5;&#x7684;&#x6700;&#x4F18;&#x89E3; &#x7B97;&#x6CD5;&#x6D41;&#x7A0B; &#x4EE3;&#x7801;&#x5B9E;&#x6218;&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;(Test Function) SA_ap.m123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657clear;clc;close all;%&#x81EA;&#x53D8;&#x91CF;&#x53D6;&#x503C;&#x8303;&#x56F4;range_x=[ones(1,1),-ones(1,1)]*500;%&#x7EF4;&#x5EA6;n=size(range_x,1);%&#x5C1D;&#x8BD5;&#x89E3;&#x6B21;&#x6570;num=10;value=zeros(n,num);delta_t=0.2;tic;for i=1:num %&#x7ED9;x&#x8D4B;&#x521D;&#x503C; x=zeros(n,1); for k=1:n x(k)=(rand(1))*(range_x(k,2)-range_x(k,1))+range_x(k,1); end %&#x521D;&#x59CB;&#x6E29;&#x5EA6;t t=100; while t&gt;1e-5 x=SA_metripolis(range_x,t,x,n); %&#x6E29;&#x5EA6;&#x6BCF;&#x6B21;&#x4E0B;&#x964D;delta_t t=t-delta_t; end value(:,i)=x;endtime=toc;disp([&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;])[mini,index]=min(f(value));disp([&apos;fmin=&apos;,num2str(mini)]);for k=1:n disp([&apos;x&apos;,num2str(k),&apos;=&apos;,num2str(value(k,index))]);endif n==1 hold on; plot(value(index),mini,&apos;ro&apos;); plot_x=range_x(1):(range_x(2)-range_x(1))/1000:range_x(2); plot_y=f(plot_x); plot(plot_x,plot_y); text((range_x(1)+range_x(2))/2,max(plot_y)+0.1*(max(plot_y)-min(plot_y)),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]); hold off;endif n==2 %&#x6240;&#x6C42;&#x6700;&#x5C0F;&#x503C;&#x7684;&#x51FD;&#x6570; func=@(x1,x2)x1.*sin(sqrt(abs(x1)))+x2.*sin(sqrt(abs(x2))); plot_x=range_x(1,1):(range_x(1,2)-range_x(1,1))/1000:range_x(1,2); plot_y=range_x(2,1):(range_x(2,2)-range_x(2,1))/1000:range_x(2,2); [plot_x,plot_y] =meshgrid(plot_x,plot_y); plot_z=func(plot_x,plot_y); surf(plot_x,plot_y,plot_z); xlabel(&apos;x1&apos;); ylabel(&apos;x2&apos;); zlabel(&apos;y&apos;); hold on; plot3(value(1,index),value(2,index),mini,&apos;ko&apos;) text((range_x(1,1)+range_x(1,2))/2,(range_x(2,1)+range_x(2,2))/2,max(max(plot_z))+0.5*(max(max(plot_z))-min(min(plot_z))),[&apos;&#x7528;&#x65F6;&#xFF1A;&apos;,num2str(time),&apos;&#x79D2;&apos;]); hold off;end SA_metripolis.m12345678910111213141516171819202122232425function x=SA_metripolis(range_x,t,x,n)delta=1;for i=1:100 %&#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x6270;&#x52A8; x_new=(rand(n,1)-0.5)*delta+x; %&#x9650;&#x5236;&#x89E3;&#x7684;&#x8303;&#x56F4; for j=1:n if x_new(j)&lt;range_x(j,2) x_new(j)=range_x(j,2); end if x_new(j)&gt;range_x(j,1) x_new(j)=range_x(j,1); end end dc=f(x_new)-f(x); if dc&lt;0 x=x_new; %&#x5982;&#x679C;&#x6270;&#x52A8;&#x7684;&#x7ED3;&#x679C;&#x6BD4;&#x539F;&#x6765;&#x5927;&#xFF0C;&#x5219;&#x6709;&#x6982;&#x7387;&#x7684;&#x4FDD;&#x7559; else p=exp(-dc/t); if rand(1)&lt;=p x=x_new; end endend f.m123456function res=f(x)func=@(x)(x).*sin(sqrt(abs(x)));res=zeros(1,size(x,2));for i=1:size(x,1) res=res+func(x(i,:));end &#x5B9E;&#x9A8C;&#x7ED3;&#x679C;$$f(x)=x \cdot \sin(\sqrt{\lvert x \rvert}) \ , \ x \in [-500,500]$$ $$&#x7406;&#x8BBA;&#x503C;&#xFF1A;f(x)_{min}=f(-420.96874592006)=-418.982887272434$$ $$&#x6240;&#x6C42;&#x503C;&#xFF1A;f(x)_{min}=f(-420.967823415805)=-418.982887164947$$ &#x6027;&#x80FD;&#x6BD4;&#x8F83; &#x4F18;&#x70B9;&#xFF1A; &#x8BA1;&#x7B97;&#x8FC7;&#x7A0B;&#x7B80;&#x5355; &#x53EF;&#x7528;&#x4E8E;&#x6C42;&#x89E3;&#x590D;&#x6742;&#x7684;&#x975E;&#x7EBF;&#x6027;&#x4F18;&#x5316;&#x95EE;&#x9898; &#x76F8;&#x6BD4;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#xFF0C;&#x589E;&#x52A0;&#x4E86;&#x9003;&#x79BB;&#x5C40;&#x90E8;&#x6700;&#x5C0F;&#x7684;&#x53EF;&#x80FD; &#x7F3A;&#x70B9;&#xFF1A; &#x53C2;&#x6570;&#x654F;&#x611F; &#x6536;&#x655B;&#x901F;&#x5EA6;&#x6162; &#x6267;&#x884C;&#x65F6;&#x95F4;&#x957F; &#x7B97;&#x6CD5;&#x6027;&#x80FD;&#x4E0E;&#x521D;&#x59CB;&#x503C;&#x6709;&#x5173; &#x53EF;&#x80FD;&#x843D;&#x5165;&#x5176;&#x4ED6;&#x7684;&#x5C40;&#x90E8;&#x6700;&#x5C0F;&#x503C; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>计算机基础知识</category>
        <category>全局搜索方法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[测试函数(Test Function)]]></title>
    <url>%2F2019%2F05%2F19%2Foptimization_Testfunction%2F</url>
    <content type="text"><![CDATA[&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x8BF4;&#x660E; &#x539F;&#x7406;&#x4ECB;&#x7ECD;&#x2003;&#x2003;Test Function:&#x5BF9;&#x4E8E;&#x5168;&#x5C40;&#x6700;&#x4F18;&#x89E3;&#x6765;&#x8BF4;&#xFF0C;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x7684;&#x9009;&#x62E9;&#x662F;&#x81F3;&#x5173;&#x91CD;&#x8981;&#x7684;&#xFF0C;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x7684;&#x597D;&#x574F;&#x5F80;&#x5F80;&#x53EF;&#x4EE5;&#x4F53;&#x73B0;&#x51FA;&#x641C;&#x7D22;&#x7B97;&#x6CD5;&#x7684;&#x4F18;&#x52A3;&#x3002;&#x6709;&#x65F6;&#x6027;&#x80FD;&#x4E00;&#x822C;&#x7684;&#x7B97;&#x6CD5;&#x5728;&#x67D0;&#x4E2A;&#x7279;&#x5B9A;&#x7684;&#x51FD;&#x6570;&#x4E0B;&#x53D1;&#x6325;&#x7684;&#x5F88;&#x597D;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x522B;&#x7684;&#x51FD;&#x6570;&#x4E0B;&#x5C31;&#x5F88;&#x96BE;&#x641C;&#x7D22;&#x5230;&#x5168;&#x5C40;&#x6700;&#x4F18;&#x89E3;&#x3002;&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x8BBE;&#x8BA1;&#x5404;&#x79CD;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#xFF0C;&#x4ECE;&#x641C;&#x7D22;&#x6548;&#x7387;&#xFF0C;&#x641C;&#x7D22;&#x7CBE;&#x5EA6;&#xFF0C;&#x9002;&#x5E94;&#x7A0B;&#x5EA6;&#x591A;&#x4E2A;&#x65B9;&#x9762;&#x7EFC;&#x5408;&#x6BD4;&#x8F83;&#x5404;&#x4E2A;&#x7B97;&#x6CD5;&#xFF0C;&#x53EA;&#x6709;&#x8FD9;&#x6837;&#xFF0C;&#x5728;&#x4ECA;&#x540E;&#x7684;&#x4F7F;&#x7528;&#x4E2D;&#x624D;&#x80FD;&#x5F97;&#x5FC3;&#x5E94;&#x624B;&#x3002; &#x4EE3;&#x7801;&#x5B9E;&#x6218;Function_one.m12345clear;clc;close all;f=@(x)x.*sin(sqrt(abs(x)));x=-5000:1:5000;y=f(x);plot(x,y) $$f(x)=x \cdot \sin(\sqrt{\lvert x \rvert}) \ , \ x \in [-500,500]$$ $$f(x)_{min}=f(-420.96874592006)=-418.982887272434$$ Function_two.m12345clear;clc;close all;f=@(x)((x+1).*(x+2).*(x+3).*(x+4).*(x+5)+5);x=-5:0.01:0;y=f(x);plot(x,y) $$f(x)=x \cdot (x+1) \cdot (x+2) \cdot (x+3) \cdot (x+4) \cdot (x+5) + 5 \ , \ x \in [-5,0]$$ $$f(x)_{min}=f(-1.35556713184173)=1.36856779155116$$ Function_three.m12345clear;clc;close all;f=@(x)((x+2).*cos(9*x)+sin(7*x));x=0:0.01:4;y=f(x);plot(x,y) $$f(x)=(x+2) \cdot \cos(9 \ x) + \sin(7 \ x) \ , \ x \in [0,4]$$ $$f(x)_{min}=f(2.44888001781347)=-5.43427465397202$$ Function_four.m12345clear;clc;close all;f=@(x)(5*exp(-0.5*x).*sin(30*x)+exp(0.2*x).*sin(20*x)+6);x=0:0.01:8;y=f(x);plot(x,y) $$f(x)=5 \ e^{-0.5 \ x} \cdot \sin(30 \ x) + e^{0.2 \ x} \cdot \sin(20 \ x) + 6 \ , \ x \in [0,8]$$ $$f(x)_{min}=f(0.5725)=1.2573$$ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>计算机基础知识</category>
        <category>全局搜索方法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[聚类算法比较(Clustering Algorithms Comparison)]]></title>
    <url>%2F2019%2F05%2F17%2Fclustering_compare%2F</url>
    <content type="text"><![CDATA[&#x805A;&#x7C7B;&#x7B97;&#x6CD5;&#x6BD4;&#x8F83; &#x65E0;&#x76D1;&#x7763;&#x5B66;&#x4E60;&#x2003;&#x2003;&#x73B0;&#x5B9E;&#x751F;&#x6D3B;&#x4E2D;&#x5E38;&#x5E38;&#x4F1A;&#x7F3A;&#x4E4F;&#x8DB3;&#x591F;&#x7684;&#x5148;&#x9A8C;&#x77E5;&#x8BC6;&#xFF0C;&#x56E0;&#x6B64;&#x96BE;&#x4EE5;&#x4EBA;&#x5DE5;&#x6807;&#x6CE8;&#x7C7B;&#x522B;&#x6216;&#x8FDB;&#x884C;&#x4EBA;&#x5DE5;&#x7C7B;&#x522B;&#x6807;&#x6CE8;&#x7684;&#x6210;&#x672C;&#x592A;&#x9AD8;&#x3002;&#x5F88;&#x81EA;&#x7136;&#x5730;&#xFF0C;&#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x8BA1;&#x7B97;&#x673A;&#x80FD;&#x4EE3;&#x6211;&#x4EEC;&#x5B8C;&#x6210;&#x8FD9;&#x4E9B;&#x5DE5;&#x4F5C;&#xFF0C;&#x6216;&#x81F3;&#x5C11;&#x63D0;&#x4F9B;&#x4E00;&#x4E9B;&#x5E2E;&#x52A9;&#x3002;&#x6839;&#x636E;&#x7C7B;&#x522B;&#x672A;&#x77E5;(&#x6CA1;&#x6709;&#x88AB;&#x6807;&#x8BB0;)&#x7684;&#x8BAD;&#x7EC3;&#x6837;&#x672C;&#x89E3;&#x51B3;&#x6A21;&#x5F0F;&#x8BC6;&#x522B;&#x4E2D;&#x7684;&#x5404;&#x79CD;&#x95EE;&#x9898;&#xFF0C;&#x79F0;&#x4E4B;&#x4E3A;&#x65E0;&#x76D1;&#x7763;&#x5B66;&#x4E60;&#x3002; &#x7B97;&#x6CD5;&#x5206;&#x7C7B; &#x6027;&#x80FD;&#x6BD4;&#x8F83;&#x6240;&#x7528;&#x6570;&#x636E;&#x96C6;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x6570;&#x636E;&#x96C6;(Data Set) &#x51DD;&#x805A;&#x7684;&#x5C42;&#x6B21;&#x805A;&#x7C7B;(AGNES) &#x4F18;&#x70B9;&#xFF1A; &#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F; &#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x5BB9;&#x6613;&#x7406;&#x89E3; &#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x503C;&#x7684;&#x9009;&#x62E9; &#x5BF9;&#x4E8E;&#x7C7B;&#x522B;&#x8F83;&#x591A;&#x7684;&#x8BAD;&#x7EC3;&#x96C6;&#x5206;&#x7C7B;&#x8F83;&#x5FEB; &#x7F3A;&#x70B9;&#xFF1A; &#x5408;&#x5E76;&#x64CD;&#x4F5C;&#x4E0D;&#x80FD;&#x64A4;&#x9500; &#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x77E5;&#x9053;&#x7C7B;&#x522B;&#x7684;&#x4E2A;&#x6570; &#x5BF9;&#x4E8E;&#x7C7B;&#x522B;&#x8F83;&#x5C11;&#x7684;&#x8BAD;&#x7EC3;&#x96C6;&#x5206;&#x7C7B;&#x8F83;&#x6162; &#x53EA;&#x9002;&#x5408;&#x5206;&#x5E03;&#x5448;&#x51F8;&#x578B;&#x6216;&#x8005;&#x7403;&#x5F62;&#x7684;&#x6570;&#x636E;&#x96C6; &#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D; &#x9AD8;&#x65AF;&#x578B;&#x6570;&#x636E; &#x5706;&#x5F62;&#x6570;&#x636E; &#x5206;&#x88C2;&#x7684;&#x5C42;&#x6B21;&#x805A;&#x7C7B;(DIANA) &#x4F18;&#x70B9;&#xFF1A; &#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x5BB9;&#x6613;&#x7406;&#x89E3; &#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x503C;&#x7684;&#x9009;&#x62E9; &#x5BF9;&#x4E8E;&#x7C7B;&#x522B;&#x8F83;&#x5C11;&#x7684;&#x8BAD;&#x7EC3;&#x96C6;&#x5206;&#x7C7B;&#x8F83;&#x5FEB; &#x7F3A;&#x70B9;&#xFF1A; &#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x654F;&#x611F; &#x5206;&#x88C2;&#x64CD;&#x4F5C;&#x4E0D;&#x80FD;&#x64A4;&#x9500; &#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x77E5;&#x9053;&#x7C7B;&#x522B;&#x7684;&#x4E2A;&#x6570; &#x5BF9;&#x4E8E;&#x7C7B;&#x522B;&#x8F83;&#x591A;&#x7684;&#x8BAD;&#x7EC3;&#x96C6;&#x5206;&#x7C7B;&#x8F83;&#x6162; &#x53EA;&#x9002;&#x5408;&#x5206;&#x5E03;&#x5448;&#x51F8;&#x578B;&#x6216;&#x8005;&#x7403;&#x5F62;&#x7684;&#x6570;&#x636E;&#x96C6; &#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D; &#x9AD8;&#x65AF;&#x578B;&#x6570;&#x636E; &#x6DF7;&#x5408;&#x578B;&#x6570;&#x636E; K&#x5747;&#x503C;&#x805A;&#x7C7B;(K-MEANS) &#x4F18;&#x70B9;&#xFF1A; &#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x5BB9;&#x6613;&#x7406;&#x89E3; &#x5927;&#x6570;&#x636E;&#x96C6;&#x65F6;&#xFF0C;&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F; &#x7F3A;&#x70B9;&#xFF1A; &#x5BF9;&#x521D;&#x59CB;&#x4E2D;&#x5FC3;&#x70B9;&#x654F;&#x611F; &#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x77E5;&#x9053;&#x7C7B;&#x522B;&#x7684;&#x4E2A;&#x6570; &#x53EA;&#x9002;&#x5408;&#x5206;&#x5E03;&#x5448;&#x51F8;&#x578B;&#x6216;&#x8005;&#x7403;&#x5F62;&#x7684;&#x6570;&#x636E;&#x96C6; &#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D; &#x9AD8;&#x65AF;&#x578B;&#x6570;&#x636E; &#x76F4;&#x7EBF;&#x578B;&#x6570;&#x636E; &#x8FED;&#x4EE3;&#x81EA;&#x7EC4;&#x7EC7;&#x5206;&#x6790;&#x805A;&#x7C7B;(ISODATA) &#x4F18;&#x70B9;&#xFF1A; &#x5927;&#x6570;&#x636E;&#x96C6;&#x65F6;&#xFF0C;&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F; &#x53EF;&#x4EE5;&#x52A8;&#x6001;&#x8C03;&#x6574;&#x7C7B;&#x522B;&#x4E2A;&#x6570;&#x548C;&#x7C7B;&#x522B;&#x4E2D;&#x5FC3; &#x5728;&#x5148;&#x9A8C;&#x77E5;&#x8BC6;&#x4E0D;&#x8DB3;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x6709;&#x8F83;&#x597D;&#x7684;&#x5206;&#x7C7B;&#x80FD;&#x529B; &#x7F3A;&#x70B9;&#xFF1A; &#x5BF9;&#x521D;&#x59CB;&#x4E2D;&#x5FC3;&#x70B9;&#x654F;&#x611F; &#x7B97;&#x6CD5;&#x590D;&#x6742;&#xFF0C;&#x5206;&#x7C7B;&#x901F;&#x5EA6;&#x8F83;&#x6162; &#x53EA;&#x9002;&#x5408;&#x5206;&#x5E03;&#x5448;&#x51F8;&#x578B;&#x6216;&#x8005;&#x7403;&#x5F62;&#x7684;&#x6570;&#x636E;&#x96C6; &#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D; &#x9AD8;&#x65AF;&#x578B;&#x6570;&#x636E; &#x76F4;&#x7EBF;&#x578B;&#x6570;&#x636E; &#x5BC6;&#x5EA6;&#x805A;&#x7C7B;(DBSCAN) &#x4F18;&#x70B9;&#xFF1A; &#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x5BB9;&#x6613;&#x7406;&#x89E3; &#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x6570;&#x636E;&#x70B9;&#x7684;&#x9009;&#x62E9; &#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x4EFB;&#x610F;&#x5F62;&#x72B6;&#x7684;&#x805A;&#x7C7B; &#x7F3A;&#x70B9;&#xFF1A; &#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x654F;&#x611F; &#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x786E;&#x5B9A;eps&#x548C;minPts &#x4E0D;&#x9002;&#x5408;&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x5BC6;&#x5EA6;&#x5DEE;&#x5F02;&#x8F83;&#x5927;&#x7684;&#x60C5;&#x51B5; &#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D; &#x5706;&#x5F62;&#x6570;&#x636E; &#x76F4;&#x7EBF;&#x578B;&#x6570;&#x636E; &#x5BC6;&#x5EA6;&#x6700;&#x5927;&#x503C;&#x805A;&#x7C7B;(MDCA) &#x4F18;&#x70B9;&#xFF1A; &#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F; &#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x6570;&#x636E;&#x70B9;&#x7684;&#x9009;&#x62E9; &#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x4EFB;&#x610F;&#x5F62;&#x72B6;&#x7684;&#x805A;&#x7C7B; &#x7F3A;&#x70B9;&#xFF1A; &#x7B97;&#x6CD5;&#x590D;&#x6742;&#xFF0C;&#x5206;&#x7C7B;&#x901F;&#x5EA6;&#x8F83;&#x6162; &#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x786E;&#x5B9A;&#x5BC6;&#x5EA6;&#x9608;&#x503C; &#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D; &#x4E0D;&#x9002;&#x5408;&#x6570;&#x636E;&#x96C6;&#x5BC6;&#x5EA6;&#x5DEE;&#x5F02;&#x8F83;&#x5927;&#x6216;&#x6574;&#x4F53;&#x5BC6;&#x5EA6;&#x57FA;&#x672C;&#x76F8;&#x540C;&#x7684;&#x60C5;&#x51B5; &#x9AD8;&#x65AF;&#x578B;&#x6570;&#x636E; &#x6DF7;&#x5408;&#x578B;&#x6570;&#x636E; &#x5FEB;&#x901F;&#x641C;&#x7D22;&#x805A;&#x7C7B;(CFDP) &#x4F18;&#x70B9;&#xFF1A; &#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F; &#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x6570;&#x636E;&#x70B9;&#x7684;&#x9009;&#x62E9; &#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x4EFB;&#x610F;&#x5F62;&#x72B6;&#x7684;&#x805A;&#x7C7B; &#x7F3A;&#x70B9;&#xFF1A; &#x79BB;&#x7FA4;&#x70B9;&#x7684;&#x786E;&#x5B9A;&#x975E;&#x5E38;&#x590D;&#x6742; &#x7B97;&#x6CD5;&#x590D;&#x6742;&#xFF0C;&#x5206;&#x7C7B;&#x901F;&#x5EA6;&#x8F83;&#x6162; &#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D; &#x4E0D;&#x9002;&#x5408;&#x6570;&#x636E;&#x96C6;&#x6574;&#x4F53;&#x5BC6;&#x5EA6;&#x57FA;&#x672C;&#x76F8;&#x540C;&#x7684;&#x60C5;&#x51B5; &#x9AD8;&#x65AF;&#x578B;&#x6570;&#x636E; &#x6DF7;&#x5408;&#x578B;&#x6570;&#x636E; &#x8C31;&#x805A;&#x7C7B;(Spectral Clustering) &#x4F18;&#x70B9;&#xFF1A; &#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x6570;&#x636E;&#x70B9;&#x7684;&#x9009;&#x62E9; &#x4F7F;&#x7528;&#x4E86;&#x964D;&#x7EF4;&#x6280;&#x672F;&#xFF0C;&#x9002;&#x5408;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#x7684;&#x805A;&#x7C7B; &#x5EFA;&#x7ACB;&#x5728;&#x8C31;&#x56FE;&#x7406;&#x8BBA;&#xFF0C;&#x80FD;&#x5728;&#x5927;&#x90E8;&#x5206;&#x5F62;&#x72B6;&#x805A;&#x7C7B;&#xFF0C;&#x6536;&#x655B;&#x4E8E;&#x5168;&#x5C40;&#x6700;&#x4F18;&#x89E3; &#x7F3A;&#x70B9;&#xFF1A; &#x96BE;&#x4EE5;&#x5BF9;&#x5706;&#x5F62;&#x6570;&#x636E;&#x805A;&#x7C7B; &#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x975E;&#x5E38;&#x654F;&#x611F; &#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x77E5;&#x9053;&#x7C7B;&#x522B;&#x7684;&#x4E2A;&#x6570; &#x76F4;&#x7EBF;&#x578B;&#x6570;&#x636E; &#x6DF7;&#x5408;&#x578B;&#x6570;&#x636E; &#x9AD8;&#x65AF;&#x6DF7;&#x5408;&#x6A21;&#x578B;&#x805A;&#x7C7B;(GMM) &#x4F18;&#x70B9;&#xFF1A; &#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x5927;&#x90E8;&#x5206;&#x5F62;&#x72B6;&#x7684;&#x805A;&#x7C7B; &#x5927;&#x6570;&#x636E;&#x96C6;&#x65F6;&#xFF0C;&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F; &#x5BF9;&#x4E8E;&#x8DDD;&#x79BB;&#x6216;&#x5BC6;&#x5EA6;&#x805A;&#x7C7B;&#xFF0C;&#x66F4;&#x9002;&#x5408;&#x9AD8;&#x7EF4;&#x7279;&#x5F81; &#x7F3A;&#x70B9;&#xFF1A; &#x8BA1;&#x7B97;&#x590D;&#x6742;&#xFF0C;&#x901F;&#x5EA6;&#x8F83;&#x6162; &#x96BE;&#x4EE5;&#x5BF9;&#x5706;&#x5F62;&#x6570;&#x636E;&#x805A;&#x7C7B; &#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x77E5;&#x9053;&#x7C7B;&#x522B;&#x7684;&#x4E2A;&#x6570; &#x521D;&#x59CB;&#x5316;&#x53C2;&#x6570;&#x4F1A;&#x5BF9;&#x805A;&#x7C7B;&#x7ED3;&#x679C;&#x4EA7;&#x751F;&#x5F71;&#x54CD; &#x9AD8;&#x65AF;&#x578B;&#x6570;&#x636E; &#x76F4;&#x7EBF;&#x578B;&#x6570;&#x636E; &#x7279;&#x70B9;&#x5C0F;&#x7ED3; &#x51F8;&#x578B;&#x6216;&#x8005;&#x7403;&#x5F62;&#x5206;&#x5E03;&#x7684;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x7EDD;&#x5927;&#x90E8;&#x5206;&#x7B97;&#x6CD5;&#x90FD;&#x662F;&#x53EF;&#x4EE5;&#x9002;&#x7528;&#x7684; &#x5706;&#x5F62;&#x5206;&#x5E03;&#x7684;&#x6570;&#x636E;&#x96C6;&#xFF0C;DBSCAN&#x7B97;&#x6CD5;&#x6700;&#x4E3A;&#x5408;&#x9002; &#x7EBF;&#x578B;&#x5206;&#x5E03;&#x7684;&#x6570;&#x636E;&#x96C6;&#xFF0C;DBSCAN&#xFF0C;Spectral Clustering&#xFF0C;GMM&#x90FD;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; &#x9AD8;&#x7EF4;&#x7279;&#x5F81;&#x6700;&#x597D;&#x4F7F;&#x7528;Spectral Clustering&#x6216;&#x8005;GMM&#x7B97;&#x6CD5; &#x5BC6;&#x5EA6;&#x7B97;&#x6CD5;&#x5927;&#x591A;&#x9002;&#x7528;&#x4E8E;&#x5404;&#x7C7B;&#x7684;&#x5BC6;&#x5EA6;&#x5CF0;&#x503C;&#x76F8;&#x5DEE;&#x4E0D;&#x5927;&#x7684;&#x60C5;&#x51B5; &#x5B9E;&#x9645;&#x4E2D;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5DF2;&#x77E5;&#x7684;&#x67D0;&#x4E9B;&#x5148;&#x9A8C;&#x77E5;&#x8BC6;&#x5C1D;&#x8BD5;&#x53BB;&#x9009;&#x62E9;&#x5408;&#x9002;&#x7684;&#x7B97;&#x6CD5; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>机器学习</category>
        <category>无监督学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[高斯混合模型聚类(GMM)]]></title>
    <url>%2F2019%2F05%2F12%2Fclustering_GMM%2F</url>
    <content type="text"><![CDATA[&#x9AD8;&#x65AF;&#x6DF7;&#x5408;&#x6A21;&#x578B;&#x805A;&#x7C7B;&#x65B9;&#x6CD5; &#x539F;&#x7406;&#x89E3;&#x8BFB;&#x2003;&#x2003;GMM(Gaussian Mixture Model,):&#x662F;&#x4E00;&#x4E2A;&#x5C06;&#x4E8B;&#x7269;&#x5206;&#x89E3;&#x4E3A;&#x82E5;&#x5E72;&#x7684;&#x57FA;&#x4E8E;&#x9AD8;&#x65AF;&#x6982;&#x7387;&#x5BC6;&#x5EA6;&#x51FD;&#x6570;&#xFF08;&#x6B63;&#x6001;&#x5206;&#x5E03;&#x66F2;&#x7EBF;&#xFF09;&#x5F62;&#x6210;&#x7684;&#x6A21;&#x578B;&#xFF0C;&#x6DF7;&#x5408;&#x9AD8;&#x65AF;&#x5206;&#x5E03;( MoG )&#x7531;&#x591A;&#x4E2A;&#x6DF7;&#x5408;&#x6210;&#x5206;&#x7EC4;&#x6210;&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x6DF7;&#x5408;&#x6210;&#x5206;&#x5BF9;&#x5E94;&#x4E00;&#x4E2A;&#x9AD8;&#x65AF;&#x5206;&#x5E03;&#x3002;&#x5F53;&#x805A;&#x7C7B;&#x95EE;&#x9898;&#x4E2D;&#x5404;&#x4E2A;&#x7C7B;&#x522B;&#x7684;&#x5C3A;&#x5BF8;&#x4E0D;&#x540C;&#x3001;&#x805A;&#x7C7B;&#x95F4;&#x6709;&#x76F8;&#x5173;&#x5173;&#x7CFB;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5F80;&#x5F80;&#x4F7F;&#x7528; MoG &#x66F4;&#x5408;&#x9002;&#x3002;&#x5BF9;&#x4E00;&#x4E2A;&#x6837;&#x672C;&#x6765;&#x8BF4;&#xFF0C; MoG &#x5F97;&#x5230;&#x7684;&#x662F;&#x5176;&#x5C5E;&#x4E8E;&#x5404;&#x4E2A;&#x7C7B;&#x7684;&#x6982;&#x7387;(&#x901A;&#x8FC7;&#x8BA1;&#x7B97;&#x540E;&#x9A8C;&#x6982;&#x7387;&#x5F97;&#x5230;)&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x5B8C;&#x5168;&#x7684;&#x5C5E;&#x4E8E;&#x67D0;&#x4E2A;&#x7C7B;&#xFF0C;&#x8FD9;&#x79CD;&#x805A;&#x7C7B;&#x65B9;&#x6CD5;&#x88AB;&#x6210;&#x4E3A;&#x8F6F;&#x805A;&#x7C7B;&#x3002;&#x4E00;&#x822C;&#x8BF4;&#x6765;&#xFF0C; &#x4EFB;&#x610F;&#x5F62;&#x72B6;&#x7684;&#x6982;&#x7387;&#x5206;&#x5E03;&#x90FD;&#x53EF;&#x4EE5;&#x7528;&#x591A;&#x4E2A;&#x9AD8;&#x65AF;&#x5206;&#x5E03;&#x51FD;&#x6570;&#x53BB;&#x8FD1;&#x4F3C;&#xFF0C;&#x56E0;&#x800C;&#xFF0C;MoG &#x7684;&#x5E94;&#x7528;&#x4E5F;&#x6BD4;&#x8F83;&#x5E7F;&#x6CDB;&#x3002; &#x6B65;&#x9AA4;&#x5206;&#x6790;&#x2003;&#x2003;1. &#x9009;&#x62E9;&#x9AD8;&#x65AF;&#x6A21;&#x578B;&#x4E2A;&#x6570;K&#xFF0C;&#x521D;&#x59CB;&#x5316;&#x53C2;&#x6570; &#x2003;&#x2003;2. &#x6839;&#x636E;&#x8D1D;&#x53F6;&#x65AF;&#x5B9A;&#x7406;&#xFF0C;&#x6C42;&#x51FA;zj&#x7684;&#x540E;&#x9A8C;&#x5206;&#x5E03;&#x6982;&#x7387;$$p(z_j=i | x_j) = \frac{\alpha_i \cdot p(x_j | \mu_i , \Sigma_i)}{\displaystyle \sum_{l=1}^k \alpha_l \cdot p(x_j | \mu_l , \Sigma_l)}$$ &#x2003;&#x2003;3. &#x4F7F;&#x7528;EM&#x7B97;&#x6CD5;&#x8FDB;&#x884C;&#x8FED;&#x4EE3; &#x8BA1;&#x7B97;&#x5747;&#x503C;&#x5411;&#x91CF;&#xFF1A;$$\mu_i &#x2018;=\frac{\displaystyle \sum_{j=1}^m p(z_j=i | x_j) \cdot x_j}{\displaystyle \sum_{j=1}^m p(z_j=i | x_j)}$$ &#x8BA1;&#x7B97;&#x534F;&#x65B9;&#x5DEE;&#x77E9;&#x9635;&#xFF1A;$$\Sigma_i &#x2018;=\frac{\displaystyle \sum_{j=1}^m p(z_j=i | x_j) \ (x_j - \mu_i &#x2018;) \ (x_j - \mu_i &#x2018;)^T}{\displaystyle \sum_{j=1}^m p(z_j=i | x_j)}$$ &#x8BA1;&#x7B97;&#x6DF7;&#x5408;&#x7CFB;&#x6570;&#xFF1A;$$\alpha_i &#x2018;=\frac{\displaystyle \sum_{j=1}^m p(z_j=i | x_j)}{m}$$ &#x2003;&#x2003;4. &#x91CD;&#x590D;&#x6B65;&#x9AA4;1&#xFF0C;2&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6; &#x2003;&#x2003;5. &#x5B9A;&#x4E49;&#x9AD8;&#x65AF;&#x6DF7;&#x5408;&#x5206;&#x5E03;&#x2003;&#x2003;&#x6839;&#x636E;&#x6240;&#x6C42;&#x5F97;&#x7684;&#x5747;&#x503C;&#x5411;&#x91CF;&#xFF0C;&#x534F;&#x65B9;&#x5DEE;&#x77E9;&#x9635;&#x548C;&#x6DF7;&#x5408;&#x7CFB;&#x6570;&#x53EF;&#x4EE5;&#x5B9A;&#x4E49;&#x5982;&#x4E0B;&#x51FD;&#x6570;&#xFF1A;$$p(x)=\displaystyle \sum_{l=1}^k \alpha_i \cdot p(x | \mu_i , \Sigma_i) \ , \ s.t. \displaystyle \sum_{l=1}^k \alpha_i=1$$ &#x2003;&#x2003;6. &#x5BF9;&#x6837;&#x672C;&#x8FDB;&#x884C;&#x6807;&#x8BB0;$$\lambda_j=\underset{i \in { 1,2, \cdots ,k}}{arg\ max} \ p(z_j=i | x_j)$$ &#x7B97;&#x6CD5;&#x6D41;&#x7A0B; &#x4EE3;&#x7801;&#x5B9E;&#x6218;&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6570;&#x636E;&#x96C6;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x6570;&#x636E;&#x96C6;(Data Set) GMM_main.m12345678910111213141516171819202122clear;clc;close all;load(&apos;..\\cluster_mixture.mat&apos;);%&#x8F93;&#x5165;x&#x7684;&#x77E9;&#x9635;x=data;%&#x6837;&#x672C;&#x6570;sample_num=size(x,2);%&#x6DF7;&#x5408;&#x9AD8;&#x65AF;&#x4E2A;&#x6570;class_num=3;%&#x7279;&#x5F81;&#x6570;&#x76EE;feat_num=size(x,1);%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1x_scale=zeros(size(x));for i=1:feat_num x_scale(i,:)=(x(i,:)-min(x(i,:)))/(max(x(i,:))-min(x(i,:)));endy=GMM_classify(x_scale,sample_num,class_num,feat_num);% &#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A;if feat_num==2 GMM_display(x,y,sample_num,class_num);else disp(&apos;The Feature Is Not Two-Dimensional&apos;);end GMM_classify.m1234567891011121314151617181920212223242526272829303132333435363738394041424344function y=GMM_classify(x_scale,sample_num,class_num,feat_num)%&#x521D;&#x59CB;&#x5316;&#x5747;&#x503C;&#x5411;&#x91CF;,&#x534F;&#x65B9;&#x5DEE;&#x77E9;&#x9635;&#xFF0C;&#x6DF7;&#x5408;&#x7CFB;&#x6570;a=ones(1,class_num)/class_num;u=zeros(feat_num,class_num);sigma=zeros(feat_num,feat_num,class_num);randIndex = randperm(size(x_scale,2));u(:,1:class_num)=x_scale(:,randIndex(1:class_num));for i=1:class_num sigma(:,:,i)=eye(feat_num)/10;endfor t=1:50 %&#x5224;&#x65AD;sigma&#x662F;&#x5426;&#x6B63;&#x5B9A; if sum(sum(sum(isnan(sigma))))&gt;0||sum(sum(sum(isinf(sigma))))&gt;0 break; end pm_x=zeros(1,sample_num); %&#x8BA1;&#x7B97;&#x6BCF;&#x4E2A;&#x6837;&#x672C;&#x7684;&#x5168;&#x6982;&#x7387; for i=1:sample_num tem=0; for j=1:class_num tem=tem+a(j)*mvnpdf(x_scale(:,i), u(:,j), sigma(:,:,j)); end pm_x(i)=tem; end %&#x8BA1;&#x7B97;&#x7B2C;i&#x4E2A;&#x6837;&#x672C;&#x5C5E;&#x4E8E;&#x7B2C;j&#x7C7B;&#x7684;&#x540E;&#x9A8C;&#x6982;&#x7387; pm=zeros(sample_num,class_num); for i=1:sample_num for j=1:class_num pm(i,j)=a(j)*mvnpdf(x_scale(:,i), u(:,j), sigma(:,:,j))/pm_x(i); end end %&#x8BA1;&#x7B97;&#x5747;&#x503C;&#x5411;&#x91CF;,&#x534F;&#x65B9;&#x5DEE;&#x77E9;&#x9635;&#xFF0C;&#x6DF7;&#x5408;&#x7CFB;&#x6570; for i=1:class_num sum_pm=sum(pm(:,i)); u(:,i)=sum(repmat(pm(:,i)&apos;,feat_num,1).*x_scale,2)/sum_pm; for j=1:sample_num sigma(:,:,i)=sigma(:,:,i)+pm(j,i)*(x_scale(:,j)-u(:,i))*(x_scale(:,j)-u(:,i))&apos;; end sigma(:,:,i)=sigma(:,:,i)/sum_pm; a(i)=sum_pm/sample_num; endend%&#x628A;&#x6BCF;&#x4E2A;&#x6837;&#x672C;&#x4E2D;&#x6DF7;&#x5408;&#x7CFB;&#x6570;&#x6700;&#x5927;&#x7684;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#x4F5C;&#x4E3A;&#x5176;&#x6807;&#x7B7E;[~,y]=max(pm,[],2); GMM_display.m1234567891011121314151617function GMM_display(x,y,sample_num,class_num)figure;hold on;color_bar=zeros(class_num,3);for i=1:class_num color_bar(i,:)=[rand(1),rand(1),rand(1)];endfor i=1:sample_num if y(i)==0 %&#x753B;&#x51FA;&#x566A;&#x58F0;&#x70B9;&#xFF0C;&#x7528;*&#x8868;&#x793A; plot(x(1,i),x(2,i),&apos;k*&apos;) else %&#x753B;&#x51FA;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x6837;&#x672C;&#x6570;&#x636E;&#xFF0C;&#x7528;o&#x8868;&#x793A; plot(x(1,i),x(2,i),&apos;color&apos;,color_bar(y(i),:),&apos;marker&apos;,&apos;o&apos;); endendhold off; &#x5B9E;&#x9A8C;&#x7ED3;&#x679C; &#x6027;&#x80FD;&#x6BD4;&#x8F83; &#x4F18;&#x70B9;&#xFF1A; &#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x5927;&#x90E8;&#x5206;&#x5F62;&#x72B6;&#x7684;&#x805A;&#x7C7B; &#x5927;&#x6570;&#x636E;&#x96C6;&#x65F6;&#xFF0C;&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F; &#x5BF9;&#x4E8E;&#x8DDD;&#x79BB;&#x6216;&#x5BC6;&#x5EA6;&#x805A;&#x7C7B;&#xFF0C;&#x66F4;&#x9002;&#x5408;&#x9AD8;&#x7EF4;&#x7279;&#x5F81; &#x7F3A;&#x70B9;&#xFF1A; &#x8BA1;&#x7B97;&#x590D;&#x6742;&#xFF0C;&#x901F;&#x5EA6;&#x8F83;&#x6162; &#x96BE;&#x4EE5;&#x5BF9;&#x5706;&#x5F62;&#x6570;&#x636E;&#x805A;&#x7C7B; &#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x77E5;&#x9053;&#x7C7B;&#x522B;&#x7684;&#x4E2A;&#x6570; &#x521D;&#x59CB;&#x5316;&#x53C2;&#x6570;&#x4F1A;&#x5BF9;&#x805A;&#x7C7B;&#x7ED3;&#x679C;&#x4EA7;&#x751F;&#x5F71;&#x54CD; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>机器学习</category>
        <category>无监督学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[谱聚类(Spectral Clustering)]]></title>
    <url>%2F2019%2F05%2F11%2Fclustering_SPECTRAL%2F</url>
    <content type="text"><![CDATA[&#x8C31;&#x805A;&#x7C7B;&#x65B9;&#x6CD5; &#x539F;&#x7406;&#x89E3;&#x8BFB;&#x2003;&#x2003;Spectral Clustering:&#x662F;&#x4E00;&#x79CD;&#x57FA;&#x4E8E;&#x56FE;&#x8BBA;&#x7684;&#x805A;&#x7C7B;&#x7B97;&#x6CD5;&#xFF0C;&#x7B2C;&#x4E00;&#x6B65;&#x662F;&#x6784;&#x56FE;&#xFF1A;&#x5C06;&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x5BF9;&#x8C61;&#x770B;&#x505A;&#x7A7A;&#x95F4;&#x4E2D;&#x7684;&#x70B9;V&#xFF0C;&#x5C06;&#x8FD9;&#x4E9B;&#x70B9;&#x4E4B;&#x7528;&#x8FB9;E&#x8FDE;&#x63A5;&#x8D77;&#x6765;&#xFF0C;&#x8DDD;&#x79BB;&#x8F83;&#x8FDC;&#x7684;&#x4E24;&#x4E2A;&#x70B9;&#x4E4B;&#x95F4;&#x7684;&#x8FB9;&#x6743;&#x91CD;&#x503C;&#x8F83;&#x4F4E;&#x3001;&#x8DDD;&#x79BB;&#x8F83;&#x8FD1;&#x7684;&#x4E24;&#x4E2A;&#x70B9;&#x4E4B;&#x95F4;&#x7684;&#x8FB9;&#x6743;&#x91CD;&#x503C;&#x8F83;&#x9AD8;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x6784;&#x6210;&#x4E86;&#x4E00;&#x4E2A;&#x57FA;&#x4E8E;&#x76F8;&#x4F3C;&#x5EA6;&#x7684;&#x65E0;&#x5411;&#x6743;&#x91CD;&#x56FE;G(V,E)&#x3002;&#x7B2C;&#x4E8C;&#x6B65;&#x662F;&#x5207;&#x56FE;&#xFF1A;&#x6309;&#x7167;&#x4E00;&#x5B9A;&#x7684;&#x5207;&#x8FB9;&#x89C4;&#x5219;&#x5C06;&#x56FE;&#x5207;&#x5206;&#x4E3A;&#x4E0D;&#x540C;&#x7684;&#x5B50;&#x56FE;&#xFF0C;&#x89C4;&#x5219;&#x662F;&#x4F7F;&#x5B50;&#x56FE;&#x5185;&#x7684;&#x8FB9;&#x6743;&#x91CD;&#x548C;&#x5C3D;&#x53EF;&#x80FD;&#x5927;&#xFF0C;&#x4E0D;&#x540C;&#x5B50;&#x56FE;&#x95F4;&#x7684;&#x8FB9;&#x6743;&#x91CD;&#x548C;&#x5C3D;&#x53EF;&#x80FD;&#x5C0F;&#xFF0C;&#x4ECE;&#x800C;&#x8FBE;&#x5230;&#x805A;&#x7C7B;&#x76EE;&#x7684;&#x3002; &#x6838;&#x5FC3;&#x601D;&#x60F3;&#x2003;&#x2003;1. &#x90BB;&#x63A5;&#x77E9;&#x9635;W&#x7684;&#x6784;&#x5EFA;$$w_{ij}=\begin{cases}exp(-\frac{\lVert x_i-x_j \rVert ^2}{2 \sigma ^2}) &amp; i \neq j \\[2ex] 0 &amp; i=j \end{cases}$$ &#x2003;&#x2003;2. &#x5EA6;&#x77E9;&#x9635;W&#x7684;&#x6784;&#x5EFA;$$d_{ij}=\begin{cases}0 &amp; i \neq j \\[2ex] \displaystyle \sum_{j=1} w_{ij} &amp; i=j \end{cases}$$ &#x2003;&#x2003;3. &#x76EE;&#x6807;&#x51FD;&#x6570; &#x6743;&#x91CD;&#x5207;&#x56FE;$$W(A,B)=\displaystyle \sum_{i \in A, j \in B} w_{ij}$$ Ncut&#x5207;&#x56FE;\begin{align}Ncut(A_1,A_2, \cdots ,A_n) &amp;=\displaystyle \sum_{i=1}^n \frac{W(A_i, \overline {A_i})}{\displaystyle \sum_{j \in A_i} \displaystyle \sum_{k=1} w_{jk}} \\&amp;=\underset{F}{\underbrace{arg\ min}}\ {tr(F^TD^{-1/2}LD^{-1/2}F)} \ , \ s.t. \ H^TDH=\mathrm{I}\end{align} &#x2003;&#x2003;4. &#x6C42;&#x6807;&#x51C6;&#x5316;&#x62C9;&#x666E;&#x62C9;&#x65AF;&#x77E9;&#x9635;$$L_{sym}=D^{-1/2}LD^{-1/2}=D^{-1/2}(D-W)D^{-1/2}$$ &#x2003;&#x2003;5. &#x53D6;&#x524D;K&#x4E2A;&#x7279;&#x5F81;&#x503C;&#x5BF9;&#x5E94;&#x7684;&#x7279;&#x5F81;&#x5411;&#x91CF; &#x2003;&#x2003;6. &#x7528;K-Means&#x5BF9;&#x5F52;&#x4E00;&#x5316;&#x7684;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x8FDB;&#x884C;&#x5206;&#x7C7B; &#x2003;&#x2003;7. &#x4E00;&#x4E2A;&#x4FBF;&#x4E8E;&#x7406;&#x89E3;&#x7684;&#x5B9E;&#x4F8B;$$x=\begin{bmatrix} 0.7 &amp; 0.8 &amp; 0.1 &amp; 0.4 &amp; 0.2 &amp; 0.5 &amp; 0.6 \\ 0.5 &amp; 0.6 &amp; 0.1 &amp; 0.8 &amp; 0.2 &amp; 0.8 &amp; 0.7 \end{bmatrix}$$$$w=\begin{bmatrix} 0 &amp; 0.990 &amp; 0.771 &amp; 0.914 &amp; 0.844 &amp; 0.937 &amp; 0.975 \\ 0.990 &amp; 0 &amp; 0.691 &amp; 0.905 &amp; 0.771 &amp; 0.937 &amp; 0.975 \\ 0.771 &amp; 0.691 &amp; 0 &amp; 0.748 &amp; 0.990 &amp; 0.723 &amp; 0.737 \\ 0.914 &amp; 0.905 &amp; 0.748 &amp; 0 &amp; 0.819 &amp; 0.995 &amp; 0.975 \\ 0.844 &amp; 0.771 &amp; 0.990 &amp; 0.819 &amp; 0 &amp; 0.799 &amp; 0.815 \\ 0.937 &amp; 0.937 &amp; 0.723 &amp; 0.995 &amp; 0.799 &amp; 0 &amp; 0.990 \\ 0.975 &amp; 0.975 &amp; 0.737 &amp; 0.975 &amp; 0.815 &amp; 0.990 &amp; 0 \end{bmatrix}$$$$d=\begin{bmatrix} 5.43 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 5.27 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 4.66 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 5.36 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 5.04 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 5.38 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 5.47 \end{bmatrix}$$$$L_{sym}=\begin{bmatrix} 1 &amp; -0.185 &amp; -0.153 &amp; -0.169 &amp; -0.161 &amp; -0.173 &amp; -0.179 \\ -0.185 &amp; 1 &amp; -0.139 &amp; -0.170 &amp; -0.150 &amp; -0.176 &amp; -0.182 \\ -0.153 &amp; -0.139 &amp; 1 &amp; -0.150 &amp; -0.204 &amp; -0.144 &amp; -0.146 \\ -0.169 &amp; -0.170 &amp; -0.150 &amp; 1 &amp; -0.158 &amp; -0.185 &amp; -0.180 \\ -0.161 &amp; -0.150 &amp; -0.204 &amp; -0.158 &amp; 1 &amp; -0.153 &amp; -0.155 \\ -0.173 &amp; -0.176 &amp; -0.144 &amp; -0.185 &amp; -0.153 &amp; 1 &amp; -0.183 \\ -0.179 &amp; -0.182 &amp; -0.146 &amp; -0.180 &amp; -0.155 &amp; -0.183 &amp; 1 \end{bmatrix}$$$$feat_value=\begin{bmatrix} 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 1.080 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 1.159 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 1.205 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1.183 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1.187 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1.186 \end{bmatrix}$$$$feat_vector=\begin{bmatrix} -0.385 &amp; -0.141 &amp; 0.535 &amp; -0.004 &amp; 0.371 &amp; 0.534 &amp; -0.349 \\ -0.379 &amp; -0.302 &amp; 0.470 &amp; -0.040 &amp; 0.042 &amp; -0.691 &amp; 0.249 \\ -0.357 &amp; 0.642 &amp; -0.005 &amp; -0.675 &amp; -0.031 &amp; -0.033 &amp; 0.051 \\ -0.383 &amp; -0.178 &amp; -0.575 &amp; -0.004 &amp; 0.246 &amp; -0.299 &amp; -0.584 \\ -0.371 &amp; 0.558 &amp; 0.010 &amp; 0.736 &amp; -0.036 &amp; -0.053 &amp; 0.070 \\ -0.383 &amp; -0.261 &amp; -0.400 &amp; -0.019 &amp; 0.264 &amp; 0.314 &amp; 0.676 \\ -0.387 &amp; -0.256 &amp; -0.034 &amp; -0.017 &amp; -0.853 &amp; 0.213 &amp; -0.104 \end{bmatrix}$$&#x2003;&#x2003;&#x53D6;&#x6700;&#x5C0F;&#x7684;&#x4E24;&#x4E2A;&#x7279;&#x5F81;&#x503C;&#x5BF9;&#x5E94;&#x7684;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x53EF;&#x5F97;&#xFF1A;$$feature_vector=\begin{bmatrix} -0.385 &amp; -0.141 \\ -0.379 &amp; -0.302 \\ -0.357 &amp; 0.642 \\ -0.383 &amp; -0.178 \\ -0.371 &amp; 0.558 \\ -0.383 &amp; -0.261 \\ -0.387 &amp; -0.256 \end{bmatrix}$$&#x2003;&#x2003;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x6309;&#x884C;&#x5F52;&#x4E00;&#x5316;&#xFF1A;$$feature_vector=\begin{bmatrix} -0.939 &amp; -0.344 \\ -0.782 &amp; -0.623 \\ -0.486 &amp; 0.874 \\ -0.907 &amp; -0.422 \\ -0.553 &amp; 0.833 \\ -0.827 &amp; -0.563 \\ -0.834 &amp; -0.552 \end{bmatrix}$$&#x2003;&#x2003;&#x53EF;&#x4EE5;&#x660E;&#x663E;&#x770B;&#x51FA;&#xFF1A;${x_1,x_2,x_4,x_6,x_7} \in A_1\ ,\ {x_3,x_5} \in A_2$ &#x7B97;&#x6CD5;&#x6D41;&#x7A0B; &#x4EE3;&#x7801;&#x5B9E;&#x6218;&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6570;&#x636E;&#x96C6;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x6570;&#x636E;&#x96C6;(Data Set) SPECTRAL_main.m123456789101112131415161718192021222324clear;clc;close all;load(&apos;..\\\\cluster_mixture.mat&apos;);%&#x8F93;&#x5165;x&#x7684;&#x77E9;&#x9635;x=data;randIndex = randperm(size(x,2));x=x(:,randIndex);%&#x5E0C;&#x671B;&#x5212;&#x5206;&#x7684;&#x7C7B;&#x522B;&#x6570;class_num=3;%&#x6837;&#x672C;&#x6570;sample_num=size(x,2);%&#x7279;&#x5F81;&#x6570;&#x76EE;feat_num=size(x,1);%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1x_scale=zeros(size(x));for i=1:feat_num x_scale(i,:)=(x(i,:)-min(x(i,:)))/(max(x(i,:))-min(x(i,:)));endy=SPECTRAL_classify(x_scale,sample_num,class_num);%&#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A;if feat_num==2 SPECTRAL_display(x,y,sample_num,class_num);else disp(&apos;The Feature Is Not Two-Dimensional&apos;);end SPECTRAL_classify.m12345678910111213141516171819202122function y=SPECTRAL_classify(x_scale,sample_num,class_num)%w&#x4E3A;&#x90BB;&#x63A5;&#x77E9;&#x9635;w=zeros(sample_num);for i=1:sample_num w(i,:)=exp(-sum((x_scale-repmat(x_scale(:,i),1,sample_num)).^2)/2); w(i,i)=0;end%D&#x4E3A;&#x5EA6;&#x77E9;&#x9635;d=diag(sum(w,2));%&#x6807;&#x51C6;&#x5316;&#x62C9;&#x666E;&#x62C9;&#x65AF;&#x77E9;&#x9635;l=d^(-0.5)*(d-w)*d^(-0.5);%&#x6C42;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x548C;&#x7279;&#x5F81;&#x503C;[feat_vector,feat_value_temp]=eig(l);feat_value=diag(feat_value_temp);temp=sort(feat_value);loc=feat_value&lt;=temp(class_num);%&#x6C42;&#x51FA;&#x6700;&#x5C0F;&#x7684;class_num&#x4E2A;&#x7279;&#x5F81;&#x5411;&#x91CF;class_feat_vector=feat_vector(:,loc);%&#x7279;&#x5F81;&#x5411;&#x91CF;&#x5F52;&#x4E00;&#x5316;class_feat_vector=class_feat_vector./repmat(sqrt(sum(class_feat_vector.^2,2)),1,class_num);%&#x5229;&#x7528;kmeans&#x8FDB;&#x884C;&#x5206;&#x7C7B;y=SPECTRAL_kmeans(class_feat_vector&apos;,sample_num,class_num); SPECTRAL_display.m1234567891011function SPECTRAL_display(x,y,sample_num,class_num)color_bar=zeros(class_num,3);hold on;for i=1:class_num color_bar(i,:)=[rand(1),rand(1),rand(1)];endfor i=1:sample_num %&#x7ED8;&#x5236;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x7528;o&#x8868;&#x793A; plot(x(1,i),x(2,i),&apos;color&apos;,color_bar(y(i),:),&apos;marker&apos;,&apos;o&apos;);endhold off; SPECTRAL_kmeans.m1234567891011121314151617181920212223242526272829303132function y=SPECTRAL_kmeans(class_feat_vector,sample_num,class_num)%&#x7C7B;&#x522B;&#x4E2D;&#x5FC3;&#x4F4D;&#x7F6E;loc_center=class_feat_vector(:,1:class_num);%&#x8BBE;&#x7F6E;&#x8FED;&#x4EE3;&#x6B21;&#x6570;k=0;while 1 %&#x521D;&#x59CB;&#x5316;&#x6700;&#x65B0;&#x7684;&#x5206;&#x7C7B;&#x4E2D;&#x5FC3; loc_center_new=zeros(size(loc_center)); distance=zeros(class_num,sample_num); %distance&#x4E3A;&#x6BCF;&#x4E00;&#x4E2A;&#x6837;&#x672C;&#x5230;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x8DDD;&#x79BB; for i=1:class_num distance(i,:)=sum((class_feat_vector-repmat(loc_center(:,i),1,sample_num)).^2); end %&#x6C42;&#x51FA;&#x6BCF;&#x4E2A;&#x6837;&#x672C;&#x5230;&#x54EA;&#x4E00;&#x7C7B;&#x6700;&#x8FD1; [~,y]=min(distance); %&#x66F4;&#x65B0;&#x5206;&#x7C7B;&#x4E2D;&#x5FC3; for i=1:class_num loc_center_new(:,i)=sum(class_feat_vector(:,y==i),2)/sum(y==i); end %&#x5982;&#x679C;&#x5206;&#x7C7B;&#x4E2D;&#x5FC3;&#x548C;&#x4E0A;&#x4E00;&#x6B21;&#x5206;&#x7C7B;&#x4E2D;&#x5FC3;&#x76F8;&#x7B49;&#x5219;&#x5206;&#x7C7B;&#x5B8C;&#x6BD5; if isequal(loc_center_new,loc_center) break; %&#x5426;&#x5219;&#x7EE7;&#x7EED;&#x5206;&#x7C7B; else loc_center=loc_center_new; k=k+1; %&#x5982;&#x679C;&#x5206;&#x7C7B;&#x6B21;&#x6570;&#x8FBE;&#x5230;1000&#x4ECD;&#x7136;&#x6CA1;&#x6709;&#x7ED3;&#x675F;&#xFF0C;&#x5219;&#x5F3A;&#x5236;&#x5206;&#x7C7B;&#x7ED3;&#x675F; if k&gt;=1000 break; end endend &#x5B9E;&#x9A8C;&#x7ED3;&#x679C; &#x6027;&#x80FD;&#x6BD4;&#x8F83; &#x4F18;&#x70B9;&#xFF1A; &#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x6570;&#x636E;&#x70B9;&#x7684;&#x9009;&#x62E9; &#x4F7F;&#x7528;&#x4E86;&#x964D;&#x7EF4;&#x6280;&#x672F;&#xFF0C;&#x9002;&#x5408;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#x7684;&#x805A;&#x7C7B; &#x5EFA;&#x7ACB;&#x5728;&#x8C31;&#x56FE;&#x7406;&#x8BBA;&#xFF0C;&#x80FD;&#x5728;&#x5927;&#x90E8;&#x5206;&#x5F62;&#x72B6;&#x805A;&#x7C7B;&#xFF0C;&#x6536;&#x655B;&#x4E8E;&#x5168;&#x5C40;&#x6700;&#x4F18;&#x89E3; &#x7F3A;&#x70B9;&#xFF1A; &#x96BE;&#x4EE5;&#x5BF9;&#x5706;&#x5F62;&#x6570;&#x636E;&#x805A;&#x7C7B; &#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x975E;&#x5E38;&#x654F;&#x611F; &#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x77E5;&#x9053;&#x7C7B;&#x522B;&#x7684;&#x4E2A;&#x6570; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>机器学习</category>
        <category>无监督学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[快速搜索聚类(CFDP)]]></title>
    <url>%2F2019%2F05%2F09%2Fclustering_CFDP%2F</url>
    <content type="text"><![CDATA[&#x5FEB;&#x901F;&#x641C;&#x7D22;&#x805A;&#x7C7B;&#x65B9;&#x6CD5; &#x539F;&#x7406;&#x89E3;&#x8BFB;&#x2003;&#x2003;CFDP(Clustering By Fast Search And Find Of Density Peaksd):&#x7ECF;&#x5178;&#x7684;&#x805A;&#x7C7B;&#x7B97;&#x6CD5;K-means&#x4E0D;&#x80FD;&#x68C0;&#x6D4B;&#x975E;&#x7403;&#x9762;&#x7C7B;&#x522B;&#x7684;&#x6570;&#x636E;&#x5206;&#x5E03;&#xFF0C;DBSCAN&#x5FC5;&#x987B;&#x6307;&#x5B9A;&#x4E00;&#x4E2A;&#x5BC6;&#x5EA6;&#x9608;&#x503C;&#xFF0C;CFDP&#x901A;&#x8FC7;&#x5BF9;&#x4E24;&#x79CD;&#x65B9;&#x6CD5;&#x7684;&#x6539;&#x5584;&#xFF0C;&#x9009;&#x62E9;&#x6BCF;&#x4E2A;&#x533A;&#x57DF;&#x5BC6;&#x5EA6;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x6839;&#x636E;&#x5BC6;&#x5EA6;&#x9009;&#x62E9;&#x5468;&#x56F4;&#x70B9;&#x7684;&#x5F52;&#x5C5E;&#x3002; &#x6838;&#x5FC3;&#x601D;&#x60F3;&#x2003;&#x2003;1. &#x6C42;&#x51FA;&#x6BCF;&#x4E2A;&#x70B9;&#x7684;&#x5BC6;&#x5EA6;&#x3C1;i(&#x591A;&#x79CD;&#x5B9A;&#x4E49;&#x65B9;&#x6CD5;) k&#x8FD1;&#x90BB;&#x5747;&#x503C;&#x5012;&#x6570;$$\rho_i = \frac{k}{\displaystyle \sum_{j=1}^k d_{ij}} \ , \ d_{i1} \leq d_{i2} \leq \cdots \leq d_{in}$$ &#x9AD8;&#x65AF;&#x6838;&#x76F8;&#x4F3C;&#x5EA6;$$\rho_i = \underset{d_{ij} \leq d_c}{\sum}exp[-(\frac{d_{ij}}{d_c})^2]$$ &#x5468;&#x56F4;&#x70B9;&#x7684;&#x4E2A;&#x6570;$$\rho_i = \sum_{j=1}^n {\chi(d_{ij}-d_c)} \ , \ \chi(x)= \begin{cases} 1, &amp; x&lt;0 \[2ex] 0, &amp; otherwise \end{cases} \ , \ &#x5176;&#x4E2D;d_c&#x4E3A;&#x622A;&#x65AD;&#x8DDD;&#x79BB;$$ &#x2003;&#x2003;2. &#x5BC6;&#x5EA6;&#x4ECE;&#x5927;&#x5230;&#x5C0F;&#x6392;&#x5E8F;&#xFF0C;&#x5E76;&#x6C42;&#x51FA;&#x6700;&#x5927;&#x5BC6;&#x5EA6;&#x3C1;max$$\rho_{x_1} \ge \rho_{x_2} \ge \cdots \ge \rho_{x_n} \ , \ \rho_{max} = \rho_{x_1} $$ dij:&#x539F;&#x5E8F;&#x5217;i&#xFF0C;j&#x6837;&#x672C;&#x7684;&#x8DDD;&#x79BB; d(xi,xj):&#x5BC6;&#x5EA6;&#x6392;&#x5E8F;&#x540E;&#xFF0C;xi&#x548C;xj&#x6837;&#x672C;&#x7684;&#x8DDD;&#x79BB; &#x2003;&#x2003;3. &#x6C42;&#x51FA;&#x6BCF;&#x4E2A;&#x70B9;&#x7684;&#x8DDD;&#x79BB;&#x3B4;i&#x2003;&#x2003;&#x3B4;i&#xFF1A;&#x5230;&#x5BC6;&#x5EA6;&#x5927;&#x4E8E;i&#x7684;&#x6700;&#x8FD1;&#x70B9;j&#x7684;&#x8DDD;&#x79BB;dist(ij)$$\delta_{x_i} = \begin{cases} \underset{j&lt;i}{min}\ d(x_i,x_j) &amp; i \ge 2 \[2ex] \underset{j \ge 2}{\max}\ \delta_{x_j} &amp; i=1 \end{cases} $$ &#x2003;&#x2003;4. &#x753B;&#x51FA;&#x3C1;-&#x3B4;&#x56FE;&#xFF0C;&#x627E;&#x5230;&#x79BB;&#x7FA4;&#x70B9;(&#x4EE3;&#x8868;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x4E2D;&#x5FC3;) &#x2003;&#x2003;5. &#x6309;&#x5BC6;&#x5EA6;&#x4ECE;&#x5927;&#x5230;&#x5C0F;&#x5F52;&#x5C5E;&#x4E8E;&#x8DDD;&#x79BB;&#x6700;&#x8FD1;&#x70B9;&#x7684;&#x7C7B;&#x522B;$$x_i \in C_k \ , \ &#x5176;&#x4E2D;k=\underset{j&lt;i \ , \ x_j \in C_k}{arg \ min}\ d(x_i,x_j)$$ &#x2003;&#x2003;6. &#x5B9A;&#x4E49;&#x4E24;&#x7C7B;&#x4E4B;&#x95F4;&#x7684;&#x6700;&#x5C0F;&#x8DDD;&#x79BB;d0&#x2003;&#x2003;&#x4E24;&#x7C7B;&#x7684;&#x6700;&#x5C0F;&#x8DDD;&#x79BB;&#xFF1A;&#x6240;&#x6709;&#x6837;&#x672C;&#x4E4B;&#x95F4;&#x8DDD;&#x79BB;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;&#x540E;&#x7B2C;2%&#x4E2A;&#x79F0;&#x4E24;&#x7C7B;&#x7684;&#x6700;&#x5C0F;&#x8DDD;&#x79BB;&#x3002; &#x2003;&#x2003;7. &#x5B9A;&#x4E49;&#x8FB9;&#x7F18;&#x70B9;&#xFF0C;&#x6C42;&#x51FA;&#x8FB9;&#x7F18;&#x70B9;&#x6700;&#x5927;&#x5BC6;&#x5EA6;&#x3C1;b&#x2003;&#x2003;&#x8FB9;&#x7F18;&#x70B9;&#xFF1A;&#x5728;k&#x7C7B;&#x6570;&#x636E;&#x5230;&#x975E;k&#x7C7B;&#x6570;&#x636E;&#x7684;&#x6700;&#x5C0F;&#x8DDD;&#x79BB;&#x5C0F;&#x4E8E;dist0&#x7684;&#x70B9;&#xFF0C;&#x79F0;&#x4E3A;k&#x7C7B;&#x6570;&#x636E;&#x7684;&#x8FB9;&#x7F18;&#x70B9;&#x3002;$$E = {i | d_{ij}&lt;dist_0 , \forall i \in C_k , j \in \overline{C_k} }$$$$\rho_b = \underset{i \in E}{\max}\ \rho_i$$ &#x2003;&#x2003;8. &#x5224;&#x65AD;&#x566A;&#x58F0;&#x70B9;&#x2003;&#x2003;&#x566A;&#x58F0;&#x70B9;&#xFF1A;&#x5C06;k&#x7C7B;&#x4E2D;&#x5BC6;&#x5EA6;&#x5C0F;&#x4E8E;&#x3C1;b&#x7684;&#x6240;&#x6709;&#x6570;&#x636E;&#x8BB0;&#x4E3A;&#x566A;&#x58F0;&#x3002;$$N={i | \rho_i&lt;\rho_b , \forall i \in C_k }$$ &#x7B97;&#x6CD5;&#x6D41;&#x7A0B; &#x4EE3;&#x7801;&#x5B9E;&#x6218;&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6570;&#x636E;&#x96C6;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x6570;&#x636E;&#x96C6;(Data Set) CFDP_main.m123456789101112131415161718192021222324clear;clc;close all;load(&apos;..\\cluster_line.mat&apos;);%&#x8F93;&#x5165;x&#x7684;&#x77E9;&#x9635;x=data;randIndex = randperm(size(x,2));x=x(:,randIndex);%&#x6837;&#x672C;&#x6570;sample_num=size(x,2);%&#x5224;&#x65AD;&#x5BC6;&#x5EA6;&#x65F6;&#x68C0;&#x6D4B;&#x5468;&#x56F4;&#x70B9;&#x7684;&#x4E2A;&#x6570;k=round(sample_num/10);%&#x7279;&#x5F81;&#x6570;&#x76EE;feat_num=size(x,1);%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1x_scale=zeros(size(x));for i=1:feat_num x_scale(i,:)=(x(i,:)-min(x(i,:)))/(max(x(i,:))-min(x(i,:)));end[y,density_max]=CFDP_classify(x_scale,sample_num,k);% &#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A;if feat_num==2 CFDP_display(x,y,sample_num,density_max)else disp(&apos;The Feature Is Not Two-Dimensional&apos;);end CFDP_classify.m123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960function [y,density_max]=CFDP_classify(x_scale,sample_num,k)y=zeros(1,sample_num);%p&#x4E3A;&#x6BCF;&#x4E2A;&#x6837;&#x672C;&#x7684;&#x5BC6;&#x5EA6;p=zeros(1,sample_num);%deta&#x4E3A;&#x9AD8;&#x5BC6;&#x5EA6;&#x8DDD;&#x79BB;deta=zeros(1,sample_num);%distance(i,j)&#x4EE3;&#x8868;&#x7B2C;i&#x4E2A;&#x6837;&#x672C;&#x5230;&#x7B2C;j&#x4E2A;&#x6837;&#x672C;&#x7684;&#x8DDD;&#x79BB;distance=zeros(sample_num);%&#x5229;&#x7528;k&#x8FD1;&#x90BB;&#x5747;&#x503C;&#x5B9A;&#x4E49;&#x5BC6;&#x5EA6;&#x8F83;&#x597D;&#xFF0C;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x5F88;&#x591A;&#x5BC6;&#x5EA6;&#x76F8;&#x540C;&#x7684;&#x70B9;&#x3002;&#x5982;&#x679C;&#x91C7;&#x7528;&#x534A;&#x5F84;&#x5185;&#x4E2A;&#x6570;&#x7684;&#x5B9A;&#x4E49;&#x65B9;&#x6CD5;&#xFF0C;&#x53EF;&#x80FD;&#x4E00;&#x5757;&#x533A;&#x57DF;&#x4F1A;&#x51FA;&#x73B0;&#x5F88;&#x591A;&#x7684;&#x7C7B;&#x522B;for i=1:sample_num distance(i,:)=sum((x_scale-repmat(x_scale(:,i),1,sample_num)).^2); temp=sort(distance(i,:)); p(i)=k./sum(distance(i,distance(i,:)&lt;=temp(k)));endfor i=1:sample_num temp=find(p&gt;p(i)); %&#x5982;&#x679C;&#x6709;&#x591A;&#x4E2A;&#x6700;&#x5927;&#x70B9; if isempty(temp) deta(i)=distance(i,find(p==max(p),1)); else %&#x627E;&#x5230;&#x5BC6;&#x5EA6;&#x5927;&#x4E8E;&#x8BE5;&#x70B9;&#x7684;&#x4E14;&#x8DDD;&#x79BB;&#x8BE5;&#x70B9;&#x6700;&#x8FD1;&#x7684;&#x70B9; tem=find(distance(i,p&gt;p(i))==min(distance(i,p&gt;p(i))),1); deta(i)=distance(i,temp(tem)); endend%&#x5BC6;&#x5EA6;&#x6700;&#x5927;&#x70B9;&#x8D4B;&#x503C;&#x65E0;&#x7A77; deta(find(p==max(p),1))=1;p_judge=max(p)/5;deta_judge=0.1;%&#x83B7;&#x53D6;&#x7C7B;&#x522B;&#x7684;&#x4E2D;&#x5FC3;center_loc=p&gt;p_judge&amp;deta&gt;deta_judge;%&#x627E;&#x5230;&#x7C7B;&#x522B;&#x4E2D;&#x5FC3;&#x6240;&#x5728;&#x4F4D;&#x7F6E;density_max=find(center_loc);%&#x5C06;p&#x548C;deta&#x8F83;&#x5927;&#x7684;&#x503C;&#x4F5C;&#x4E3A;&#x65B0;&#x7684;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;y(center_loc)=1:sum(center_loc);%&#x5BF9;&#x5BC6;&#x5EA6;&#x4ECE;&#x5927;&#x5230;&#x5C0F;&#x6392;&#x5E8F;[~,density_loc]=sort(p,&apos;descend&apos;);%&#x5C06;&#x67D0;&#x70B9;&#x5212;&#x5206;&#x5230;&#x5BC6;&#x5EA6;&#x5927;&#x4E8E;&#x8BE5;&#x70B9;&#x5E76;&#x4E14;&#x8DDD;&#x79BB;&#x8BE5;&#x70B9;&#x6700;&#x8FD1;&#x7684;&#x4E00;&#x7C7B;for i=2:sample_num if y(density_loc(i))==0 temp=density_loc(1:i-1); y(density_loc(i))=y(temp(find(distance(density_loc(i),temp)==min(distance(density_loc(i),temp)),1))); endend%&#x5B9A;&#x4E49;&#x4E24;&#x7C7B;&#x4E4B;&#x95F4;&#x7684;&#x6700;&#x5C0F;&#x8DDD;&#x79BB;distance_temp=distance.*triu(ones(sample_num));temp=sort(distance_temp(distance_temp&gt;0));%&#x53D6;&#x51FA;&#x524D;%2&#x7684;&#x8DDD;&#x79BB;&#x4F5C;&#x4E3A;&#x6700;&#x5C0F;&#x8DDD;&#x79BB;dc=temp(round(length(temp)/50));for i=1:sum(center_loc) %&#x5F97;&#x5230;&#x8FB9;&#x7F18;&#x70B9; edge= min(distance(y==i,y~=i),[],2)&lt;dc; if ~(isempty(edge)||isequal(edge,zeros(length(find(y==i)),1))) tem=find(y==i); %&#x5F97;&#x5230;&#x8FB9;&#x7F18;&#x533A;&#x57DF;&#x5BC6;&#x5EA6;&#x6700;&#x5927;&#x7684;&#x503C; pb=max(p(tem(edge))); %&#x5C06;&#x5BC6;&#x5EA6;&#x5C0F;&#x4E8E;&#x8BE5;&#x6700;&#x5927;&#x503C;&#x7684;&#x70B9;&#x4F5C;&#x4E3A;&#x566A;&#x58F0;&#x70B9; y(tem(p(y==i)&lt;=pb))=0; endend CFDP_display.m123456789101112131415161718function CFDP_display(x,y,sample_num,density_max)color_bar=zeros(length(density_max),3);hold on;for i=1:length(density_max) color_bar(i,:)=[rand(1),rand(1),rand(1)];endfor i=1:sample_num if y(i)==0 plot(x(1,i),x(2,i),&apos;ko&apos;); else if ismember(i,density_max) plot(x(1,i),x(2,i),&apos;color&apos;,color_bar(y(i),:),&apos;marker&apos;,&apos;*&apos;); else plot(x(1,i),x(2,i),&apos;color&apos;,color_bar(y(i),:),&apos;marker&apos;,&apos;o&apos;); end endendhold off; &#x5B9E;&#x9A8C;&#x7ED3;&#x679C; &#x6027;&#x80FD;&#x6BD4;&#x8F83; &#x4F18;&#x70B9;&#xFF1A; &#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F; &#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x6570;&#x636E;&#x70B9;&#x7684;&#x9009;&#x62E9; &#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x4EFB;&#x610F;&#x5F62;&#x72B6;&#x7684;&#x805A;&#x7C7B; &#x7F3A;&#x70B9;&#xFF1A; &#x79BB;&#x7FA4;&#x70B9;&#x7684;&#x786E;&#x5B9A;&#x975E;&#x5E38;&#x590D;&#x6742; &#x7B97;&#x6CD5;&#x590D;&#x6742;&#xFF0C;&#x5206;&#x7C7B;&#x901F;&#x5EA6;&#x8F83;&#x6162; &#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D; &#x4E0D;&#x9002;&#x5408;&#x6570;&#x636E;&#x96C6;&#x6574;&#x4F53;&#x5BC6;&#x5EA6;&#x57FA;&#x672C;&#x76F8;&#x540C;&#x7684;&#x60C5;&#x51B5; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>机器学习</category>
        <category>无监督学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[密度最大值聚类(MDCA)]]></title>
    <url>%2F2019%2F05%2F07%2Fclustering_MDCA%2F</url>
    <content type="text"><![CDATA[&#x5BC6;&#x5EA6;&#x6700;&#x5927;&#x503C;&#x805A;&#x7C7B;&#x65B9;&#x6CD5; &#x539F;&#x7406;&#x89E3;&#x8BFB;&#x2003;&#x2003;MDCA(Maximum Density Clustering Application):&#x5C06;&#x57FA;&#x4E8E;&#x5BC6;&#x5EA6;&#x7684;&#x601D;&#x60F3;&#x5F15;&#x5165;&#x5230;&#x5212;&#x5206;&#x805A;&#x7C7B;&#x4E2D;&#xFF0C;&#x4F7F;&#x7528;&#x5BC6;&#x5EA6;&#x800C;&#x4E0D;&#x662F;&#x521D;&#x59CB;&#x8D28;&#x5FC3;&#x4F5C;&#x4E3A;&#x8003;&#x5BDF;&#x7C07;&#x5F52;&#x5C5E;&#x60C5;&#x51B5;&#x7684;&#x4F9D;&#x636E;&#xFF0C;&#x80FD;&#x591F;&#x81EA;&#x52A8;&#x786E;&#x5B9A;&#x7C07;&#x6570;&#x91CF;&#x5E76;&#x53D1;&#x73B0;&#x4EFB;&#x610F;&#x5F62;&#x72B6;&#x7684;&#x7C07;&#x3002;MDCA&#x4E00;&#x822C;&#x4E0D;&#x4FDD;&#x7559;&#x566A;&#x58F0;&#xFF0C;&#x56E0;&#x6B64;&#x4E5F;&#x907F;&#x514D;&#x4E86;&#x7531;&#x4E8E;&#x9608;&#x503C;&#x9009;&#x62E9;&#x4E0D;&#x5F53;&#x800C;&#x9020;&#x6210;&#x5927;&#x91CF;&#x5BF9;&#x8C61;&#x4E22;&#x5F03;&#x60C5;&#x51B5;&#x3002; &#x6838;&#x5FC3;&#x601D;&#x60F3;&#x2003;&#x2003;1.&#x6700;&#x5927;&#x5BC6;&#x5EA6;&#x70B9;&#xFF1A;&#x53EF;&#x7528;K&#x8FD1;&#x90BB;&#x8DDD;&#x79BB;&#x4E4B;&#x548C;&#x7684;&#x5012;&#x6570;&#x8868;&#x793A;&#x5BC6;&#x5EA6;$$\rho_{max}={ \rho_{x} | x \in C, \forall x_i \in C, \rho_(x) \ge \rho_(x_i) } \ , \ &#x5176;&#x4E2D;C&#x4E3A;&#x6570;&#x636E;&#x96C6;$$ &#x2003;&#x2003;2. &#x5BC6;&#x5EA6;&#x66F2;&#x7EBF;&#xFF1A;&#x6839;&#x636E;&#x6240;&#x6709;&#x5BF9;&#x8C61;&#x4E0E;x&#x7684;&#x6B27;&#x5F0F;&#x8DDD;&#x79BB;&#x5BF9;&#x6570;&#x636E;&#x96C6;&#x91CD;&#x65B0;&#x6392;&#x5E8F;$$S_{\rho_{max}}={x_1 , x_2 , \cdots , x_n | d(x,x_1) \leq d(x,x_2) \leq \cdots \leq d(x,x_n) }$$ &#x2003;&#x2003;3. &#x5C06;&#x5BC6;&#x5EA6;&#x66F2;&#x7EBF;&#x4E2D;&#x7B2C;&#x4E00;&#x4E2A;&#x8C37;&#x503C;&#x4E4B;&#x524D;&#x7684;&#x6570;&#x636E;&#x5F52;&#x4E3A;&#x4E00;&#x7C7B;&#xFF0C;&#x5E76;&#x5C06;&#x5176;&#x5254;&#x9664; &#x2003;&#x2003;4. &#x91CD;&#x590D;&#x6B65;&#x9AA4;1&#xFF0C;2&#xFF0C;3&#x76F4;&#x5230;&#x6240;&#x6709;&#x7684;&#x70B9;&#x90FD;&#x5728;&#x3C1;0&#x4E4B;&#x4E0B;&#x6216;&#x8005;&#x3C1;0&#x4E4B;&#x4E0A; &#x2003;&#x2003;5. &#x4E24;&#x4E2A;&#x7C07;Ci&#x548C;Cj&#xFF0C;&#x7528;&#x6700;&#x8FD1;&#x6837;&#x672C;&#x8DDD;&#x79BB;&#x4F5C;&#x4E3A;&#x7C07;&#x95F4;&#x8DDD;&#x79BB;$$d(c_i,c_j)=\underset{x_i \in C_i,x_j \in C_j}{\min}d(x_i,x_j)$$ &#x2003;&#x2003;6. &#x6839;&#x636E;&#x7C07;&#x95F4;&#x8DDD;&#x79BB;&#x9608;&#x503C;d0&#xFF0C;&#x5224;&#x65AD;&#x662F;&#x5426;&#x9700;&#x8981;&#x5408;&#x5E76;&#x4E24;&#x7C7B; &#x7B97;&#x6CD5;&#x6D41;&#x7A0B; &#x4EE3;&#x7801;&#x5B9E;&#x6218;&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6570;&#x636E;&#x96C6;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x6570;&#x636E;&#x96C6;(Data Set) MDCA_main.m12345678910111213141516171819202122232425262728clear;clc;close all;load(&apos;..\\cluster_gauss.mat&apos;);%&#x8F93;&#x5165;x&#x7684;&#x77E9;&#x9635;x=data;randIndex = randperm(size(x,2));x=x(:,randIndex);%&#x6837;&#x672C;&#x6570;sample_num=size(x,2);%&#x5224;&#x65AD;&#x5BC6;&#x5EA6;&#x65F6;&#x68C0;&#x6D4B;&#x5468;&#x56F4;&#x70B9;&#x7684;&#x4E2A;&#x6570;k=5;%&#x6700;&#x5C0F;&#x9608;&#x503C;&#x5BC6;&#x5EA6;density_min=25000;%&#x6700;&#x5C0F;&#x9608;&#x503C;&#x8DDD;&#x79BB;distance_min=0.1;%&#x7279;&#x5F81;&#x6570;&#x76EE;feat_num=size(x,1);%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1x_scale=zeros(size(x));for i=1:feat_num x_scale(i,:)=(x(i,:)-min(x(i,:)))/(max(x(i,:))-min(x(i,:)));end[y,class_num]=MDCA_classify(x_scale,sample_num,k,density_min,distance_min);% &#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A;if feat_num==2 MDCA_display(x,y,sample_num,class_num);else disp(&apos;The Feature Is Not Two-Dimensional&apos;);end MDCA_classify.m12345678910111213141516171819202122232425262728293031323334353637383940function [y,class_num]=MDCA_classify(x_scale,sample_num,k,density_min,distance_min)class_num=1;y=zeros(1,sample_num);%p&#x4E3A;&#x6BCF;&#x4E2A;&#x6837;&#x672C;&#x7684;&#x5BC6;&#x5EA6;p=zeros(1,sample_num);%distance(i,j)&#x4EE3;&#x8868;&#x7B2C;i&#x4E2A;&#x6837;&#x672C;&#x5230;&#x7B2C;j&#x4E2A;&#x6837;&#x672C;&#x7684;&#x8DDD;&#x79BB;distance=zeros(sample_num);%&#x5229;&#x7528;k&#x8FD1;&#x90BB;&#x5747;&#x503C;&#x5B9A;&#x4E49;&#x5BC6;&#x5EA6;&#x8F83;&#x597D;&#xFF0C;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x5F88;&#x591A;&#x5BC6;&#x5EA6;&#x76F8;&#x540C;&#x7684;&#x70B9;&#x3002;&#x5982;&#x679C;&#x91C7;&#x7528;&#x534A;&#x5F84;&#x5185;&#x4E2A;&#x6570;&#x7684;&#x5B9A;&#x4E49;&#x65B9;&#x6CD5;&#xFF0C;&#x53EF;&#x80FD;&#x4E00;&#x5757;&#x533A;&#x57DF;&#x4F1A;&#x51FA;&#x73B0;&#x5F88;&#x591A;&#x7684;&#x7C7B;&#x522B;for i=1:sample_num distance(i,:)=sum((x_scale-repmat(x_scale(:,i),1,sample_num)).^2); temp=sort(distance(i,:)); p(i)=k./sum(distance(i,distance(i,:)&lt;=temp(k)));end [y,class_num]=MDCA_findclass(y,p,distance,density_min,class_num); %&#x8BBE;&#x7F6E;&#x4E24;&#x4E2A;&#x6807;&#x7F6E;&#x4F4D;while 1 flag_2=0; for i=1:class_num flag_1=0; for j=i+1:class_num if min(min(distance(y==i,y==j)))&lt;=distance_min y(y==j)=i; y(y&gt;j)=y(y&gt;j)-1; class_num=class_num-1; flag_1=1; break; end end if flag_1==1; break; end flag_2=1; end if flag_2==1 break; endendloc=find(y~=0);[temp,tem]=min(distance(y==0,y~=0),[],2);y(y==0)=y(loc(tem)).*(temp&lt;=distance_min)&apos;; MDCA_findclass.m12345678910111213141516171819202122function [y,class_num]=MDCA_findclass(y,p,distance,density_min,class_num)tem=find(y==0);p_temp=p(tem);%&#x627E;&#x5230;&#x6700;&#x5927;&#x7684;&#x5BC6;&#x5EA6;&#x70B9;p_max=tem(find(p_temp==max(p_temp),1));%&#x6309;&#x7167;&#x5230;&#x6700;&#x5927;&#x5BC6;&#x5EA6;&#x70B9;&#x7684;&#x8DDD;&#x79BB;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;[~,b]=sort(distance(p_max,tem));temp=tem(b);curve=p(temp);if max(curve)&gt;density_min loc=find(curve&lt;=density_min); if ~isempty(loc)&amp;&amp;length(loc)&gt;=2 for i=1:length(loc)-1 if loc(i+1)-loc(i)&lt;=2 break; end end y(temp(1:loc(i)))=class_num; [y,class_num]=MDCA_findclass(y,p,distance,density_min,class_num+1); return; endend MDCA_display.m12345678910111213141516function MDCA_display(x,y,sample_num,class_num)figure;hold on;for i=1:class_num color_bar(i,:)=[rand(1),rand(1),rand(1)];endfor i=1:sample_num if y(i)==0 %&#x753B;&#x51FA;&#x566A;&#x58F0;&#x70B9;&#xFF0C;&#x7528;*&#x8868;&#x793A; plot(x(1,i),x(2,i),&apos;k*&apos;) else %&#x753B;&#x51FA;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x6837;&#x672C;&#x6570;&#x636E;&#xFF0C;&#x7528;o&#x8868;&#x793A; plot(x(1,i),x(2,i),&apos;color&apos;,color_bar(y(i),:),&apos;marker&apos;,&apos;o&apos;); endendhold off; &#x5B9E;&#x9A8C;&#x7ED3;&#x679C; &#x6027;&#x80FD;&#x6BD4;&#x8F83; &#x4F18;&#x70B9;&#xFF1A; &#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F; &#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x6570;&#x636E;&#x70B9;&#x7684;&#x9009;&#x62E9; &#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x4EFB;&#x610F;&#x5F62;&#x72B6;&#x7684;&#x805A;&#x7C7B; &#x7F3A;&#x70B9;&#xFF1A; &#x7B97;&#x6CD5;&#x590D;&#x6742;&#xFF0C;&#x5206;&#x7C7B;&#x901F;&#x5EA6;&#x8F83;&#x6162; &#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x786E;&#x5B9A;&#x5BC6;&#x5EA6;&#x9608;&#x503C; &#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D; &#x4E0D;&#x9002;&#x5408;&#x6570;&#x636E;&#x96C6;&#x5BC6;&#x5EA6;&#x5DEE;&#x5F02;&#x8F83;&#x5927;&#x6216;&#x6574;&#x4F53;&#x5BC6;&#x5EA6;&#x57FA;&#x672C;&#x76F8;&#x540C;&#x7684;&#x60C5;&#x51B5; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>机器学习</category>
        <category>无监督学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[密度聚类(DBSCAN)]]></title>
    <url>%2F2019%2F05%2F05%2Fclustering_DBSCAN%2F</url>
    <content type="text"><![CDATA[&#x5BC6;&#x5EA6;&#x805A;&#x7C7B;&#x65B9;&#x6CD5; &#x539F;&#x7406;&#x89E3;&#x8BFB;&#x2003;&#x2003;DBSCAN(Density-Based Spatial Clustering Of Applications With Noise):DBSCAN&#x9700;&#x8981;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x626B;&#x63CF;&#x534A;&#x5F84; (eps)&#x548C;&#x6700;&#x5C0F;&#x5305;&#x542B;&#x70B9;&#x6570;(minPts)&#x3002; &#x4EFB;&#x9009;&#x4E00;&#x4E2A;&#x672A;&#x88AB;&#x6807;&#x8BB0;&#x7684;&#x70B9;&#x5F00;&#x59CB;&#xFF0C;&#x627E;&#x51FA;&#x4E0E;&#x5176;&#x8DDD;&#x79BB;&#x5728;eps&#x4E4B;&#x5185;(&#x5305;&#x62EC;eps)&#x7684;&#x6240;&#x6709;&#x9644;&#x8FD1;&#x70B9;&#x3002;&#x5982;&#x679C;&#x9644;&#x8FD1;&#x70B9;&#x7684;&#x6570;&#x91CF;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;minPts&#xFF0C;&#x5219;&#x5F53;&#x524D;&#x70B9;&#x4E0E;&#x5176;&#x9644;&#x8FD1;&#x70B9;&#x5F62;&#x6210;&#x4E00;&#x4E2A;&#x7C07;&#xFF0C;&#x5E76;&#x4E14;&#x51FA;&#x53D1;&#x70B9;&#x88AB;&#x6807;&#x8BB0;&#x3002; &#x7136;&#x540E;&#x9012;&#x5F52;&#xFF0C;&#x4EE5;&#x76F8;&#x540C;&#x7684;&#x65B9;&#x6CD5;&#x5904;&#x7406;&#x8BE5;&#x7C07;&#x5185;&#x6240;&#x6709;&#x672A;&#x88AB;&#x6807;&#x8BB0;&#x7684;&#x70B9;&#xFF0C;&#x4ECE;&#x800C;&#x5BF9;&#x7C07;&#x8FDB;&#x884C;&#x6269;&#x5C55;&#x3002;&#x5982;&#x679C;&#x9644;&#x8FD1;&#x70B9;&#x7684;&#x6570;&#x91CF;&#x5C0F;&#x4E8E;minPts&#xFF0C;&#x5219;&#x8BE5;&#x70B9;&#x88AB;&#x6807;&#x8BB0;&#xFF0C;&#x4E0D;&#x4F5C;&#x6269;&#x5C55;&#x3002;&#x5982;&#x679C;&#x7C07;&#x5145;&#x5206;&#x5730;&#x88AB;&#x6269;&#x5C55;&#xFF0C;&#x5373;&#x7C07;&#x5185;&#x7684;&#x6240;&#x6709;&#x70B9;&#x88AB;&#x6807;&#x8BB0;&#x4E3A;&#x5DF2;&#x8BBF;&#x95EE;&#xFF0C;&#x7136;&#x540E;&#x7528;&#x540C;&#x6837;&#x7684;&#x7B97;&#x6CD5;&#x53BB;&#x5904;&#x7406;&#x672A;&#x88AB;&#x8BBF;&#x95EE;&#x7684;&#x70B9;&#xFF0C;&#x76F4;&#x5230;&#x6240;&#x6709;&#x7684;&#x70B9;&#x90FD;&#x88AB;&#x6807;&#x8BB0;&#x3002; &#x6838;&#x5FC3;&#x601D;&#x60F3;&#x2003;&#x2003;1. &#x6311;&#x9009;&#x4E00;&#x4E2A;&#x672A;&#x6807;&#x8BB0;&#x6837;&#x672C;&#xFF0C;&#x7F6E;&#x4E3A;&#x4E00;&#x7C7B;&#xFF0C;&#x641C;&#x7D22;&#x9644;&#x8FD1;&#x6837;&#x672C; &#x2003;&#x2003;2. &#x5982;&#x679C;&#x9644;&#x8FD1;&#x6837;&#x672C;&#x6570;&#x5927;&#x4E8E;minPts&#xFF0C;&#x5C06;&#x8FD9;&#x4E9B;&#x6837;&#x672C;&#x5F52;&#x4E8E;&#x8BE5;&#x7C7B;&#xFF0C;&#x5728;&#x6B64;&#x7C7B;&#x4E2D;&#x6311;&#x9009;&#x672A;&#x6807;&#x8BB0;&#x6837;&#x672C;&#xFF0C;&#x7EE7;&#x7EED;&#x641C;&#x7D22;&#x9644;&#x8FD1;&#x6837;&#x672C; &#x2003;&#x2003;3. &#x91CD;&#x590D;&#x6B65;&#x9AA4;2&#xFF0C;&#x76F4;&#x5230;&#x8BE5;&#x7C7B;&#x4E2D;&#x6240;&#x6709;&#x6837;&#x672C;&#x90FD;&#x88AB;&#x6807;&#x8BB0; &#x2003;&#x2003;4. &#x91CD;&#x590D;&#x6B65;&#x9AA4;1&#xFF0C;&#x76F4;&#x5230;&#x6240;&#x6709;&#x6837;&#x672C;&#x90FD;&#x88AB;&#x6807;&#x8BB0; &#x7B97;&#x6CD5;&#x6D41;&#x7A0B; &#x4EE3;&#x7801;&#x5B9E;&#x6218;&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6570;&#x636E;&#x96C6;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x6570;&#x636E;&#x96C6;(Data Set) DBSCAN_main.m1234567891011121314151617181920212223242526clear;clc;close all;load(&apos;..\\cluster_cicle.mat&apos;);%&#x8F93;&#x5165;x&#x7684;&#x77E9;&#x9635;x=data;randIndex = randperm(size(x,2));x=x(:,randIndex);%&#x641C;&#x7D22;&#x534A;&#x5F84;eps=0.05;%&#x5706;&#x5185;&#x70B9;&#x6570;minpts=2;%&#x6837;&#x672C;&#x6570;sample_num=size(x,2);%&#x7279;&#x5F81;&#x6570;&#x76EE;feat_num=size(x,1);%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1x_scale=zeros(size(x));for i=1:feat_num x_scale(i,:)=(x(i,:)-min(x(i,:)))/(max(x(i,:))-min(x(i,:)));end[y,color_bar]=DBSCAN_classify(x_scale,sample_num,eps,minpts);%&#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A;if feat_num==2 DBSCAN_display(x,y,color_bar,sample_num)else disp(&apos;The Feature Is Not Two-Dimensional&apos;);end DBSCAN_classify.m1234567891011121314151617181920212223242526272829303132333435363738394041function [y,color_bar]=DBSCAN_classify(x_scale,sample_num,eps,minpts)%&#x6807;&#x8BB0;&#x662F;&#x5426;&#x5DF2;&#x7ECF;&#x5206;&#x8FC7;&#x7C7B;flag=zeros(1,sample_num);y=zeros(1,sample_num);color_bar=[];%&#x7C7B;&#x522B;&#x6570;&#x76EE;i=1;%&#x627E;&#x5230;&#x672A;&#x6807;&#x8BB0;&#x7684;&#x6570;&#x636E;&#x70B9;&#x5219;&#x7EE7;&#x7EED;&#x5FAA;&#x73AF;while ~isempty(find(flag==0,1)) %&#x6C42;&#x51FA;&#x8BE5;&#x70B9;C&#x5230;&#x5176;&#x4F59;&#x5404;&#x70B9;&#x7684;&#x8DDD;&#x79BB; distance=sum((x_scale-repmat(x_scale(:,find(flag==0,1)),1,sample_num)).^2); %&#x5C06;&#x627E;&#x5230;&#x7684;&#x70B9;&#x6807;&#x8BB0; flag(find(flag==0,1))=1; %&#x627E;&#x51FA;&#x8DDD;&#x79BB;&#x627E;&#x5230;&#x7684;&#x70B9;&#x5C0F;&#x4E8E;&#x534A;&#x5F84;&#x7684;&#x6240;&#x6709;&#x70B9; temp=find(distance&lt;eps^2); %&#x5982;&#x679C;&#x4E2A;&#x6570;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;&#x8BBE;&#x5B9A;&#x7684;&#x4E2A;&#x6570; if length(temp)&gt;=minpts %&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#x7684;&#x989C;&#x8272;&#x4FE1;&#x606F; color_bar(i,:)=[rand(1),rand(1),rand(1)]; %&#x5C06;&#x8FD9;&#x4E9B;&#x70B9;&#x5168;&#x90E8;&#x5206;&#x4E3A;i&#x7C7B; y(temp)=i; %&#x627E;&#x51FA;i&#x7C7B;&#x4E2D;&#x6CA1;&#x6709;&#x6807;&#x8BB0;&#x7684;&#x70B9;&#x5219;&#x7EE7;&#x7EED;&#x5FAA;&#x73AF; while ~isempty(find(y==i&amp;flag==0,1)) %&#x6C42;&#x51FA;&#x8BE5;&#x70B9;D&#x5230;&#x5176;&#x4F59;&#x5404;&#x70B9;&#x7684;&#x8DDD;&#x79BB; distance_part=sum((x_scale-repmat(x_scale(:,find(y==i&amp;flag==0,1)),1,sample_num)).^2); %&#x5C06;&#x627E;&#x5230;&#x7684;&#x70B9;&#x6807;&#x8BB0; flag(find(y==i&amp;flag==0,1))=1; %&#x627E;&#x51FA;&#x8DDD;&#x79BB;&#x627E;&#x5230;&#x7684;&#x70B9;&#x5C0F;&#x4E8E;&#x534A;&#x5F84;&#x7684;&#x6240;&#x6709;&#x70B9; temp_part=find(distance_part&lt;eps^2); %&#x5982;&#x679C;&#x4E2A;&#x6570;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;&#x8BBE;&#x5B9A;&#x7684;&#x4E2A;&#x6570;, if length(temp_part)&gt;=minpts %&#x5C06;&#x8FD9;&#x4E9B;&#x70B9;&#x5168;&#x90E8;&#x5206;&#x4E3A;i&#x7C7B; y(temp_part)=i; end end else continue; end %&#x8FD9;&#x4E00;&#x7C7B;&#x627E;&#x5B8C;&#x65F6;&#xFF0C;&#x7C7B;&#x522B;&#x52A0;1 i=i+1;end DBSCAN_display.m12345678910111213function DBSCAN_display(x,y,color_bar,sample_num)figure;hold on;for i=1:sample_num if y(i)==0 %&#x753B;&#x51FA;&#x566A;&#x58F0;&#x70B9;&#xFF0C;&#x7528;*&#x8868;&#x793A; plot(x(1,i),x(2,i),&apos;k*&apos;) else %&#x753B;&#x51FA;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x6837;&#x672C;&#x6570;&#x636E;&#xFF0C;&#x7528;o&#x8868;&#x793A; plot(x(1,i),x(2,i),&apos;color&apos;,color_bar(y(i),:),&apos;marker&apos;,&apos;o&apos;); endendhold off; &#x5B9E;&#x9A8C;&#x7ED3;&#x679C; &#x6027;&#x80FD;&#x6BD4;&#x8F83; &#x4F18;&#x70B9;&#xFF1A; &#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x5BB9;&#x6613;&#x7406;&#x89E3; &#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x6570;&#x636E;&#x70B9;&#x7684;&#x9009;&#x62E9; &#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x4EFB;&#x610F;&#x5F62;&#x72B6;&#x7684;&#x805A;&#x7C7B; &#x7F3A;&#x70B9;&#xFF1A; &#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x654F;&#x611F; &#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x786E;&#x5B9A;eps&#x548C;minPts &#x4E0D;&#x9002;&#x5408;&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x5BC6;&#x5EA6;&#x5DEE;&#x5F02;&#x8F83;&#x5927;&#x7684;&#x60C5;&#x51B5; &#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>机器学习</category>
        <category>无监督学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[迭代自组织分析聚类(ISODATA)]]></title>
    <url>%2F2019%2F05%2F04%2Fclustering_ISODATA%2F</url>
    <content type="text"><![CDATA[&#x8FED;&#x4EE3;&#x81EA;&#x7EC4;&#x7EC7;&#x5206;&#x6790;&#x805A;&#x7C7B;&#x65B9;&#x6CD5; &#x539F;&#x7406;&#x89E3;&#x8BFB;&#x2003;&#x2003;ISODATA(Iterative Selforganizing Data Analysis) :&#x5728;k-&#x5747;&#x503C;&#x7B97;&#x6CD5;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x589E;&#x52A0;&#x5BF9;&#x805A;&#x7C7B;&#x7ED3;&#x679C;&#x7684;&#x5408;&#x5E76;&#x548C;&#x5206;&#x88C2;&#x4E24;&#x4E2A;&#x64CD;&#x4F5C;&#xFF0C;&#x5F53;&#x805A;&#x7C7B;&#x7ED3;&#x679C;&#x67D0;&#x4E00;&#x7C7B;&#x4E2D;&#x6837;&#x672C;&#x6570;&#x592A;&#x5C11;&#xFF0C;&#x6216;&#x4E24;&#x4E2A;&#x7C7B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#x592A;&#x8FD1;&#xFF0C;&#x6216;&#x6837;&#x672C;&#x7C7B;&#x522B;&#x8FDC;&#x5927;&#x4E8E;&#x8BBE;&#x5B9A;&#x7C7B;&#x522B;&#x6570;&#x65F6;&#xFF0C;&#x8FDB;&#x884C;&#x5408;&#x5E76;&#xFF0C;&#x5F53;&#x805A;&#x7C7B;&#x7ED3;&#x679C;&#x67D0;&#x4E00;&#x7C7B;&#x4E2D;&#x6837;&#x672C;&#x6570;&#x592A;&#x591A;&#xFF0C;&#x6216;&#x67D0;&#x4E2A;&#x7C7B;&#x5185;&#x65B9;&#x5DEE;&#x592A;&#x5927;&#xFF0C;&#x6216;&#x6837;&#x672C;&#x7C7B;&#x522B;&#x8FDC;&#x5C0F;&#x4E8E;&#x8BBE;&#x5B9A;&#x7C7B;&#x522B;&#x6570;&#x65F6;&#xFF0C;&#x8FDB;&#x884C;&#x5206;&#x88C2;&#x3002; &#x6838;&#x5FC3;&#x601D;&#x60F3;&#x2003;&#x2003;1. &#x521D;&#x59CB;&#x5E38;&#x91CF;(c0,n0,dmin,dmax,T)&#x2003;&#x2003;&#x2003;&#x2003;c0&#xFF1A;&#x5E0C;&#x671B;&#x5F97;&#x5230;&#x7684;&#x805A;&#x7C7B;&#x6570;&#x2003;&#x2003;&#x2003;&#x2003;n0&#xFF1A;&#x6BCF;&#x7C7B;&#x7684;&#x6837;&#x672C;&#x6570;&#x2003;&#x2003;&#x2003;&#x2003;dmin&#xFF1A;&#x6700;&#x5C0F;&#x7C7B;&#x95F4;&#x8DDD;&#x79BB;&#x2003;&#x2003;&#x2003;&#x2003;dmax&#xFF1A;&#x6700;&#x5927;&#x7C7B;&#x5185;&#x8DDD;&#x79BB;&#x2003;&#x2003;&#x2003;&#x2003;T&#xFF1A;&#x6700;&#x5927;&#x8FED;&#x4EE3;&#x6B21;&#x6570; &#x2003;&#x2003;2. &#x6700;&#x5C0F;&#x7C7B;&#x95F4;&#x8DDD;&#x79BB;$$d_{min}=\underset{C_i,C_j \subseteq C}{min}{d( \overline {C_i},\overline {C_j} )} \ , \ &#x5176;&#x4E2D;\overline {C_i}=\frac {1}{\lvert C_i \rvert}\underset{x_i \in C_i}{\sum}{x_i}$$ &#x2003;&#x2003;3. &#x6700;&#x5927;&#x7C7B;&#x5185;&#x8DDD;&#x79BB;$$d_{max}=\underset{C_i \subseteq C}{max} \ \frac {1}{\lvert {C_i} \rvert}\underset{x_i \in C_i}{\sum}{d( x_i,\overline C_i )} \ , \ &#x5176;&#x4E2D;\overline {C_i}=\frac {1}{\lvert C_i \rvert}\underset{x_i \in C_i}{\sum}{x_i}$$ &#x521D;&#x59CB;&#x65F6;&#x523B;&#x72B6;&#x6001; &#x7B2C;&#x4E00;&#x6B21;&#x8FED;&#x4EE3;&#x540E; &#x7B2C;&#x4E8C;&#x6B21;&#x8FED;&#x4EE3;&#x540E; &#x7B2C;&#x4E09;&#x6B21;&#x8FED;&#x4EE3;&#x540E; &#x7B2C;&#x56DB;&#x6B21;&#x8FED;&#x4EE3;&#x540E; &#x7B2C;&#x4E94;&#x6B21;&#x8FED;&#x4EE3;&#x540E; &#x2003;&#x2003;4. &#x5224;&#x65AD;&#x662F;&#x5426;&#x8FBE;&#x5230;&#x5206;&#x88C2;&#x6761;&#x4EF6; &#x5F53;&#x524D;&#x7C7B;&#x522B;&#x6570;&#x662F;&#x5426;&#x5C0F;&#x4E8E;&#x5E0C;&#x671B;&#x5F97;&#x5230;&#x805A;&#x7C7B;&#x6570;&#x7684;&#x4E00;&#x534A; &#x5F53;&#x524D;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x6570;&#x76EE;&#x662F;&#x5426;&#x5927;&#x4E8E;&#x6BCF;&#x7C7B;&#x6837;&#x672C;&#x6570;&#x7684;&#x4E8C;&#x500D; &#x5F53;&#x524D;&#x7C7B;&#x5185;&#x8DDD;&#x79BB;&#x662F;&#x5426;&#x5927;&#x4E8E;&#x6700;&#x5927;&#x7C7B;&#x5185;&#x8DDD;&#x79BB; &#x2003;&#x2003;5. &#x5206;&#x88C2;&#x4E0D;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#x7684;&#x7C7B;&#x522B;&#xFF0C;&#x56DE;&#x5230;&#x6B65;&#x9AA4;2&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6; &#x2003;&#x2003;6. &#x5224;&#x65AD;&#x662F;&#x5426;&#x8FBE;&#x5230;&#x5408;&#x5E76;&#x6761;&#x4EF6; &#x5F53;&#x524D;&#x7C7B;&#x522B;&#x6570;&#x662F;&#x5426;&#x5927;&#x4E8E;&#x5E0C;&#x671B;&#x5F97;&#x5230;&#x805A;&#x7C7B;&#x6570;&#x7684;&#x4E8C;&#x500D; &#x5F53;&#x524D;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x6570;&#x76EE;&#x662F;&#x5426;&#x5C0F;&#x4E8E;&#x6BCF;&#x7C7B;&#x6837;&#x672C;&#x6570;&#x7684;&#x4E00;&#x534A; &#x5F53;&#x524D;&#x7C7B;&#x95F4;&#x8DDD;&#x79BB;&#x662F;&#x5426;&#x5C0F;&#x4E8E;&#x6700;&#x5C0F;&#x7C7B;&#x95F4;&#x8DDD;&#x79BB; &#x2003;&#x2003;7. &#x5408;&#x5E76;&#x4E0D;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#x7684;&#x7C7B;&#x522B;&#xFF0C;&#x56DE;&#x5230;&#x6B65;&#x9AA4;2&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6; &#x7B97;&#x6CD5;&#x6D41;&#x7A0B; &#x4EE3;&#x7801;&#x5B9E;&#x6218;&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6570;&#x636E;&#x96C6;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x6570;&#x636E;&#x96C6;(Data Set) ISODATA_main.m123456789101112131415161718192021222324252627282930313233343536clear;clc;close all;load(&apos;..\\cluster_gauss.mat&apos;);%&#x8F93;&#x5165;x&#x7684;&#x77E9;&#x9635;x=data;randIndex = randperm(size(x,2));x=x(:,randIndex);%&#x5E0C;&#x671B;&#x5212;&#x5206;&#x7684;&#x7C7B;&#x522B;&#x6570;hope_class_num=3;%&#x5E0C;&#x671B;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x6570;&#x76EE;hope_num=20;%&#x8BBE;&#x5B9A;&#x7C7B;&#x5185;&#x7684;&#x6700;&#x5927;&#x8DDD;&#x79BB;,&#x5C0F;&#x4E00;&#x70B9;max_class_inner_distance=0.1;%&#x8BBE;&#x5B9A;&#x7C7B;&#x95F4;&#x7684;&#x6700;&#x5C0F;&#x8DDD;&#x79BB;,&#x5C0F;&#x4E00;&#x70B9;min_class_between_distance=0.1;%&#x6700;&#x591A;&#x8FED;&#x4EE3;&#x6B21;&#x6570;times=100;%&#x6837;&#x672C;&#x6570;sample_num=size(x,2);%&#x7279;&#x5F81;&#x6570;&#x76EE;feat_num=size(x,1);%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1x_scale=zeros(size(x));for i=1:feat_num x_scale(i,:)=(x(i,:)-min(x(i,:)))/(max(x(i,:))-min(x(i,:)));end[y,class_num,class_center]=ISODATA_classify(x_scale,sample_num,hope_class_num,hope_num,max_class_inner_distance,min_class_between_distance,times);%&#x6837;&#x672C;&#x4E2D;&#x5FC3;&#x5C3A;&#x5EA6;&#x590D;&#x539F;for i=1:feat_num class_center(i,:)=(max(x(i,:))-min(x(i,:)))*class_center(i,:)+min(x(i,:));end%&#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A;if feat_num==2 ISODATA_display(x,y,class_center,sample_num,class_num);else disp(&apos;The Feature Is Not Two-Dimensional&apos;);end ISODATA_classify.m123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158function [y,class_num,class_center]=ISODATA_classify(x_scale,sample_num,hope_class_num,hope_num,max_class_inner_distance,min_class_between_distance,times)%&#x7ED9;&#x6BCF;&#x4E00;&#x4E2A;&#x6837;&#x672C;&#x90FD;&#x89C6;&#x4E3A;0&#x7C7B;y=zeros(1,sample_num);%&#x5C06;&#x524D;class_num&#x4E2A;&#x6837;&#x672C;&#x5206;&#x4E3A;class_num&#x7C7B;y(1:hope_class_num)=1:hope_class_num;%&#x76EE;&#x524D;&#x7684;&#x7C7B;&#x522B;&#x6570;class_num=hope_class_num;k=0;while 1 class_center=zeros(2,class_num); for i=1:class_num %&#x66F4;&#x65B0;&#x7C7B;&#x522B;&#x7684;&#x4E2D;&#x5FC3; class_center(:,i)=sum(x_scale(:,y==i),2)/sum(y==i); end %&#x91C7;&#x7528;&#x6700;&#x8FD1;&#x90BB;&#x8FDB;&#x884C;&#x5206;&#x7C7B; for i=1:sample_num distance=sum((class_center-repmat(x_scale(:,i),1,class_num)).^2); y(i)=find(distance==min(distance),1); end for i=1:class_num %&#x66F4;&#x65B0;&#x7C7B;&#x522B;&#x7684;&#x4E2D;&#x5FC3; class_center(:,i)=sum(x_scale(:,y==i),2)/sum(y==i); end %&#x5982;&#x679C;&#x8FED;&#x4EE3;&#x6B21;&#x6570;&#x5927;&#x4E8E;times&#xFF0C;&#x5219;&#x505C;&#x6B62;&#x8FED;&#x4EE3; if k&gt;=times break; end each_class_num=zeros(1,class_num); distance_between_class=zeros(class_num); %&#x7EDF;&#x8BA1;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x4E2A;&#x6570;,&#x5E76;&#x6C42;&#x51FA;&#x7C7B;&#x95F4;&#x8DDD;&#x79BB; for i=1:class_num each_class_num(i)=sum(y==i); distance_between_class(i,:)=sum((class_center-repmat(class_center(:,i),1,class_num)).^2); distance_between_class(i,i)=inf; end %&#x7EDF;&#x8BA1;&#x7C7B;&#x5185;&#x8DDD;&#x79BB; distance_class_inner=zeros(1,class_num); for i=1:class_num temp=x_scale(:,y==i); distance_class_inner(i)=sum(sum((temp-repmat(class_center(:,i),1,sum(y==i))).^2))/sum(y==i); end %&#x5982;&#x679C;&#x7C7B;&#x5185;&#x8DDD;&#x79BB;&#x6700;&#x5927;&#x7684;&#x4E00;&#x7C7B;&#x7684;&#x7C7B;&#x5185;&#x8DDD;&#x79BB;&#x5927;&#x4E8E;&#x8BBE;&#x5B9A;&#x503C;&#xFF0C;&#x5219;&#x5206;&#x88C2;&#x4E24;&#x7C7B; if max(distance_class_inner)&gt;max_class_inner_distance tem=find(distance_class_inner==max(distance_class_inner),1); %temp&#x4E3A;&#x8BE5;&#x7C7B;&#x522B;&#x7684;&#x6837;&#x672C; temp=x_scale(:,y==tem); %distance(i,j)&#x6307;&#x7B2C;i&#x4E2A;&#x6837;&#x672C;&#x5230;&#x7B2C;j&#x4E2A;&#x6837;&#x672C;&#x7684;&#x8DDD;&#x79BB; distance=zeros(size(temp)); for i=1:sum(y==tem) distance(i,:)=sum((temp-repmat(temp(:,i),1,sum(y==tem))).^2); end %&#x627E;&#x5230;&#x8DDD;&#x79BB;&#x6700;&#x8FDC;&#x7684;&#x4E24;&#x4E2A;&#x6837;&#x672C; [row,col]=find(distance==max(max(distance)),1); %&#x5206;&#x522B;&#x627E;&#x5230;&#x8FD9;&#x4E2A;&#x4E24;&#x4E2A;&#x6837;&#x672C;&#x7684;&#x6240;&#x5728;&#x4F4D;&#x7F6E; temp=find(y==tem); row=temp(row); col=temp(col); %&#x7C7B;&#x522B;&#x6570;+1 class_num=class_num+1; %&#x4EE4;&#x8BE5;&#x7C7B;&#x522B;&#x64A4;&#x9500; y(y==tem)=0; %&#x6DFB;&#x52A0;&#x4E24;&#x4E2A;&#x65B0;&#x7C7B;&#x522B;&#xFF0C;&#x4E00;&#x4E2A;&#x8986;&#x76D6;&#x539F;&#x7C7B;&#x522B;&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#x4E3A;&#x539F;&#x7C7B;&#x522B;&#x6570;+1 y(row)=tem; y(col)=class_num; k=k+1; continue; end %&#x5982;&#x679C;&#x4E24;&#x7C7B;&#x4E4B;&#x95F4;&#x7684;&#x6700;&#x5C0F;&#x8DDD;&#x79BB;&#x5C0F;&#x4E8E;&#x8BBE;&#x5B9A;&#x9608;&#x503C;&#xFF0C;&#x5219;&#x5408;&#x5E76;&#x4E24;&#x7C7B; if min(min(distance_between_class))&lt;min_class_between_distance %&#x627E;&#x5230;&#x8DDD;&#x79BB;&#x6700;&#x8FD1;&#x7684;&#x4E24;&#x4E2A;&#x7C7B;&#x522B; [row,col]=find(distance_between_class==min(min(distance_between_class)),1); %&#x7C7B;&#x522B;&#x6570;-1 class_num=class_num-1; %&#x5C06;col&#x7C7B;&#x5408;&#x5E76;&#x5230;row&#x7C7B;&#x4E2D; y(y==col)=row; %&#x8C03;&#x6574;&#x7C7B;&#x522B;&#x5E8F;&#x53F7; y(y&gt;col)=y(y&gt;col)-1; k=k+1; continue; end %&#x5982;&#x679C;&#x67D0;&#x4E00;&#x7C7B;&#x7684;&#x6700;&#x5C0F;&#x6570;&#x91CF;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;&#x5E0C;&#x671B;&#x6570;&#x91CF;&#x7684;&#x4E00;&#x534A; if min(each_class_num)&lt;=hope_num/2 %&#x627E;&#x5230;&#x8BE5;&#x7C7B;&#x522B; tem=find(each_class_num==min(each_class_num),1); %&#x4EE4;&#x8BE5;&#x7C7B;&#x522B;&#x64A4;&#x9500; y(y==tem)=0; %&#x91CD;&#x65B0;&#x8C03;&#x6574;&#x7C7B;&#x522B;&#x5E8F;&#x53F7; y(y&gt;tem)=y(y&gt;tem)-1; %&#x7C7B;&#x522B;&#x6570;-1 class_num=class_num-1; continue; end %&#x5982;&#x679C;&#x67D0;&#x4E00;&#x7C7B;&#x7684;&#x6700;&#x5C0F;&#x6570;&#x91CF;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;&#x5E0C;&#x671B;&#x6570;&#x91CF;&#x7684;2&#x500D; if max(each_class_num)&gt;=hope_num*2 %&#x627E;&#x5230;&#x8BE5;&#x7C7B;&#x522B; tem=find(each_class_num==max(each_class_num),1); %temp&#x4E3A;&#x8BE5;&#x7C7B;&#x522B;&#x7684;&#x6837;&#x672C; temp=x_scale(:,y==tem); %distance(i,j)&#x6307;&#x7B2C;i&#x4E2A;&#x6837;&#x672C;&#x5230;&#x7B2C;j&#x4E2A;&#x6837;&#x672C;&#x7684;&#x8DDD;&#x79BB; distance=zeros(size(temp)); for i=1:sum(y==tem) distance(i,:)=sum((temp-repmat(temp(:,i),1,sum(y==tem))).^2); end %&#x627E;&#x5230;&#x8DDD;&#x79BB;&#x6700;&#x8FDC;&#x7684;&#x4E24;&#x4E2A;&#x6837;&#x672C; [row,col]=find(distance==max(max(distance)),1); %&#x5206;&#x522B;&#x627E;&#x5230;&#x8FD9;&#x4E2A;&#x4E24;&#x4E2A;&#x6837;&#x672C;&#x7684;&#x6240;&#x5728;&#x4F4D;&#x7F6E; temp=find(y==tem); row=temp(row); col=temp(col); %&#x7C7B;&#x522B;&#x6570;+1 class_num=class_num+1; %&#x4EE4;&#x8BE5;&#x7C7B;&#x522B;&#x64A4;&#x9500; y(y==tem)=0; %&#x6DFB;&#x52A0;&#x4E24;&#x4E2A;&#x65B0;&#x7C7B;&#x522B;&#xFF0C;&#x4E00;&#x4E2A;&#x8986;&#x76D6;&#x539F;&#x7C7B;&#x522B;&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#x4E3A;&#x539F;&#x7C7B;&#x522B;&#x6570;+1 y(row)=tem; y(col)=class_num; continue; end %&#x5982;&#x679C;&#x73B0;&#x6709;&#x7C7B;&#x522B;&#x6570;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;&#x5E0C;&#x671B;&#x7C7B;&#x522B;&#x6570;&#x7684;&#x4E00;&#x534A;&#xFF0C;&#x62C6;&#x5206;&#x7C7B;&#x5185;&#x8DDD;&#x79BB;&#x6700;&#x5927;&#x7C7B;&#x522B; if class_num&lt;=hope_class_num/2 tem=find(distance_class_inner==max(distance_class_inner),1); %temp&#x4E3A;&#x8BE5;&#x7C7B;&#x522B;&#x7684;&#x6837;&#x672C; temp=x_scale(:,y==tem); %distance(i,j)&#x6307;&#x7B2C;i&#x4E2A;&#x6837;&#x672C;&#x5230;&#x7B2C;j&#x4E2A;&#x6837;&#x672C;&#x7684;&#x8DDD;&#x79BB; distance=zeros(size(temp)); for i=1:sum(y==tem) distance(i,:)=sum((temp-repmat(temp(:,i),1,sum(y==tem))).^2); end %&#x627E;&#x5230;&#x8DDD;&#x79BB;&#x6700;&#x8FDC;&#x7684;&#x4E24;&#x4E2A;&#x6837;&#x672C; [row,col]=find(distance==max(max(distance)),1); %&#x5206;&#x522B;&#x627E;&#x5230;&#x8FD9;&#x4E2A;&#x4E24;&#x4E2A;&#x6837;&#x672C;&#x7684;&#x6240;&#x5728;&#x4F4D;&#x7F6E; temp=find(y==tem); row=temp(row); col=temp(col); %&#x7C7B;&#x522B;&#x6570;+1 class_num=class_num+1; %&#x4EE4;&#x8BE5;&#x7C7B;&#x522B;&#x64A4;&#x9500; y(y==tem)=0; %&#x6DFB;&#x52A0;&#x4E24;&#x4E2A;&#x65B0;&#x7C7B;&#x522B;&#xFF0C;&#x4E00;&#x4E2A;&#x8986;&#x76D6;&#x539F;&#x7C7B;&#x522B;&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x7C7B;&#x522B;&#x4E3A;&#x539F;&#x7C7B;&#x522B;&#x6570;+1 y(row)=tem; y(col)=class_num; continue; end %&#x5982;&#x679C;&#x73B0;&#x6709;&#x7C7B;&#x522B;&#x6570;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;&#x5E0C;&#x671B;&#x7C7B;&#x522B;&#x6570;&#x7684;&#x4E8C;&#x500D;&#xFF0C;&#x5408;&#x5E76;&#x7C7B;&#x95F4;&#x8DDD;&#x79BB;&#x6700;&#x5C0F;&#x7684;&#x4E24;&#x7C7B; if class_num&gt;=hope_class_num*2 %&#x627E;&#x5230;&#x8DDD;&#x79BB;&#x6700;&#x8FD1;&#x7684;&#x4E24;&#x4E2A;&#x7C7B;&#x522B; [row,col]=find(distance_between_class==min(min(distance_between_class)),1); %&#x7C7B;&#x522B;&#x6570;-1 class_num=class_num-1; %&#x5C06;col&#x7C7B;&#x5408;&#x5E76;&#x5230;row&#x7C7B;&#x4E2D; y(y==col)=row; %&#x8C03;&#x6574;&#x7C7B;&#x522B;&#x5E8F;&#x53F7; y(y&gt;col)=y(y&gt;col)-1; continue; end %&#x6DFB;&#x52A0;&#x6837;&#x672C;&#x7C7B;&#x5185;&#x95F4;&#x8DDD;&#x6700;&#x5927;&#x503C; break;end ISODATA_display.m12345678910111213function ISODATA_display(x,y,class_center,sample_num,class_num)color_bar=zeros(class_num,3);hold on;for i=1:class_num color_bar(i,:)=[rand(1),rand(1),rand(1)]; %&#x7ED8;&#x5236;&#x6837;&#x672C;&#x4E2D;&#x5FC3;&#xFF0C;&#x7528;*&#x8868;&#x793A; plot(class_center(1,i),class_center(2,i),&apos;color&apos;,color_bar(i,:),&apos;marker&apos;,&apos;*&apos;)endfor i=1:sample_num %&#x7ED8;&#x5236;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x7528;o&#x8868;&#x793A; plot(x(1,i),x(2,i),&apos;color&apos;,color_bar(y(i),:),&apos;marker&apos;,&apos;o&apos;);endhold off; &#x5B9E;&#x9A8C;&#x7ED3;&#x679C; &#x6027;&#x80FD;&#x6BD4;&#x8F83; &#x4F18;&#x70B9;&#xFF1A; &#x5927;&#x6570;&#x636E;&#x96C6;&#x65F6;&#xFF0C;&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F; &#x53EF;&#x4EE5;&#x52A8;&#x6001;&#x8C03;&#x6574;&#x7C7B;&#x522B;&#x4E2A;&#x6570;&#x548C;&#x7C7B;&#x522B;&#x4E2D;&#x5FC3; &#x5728;&#x5148;&#x9A8C;&#x77E5;&#x8BC6;&#x4E0D;&#x8DB3;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x6709;&#x8F83;&#x597D;&#x7684;&#x5206;&#x7C7B;&#x80FD;&#x529B; &#x7F3A;&#x70B9;&#xFF1A; &#x5BF9;&#x521D;&#x59CB;&#x4E2D;&#x5FC3;&#x70B9;&#x654F;&#x611F; &#x7B97;&#x6CD5;&#x590D;&#x6742;&#xFF0C;&#x5206;&#x7C7B;&#x901F;&#x5EA6;&#x8F83;&#x6162; &#x53EA;&#x9002;&#x5408;&#x5206;&#x5E03;&#x5448;&#x51F8;&#x578B;&#x6216;&#x8005;&#x7403;&#x5F62;&#x7684;&#x6570;&#x636E;&#x96C6; &#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>机器学习</category>
        <category>无监督学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[K均值聚类(K-MEANS)]]></title>
    <url>%2F2019%2F05%2F03%2Fclustering_KMEANS%2F</url>
    <content type="text"><![CDATA[K-Means&#x805A;&#x7C7B;&#x65B9;&#x6CD5; &#x539F;&#x7406;&#x89E3;&#x8BFB;&#x2003;&#x2003;K-Means :&#x968F;&#x673A;&#x9009;&#x53D6;N&#x4E2A;&#x5BF9;&#x8C61;&#x4F5C;&#x4E3A;&#x521D;&#x59CB;&#x7684;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#xFF0C;&#x7136;&#x540E;&#x8BA1;&#x7B97;&#x6BCF;&#x4E2A;&#x5BF9;&#x8C61;&#x4E0E;&#x5404;&#x4E2A;&#x79CD;&#x5B50;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#xFF0C;&#x628A;&#x6BCF;&#x4E2A;&#x5BF9;&#x8C61;&#x5206;&#x914D;&#x7ED9;&#x8DDD;&#x79BB;&#x5B83;&#x6700;&#x8FD1;&#x7684;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x3002;&#x6BCF;&#x5206;&#x914D;&#x4E00;&#x4E2A;&#x6837;&#x672C;&#xFF0C;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x4F1A;&#x6839;&#x636E;&#x805A;&#x7C7B;&#x4E2D;&#x73B0;&#x6709;&#x7684;&#x5BF9;&#x8C61;&#x88AB;&#x91CD;&#x65B0;&#x8BA1;&#x7B97;&#x3002;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x5C06;&#x4E0D;&#x65AD;&#x91CD;&#x590D;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;&#x3002; &#x6838;&#x5FC3;&#x601D;&#x60F3;&#x2003;&#x2003;1. &#x6C42;&#x51FA;N&#x4E2A;&#x7C7B;&#x522B;&#x7684;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;a1,a2, &#x2026; ,aN$$a_i=\frac {1}{\lvert C_i \rvert}\underset{x_i \in C_j}{\sum}{x_i}$$&#x2003;&#x2003;2. &#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6837;&#x672C;xj&#xFF0C;&#x5C06;&#x5176;&#x6807;&#x8BB0;&#x4E3A;&#x8DDD;&#x79BB;&#x7C7B;&#x522B;&#x4E2D;&#x5FC3;ai&#x6700;&#x8FD1;&#x7684;&#x4E00;&#x7C7B;$$x_j \in C_i \ , \ &#x5176;&#x4E2D;k=\underset{i,a_i \in C_k}{arg \ min}\ d(x_j,a_i)$$&#x2003;&#x2003;3. &#x91CD;&#x590D;&#x6B65;&#x9AA4;1&#xFF0C;2&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6; &#x7B97;&#x6CD5;&#x6D41;&#x7A0B; &#x4EE3;&#x7801;&#x5B9E;&#x6218;&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6570;&#x636E;&#x96C6;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x6570;&#x636E;&#x96C6;(Data Set) KMEANS_main.m12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849clear;clc;close all;load(&apos;..\\cluster_gauss.mat&apos;);%&#x8F93;&#x5165;x&#x7684;&#x77E9;&#x9635;x=data;randIndex = randperm(size(x,2));x=x(:,randIndex);%&#x7C7B;&#x522B;&#x6570;&#x76EE;&#xFF0C;&#x8BF7;&#x8F93;&#x5165;&#x5927;&#x4E8E;1&#x7684;&#x6570;class_num=3;%&#x6837;&#x672C;&#x6570;sample_num=size(x,2);%&#x7279;&#x5F81;&#x6570;&#x76EE;feat_num=size(x,1);%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1x_scale=zeros(size(x));for i=1:feat_num x_scale(i,:)=(x(i,:)-min(x(i,:)))/(max(x(i,:))-min(x(i,:)));end%&#x7C7B;&#x522B;&#x4E2D;&#x5FC3;&#x4F4D;&#x7F6E;loc_center=zeros(feat_num,class_num);%&#x5982;&#x679C;&#x7C7B;&#x522B;&#x6570;&#x5927;&#x4E8E;&#x6837;&#x672C;&#x6570;&#x6216;&#x8005;&#x7C7B;&#x522B;&#x6570;&#x5C0F;&#x4E8E;1&#xFF0C;&#x5219;&#x65E0;&#x6CD5;&#x5206;&#x7C7B;if class_num&gt;sample_num||class_num&lt;1 disp(&apos;ERROR!&apos;)else %&#x5982;&#x679C;&#x7C7B;&#x522B;&#x6570;&#x7B49;&#x4E8E;1&#xFF0C;&#x5219;&#x6240;&#x6709;&#x7684;&#x6837;&#x672C;&#x90FD;&#x5C5E;&#x4E8E;&#x8BE5;&#x7C7B;&#x522B;,&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x4E3A;&#x6240;&#x6709;&#x6837;&#x672C;&#x7684;&#x4E2D;&#x70B9; if class_num==1 y=ones(1,sample_num); loc_center(:,1)=sum(x,2)/sample_num; k=0; else %&#x53D6;&#x524D;class_num&#x4E2A;&#x6837;&#x672C;&#x4F5C;&#x4E3A;&#x521D;&#x59CB;&#x7C7B;&#x522B; loc_center=x_scale(:,1:class_num); %ISO&#x805A;&#x7C7B;&#x6CD5; [y,loc_center,k]=KMEANS_classify(x_scale,loc_center,sample_num,class_num); %&#x5C06;&#x7F29;&#x653E;&#x540E;&#x7684;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x590D;&#x539F; for i=1:feat_num loc_center(i,:)=loc_center(i,:)*(max(x(i,:))-min(x(i,:)))+min(x(i,:)); end end if k&gt;=1000 disp(&apos;Incorrect Classify&apos;) else %&#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A; if feat_num==2 KMEANS_display(x,y,loc_center,sample_num,class_num) else disp(&apos;The Feature Is Not Two-Dimensional&apos;); end endend KMEANS_classify.m123456789101112131415161718192021222324252627282930function [y,loc_center,k]=KMEANS_classify(x_scale,loc_center,sample_num,class_num)%&#x8BBE;&#x7F6E;&#x8FED;&#x4EE3;&#x6B21;&#x6570;k=0;while 1 %&#x521D;&#x59CB;&#x5316;&#x6700;&#x65B0;&#x7684;&#x5206;&#x7C7B;&#x4E2D;&#x5FC3; loc_center_new=zeros(size(loc_center)); distance=zeros(class_num,sample_num); %distance&#x4E3A;&#x6BCF;&#x4E00;&#x4E2A;&#x6837;&#x672C;&#x5230;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x8DDD;&#x79BB; for i=1:class_num distance(i,:)=sum((x_scale-repmat(loc_center(:,i),1,sample_num)).^2); end %&#x6C42;&#x51FA;&#x6BCF;&#x4E2A;&#x6837;&#x672C;&#x5230;&#x54EA;&#x4E00;&#x7C7B;&#x6700;&#x8FD1; [~,y]=min(distance); %&#x66F4;&#x65B0;&#x5206;&#x7C7B;&#x4E2D;&#x5FC3; for i=1:class_num loc_center_new(:,i)=sum(x_scale(:,y==i),2)/sum(y==i); end %&#x5982;&#x679C;&#x5206;&#x7C7B;&#x4E2D;&#x5FC3;&#x548C;&#x4E0A;&#x4E00;&#x6B21;&#x5206;&#x7C7B;&#x4E2D;&#x5FC3;&#x76F8;&#x7B49;&#x5219;&#x5206;&#x7C7B;&#x5B8C;&#x6BD5; if isequal(loc_center_new,loc_center) break; %&#x5426;&#x5219;&#x7EE7;&#x7EED;&#x5206;&#x7C7B; else loc_center=loc_center_new; k=k+1; %&#x5982;&#x679C;&#x5206;&#x7C7B;&#x6B21;&#x6570;&#x8FBE;&#x5230;1000&#x4ECD;&#x7136;&#x6CA1;&#x6709;&#x7ED3;&#x675F;&#xFF0C;&#x5219;&#x5F3A;&#x5236;&#x5206;&#x7C7B;&#x7ED3;&#x675F; if k&gt;=1000 break; end endend KMEANS_display.m12345678910111213function KMEANS_display(x,y,loc_center,sample_num,class_num)hold on;color_bar=zeros(class_num,3);%&#x753B;&#x51FA;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#xFF0C;&#x7528;*&#x8868;&#x793A;for i=1:class_num color_bar(i,:)=[rand(1),rand(1),rand(1)]; plot(loc_center(1,i),loc_center(2,i),&apos;color&apos;,color_bar(i,:),&apos;marker&apos;,&apos;*&apos;)end%&#x753B;&#x51FA;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x6837;&#x672C;&#x6570;&#x636E;&#xFF0C;&#x7528;o&#x8868;&#x793A;for i=1:sample_num plot(x(1,i),x(2,i),&apos;color&apos;,color_bar(y(i),:),&apos;marker&apos;,&apos;o&apos;);endhold off; &#x5B9E;&#x9A8C;&#x7ED3;&#x679C; &#x6027;&#x80FD;&#x6BD4;&#x8F83; &#x4F18;&#x70B9;&#xFF1A; &#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x5BB9;&#x6613;&#x7406;&#x89E3; &#x5927;&#x6570;&#x636E;&#x96C6;&#x65F6;&#xFF0C;&#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F; &#x7F3A;&#x70B9;&#xFF1A; &#x5BF9;&#x521D;&#x59CB;&#x4E2D;&#x5FC3;&#x70B9;&#x654F;&#x611F; &#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x77E5;&#x9053;&#x7C7B;&#x522B;&#x7684;&#x4E2A;&#x6570; &#x53EA;&#x9002;&#x5408;&#x5206;&#x5E03;&#x5448;&#x51F8;&#x578B;&#x6216;&#x8005;&#x7403;&#x5F62;&#x7684;&#x6570;&#x636E;&#x96C6; &#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>机器学习</category>
        <category>无监督学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[分裂的层次聚类(DIANA)]]></title>
    <url>%2F2019%2F05%2F02%2Fclustering_DIANA%2F</url>
    <content type="text"><![CDATA[&#x5206;&#x88C2;&#x7684;&#x5C42;&#x6B21;&#x805A;&#x7C7B;&#x65B9;&#x6CD5; &#x539F;&#x7406;&#x89E3;&#x8BFB;&#x2003;&#x2003;DIANA(Divisive Analysis):&#x91C7;&#x7528;&#x81EA;&#x9876;&#x5411;&#x4E0B;&#x7684;&#x7B56;&#x7565;&#xFF0C;&#x6700;&#x521D;&#x5C06;&#x6240;&#x6709;&#x5BF9;&#x8C61;&#x7F6E;&#x4E8E;&#x4E00;&#x4E2A;&#x7C7B;&#x4E2D;&#xFF0C;&#x7136;&#x540E;&#x6839;&#x636E;&#x67D0;&#x4E9B;&#x51C6;&#x5219;&#x5C06;&#x8FD9;&#x4E9B;&#x7C7B;&#x522B;&#x9010;&#x6E10;&#x7EC6;&#x5206;&#x3002;&#x7EC6;&#x5206;&#x8FC7;&#x7A0B;&#x53CD;&#x590D;&#x8FDB;&#x884C;&#x76F4;&#x5230;&#x7C7B;&#x522B;&#x8FBE;&#x5230;&#x9884;&#x671F;&#x7684;&#x6570;&#x76EE;&#x3002; &#x6838;&#x5FC3;&#x601D;&#x60F3;&#x2003;&#x2003;1. &#x5C06;&#x6240;&#x6709;&#x6837;&#x672C;&#x90FD;&#x4F5C;&#x4E3A;&#x540C;&#x4E00;&#x7C7B; &#x2003;&#x2003;2. &#x5206;&#x88C2;&#x6240;&#x6709;&#x7C7B;&#x522B;&#x4E2D;&#x5230;&#x8BE5;&#x7C7B;&#x4E2D;&#x5FC3;&#x8DDD;&#x79BB;&#x6700;&#x5927;&#x7684;&#x6837;&#x672C;&#xFF0C;&#x5C06;&#x5176;&#x5355;&#x72EC;&#x4F5C;&#x4E3A;&#x4E00;&#x7C7B;&#xFF0C;&#x6309;&#x7167;&#x6700;&#x8FD1;&#x90BB;&#x5206;&#x7C7B;&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;$$d_{max}=\underset{C_i \subseteq C}{max} \ (\underset{x_i \in C_i}{max} \ {d(x_i,\overline C_i)}) \ , \ &#x5176;&#x4E2D;\overline {C_i}=\frac {1}{\lvert C_i \rvert}\underset{x_i \in C_i}{\sum}{x_i}$$ &#x7B97;&#x6CD5;&#x6D41;&#x7A0B; &#x4EE3;&#x7801;&#x5B9E;&#x6218;&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6570;&#x636E;&#x96C6;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x6570;&#x636E;&#x96C6;(Data Set) DIANA_main.m12345678910111213141516171819202122232425262728clear;clc;close all;load(&apos;..\\cluster_gauss.mat&apos;);%&#x8F93;&#x5165;x&#x7684;&#x77E9;&#x9635;x=data;randIndex = randperm(size(x,2));x=x(:,randIndex);%&#x5E0C;&#x671B;&#x5212;&#x5206;&#x7684;&#x7C7B;&#x522B;&#x6570;class_num=3;%&#x6837;&#x672C;&#x6570;sample_num=size(x,2);%&#x7279;&#x5F81;&#x6570;&#x76EE;feat_num=size(x,1);%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1x_scale=zeros(size(x));for i=1:feat_num x_scale(i,:)=(x(i,:)-min(x(i,:)))/(max(x(i,:))-min(x(i,:)));end[y,class_center]=DIANA_classify(x_scale,sample_num,class_num);%&#x6837;&#x672C;&#x4E2D;&#x5FC3;&#x5C3A;&#x5EA6;&#x590D;&#x539F;for i=1:feat_num class_center(i,:)=(max(x(i,:))-min(x(i,:)))*class_center(i,:)+min(x(i,:));end%&#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A;if feat_num==2 DIANA_display(x,y,class_center,sample_num,class_num);else disp(&apos;The Feature Is Not Two-Dimensional&apos;);end DIANA_classify.m12345678910111213141516171819202122232425262728293031323334353637383940414243444546function [y,class_center]=DIANA_classify(x_scale,sample_num,class_num)if class_num==1 class_center=sum(x_scale,2)/sample_num; y=ones(1,sample_num);else %&#x7ED9;&#x6BCF;&#x4E00;&#x4E2A;&#x6837;&#x672C;&#x90FD;&#x89C6;&#x4E3A;0&#x7C7B; y=zeros(1,sample_num); distance=zeros(sample_num); for i=1:sample_num distance(i,:)=sum((x_scale-repmat(x_scale(:,i),1,sample_num)).^2); end %&#x627E;&#x5230;&#x8DDD;&#x79BB;&#x6700;&#x8FDC;&#x7684;&#x4E24;&#x4E2A;&#x6837;&#x672C; [row,col]=find(distance==max(max(distance)),1); %&#x5C06;row&#x5206;&#x4E3A;&#x7B2C;&#x4E00;&#x7C7B;,col&#x5206;&#x4E3A;&#x7B2C;&#x4E8C;&#x7C7B; y(row)=1; y(col)=2; %&#x8BBE;&#x7F6E;&#x7B2C;&#x4E00;&#x7C7B;&#x548C;&#x7B2C;&#x4E8C;&#x7C7B;&#x7684;&#x4E2D;&#x5FC3; class_center(:,1)=x_scale(:,row); class_center(:,2)=x_scale(:,col); %&#x76EE;&#x524D;&#x7684;&#x7C7B;&#x522B;&#x6570; class_num_temp=2; distance_min=zeros(1,sample_num); while class_num_temp~=class_num for i=1:sample_num %&#x6C42;&#x6BCF;&#x4E2A;&#x6837;&#x672C;&#x5230;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x8DDD;&#x79BB; distance=sum((class_center-repmat(x_scale(:,i),1,class_num_temp)).^2); %&#x6C42;&#x51FA;&#x6BCF;&#x4E2A;&#x6837;&#x672C;&#x5230;&#x6BCF;&#x4E00;&#x7C7B;&#x8DDD;&#x79BB;&#x6700;&#x5C0F;&#x503C; distance_min(i)=distance(find(distance==min(distance),1)); end %&#x627E;&#x5230;&#x8DDD;&#x79BB;&#x6700;&#x5927;&#x503C;&#x4F5C;&#x4E3A;&#x4E00;&#x7C7B; temp=find(distance_min==max(distance_min),1); %&#x7C7B;&#x522B;&#x6570;+1 class_num_temp=class_num_temp+1; %&#x4FEE;&#x6539;&#x7C7B;&#x522B;&#x4FE1;&#x606F; y(temp)=class_num_temp; for i=1:class_num_temp %&#x66F4;&#x65B0;&#x7C7B;&#x522B;&#x7684;&#x4E2D;&#x5FC3; class_center(:,i)=sum(x_scale(:,y==i),2)/sum(y==i); end end %&#x91C7;&#x7528;&#x6700;&#x8FD1;&#x90BB;&#x8FDB;&#x884C;&#x5206;&#x7C7B; for i=1:sample_num distance=sum((class_center-repmat(x_scale(:,i),1,class_num_temp)).^2); y(i)=find(distance==min(distance),1); endend DIANA_display.m12345678910111213function DIANA_display(x,y,class_center,sample_num,class_num)color_bar=zeros(class_num,3);hold on;for i=1:class_num color_bar(i,:)=[rand(1),rand(1),rand(1)]; %&#x7ED8;&#x5236;&#x6837;&#x672C;&#x4E2D;&#x5FC3;&#xFF0C;&#x7528;*&#x8868;&#x793A; plot(class_center(1,i),class_center(2,i),&apos;color&apos;,color_bar(i,:),&apos;marker&apos;,&apos;*&apos;)endfor i=1:sample_num %&#x7ED8;&#x5236;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x7528;o&#x8868;&#x793A; plot(x(1,i),x(2,i),&apos;color&apos;,color_bar(y(i),:),&apos;marker&apos;,&apos;o&apos;);endhold off; &#x5B9E;&#x9A8C;&#x7ED3;&#x679C; &#x6027;&#x80FD;&#x6BD4;&#x8F83; &#x4F18;&#x70B9;&#xFF1A; &#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x5BB9;&#x6613;&#x7406;&#x89E3; &#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x503C;&#x7684;&#x9009;&#x62E9; &#x5BF9;&#x4E8E;&#x7C7B;&#x522B;&#x8F83;&#x5C11;&#x7684;&#x8BAD;&#x7EC3;&#x96C6;&#x5206;&#x7C7B;&#x8F83;&#x5FEB; &#x7F3A;&#x70B9;&#xFF1A; &#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x654F;&#x611F; &#x5206;&#x88C2;&#x64CD;&#x4F5C;&#x4E0D;&#x80FD;&#x64A4;&#x9500; &#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x77E5;&#x9053;&#x7C7B;&#x522B;&#x7684;&#x4E2A;&#x6570; &#x5BF9;&#x4E8E;&#x7C7B;&#x522B;&#x8F83;&#x591A;&#x7684;&#x8BAD;&#x7EC3;&#x96C6;&#x5206;&#x7C7B;&#x8F83;&#x6162; &#x53EA;&#x9002;&#x5408;&#x5206;&#x5E03;&#x5448;&#x51F8;&#x578B;&#x6216;&#x8005;&#x7403;&#x5F62;&#x7684;&#x6570;&#x636E;&#x96C6; &#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>机器学习</category>
        <category>无监督学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[凝聚的层次聚类(AGNES)]]></title>
    <url>%2F2019%2F05%2F01%2Fclustering_AGNES%2F</url>
    <content type="text"><![CDATA[&#x51DD;&#x805A;&#x7684;&#x5C42;&#x6B21;&#x805A;&#x7C7B;&#x65B9;&#x6CD5; &#x539F;&#x7406;&#x89E3;&#x8BFB;&#x2003;&#x2003;AGNES(Agglomerative Nesting):&#x91C7;&#x7528;&#x81EA;&#x5E95;&#x5411;&#x4E0A;&#x7684;&#x7B56;&#x7565;&#xFF0C;&#x6700;&#x521D;&#x5C06;&#x6BCF;&#x4E2A;&#x5BF9;&#x8C61;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x7C7B;&#xFF0C;&#x7136;&#x540E;&#x6839;&#x636E;&#x67D0;&#x4E9B;&#x51C6;&#x5219;&#x5C06;&#x8FD9;&#x4E9B;&#x7C7B;&#x522B;&#x9010;&#x4E00;&#x5408;&#x5E76;&#x3002;&#x5408;&#x5E76;&#x7684;&#x8FC7;&#x7A0B;&#x53CD;&#x590D;&#x8FDB;&#x884C;&#x76F4;&#x5230;&#x7C7B;&#x522B;&#x8FBE;&#x5230;&#x9884;&#x671F;&#x7684;&#x6570;&#x76EE;&#x3002; &#x6838;&#x5FC3;&#x601D;&#x60F3;&#x2003;&#x2003;1. &#x5C06;&#x6BCF;&#x4E00;&#x4E2A;&#x6837;&#x672C;&#x90FD;&#x5355;&#x72EC;&#x4F5C;&#x4E3A;&#x4E00;&#x7C7B; &#x2003;&#x2003;2. &#x5408;&#x5E76;&#x4E24;&#x7C7B;(&#x591A;&#x79CD;&#x5B9A;&#x4E49;&#x65B9;&#x6CD5;)&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x67D0;&#x4E2A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6; &#x6700;&#x5C0F;&#x8DDD;&#x79BB;&#xFF1A;&#x5C06;&#x4E24;&#x4E2A;&#x7C7B;&#x522B;&#x4E4B;&#x95F4;&#x6700;&#x8FD1;&#x7684;&#x4E24;&#x4E2A;&#x6837;&#x672C;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#x4F5C;&#x4E3A;&#x4E24;&#x4E2A;&#x7C7B;&#x522B;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;$$d_{min}=\underset{x_i \in C_i,x_j \in C_j}{min}d(x_i,x_j)$$ &#x6700;&#x5927;&#x8DDD;&#x79BB;&#xFF1A;&#x5C06;&#x4E24;&#x4E2A;&#x7C7B;&#x522B;&#x4E4B;&#x95F4;&#x6700;&#x8FDC;&#x7684;&#x4E24;&#x4E2A;&#x6837;&#x672C;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#x4F5C;&#x4E3A;&#x4E24;&#x4E2A;&#x7C7B;&#x522B;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;$$d_{max}=\underset{x_i \in C_i,x_j \in C_j}{max}d(x_i-x_j)$$ &#x5747;&#x503C;&#x8DDD;&#x79BB;&#xFF1A;&#x5C06;&#x4E24;&#x4E2A;&#x7C7B;&#x522B;&#x4E2D;&#x6837;&#x672C;&#x7684;&#x5E73;&#x5747;&#x503C;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#x4F5C;&#x4E3A;&#x4E24;&#x4E2A;&#x7C7B;&#x522B;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;$$d_{mean}=d(\overline {C_i}- \overline {C_j}) \ , \ &#x5176;&#x4E2D;\overline {C_i}=\frac {1}{\lvert C_i \rvert}\underset{x_i \in C_i}{\sum}{x_i}$$ &#x5E73;&#x5747;&#x8DDD;&#x79BB;&#xFF1A;&#x5C06;&#x4E24;&#x4E2A;&#x7C7B;&#x522B;&#x4E2D;&#x6837;&#x672C;&#x95F4;&#x4E24;&#x4E24;&#x8DDD;&#x79BB;&#x7684;&#x5E73;&#x5747;&#x503C;&#x4F5C;&#x4E3A;&#x4E24;&#x4E2A;&#x7C7B;&#x522B;&#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;$$d_{avg}=\frac {1}{\lvert C_i \rvert \lvert C_j \rvert}\underset{x_i \in C_i}{\sum}\underset{x_j \in C_j}{\sum}d(x_i-x_j)$$ &#x7B97;&#x6CD5;&#x6D41;&#x7A0B; &#x4EE3;&#x7801;&#x5B9E;&#x6218;&#x4EE3;&#x7801;&#x4E2D;&#x6240;&#x7528;&#x6570;&#x636E;&#x96C6;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x6570;&#x636E;&#x96C6;(Data Set) AGNES_main.m12345678910111213141516171819202122232425262728clear;clc;close all;load(&apos;..\\cluster_gauss.mat&apos;);%&#x8F93;&#x5165;x&#x7684;&#x77E9;&#x9635;x=data;randIndex = randperm(size(x,2));x=x(:,randIndex);%&#x5E0C;&#x671B;&#x5212;&#x5206;&#x7684;&#x7C7B;&#x522B;&#x6570;class_num=3;%&#x6837;&#x672C;&#x6570;sample_num=size(x,2);%&#x7279;&#x5F81;&#x6570;&#x76EE;feat_num=size(x,1);%&#x5C3A;&#x5EA6;&#x7F29;&#x653E;&#x5230;0-1x_scale=zeros(size(x));for i=1:feat_num x_scale(i,:)=(x(i,:)-min(x(i,:)))/(max(x(i,:))-min(x(i,:)));end[y,class_center]=AGNES_classify(x_scale,sample_num,class_num);%&#x6837;&#x672C;&#x4E2D;&#x5FC3;&#x5C3A;&#x5EA6;&#x590D;&#x539F;for i=1:feat_num class_center(i,:)=(max(x(i,:))-min(x(i,:)))*class_center(i,:)+min(x(i,:));end%&#x5982;&#x679C;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81;&#x662F;&#x4E8C;&#x7EF4;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED8;&#x56FE;&#x8868;&#x793A;if feat_num==2 AGNES_display(x,y,class_center,sample_num,class_num);else disp(&apos;The Feature Is Not Two-Dimensional&apos;);end AGNES_classify.m123456789101112131415161718192021222324252627282930function [y,class_center]=AGNES_classify(x_scale,sample_num,class_num)%&#x7ED9;&#x6BCF;&#x4E00;&#x4E2A;&#x6837;&#x672C;&#x5206;&#x914D;&#x4E00;&#x4E2A;&#x521D;&#x59CB;&#x7C7B;&#x522B;y=1:sample_num;%&#x5F53;&#x524D;&#x7684;&#x7C7B;&#x522B;&#x6570;class_num_temp=sample_num;%&#x521D;&#x59CB;&#x5316;&#x5F53;&#x524D;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x4E2D;&#x5FC3;class_center=x_scale;while class_num_temp~=class_num %&#x521D;&#x59CB;&#x5316;&#x7C7B;&#x522B;&#x4E2D;&#x5FC3;&#x8DDD; center_distance=zeros(class_num_temp); for i=1:class_num_temp %&#x8BA1;&#x7B97;&#x7C7B;&#x522B;&#x4E2D;&#x5FC3;&#x8DDD; center_distance(i,:)=sum((class_center-repmat(class_center(:,i),1,class_num_temp)).^2); center_distance(i,i)=inf; end %&#x4ECE;&#x4E2D;&#x5FC3;&#x8DDD;&#x4E2D;&#x627E;&#x5230;&#x6700;&#x5C0F;&#x503C; [row,col]=find(center_distance==min(min(center_distance)),1); %&#x5C06;&#x4E24;&#x7C7B;&#x5408;&#x5E76; y(y==col)=row; %&#x66F4;&#x65B0;&#x7C7B;&#x522B;&#xFF0C;&#x4ECE;&#x7B2C;1&#x7C7B;&#x8FDE;&#x7EED;&#x5206;&#x7C7B; y(y&gt;col)=y(y&gt;col)-1; %&#x7C7B;&#x522B;&#x6570;-1 class_num_temp=class_num_temp-1; %&#x521D;&#x59CB;&#x5316;&#x6837;&#x672C;&#x4E2D;&#x5FC3; class_center=zeros(2,class_num_temp); for i=1:class_num_temp %&#x8BA1;&#x7B97;&#x5F53;&#x524D;&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x6837;&#x672C;&#x4E2D;&#x5FC3; class_center(:,i)=sum(x_scale(:,y==i),2)/sum(y==i); endend AGNES_display.m12345678910111213function AGNES_display(x,y,class_center,sample_num,class_num)color_bar=zeros(class_num,3);hold on;for i=1:class_num color_bar(i,:)=[rand(1),rand(1),rand(1)]; %&#x7ED8;&#x5236;&#x6837;&#x672C;&#x4E2D;&#x5FC3;&#xFF0C;&#x7528;*&#x8868;&#x793A; plot(class_center(1,i),class_center(2,i),&apos;color&apos;,color_bar(i,:),&apos;marker&apos;,&apos;*&apos;)endfor i=1:sample_num %&#x7ED8;&#x5236;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x7528;o&#x8868;&#x793A; plot(x(1,i),x(2,i),&apos;color&apos;,color_bar(y(i),:),&apos;marker&apos;,&apos;o&apos;);endhold off; &#x5B9E;&#x9A8C;&#x7ED3;&#x679C; &#x6027;&#x80FD;&#x6BD4;&#x8F83; &#x4F18;&#x70B9;&#xFF1A; &#x5BF9;&#x566A;&#x58F0;&#x6570;&#x636E;&#x4E0D;&#x654F;&#x611F; &#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x5BB9;&#x6613;&#x7406;&#x89E3; &#x4E0D;&#x4F9D;&#x8D56;&#x521D;&#x59CB;&#x503C;&#x7684;&#x9009;&#x62E9; &#x5BF9;&#x4E8E;&#x7C7B;&#x522B;&#x8F83;&#x591A;&#x7684;&#x8BAD;&#x7EC3;&#x96C6;&#x5206;&#x7C7B;&#x8F83;&#x5FEB; &#x7F3A;&#x70B9;&#xFF1A; &#x5408;&#x5E76;&#x64CD;&#x4F5C;&#x4E0D;&#x80FD;&#x64A4;&#x9500; &#x9700;&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x524D;&#x77E5;&#x9053;&#x7C7B;&#x522B;&#x7684;&#x4E2A;&#x6570; &#x5BF9;&#x4E8E;&#x7C7B;&#x522B;&#x8F83;&#x5C11;&#x7684;&#x8BAD;&#x7EC3;&#x96C6;&#x5206;&#x7C7B;&#x8F83;&#x6162; &#x53EA;&#x9002;&#x5408;&#x5206;&#x5E03;&#x5448;&#x51F8;&#x578B;&#x6216;&#x8005;&#x7403;&#x5F62;&#x7684;&#x6570;&#x636E;&#x96C6; &#x5BF9;&#x4E8E;&#x9AD8;&#x7EF4;&#x6570;&#x636E;&#xFF0C;&#x8DDD;&#x79BB;&#x7684;&#x5EA6;&#x91CF;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>机器学习</category>
        <category>无监督学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[数据集(Data Set)]]></title>
    <url>%2F2019%2F04%2F25%2Fclustering_Dataset%2F</url>
    <content type="text"><![CDATA[&#x6570;&#x636E;&#x96C6;&#x8BF4;&#x660E; &#x539F;&#x7406;&#x4ECB;&#x7ECD;&#x2003;&#x2003;Data Set:&#x5BF9;&#x4E8E;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x9886;&#x57DF;&#x6765;&#x8BF4;&#xFF0C;&#x6570;&#x636E;&#x96C6;&#x7684;&#x9009;&#x62E9;&#x662F;&#x81F3;&#x5173;&#x91CD;&#x8981;&#x7684;&#xFF0C;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x96C6;&#x7684;&#x597D;&#x574F;&#x5F80;&#x5F80;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x51B3;&#x5B9A;&#x805A;&#x7C7B;&#x7ED3;&#x679C;&#xFF0C;&#x901A;&#x5E38;&#x4E00;&#x4E2A;&#x7B97;&#x6CD5;&#x5F88;&#x96BE;&#x9002;&#x7528;&#x4E8E;&#x6240;&#x6709;&#x7684;&#x6570;&#x636E;&#x96C6;&#x3002;&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x8BBE;&#x8BA1;&#x5404;&#x79CD;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x5E76;&#x4E14;&#x5206;&#x6790;&#x54EA;&#x4E00;&#x79CD;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x9002;&#x5408;&#x7528;&#x54EA;&#x4E00;&#x79CD;&#x7B97;&#x6CD5;&#xFF0C;&#x53EA;&#x6709;&#x8FD9;&#x6837;&#xFF0C;&#x5728;&#x4ECA;&#x540E;&#x7684;&#x4F7F;&#x7528;&#x4E2D;&#x624D;&#x80FD;&#x5F97;&#x5FC3;&#x5E94;&#x624B;&#x3002;&#x8003;&#x8651;&#x5230;&#x6570;&#x636E;&#x96C6;&#x7684;&#x9002;&#x5E94;&#x6027;&#xFF0C;&#x8BBE;&#x8BA1;&#x4E86;&#x4EE5;&#x4E0B;&#x4E94;&#x79CD;&#x4E0D;&#x540C;&#x7684;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x5305;&#x62EC;&#x6C34;&#x5E73;&#x7AD6;&#x76F4;&#x578B;&#x6570;&#x636E;&#xFF0C;&#x659C;&#x7EBF;&#x578B;&#x6570;&#x636E;&#xFF0C;&#x5706;&#x5F62;&#x6570;&#x636E;&#xFF0C;&#x9AD8;&#x65AF;&#x578B;&#x6570;&#x636E;&#x548C;&#x6DF7;&#x5408;&#x578B;&#x6570;&#x636E;&#x3002; &#x4EE3;&#x7801;&#x5B9E;&#x6218;line_data.m12345678910111213141516171819202122232425clear;clc;close all;hold on;axis equal;%&#x7EBF;&#x7684;&#x957F;&#x5EA6; long=[10,10,10];%&#x7EBF;&#x7684;&#x5BBD;&#x5EA6;wide=[1,1,1];%&#x7EBF;&#x7684;&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;x_0=[0,0,0];y_0=[2,5,8];%&#x6BCF;&#x4E00;&#x6761;&#x7EBF;&#x4E0A;&#x5143;&#x7D20;&#x7684;&#x4E2A;&#x6570;num=[500,500,500];data_temp=zeros(2,sum(num));for i=1:length(long) if i==1 data_temp(:,1:num(i))=[rand(1,num(i))*long(i)+x_0(i);rand(1,num(i))*wide(i)+y_0(i)]; else data_temp(:,sum(num(1:i-1))+1:sum(num(1:i)))=[rand(1,sum(num(1:i))-sum(num(1:i-1)))*long(i)+x_0(i);rand(1,sum(num(1:i))-sum(num(1:i-1)))*wide(i)+y_0(i)]; endend%&#x968F;&#x673A;&#x6253;&#x4E71;&#x987A;&#x5E8F;randIndex = randperm(size(data_temp,2));data=data_temp(:,randIndex);plot(data(1,:),data(2,:),&apos;o&apos;);hold off; slash_data.m12345678910111213141516171819clear;clc;close all;hold on;axis equal;%x&#x7684;&#x8D77;&#x59CB;&#x548C;&#x7EC8;&#x6B62;&#x4F4D;&#x7F6E;begend=[0,0,1,6;... 10,10,5,10];%&#x659C;&#x7387;&#x548C;&#x622A;&#x8DDD;kb=[1,1,-5,-5;... -2,7,20,50];data_temp=[];for i=1:size(begend,2) x=begend(1,i):0.1:begend(2,i); data_temp=[data_temp,[x+rand(1,length(x))-0.5;kb(1,i)*x+kb(2,i)+rand(1,length(x))-0.5]];end%&#x968F;&#x673A;&#x6253;&#x4E71;&#x987A;&#x5E8F;randIndex = randperm(size(data_temp,2));data=data_temp(:,randIndex);plot(data(1,:),data(2,:),&apos;o&apos;);hold off; gauss_data.m123456789101112131415161718192021clear;clc;close all;hold on;axis equal;%&#x7C07;&#x4E2A;&#x6570;num=3;%&#x6BCF;&#x4E00;&#x7C7B;&#x7684;&#x4E2A;&#x6570;number=300;%u&#x548C;sigmadata_temp=zeros(2,num*number);usigma_x=[0,2,6; 1,1,1];usigma_y=[0,6,2; 1,1,1];for i=1:num data_temp(:,(i-1)*number+1:i*number)=[normrnd(usigma_x(1,i),usigma_x(2,i),1,number);normrnd(usigma_y(1,i),usigma_y(2,i),1,number)];end%&#x968F;&#x673A;&#x6253;&#x4E71;&#x987A;&#x5E8F;randIndex = randperm(size(data_temp,2));data=data_temp(:,randIndex);plot(data(1,:),data(2,:),&apos;o&apos;);hold off; cicle_data.m1234567891011121314151617181920clear;clc;close all;hold on;axis equal;theta = 0:0.05:2*pi;x=cos(theta);y=sin(theta);%&#x692D;&#x5706;&#x65B9;&#x7A0B;(x+x0)^2/a^2+(y+y0)^2/b^2=1ab=[3,4,6,10;... 3,4,6,10];xy_0=[0,0,0,0;... 0,0,0,0];data_temp=zeros(2,length(theta)*size(ab,2));for i=1:size(ab,2) data_temp(:,(i-1)*length(theta)+1:i*length(theta))=([x;y].*repmat(ab(:,i),1,length(theta)))+repmat(xy_0(:,i),1,length(theta));end%&#x968F;&#x673A;&#x6253;&#x4E71;&#x987A;&#x5E8F;randIndex = randperm(size(data_temp,2));data=data_temp(:,randIndex);plot(data(1,:),data(2,:),&apos;o&apos;);hold off; mixture_data.m&#x7531;&#x4E0A;&#x9762;&#x7684;&#x56DB;&#x79CD;&#x6570;&#x636E;&#x96C6;&#x7EC4;&#x5408;&#x4E4B;&#x540E;&#x53EF;&#x4EE5;&#x5F62;&#x6210;&#x6DF7;&#x5408;&#x6570;&#x636E;&#x96C6;&#x3002;12345678910111213141516171819202122232425262728293031323334353637383940clear;clc;close all;hold on;axis equal;%x1&#x7684;&#x8D77;&#x59CB;&#x548C;&#x7EC8;&#x6B62;&#x4F4D;&#x7F6E;x_1=2:0.1:6;%x1&#x7684;&#x659C;&#x7387;&#x548C;&#x622A;&#x8DDD;kb_1=[1;4];data_1=[x_1+rand(1,length(x_1))-0.5;kb_1(1)*x_1+kb_1(2)+rand(1,length(x_1))-0.5];%x2&#x7684;&#x8D77;&#x59CB;&#x548C;&#x7EC8;&#x6B62;&#x4F4D;&#x7F6E;x_2=1:0.05:7;%x2&#x7684;&#x659C;&#x7387;&#x548C;&#x622A;&#x8DDD;kb_2=[-1;12];data_2=[x_2+rand(1,length(x_2))-0.5;kb_2(1)*x_2+kb_2(2)+rand(1,length(x_2))-0.5];%&#x4EA7;&#x751F;&#x9AD8;&#x65AF;&#x6570;&#x636E;&#x96C6;data_3=normrnd(12,1.5,2,200);%&#x7EBF;&#x7684;&#x957F;&#x5EA6; long=[5,1];%&#x7EBF;&#x7684;&#x5BBD;&#x5EA6;wide=[1,5];%&#x7EBF;&#x7684;&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;x_0=[6,11];y_0=[1,1];%&#x6BCF;&#x4E00;&#x6761;&#x7EBF;&#x4E0A;&#x5143;&#x7D20;&#x7684;&#x4E2A;&#x6570;num=[100,100];data_4=zeros(2,sum(num));for i=1:length(long) if i==1 data_4(:,1:num(i))=[rand(1,num(i))*long(i)+x_0(i);rand(1,num(i))*wide(i)+y_0(i)]; else data_4(:,sum(num(1:i-1))+1:sum(num(1:i)))=[rand(1,sum(num(1:i))-sum(num(1:i-1)))*long(i)+x_0(i);rand(1,sum(num(1:i))-sum(num(1:i-1)))*wide(i)+y_0(i)]; endend%&#x4EA7;&#x751F;&#x566A;&#x58F0;&#x70B9;data_5=rand(2,38)*16;data_temp=[data_1,data_2,data_3,data_4,data_5];%&#x968F;&#x673A;&#x6253;&#x4E71;&#x987A;&#x5E8F;randIndex = randperm(size(data_temp,2));data=data_temp(:,randIndex);plot(data(1,:),data(2,:),&apos;o&apos;);hold off; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>机器学习</category>
        <category>无监督学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Turing Reward in 2018]]></title>
    <url>%2F2018%2F03%2F22%2FTuringReward-2018%2F</url>
    <content type="text"><![CDATA[&#x2003;&#x2003;2019 &#x5E74; 3 &#x6708; 27 &#x65E5;&#xFF0C;ACM &#x5BA3;&#x5E03;&#xFF0C;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x4E09;&#x4F4D;&#x5927;&#x725B; Yoshua Bengio&#x3001;Yann LeCun&#x3001;Geoffrey Hinton &#x56E0;&#x201C;&#x5728;&#x6982;&#x5FF5;&#x548C;&#x5DE5;&#x7A0B;&#x65B9;&#x9762;&#x4F7F;&#x6DF1;&#x5EA6;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x6210;&#x4E3A;&#x8BA1;&#x7B97;&#x7684;&#x5173;&#x952E;&#x7EC4;&#x6210;&#x90E8;&#x5206;&#x7684;&#x7A81;&#x7834;&#x201D;&#x83B7;&#x5F97;&#x4E86; 2018 &#x5E74;&#x7684;&#x56FE;&#x7075;&#x5956;&#x3002;&#x8FD1;&#x5E74;&#x6765;&#xFF0C;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x65B9;&#x6CD5;&#x4E00;&#x76F4;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x3001;&#x8BED;&#x97F3;&#x8BC6;&#x522B;&#x3001;&#x81EA;&#x7136;&#x8BED;&#x8A00;&#x5904;&#x7406;&#x548C;&#x673A;&#x5668;&#x4EBA;&#x6280;&#x672F;&#x4EE5;&#x53CA;&#x5176;&#x4ED6;&#x5E94;&#x7528;&#x4E2D;&#x60CA;&#x4EBA;&#x7A81;&#x7834;&#x7684;&#x539F;&#x56E0;&#x3002;&#x5728; ACM &#x7684;&#x516C;&#x544A;&#x4E2D;&#x662F;&#x8FD9;&#x6837;&#x5199;&#x9053;&#x7684;&#xFF1A;&#x867D;&#x7136;&#x5728; 20 &#x4E16;&#x7EAA; 80 &#x5E74;&#x4EE3;&#x5F15;&#x5165;&#x4E86;&#x4EBA;&#x5DE5;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4F5C;&#x4E3A;&#x5E2E;&#x52A9;&#x8BA1;&#x7B97;&#x673A;&#x8BC6;&#x522B;&#x6A21;&#x5F0F;&#x548C;&#x6A21;&#x62DF;&#x4EBA;&#x7C7B;&#x667A;&#x80FD;&#x7684;&#x5DE5;&#x5177;&#xFF0C;&#x4F46;&#x5230;&#x4E86; 21 &#x4E16;&#x7EAA;&#x521D;&#xFF0C;LeCun&#x3001;Hinton &#x548C; Bengio &#x4ECD;&#x575A;&#x6301;&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x7684;&#x5C0F;&#x56E2;&#x4F53;&#x3002;&#x867D;&#x7136;&#x4ED6;&#x4EEC;&#x91CD;&#x65B0;&#x70B9;&#x71C3;&#x4EBA;&#x5DE5;&#x667A;&#x80FD;&#x793E;&#x533A;&#x5BF9;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x5174;&#x8DA3;&#x7684;&#x52AA;&#x529B;&#x5728;&#x6700;&#x521D;&#x66FE;&#x906D;&#x5230;&#x6000;&#x7591;&#xFF0C;&#x4F46;&#x5176;&#x60F3;&#x6CD5;&#x5F15;&#x53D1;&#x4E86;&#x91CD;&#x5927;&#x7684;&#x6280;&#x672F;&#x8FDB;&#x6B65;&#xFF0C;&#x5176;&#x65B9;&#x6CD5;&#x73B0;&#x5728;&#x5DF2;&#x6210;&#x4E3A;&#x8BE5;&#x9886;&#x57DF;&#x7684;&#x4E3B;&#x5BFC;&#x8303;&#x4F8B;&#x3002;&#x6B64;&#x524D;&#x4ED6;&#x4EEC;&#x5728;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x9886;&#x57DF;&#x7684;&#x5730;&#x4F4D;&#x65E9;&#x5DF2;&#x662F;&#x65E0;&#x4EBA;&#x4E0D;&#x77E5;&#xFF0C;&#x5C3D;&#x7BA1;&#x4E09;&#x4EBA;&#x8D70;&#x5411;&#x4E86;&#x4E0D;&#x540C;&#x7684;&#x65B9;&#x5411;&#xFF0C;&#x4F46;&#x4ED6;&#x4EEC;&#x4ECD;&#x7136;&#x662F;&#x591A;&#x5E74;&#x7684;&#x5408;&#x4F5C;&#x4F19;&#x4F34;&#x548C;&#x631A;&#x53CB;&#x3002;&#x8BA9;&#x6211;&#x4EEC;&#x5148;&#x6765;&#x770B;&#x770B;&#x4E09;&#x4F4D;&#x6240;&#x4F5C;&#x51FA;&#x7684;&#x4E3B;&#x8981;&#x8D21;&#x732E;&#xFF1A;&#x6770;&#x5F17;&#x91CC;&#xB7;&#x8F9B;&#x987F;(Geoffery Hinton)&#x2003;&#x2003;&#x53CD;&#x5411;&#x4F20;&#x64AD;(Back Propagation)&#xFF1A;&#x5728; 1986 &#x5E74;&#x4E0E; David Rumelhart &#x548C; Ronald Williams &#x5171;&#x540C;&#x64B0;&#x5199;&#x7684; &#x201C;Learning Internal Representations by Error Propagation&#x201D; &#x4E00;&#x6587;&#x4E2D;&#xFF0C;Hinton &#x8BC1;&#x660E;&#x4E86;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#x7B97;&#x6CD5;&#x5141;&#x8BB8;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x53D1;&#x73B0;&#x81EA;&#x5DF1;&#x7684;&#x6570;&#x636E;&#x5185;&#x90E8;&#x8868;&#x793A;&#xFF0C;&#x8FD9;&#x4F7F;&#x5F97;&#x4F7F;&#x7528;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x6210;&#x4E3A;&#x53EF;&#x80FD;&#x7F51;&#x7EDC;&#x89E3;&#x51B3;&#x4EE5;&#x524D;&#x88AB;&#x8BA4;&#x4E3A;&#x8D85;&#x51FA;&#x5176;&#x8303;&#x56F4;&#x7684;&#x95EE;&#x9898;&#x3002;&#x5982;&#x4ECA;&#xFF0C;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#x7B97;&#x6CD5;&#x662F;&#x5927;&#x591A;&#x6570;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x6807;&#x51C6;&#x3002; &#x2003;&#x2003;&#x73BB;&#x5C14;&#x5179;&#x66FC;&#x673A;(Boltzmann Machines)&#xFF1A;1983 &#x5E74;&#xFF0C;Hinton &#x4E0E; Terrence Sejnowski &#x4E00;&#x8D77;&#xFF0C;&#x53D1;&#x660E;&#x4E86;&#x73BB;&#x5C14;&#x5179;&#x66FC;&#x673A;&#xFF0C;&#x8FD9;&#x662F;&#x7B2C;&#x4E00;&#x4E2A;&#x80FD;&#x591F;&#x5B66;&#x4E60;&#x4E0D;&#x5C5E;&#x4E8E;&#x8F93;&#x5165;&#x6216;&#x8F93;&#x51FA;&#x7684;&#x795E;&#x7ECF;&#x5143;&#x5185;&#x90E8;&#x8868;&#x793A;&#x7684;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4E4B;&#x4E00;&#x3002; &#x2003;&#x2003;&#x5BF9;&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x6539;&#x8FDB;(Improvement of Convolutional Neural Network)&#xFF1A;2012 &#x5E74;&#xFF0C;Hinton &#x548C;&#x4ED6;&#x7684;&#x5B66;&#x751F; Alex Krizhevsky &#x4EE5;&#x53CA; Ilya Sutskever &#x901A;&#x8FC7; Rectified Linear Neurons &#x548C; Dropout Regularization &#x6539;&#x8FDB;&#x4E86;&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;&#x5E76;&#x5728;&#x8457;&#x540D;&#x7684; ImageNet &#x8BC4;&#x6D4B;&#x4E2D;&#x5C06;&#x5BF9;&#x8C61;&#x8BC6;&#x522B;&#x7684;&#x9519;&#x8BEF;&#x7387;&#x51CF;&#x534A;&#xFF0C;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x9886;&#x57DF;&#x6380;&#x8D77;&#x4E00;&#x573A;&#x9769;&#x547D;&#x3002; &#x7EA6;&#x4E66;&#x4E9A;&#xB7;&#x672C;&#x5409;&#x5965;(Yoshua Bengio)&#x2003;&#x2003;&#x5E8F;&#x5217;&#x7684;&#x6982;&#x7387;&#x6A21;&#x578B;(Probabilistic models of sequences)&#xFF1A;&#x5728; 20 &#x4E16;&#x7EAA; 90 &#x5E74;&#x4EE3;&#xFF0C;Bengio &#x5C06;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4E0E;&#x5E8F;&#x5217;&#x7684;&#x6982;&#x7387;&#x6A21;&#x578B;&#x76F8;&#x7ED3;&#x5408;&#xFF0C;&#x4F8B;&#x5982;&#x9690;&#x9A6C;&#x5C14;&#x53EF;&#x592B;&#x6A21;&#x578B;&#x3002;&#x8FD9;&#x4E9B;&#x60F3;&#x6CD5;&#x88AB;&#x7EB3;&#x5165; AT&#xFF06;T / NCR &#x7528;&#x4E8E;&#x9605;&#x8BFB;&#x624B;&#x5199;&#x652F;&#x7968;&#x4E2D;&#xFF0C;&#x88AB;&#x8BA4;&#x4E3A;&#x662F; 20 &#x4E16;&#x7EAA; 90 &#x5E74;&#x4EE3;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7814;&#x7A76;&#x7684;&#x5DC5;&#x5CF0;&#x4E4B;&#x4F5C;&#x3002;&#x73B0;&#x4EE3;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x8BED;&#x97F3;&#x8BC6;&#x522B;&#x7CFB;&#x7EDF;&#x4E5F;&#x662F;&#x8FD9;&#x4E9B;&#x6982;&#x5FF5;&#x7684;&#x6269;&#x5C55;&#x3002; &#x2003;&#x2003;&#x9AD8;&#x7EF4;&#x8BCD;&#x6C47;&#x5D4C;&#x5165;&#x548C;&#x5173;&#x6CE8;(High-dimensional word embeddings and attention)&#xFF1A;2000 &#x5E74;&#xFF0C;Bengio &#x64B0;&#x5199;&#x4E86;&#x5177;&#x6709;&#x91CC;&#x7A0B;&#x7891;&#x610F;&#x4E49;&#x7684;&#x8BBA;&#x6587;&#x201C;A Neural Probabilistic Language Model&#x201D;&#xFF0C;&#x5B83;&#x5F15;&#x5165;&#x4E86;&#x9AD8;&#x7EF4;&#x8BCD;&#x5411;&#x91CF;&#x4F5C;&#x4E3A;&#x8BCD;&#x4E49;&#x7684;&#x8868;&#x793A;&#x3002;Bengio &#x7684;&#x89C1;&#x89E3;&#x5BF9;&#x81EA;&#x7136;&#x8BED;&#x8A00;&#x5904;&#x7406;&#x4EFB;&#x52A1;&#x4EA7;&#x751F;&#x4E86;&#x5DE8;&#x5927;&#x800C;&#x6301;&#x4E45;&#x7684;&#x5F71;&#x54CD;&#xFF0C;&#x5305;&#x62EC;&#x8BED;&#x8A00;&#x7FFB;&#x8BD1;&#x3001;&#x95EE;&#x7B54;&#x548C;&#x89C6;&#x89C9;&#x95EE;&#x7B54;&#x3002;&#x4ED6;&#x7684;&#x56E2;&#x961F;&#x8FD8;&#x5F15;&#x5165;&#x4E86;&#x6CE8;&#x610F;&#x529B;&#x673A;&#x5236;&#xFF0C;&#x8FD9;&#x79CD;&#x673A;&#x5236;&#x4FC3;&#x4F7F;&#x4E86;&#x673A;&#x5668;&#x7FFB;&#x8BD1;&#x7684;&#x7A81;&#x7834;&#xFF0C;&#x5E76;&#x6784;&#x6210;&#x4E86;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7684;&#x5E8F;&#x5217;&#x5904;&#x7406;&#x7684;&#x5173;&#x952E;&#x7EC4;&#x6210;&#x90E8;&#x5206;&#x3002; &#x2003;&#x2003;&#x751F;&#x6210;&#x5F0F;&#x5BF9;&#x6297;&#x7F51;&#x7EDC;(Generative Adversarial Networks)&#xFF1A;&#x81EA; 2010 &#x5E74;&#x4EE5;&#x6765;&#xFF0C;Bengio &#x5173;&#x4E8E;&#x751F;&#x6210;&#x6027;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7684;&#x8BBA;&#x6587;&#xFF0C;&#x7279;&#x522B;&#x662F;&#x4E0E; Ian Goodfellow &#x5171;&#x540C;&#x5F00;&#x53D1;&#x7684;&#x751F;&#x6210;&#x6027;&#x5BF9;&#x6297;&#x7F51;&#x7EDC;&#xFF08;GAN&#xFF09;&#xFF0C;&#x5F15;&#x53D1;&#x4E86;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x548C;&#x8BA1;&#x7B97;&#x673A;&#x56FE;&#x5F62;&#x5B66;&#x7684;&#x9769;&#x547D;&#x3002; &#x6768;&#x7ACB;&#x6606;(Yann LeCun)&#x2003;&#x2003;&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;(Convolutional Neural Networks)&#xFF1A;&#x5728; 20 &#x4E16;&#x7EAA; 80 &#x5E74;&#x4EE3;&#xFF0C;LeCun &#x5F00;&#x53D1;&#x4E86;&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#xFF0C;&#x73B0;&#x5DF2;&#x6210;&#x4E3A;&#x8BE5;&#x9886;&#x57DF;&#x7684;&#x57FA;&#x672C;&#x7406;&#x8BBA;&#x57FA;&#x7840;&#x3002;&#x9664;&#x4E86;&#x5176;&#x4ED6;&#x4F18;&#x70B9;&#x4E4B;&#x5916;&#xFF0C;&#x5B83;&#x8FD8;&#x5177;&#x6709;&#x4F7F;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x66F4;&#x6709;&#x6548;&#x7684;&#x5FC5;&#x8981;&#x6027;&#x3002;&#x5728; 20 &#x4E16;&#x7EAA; 80 &#x5E74;&#x4EE3;&#x540E;&#x671F;&#xFF0C;&#x591A;&#x4F26;&#x591A;&#x5927;&#x5B66;&#x548C;&#x8D1D;&#x5C14;&#x5B9E;&#x9A8C;&#x5BA4;&#x5DE5;&#x4F5C;&#x671F;&#x95F4;&#xFF0C;LeCun &#x662F;&#x7B2C;&#x4E00;&#x4E2A;&#x5728;&#x624B;&#x5199;&#x6570;&#x5B57;&#x56FE;&#x50CF;&#x4E0A;&#x8BAD;&#x7EC3;&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7CFB;&#x7EDF;&#x7684;&#x4EBA;&#x3002;&#x5982;&#x4ECA;&#xFF0C;&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x4EE5;&#x53CA;&#x8BED;&#x97F3;&#x8BC6;&#x522B;&#x3001;&#x8BED;&#x97F3;&#x5408;&#x6210;&#x3001;&#x56FE;&#x50CF;&#x5408;&#x6210;&#x548C;&#x81EA;&#x7136;&#x8BED;&#x8A00;&#x5904;&#x7406;&#x7684;&#x884C;&#x4E1A;&#x6807;&#x51C6;&#x3002;&#x5B83;&#x4EEC;&#x7528;&#x4E8E;&#x5404;&#x79CD;&#x5E94;&#x7528;&#xFF0C;&#x5305;&#x62EC;&#x81EA;&#x52A8;&#x9A7E;&#x9A76;&#x3001;&#x533B;&#x5B66;&#x56FE;&#x50CF;&#x5206;&#x6790;&#x3001;&#x8BED;&#x97F3;&#x6FC0;&#x6D3B;&#x52A9;&#x624B;&#x548C;&#x4FE1;&#x606F;&#x8FC7;&#x6EE4;&#x3002; &#x2003;&#x2003;&#x6539;&#x8FDB;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#x7B97;&#x6CD5;(Improved Back Propagation Algorithms)&#xFF1A;LeCun &#x63D0;&#x51FA;&#x4E86;&#x4E00;&#x4E2A;&#x65E9;&#x671F;&#x7684;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#x7B97;&#x6CD5; backprop&#xFF0C;&#x5E76;&#x6839;&#x636E;&#x53D8;&#x5206;&#x539F;&#x7406;&#x5BF9;&#x5176;&#x8FDB;&#x884C;&#x4E86;&#x7B80;&#x6D01;&#x7684;&#x63A8;&#x5BFC;&#x3002;&#x4ED6;&#x7684;&#x5DE5;&#x4F5C;&#x8BA9;&#x52A0;&#x5FEB;&#x4E86;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#x7B97;&#xFF0C;&#x5305;&#x62EC;&#x63CF;&#x8FF0;&#x4E24;&#x79CD;&#x52A0;&#x901F;&#x5B66;&#x4E60;&#x65F6;&#x95F4;&#x7684;&#x7B80;&#x5355;&#x65B9;&#x6CD5;&#x3002; &#x2003;&#x2003;&#x62D3;&#x5BBD;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x8303;&#x56F4;(Widening the Range of Neural Networks)&#xFF1A;LeCun &#x8FD8;&#x5C06;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4F5C;&#x4E3A;&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x66F4;&#x4E3A;&#x5E7F;&#x6CDB;&#x4EFB;&#x52A1;&#x7684;&#x8BA1;&#x7B97;&#x6A21;&#x578B;&#xFF0C;&#x5176;&#x65E9;&#x671F;&#x5DE5;&#x4F5C;&#x73B0;&#x5DF2;&#x6210;&#x4E3A; AI &#x7684;&#x57FA;&#x7840;&#x6982;&#x5FF5;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x5728;&#x56FE;&#x50CF;&#x8BC6;&#x522B;&#x9886;&#x57DF;&#xFF0C;&#x4ED6;&#x7814;&#x7A76;&#x4E86;&#x5982;&#x4F55;&#x5728;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4E2D;&#x5B66;&#x4E60;&#x5206;&#x5C42;&#x7279;&#x5F81;&#x8868;&#x793A;&#xFF0C;&#x8FD9;&#x4E2A;&#x7406;&#x5FF5;&#x73B0;&#x5728;&#x901A;&#x5E38;&#x7528;&#x4E8E;&#x8BB8;&#x591A;&#x8BC6;&#x522B;&#x4EFB;&#x52A1;&#x4E2D;&#x3002;&#x4E0E; L&#xE9;onBottou &#x4E00;&#x8D77;&#xFF0C;&#x4ED6;&#x8FD8;&#x63D0;&#x51FA;&#x4E86;&#x5B66;&#x4E60;&#x7CFB;&#x7EDF;&#x53EF;&#x4EE5;&#x6784;&#x5EFA;&#x4E3A;&#x590D;&#x6742;&#x7684;&#x6A21;&#x5757;&#x7F51;&#x7EDC;&#xFF0C;&#x5176;&#x4E2D;&#x901A;&#x8FC7;&#x81EA;&#x52A8;&#x533A;&#x5206;&#x6765;&#x6267;&#x884C;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#xFF0C;&#x76EE;&#x524D;&#x5728;&#x6BCF;&#x4E2A;&#x73B0;&#x4EE3;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x8F6F;&#x4EF6;&#x4E2D;&#x5F97;&#x5230;&#x4F7F;&#x7528;&#x3002;&#x4ED6;&#x4EEC;&#x8FD8;&#x63D0;&#x51FA;&#x4E86;&#x53EF;&#x4EE5;&#x64CD;&#x4F5C;&#x7ED3;&#x6784;&#x5316;&#x6570;&#x636E;&#x7684;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x67B6;&#x6784;&#xFF0C;&#x5982;&#x56FE;&#x5F62;&#x3002; &#x5728;&#x300A;&#x8FDE;&#x7EBF;&#x300B;&#x6742;&#x5FD7;&#x7684;&#x62A5;&#x9053;&#x4E2D;&#xFF0C;Geoffery Hinton &#x88AB;&#x95EE;&#x53CA;&#x83B7;&#x5F97;&#x56FE;&#x9886;&#x5956;&#x7684;&#x610F;&#x4E49;&#x65F6;&#xFF0C;&#x4ED6;&#x8868;&#x793A;&#x5341;&#x5206;&#x60CA;&#x8BB6;&#xFF0C;&#x201C;&#x6211;&#x731C;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x73B0;&#x5728;&#x662F;&#x53D7;&#x4EBA;&#x5C0A;&#x656C;&#x7684;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x201D;&#xFF0C;&#x56E0;&#x4E3A;&#x5728;&#x4ED6;&#x770B;&#x6765;&#x56FE;&#x7075;&#x5C06;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x4E2D;&#x6700;&#x503C;&#x5F97;&#x5C0A;&#x656C;&#x7684;&#x5B66;&#x79D1;&#x4E86;&#x3002; &#x636E;&#x4E86;&#x89E3;&#xFF0C;&#x56FE;&#x7075;&#x5956;&#x7531; ACM &#x4E8E; 1966 &#x5E74;&#x8BBE;&#x7F6E;&#xFF0C;&#x6BCF;&#x5E74;&#x9881;&#x53D1;&#x4E00;&#x6B21;&#xFF0C;&#x8BBE;&#x7ACB;&#x76EE;&#x7684;&#x4E4B;&#x4E00;&#x662F;&#x7EAA;&#x5FF5;&#x8457;&#x540D;&#x7684;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x5148;&#x9A71;&#x827E;&#x4F26; &#x2022; &#x56FE;&#x7075;&#xFF08;Alan Turing&#xFF09;&#xFF0C;&#x4ED6;&#x5728; 20 &#x4E16;&#x7EAA; 30 &#x5E74;&#x4EE3;&#x3001;40 &#x5E74;&#x4EE3;&#x548C; 50 &#x5E74;&#x4EE3;&#x5960;&#x5B9A;&#x4E86;&#x8BA1;&#x7B97;&#x548C;&#x4EBA;&#x5DE5;&#x667A;&#x80FD;&#x7684;&#x65E9;&#x671F;&#x57FA;&#x7840;&#x3002; &#x56FE;&#x7075;&#x5956;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x9886;&#x57DF;&#x7684;&#x6700;&#x9AD8;&#x5956;&#x3002;&#x83B7;&#x5956;&#x8005;&#x5FC5;&#x987B;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x9886;&#x57DF;&#x5177;&#x6709;&#x6301;&#x4E45;&#x91CD;&#x5927;&#x7684;&#x5148;&#x8FDB;&#x6027;&#x6280;&#x672F;&#x8D21;&#x732E;&#x3002;&#x4EBA;&#x5DE5;&#x667A;&#x80FD;&#x9886;&#x57DF;&#x7684;&#x5148;&#x9A71;&#x9A6C;&#x6587; &#x2022; &#x660E;&#x65AF;&#x57FA;&#xFF08;Marvin Lee Minsky&#xFF09;&#x3001;&#x7EA6;&#x7FF0; &#x2022; &#x9EA6;&#x5361;&#x9521;&#xFF08;John McCarthy&#xFF09;&#x3001;&#x827E;&#x4F26; &#x2022; &#x7EBD;&#x5384;&#x5C14;&#xFF08;Allen Newell&#xFF09;&#x548C;&#x53F8;&#x9A6C;&#x8D3A;&#xFF08;Herbert Alexander Simon&#xFF09;&#x7B49;&#x4EBA;&#x90FD;&#x66FE;&#x7ECF;&#x83B7;&#x5956;&#x3002;&#x534E;&#x4EBA;&#x79D1;&#x5B66;&#x5BB6;&#x59DA;&#x671F;&#x667A; 2000 &#x5E74;&#x56E0;&#x4E3A;&#x4F2A;&#x968F;&#x673A;&#x6570;&#x751F;&#x6210;&#x7B49;&#x8BA1;&#x7B97;&#x9886;&#x57DF;&#x7684;&#x91CD;&#x8981;&#x8D21;&#x732E;&#x83B7;&#x5956;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Computer Science</category>
        <category>Turing Reward</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Turing Reward in 2017]]></title>
    <url>%2F2018%2F03%2F22%2FTuringReward-2017%2F</url>
    <content type="text"><![CDATA[&#x2003;&#x2003;2018 &#x5E74; 3 &#x6708; 21 &#x65E5;&#xFF0C;&#x7F8E;&#x56FD;&#x8BA1;&#x7B97;&#x673A;&#x534F;&#x4F1A;&#xFF08;ACM&#xFF09;&#x5C06;2017&#x5E74;&#x56FE;&#x7075;&#x5956;&#x6388;&#x4E88;&#x65AF;&#x5766;&#x798F;&#x5927;&#x5B66;&#x524D;&#x6821;&#x957F;&#x7EA6;&#x7FF0;&#xB7;&#x8F69;&#x5C3C;&#x8BD7;&#xFF08;John L. Hennessy&#xFF09;&#x548C;&#x52A0;&#x5DDE;&#x5927;&#x5B66;&#x4F2F;&#x514B;&#x5229;&#x5206;&#x6821;&#x9000;&#x4F11;&#x6559;&#x6388;&#x5927;&#x536B;&#xB7;&#x5E15;&#x7279;&#x68EE;&#xFF08;David A. Patterson&#xFF09;&#xFF0C;&#x4EE5;&#x8868;&#x5F70;&#x4ED6;&#x4EEC;&#x5F00;&#x521B;&#x4E86;&#x4E00;&#x79CD;&#x7CFB;&#x7EDF;&#x7684;&#x3001;&#x5B9A;&#x91CF;&#x7684;&#x65B9;&#x6CD5;&#x6765;&#x8BBE;&#x8BA1;&#x548C;&#x8BC4;&#x4EF7;&#x8BA1;&#x7B97;&#x673A;&#x4F53;&#x7CFB;&#x7ED3;&#x6784;&#xFF0C;&#x5E76;&#x5BF9;RISC&#x5FAE;&#x5904;&#x7406;&#x5668;&#x884C;&#x4E1A;&#x4EA7;&#x751F;&#x4E86;&#x6301;&#x4E45;&#x7684;&#x5F71;&#x54CD;&#x3002; &#x2003;&#x2003;&#x964D;&#x4F4E;&#x5904;&#x7406;&#x5668;&#x590D;&#x6742;&#x6027;&#x7684;&#x6982;&#x5FF5;&#x67B6;&#x6784;&#x7814;&#x7A76;&#x53EF;&#x4EE5;&#x8FFD;&#x6EAF;&#x5230;1960&#x5E74;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x7531;IBM&#x8D44;&#x52A9;&#x7684;801&#x9879;&#x76EE;&#xFF0C;&#x7531;&#x8F69;&#x5C3C;&#x8BD7;&#x548C;&#x5E15;&#x7279;&#x68EE;&#x8D1F;&#x8D23;&#x3002;&#x65AF;&#x5766;&#x798F;&#x5927;&#x5B66;&#x548C;&#x52A0;&#x5DDE;&#x5927;&#x5B66;&#x4F2F;&#x514B;&#x5229;&#x5206;&#x6821;&#x90FD;&#x5728;&#x5927;&#x529B;&#x7814;&#x7A76;RISC&#x67B6;&#x6784;&#x7684;&#x53EF;&#x884C;&#x6027;&#x65B9;&#x6CD5;,&#x63A8;&#x5E7F;&#x5176;&#x6982;&#x5FF5;,&#x5E76;&#x4ECB;&#x7ECD;&#x7ED9;&#x5B66;&#x672F;&#x754C;&#x548C;&#x4EA7;&#x4E1A;&#x754C;&#x3002;RISC&#x65B9;&#x6CD5;&#x4E0D;&#x540C;&#x4E8E;&#x5F53;&#x65F6;&#x6D41;&#x884C;&#x7684;&#x590D;&#x6742;&#x6307;&#x4EE4;&#x96C6;&#x8BA1;&#x7B97;&#x673A;(CISC)&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x53EA;&#x9700;&#x8981;&#x4E00;&#x7EC4;&#x7B80;&#x5355;&#x548C;&#x901A;&#x7528;&#x7684;&#x6307;&#x4EE4;(&#x8BA1;&#x7B97;&#x673A;&#x5FC5;&#x987B;&#x6267;&#x884C;&#x7684;&#x529F;&#x80FD;)&#xFF0C;&#x9700;&#x8981;&#x7684;&#x6676;&#x4F53;&#x7BA1;&#x6570;&#x91CF;&#x6BD4;&#x590D;&#x6742;&#x6307;&#x4EE4;&#x96C6;&#x5C11;&#xFF0C;&#x5E76;&#x4E14;&#x51CF;&#x5C11;&#x4E86;&#x8BA1;&#x7B97;&#x673A;&#x5FC5;&#x987B;&#x6267;&#x884C;&#x7684;&#x5DE5;&#x4F5C;&#x91CF;&#x3002; &#x2003;&#x2003;&#x5E15;&#x7279;&#x68EE;&#x7684;&#x4F2F;&#x514B;&#x5229;&#x56E2;&#x961F;&#x521B;&#x9020;&#x4E86;RISC&#x8FD9;&#x4E2A;&#x8BCD;&#xFF0C;&#x5E76;&#x5728;1982&#x5E74;&#x5EFA;&#x7ACB;&#x5E76;&#x6F14;&#x793A;&#x4E86;&#x4ED6;&#x4EEC;&#x7684;RISC-1&#x578B;&#x5904;&#x7406;&#x5668;&#x3002;RISC-1&#x578B;&#x5904;&#x7406;&#x5668;&#x91C7;&#x7528;&#x4E86;44000&#x4E2A;&#x6676;&#x4F53;&#x7BA1;&#x4E2D;&#xFF0C;&#x5176;&#x6027;&#x80FD;&#x8981;&#x4F18;&#x4E8E;&#x4F20;&#x7EDF;&#x7684;CISC&#x8BBE;&#x8BA1;&#xFF0C;&#x540E;&#x8005;&#x7684;&#x5B9E;&#x73B0;&#x5F80;&#x5F80;&#x9700;&#x8981;100,000&#x4E2A;&#x6676;&#x4F53;&#x7BA1;&#x3002;&#x8F69;&#x5C3C;&#x8BD7;&#x4E8E;1984&#x5E74;&#x8054;&#x5408;&#x521B;&#x7ACB;&#x4E86;MIPS&#x7535;&#x8111;&#x7CFB;&#x7EDF;&#x516C;&#x53F8;&#xFF0C;&#x5C06;&#x65AF;&#x5766;&#x798F;&#x56E2;&#x961F;&#x7684;&#x5DE5;&#x4F5C;&#x5E02;&#x573A;&#x5316;&#x3002;&#x540E;&#x6765;&#xFF0C;&#x4F2F;&#x514B;&#x5229;&#x56E2;&#x961F;&#x7684;&#x7814;&#x7A76;&#x6210;&#x679C;&#x901A;&#x8FC7;Sun Microsystems&#x516C;&#x53F8;&#x7684;SPARC&#x5FAE;&#x5904;&#x7406;&#x5668;&#x67B6;&#x6784;&#x5546;&#x4E1A;&#x5316;&#x3002; &#x2003;&#x2003;&#x5C3D;&#x7BA1;&#x8BB8;&#x591A;&#x8BA1;&#x7B97;&#x673A;&#x67B6;&#x6784;&#x5E08;&#x6700;&#x521D;&#x5BF9;RISC&#x6301;&#x6000;&#x7591;&#x6001;&#x5EA6;&#xFF0C;&#x4F46;MIPS&#x548C;SPARC&#x5E02;&#x573A;&#x5316;&#x7684;&#x6210;&#x529F;&#xFF0C;RISC&#x8BBE;&#x8BA1;&#x8F83;&#x4F4E;&#x7684;&#x751F;&#x4EA7;&#x6210;&#x672C;&#xFF0C;&#x4EE5;&#x53CA;&#x66F4;&#x591A;&#x7684;&#x7814;&#x7A76;&#x8FDB;&#x5C55;&#xFF0C;&#x4F7F;RISC&#x5F97;&#x5230;&#x4E86;&#x4E1A;&#x754C;&#x7684;&#x5E7F;&#x6CDB;&#x63A5;&#x7EB3;&#x3002;&#x5230;20&#x4E16;&#x7EAA;90&#x5E74;&#x4EE3;&#x4E2D;&#x671F;&#xFF0C;RISC&#x5FAE;&#x5904;&#x7406;&#x5668;&#x5DF2;&#x7ECF;&#x5728;&#x6574;&#x4E2A;&#x9886;&#x57DF;&#x5360;&#x636E;&#x4E3B;&#x5BFC;&#x5730;&#x4F4D;&#x3002; &#x7EA6;&#x7FF0;&#xB7;&#x8F69;&#x5C3C;&#x8BD7;(John L. Hennessy) &#x2003;&#x2003;&#x7EA6;&#x7FF0;&#xB7;&#x8F69;&#x5C3C;&#x8BD7;&#xFF0C;&#x4E3A; MIPS &#x79D1;&#x6280;&#x516C;&#x53F8;&#x521B;&#x59CB;&#x4EBA;&#xFF0C;&#x7B2C;&#x5341;&#x4EFB;&#x65AF;&#x5766;&#x798F;&#x5927;&#x5B66;&#x6821;&#x957F;&#x3001;Alphabet&#x516C;&#x53F8;&#x8463;&#x4E8B;&#x957F;&#x3002; &#x2003;&#x2003;Hennessy&#x51FA;&#x751F;&#x4E8E;1953&#x5E74;&#x3002; &#x2003;&#x2003;1973&#x5E74;&#xFF0C;&#x4ED6;&#x4ECE;&#x7EF4;&#x62C9;&#x8BFA;&#x74E6;&#x5927;&#x5B66;&#x83B7;&#x53D6;&#x7535;&#x673A;&#x5DE5;&#x7A0B;&#x5B66;&#x58EB;&#x5B66;&#x4F4D;&#x3002; &#x2003;&#x2003;1975&#x5E74;&#x4EE5;&#x53CA;1977&#x5E74;&#xFF0C;&#x5206;&#x522B;&#x4ECE;&#x7EBD;&#x7EA6;&#x77F3;&#x6EAA;&#x5927;&#x5B66;&#x83B7;&#x53D6;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x7855;&#x58EB;&#x53CA;&#x535A;&#x58EB;&#x5B66;&#x4F4D;&#x3002; &#x2003;&#x2003;1977&#x5E74;&#x6210;&#x4E3A;&#x65AF;&#x5766;&#x798F;&#x5927;&#x5B66;&#x7684;&#x6559;&#x5E08;&#x3002; &#x2003;&#x2003;1981&#x5E74;&#xFF0C;&#x4ED6;&#x5F00;&#x59CB;&#x8FDB;&#x884C;MIPS&#x9879;&#x76EE;&#xFF0C;&#x5E76;&#x7814;&#x7A76;RISC&#x5904;&#x7406;&#x5668;&#x3002; &#x2003;&#x2003;1984&#x5E74;&#xFF0C;&#x4ED6;&#x5229;&#x7528;&#x5E74;&#x5EA6;&#x4F11;&#x5047;&#x7684;&#x65F6;&#x95F4;&#x521B;&#x5EFA;&#x4E86; MIPS Computer Systems Inc.&#xFF0C;&#x5C06;&#x4ED6;&#x7814;&#x7A76;&#x5F00;&#x53D1;&#x7684;&#x6280;&#x672F;&#x8FDB;&#x884C;&#x5546;&#x4E1A;&#x5316;&#x3002; &#x2003;&#x2003;1987&#x5E74;&#xFF0C;&#x4ED6;&#x6210;&#x4E3A;&#x7535;&#x6C14;&#x5DE5;&#x7A0B;&#x548C;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x7684; Willard &#x548C; Inez Kerr Bell &#x6559;&#x6388;&#x3002; &#x2003;&#x2003;1989&#x5E74;&#x5230;1993&#x5E74;&#xFF0C;Hennessy&#x62C5;&#x4EFB;&#x4E86;&#x65AF;&#x5766;&#x798F;&#x5927;&#x5B66;&#x8BA1;&#x7B97;&#x673A;&#x7CFB;&#x7EDF;&#x5B9E;&#x9A8C;&#x5BA4;&#x4E3B;&#x4EFB;&#x3002; &#x2003;&#x2003;1994&#x5E74;&#x5230;1996&#x5E74;&#xFF0C;&#x4ED6;&#x66FE;&#x62C5;&#x4EFB;&#x65AF;&#x5766;&#x798F;&#x5927;&#x5B66;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x7CFB;&#x4E3B;&#x4EFB;&#x3002; &#x2003;&#x2003;1996&#x5E74;&#x5230;1999&#x5E74;&#xFF0C;&#x4ED6;&#x62C5;&#x4EFB;&#x65AF;&#x5766;&#x798F;&#x5927;&#x5B66;&#x5DE5;&#x7A0B;&#x5B66;&#x9662;&#x9662;&#x957F;&#x3002; &#x2003;&#x2003;1999&#x5E74;&#xFF0C;&#x65AF;&#x5766;&#x798F;&#x5927;&#x5B66;&#x6821;&#x957F;&#x683C;&#x54C8;&#x5FB7;&#xB7;&#x5361;&#x65AF;&#x5E15;&#xFF08;Gerhard Casper&#xFF09;&#x4EFB;&#x547D;Hennessy&#x63A5;&#x4EFB;&#x65AF;&#x5766;&#x798F;&#x5927;&#x5B66;&#x6559;&#x52A1;&#x957F;&#x3002; &#x2003;&#x2003;&#x968F;&#x540E; 2000&#x5E74;&#x5361;&#x65AF;&#x5E15;&#x5378;&#x4EFB;&#x540E;&#xFF0C;&#x65AF;&#x5766;&#x798F;&#x8463;&#x4E8B;&#x4F1A;&#x4EFB;&#x547D;Hennessy&#x63A5;&#x66FF;&#x5361;&#x65AF;&#x5E15;&#x51FA;&#x4EFB;&#x6821;&#x957F;&#x4E00;&#x804C;&#xFF0C;&#x5E76;&#x4E00;&#x76F4;&#x5EF6;&#x7EED;&#x5230; 2016&#x5E74;&#x3002;&#x5728;&#x8FD9;&#x6BB5;&#x65F6;&#x95F4;&#x5185;&#x65AF;&#x5766;&#x798F;&#x5B8C;&#x6210;&#x4E86;&#x4ECE;&#x4E00;&#x4E2A;&#x5730;&#x533A;&#x6027;&#x6559;&#x80B2;&#x673A;&#x6784;&#x5230;&#x4E16;&#x754C;&#x9876;&#x7EA7;&#x5927;&#x5B66;&#x7684;&#x8715;&#x53D8;&#xFF0C;&#x65AF;&#x5766;&#x798F;&#x5916;&#x56F4;&#x7684;&#x7845;&#x8C37;&#x4E5F;&#x6210;&#x4E3A;&#x4E86;&#x4E16;&#x754C;&#x521B;&#x65B0;&#x7684;&#x5F15;&#x64CE;&#xFF0C;&#x800C;Hennessy&#x6559;&#x6388;&#x5219;&#x6210;&#x4E3A;&#x516C;&#x8BA4;&#x7684;&#x300C;&#x7845;&#x8C37;&#x6559;&#x7236;&#x300D;&#x3002; &#x2003;&#x2003;&#x6B64;&#x5916;&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;Hennessy&#x4ECE;2004&#x5E74;&#x8D77;&#x4FBF;&#x52A0;&#x5165;&#x4E86;Google&#xFF08;&#x540E;&#x6765;&#x7684;Alphabet&#x516C;&#x53F8;&#xFF09;&#x7684;&#x8463;&#x4E8B;&#x4F1A;&#xFF0C;&#x5E76;&#x4E8E;2007&#x5E74;&#x62C5;&#x4EFB;&#x72EC;&#x7ACB;&#x8463;&#x4E8B;&#x3002; &#x2003;&#x2003;&#x5728; 2018&#x5E74; 2 &#x6708;&#xFF0C;&#x4F34;&#x968F;&#x7740; Alphabet &#x516C;&#x53F8;&#xFF08;Google &#x7684;&#x6BCD;&#x516C;&#x53F8;&#xFF09;&#x53D1;&#x5E03; 2017&#x5E74;&#x8D22;&#x62A5;&#xFF0C;&#x8FD8;&#x540C;&#x65F6;&#x5BA3;&#x5E03; 66 &#x5C81;&#x7684;Hennessy&#x4E3A; Alphabet &#x7684;&#x7B2C;&#x4E09;&#x4EFB;&#x8463;&#x4E8B;&#x957F;&#x3002;&#xFF08;&#x96F7;&#x950B;&#x7F51;&#x66FE;&#x7ECF;&#x6709;&#x8BE6;&#x7EC6;&#x62A5;&#x9053;&#xFF1A;&#x5168;&#x5E74;&#x8425;&#x6536;&#x7834;&#x5343;&#x4EBF;&#x7F8E;&#x5143;&#x7684; Google&#xFF0C;&#x8FCE;&#x6765;&#x4E86; 20&#x5E74;&#x6765;&#x6700;&#x5927;&#x7684;&#x4EBA;&#x4E8B;&#x53D8;&#x52A8;&#xFF09; &#x2003;&#x2003;&#x5728;&#x7814;&#x7A76;&#x65B9;&#x9762;&#xFF0C;Hennessy&#x4E0E;Patterson&#x5171;&#x540C;&#x4E3A;RISC&#x5FAE;&#x5904;&#x7406;&#x5668;&#x521B;&#x5EFA;&#x4E86;&#x4E00;&#x4E2A;&#x7CFB;&#x7EDF;&#x7684;&#x91CF;&#x5316;&#x65B9;&#x6CD5;&#x3002;&#x540C;&#x65F6;&#x4ED6;&#x4EEC;&#x7F16;&#x5199;&#x7684;&#x300A;&#x8BA1;&#x7B97;&#x673A;&#x4F53;&#x7CFB;&#x7ED3;&#x6784;&#xFF08;&#x91CF;&#x5316;&#x7814;&#x7A76;&#x65B9;&#x6CD5;&#xFF09;&#x300B;&#xFF08;Computer Architecture: A Quantitative Approach&#xFF09;&#xFF0C;&#x4ECE;1990&#x5E74;&#x4EE5;&#x6765;&#x4E00;&#x76F4;&#x88AB;&#x5E7F;&#x6CDB;&#x7528;&#x4F5C;&#x7814;&#x7A76;&#x751F;&#x7684;&#x6743;&#x5A01;&#x6559;&#x6750;&#xFF0C;&#x53E6;&#x4E00;&#x65B9;&#x9762;&#xFF0C;Hennessy&#x5C06; Donald Knuth &#x7684; MIX &#x5904;&#x7406;&#x5668;&#x66F4;&#x65B0;&#x4E3A; MMIX &#x505A;&#x51FA;&#x4E86;&#x8D21;&#x732E;&#x3002; &#x2003;&#x2003;2004&#x5E74;&#xFF0C;&#x4ED6;1989&#x5E74;&#x5408;&#x4F5C;&#x7684;&#x4E00;&#x7BC7;&#x5173;&#x4E8E;&#x9AD8;&#x6027;&#x80FD;&#x7F13;&#x5B58;&#x5C42;&#x6B21;&#x7ED3;&#x6784;&#x7684;&#x8BBA;&#x6587;&#x83B7;&#x5F97;&#x4E86;&#x8BA1;&#x7B97;&#x673A;&#x68B0;&#x534F;&#x4F1A; SIGARCH ISCA &#x7684;&#x5F71;&#x54CD;&#x8BBA;&#x6587;&#x5956;&#x3002; &#x2003;&#x2003;2009&#x5E74;&#xFF0C;Hennessy&#x518D;&#x6B21;&#x83B7;&#x5F97;&#x8BE5;&#x5956;&#xFF0C;&#x8FD9;&#x6B21;&#x662F;&#x4ED6;&#x5728;1994&#x5E74;&#x5408;&#x4F5C;&#x7684;&#x6709;&#x5173;&#x65AF;&#x5766;&#x798F; FLASH &#x591A;&#x5904;&#x7406;&#x5668;&#x7684;&#x8BBA;&#x6587;&#x3002; &#x5927;&#x536B;&#xB7;&#x5E15;&#x7279;&#x68EE;(David A. Patterson) &#x2003;&#x2003;Patterson &#x51FA;&#x751F;&#x4E8E;1947&#x5E74;&#xFF0C; &#x2003;&#x2003;1969&#x5E74;&#x4ECE;&#x52A0;&#x5DDE;&#x5927;&#x5B66;&#x6D1B;&#x6749;&#x77F6;&#x5206;&#x6821;&#x83B7;&#x6570;&#x5B66;&#x5B66;&#x58EB;&#x5B66;&#x4F4D;&#x3002; &#x2003;&#x2003;1970&#x5E74;&#x548C;1976&#x5E74;&#xFF0C;&#x4ECE;&#x52A0;&#x5DDE;&#x5927;&#x5B66;&#x6D1B;&#x6749;&#x77F6;&#x5206;&#x6821;&#x5206;&#x522B;&#x83B7;&#x5F97;&#x8BA1;&#x7B97;&#x673A;&#x7855;&#x58EB;&#x548C;&#x535A;&#x58EB;&#x5B66;&#x4F4D;&#x3002; &#x2003;&#x2003;1976&#x5E74;&#xFF0C;&#x535A;&#x58EB;&#x6BD5;&#x4E1A;&#x540E;&#xFF0C;&#x52A0;&#x5165;&#x52A0;&#x5DDE;&#x5927;&#x5B66;&#x4F2F;&#x514B;&#x5229;&#x5206;&#x6821;&#x8BA1;&#x7B97;&#x673A;&#x7CFB;&#x3002; &#x2003;&#x2003;1994&#x5E74;&#xFF0C;&#x5F53;&#x9009;&#x7F8E;&#x56FD;&#x8BA1;&#x7B97;&#x673A;&#x534F;&#x4F1A;&#x4F1A;&#x58EB;&#xFF08;ACM Fellow&#xFF09;&#x3002; &#x2003;&#x2003;2004&#x5E74;&#x81F3; 2006&#x5E74;&#xFF0C;&#x4EFB;&#x7F8E;&#x56FD;&#x8BA1;&#x7B97;&#x673A;&#x534F;&#x4F1A;&#x4E3B;&#x5E2D;&#x3002; &#x2003;&#x2003;2016&#x5E74;&#xFF0C;DavidPatterson&#x6559;&#x6388;&#x5BA3;&#x5E03;&#x4ECE;&#x52A0;&#x5DDE;&#x5927;&#x5B66;&#x4F2F;&#x514B;&#x5229;&#x5206;&#x6821;&#x9000;&#x4F11;&#xFF0C;&#x5B66;&#x6821;&#x7ED9;&#x4ED6;&#x4E3E;&#x529E;&#x4E86;&#x4E00;&#x4E2A;&#x9000;&#x4F11;&#x5178;&#x793C;&#xFF0C;&#x7EAA;&#x5FF5;&#x4ED6;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x67B6;&#x6784;&#x65B9;&#x9762;&#x7684; 40&#x5E74;&#x5B66;&#x672F;&#x751F;&#x6DAF;&#x3002;&#x4E00;&#x5E74;&#x4E4B;&#x540E;&#xFF0C;&#x6559;&#x6388;&#x516C;&#x5F00;&#x5BA3;&#x5E03;&#x81EA;&#x5DF1;&#x52A0;&#x5165;&#x8C37;&#x6B4C; TPU &#x56E2;&#x961F;&#xFF0C;&#x8C37;&#x6B4C;&#x7684; TPU &#x8BBA;&#x6587;&#x4E2D;&#x4E5F;&#x6709;&#x4ED6;&#x7684;&#x7F72;&#x540D;&#x3002;&#xFF08;&#x96F7;&#x950B;&#x7F51;&#x8BE6;&#x7EC6;&#x62A5;&#x9053;&#xFF1A;David Patterson&#x6559;&#x6388;&#x516C;&#x5F00;&#x5BA3;&#x5E03;&#x52A0;&#x5165;&#x8C37;&#x6B4C;TPU&#x56E2;&#x961F;&#xFF0C;&#x597D;&#x620F;&#x624D;&#x521A;&#x521A;&#x5F00;&#x573A;&#xFF09; &#x2003;&#x2003;Patterson&#x6559;&#x6388;&#x5728;&#x4F2F;&#x514B;&#x5229;&#x5927;&#x5B66;&#x5E26;&#x9886;&#x56E2;&#x961F;&#x957F;&#x671F;&#x8FDB;&#x884C;RISC&#x7684;&#x7814;&#x7A76;&#xFF0C;&#x5BF9;&#x5168;&#x4E16;&#x754C;RISC&#x5904;&#x7406;&#x5668;&#x7684;&#x7814;&#x53D1;&#x548C;&#x76F8;&#x5173;&#x5E94;&#x7528;&#x505A;&#x51FA;&#x4E86;&#x5DE8;&#x5927;&#x8D21;&#x732E;&#xFF1B;&#x4ED6;&#x5728; 2003&#x5E74;&#x5230; 2005&#x5E74;&#x95F4;&#x662F;&#x7F8E;&#x56FD;&#x603B;&#x7EDF;&#x4FE1;&#x606F;&#x6280;&#x672F;&#x54A8;&#x8BE2;&#x59D4;&#x5458;&#x4F1A;&#x6210;&#x5458;&#xFF0C;2004 &#x5230; 2006&#x5E74;&#x95F4;&#x4EFB;&#x56FD;&#x9645;&#x8BA1;&#x7B97;&#x673A;&#x5B66;&#x4F1A;&#x4E3B;&#x5E2D;&#xFF1B;&#x4ED6;&#x8FD8;&#x662F;&#x78C1;&#x76D8;&#x9635;&#x5217; RAID &#x7684;&#x7814;&#x53D1;&#x8005;&#x4E4B;&#x4E00;&#x3002; &#x2003;&#x2003;&#x5A01;&#x65AF;&#x5EB7;&#x661F;&#x5927;&#x5B66;&#x9EA6;&#x8FEA;&#x900A;&#x5206;&#x6821;&#x8BA1;&#x7B97;&#x673A;&#x7CFB;&#x7684;&#x4E3B;&#x4EFB;Mark Hill&#x8BA4;&#x4E3A;&#xFF0C;Patterson&#x6559;&#x6388;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x67B6;&#x6784;&#x65B9;&#x9762;&#x662F;&#x300C;20&#x4E16;&#x7EAA;&#x540E;50&#x5E74;&#x91CC;&#x6700;&#x6770;&#x51FA;&#x7684;&#x51E0;&#x4E2A;&#x4EBA;&#x4E4B;&#x4E00;&#x300D;&#x3002;&#x4ED6;&#x540C;&#x65F6;&#x8FD8;&#x8868;&#x793A;&#xFF0C;Patterson&#x6559;&#x6388;&#x4E0E;Hennessy&#x6559;&#x6388;&#x5408;&#x8457;&#x7684;&#x90A3;&#x672C;&#x8BA1;&#x7B97;&#x673A;&#x67B6;&#x6784;&#x4E66;&#x662F;&#x8FD9;&#x4E2A;&#x9886;&#x57DF;&#x8FD1;25&#x5E74;&#x6765;&#x6700;&#x6709;&#x5F71;&#x54CD;&#x529B;&#x7684;&#x6559;&#x79D1;&#x4E66;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Computer Science</category>
        <category>Turing Reward</category>
      </categories>
  </entry>
</search>
